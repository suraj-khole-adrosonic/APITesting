<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="efe70e00-355c-4834-9298-82229a2f2fd8" activeEnvironment="Default" name="TC_API" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="5e9eb9aa-334f-45ac-b227-3216d545a72b" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="ReferenceByTradingCertificateTypes" path="/reference/tradingCertificateTypes" id="3253fe84-0796-424a-bb1e-9d34198a9e52"><con:settings/><con:parameters><con:parameter><con:name>sortAttribute</con:name><con:value>typeCode</con:value><con:style>QUERY</con:style><con:default>typeCode</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ReferenceByTradingCertificateTypes" id="98297f14-8116-4dcd-9e83-b50539192797" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ReferenceByTradingCertificateTypes" id="4834d0ff-353d-4c82-a971-63332f818c10" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/tradingCertificateTypes</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="sortAttribute" value="typeCode" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>sortAttribute</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="844b2b9c-34c1-414f-b17c-603d3f8f4839" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="ReferenceByTradingcertificateGroups" path="/reference/tradingcertificateGroups" id="7c1c49b6-a09b-40a7-9eb4-2db98564dfab"><con:settings/><con:parameters/><con:method name="ReferenceByTradingcertificateGroups" id="faafda76-e650-4b2b-ad46-2e544aee5c2a" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:request name="ReferenceByTradingcertificateGroups" id="97941379-c7e0-4c02-b2a6-33c967b4e981" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="31940856-0cd2-49cd-b6cf-78ecb3caf7f4" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="ReferenceBySignatoryStatesByCertTypeId" path="/reference/signatorystates/${#TestCase#tradingCertTypeId}" id="ba369ffc-e337-4d03-ac6c-087ddef41dcc"><con:settings/><con:parameters/><con:method name="ReferenceBySignatoryStatesByCertTypeId" id="ea6c884d-bb21-4a80-a650-19a3e9cfac88" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ReferenceBySignatoryStatesByCertTypeId" id="02e6e4a4-7465-4edb-85d1-72c122cede41" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="a74b7328-2b01-4e51-a566-2fc93fa6b3b9" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="RefBySignatoryStateAddressesBySignatoryStatesId" path="/reference/signatorystateaddresses/${#TestCase#stateId}" id="5ad1fece-8075-4ae9-b093-e4cd15ef6e29"><con:settings/><con:parameters/><con:method name="RefBySignatoryStateAddressesBySignatoryStatesId" id="9f6869be-015c-45e2-b738-4827b6b78c53" method="GET"><con:settings/><con:parameters/><con:request name="RefBySignatoryStateAddressesBySignatoryStatesId" id="0ceb06f5-f4da-4c55-a616-c74394ef400c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="5bc18d0d-2a10-4343-ba16-08f7e2854ff9" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="Reference​ByTradingCertificateTypes​ByTCGroupCode" path="/reference/tradingCertificateTypes/${#TestCase#groupCode}" id="f3526911-30f2-4b57-8f18-06f58fc044d1"><con:settings/><con:parameters/><con:method name="Reference​ByTradingCertificateTypes​ByTCGroupCode" id="559ae58b-f1ab-4263-b567-e3f12983b39a" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Reference​ByTradingCertificateTypes​ByTCGroupCode" id="60b9e02d-c099-459f-8e3b-2e6d2d42d309" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="73a21727-963d-466c-99f6-0ee15d0db105" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="ReferenceByInvalidCertificate" path="/reference/invalidCert" id="24cf2562-5e10-418e-96d0-7dc8014fcdf5"><con:settings/><con:parameters/><con:method name="ReferenceByInvalidCertificate" id="e6614616-6c23-403d-a3dc-cdf90a88bd1f" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="ReferenceByInvalidCertificate" id="45774e96-1ca2-47f5-953c-37023d5b3901" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>[
  {
    "id": 1234,
    "name": "Newstring",
    "reference": 56789,
    "vesselTypeShortCode": "FF",
    "vesselType": "FISH FARM VESSELS",
    "grossTonnage": 2000,
    "passengerCarryingCapacity": 0,
    "policyReference": 10125201,
    "policyStart": "2021-02-18T11:40:11.473Z",
    "policyEnd": "2022-02-18T11:40:11.473Z",
    "coverLimits": [
      {
        "id": 77,
        "coverShortName": "Passenger Vess Liab",
        "limitName": "Notwithstanding the limits above, cover will be subject to a combined single limit, each incident",
        "currencyCode": "USD",
        "amount": 500000000.00,
        "isThePrimaryCoverLimit": true
      }
    ]
  }
]</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/invalidCert</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="e4656ed0-32a1-45d8-91b2-e260f143c69b" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="ReferenceByTradingCertificateTypesByGroupByTypes" path="/reference/tradingCertificateTypes/${#TestCase#group}/types" id="9a4fe342-3ccc-44a1-88b8-472ea6d978b4"><con:settings/><con:parameters/><con:method name="ReferenceByTradingCertificateTypesByGroupByTypes" id="f0b22301-4185-4fe0-bc0c-fc844c0ffd7c" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ReferenceByTradingCertificateTypesByGroupByTypes" id="140ec35c-b04b-43e0-9240-be700d1f38b4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="24072768-f94e-4e6b-b4bb-2e5346ebbaaf" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="SignatoryStatesByCertificateTypeIdByStates" path="/signatorystates/${#TestCase#tradingCertTypeId}/states" id="38c6fd68-9c11-4477-9eac-736e30615ef9"><con:settings/><con:parameters/><con:method name="SignatoryStatesByCertificateTypeIdByStates" id="6602bf0e-0215-42d3-a52d-44b12ec7592d" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:request name="SignatoryStatesByCertificateTypeIdByStates" id="548e0007-78b3-450f-a79c-5fc0f48ba34e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="f939a240-0e91-4c02-8350-49e66b5a70d1" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="SignatureStatesByStateIdByAddresses" path="/signatorystates/${#TestCase#stateId}/addresses" id="318ddcae-d6ce-40f6-8d5d-98661ab55ff3"><con:settings/><con:parameters/><con:method name="SignatureStatesByStateIdByAddresses" id="7b0dd1fd-398b-4df2-8342-1de442b6bde5" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="SignatureStatesByStateIdByAddresses" id="80aedd0f-e2d9-470b-a3d4-193cf0f4a57e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/signatorystates/389/addresses</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="239ce03b-e02c-49f9-ac17-6bb3f6f9a12e" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="SignatoryStatesByCertTypeIdByStates" path="/signatorystates/${#TestCase#certTypeId}/states" id="bd6cd218-c771-4650-900e-6a1b8642b396"><con:settings/><con:parameters/><con:method name="SignatoryStatesByCertTypeIdByStates" id="451338bc-e704-41f4-866c-77e813fe62bc" method="GET"><con:settings/><con:parameters/><con:request name="SignatoryStatesByCertTypeIdByStates" id="1f11686e-080c-4b59-8cf4-0b5e08f95494" mediaType="application/json"><con:settings/><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="5600c16e-0a62-44c8-b51e-fd0e41d876dd" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="POST_TradingCertificateSave" path="/tradingcertificates/" id="f36db103-8a2b-498d-b486-9f2eb155cd29"><con:settings/><con:parameters/><con:method name="POST_TradingCertificateSave" id="87d21567-8c00-4f64-a50f-57731162d4ed" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="POST_TradingCertificateSave" id="f0efb725-78f1-47c2-a486-172c93cb9440" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="546c10de-c313-4def-a376-15eaa800f530" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="GET_TradingCertificateByCertificateId" path="/tradingcertificates/${#TestCase#certId}" id="ecd1f185-d8eb-4805-a619-649f1d3d0f53"><con:settings/><con:parameters/><con:method name="GET_TradingCertificateByCertificateId" id="5fe89452-dfbc-4a44-be98-4f693aacde35" method="GET"><con:settings/><con:parameters/><con:request name="GET_TradingCertificateByCertificateId" id="325ac480-28f6-4df9-9f1c-06b0aacf1498" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="551f6a6e-6003-44eb-9bd3-39a33a85858a" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="TradingCertificateValidationByCertificateId" path="/tradingcertificates/${#TestCase#certId}/validate" id="8fd3a469-bfab-4e6f-88f9-5e548e0da9fe"><con:settings/><con:parameters><con:parameter><con:name>tradingCertificateId</con:name><con:value>tradingCertificateId</con:value><con:style>TEMPLATE</con:style><con:default>tradingCertificateId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="TradingCertificateValidationByCertificateId" id="6940eb7e-ac7e-4314-a8d2-80b7f1879010" method="GET"><con:settings/><con:parameters/><con:request name="TradingCertificateValidationByCertificateId" id="6b80ff43-31b3-4de7-847a-a9bf7ff7a005" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tradingCertificateId" value="tradingCertificateId" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>tradingCertificateId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="c898d910-cb6f-4b0e-84ce-ae80ee49adec" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="TCByTCIDByGenerateDraftDocument" path="/tradingcertificates/${#TestCase#tradingCertificateId}/generateDraftDocument" id="c9b22432-85bc-43cb-b438-e37e5024476d"><con:settings/><con:parameters/><con:method name="TCByTCIDByGenerateDraftDocument" id="65e45c6d-2bbd-4e2a-97c5-28f697640e55" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:gen="https://tradingcerts-dev.azurewebsites.net/tradingcertificates/1/generateDraftDocument">gen:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:gen="https://tradingcerts-dev.azurewebsites.net/tradingcertificates/1/generateDraftDocument">gen:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="TCByTCIDByGenerateDraftDocument" id="ab2d1e5d-6901-47ae-83c7-505727c6c9ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/1/generateDraftDocument</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="c4d15267-47b8-4984-8eea-ffd4c89c5094" name="TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="dd7cbc3a-509b-49c7-9965-0a63eaaac548" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_TradingCertificateByTradingCertificateIDByGenerateDraftDocument" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="TradCertByTradCertIDByGenDraftDoc" id="1a7f8487-298c-46ef-ba15-2e73b073ec70"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#tradingCertificateId}/generateDraftDocument" methodName="TCByTCIDByGenerateDraftDocument" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TradCertByTradCertIDByGenDraftDoc" id="ab2d1e5d-6901-47ae-83c7-505727c6c9ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/1/generateDraftDocument</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="TradingCertificateByTradingCertificateIDByGenerateDraftDocument" id="39d8eadd-00a9-4e6c-a73a-b89627b82af0" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST method of  Trading Certificate By Trading Certificate ID By Generate Draft Document************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
/*
String sqlstmt=
		"""
		USE tradingcertificate
		Select 
		TOP 10
		TC.Id, TC.AddressType_Id, TC.SourceSystem, TC.Reference, TC.CurrentStatus, TC.StorageId, 
		TC.IsYacht, case when TC.IsYacht=0 then 'False' when TC.IsYacht=1 then 'True' else null end as IsYachtFlag,
		TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
		TC.isRenewal, case when TC.isRenewal = 1 then 'True' when TC.isRenewal = 0  then 'False' else NULL end as IsRenewalFlag, 
		TC.TradingCertificateVersion as version, TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, 
		TC.MemberName, TC.JointAssuredName, TC.OwnerReference, TC.OwnerName,TC.OwnerDomicile,TC.OwnerEmailAddress,
		TC.BrokerReference,TC.BrokerName,TC.BrokerEmailAddress,TC.PolicyYear,TC.CertificateIssueDate,
		TC.EmailAddress,TC.CCEmailAddress,TC.EffectiveStartDate,TC.EffectiveEndDate,TC.PassengerCapacity,TC.PolicyStartDate,
		TC.PolicyEndDate,TC.CurrencyCode, TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,
		TC.VesselEnteredDate,TC.VesselFlag,TC.ImoNumber,TC.DistinctiveNumbersOrLetters,TC.GrossTonnage,TC.YearBuilt,
		TC.EngineHorsePower,TC.TradeMark,TC.Model,TC.EngineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.PortOfRegistry,
		TC.TenderReferenceList,TC.TenderOutboardReferenceList,TC.Type_Id as TradingCertificateTypeId,RT.Id as TradingCertificateTypeId, 
		RT.Group_Id as GroupId, RG.Name as TradingCertificateGroupName,RG.GroupCode as TradingCertificateGroupCode, 
		RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName
		from TradingCertificate TC
		inner join ref_Type RT on RT.Id=TC.Type_Id
		inner join ref_Group RG on RG.Id=RT.Group_Id
		"""
*/
String sqlstmt="""
		USE tradingcertificate
		Select 
		top 200
		TC.Id, TC.AddressType_Id, TC.SourceSystem, TC.Reference, TC.CurrentStatus, TC.StorageId, TC.IsYacht, case when TC.IsYacht=0 then 'False' when TC.IsYacht=1 then 'True' else null end as IsYachtFlag,
		TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
		TC.isRenewal, case when TC.isRenewal = 1 then 'True' when TC.isRenewal = 0  then 'False' else NULL end as IsRenewalFlag, TC.TradingCertificateVersion as version,
		TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName, TC.JointAssuredName, TC.OwnerReference,
		TC.OwnerName,TC.OwnerDomicile,TC.OwnerEmailAddress,TC.BrokerReference,TC.BrokerName,TC.BrokerEmailAddress,TC.PolicyYear,TC.CertificateIssueDate,
		TC.EmailAddress,TC.CCEmailAddress,TC.EffectiveStartDate,TC.EffectiveEndDate,TC.PassengerCapacity,TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,
		TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,TC.VesselEnteredDate,TC.VesselFlag,TC.ImoNumber,TC.DistinctiveNumbersOrLetters,
		TC.GrossTonnage,TC.YearBuilt,TC.EngineHorsePower,TC.TradeMark,TC.Model,TC.EngineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.PortOfRegistry,
		TC.TenderReferenceList,TC.TenderOutboardReferenceList,TC.Type_Id as TradingCertificateTypeId,RT.Id as TradingCertificateTypeId, RT.Group_Id as GroupId, 
		RG.Name as TradingCertificateGroupName,RG.GroupCode as TradingCertificateGroupCode, RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName,
		ADRS.Id as AddressId, ADRS.AddressName, ADRS.AddressLine1, ADRS.AddressLine2, ADRS.AddressLine3, ADRS.StateOrCounty, ADRS.City, ADRS.Country, ADRS.PostCode, ADRS.PrimaryAddress,
		case when ADRS.PrimaryAddress=1 then 'true' when ADRS.PrimaryAddress=0 then 'false' else NULL end as PrimaryAddressFlag
		from TradingCertificate TC
		inner join ref_Type RT on RT.Id=TC.Type_Id
		inner join ref_Group RG on RG.Id=RT.Group_Id
		left join AddressSnapshot ADRS on ADRS.TradingCertificate_Id=TC.Id
		--where TC.Id=273016
"""		
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_POSTmethodofTradingCertificateByTradingCertificateIDByGenerateDraftDocument.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_POSTmethodofTradingCertificateByTradingCertificateIDByGenerateDraftDocument.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POSTmethodofTradingCertificateByTradingCertificateIDByGenerateDraftDocument.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_POSTmethodofTradingCertificateByTradingCertificateIDByGenerateDraftDocument"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_POSTmethodofTradingCertificateByTradingCertificateIDByGenerateDraftDocument"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POSTmethodofTradingCertificateByTradingCertificateIDByGenerateDraftDocument"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_Id"+","+"SQL_AddressType_Id"+","+"SQL_SourceSystem"+","+"SQL_Reference"+","+"SQL_CurrentStatus"+","+"SQL_StorageId"+","+"SQL_IsYacht"+","+"SQL_IsYachtFlag"+","+"SQL_RiskId"+","+"SQL_PolicyId"+","+"SQL_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"SQL_isRenewal"+","+"SQL_IsRenewalFlag"+","+"SQL_version"+","+"SQL_RiskReference"+","+"SQL_PolicyReference"+","+"SQL_MemberReference"+","+"SQL_MemberType"+","+"SQL_MemberName"+","+"SQL_JointAssuredName"+","+"SQL_OwnerReference"+","+"SQL_OwnerName"+","+"SQL_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"SQL_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"SQL_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"SQL_CCEmailAddress"+","+"SQL_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"SQL_VesselName"+","+"SQL_VesselType"+","+"SQL_VesselTypeName"+","+"SQL_VesselEnteredDate"+","+"SQL_VesselFlag"+","+"SQL_ImoNumber"+","+"SQL_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"SQL_YearBuilt"+","+"SQL_EngineHorsePower"+","+"SQL_TradeMark"+","+"SQL_Model"+","+"SQL_EngineNo"+","+"SQL_NominatedStateFlag"+","+"SQL_NominatedStateFlagName"+","+"SQL_PortOfRegistry"+","+"SQL_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateTypeId"+","+"SQL_GroupId"+","+"SQL_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"SQL_TradingCertificateTypeCode"+","+"SQL_TradingCertificateTypeName"+","+"SQL_AddressId"+","+"SQL_AddressName"+","+"SQL_AddressLine1"+","+"SQL_AddressLine2"+","+"SQL_AddressLine3"+","+"SQL_StateOrCounty"+","+"SQL_City"+","+"SQL_Country"+","+"SQL_PostCode"+","+"SQL_PrimaryAddress"+","+"SQL_PrimaryAddressFlag")
apiWriter.println("API_Id"+","+"API_AddressType_Id"+","+"API_SourceSystem"+","+"API_Reference"+","+"API_CurrentStatus"+","+"API_StorageId"+","+"API_IsYachtFlag"+","+"API_RiskId"+","+"API_PolicyId"+","+"API_MemberPartyId"+","+"API_OwnerPartyId"+","+"API_IsRenewalFlag"+","+"API_version"+","+"API_RiskReference"+","+"API_PolicyReference"+","+"API_MemberReference"+","+"API_MemberType"+","+"API_MemberName"+","+"API_JointAssuredName"+","+"API_OwnerReference"+","+"API_OwnerName"+","+"API_OwnerDomicile"+","+"API_OwnerEmailAddress"+","+"API_BrokerReference"+","+"API_BrokerName"+","+"API_BrokerEmailAddress"+","+"API_PolicyYear"+","+"API_CertificateIssueDate"+","+"API_EmailAddress"+","+"API_CCEmailAddress"+","+"API_EffectiveStartDate"+","+"API_EffectiveEndDate"+","+"API_PassengerCapacity"+","+"API_PolicyStartDate"+","+"API_PolicyEndDate"+","+"API_CurrencyCode"+","+"API_CoverLimitAmount"+","+"API_SignatoryState_Id"+","+"API_VesselName"+","+"API_VesselType"+","+"API_VesselTypeName"+","+"API_VesselEnteredDate"+","+"API_VesselFlag"+","+"API_ImoNumber"+","+"API_DistinctiveNumbersOrLetters"+","+"API_GrossTonnage"+","+"API_YearBuilt"+","+"API_EngineHorsePower"+","+"API_TradeMark"+","+"API_Model"+","+"API_EngineNo"+","+"API_NominatedStateFlag"+","+"API_NominatedStateFlagName"+","+"API_PortOfRegistry"+","+"API_TenderReferenceList"+","+"API_TenderOutboardReferenceList"+","+"API_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"API_GroupId"+","+"API_TradingCertificateGroupName"+","+"API_TradingCertificateGroupCode"+","+"API_TradingCertificateTypeCode"+","+"API_TradingCertificateTypeName"+","+"API_AddressId"+","+"API_AddressName"+","+"API_AddressLine1"+","+"API_AddressLine2"+","+"API_AddressLine3"+","+"API_StateOrCounty"+","+"API_City"+","+"API_Country"+","+"API_PostCode"+","+"API_PrimaryAddress")
compareWriter.println("SQL_Id"+","+"API_Id"+","+"SQL_AddressType_Id"+","+"API_AddressType_Id"+","+"SQL_SourceSystem"+","+"API_SourceSystem"+","+"SQL_Reference"+","+"API_Reference"+","+"SQL_CurrentStatus"+","+"API_CurrentStatus"+","+"SQL_StorageId"+","+"API_StorageId"+","+"SQL_RiskId"+","+"API_RiskId"+","+"SQL_PolicyId"+","+"API_PolicyId"+","+"SQL_MemberPartyId"+","+"API_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"API_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"API_BrokerPartyId"+","+"SQL_IsRenewalFlag"+","+"API_IsRenewalFlag"+","+"SQL_IsYachtFlag"+","+"API_IsYachtFlag"+","+"SQL_version"+","+"API_version"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_PolicyReference"+","+"API_PolicyReference"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberType"+","+"API_MemberType"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_JointAssuredName"+","+"API_JointAssuredName"+","+"SQL_OwnerReference"+","+"API_OwnerReference"+","+"SQL_OwnerName"+","+"API_OwnerName"+","+"SQL_OwnerDomicile"+","+"API_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"API_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"API_BrokerReference"+","+"SQL_BrokerName"+","+"API_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"API_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"API_PolicyYear"+","+"SQL_CertificateIssueDate"+","+"API_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_CCEmailAddress"+","+"API_CCEmailAddress"+","+"SQL_EffectiveStartDate"+","+"API_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"API_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"API_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"API_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"API_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"API_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"API_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"API_SignatoryState_Id"+","+"SQL_VesselName"+","+"API_VesselName"+","+"SQL_VesselType"+","+"API_VesselType"+","+"SQL_VesselTypeName"+","+"API_VesselTypeName"+","+"SQL_VesselEnteredDate"+","+"API_VesselEnteredDate"+","+"SQL_VesselFlag"+","+"API_VesselFlag"+","+"SQL_ImoNumber"+","+"API_ImoNumber"+","+"SQL_DistinctiveNumbersOrLetters"+","+"API_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"API_GrossTonnage"+","+"SQL_YearBuilt"+","+"API_YearBuilt"+","+"SQL_EngineHorsePower"+","+"API_EngineHorsePower"+","+"SQL_TradeMark"+","+"API_TradeMark"+","+"SQL_Model"+","+"API_Model"+","+"SQL_EngineNo"+","+"API_EngineNo"+","+"SQL_NominatedStateFlag"+","+"API_NominatedStateFlag"+","+"SQL_NominatedStateFlagName"+","+"API_NominatedStateFlagName"+","+"SQL_PortOfRegistry"+","+"API_PortOfRegistry"+","+"SQL_TenderReferenceList"+","+"API_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"API_TenderOutboardReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId1"+","+"SQL_GroupId"+","+"API_GroupId"+","+"SQL_TradingCertificateGroupName"+","+"API_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"API_TradingCertificateGroupCode"+","+"SQL_TradingCertificateTypeCode"+","+"API_TradingCertificateTypeCode"+","+"SQL_TradingCertificateTypeName"+","+"API_TradingCertificateTypeName"+","+"SQL_AddressId"+","+"API_AddressId"+","+"SQL_AddressName"+","+"API_AddressName"+","+"SQL_AddressLine1"+","+"API_AddressLine1"+","+"SQL_AddressLine2"+","+"API_AddressLine2"+","+"SQL_AddressLine3"+","+"API_AddressLine3"+","+"SQL_StateOrCounty"+","+"API_StateOrCounty"+","+"SQL_City"+","+"API_City"+","+"SQL_Country"+","+"API_Country"+","+"SQL_PostCode"+","+"API_PostCode"+","+"SQL_PrimaryAddress"+","+"API_PrimaryAddress"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter=0

def rows=con.rows(sqlstmt)  
int db_size=rows.size
//log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->
	sql_Id=row.Id
	sql_AddressType_Id=row.AddressType_Id
	sql_SourceSystem=row.SourceSystem
	sql_Reference=row.Reference
	sql_CurrentStatus=row.CurrentStatus
	sql_StorageId=row.StorageId
	sql_IsYacht=row.IsYacht
	sql_IsYachtFlag=row.IsYachtFlag
	sql_RiskId=row.RiskId
	sql_PolicyId=row.PolicyId
	sql_MemberPartyId=row.MemberPartyId
	sql_OwnerPartyId=row.OwnerPartyId
	sql_BrokerPartyId=row.BrokerPartyId
	sql_isRenewal=row.isRenewal
	sql_IsRenewalFlag=row.IsRenewalFlag
	sql_version=row.version
	sql_RiskReference=row.RiskReference
	sql_PolicyReference=row.PolicyReference
	sql_MemberReference=row.MemberReference
	sql_MemberType=row.MemberType
	sql_MemberName=row.MemberName
	sql_JointAssuredName=row.JointAssuredName
	sql_OwnerReference=row.OwnerReference
	sql_OwnerName=row.OwnerName
	sql_OwnerDomicile=row.OwnerDomicile
	sql_OwnerEmailAddress=row.OwnerEmailAddress
	sql_BrokerReference=row.BrokerReference
	sql_BrokerName=row.BrokerName
	sql_BrokerEmailAddress=row.BrokerEmailAddress
	sql_PolicyYear=row.PolicyYear
	sql_CertificateIssueDate=row.CertificateIssueDate
	sql_EmailAddress=row.EmailAddress
	sql_CCEmailAddress=row.CCEmailAddress
	sql_EffectiveStartDate=row.EffectiveStartDate
	sql_EffectiveEndDate=row.EffectiveEndDate
	sql_PassengerCapacity=row.PassengerCapacity
	sql_PolicyStartDate=row.PolicyStartDate
	sql_PolicyEndDate=row.PolicyEndDate
	sql_CurrencyCode=row.CurrencyCode
	sql_CoverLimitAmount=row.CoverLimitAmount
	sql_SignatoryState_Id=row.SignatoryState_Id
	sql_VesselName=row.VesselName
	sql_VesselType=row.VesselType
	sql_VesselTypeName=row.VesselTypeName
	sql_VesselEnteredDate=row.VesselEnteredDate
	sql_VesselFlag=row.VesselFlag
	sql_ImoNumber=row.ImoNumber
	sql_DistinctiveNumbersOrLetters=row.DistinctiveNumbersOrLetters
	sql_GrossTonnage=row.GrossTonnage
	sql_YearBuilt=row.YearBuilt
	sql_EngineHorsePower=row.EngineHorsePower
	sql_TradeMark=row.TradeMark
	sql_Model=row.Model
	sql_EngineNo=row.EngineNo
	sql_NominatedStateFlag=row.NominatedStateFlag
	sql_NominatedStateFlagName=row.NominatedStateFlagName
	sql_PortOfRegistry=row.PortOfRegistry
	sql_TenderReferenceList=row.TenderReferenceList
	sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_GroupId=row.GroupId
	sql_TradingCertificateGroupName=row.tradingCertificateGroupName
	sql_TradingCertificateGroupCode=row.tradingCertificateGroupCode
	sql_TradingCertificateTypeCode=row.TradingCertificateTypeCode
	sql_TradingCertificateTypeName=row.TradingCertificateTypeName
	sql_AddressId=row.AddressId
	sql_AddressName=row.AddressName
	sql_AddressLine1=row.AddressLine1
	sql_AddressLine2=row.AddressLine2
	sql_AddressLine3=row.AddressLine3
	sql_StateOrCounty=row.StateOrCounty
	sql_City=row.City
	sql_Country=row.Country
	sql_PostCode=row.PostCode
	sql_PrimaryAddress=row.PrimaryAddress
	sql_PrimaryAddressFlag=row.PrimaryAddress
	
	sqlWriter.println(sql_Id+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_isRenewal+","+sql_IsRenewalFlag+","+sql_version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CCEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_VesselEnteredDate+","+sql_VesselFlag+","+sql_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_PortOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+sql_GroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_AddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_PrimaryAddressFlag)
	log.info "SQL Response received as :"+sql_Id+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_isRenewal+","+sql_IsRenewalFlag+","+sql_version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CCEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_VesselEnteredDate+","+sql_VesselFlag+","+sql_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_PortOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+sql_GroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_AddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_PrimaryAddressFlag

	String tradingCertificateId = sql_Id.toString()
	testRunner.testCase.setPropertyValue("tradingCertificateId",tradingCertificateId)
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	//Run the test Step with name
	testRunner.runTestStepByName('TradCertByTradCertIDByGenDraftDoc')
	String req='${TradCertByTradCertIDByGenDraftDoc#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["TradCertByTradCertIDByGenDraftDoc"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		if (!jsonRes.HasError)
		{
				api_Id=jsonRes.id
				api_AddressType_Id=jsonRes.addressTypeId
				api_SourceSystem=jsonRes.sourceSystem
				api_Reference=jsonRes.reference
				api_CurrentStatus=jsonRes.currentStatus
				api_StorageId=jsonRes.storageId
				api_RiskId=jsonRes.riskId
				api_PolicyId=jsonRes.policyId
				api_MemberPartyId=jsonRes.memberPartyId
				api_OwnerPartyId=jsonRes.ownerPartyId
				api_BrokerPartyId=jsonRes.brokerPartyId
				api_IsRenewalFlag=jsonRes.isRenewal
				api_IsYachtFlag=jsonRes.isYacht
				api_version=jsonRes.version
				api_RiskReference=jsonRes.riskReference
				api_PolicyReference=jsonRes.policyReference
				api_MemberReference=jsonRes.memberReference
				api_MemberType=jsonRes.memberType
				api_MemberName=jsonRes.memberName
				api_JointAssuredName=jsonRes.jointAssuredName
				api_OwnerReference=jsonRes.ownerReference
				api_OwnerName=jsonRes.ownerName
				api_OwnerDomicile=jsonRes.ownerDomicile
				api_OwnerEmailAddress=jsonRes.ownerEmailAddress
				api_BrokerReference=jsonRes.brokerReference
				api_BrokerName=jsonRes.brokerName
				api_BrokerEmailAddress=jsonRes.brokerEmailAddress
				api_PolicyYear=jsonRes.policyYear
				api_CertificateIssueDate=jsonRes.certificateIssueDate
				api_EmailAddress=jsonRes.emailAddress
				api_CCEmailAddress=jsonRes.ccEmailAddress
				api_EffectiveStartDate=jsonRes.effectiveStartDate
				api_EffectiveEndDate=jsonRes.effectiveEndDate
				api_PassengerCapacity=jsonRes.passengerCapacity
				api_PolicyStartDate=jsonRes.policyStartDate
				api_PolicyEndDate=jsonRes.policyEndDate
				api_CurrencyCode=jsonRes.currencyCode
				api_CoverLimitAmount=jsonRes.coverLimitAmount
				api_SignatoryState_Id=jsonRes.signatoryStateId
				api_VesselName=jsonRes.vesselName
				api_VesselType=jsonRes.vesselType
				api_VesselTypeName=jsonRes.vesselTypeName
				api_VesselEnteredDate=jsonRes.vesselEnteredDate
				api_VesselFlag=jsonRes.vesselFlag
				api_ImoNumber=jsonRes.imoNumber
				api_DistinctiveNumbersOrLetters=jsonRes.distinctiveNumbersOrLetters
				api_GrossTonnage=jsonRes.grossTonnage
				api_YearBuilt=jsonRes.yearBuilt
				api_EngineHorsePower=jsonRes.engineHorsePower
				api_TradeMark=jsonRes.trademarkAndEngineModel
				api_Model=jsonRes.model
				api_EngineNo=jsonRes.engineNo
				api_NominatedStateFlag=jsonRes.nominatedFlagState
				api_NominatedStateFlagName=jsonRes.nominatedFlagStateName
				api_PortOfRegistry=jsonRes.portOfRegistry
				api_TenderReferenceList=jsonRes.tenderReferenceList
				api_TenderOutboardReferenceList=jsonRes.tenderOutboardReferenceList
				api_TradingCertificateTypeId=jsonRes.tradingCertificateTypeId
				api_TradingCertificateTypeId1=jsonRes.tradingCertificateType.id
				api_GroupId=jsonRes.tradingCertificateType.tradingCertificateGroup.id
				api_TradingCertificateGroupName=jsonRes.tradingCertificateType.tradingCertificateGroup.name
				api_TradingCertificateGroupCode=jsonRes.tradingCertificateType.tradingCertificateGroup.groupCode
				api_TradingCertificateTypeCode=jsonRes.tradingCertificateType.typeCode
				api_TradingCertificateTypeName=jsonRes.tradingCertificateType.typeName
				api_StateAddress=jsonRes.stateAddress
				api_OwnerAddress=jsonRes.ownerAddress
				api_BrokerAddress=jsonRes.brokerAddress
				api_MemberAddress=jsonRes.memberAddress
				api_JointAssuredAddress=jsonRes.jointAssuredAddress

				apiWriter.println(api_Id+","+api_AddressType_Id+","+api_SourceSystem+","+api_Reference+","+api_CurrentStatus+","+api_StorageId+","+api_IsYachtFlag+","+api_RiskId+","+api_PolicyId+","+api_MemberPartyId+","+api_OwnerPartyId+","+api_IsRenewalFlag+","+api_version+","+api_RiskReference+","+api_PolicyReference+","+api_MemberReference+","+api_MemberType+","+api_MemberName+","+api_JointAssuredName+","+api_OwnerReference+","+api_OwnerName+","+api_OwnerDomicile+","+api_OwnerEmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_BrokerEmailAddress+","+api_PolicyYear+","+api_CertificateIssueDate+","+api_EmailAddress+","+api_CCEmailAddress+","+api_EffectiveStartDate+","+api_EffectiveEndDate+","+api_PassengerCapacity+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_CurrencyCode+","+api_CoverLimitAmount+","+api_SignatoryState_Id+","+api_VesselName+","+api_VesselType+","+api_VesselTypeName+","+api_VesselEnteredDate+","+api_VesselFlag+","+api_ImoNumber+","+api_DistinctiveNumbersOrLetters+","+api_GrossTonnage+","+api_YearBuilt+","+api_EngineHorsePower+","+api_TradeMark+","+api_Model+","+api_EngineNo+","+api_NominatedStateFlag+","+api_NominatedStateFlagName+","+api_PortOfRegistry+","+api_TenderReferenceList+","+api_TenderOutboardReferenceList+","+api_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+api_GroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode+","+api_TradingCertificateTypeCode+","+api_TradingCertificateTypeName) //+","+api_AddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_PrimaryAddress)
				log.info "API Response is :" +api_Id+","+api_AddressType_Id+","+api_SourceSystem+","+api_Reference+","+api_CurrentStatus+","+api_StorageId+","+api_IsYachtFlag+","+api_RiskId+","+api_PolicyId+","+api_MemberPartyId+","+api_OwnerPartyId+","+api_IsRenewalFlag+","+api_version+","+api_RiskReference+","+api_PolicyReference+","+api_MemberReference+","+api_MemberType+","+api_MemberName+","+api_JointAssuredName+","+api_OwnerReference+","+api_OwnerName+","+api_OwnerDomicile+","+api_OwnerEmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_BrokerEmailAddress+","+api_PolicyYear+","+api_CertificateIssueDate+","+api_EmailAddress+","+api_CCEmailAddress+","+api_EffectiveStartDate+","+api_EffectiveEndDate+","+api_PassengerCapacity+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_CurrencyCode+","+api_CoverLimitAmount+","+api_SignatoryState_Id+","+api_VesselName+","+api_VesselType+","+api_VesselTypeName+","+api_VesselEnteredDate+","+api_VesselFlag+","+api_ImoNumber+","+api_DistinctiveNumbersOrLetters+","+api_GrossTonnage+","+api_YearBuilt+","+api_EngineHorsePower+","+api_TradeMark+","+api_Model+","+api_EngineNo+","+api_NominatedStateFlag+","+api_NominatedStateFlagName+","+api_PortOfRegistry+","+api_TenderReferenceList+","+api_TenderOutboardReferenceList+","+api_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+api_GroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode+","+api_TradingCertificateTypeCode+","+api_TradingCertificateTypeName //+","+api_AddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_PrimaryAddress

				if(api_Id.toString().toUpperCase().equals(sql_Id.toString().toUpperCase()) && api_AddressType_Id.toString().toUpperCase().equals(sql_AddressType_Id.toString().toUpperCase()) && api_SourceSystem.toString().toUpperCase().equals(sql_SourceSystem.toString().toUpperCase()) && api_Reference.toString().toUpperCase().equals(sql_Reference.toString().toUpperCase()) && api_CurrentStatus.toString().toUpperCase().equals(sql_CurrentStatus.toString().toUpperCase()) && api_StorageId.toString().toUpperCase().equals(sql_StorageId.toString().toUpperCase()) && api_RiskId.toString().toUpperCase().equals(sql_RiskId.toString().toUpperCase()) && api_PolicyId.toString().toUpperCase().equals(sql_PolicyId.toString().toUpperCase()) && api_MemberPartyId.toString().toUpperCase().equals(sql_MemberPartyId.toString().toUpperCase()) && api_OwnerPartyId.toString().toUpperCase().equals(sql_OwnerPartyId.toString().toUpperCase()) && api_BrokerPartyId.toString().toUpperCase().equals(sql_BrokerPartyId.toString().toUpperCase()) && api_IsRenewalFlag.toString().toUpperCase().equals(sql_IsRenewalFlag.toString().toUpperCase()) && api_IsYachtFlag.toString().toUpperCase().equals(sql_IsYachtFlag.toString().toUpperCase()) && api_version.toString().toUpperCase().equals(sql_version.toString().toUpperCase()) && api_RiskReference.toString().toUpperCase().equals(sql_RiskReference.toString().toUpperCase()) && api_PolicyReference.toString().toUpperCase().equals(sql_PolicyReference.toString().toUpperCase()) && api_MemberReference.toString().toUpperCase().equals(sql_MemberReference.toString().toUpperCase()) && api_MemberType.toString().toUpperCase().equals(sql_MemberType.toString().toUpperCase()) && api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && api_JointAssuredName.toString().toUpperCase().equals(sql_JointAssuredName.toString().toUpperCase()) && api_OwnerReference.toString().toUpperCase().equals(sql_OwnerReference.toString().toUpperCase()) && api_OwnerName.toString().toUpperCase().equals(sql_OwnerName.toString().toUpperCase()) && api_OwnerDomicile.toString().toUpperCase().equals(sql_OwnerDomicile.toString().toUpperCase()) && api_OwnerEmailAddress.toString().toUpperCase().equals(sql_OwnerEmailAddress.toString().toUpperCase()) && api_BrokerReference.toString().toUpperCase().equals(sql_BrokerReference.toString().toUpperCase()) && api_BrokerName.toString().toUpperCase().equals(sql_BrokerName.toString().toUpperCase()) && api_BrokerEmailAddress.toString().toUpperCase().equals(sql_BrokerEmailAddress.toString().toUpperCase()) && api_PolicyYear.toString().toUpperCase().equals(sql_PolicyYear.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && api_CCEmailAddress.toString().toUpperCase().equals(sql_CCEmailAddress.toString().toUpperCase()) && api_PassengerCapacity.toString().toUpperCase().equals(sql_PassengerCapacity.toString().toUpperCase()) && api_CurrencyCode.toString().toUpperCase().equals(sql_CurrencyCode.toString().toUpperCase()) && api_CoverLimitAmount.toString().toUpperCase().equals(sql_CoverLimitAmount.toString().toUpperCase()) && api_SignatoryState_Id.toString().toUpperCase().equals(sql_SignatoryState_Id.toString().toUpperCase()) && api_VesselName.toString().toUpperCase().equals(sql_VesselName.toString().toUpperCase()) && api_VesselType.toString().toUpperCase().equals(sql_VesselType.toString().toUpperCase()) && api_VesselTypeName.toString().toUpperCase().equals(sql_VesselTypeName.toString().toUpperCase()) && api_VesselFlag.toString().toUpperCase().equals(sql_VesselFlag.toString().toUpperCase()) && api_ImoNumber.toString().toUpperCase().equals(sql_ImoNumber.toString().toUpperCase()) && api_DistinctiveNumbersOrLetters.toString().toUpperCase().equals(sql_DistinctiveNumbersOrLetters.toString().toUpperCase()) && api_GrossTonnage.toString().toUpperCase().equals(sql_GrossTonnage.toString().toUpperCase()) && api_YearBuilt.toString().toUpperCase().equals(sql_YearBuilt.toString().toUpperCase()) && api_EngineHorsePower.toString().toUpperCase().equals(sql_EngineHorsePower.toString().toUpperCase()) && api_TradeMark.toString().toUpperCase().equals(sql_TradeMark.toString().toUpperCase()) && api_Model.toString().toUpperCase().equals(sql_Model.toString().toUpperCase()) && api_EngineNo.toString().toUpperCase().equals(sql_EngineNo.toString().toUpperCase()) && api_NominatedStateFlag.toString().toUpperCase().equals(sql_NominatedStateFlag.toString().toUpperCase()) && api_NominatedStateFlagName.toString().toUpperCase().equals(sql_NominatedStateFlagName.toString().toUpperCase()) && api_PortOfRegistry.toString().toUpperCase().equals(sql_PortOfRegistry.toString().toUpperCase()) && api_TenderReferenceList.toString().toUpperCase().equals(sql_TenderReferenceList.toString().toUpperCase()) && api_TenderOutboardReferenceList.toString().toUpperCase().equals(sql_TenderOutboardReferenceList.toString().toUpperCase()) && api_TradingCertificateTypeId.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) && api_TradingCertificateTypeId1.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) && api_GroupId.toString().toUpperCase().equals(sql_GroupId.toString().toUpperCase()) && api_TradingCertificateGroupName.toString().toUpperCase().equals(sql_TradingCertificateGroupName.toString().toUpperCase()) && api_TradingCertificateGroupCode.toString().toUpperCase().equals(sql_TradingCertificateGroupCode.toString().toUpperCase()) && api_TradingCertificateTypeCode.toString().toUpperCase().equals(sql_TradingCertificateTypeCode.toString().toUpperCase()) && api_TradingCertificateTypeName.toString().toUpperCase().equals(sql_TradingCertificateTypeName.toString().toUpperCase()))// && api_AddressId.toString().equals(sql_AddressId.toString()) && api_AddressName.toString().toUpperCase().equals(sql_AddressName.toString().toUpperCase()) && api_AddressLine1.toString().toUpperCase().equals(sql_AddressLine1.toString().toUpperCase()) && api_AddressLine2.toString().toUpperCase().equals(sql_AddressLine2.toString().toUpperCase()) && api_AddressLine3.toString().toUpperCase().equals(sql_AddressLine3.toString().toUpperCase()) && api_StateOrCounty.toString().toUpperCase().equals(sql_StateOrCounty.toString().toUpperCase()) && api_City.toString().toUpperCase().equals(sql_City.toString().toUpperCase()) &&  api_Country.toString().toUpperCase().equals(sql_Country.toString().toUpperCase()) &&  api_PostCode.toString().toUpperCase().equals(sql_PostCode.toString().toUpperCase()) && api_PrimaryAddress.toString().toUpperCase().equals(sql_PrimaryAddress.toString().toUpperCase()))
				{
					compareWriter.println(sql_Id+","+api_Id+","+sql_AddressType_Id+","+api_AddressType_Id+","+sql_SourceSystem+","+api_SourceSystem+","+sql_Reference+","+api_Reference+","+sql_CurrentStatus+","+api_CurrentStatus+","+sql_StorageId+","+api_StorageId+","+sql_RiskId+","+api_RiskId+","+sql_PolicyId+","+api_PolicyId+","+sql_MemberPartyId+","+api_MemberPartyId+","+sql_OwnerPartyId+","+api_OwnerPartyId+","+sql_BrokerPartyId+","+api_BrokerPartyId+","+sql_IsRenewalFlag+","+api_IsRenewalFlag+","+sql_IsYachtFlag+","+api_IsYachtFlag+","+sql_version+","+api_version+","+sql_RiskReference+","+api_RiskReference+","+sql_PolicyReference+","+api_PolicyReference+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberType+","+api_MemberType+","+sql_MemberName+","+api_MemberName+","+sql_JointAssuredName+","+api_JointAssuredName+","+sql_OwnerReference+","+api_OwnerReference+","+sql_OwnerName+","+api_OwnerName+","+sql_OwnerDomicile+","+api_OwnerDomicile+","+sql_OwnerEmailAddress+","+api_OwnerEmailAddress+","+sql_BrokerReference+","+api_BrokerReference+","+sql_BrokerName+","+api_BrokerName+","+sql_BrokerEmailAddress+","+api_BrokerEmailAddress+","+sql_PolicyYear+","+api_PolicyYear+","+sql_CertificateIssueDate+","+api_CertificateIssueDate+","+sql_EmailAddress+","+api_EmailAddress+","+sql_CCEmailAddress+","+api_CCEmailAddress+","+sql_EffectiveStartDate+","+api_EffectiveStartDate+","+sql_EffectiveEndDate+","+api_EffectiveEndDate+","+sql_PassengerCapacity+","+api_PassengerCapacity+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_CoverLimitAmount+","+api_CoverLimitAmount+","+sql_SignatoryState_Id+","+api_SignatoryState_Id+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_VesselTypeName+","+api_VesselTypeName+","+sql_VesselEnteredDate+","+api_VesselEnteredDate+","+sql_VesselFlag+","+api_VesselFlag+","+sql_ImoNumber+","+api_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+api_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TradeMark+","+api_TradeMark+","+sql_Model+","+api_Model+","+sql_EngineNo+","+api_EngineNo+","+sql_NominatedStateFlag+","+api_NominatedStateFlag+","+sql_NominatedStateFlagName+","+api_NominatedStateFlagName+","+sql_PortOfRegistry+","+api_PortOfRegistry+","+sql_TenderReferenceList+","+api_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+sql_GroupId+","+api_GroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+"Test Case Passed")//sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_PrimaryAddress+","+api_PrimaryAddress+","+"Test Case Passed")
					log.info "Details are matching, hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_Id+","+api_Id+","+sql_AddressType_Id+","+api_AddressType_Id+","+sql_SourceSystem+","+api_SourceSystem+","+sql_Reference+","+api_Reference+","+sql_CurrentStatus+","+api_CurrentStatus+","+sql_StorageId+","+api_StorageId+","+sql_RiskId+","+api_RiskId+","+sql_PolicyId+","+api_PolicyId+","+sql_MemberPartyId+","+api_MemberPartyId+","+sql_OwnerPartyId+","+api_OwnerPartyId+","+sql_BrokerPartyId+","+api_BrokerPartyId+","+sql_IsRenewalFlag+","+api_IsRenewalFlag+","+sql_IsYachtFlag+","+api_IsYachtFlag+","+sql_version+","+api_version+","+sql_RiskReference+","+api_RiskReference+","+sql_PolicyReference+","+api_PolicyReference+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberType+","+api_MemberType+","+sql_MemberName+","+api_MemberName+","+sql_JointAssuredName+","+api_JointAssuredName+","+sql_OwnerReference+","+api_OwnerReference+","+sql_OwnerName+","+api_OwnerName+","+sql_OwnerDomicile+","+api_OwnerDomicile+","+sql_OwnerEmailAddress+","+api_OwnerEmailAddress+","+sql_BrokerReference+","+api_BrokerReference+","+sql_BrokerName+","+api_BrokerName+","+sql_BrokerEmailAddress+","+api_BrokerEmailAddress+","+sql_PolicyYear+","+api_PolicyYear+","+sql_CertificateIssueDate+","+api_CertificateIssueDate+","+sql_EmailAddress+","+api_EmailAddress+","+sql_CCEmailAddress+","+api_CCEmailAddress+","+sql_EffectiveStartDate+","+api_EffectiveStartDate+","+sql_EffectiveEndDate+","+api_EffectiveEndDate+","+sql_PassengerCapacity+","+api_PassengerCapacity+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_CoverLimitAmount+","+api_CoverLimitAmount+","+sql_SignatoryState_Id+","+api_SignatoryState_Id+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_VesselTypeName+","+api_VesselTypeName+","+sql_VesselEnteredDate+","+api_VesselEnteredDate+","+sql_VesselFlag+","+api_VesselFlag+","+sql_ImoNumber+","+api_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+api_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TradeMark+","+api_TradeMark+","+sql_Model+","+api_Model+","+sql_EngineNo+","+api_EngineNo+","+sql_NominatedStateFlag+","+api_NominatedStateFlag+","+sql_NominatedStateFlagName+","+api_NominatedStateFlagName+","+sql_PortOfRegistry+","+api_PortOfRegistry+","+sql_TenderReferenceList+","+api_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+sql_GroupId+","+api_GroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+"Test Case Passed")//sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_PrimaryAddress+","+api_PrimaryAddress+","+"Test Case Failed")
					log.info "Details are not matching, hence test case is failed"
				}

				
//				if(api_StateAddress.toString()!="null" || api_StateAddress.toString()!=""|| api_StateAddress.toString()!=null)
//				{
//					if(jsonRes.stateAddress.id.toString().equals(sql_AddressId.toString()))
//					{
//						api_AddressId=jsonRes.stateAddress.id
//						api_AddressName=jsonRes.stateAddress.addressName
//						api_AddressLine1=jsonRes.stateAddress.addressLine1
//						api_AddressLine2=jsonRes.stateAddress.addressLine2
//						api_AddressLine3=jsonRes.stateAddress.addressLine3
//						api_StateOrCounty=jsonRes.stateAddress.stateOrCounty
//						api_City=jsonRes.stateAddress.city
//						api_Country=jsonRes.stateAddress.country
//						api_PostCode=jsonRes.stateAddress.postCode
//						api_PrimaryAddress=jsonRes.stateAddress.primaryAddress
//		
//						apiWriter.println(api_Id+","+api_AddressType_Id+","+api_SourceSystem+","+api_Reference+","+api_CurrentStatus+","+api_StorageId+","+api_IsYachtFlag+","+api_RiskId+","+api_PolicyId+","+api_MemberPartyId+","+api_OwnerPartyId+","+api_IsRenewalFlag+","+api_version+","+api_RiskReference+","+api_PolicyReference+","+api_MemberReference+","+api_MemberType+","+api_MemberName+","+api_JointAssuredName+","+api_OwnerReference+","+api_OwnerName+","+api_OwnerDomicile+","+api_OwnerEmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_BrokerEmailAddress+","+api_PolicyYear+","+api_CertificateIssueDate+","+api_EmailAddress+","+api_CCEmailAddress+","+api_EffectiveStartDate+","+api_EffectiveEndDate+","+api_PassengerCapacity+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_CurrencyCode+","+api_CoverLimitAmount+","+api_SignatoryState_Id+","+api_VesselName+","+api_VesselType+","+api_VesselTypeName+","+api_VesselEnteredDate+","+api_VesselFlag+","+api_ImoNumber+","+api_DistinctiveNumbersOrLetters+","+api_GrossTonnage+","+api_YearBuilt+","+api_EngineHorsePower+","+api_TradeMark+","+api_Model+","+api_EngineNo+","+api_NominatedStateFlag+","+api_NominatedStateFlagName+","+api_PortOfRegistry+","+api_TenderReferenceList+","+api_TenderOutboardReferenceList+","+api_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+api_GroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode+","+api_TradingCertificateTypeCode+","+api_TradingCertificateTypeName+","+api_AddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_PrimaryAddress)
//						log.info "API Response is :" +api_Id+","+api_AddressType_Id+","+api_SourceSystem+","+api_Reference+","+api_CurrentStatus+","+api_StorageId+","+api_IsYachtFlag+","+api_RiskId+","+api_PolicyId+","+api_MemberPartyId+","+api_OwnerPartyId+","+api_IsRenewalFlag+","+api_version+","+api_RiskReference+","+api_PolicyReference+","+api_MemberReference+","+api_MemberType+","+api_MemberName+","+api_JointAssuredName+","+api_OwnerReference+","+api_OwnerName+","+api_OwnerDomicile+","+api_OwnerEmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_BrokerEmailAddress+","+api_PolicyYear+","+api_CertificateIssueDate+","+api_EmailAddress+","+api_CCEmailAddress+","+api_EffectiveStartDate+","+api_EffectiveEndDate+","+api_PassengerCapacity+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_CurrencyCode+","+api_CoverLimitAmount+","+api_SignatoryState_Id+","+api_VesselName+","+api_VesselType+","+api_VesselTypeName+","+api_VesselEnteredDate+","+api_VesselFlag+","+api_ImoNumber+","+api_DistinctiveNumbersOrLetters+","+api_GrossTonnage+","+api_YearBuilt+","+api_EngineHorsePower+","+api_TradeMark+","+api_Model+","+api_EngineNo+","+api_NominatedStateFlag+","+api_NominatedStateFlagName+","+api_PortOfRegistry+","+api_TenderReferenceList+","+api_TenderOutboardReferenceList+","+api_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+api_GroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode+","+api_TradingCertificateTypeCode+","+api_TradingCertificateTypeName+","+api_AddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_PrimaryAddress
//
//						if(api_Id.toString().toUpperCase().equals(sql_Id.toString().toUpperCase()) && api_AddressType_Id.toString().toUpperCase().equals(sql_AddressType_Id.toString().toUpperCase()) && api_SourceSystem.toString().toUpperCase().equals(sql_SourceSystem.toString().toUpperCase()) && api_Reference.toString().toUpperCase().equals(sql_Reference.toString().toUpperCase()) && api_CurrentStatus.toString().toUpperCase().equals(sql_CurrentStatus.toString().toUpperCase()) && api_StorageId.toString().toUpperCase().equals(sql_StorageId.toString().toUpperCase()) && api_RiskId.toString().toUpperCase().equals(sql_RiskId.toString().toUpperCase()) && api_PolicyId.toString().toUpperCase().equals(sql_PolicyId.toString().toUpperCase()) && api_MemberPartyId.toString().toUpperCase().equals(sql_MemberPartyId.toString().toUpperCase()) && api_OwnerPartyId.toString().toUpperCase().equals(sql_OwnerPartyId.toString().toUpperCase()) && api_BrokerPartyId.toString().toUpperCase().equals(sql_BrokerPartyId.toString().toUpperCase()) && api_IsRenewalFlag.toString().toUpperCase().equals(sql_IsRenewalFlag.toString().toUpperCase()) && api_IsYachtFlag.toString().toUpperCase().equals(sql_IsYachtFlag.toString().toUpperCase()) && api_version.toString().toUpperCase().equals(sql_version.toString().toUpperCase()) && api_RiskReference.toString().toUpperCase().equals(sql_RiskReference.toString().toUpperCase()) && api_PolicyReference.toString().toUpperCase().equals(sql_PolicyReference.toString().toUpperCase()) && api_MemberReference.toString().toUpperCase().equals(sql_MemberReference.toString().toUpperCase()) && api_MemberType.toString().toUpperCase().equals(sql_MemberType.toString().toUpperCase()) && api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && api_JointAssuredName.toString().toUpperCase().equals(sql_JointAssuredName.toString().toUpperCase()) && api_OwnerReference.toString().toUpperCase().equals(sql_OwnerReference.toString().toUpperCase()) && api_OwnerName.toString().toUpperCase().equals(sql_OwnerName.toString().toUpperCase()) && api_OwnerDomicile.toString().toUpperCase().equals(sql_OwnerDomicile.toString().toUpperCase()) && api_OwnerEmailAddress.toString().toUpperCase().equals(sql_OwnerEmailAddress.toString().toUpperCase()) && api_BrokerReference.toString().toUpperCase().equals(sql_BrokerReference.toString().toUpperCase()) && api_BrokerName.toString().toUpperCase().equals(sql_BrokerName.toString().toUpperCase()) && api_BrokerEmailAddress.toString().toUpperCase().equals(sql_BrokerEmailAddress.toString().toUpperCase()) && api_PolicyYear.toString().toUpperCase().equals(sql_PolicyYear.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && api_CCEmailAddress.toString().toUpperCase().equals(sql_CCEmailAddress.toString().toUpperCase()) && api_PassengerCapacity.toString().toUpperCase().equals(sql_PassengerCapacity.toString().toUpperCase()) && api_CurrencyCode.toString().toUpperCase().equals(sql_CurrencyCode.toString().toUpperCase()) && api_CoverLimitAmount.toString().toUpperCase().equals(sql_CoverLimitAmount.toString().toUpperCase()) && api_SignatoryState_Id.toString().toUpperCase().equals(sql_SignatoryState_Id.toString().toUpperCase()) && api_VesselName.toString().toUpperCase().equals(sql_VesselName.toString().toUpperCase()) && api_VesselType.toString().toUpperCase().equals(sql_VesselType.toString().toUpperCase()) && api_VesselTypeName.toString().toUpperCase().equals(sql_VesselTypeName.toString().toUpperCase()) && api_VesselFlag.toString().toUpperCase().equals(sql_VesselFlag.toString().toUpperCase()) && api_ImoNumber.toString().toUpperCase().equals(sql_ImoNumber.toString().toUpperCase()) && api_DistinctiveNumbersOrLetters.toString().toUpperCase().equals(sql_DistinctiveNumbersOrLetters.toString().toUpperCase()) && api_GrossTonnage.toString().toUpperCase().equals(sql_GrossTonnage.toString().toUpperCase()) && api_YearBuilt.toString().toUpperCase().equals(sql_YearBuilt.toString().toUpperCase()) && api_EngineHorsePower.toString().toUpperCase().equals(sql_EngineHorsePower.toString().toUpperCase()) && api_TradeMark.toString().toUpperCase().equals(sql_TradeMark.toString().toUpperCase()) && api_Model.toString().toUpperCase().equals(sql_Model.toString().toUpperCase()) && api_EngineNo.toString().toUpperCase().equals(sql_EngineNo.toString().toUpperCase()) && api_NominatedStateFlag.toString().toUpperCase().equals(sql_NominatedStateFlag.toString().toUpperCase()) && api_NominatedStateFlagName.toString().toUpperCase().equals(sql_NominatedStateFlagName.toString().toUpperCase()) && api_PortOfRegistry.toString().toUpperCase().equals(sql_PortOfRegistry.toString().toUpperCase()) && api_TenderReferenceList.toString().toUpperCase().equals(sql_TenderReferenceList.toString().toUpperCase()) && api_TenderOutboardReferenceList.toString().toUpperCase().equals(sql_TenderOutboardReferenceList.toString().toUpperCase()) && api_TradingCertificateTypeId.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) && api_TradingCertificateTypeId1.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) && api_GroupId.toString().toUpperCase().equals(sql_GroupId.toString().toUpperCase()) && api_TradingCertificateGroupName.toString().toUpperCase().equals(sql_TradingCertificateGroupName.toString().toUpperCase()) && api_TradingCertificateGroupCode.toString().toUpperCase().equals(sql_TradingCertificateGroupCode.toString().toUpperCase()) && api_TradingCertificateTypeCode.toString().toUpperCase().equals(sql_TradingCertificateTypeCode.toString().toUpperCase()) && api_TradingCertificateTypeName.toString().toUpperCase().equals(sql_TradingCertificateTypeName.toString().toUpperCase()) && api_AddressId.toString().equals(sql_AddressId.toString()) && api_AddressName.toString().toUpperCase().equals(sql_AddressName.toString().toUpperCase()) && api_AddressLine1.toString().toUpperCase().equals(sql_AddressLine1.toString().toUpperCase()) && api_AddressLine2.toString().toUpperCase().equals(sql_AddressLine2.toString().toUpperCase()) && api_AddressLine3.toString().toUpperCase().equals(sql_AddressLine3.toString().toUpperCase()) && api_StateOrCounty.toString().toUpperCase().equals(sql_StateOrCounty.toString().toUpperCase()) && api_City.toString().toUpperCase().equals(sql_City.toString().toUpperCase()) &&  api_Country.toString().toUpperCase().equals(sql_Country.toString().toUpperCase()) &&  api_PostCode.toString().toUpperCase().equals(sql_PostCode.toString().toUpperCase()) && api_PrimaryAddress.toString().toUpperCase().equals(sql_PrimaryAddress.toString().toUpperCase()))
//						{
//							compareWriter.println(sql_Id+","+api_Id+","+sql_AddressType_Id+","+api_AddressType_Id+","+sql_SourceSystem+","+api_SourceSystem+","+sql_Reference+","+api_Reference+","+sql_CurrentStatus+","+api_CurrentStatus+","+sql_StorageId+","+api_StorageId+","+sql_RiskId+","+api_RiskId+","+sql_PolicyId+","+api_PolicyId+","+sql_MemberPartyId+","+api_MemberPartyId+","+sql_OwnerPartyId+","+api_OwnerPartyId+","+sql_BrokerPartyId+","+api_BrokerPartyId+","+sql_IsRenewalFlag+","+api_IsRenewalFlag+","+sql_IsYachtFlag+","+api_IsYachtFlag+","+sql_version+","+api_version+","+sql_RiskReference+","+api_RiskReference+","+sql_PolicyReference+","+api_PolicyReference+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberType+","+api_MemberType+","+sql_MemberName+","+api_MemberName+","+sql_JointAssuredName+","+api_JointAssuredName+","+sql_OwnerReference+","+api_OwnerReference+","+sql_OwnerName+","+api_OwnerName+","+sql_OwnerDomicile+","+api_OwnerDomicile+","+sql_OwnerEmailAddress+","+api_OwnerEmailAddress+","+sql_BrokerReference+","+api_BrokerReference+","+sql_BrokerName+","+api_BrokerName+","+sql_BrokerEmailAddress+","+api_BrokerEmailAddress+","+sql_PolicyYear+","+api_PolicyYear+","+sql_CertificateIssueDate+","+api_CertificateIssueDate+","+sql_EmailAddress+","+api_EmailAddress+","+sql_CCEmailAddress+","+api_CCEmailAddress+","+sql_EffectiveStartDate+","+api_EffectiveStartDate+","+sql_EffectiveEndDate+","+api_EffectiveEndDate+","+sql_PassengerCapacity+","+api_PassengerCapacity+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_CoverLimitAmount+","+api_CoverLimitAmount+","+sql_SignatoryState_Id+","+api_SignatoryState_Id+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_VesselTypeName+","+api_VesselTypeName+","+sql_VesselEnteredDate+","+api_VesselEnteredDate+","+sql_VesselFlag+","+api_VesselFlag+","+sql_ImoNumber+","+api_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+api_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TradeMark+","+api_TradeMark+","+sql_Model+","+api_Model+","+sql_EngineNo+","+api_EngineNo+","+sql_NominatedStateFlag+","+api_NominatedStateFlag+","+sql_NominatedStateFlagName+","+api_NominatedStateFlagName+","+sql_PortOfRegistry+","+api_PortOfRegistry+","+sql_TenderReferenceList+","+api_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+sql_GroupId+","+api_GroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_PrimaryAddress+","+api_PrimaryAddress+","+"Test Case Passed")
//							log.info "Details are matching, hence test case is passed"
//						}						
//					}
//					else 
//					{
//						if(api_Id.toString().toUpperCase().equals(sql_Id.toString().toUpperCase()) && api_AddressType_Id.toString().toUpperCase().equals(sql_AddressType_Id.toString().toUpperCase()) && api_SourceSystem.toString().toUpperCase().equals(sql_SourceSystem.toString().toUpperCase()) && api_Reference.toString().toUpperCase().equals(sql_Reference.toString().toUpperCase()) && api_CurrentStatus.toString().toUpperCase().equals(sql_CurrentStatus.toString().toUpperCase()) && api_StorageId.toString().toUpperCase().equals(sql_StorageId.toString().toUpperCase()) && api_RiskId.toString().toUpperCase().equals(sql_RiskId.toString().toUpperCase()) && api_PolicyId.toString().toUpperCase().equals(sql_PolicyId.toString().toUpperCase()) && api_MemberPartyId.toString().toUpperCase().equals(sql_MemberPartyId.toString().toUpperCase()) && api_OwnerPartyId.toString().toUpperCase().equals(sql_OwnerPartyId.toString().toUpperCase()) && api_BrokerPartyId.toString().toUpperCase().equals(sql_BrokerPartyId.toString().toUpperCase()) && api_IsRenewalFlag.toString().toUpperCase().equals(sql_IsRenewalFlag.toString().toUpperCase()) && api_IsYachtFlag.toString().toUpperCase().equals(sql_IsYachtFlag.toString().toUpperCase()) && api_version.toString().toUpperCase().equals(sql_version.toString().toUpperCase()) && api_RiskReference.toString().toUpperCase().equals(sql_RiskReference.toString().toUpperCase()) && api_PolicyReference.toString().toUpperCase().equals(sql_PolicyReference.toString().toUpperCase()) && api_MemberReference.toString().toUpperCase().equals(sql_MemberReference.toString().toUpperCase()) && api_MemberType.toString().toUpperCase().equals(sql_MemberType.toString().toUpperCase()) && api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && api_JointAssuredName.toString().toUpperCase().equals(sql_JointAssuredName.toString().toUpperCase()) && api_OwnerReference.toString().toUpperCase().equals(sql_OwnerReference.toString().toUpperCase()) && api_OwnerName.toString().toUpperCase().equals(sql_OwnerName.toString().toUpperCase()) && api_OwnerDomicile.toString().toUpperCase().equals(sql_OwnerDomicile.toString().toUpperCase()) && api_OwnerEmailAddress.toString().toUpperCase().equals(sql_OwnerEmailAddress.toString().toUpperCase()) && api_BrokerReference.toString().toUpperCase().equals(sql_BrokerReference.toString().toUpperCase()) && api_BrokerName.toString().toUpperCase().equals(sql_BrokerName.toString().toUpperCase()) && api_BrokerEmailAddress.toString().toUpperCase().equals(sql_BrokerEmailAddress.toString().toUpperCase()) && api_PolicyYear.toString().toUpperCase().equals(sql_PolicyYear.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && api_CCEmailAddress.toString().toUpperCase().equals(sql_CCEmailAddress.toString().toUpperCase()) && api_PassengerCapacity.toString().toUpperCase().equals(sql_PassengerCapacity.toString().toUpperCase()) && api_CurrencyCode.toString().toUpperCase().equals(sql_CurrencyCode.toString().toUpperCase()) && api_CoverLimitAmount.toString().toUpperCase().equals(sql_CoverLimitAmount.toString().toUpperCase()) && api_SignatoryState_Id.toString().toUpperCase().equals(sql_SignatoryState_Id.toString().toUpperCase()) && api_VesselName.toString().toUpperCase().equals(sql_VesselName.toString().toUpperCase()) && api_VesselType.toString().toUpperCase().equals(sql_VesselType.toString().toUpperCase()) && api_VesselTypeName.toString().toUpperCase().equals(sql_VesselTypeName.toString().toUpperCase()) && api_VesselFlag.toString().toUpperCase().equals(sql_VesselFlag.toString().toUpperCase()) && api_ImoNumber.toString().toUpperCase().equals(sql_ImoNumber.toString().toUpperCase()) && api_DistinctiveNumbersOrLetters.toString().toUpperCase().equals(sql_DistinctiveNumbersOrLetters.toString().toUpperCase()) && api_GrossTonnage.toString().toUpperCase().equals(sql_GrossTonnage.toString().toUpperCase()) && api_YearBuilt.toString().toUpperCase().equals(sql_YearBuilt.toString().toUpperCase()) && api_EngineHorsePower.toString().toUpperCase().equals(sql_EngineHorsePower.toString().toUpperCase()) && api_TradeMark.toString().toUpperCase().equals(sql_TradeMark.toString().toUpperCase()) && api_Model.toString().toUpperCase().equals(sql_Model.toString().toUpperCase()) && api_EngineNo.toString().toUpperCase().equals(sql_EngineNo.toString().toUpperCase()) && api_NominatedStateFlag.toString().toUpperCase().equals(sql_NominatedStateFlag.toString().toUpperCase()) && api_NominatedStateFlagName.toString().toUpperCase().equals(sql_NominatedStateFlagName.toString().toUpperCase()) && api_PortOfRegistry.toString().toUpperCase().equals(sql_PortOfRegistry.toString().toUpperCase()) && api_TenderReferenceList.toString().toUpperCase().equals(sql_TenderReferenceList.toString().toUpperCase()) && api_TenderOutboardReferenceList.toString().toUpperCase().equals(sql_TenderOutboardReferenceList.toString().toUpperCase()) && api_TradingCertificateTypeId.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) && api_TradingCertificateTypeId1.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) && api_GroupId.toString().toUpperCase().equals(sql_GroupId.toString().toUpperCase()) && api_TradingCertificateGroupName.toString().toUpperCase().equals(sql_TradingCertificateGroupName.toString().toUpperCase()) && api_TradingCertificateGroupCode.toString().toUpperCase().equals(sql_TradingCertificateGroupCode.toString().toUpperCase()) && api_TradingCertificateTypeCode.toString().toUpperCase().equals(sql_TradingCertificateTypeCode.toString().toUpperCase()) && api_TradingCertificateTypeName.toString().toUpperCase().equals(sql_TradingCertificateTypeName.toString().toUpperCase()))
//						{
//							compareWriter.println(sql_Id+","+api_Id+","+sql_AddressType_Id+","+api_AddressType_Id+","+sql_SourceSystem+","+api_SourceSystem+","+sql_Reference+","+api_Reference+","+sql_CurrentStatus+","+api_CurrentStatus+","+sql_StorageId+","+api_StorageId+","+sql_RiskId+","+api_RiskId+","+sql_PolicyId+","+api_PolicyId+","+sql_MemberPartyId+","+api_MemberPartyId+","+sql_OwnerPartyId+","+api_OwnerPartyId+","+sql_BrokerPartyId+","+api_BrokerPartyId+","+sql_IsRenewalFlag+","+api_IsRenewalFlag+","+sql_IsYachtFlag+","+api_IsYachtFlag+","+sql_version+","+api_version+","+sql_RiskReference+","+api_RiskReference+","+sql_PolicyReference+","+api_PolicyReference+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberType+","+api_MemberType+","+sql_MemberName+","+api_MemberName+","+sql_JointAssuredName+","+api_JointAssuredName+","+sql_OwnerReference+","+api_OwnerReference+","+sql_OwnerName+","+api_OwnerName+","+sql_OwnerDomicile+","+api_OwnerDomicile+","+sql_OwnerEmailAddress+","+api_OwnerEmailAddress+","+sql_BrokerReference+","+api_BrokerReference+","+sql_BrokerName+","+api_BrokerName+","+sql_BrokerEmailAddress+","+api_BrokerEmailAddress+","+sql_PolicyYear+","+api_PolicyYear+","+sql_CertificateIssueDate+","+api_CertificateIssueDate+","+sql_EmailAddress+","+api_EmailAddress+","+sql_CCEmailAddress+","+api_CCEmailAddress+","+sql_EffectiveStartDate+","+api_EffectiveStartDate+","+sql_EffectiveEndDate+","+api_EffectiveEndDate+","+sql_PassengerCapacity+","+api_PassengerCapacity+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_CoverLimitAmount+","+api_CoverLimitAmount+","+sql_SignatoryState_Id+","+api_SignatoryState_Id+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_VesselTypeName+","+api_VesselTypeName+","+sql_VesselEnteredDate+","+api_VesselEnteredDate+","+sql_VesselFlag+","+api_VesselFlag+","+sql_ImoNumber+","+api_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+api_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TradeMark+","+api_TradeMark+","+sql_Model+","+api_Model+","+sql_EngineNo+","+api_EngineNo+","+sql_NominatedStateFlag+","+api_NominatedStateFlag+","+sql_NominatedStateFlagName+","+api_NominatedStateFlagName+","+sql_PortOfRegistry+","+api_PortOfRegistry+","+sql_TenderReferenceList+","+api_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+sql_GroupId+","+api_GroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+"Test Case Passed")
//							log.info "Details are matching, hence test case is passed"
//						}
//					}
//				}
		}
	}
	else
	{
		log.info "Failed API response received as : "+response
	}

	counter = 1+counter
	log.info "Total records tested are : "+counter
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for POST method of  Trading Certificate By Trading Certificate ID By Generate Draft Document***********"

//api_CertificateIssueDate.toString().toUpperCase().equals(sql_CertificateIssueDate.toString().toUpperCase()) &&
//api_EffectiveStartDate.toString().toUpperCase().equals(sql_EffectiveStartDate.toString().toUpperCase()) &&
//api_EffectiveEndDate.toString().toUpperCase().equals(sql_EffectiveEndDate.toString().toUpperCase()) &&
//api_PolicyStartDate.toString().toUpperCase().equals(sql_PolicyStartDate.toString().toUpperCase()) &&
//api_PolicyEndDate.toString().toUpperCase().equals(sql_PolicyEndDate.toString().toUpperCase()) &&
//api_VesselEnteredDate.toString().toUpperCase().equals(sql_VesselEnteredDate.toString().toUpperCase()) &&

//if(api_StateAddress.toString()!="null"||api_StateAddress.toString()!="" || api_brokerAddress.toString()!="null" || api_ownerAddress.toString()!="null" || api_memberAddress.toString()!="null" || api_jointAssuredAddress.toString()!="null" )
//				{
//					if(jsonRes.stateAddress.id.toString().equals(sql_AddressId.toString()))
//					{
//						api_AddressId=jsonRes.stateAddress.id
//						api_AddressName=jsonRes.stateAddress.addressName
//						api_AddressLine1=jsonRes.stateAddress.addressLine1
//						api_AddressLine2=jsonRes.stateAddress.addressLine2
//						api_AddressLine3=jsonRes.stateAddress.addressLine3
//						api_StateOrCounty=jsonRes.stateAddress.stateOrCounty
//						api_City=jsonRes.stateAddress.city
//						api_Country=jsonRes.stateAddress.country
//						api_PostCode=jsonRes.stateAddress.postCode
//						api_PrimaryAddress=jsonRes.stateAddress.primaryAddress
//					}
//					else if(jsonRes.ownerAddress.id.toString().Equals(sql_AddressId.toString()))
//					{
//						api_AddressId=jsonRes.ownerAddress.id
//						api_AddressName=jsonRes.ownerAddress.addressName
//						api_AddressLine1=jsonRes.ownerAddress.addressLine1
//						api_AddressLine2=jsonRes.ownerAddress.addressLine2
//						api_AddressLine3=jsonRes.ownerAddress.addressLine3
//						api_StateOrCounty=jsonRes.ownerAddress.stateOrCounty
//						api_City=jsonRes.ownerAddress.city
//						api_Country=jsonRes.ownerAddress.country
//						api_PostCode=jsonRes.ownerAddress.postCode
//						api_PrimaryAddress=jsonRes.ownerAddress.primaryAddress
//					}
//					else if(jsonRes.brokerAddress.id.toString().Equals(sql_AddressId.toString()))
//					{
//						api_AddressId=jsonRes.brokerAddress.id
//						api_AddressName=jsonRes.brokerAddress.addressName
//						api_AddressLine1=jsonRes.brokerAddress.addressLine1
//						api_AddressLine2=jsonRes.brokerAddress.addressLine2
//						api_AddressLine3=jsonRes.brokerAddress.addressLine3
//						api_StateOrCounty=jsonRes.brokerAddress.stateOrCounty
//						api_City=jsonRes.brokerAddress.city
//						api_Country=jsonRes.brokerAddress.country
//						api_PostCode=jsonRes.brokerAddress.postCode
//						api_PrimaryAddress=jsonRes.brokerAddress.primaryAddress
//					}
//					else if(jsonRes.memberAddress.id.toString().Equals(sql_AddressId.toString()))
//					{
//						api_AddressId=jsonRes.memberAddress.id
//						api_AddressName=jsonRes.memberAddress.addressName
//						api_AddressLine1=jsonRes.memberAddress.addressLine1
//						api_AddressLine2=jsonRes.memberAddress.addressLine2
//						api_AddressLine3=jsonRes.memberAddress.addressLine3
//						api_StateOrCounty=jsonRes.memberAddress.stateOrCounty
//						api_City=jsonRes.memberAddress.city
//						api_Country=jsonRes.memberAddress.country
//						api_PostCode=jsonRes.memberAddress.postCode
//						api_PrimaryAddress=jsonRes.memberAddress.primaryAddress
//					}
//					else if(jsonRes.jointAssuredAddress.id.toString().Equals(sql_AddressId.toString()))
//					{
//						api_AddressId=jsonRes.jointAssuredAddress.id
//						api_AddressName=jsonRes.jointAssuredAddress.addressName
//						api_AddressLine1=jsonRes.jointAssuredAddress.addressLine1
//						api_AddressLine2=jsonRes.jointAssuredAddress.addressLine2
//						api_AddressLine3=jsonRes.jointAssuredAddress.addressLine3
//						api_StateOrCounty=jsonRes.jointAssuredAddress.stateOrCounty
//						api_City=jsonRes.jointAssuredAddress.city
//						api_Country=jsonRes.jointAssuredAddress.country
//						api_PostCode=jsonRes.jointAssuredAddress.postCode
//						api_PrimaryAddress=jsonRes.jointAssuredAddress.primaryAddress
//					}
//				}]]></script></con:config></con:testStep><con:properties><con:property><con:name>tradingCertificateId</con:name><con:value>7</con:value></con:property></con:properties></con:testCase><con:testCase id="e9fecff0-a9c6-47b2-afdb-898b0bab53fd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ReferenceByTradingCertificateTypes" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RefByTradingCertificateTypes" id="f71b1661-e11d-4afd-9d0f-aa2d89c2720b"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/tradingCertificateTypes" methodName="ReferenceByTradingCertificateTypes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByTradingCertificateTypes" id="4834d0ff-353d-4c82-a971-63332f818c10" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/tradingCertificateTypes</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="sortAttribute" value="typeCode" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>sortAttribute</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceByTradingCertificateTypes" id="d02b3ef0-28b5-4486-a2fe-4126282b0bb7" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Trading Certificate Types************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

String sqlstmt=
		"""
	USE tradingcertificate
	SELECT
	T.Id as TradingCertificateTypeId, T.Group_Id as TradingCertificateGroupId, G.Name as TradingCertificateGroupName , T.TypeCode, 
	T.Name as TradingCertificateTypeName
	from dbo.ref_Type as T
	left join dbo.ref_Group G on G.Id=T.Group_Id
	order by t.TypeCode	
		"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateTypes.csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateTypes.csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceByTradingCertificateTypes.csv"]

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateTypes"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateTypes"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceByTradingCertificateTypes"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"SQL_TypeCode"+","+"SQL_TradingCertificateTypeName")
apiWriter.println("API_TradingCertificateTypeId"+","+"API_TradingCertificateGroupId"+","+"API_TradingCertificateGroupName"+","+"API_TypeCode"+","+"API_TradingCertificateTypeName")
compareWriter.println("SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"API_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"API_TradingCertificateGroupName"+","+"SQL_TypeCode"+","+"API_TypeCode"+","+"SQL_TradingCertificateTypeName"+","+"API_TradingCertificateTypeName"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter=0

def rows=con.rows(sqlstmt)  
int db_size=rows.size
log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateGroupId=row.TradingCertificateGroupId
	sql_TradingCertificateGroupName=row.TradingCertificateGroupName
	sql_TypeCode=row.TypeCode
	sql_TradingCertificateTypeName=row.TradingCertificateTypeName
	
	sqlWriter.println(sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TypeCode+","+sql_TradingCertificateTypeName)
	log.info "SQL Response received as :"+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TypeCode+","+sql_TradingCertificateTypeName
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	//Run the test Step with name
	testRunner.runTestStepByName('RefByTradingCertificateTypes')
	String req='${RefByTradingCertificateTypes#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefByTradingCertificateTypes"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		for(int i=0; i<db_size; i++)
		{
			String newId = jsonRes.id[i]
			if(newId.toString().equals(sql_TradingCertificateTypeId.toString()))
			{
				api_TradingCertificateTypeId=jsonRes.id[i]
				api_TradingCertificateGroupId=jsonRes.tradingCertificateGroup.id[i]
				api_TradingCertificateGroupName=jsonRes.tradingCertificateGroup.name[i]
				api_TypeCode=jsonRes.typeCode[i]
				api_TradingCertificateTypeName=jsonRes.typeName[i]
	
				apiWriter.println(api_TradingCertificateTypeId+","+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_TypeCode+","+api_TradingCertificateTypeName)
				log.info "API responce received as : "+api_TradingCertificateTypeId+","+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_TypeCode+","+api_TradingCertificateTypeName
				
				if(api_TradingCertificateTypeId.toString().equals(sql_TradingCertificateTypeId.toString()) && api_TradingCertificateGroupId.toString().equals(sql_TradingCertificateGroupId.toString()) && api_TradingCertificateGroupName.toString().toUpperCase().equals(sql_TradingCertificateGroupName.toString().toUpperCase()) && api_TypeCode.toString().toUpperCase().equals(sql_TypeCode.toString().toUpperCase()) && api_TradingCertificateTypeName.toString().toUpperCase().equals(sql_TradingCertificateTypeName.toString().toUpperCase()))
				{
					compareWriter.println(sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TypeCode+","+api_TypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+"Test Case Passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TypeCode+","+api_TypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+"Test Case Failed")
					log.info "Details are not matching hence test case is failed"
				}
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
	counter = 1+counter
	log.info "Total records tested are : "+counter
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Trading Certificate Types***********"]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="01bbd3b5-41a8-4f22-b188-7930c2f19dda" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_Reference​ByTradingCertificateTypes​ByTCGroupCode" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Ref​ByTradingCertificateTypes​ByTCGroupCode" id="600c4bb6-9b1f-4487-b021-0a1c67802820"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/tradingCertificateTypes/${#TestCase#groupCode}" methodName="Reference​ByTradingCertificateTypes​ByTCGroupCode" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Ref​ByTradingCertificateTypes​ByTCGroupCode" id="60b9e02d-c099-459f-8e3b-2e6d2d42d309" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Reference​ByTradingCertificateTypes​ByTCGroupCode" id="891bd34f-9ab9-4fd6-9015-ec2f471fb9ea" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
//import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Trading Certificate Types By Group************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
	"""
	USE tradingcertificate 
	SELECT
	RT.Id as TradingCertificateTypeId, RG.Id as TradingCertificateGroupId, RG.GroupCode, RG.Name as TradingCertificateGroupName, RT.TypeCode, RT.Name
	from ref_Group RG
	inner join ref_Type RT on RT.Group_Id =RG.ID
	"""
	
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateTypesByGroup.csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateTypesByGroup.csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceByTradingCertificateTypesByGroup.csv"]

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateTypesByGroup"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateTypesByGroup"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_Response_ReferenceByTradingCertificateTypesByGroup"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"SQL_GroupCode"+","+"SQL_TradingCertificateGroupName"+","+"SQL_TypeCode"+","+"SQL_Name")
apiWriter.println("API_TradingCertificateTypeId"+","+"API_TradingCertificateGroupId"+","+"API_GroupCode"+","+"API_TradingCertificateGroupName"+","+"API_TypeCode"+","+"API_Name")
compareWriter.println("SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"API_TradingCertificateGroupId"+","+"SQL_GroupCode"+","+"API_GroupCode"+","+"SQL_TradingCertificateGroupName"+","+"API_TradingCertificateGroupName"+","+"SQL_TypeCode"+","+"API_TypeCode"+","+"SQL_Name"+","+"API_Name"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter = 0
String field=null

def rows=con.rows(sqlstmt)  
int db_size=rows.size
//log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->

	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateGroupId=row.TradingCertificateGroupId
	sql_GroupCode=row.GroupCode
	sql_TradingCertificateGroupName=row.TradingCertificateGroupName
	sql_TypeCode=row.TypeCode
	sql_Name=row.Name
	
	sqlWriter.println(sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_GroupCode+","+sql_TradingCertificateGroupName+","+sql_TypeCode+","+sql_Name)
	log.info "SQL Response received as :"+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_GroupCode+","+sql_TradingCertificateGroupName+","+sql_TypeCode+","+sql_Name

	//Set Id as parameter to test case level
	String groupCode = sql_GroupCode
	testRunner.testCase.setPropertyValue("groupCode", groupCode)
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	testRunner.runTestStepByName('Ref​ByTradingCertificateTypes​ByTCGroupCode')
	String req='${Ref​ByTradingCertificateTypes​ByTCGroupCode#Response}'
	response=context.expand(req)
	log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["Ref​ByTradingCertificateTypes​ByTCGroupCode"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		for(int i=0; i<db_size; i++)
		{
			String newId = jsonRes.id[i]
			//log.info "newId : "+newId
			if(newId.toString().equals(sql_TradingCertificateTypeId.toString()))
			{
				api_TradingCertificateTypeId=jsonRes.id[i]
				api_TradingCertificateGroupId=jsonRes.tradingCertificateGroup.id[i]
				api_TradingCertificateGroupName=jsonRes.tradingCertificateGroup.name[i]
				api_TypeCode=jsonRes.typeCode[i]
				api_Name=jsonRes.typeName[i]

				apiWriter.println(api_TradingCertificateTypeId+","+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_TypeCode+","+api_Name)
				log.info "API responce received as : "+api_TradingCertificateTypeId+","+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_TypeCode+","+api_Name
				
				if(sql_TradingCertificateTypeId.toString().equals(api_TradingCertificateTypeId.toString()) && sql_TradingCertificateGroupId.toString().equals(api_TradingCertificateGroupId.toString()) && sql_TradingCertificateGroupName.toString().toUpperCase().equals(api_TradingCertificateGroupName.toString().toUpperCase()) && sql_TypeCode.toString().toUpperCase().equals(api_TypeCode.toString().toUpperCase()) && sql_Name.toString().toUpperCase().equals(api_Name.toString().toUpperCase()))
				{
					compareWriter.println(sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_GroupCode+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TypeCode+","+api_TypeCode+","+sql_Name+","+api_Name+","+"Test Case Passed")
					log.info "Details are matching hence test case is passed"
					break;
				}
				else
				{
					compareWriter.println(sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_GroupCode+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TypeCode+","+api_TypeCode+","+sql_Name+","+api_Name+","+"Test Case Failed")
					log.info "Details are not matching hence test case is failed"
					break;
				}
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}	
	counter = 1+counter
	log.info "Total records tested are : "+counter
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Trading Certificate Types By Group***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>groupCode</con:name><con:value>TRADECERT</con:value></con:property></con:properties></con:testCase><con:testCase id="40d5050c-f405-4c9f-b55b-70469486a322" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ReferenceByTradingcertificateGroups" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RefByTradingcertificateGroups" id="97b34bf5-e931-41e7-a294-98ed93400f4d"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/tradingcertificateGroups" methodName="ReferenceByTradingcertificateGroups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByTradingcertificateGroups" id="97941379-c7e0-4c02-b2a6-33c967b4e981" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/tradingcertificateGroups</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceByTradingcertificateGroups" id="7cbece6d-384f-4dcb-913a-7a66220ba9f3" disabled="true"><con:settings/><con:config><script>import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Trading Certificate Groups************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
	"""
	USE tradingcertificate
	Select Id as TradingCertificateGroupId, Name as TradingCertificateGroupName
	from ref_Group
	"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateGroups.csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateGroups.csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceByTradingCertificateGroups.csv"]

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateGroups"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateGroups"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_Response_ReferenceByTradingCertificateGroups"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName")
apiWriter.println("API_TradingCertificateGroupId"+","+"API_TradingCertificateGroupName")
compareWriter.println("SQL_TradingCertificateGroupId"+","+"API_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"API_TradingCertificateGroupName"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

def rows=con.rows(sqlstmt)  
int db_size=rows.size
//log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->
	sql_TradingCertificateGroupId=row.TradingCertificateGroupId
	sql_TradingCertificateGroupName=row.TradingCertificateGroupName
	
	sqlWriter.println(sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName)
	log.info "SQL Response received as :"+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('RefByTradingcertificateGroups')
	String req='${RefByTradingcertificateGroups#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefByTradingcertificateGroups"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		for(int i=0; i&lt;db_size; i++)
		{
			String newId = jsonRes.id[i]
			if(newId.toString().equals(sql_TradingCertificateGroupId.toString()))
			{
				api_TradingCertificateGroupId=jsonRes.id[i]
				api_TradingCertificateGroupName=jsonRes.name[i]
	
				apiWriter.println(api_TradingCertificateGroupId+","+api_TradingCertificateGroupName)
				log.info "API responce received as : "+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName
				
				if(api_TradingCertificateGroupId.toString().equals(sql_TradingCertificateGroupId.toString()) &amp;&amp; api_TradingCertificateGroupName.toString().toUpperCase().equals(sql_TradingCertificateGroupName.toString().toUpperCase()))
				{
					compareWriter.println(sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+"Test Case Passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+"Test Case Failed")
					log.info "Details are not matching hence test case is failed"
				}
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Trading Certificate Groups***********"</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ed22fe66-941d-4182-b1bb-cde88e4db185" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_SignatoryStatesByCertificateTypeIdByStates" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="SigStatesByCertTypeIdByStates" id="7bdfa7a4-3293-4223-980a-53a12c43e179"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/signatorystates/${#TestCase#tradingCertTypeId}/states" methodName="SignatoryStatesByCertificateTypeIdByStates" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SigStatesByCertTypeIdByStates" id="548e0007-78b3-450f-a79c-5fc0f48ba34e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/signatorystates/5/states</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SignatoryStatesByCertificateTypeIdByStates" id="49f660fb-fdb5-4c41-95c0-4901d6a9d235" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Signatory States By Certificate Type Id By States***********"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
	"""
	USE tradingcertificate
	SELECT
	RSS.Id as SignatoryStateId, RC.Name as CountryName, RC.ShortName, rss.type_id as TradingCertTypeId
	FROM [dbo].[ref_SignatoryState] RSS 
	inner join ref_country RC 
	on RSS.country_id = RC.Id
	order by RC.name ASC
	"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_SignatoryStatesByCertificateTypeIdByStates.csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_SignatoryStatesByCertificateTypeIdByStates.csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_SignatoryStatesByCertificateTypeIdByStates.csv"]

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_SignatoryStatesByCertificateTypeIdByStates"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_SignatoryStatesByCertificateTypeIdByStates"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_Response_SignatoryStatesByCertificateTypeIdByStates"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_SignatoryStateId"+","+"SQL_CountryName"+","+"SQL_ShortName"+","+"SQL_TradingCertTypeId")
apiWriter.println("API_SignatoryStateId"+","+"API_CountryName"+","+"API_ShortName"+","+"API_TradingCertTypeId")
compareWriter.println("SQL_SignatoryStateId"+","+"API_SignatoryStateId"+","+"SQL_CountryName"+","+"API_CountryName"+","+"SQL_ShortName"+","+"API_ShortName"+","+"SQL_TradingCertTypeId"+","+"API_TradingCertTypeId"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
String field=null
int counter=0

def rows=con.rows(sqlstmt)  
int db_size=rows.size

con.eachRow(sqlstmt)
{	
	row ->
	sql_SignatoryStateId=row.SignatoryStateId
	sql_CountryName=row.CountryName
	field=sql_CountryName
	sql_CountryName=removeComma(field)
	sql_ShortName=row.ShortName
	sql_TradingCertTypeId=row.TradingCertTypeId
	
	sqlWriter.println(sql_SignatoryStateId+","+sql_CountryName+","+sql_ShortName+","+sql_TradingCertTypeId)
	log.info "SQL Response received as :"+sql_SignatoryStateId+","+sql_CountryName+","+sql_ShortName+","+sql_TradingCertTypeId

	//Set Id as parameter to test case level
	String tradingCertTypeId = sql_TradingCertTypeId
	testRunner.testCase.setPropertyValue("tradingCertTypeId", tradingCertTypeId)
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('SigStatesByCertTypeIdByStates')
	String req='${SigStatesByCertTypeIdByStates#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["SigStatesByCertTypeIdByStates"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		for(int i=0; i<db_size; i++)
		{
			String newId = jsonRes.id[i]
			if(newId.toString().equals(sql_SignatoryStateId.toString()))
			{
				api_SignatoryStateId=jsonRes.id[i]
				api_CountryName=jsonRes.name[i]
				field=api_CountryName
				api_CountryName=removeComma(field)
				api_ShortName=jsonRes.shortCode[i]
				api_TradingCertTypeId=jsonRes.tradingCertTypeId[i]

				apiWriter.println(api_SignatoryStateId+","+api_CountryName+","+api_ShortName+","+api_TradingCertTypeId)
				log.info "API responce received as : "+api_SignatoryStateId+","+api_CountryName+","+api_ShortName+","+api_TradingCertTypeId
				
				if(api_SignatoryStateId.toString().equals(sql_SignatoryStateId.toString()) && api_CountryName.toString().toUpperCase().equals(sql_CountryName.toString().toUpperCase()) && api_ShortName.toString().toUpperCase().equals(sql_ShortName.toString().toUpperCase()) && api_TradingCertTypeId.toString().equals(sql_TradingCertTypeId.toString()))
				{
					compareWriter.println(sql_SignatoryStateId+","+api_SignatoryStateId+","+sql_CountryName+","+api_CountryName+","+sql_ShortName+","+api_ShortName+","+sql_TradingCertTypeId+","+api_TradingCertTypeId+","+"Test Case Passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_SignatoryStateId+","+api_SignatoryStateId+","+sql_CountryName+","+api_CountryName+","+sql_ShortName+","+api_ShortName+","+sql_TradingCertTypeId+","+api_TradingCertTypeId+","+"Test Case Failed")
					log.info "Details are not matching hence test case is failed"
				}
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}

	counter = 1+counter
	log.info "Total records tested are : "+counter
}

public String removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Signatory States By Certificate Type Id By States***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>tradingCertTypeId</con:name><con:value>26</con:value></con:property></con:properties></con:testCase><con:testCase id="84d1d9fa-7992-4953-9a66-ddaadbba34e4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_SignatoryStatesByStateIdByAddresses" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="SignStatesByStateIdByAddresses" id="b8c851b7-5295-41e9-a9f9-f6bfc18be24e"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/signatorystates/${#TestCase#stateId}/addresses" methodName="SignatureStatesByStateIdByAddresses" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SignStatesByStateIdByAddresses" id="80aedd0f-e2d9-470b-a3d4-193cf0f4a57e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/signatorystates/389/addresses</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SignatoryStatesByStateIdByAddresses" id="48d64cad-cb3f-4331-b88f-f56b44d7dbd2" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Signatory States By State Id By Addresses***********"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
	"""
	USE tradingcertificate
	SELECT
	RSS.SignatoryState_Id as SignatoryStateId, RSS.Id, RSS.AddressName, RSS.AddressLine1, RSS.AddressLine2, RSS.AddressLine3, RSS.StateOrCounty,
	RSS.City, RSS.Country, RSS.PostCode, RSS.PrimaryAddress, case when RSS.PrimaryAddress = 1 then 'True' 
	when RSS.PrimaryAddress = 0 then 'False' else NULL end as isThePrimaryAddress
	from ref_SignatoryStateAddress RSS
	order by 1 desc
	"""
	//order by 2 desc
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_SignatoryStatesByStateIdByAddresses.csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_SignatoryStatesByStateIdByAddresses.csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_SignatoryStatesByStateIdByAddresses.csv"]

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_SignatoryStatesByStateIdByAddresses"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_SignatoryStatesByStateIdByAddresses"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_Response_SignatoryStatesByStateIdByAddresses"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_SignatoryStateId"+","+"SQL_Id"+","+"SQL_AddressName"+","+"SQL_AddressLine1"+","+"SQL_AddressLine2"+","+"SQL_AddressLine3"+","+"SQL_StateOrCounty"+","+"SQL_City"+","+"SQL_Country"+","+"SQL_PostCode"+","+"SQL_PrimaryAddress"+","+"SQL_isThePrimaryAddress")
apiWriter.println("API_SignatoryStateId"+","+"API_Id"+","+"API_AddressName"+","+"API_AddressLine1"+","+"API_AddressLine2"+","+"API_AddressLine3"+","+"API_StateOrCounty"+","+"API_City"+","+"API_Country"+","+"API_PostCode"+","+"API_PrimaryAddress"+","+"API_isThePrimaryAddress")
compareWriter.println("SQL_SignatoryStateId"+","+"API_SignatoryStateId"+","+"SQL_Id"+","+"API_Id"+","+"SQL_AddressName"+","+"API_AddressName"+","+"SQL_AddressLine1"+","+"API_AddressLine1"+","+"SQL_AddressLine2"+","+"API_AddressLine2"+","+"SQL_AddressLine3"+","+"API_AddressLine3"+","+"SQL_StateOrCounty"+","+"API_StateOrCounty"+","+"SQL_City"+","+"API_City"+","+"SQL_Country"+","+"API_Country"+","+"SQL_PostCode"+","+"API_PostCode"+","+"SQL_isThePrimaryAddress"+","+"API_isThePrimaryAddress"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
String field=null
int counter=0

def rows=con.rows(sqlstmt)  
int db_size=rows.size

con.eachRow(sqlstmt)
{	
	row ->
	sql_SignatoryStateId=row.SignatoryStateId
	sql_Id=row.Id
	sql_AddressName=row.AddressName
	field = sql_AddressName
	sql_AddressName= removeCommaAndBrackets(field)
	
	sql_AddressLine1=row.AddressLine1
	field = sql_AddressLine1
	sql_AddressLine1= removeCommaAndBrackets(field)
	
	sql_AddressLine2=row.AddressLine2
	field = sql_AddressLine2
	sql_AddressLine2= removeCommaAndBrackets(field)
	
	sql_AddressLine3=row.AddressLine3
	field = sql_AddressLine3
	sql_AddressLine3= removeCommaAndBrackets(field)
	
	sql_StateOrCounty=row.StateOrCounty
	field = sql_StateOrCounty
	sql_StateOrCounty= removeCommaAndBrackets(field)
	
	sql_City=row.City
	field = sql_City
	sql_City= removeCommaAndBrackets(field)
	
	sql_Country=row.Country
	field = sql_Country
	sql_Country= removeCommaAndBrackets(field)
	
	sql_PostCode=row.PostCode
	sql_PrimaryAddress=row.PrimaryAddress
	sql_isThePrimaryAddress=row.isThePrimaryAddress

	
	sqlWriter.println(sql_SignatoryStateId+","+sql_Id+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_isThePrimaryAddress)
	log.info "SQL Response received as :"+sql_SignatoryStateId+","+sql_Id+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_isThePrimaryAddress

	//Set Id as parameter to test case level
	String stateId = sql_SignatoryStateId
	testRunner.testCase.setPropertyValue("stateId", stateId)
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('SignStatesByStateIdByAddresses')
	String req='${SignStatesByStateIdByAddresses#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["SignStatesByStateIdByAddresses"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{
		String newId = jsonRes.signatoryStateId[0]
		if((newId.toString()).equals(sql_SignatoryStateId.toString()))
		{
			api_SignatoryStateId=jsonRes.signatoryStateId
			field = api_SignatoryStateId
			api_SignatoryStateId= removeCommaAndBrackets(field)
		
			api_Id=jsonRes.id
			field = api_Id
			api_Id= removeCommaAndBrackets(field)
			
			api_AddressName=jsonRes.addressName 
			field = api_AddressName
			api_AddressName= removeCommaAndBrackets(field)
				
			api_AddressLine1=jsonRes.addressLine1 
			field = api_AddressLine1
			api_AddressLine1= removeCommaAndBrackets(field)
			
			api_AddressLine2=jsonRes.addressLine2 
			field = api_AddressLine2
			api_AddressLine2= removeCommaAndBrackets(field)
			
			api_AddressLine3=jsonRes.addressLine3 
			field = api_AddressLine3
			api_AddressLine3= removeCommaAndBrackets(field)
			
			api_StateOrCounty=jsonRes.stateOrCounty 
			field = api_StateOrCounty
			api_StateOrCounty= removeCommaAndBrackets(field)
			
			api_City=jsonRes.city 
			field = api_City
			api_City= removeCommaAndBrackets(field)
			
			api_Country=jsonRes.country 
			field = api_Country
			api_Country= removeCommaAndBrackets(field)
			
			api_PostCode=jsonRes.postCode 
			field = api_PostCode
			api_PostCode= removeCommaAndBrackets(field)
			
			api_isThePrimaryAddress=jsonRes.primaryAddress
			field = api_isThePrimaryAddress
			api_isThePrimaryAddress= removeCommaAndBrackets(field) 

			apiWriter.println(api_SignatoryStateId+","+api_Id+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_isThePrimaryAddress)
			log.info "API responce received as : "+api_SignatoryStateId+","+api_Id+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_isThePrimaryAddress
				
			if(api_SignatoryStateId.toString().equals(sql_SignatoryStateId.toString()) && api_Id.toString().equals(sql_Id.toString()) && api_AddressName.toString().toUpperCase().equals(sql_AddressName.toString().toUpperCase()) && api_AddressLine1.toString().toUpperCase().equals(sql_AddressLine1.toString().toUpperCase()) && api_AddressLine2.toString().toUpperCase().equals(sql_AddressLine2.toString().toUpperCase()) && api_AddressLine3.toString().toUpperCase().equals(sql_AddressLine3.toString().toUpperCase()) && api_StateOrCounty.toString().toUpperCase().equals(sql_StateOrCounty.toString().toUpperCase()) && api_City.toString().toUpperCase().equals(sql_City.toString().toUpperCase()) && api_Country.toString().toUpperCase().equals(sql_Country.toString().toUpperCase()) && api_PostCode.toString().toUpperCase().equals(sql_PostCode.toString().toUpperCase()) && api_isThePrimaryAddress.toString().toUpperCase().equals(sql_isThePrimaryAddress.toString().toUpperCase()))
			{
				compareWriter.println(sql_SignatoryStateId+","+api_SignatoryStateId+","+sql_Id+","+api_Id+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_isThePrimaryAddress+","+api_isThePrimaryAddress+","+"Test Case Passed")
				log.info "Details are matching hence test case is passed"
			}
			else
			{
				compareWriter.println(sql_SignatoryStateId+","+api_SignatoryStateId+","+sql_Id+","+api_Id+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_isThePrimaryAddress+","+api_isThePrimaryAddress+","+"Test Case Failed")
				log.info "Details are not matching hence test case is failed"
			}
		}
	}
	else
	{
		compareWriter.println("Failed API response is received : "+response)
		log.info "Failed API response is received : "+response
	}
	counter = 1+counter
	log.info "Total records tested are : "+counter
}

public String  removeCommaAndBrackets(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Signatory States By State Id By Addresses***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>stateId</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="da7c95b5-c0b3-4088-abf4-1069476e086d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_TradingCerttificates" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="POST_TradingCert" id="2274054b-85c6-4c67-be96-7d5b5b74c8c0"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/" methodName="POST_TradingCertificateSave" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST_TradingCert" id="f0efb725-78f1-47c2-a486-172c93cb9440" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>
	{
	  "addressTypeId": "2",
	  "sourceSystem": "PIOnline",
	  "reference": "123654",
	  "currentStatus": "ISSUED",
	  "storageId": "string",
	  "riskId": 130179,
	  "vesselId": 130179,
	  "policyId": 1044648,
	  "memberPartyId": 112673,
	  "ownerPartyId": 0,
	  "brokerPartyId": 1,
	  "isRenewal": true,
	  "isYacht": true,
	  "version": 0,
	  "riskReference": "682637",
	  "vesselReference": "682637",
	  "policyReference": "1044648",
	  "memberReference": "73328",
	  "memberType": "N/K",
	  "memberName": "Test3Member Variation1",
	  "jointAssuredName": "N/K",
	  "ownerReference": "N/K",
	  "ownerName": "N/K",
	  "ownerDomicile": "N/K",
	  "ownerEmailAddress": "N/K",
	  "brokerReference": "104",
	  "brokerName": "POST &amp; CO (P &amp; I)",
	  "brokerEmailAddress": "claims@post-co.com"  ,
	  "policyYear": "2022",
	  "certificateIssueDate": "2021-03-01T11:30:33.510Z",
	  "emailAddress": "string",
	  "ccEmailAddress": "string",
	  "effectiveStartDate": "2021-03-01T11:30:33.510Z",
	  "effectiveEndDate": "2021-03-01T11:30:33.510Z",
	  "passengerCapacity": 0,
	  "policyStartDate": "2021-04-01T12:00:00.000Z",
	  "policyEndDate": "2022-04-01T12:00:00.000Z",
	  "currencyCode": "USD",
	  "coverLimitAmount": 500000000.00,
	  "signatoryStateId": 263,
	  "vesselName": "Test3Policy Risk",
	  "vesselType": "YA",
	  "vesselTypeName": "YACHT CHARTER 13+ PAX",
	  "vesselEnteredDate": "2020-11-08T12:00:00.000Z",
	  "vesselFlag": "ITALY",
	  "imoNumber": "3453466",
	  "distinctiveNumbersOrLetters": "f56",
	  "grossTonnage": "2500",
	  "yearBuilt": 2012,
	  "engineHorsePower": "N/K",
	  "trademarkAndEngineModel": "N/K",
	  "model": "N/K",
	  "engineNo": "N/K",
	  "nominatedFlagState": "ITALY",
	  "nominatedFlagStateName": "CONSAP S.p.a",
	  "portOfRegistry": "TRIESTE",
	  "lastModifiedByUserId": 115,
	  "lastModifiedDate": "2021-02-04T14:07:44.898Z",
	  "tenderReferenceList": "N/K",
	  "tenderOutboardReferenceList": "N/K",
	  "tradingCertificateTypeId": "26",
	  "tradingCertificateType": {
	    "id": "26",
	    "tradingCertificateGroup": {
	      "id": "1",
	      "name": "string",
	      "groupCode": "TRADECERT"
	    },
	    "typeCode": "string",
	    "typeName": "string"
	  },
	  "addresses": [
	    {
	      "id": 0,
	      "addressName": "string",
	      "addressLine1": "string",
	      "addressLine2": "string",
	      "addressLine3": "string",
	      "stateOrCounty": "string",
	      "city": "string",
	      "country": "string",
	      "postCode": "string",
	      "primaryAddress": true
	    }
	  ],
	  "stateAddress": {
	    "id": 263,
	    "addressName": "CONSAP S.p.a",
	    "addressLine1": "VIA YSER 14",
	    "addressLine2": "N/K",
	    "addressLine3": "N/K",
	    "stateOrCounty": "",
	    "city": "Roma",
	    "country": "ITALY",
	    "postCode": "00198",
	    "primaryAddress": true
	  },
	  "ownerAddress": {
	    "id": 0,
	    "addressName": "string",
	    "addressLine1": "string",
	    "addressLine2": "string",
	    "addressLine3": "string",
	    "stateOrCounty": "string",
	    "city": "string",
	    "country": "string",
	    "postCode": "string",
	    "primaryAddress": true
	  },
	  "brokerAddress": {
	    "id": 64,
	    "addressName": "Blaak 31 11th Floor",
	    "addressLine1": "",
	    "addressLine2": "",
	    "addressLine3": "",
	    "stateOrCounty": "",
	    "city": "Rotterdam",
	    "country": "NETHERLANDS",
	    "postCode": "3011 GA",
	    "primaryAddress": true
	  },
	  "memberAddress": {
	    "id": 113088,
	    "addressName": "Test3Member Created AddName",
	    "addressLine1": "Test3Member Created L1",
	    "addressLine2": "Test3Member Created L2",
	    "addressLine3": "",
	    "stateOrCounty": "Alabama",
	    "city": "Birmingham",
	    "country": "UNITED STATES OF AMERICA",
	    "postCode": "54734",
	    "primaryAddress": true
	  },
	  "jointAssuredAddress": {
	    "id": 0,
	    "addressName": "string",
	    "addressLine1": "string",
	    "addressLine2": "string",
	    "addressLine3": "string",
	    "stateOrCounty": "string",
	    "city": "string",
	    "country": "string",
	    "postCode": "string",
	    "primaryAddress": true
	  },
	  "tradingCertificateBanksForValidation": [
	    {
	      "id": 0,
	      "addressName": "string",
	      "addressLine1": "string",
	      "addressLine2": "string",
	      "addressLine3": "string",
	      "stateOrCounty": "string",
	      "city": "string",
	      "country": "string",
	      "postCode": "string",
	      "primaryAddress": true,
	      "bankCapacities": [
	        {
	          "id": 0,
	          "name": "string"
	        }
	      ],
	      "bankPartyId": 0,
	      "tradingCertificateId": 0,
	      "bankName": "string",
	      "startDate": "2021-03-04T07:49:44.584Z",
	      "endDate": "2021-03-04T07:49:44.584Z"
	    }
	  ],
	  "tradingCertificateBanks": [
	    {
	      "id": 0,
	      "addressName": "string",
	      "addressLine1": "string",
	      "addressLine2": "string",
	      "addressLine3": "string",
	      "stateOrCounty": "string",
	      "city": "string",
	      "country": "string",
	      "postCode": "string",
	      "primaryAddress": true,
	      "bankCapacities": [
	        {
	          "id": 0,
	          "name": "string"
	        }
	      ],
	      "bankPartyId": 0,
	      "tradingCertificateId": 0,
	      "bankName": "string",
	      "startDate": "2021-03-04T07:49:44.584Z",
	      "endDate": "2021-03-04T07:49:44.584Z"
	    }
	  ]
	}
	</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="POST_TradingCertificate" id="73185125-9131-4367-b3d2-d0ae3e1e5a45" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat
import com.eviware.soapui.support.types.StringToStringMap 

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for Post Method of Trading Certificate************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt =
"""
	Use tradingcertificate
	Select 
	RT.Id as TypeId, RT.TypeCode, RT.Name as TypeName, RT.Group_Id as GroupId, RG.GroupCode
	from ref_Type RT
	inner join ref_Group RG on RT.Group_Id = RG.Id
"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQLResponse_POST_TradingCertificateSave.csv"]
//def postApiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\APIResponse_POST_TradingCertificateSave.csv"]
//def getApiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\APIResponse_GET_TradingCertificateSave.csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POST_TradingCertificateSave.csv"]

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQLResponse_POST_TradingCertificateSave "+newDateTimeString+".csv"]
def postApiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\APIResponse_POST_TradingCertificateSave "+newDateTimeString+".csv"]
def getApiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\APIResponse_GET_TradingCertificateSave "+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POST_TradingCertificateSave "+newDateTimeString+".csv"]


def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def postApiFile = new File(postApiResponseFile[0])
def postApiWriter = postApiFile.newPrintWriter()

def getApiFile = new File(getApiResponseFile[0])
def getApiWriter = getApiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TypeId"+","+"SQL_TypeCode"+","+"SQL_TypeName"+","+"SQL_GroupId"+","+"SQL_GroupCode")
postApiWriter.println("POST_API_Id"+","+"POST_API_addressTypeId"+","+"POST_API_riskId"+","+"POST_API_vesselId"+","+"POST_API_policyId"+","+"POST_API_memberPartyId"+","+"POST_API_ownerPartyId"+","+"POST_API_brokerPartyId"+","+"POST_API_version"+","+"POST_API_tradingCertificateTypeId"+","+"POST_API_tradingCertificateGroupId"+","+"POST_API_tradingCertificateGroupName"+","+"POST_API_tradingCertificateGroupCode"+","+"POST_API_stateAddressId"+","+"POST_API_ownerAddressId"+","+"POST_API_brokerAddressId"+","+"POST_API_memberAddressId"+","+"POST_API_jointAssuredAddressId")
getApiWriter.println("GET_API_Id"+","+"GET_API_addressTypeId"+","+"GET_API_riskId"+","+"GET_API_vesselId"+","+"GET_API_policyId"+","+"GET_API_memberPartyId"+","+"GET_API_ownerPartyId"+","+"GET_API_brokerPartyId"+","+"GET_API_version"+","+"GET_API_tradingCertificateTypeId"+","+"GET_API_tradingCertificateGroupId"+","+"GET_API_tradingCertificateGroupName"+","+"GET_API_tradingCertificateGroupCode"+","+"GET_API_stateAddressId"+","+"GET_API_ownerAddressId"+","+"GET_API_brokerAddressId"+","+"GET_API_memberAddressId"+","+"GET_API_jointAssuredAddressId")
compareWriter.println("POST_API_Id"+","+"GET_API_Id"+","+"POST_API_addressTypeId"+","+"GET_API_addressTypeId"+","+"POST_API_riskId"+","+"GET_API_vesselId"+","+"POST_API_policyId"+","+"GET_API_policyId"+","+"POST_API_memberPartyId"+","+"GET_API_memberPartyId"+","+"POST_API_ownerPartyId"+","+"GET_API_ownerPartyId"+","+"POST_API_brokerPartyId"+","+"GET_API_brokerPartyId"+","+"POST_API_version"+","+"GET_API_version"+","+"POST_API_tradingCertificateTypeId"+","+"GET_API_tradingCertificateTypeId"+","+"POST_API_tradingCertificateGroupId"+","+"GET_API_tradingCertificateGroupId"+","+"POST_API_tradingCertificateGroupName"+","+"GET_API_tradingCertificateGroupName"+","+"POST_API_tradingCertificateGroupCode"+","+"GET_API_tradingCertificateGroupCode"+","+"POST_API_stateAddressId"+","+"GET_API_stateAddressId"+","+"POST_API_ownerAddressId"+","+"GET_API_ownerAddressId"+","+"POST_API_brokerAddressId"+","+"GET_API_brokerAddressId"+","+"POST_API_memberAddressId"+","+"GET_API_memberAddressId"+","+"POST_API_jointAssuredAddressId"+","+"GET_API_jointAssuredAddressId"+","+"Result")

def response= null
def jsonSlurper=null
def jsonResp=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
	sql_TypeId=row.TypeId
	sql_TypeCode=row.TypeCode
	sql_TypeName=row.TypeName
	sql_GroupId=row.GroupId
	sql_GroupCode=row.GroupCode
	
	sqlWriter.println(sql_TypeId+","+sql_TypeCode+","+sql_TypeName+","+sql_GroupId+","+sql_GroupCode)
	log.info "SQL Response is : "+sql_TypeId+","+sql_TypeCode+","+sql_TypeName+","+sql_GroupId+","+sql_GroupCode
	
	//Set the Type ID at test case level
	String TypeId=sql_TypeId
	String GroupId=sql_GroupId
	String GroupCode=sql_GroupCode

	//Set the Token at test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	Random a = new Random()
	int rnd =a.next(3)
	
	def newRequest = """
	{
	  "addressTypeId": "$rnd",
	  "sourceSystem": "PIOnline",
	  "reference": "123654",
	  "currentStatus": "ISSUED",
	  "storageId": "string",
	  "riskId": 130179,
	  "vesselId": 130179,
	  "policyId": 1044648,
	  "memberPartyId": 112673,
	  "ownerPartyId": 0,
	  "brokerPartyId": 1,
	  "isRenewal": true,
	  "isYacht": true,
	  "version": 0,
	  "riskReference": "682637",
	  "vesselReference": "682637",
	  "policyReference": "1044648",
	  "memberReference": "73328",
	  "memberType": "N/K",
	  "memberName": "Test3Member Variation1",
	  "jointAssuredName": "N/K",
	  "ownerReference": "N/K",
	  "ownerName": "N/K",
	  "ownerDomicile": "N/K",
	  "ownerEmailAddress": "N/K",
	  "brokerReference": "104",
	  "brokerName": "POST & CO (P & I)",
	  "brokerEmailAddress": "claims@post-co.com"  ,
	  "policyYear": "2022",
	  "certificateIssueDate": "2021-03-01T11:30:33.510Z",
	  "emailAddress": "string",
	  "ccEmailAddress": "string",
	  "effectiveStartDate": "2021-03-01T11:30:33.510Z",
	  "effectiveEndDate": "2021-03-01T11:30:33.510Z",
	  "passengerCapacity": 0,
	  "policyStartDate": "2021-04-01T12:00:00.000Z",
	  "policyEndDate": "2022-04-01T12:00:00.000Z",
	  "currencyCode": "USD",
	  "coverLimitAmount": 500000000.00,
	  "signatoryStateId": 263,
	  "vesselName": "Test3Policy Risk",
	  "vesselType": "YA",
	  "vesselTypeName": "YACHT CHARTER 13+ PAX",
	  "vesselEnteredDate": "2020-11-08T12:00:00.000Z",
	  "vesselFlag": "ITALY",
	  "imoNumber": "3453466",
	  "distinctiveNumbersOrLetters": "f56",
	  "grossTonnage": "2500",
	  "yearBuilt": 2012,
	  "engineHorsePower": "N/K",
	  "trademarkAndEngineModel": "N/K",
	  "model": "N/K",
	  "engineNo": "N/K",
	  "nominatedFlagState": "ITALY",
	  "nominatedFlagStateName": "CONSAP S.p.a",
	  "portOfRegistry": "TRIESTE",
	  "lastModifiedByUserId": 115,
	  "lastModifiedDate": "2021-02-04T14:07:44.898Z",
	  "tenderReferenceList": "N/K",
	  "tenderOutboardReferenceList": "N/K",
	  "tradingCertificateTypeId": "$TypeId",
	  "tradingCertificateType": {
	    "id": "$TypeId",
	    "tradingCertificateGroup": {
	      "id": "$GroupId",
	      "name": "string",
	      "groupCode": "$GroupCode"
	    },
	    "typeCode": "string",
	    "typeName": "string"
	  },
	  "addresses": [
	    {
	      "id": 0,
	      "addressName": "string",
	      "addressLine1": "string",
	      "addressLine2": "string",
	      "addressLine3": "string",
	      "stateOrCounty": "string",
	      "city": "string",
	      "country": "string",
	      "postCode": "string",
	      "primaryAddress": true
	    }
	  ],
	  "stateAddress": {
	    "id": 263,
	    "addressName": "CONSAP S.p.a",
	    "addressLine1": "VIA YSER 14",
	    "addressLine2": "N/K",
	    "addressLine3": "N/K",
	    "stateOrCounty": "",
	    "city": "Roma",
	    "country": "ITALY",
	    "postCode": "00198",
	    "primaryAddress": true
	  },
	  "ownerAddress": {
	    "id": 0,
	    "addressName": "string",
	    "addressLine1": "string",
	    "addressLine2": "string",
	    "addressLine3": "string",
	    "stateOrCounty": "string",
	    "city": "string",
	    "country": "string",
	    "postCode": "string",
	    "primaryAddress": true
	  },
	  "brokerAddress": {
	    "id": 64,
	    "addressName": "Blaak 31 11th Floor",
	    "addressLine1": "",
	    "addressLine2": "",
	    "addressLine3": "",
	    "stateOrCounty": "",
	    "city": "Rotterdam",
	    "country": "NETHERLANDS",
	    "postCode": "3011 GA",
	    "primaryAddress": true
	  },
	  "memberAddress": {
	    "id": 113088,
	    "addressName": "Test3Member Created AddName",
	    "addressLine1": "Test3Member Created L1",
	    "addressLine2": "Test3Member Created L2",
	    "addressLine3": "",
	    "stateOrCounty": "Alabama",
	    "city": "Birmingham",
	    "country": "UNITED STATES OF AMERICA",
	    "postCode": "54734",
	    "primaryAddress": true
	  },
	  "jointAssuredAddress": {
	    "id": 0,
	    "addressName": "string",
	    "addressLine1": "string",
	    "addressLine2": "string",
	    "addressLine3": "string",
	    "stateOrCounty": "string",
	    "city": "string",
	    "country": "string",
	    "postCode": "string",
	    "primaryAddress": true
	  },
	  "tradingCertificateBanksForValidation": [
	    {
	      "id": 0,
	      "addressName": "string",
	      "addressLine1": "string",
	      "addressLine2": "string",
	      "addressLine3": "string",
	      "stateOrCounty": "string",
	      "city": "string",
	      "country": "string",
	      "postCode": "string",
	      "primaryAddress": true,
	      "bankCapacities": [
	        {
	          "id": 0,
	          "name": "string"
	        }
	      ],
	      "bankPartyId": 0,
	      "tradingCertificateId": 0,
	      "bankName": "string",
	      "startDate": "2021-03-04T07:49:44.584Z",
	      "endDate": "2021-03-04T07:49:44.584Z"
	    }
	  ],
	  "tradingCertificateBanks": [
	    {
	      "id": 0,
	      "addressName": "string",
	      "addressLine1": "string",
	      "addressLine2": "string",
	      "addressLine3": "string",
	      "stateOrCounty": "string",
	      "city": "string",
	      "country": "string",
	      "postCode": "string",
	      "primaryAddress": true,
	      "bankCapacities": [
	        {
	          "id": 0,
	          "name": "string"
	        }
	      ],
	      "bankPartyId": 0,
	      "tradingCertificateId": 0,
	      "bankName": "string",
	      "startDate": "2021-03-04T07:49:44.584Z",
	      "endDate": "2021-03-04T07:49:44.584Z"
	    }
	  ]
	}
	"""   
	
	//Run the test step to get response
	testRunner.testCase.testSteps["POST_TradingCert"].setPropertyValue( "Request", newRequest)
	testRunner.runTestStepByName('POST_TradingCert')
	String req='${POST_TradingCert#Response}'
	response=context.expand(req)
	//log.info "API Response for POST Method received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)
	
	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["POST_TradingCert"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		if (!jsonRes.HasError)
		{
			postApi_id = jsonRes.id
			postApi_addressTypeId = jsonRes.addressTypeId
			postApi_riskId = jsonRes.riskId
			postApi_vesselId = jsonRes.vesselId
			postApi_policyId = jsonRes.policyId
			postApi_memberPartyId = jsonRes.memberPartyId
			postApi_ownerPartyId = jsonRes.ownerPartyId
			postApi_brokerPartyId = jsonRes.brokerPartyId
			postApi_version = jsonRes.version
			postApi_tradingCertificateTypeId = jsonRes.tradingCertificateType.id
			postApi_tradingCertificateGroupId=jsonRes.tradingCertificateType.tradingCertificateGroup.id
			postApi_tradingCertificateGroupName=jsonRes.tradingCertificateType.tradingCertificateGroup.name
			postApi_tradingCertificateGroupCode=jsonRes.tradingCertificateType.tradingCertificateGroup.groupCode
			postApi_stateAddressId=jsonRes.stateAddress.id
			postApi_ownerAddressId=jsonRes.ownerAddress.id
			postApi_brokerAddressId=jsonRes.brokerAddress.id
			postApi_memberAddressId=jsonRes.memberAddress.id
			postApi_jointAssuredAddressId=jsonRes.jointAssuredAddress.id

			postApiWriter.println(postApi_id+","+postApi_addressTypeId+","+postApi_riskId+","+postApi_vesselId+","+postApi_policyId+","+postApi_memberPartyId+","+postApi_ownerPartyId+","+postApi_brokerPartyId+","+postApi_version+","+postApi_tradingCertificateTypeId+","+postApi_tradingCertificateGroupId+","+postApi_tradingCertificateGroupName+","+postApi_tradingCertificateGroupCode+","+postApi_stateAddressId+","+postApi_ownerAddressId+","+postApi_brokerAddressId+","+postApi_memberAddressId+","+postApi_jointAssuredAddressId)
			log.info "API Response received for POST method as : "+postApi_id+","+postApi_addressTypeId+","+postApi_riskId+","+postApi_vesselId+","+postApi_policyId+","+postApi_memberPartyId+","+postApi_ownerPartyId+","+postApi_brokerPartyId+","+postApi_version+","+postApi_tradingCertificateTypeId+","+postApi_tradingCertificateGroupId+","+postApi_tradingCertificateGroupName+","+postApi_tradingCertificateGroupCode+","+postApi_stateAddressId+","+postApi_ownerAddressId+","+postApi_brokerAddressId+","+postApi_memberAddressId+","+postApi_jointAssuredAddressId


			String certId=postApi_id
			testRunner.testCase.setPropertyValue( "certId", certId)
			
			//Run the test step to get response
			testRunner.runTestStepByName('GET_TradingCertificateByCertificateId')
			String req1='${GET_TradingCertificateByCertificateId#Response}'
			response=context.expand(req1)
			//log.info "API Response for GET method after post received is :"+response
			jsonSlurper=new JsonSlurper() 
			jsonRes=jsonSlurper.parseText(response)

			//Check the Status code of API response
			groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
			httpResponseHeaders = context.testCase.testSteps["GET_TradingCertificateByCertificateId"].testRequest.response.responseHeaders
			httpStatus = httpResponseHeaders["#status#"]
			httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
			//log.info("HTTP status code: " + httpStatusCode)
		
			error = response
			if(httpStatusCode.equals("200"))
			{
				getApi_id = jsonRes.id
				getApi_addressTypeId = jsonRes.addressTypeId
				getApi_riskId = jsonRes.riskId
				getApi_vesselId = jsonRes.vesselId
				getApi_policyId = jsonRes.policyId
				getApi_memberPartyId = jsonRes.memberPartyId
				getApi_ownerPartyId = jsonRes.ownerPartyId
				getApi_brokerPartyId = jsonRes.brokerPartyId
				getApi_version = jsonRes.version
				getApi_tradingCertificateTypeId = jsonRes.tradingCertificateType.id
				getApi_tradingCertificateGroupId=jsonRes.tradingCertificateType.tradingCertificateGroup.id
				getApi_tradingCertificateGroupName=jsonRes.tradingCertificateType.tradingCertificateGroup.name
				getApi_tradingCertificateGroupCode=jsonRes.tradingCertificateType.tradingCertificateGroup.groupCode
				getApi_stateAddressId=jsonRes.stateAddress.id
				getApi_ownerAddressId=jsonRes.ownerAddress.id
				getApi_brokerAddressId=jsonRes.brokerAddress.id
				getApi_memberAddressId=jsonRes.memberAddress.id
				getApi_jointAssuredAddressId=jsonRes.jointAssuredAddress.id
			
				getApiWriter.println(getApi_id+","+getApi_addressTypeId+","+getApi_riskId+","+getApi_vesselId+","+getApi_policyId+","+getApi_memberPartyId+","+getApi_ownerPartyId+","+getApi_brokerPartyId+","+getApi_version+","+getApi_tradingCertificateTypeId+","+getApi_tradingCertificateGroupId+","+getApi_tradingCertificateGroupName+","+getApi_tradingCertificateGroupCode+","+getApi_stateAddressId+","+getApi_ownerAddressId+","+getApi_brokerAddressId+","+getApi_memberAddressId+","+getApi_jointAssuredAddressId)
				log.info "API Response for Get method :" +getApi_id+","+getApi_addressTypeId+","+getApi_riskId+","+getApi_vesselId+","+getApi_policyId+","+getApi_memberPartyId+","+getApi_ownerPartyId+","+getApi_brokerPartyId+","+getApi_version+","+getApi_tradingCertificateTypeId+","+getApi_tradingCertificateGroupId+","+getApi_tradingCertificateGroupName+","+getApi_tradingCertificateGroupCode+","+getApi_stateAddressId+","+getApi_ownerAddressId+","+getApi_brokerAddressId+","+getApi_memberAddressId+","+getApi_jointAssuredAddressId
			
				if(getApi_id.toString().equals(postApi_id.toString()) && getApi_addressTypeId.toString().equals(postApi_addressTypeId.toString()) && getApi_riskId.toString().equals(postApi_riskId.toString()) && getApi_vesselId.toString().equals(postApi_vesselId.toString()) && getApi_policyId.toString().equals(postApi_policyId.toString()) && getApi_memberPartyId.toString().equals(postApi_memberPartyId.toString()) && getApi_ownerPartyId.toString().equals(postApi_ownerPartyId.toString()) && getApi_brokerPartyId.toString().equals(postApi_brokerPartyId.toString()) && getApi_version.toString().equals(postApi_version.toString()) && getApi_tradingCertificateTypeId.toString().equals(postApi_tradingCertificateTypeId.toString()) && getApi_tradingCertificateGroupId.toString().equals(postApi_tradingCertificateGroupId.toString()) && getApi_tradingCertificateGroupName.toString().equals(postApi_tradingCertificateGroupName.toString()) && getApi_tradingCertificateGroupCode.toString().equals(postApi_tradingCertificateGroupCode.toString()) && getApi_stateAddressId.toString().equals(postApi_stateAddressId.toString()) && getApi_ownerAddressId.toString().equals(postApi_ownerAddressId.toString()) && getApi_brokerAddressId.toString().equals(postApi_brokerAddressId.toString()) && getApi_memberAddressId.toString().equals(postApi_memberAddressId.toString()) && getApi_jointAssuredAddressId.toString().equals(postApi_jointAssuredAddressId.toString()) )
				{
					compareWriter.println(postApi_id+","+getApi_id+","+postApi_addressTypeId+","+getApi_addressTypeId+","+postApi_riskId+","+getApi_vesselId+","+postApi_policyId+","+getApi_policyId+","+postApi_memberPartyId+","+getApi_memberPartyId+","+postApi_ownerPartyId+","+getApi_ownerPartyId+","+postApi_brokerPartyId+","+getApi_brokerPartyId+","+postApi_version+","+getApi_version+","+postApi_tradingCertificateTypeId+","+getApi_tradingCertificateTypeId+","+postApi_tradingCertificateGroupId+","+getApi_tradingCertificateGroupId+","+postApi_tradingCertificateGroupName+","+getApi_tradingCertificateGroupName+","+postApi_tradingCertificateGroupCode+","+getApi_tradingCertificateGroupCode+","+postApi_stateAddressId+","+getApi_stateAddressId+","+postApi_ownerAddressId+","+getApi_ownerAddressId+","+postApi_brokerAddressId+","+getApi_brokerAddressId+","+postApi_memberAddressId+","+getApi_memberAddressId+","+postApi_jointAssuredAddressId+","+getApi_jointAssuredAddressId+","+"Test Case Passed")
					log.info "Details are matching, hence test case is passed"
				}
				else
				{
					compareWriter.println(postApi_id+","+getApi_id+","+postApi_addressTypeId+","+getApi_addressTypeId+","+postApi_riskId+","+getApi_vesselId+","+postApi_policyId+","+getApi_policyId+","+postApi_memberPartyId+","+getApi_memberPartyId+","+postApi_ownerPartyId+","+getApi_ownerPartyId+","+postApi_brokerPartyId+","+getApi_brokerPartyId+","+postApi_version+","+getApi_version+","+postApi_tradingCertificateTypeId+","+getApi_tradingCertificateTypeId+","+postApi_tradingCertificateGroupId+","+getApi_tradingCertificateGroupId+","+postApi_tradingCertificateGroupName+","+getApi_tradingCertificateGroupName+","+postApi_tradingCertificateGroupCode+","+getApi_tradingCertificateGroupCode+","+postApi_stateAddressId+","+getApi_stateAddressId+","+postApi_ownerAddressId+","+getApi_ownerAddressId+","+postApi_brokerAddressId+","+getApi_brokerAddressId+","+postApi_memberAddressId+","+getApi_memberAddressId+","+postApi_jointAssuredAddressId+","+getApi_jointAssuredAddressId+","+"Test Case Failed")
					log.info "Details are not matching, hence test case is failed"
				}
			}
		}	
	}
	else
	{
		log.info "Failed API response received as : "+response
	}		
	counter=counter+1
	log.info "Number of records verified are : "+counter
}

sqlWriter.flush()
postApiWriter.flush()
getApiWriter.flush()
compareWriter.flush()

sqlWriter.close()
postApiWriter.close()
getApiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for Post Method of Trading Certificate************"	]]></script></con:config></con:testStep><con:testStep type="restrequest" name="GET_TradingCertificateByCertificateId" id="13392493-0466-4fb9-bd90-d07216ae9ec6"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#certId}" methodName="GET_TradingCertificateByCertificateId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_TradingCertificateByCertificateId" id="325ac480-28f6-4df9-9f1c-06b0aacf1498" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/394</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>certId</con:name><con:value>462</con:value></con:property></con:properties></con:testCase><con:testCase id="d61ff549-bae2-41b4-82b2-d4d3feda924f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_TradingCertificateByCertificateId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="TradingCertificatesByTradingCertificateId" id="70ae6f6e-7dab-444e-9f77-e84ab84a4fe6"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#certId}" methodName="GET_TradingCertificateByCertificateId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TradingCertificatesByTradingCertificateId" id="325ac480-28f6-4df9-9f1c-06b0aacf1498" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/89</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="TradingCertByCertificateId" id="b2a484f0-33f2-4efb-9589-39d8d6aa6de5" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat
import com.eviware.soapui.support.types.StringToStringMap 

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for Get method of Trading Certificates By Trading Certificate Id************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt =
"""
	Use tradingcertificate
	Select Id, Type_Id, Reference, CurrentStatus, StorageId, IsRenewal, IsYacht, RiskId, VesselId, PolicyId, 
	MemberPartyId, OwnerPartyId, BrokerPartyId, TradingCertificateVersion, RiskReference, VesselReference, 
	PolicyReference, MemberReference, MemberType, MemberName, OwnerDomicile, OwnerEmailAddress, 
	OwnerReference, OwnerName, BrokerReference, BrokerName, BrokerEmailAddress, policyYear, EmailAddress, 
	CurrencyCode, SignatoryState_Id, VesselName, VesselFlag, VesselType, VesselTypeName, PassengerCapacity, 
	IMONumber, EngineHorsePower, TradeMark, Model, EngineNo, TenderReferenceList, TenderOutboardReferenceList, 
	DistinctiveNumbersOrLetters, GrossTonnage, YearBuilt, PortOfRegistry, AddressType_Id, JointAssuredName, SourceSystem
	From TradingCertificate TC

"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQLResponse_TradingCertificatesByTradingCertificateId.csv"]
//def getApiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\APIResponse_TradingCertificatesByTradingCertificateId.csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_TradingCertificatesByTradingCertificateId.csv"]

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQLResponse_TradingCertificatesByTradingCertificateId "+newDateTimeString+".csv"]
def getApiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\APIResponse_TradingCertificatesByTradingCertificateId "+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_TradingCertificatesByTradingCertificateId "+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def getApiFile = new File(getApiResponseFile[0])
def getApiWriter = getApiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_Id"+","+"SQL_TypeId"+","+"SQL_Reference"+","+"SQL_CurrentStatus"+","+"SQL_StorageId"+","+"SQL_IsRenewal"+","+"SQL_IsYacht"+","+"SQL_RiskId"+","+"SQL_VesselId"+","+"SQL_PolicyId"+","+"SQL_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"SQL_TradingCertificateVersion"+","+"SQL_RiskReference"+","+"SQL_VesselReference"+","+"SQL_PolicyReference"+","+"SQL_MemberReference"+","+"SQL_MemberType"+","+"SQL_MemberName"+","+"SQL_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"SQL_OwnerReference"+","+"SQL_OwnerName"+","+"SQL_BrokerReference"+","+"SQL_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"SQL_EmailAddress"+","+"SQL_CurrencyCode"+","+"SQL_SignatoryState_Id"+","+"SQL_VesselName"+","+"SQL_VesselFlag"+","+"SQL_VesselType"+","+"SQL_VesselTypeName"+","+"SQL_PassengerCapacity"+","+"SQL_IMONumber"+","+"SQL_EngineHorsePower"+","+"SQL_TradeMark"+","+"SQL_Model"+","+"SQL_EngineNo"+","+"SQL_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"SQL_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"SQL_YearBuilt"+","+"SQL_PortOfRegistry"+","+"SQL_AddressType_Id"+","+"SQL_JointAssuredName"+","+"SQL_SourceSystem")
getApiWriter.println("GET_API_Id"+","+"GET_API_TypeId"+","+"GET_API_Reference"+","+"GET_API_CurrentStatus"+","+"GET_API_StorageId"+","+"GET_API_IsRenewal"+","+"GET_API_IsYacht"+","+"GET_API_RiskId"+","+"GET_API_VesselId"+","+"GET_API_PolicyId"+","+"GET_API_MemberPartyId"+","+"GET_API_OwnerPartyId"+","+"GET_API_BrokerPartyId"+","+"GET_API_TradingCertificateVersion"+","+"GET_API_RiskReference"+","+"GET_API_VesselReference"+","+"GET_API_PolicyReference"+","+"GET_API_MemberReference"+","+"GET_API_MemberType"+","+"GET_API_MemberName"+","+"GET_API_OwnerDomicile"+","+"GET_API_OwnerEmailAddress"+","+"GET_API_OwnerReference"+","+"GET_API_OwnerName"+","+"GET_API_BrokerReference"+","+"GET_API_BrokerName"+","+"GET_API_BrokerEmailAddress"+","+"GET_API_PolicyYear"+","+"GET_API_EmailAddress"+","+"GET_API_CurrencyCode"+","+"GET_API_SignatoryState_Id"+","+"GET_API_VesselName"+","+"GET_API_VesselFlag"+","+"GET_API_VesselType"+","+"GET_API_VesselTypeName"+","+"GET_API_PassengerCapacity"+","+"GET_API_IMONumber"+","+"GET_API_EngineHorsePower"+","+"GET_API_TradeMark"+","+"GET_API_Model"+","+"GET_API_EngineNo"+","+"GET_API_TenderReferenceList"+","+"GET_API_TenderOutboardReferenceList"+","+"GET_API_DistinctiveNumbersOrLetters"+","+"GET_API_GrossTonnage"+","+"GET_API_YearBuilt"+","+"GET_API_PortOfRegistry"+","+"GET_API_AddressType_Id"+","+"GET_API_JointAssuredName"+","+"GET_API_SourceSystem")
compareWriter.println("SQL_Id"+","+"GET_API_Id"+","+"SQL_TypeId"+","+"GET_API_TypeId"+","+"SQL_Reference"+","+"GET_API_Reference"+","+"SQL_CurrentStatus"+","+"GET_API_CurrentStatus"+","+"SQL_StorageId"+","+"GET_API_StorageId"+","+"SQL_IsRenewal"+","+"GET_API_IsRenewal"+","+"SQL_IsYacht"+","+"GET_API_IsYacht"+","+"SQL_RiskId"+","+"GET_API_RiskId"+","+"SQL_VesselId"+","+"GET_API_VesselId"+","+"SQL_PolicyId"+","+"GET_API_PolicyId"+","+"SQL_MemberPartyId"+","+"GET_API_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"GET_APIOwnerPartyId_"+","+"SQL_BrokerPartyId"+","+"GET_API_BrokerPartyId"+","+"SQL_TradingCertificateVersion"+","+"GET_API_TradingCertificateVersion"+","+"SQL_RiskReference"+","+"GET_API_RiskReference"+","+"SQL_VesselReference"+","+"GET_API_VesselReference"+","+"SQL_PolicyReference"+","+"GET_API_PolicyReference"+","+"SQL_MemberReference"+","+"GET_API_MemberReference"+","+"SQL_MemberType"+","+"GET_API_MemberType"+","+"SQL_MemberName"+","+"GET_API_MemberName"+","+"SQL_OwnerDomicile"+","+"GET_API_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"GET_API_OwnerEmailAddress"+","+"SQL_OwnerReference"+","+"GET_API_OwnerReference"+","+"SQL_OwnerName"+","+"GET_API_OwnerName"+","+"SQL_BrokerReference"+","+"GET_API_BrokerReference"+","+"SQL_BrokerName"+","+"GET_API_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"GET_API_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"GET_API_policyYear"+","+"SQL_EmailAddress"+","+"GET_API_EmailAddress"+","+"SQL_CurrencyCode"+","+"GET_API_CurrencyCode"+","+"SQL_SignatoryState_Id"+","+"GET_API_SignatoryState"+","+"SQL_VesselName"+","+"GET_API_VesselName"+","+"SQL_VesselFlag"+","+"GET_API_VesselFlag"+","+"SQL_VesselType"+","+"GET_API_VesselType"+","+"SQL_VesselTypeName"+","+"GET_API_VesselTypeName"+","+"SQL_PassengerCapacity"+","+"GET_API_PassengerCapacity"+","+"SQL_IMONumber"+","+"GET_API_IMONumber"+","+"SQL_EngineHorsePower"+","+"GET_API_EngineHorsePower"+","+"SQL_TradeMark"+","+"GET_API_TradeMark"+","+"SQL_Model"+","+"GET_API_Model"+","+"SQL_EngineNo"+","+"GET_API_EngineNo"+","+"SQL_TenderReferenceList"+","+"GET_API_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"GET_API_TenderOutboardReferenceList"+","+"SQL_DistinctiveNumbersOrLetters"+","+"GET_API_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"GET_API_GrossTonnage"+","+"SQL_YearBuilt"+","+"GET_API_YearBuilt"+","+"SQL_PortOfRegistry"+","+"GET_API_PortOfRegistry"+","+"SQL_AddressType_Id"+","+"GET_API_AddressType_Id"+","+"SQL_JointAssuredName"+","+"GET_API_JointAssuredName"+","+"SQL_SourceSystem"+","+"GET_API_SourceSystem"+","+"Result")

def response= null
def jsonSlurper=null
def jsonResp=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
	sql_Id=row.Id
	sql_TypeId=row.Type_Id
	sql_Reference=row.Reference
	sql_CurrentStatus=row.CurrentStatus
	sql_StorageId=row.StorageId
	sql_IsRenewal=row.IsRenewal
	sql_IsYacht=row.IsYacht
	sql_RiskId=row.RiskId
	sql_VesselId=row.VesselId
	sql_PolicyId=row.PolicyId
	sql_MemberPartyId=row.MemberPartyId
	sql_OwnerPartyId=row.OwnerPartyId
	sql_BrokerPartyId=row.BrokerPartyId
	sql_TradingCertificateVersion=row.TradingCertificateVersion
	sql_RiskReference=row.RiskReference
	sql_VesselReference=row.VesselReference
	sql_PolicyReference=row.PolicyReference
	sql_MemberReference=row.MemberReference
	sql_MemberType=row.MemberType
	sql_MemberName=row.MemberName
	sql_OwnerDomicile=row.OwnerDomicile
	sql_OwnerEmailAddress=row.OwnerEmailAddress
	sql_OwnerReference=row.OwnerReference
	sql_OwnerName=row.OwnerName
	sql_BrokerReference=row.BrokerReference
	sql_BrokerName=row.BrokerName
	sql_BrokerEmailAddress=row.BrokerEmailAddress
	sql_PolicyYear=row.PolicyYear
	sql_EmailAddress=row.EmailAddress
	sql_CurrencyCode=row.CurrencyCode
	sql_SignatoryState_Id=row.SignatoryState_Id
	sql_VesselName=row.VesselName
	sql_VesselFlag=row.VesselFlag
	sql_VesselType=row.VesselType
	sql_VesselTypeName=row.VesselTypeName
	sql_PassengerCapacity=row.PassengerCapacity
	sql_IMONumber=row.IMONumber
	sql_EngineHorsePower=row.EngineHorsePower
	sql_TradeMark=row.TradeMark
	sql_Model=row.Model
	sql_EngineNo=row.EngineNo
	sql_TenderReferenceList=row.TenderReferenceList
	sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
	sql_DistinctiveNumbersOrLetters=row.DistinctiveNumbersOrLetters
	sql_GrossTonnage=row.GrossTonnage
	sql_YearBuilt=row.YearBuilt
	sql_PortOfRegistry=row.PortOfRegistry
	sql_AddressType_Id=row.AddressType_Id
	sql_JointAssuredName=row.JointAssuredName
	sql_SourceSystem=row.SourceSystem

	sqlWriter.println(sql_Id+","+sql_TypeId+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_RiskId+","+sql_VesselId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_TradingCertificateVersion+","+sql_RiskReference+","+sql_VesselReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_OwnerReference+","+sql_OwnerName+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_EmailAddress+","+sql_CurrencyCode+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselFlag+","+sql_VesselType+","+sql_VesselTypeName+","+sql_PassengerCapacity+","+sql_IMONumber+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_PortOfRegistry+","+sql_AddressType_Id+","+sql_JointAssuredName+","+sql_SourceSystem)
	log.info "SQL Response is : "+sql_Id+","+sql_TypeId+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_RiskId+","+sql_VesselId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_TradingCertificateVersion+","+sql_RiskReference+","+sql_VesselReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_OwnerReference+","+sql_OwnerName+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_EmailAddress+","+sql_CurrencyCode+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselFlag+","+sql_VesselType+","+sql_VesselTypeName+","+sql_PassengerCapacity+","+sql_IMONumber+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_PortOfRegistry+","+sql_AddressType_Id+","+sql_JointAssuredName+","+sql_SourceSystem

	//Set the Token at test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	String certId=sql_Id
	testRunner.testCase.setPropertyValue( "certId", certId)
			
	//Run the test step to get response
	testRunner.runTestStepByName('TradingCertificatesByTradingCertificateId')
	String req1='${TradingCertificatesByTradingCertificateId#Response}'
	response=context.expand(req1)
	//log.info "API Response for GET method after post received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	httpResponseHeaders = context.testCase.testSteps["TradingCertificatesByTradingCertificateId"].testRequest.response.responseHeaders
	httpStatus = httpResponseHeaders["#status#"]
	httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		if (!jsonRes.HasError)
		{
				getApi_Id=jsonRes.id
				getApi_TypeId=jsonRes.tradingCertificateTypeId
				getApi_Reference=jsonRes.reference
				getApi_CurrentStatus=jsonRes.currentStatus
				getApi_StorageId=jsonRes.storageId
				getApi_IsRenewal=jsonRes.isRenewal
				getApi_IsYacht=jsonRes.isYacht
				getApi_RiskId=jsonRes.riskId
				getApi_VesselId=jsonRes.vesselId
				getApi_PolicyId=jsonRes.policyId
				getApi_MemberPartyId=jsonRes.memberPartyId
				getApi_OwnerPartyId=jsonRes.ownerPartyId
				getApi_BrokerPartyId=jsonRes.brokerPartyId
				getApi_TradingCertificateVersion=jsonRes.version
				getApi_RiskReference=jsonRes.riskReference
				getApi_VesselReference=jsonRes.vesselReference
				getApi_PolicyReference=jsonRes.policyReference
				getApi_MemberReference=jsonRes.memberReference
				getApi_MemberType=jsonRes.memberType
				getApi_MemberName=jsonRes.memberName
				getApi_OwnerDomicile=jsonRes.ownerDomicile
				getApi_OwnerEmailAddress=jsonRes.ownerEmailAddress
				getApi_OwnerReference=jsonRes.ownerReference
				getApi_OwnerName=jsonRes.ownerName
				getApi_BrokerReference=jsonRes.brokerReference
				getApi_BrokerName=jsonRes.brokerName
				getApi_BrokerEmailAddress=jsonRes.brokerEmailAddress
				getApi_PolicyYear=jsonRes.policyYear
				getApi_EmailAddress=jsonRes.emailAddress
				getApi_CurrencyCode=jsonRes.currencyCode
				getApi_SignatoryState_Id=jsonRes.signatoryStateId
				getApi_VesselName=jsonRes.vesselName
				getApi_VesselFlag=jsonRes.vesselFlag
				getApi_VesselType=jsonRes.vesselType
				getApi_VesselTypeName=jsonRes.vesselTypeName
				getApi_PassengerCapacity=jsonRes.passengerCapacity
				getApi_IMONumber=jsonRes.imoNumber
				getApi_EngineHorsePower=jsonRes.engineHorsePower
				getApi_TradeMark=jsonRes.trademarkAndEngineModel
				getApi_Model=jsonRes.model
				getApi_EngineNo=jsonRes.engineNo
				getApi_TenderReferenceList=jsonRes.tenderReferenceList
				getApi_TenderOutboardReferenceList=jsonRes.tenderOutboardReferenceList
				getApi_DistinctiveNumbersOrLetters=jsonRes.distinctiveNumbersOrLetters
				getApi_GrossTonnage=jsonRes.grossTonnage
				getApi_YearBuilt=jsonRes.yearBuilt
				getApi_PortOfRegistry=jsonRes.portOfRegistry
				getApi_AddressType_Id=jsonRes.addressTypeId
				getApi_JointAssuredName=jsonRes.jointAssuredName
				getApi_SourceSystem=jsonRes.sourceSystem
			
				getApiWriter.println(getApi_Id+","+getApi_TypeId+","+getApi_Reference+","+getApi_CurrentStatus+","+getApi_StorageId+","+getApi_IsRenewal+","+getApi_IsYacht+","+getApi_RiskId+","+getApi_VesselId+","+getApi_PolicyId+","+getApi_MemberPartyId+","+getApi_OwnerPartyId+","+getApi_BrokerPartyId+","+getApi_TradingCertificateVersion+","+getApi_RiskReference+","+getApi_VesselReference+","+getApi_PolicyReference+","+getApi_MemberReference+","+getApi_MemberType+","+getApi_MemberName+","+getApi_OwnerDomicile+","+getApi_OwnerEmailAddress+","+getApi_OwnerReference+","+getApi_OwnerName+","+getApi_BrokerReference+","+getApi_BrokerName+","+getApi_BrokerEmailAddress+","+getApi_PolicyYear+","+getApi_EmailAddress+","+getApi_CurrencyCode+","+getApi_SignatoryState_Id+","+getApi_VesselName+","+getApi_VesselFlag+","+getApi_VesselType+","+getApi_VesselTypeName+","+getApi_PassengerCapacity+","+getApi_IMONumber+","+getApi_EngineHorsePower+","+getApi_TradeMark+","+getApi_Model+","+getApi_EngineNo+","+getApi_TenderReferenceList+","+getApi_TenderOutboardReferenceList+","+getApi_DistinctiveNumbersOrLetters+","+getApi_GrossTonnage+","+getApi_YearBuilt+","+getApi_PortOfRegistry+","+getApi_AddressType_Id+","+getApi_JointAssuredName+","+getApi_SourceSystem)
				log.info "API Response is :" +getApi_Id+","+getApi_TypeId+","+getApi_Reference+","+getApi_CurrentStatus+","+getApi_StorageId+","+getApi_IsRenewal+","+getApi_IsYacht+","+getApi_RiskId+","+getApi_VesselId+","+getApi_PolicyId+","+getApi_MemberPartyId+","+getApi_OwnerPartyId+","+getApi_BrokerPartyId+","+getApi_TradingCertificateVersion+","+getApi_RiskReference+","+getApi_VesselReference+","+getApi_PolicyReference+","+getApi_MemberReference+","+getApi_MemberType+","+getApi_MemberName+","+getApi_OwnerDomicile+","+getApi_OwnerEmailAddress+","+getApi_OwnerReference+","+getApi_OwnerName+","+getApi_BrokerReference+","+getApi_BrokerName+","+getApi_BrokerEmailAddress+","+getApi_PolicyYear+","+getApi_EmailAddress+","+getApi_CurrencyCode+","+getApi_SignatoryState_Id+","+getApi_VesselName+","+getApi_VesselFlag+","+getApi_VesselType+","+getApi_VesselTypeName+","+getApi_PassengerCapacity+","+getApi_IMONumber+","+getApi_EngineHorsePower+","+getApi_TradeMark+","+getApi_Model+","+getApi_EngineNo+","+getApi_TenderReferenceList+","+getApi_TenderOutboardReferenceList+","+getApi_DistinctiveNumbersOrLetters+","+getApi_GrossTonnage+","+getApi_YearBuilt+","+getApi_PortOfRegistry+","+getApi_AddressType_Id+","+getApi_JointAssuredName+","+getApi_SourceSystem
			
				if(sql_Id.toString().equals(getApi_Id.toString()) && (sql_TypeId.toString()).equals(getApi_TypeId.toString()) && (sql_Reference.toString()).equals(getApi_Reference.toString()) && (sql_CurrentStatus.toString()).equals(getApi_CurrentStatus.toString()) && (sql_StorageId.toString()).equals(getApi_StorageId.toString()) && (sql_IsRenewal.toString()).equals(getApi_IsRenewal.toString()) && (sql_IsYacht.toString()).equals(getApi_IsYacht.toString()) && (sql_RiskId.toString()).equals(getApi_RiskId.toString()) && (sql_VesselId.toString()).equals(getApi_VesselId.toString()) && (sql_PolicyId.toString()).equals(getApi_PolicyId.toString()) && (sql_MemberPartyId.toString()).equals(getApi_MemberPartyId.toString()) && (sql_OwnerPartyId.toString()).equals(getApi_OwnerPartyId.toString()) && (sql_BrokerPartyId.toString()).equals(getApi_BrokerPartyId.toString()) && (sql_TradingCertificateVersion.toString()).equals(getApi_TradingCertificateVersion.toString()) && (sql_RiskReference.toString()).equals(getApi_RiskReference.toString()) && (sql_VesselReference.toString()).equals(getApi_VesselReference.toString()) && (sql_PolicyReference.toString()).equals(getApi_PolicyReference.toString()) && (sql_MemberReference.toString()).equals(getApi_MemberReference.toString()) && (sql_MemberType.toString()).equals(getApi_MemberType.toString()) && (sql_MemberName.toString()).equals(getApi_MemberName.toString()) && (sql_OwnerDomicile.toString()).equals(getApi_OwnerDomicile.toString()) && (sql_OwnerEmailAddress.toString()).equals(getApi_OwnerEmailAddress.toString()) && (sql_OwnerReference.toString()).equals(getApi_OwnerReference.toString()) && (sql_OwnerName.toString()).equals(getApi_OwnerName.toString()) && (sql_BrokerReference.toString()).equals(getApi_BrokerReference.toString()) && (sql_BrokerName.toString()).equals(getApi_BrokerName.toString()) && (sql_BrokerEmailAddress.toString()).equals(getApi_BrokerEmailAddress.toString()) && (sql_PolicyYear.toString()).equals(getApi_PolicyYear.toString()) && (sql_EmailAddress.toString()).equals(getApi_EmailAddress.toString()) && (sql_CurrencyCode.toString()).equals(getApi_CurrencyCode.toString()) && (sql_SignatoryState_Id.toString()).equals(getApi_SignatoryState_Id.toString()) && (sql_VesselName.toString()).equals(getApi_VesselName.toString()) && (sql_VesselFlag.toString()).equals(getApi_VesselFlag.toString()) && (sql_VesselType.toString()).equals(getApi_VesselType.toString()) && (sql_VesselTypeName.toString()).equals(getApi_VesselTypeName.toString()) && (sql_PassengerCapacity.toString()).equals(getApi_PassengerCapacity.toString()) && (sql_IMONumber.toString()).equals(getApi_IMONumber.toString()) && (sql_EngineHorsePower.toString()).equals(getApi_EngineHorsePower.toString()) && (sql_TradeMark.toString()).equals(getApi_TradeMark.toString()) && (sql_Model.toString()).equals(getApi_Model.toString()) && (sql_EngineNo.toString()).equals(getApi_EngineNo.toString()) && (sql_TenderReferenceList.toString()).equals(getApi_TenderReferenceList.toString()) && (sql_TenderOutboardReferenceList.toString()).equals(getApi_TenderOutboardReferenceList.toString()) && (sql_DistinctiveNumbersOrLetters.toString()).equals(getApi_DistinctiveNumbersOrLetters.toString()) && (sql_GrossTonnage.toString()).equals(getApi_GrossTonnage.toString()) && (sql_YearBuilt.toString()).equals(getApi_YearBuilt.toString()) && (sql_PortOfRegistry.toString()).equals(getApi_PortOfRegistry.toString()) && (sql_AddressType_Id.toString()).equals(getApi_AddressType_Id.toString()) && (sql_JointAssuredName.toString()).equals(getApi_JointAssuredName.toString()) && (sql_SourceSystem.toString()).equals(getApi_SourceSystem.toString()) )
				{
					compareWriter.println(sql_Id +","+ getApi_Id +","+ sql_TypeId +","+ getApi_TypeId +","+ sql_Reference +","+ getApi_Reference +","+ sql_CurrentStatus +","+ getApi_CurrentStatus +","+ sql_StorageId +","+ getApi_StorageId +","+ sql_IsRenewal +","+ getApi_IsRenewal +","+ sql_IsYacht +","+ getApi_IsYacht +","+ sql_RiskId +","+ getApi_RiskId +","+ sql_VesselId +","+ getApi_VesselId +","+ sql_PolicyId +","+ getApi_PolicyId +","+ sql_MemberPartyId +","+ getApi_MemberPartyId +","+ sql_OwnerPartyId +","+ getApi_OwnerPartyId +","+ sql_BrokerPartyId +","+ getApi_BrokerPartyId +","+ sql_TradingCertificateVersion +","+ getApi_TradingCertificateVersion +","+ sql_RiskReference +","+ getApi_RiskReference +","+ sql_VesselReference +","+ getApi_VesselReference +","+ sql_PolicyReference +","+ getApi_PolicyReference +","+ sql_MemberReference +","+ getApi_MemberReference +","+ sql_MemberType +","+ getApi_MemberType +","+ sql_MemberName +","+ getApi_MemberName +","+ sql_OwnerDomicile +","+ getApi_OwnerDomicile +","+ sql_OwnerEmailAddress +","+ getApi_OwnerEmailAddress +","+ sql_OwnerReference +","+ getApi_OwnerReference +","+ sql_OwnerName +","+ getApi_OwnerName +","+ sql_BrokerReference +","+ getApi_BrokerReference +","+ sql_BrokerName +","+ getApi_BrokerName +","+ sql_BrokerEmailAddress +","+ getApi_BrokerEmailAddress +","+ sql_PolicyYear +","+ getApi_PolicyYear +","+ sql_EmailAddress +","+ getApi_EmailAddress +","+ sql_CurrencyCode +","+ getApi_CurrencyCode +","+ sql_SignatoryState_Id +","+ sql_VesselName +","+ getApi_VesselName +","+ sql_VesselFlag +","+ getApi_VesselFlag +","+ sql_VesselType +","+ getApi_VesselType +","+ sql_VesselTypeName +","+ getApi_VesselTypeName +","+ sql_PassengerCapacity +","+ getApi_PassengerCapacity +","+ sql_IMONumber +","+ getApi_IMONumber +","+ sql_EngineHorsePower +","+ getApi_EngineHorsePower +","+ sql_TradeMark +","+ getApi_TradeMark +","+ sql_Model +","+ getApi_Model +","+ sql_EngineNo +","+ getApi_EngineNo +","+ sql_TenderReferenceList +","+ getApi_TenderReferenceList +","+ sql_TenderOutboardReferenceList +","+ getApi_TenderOutboardReferenceList +","+ sql_DistinctiveNumbersOrLetters +","+ getApi_DistinctiveNumbersOrLetters +","+ sql_GrossTonnage +","+ getApi_GrossTonnage +","+ sql_YearBuilt +","+ getApi_YearBuilt +","+ sql_PortOfRegistry +","+ getApi_PortOfRegistry +","+ sql_AddressType_Id +","+ getApi_AddressType_Id +","+ sql_JointAssuredName +","+ getApi_JointAssuredName +","+ sql_SourceSystem +","+ getApi_SourceSystem +","+ "Test Case Passed")
					log.info "Details are matching, hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_Id +","+ getApi_Id +","+ sql_TypeId +","+ getApi_TypeId +","+ sql_Reference +","+ getApi_Reference +","+ sql_CurrentStatus +","+ getApi_CurrentStatus +","+ sql_StorageId +","+ getApi_StorageId +","+ sql_IsRenewal +","+ getApi_IsRenewal +","+ sql_IsYacht +","+ getApi_IsYacht +","+ sql_RiskId +","+ getApi_RiskId +","+ sql_VesselId +","+ getApi_VesselId +","+ sql_PolicyId +","+ getApi_PolicyId +","+ sql_MemberPartyId +","+ getApi_MemberPartyId +","+ sql_OwnerPartyId +","+ getApi_OwnerPartyId +","+ sql_BrokerPartyId +","+ getApi_BrokerPartyId +","+ sql_TradingCertificateVersion +","+ getApi_TradingCertificateVersion +","+ sql_RiskReference +","+ getApi_RiskReference +","+ sql_VesselReference +","+ getApi_VesselReference +","+ sql_PolicyReference +","+ getApi_PolicyReference +","+ sql_MemberReference +","+ getApi_MemberReference +","+ sql_MemberType +","+ getApi_MemberType +","+ sql_MemberName +","+ getApi_MemberName +","+ sql_OwnerDomicile +","+ getApi_OwnerDomicile +","+ sql_OwnerEmailAddress +","+ getApi_OwnerEmailAddress +","+ sql_OwnerReference +","+ getApi_OwnerReference +","+ sql_OwnerName +","+ getApi_OwnerName +","+ sql_BrokerReference +","+ getApi_BrokerReference +","+ sql_BrokerName +","+ getApi_BrokerName +","+ sql_BrokerEmailAddress +","+ getApi_BrokerEmailAddress +","+ sql_PolicyYear +","+ getApi_PolicyYear +","+ sql_EmailAddress +","+ getApi_EmailAddress +","+ sql_CurrencyCode +","+ getApi_CurrencyCode +","+ sql_SignatoryState_Id +","+ getApi_SignatoryState_Id +","+ sql_VesselName +","+ getApi_VesselName +","+ sql_VesselFlag +","+ getApi_VesselFlag +","+ sql_VesselType +","+ getApi_VesselType +","+ sql_VesselTypeName +","+ getApi_VesselTypeName +","+ sql_PassengerCapacity +","+ getApi_PassengerCapacity +","+ sql_IMONumber +","+ getApi_IMONumber +","+ sql_EngineHorsePower +","+ getApi_EngineHorsePower +","+ sql_TradeMark +","+ getApi_TradeMark +","+ sql_Model +","+ getApi_Model +","+ sql_EngineNo +","+ getApi_EngineNo +","+ sql_TenderReferenceList +","+ getApi_TenderReferenceList +","+ sql_TenderOutboardReferenceList +","+ getApi_TenderOutboardReferenceList +","+ sql_DistinctiveNumbersOrLetters +","+ getApi_DistinctiveNumbersOrLetters +","+ sql_GrossTonnage +","+ getApi_GrossTonnage +","+ sql_YearBuilt +","+ getApi_YearBuilt +","+ sql_PortOfRegistry +","+ getApi_PortOfRegistry +","+ sql_AddressType_Id +","+ getApi_AddressType_Id +","+ sql_JointAssuredName +","+ getApi_JointAssuredName +","+ sql_SourceSystem +","+ getApi_SourceSystem +","+ "Test Case Failed")
					log.info "Details are not matching, hence test case is failed"
				}
		}
	}
	else
	{
		log.info "Failed API response received as : "+response
	}		
	counter=counter+1
	log.info "Number of records verified are : "+counter
}

sqlWriter.flush()
getApiWriter.flush()
compareWriter.flush()

sqlWriter.close()
getApiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for Get method of Trading Certificates By Trading Certificate Id************"	]]></script></con:config></con:testStep><con:properties><con:property><con:name>certId</con:name><con:value>462</con:value></con:property></con:properties></con:testCase><con:testCase id="0c28afbc-02ec-43c4-b13d-28c4a72b52d0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_ReferenceByInvalidCerttificate" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RefByInvalidCertificate" id="01116596-f8fa-42d7-a253-69c8e6ad7672"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/invalidCert" methodName="ReferenceByInvalidCertificate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByInvalidCertificate" id="45774e96-1ca2-47f5-953c-37023d5b3901" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>[
  {
    "id": 1234,
    "name": "Newstring",
    "reference": 56789,
    "vesselTypeShortCode": "FF",
    "vesselType": "FISH FARM VESSELS",
    "grossTonnage": 2000,
    "passengerCarryingCapacity": 0,
    "policyReference": 10125201,
    "policyStart": "2021-02-18T11:40:11.473Z",
    "policyEnd": "2022-02-18T11:40:11.473Z",
    "coverLimits": [
      {
        "id": 77,
        "coverShortName": "Passenger Vess Liab",
        "limitName": "Notwithstanding the limits above, cover will be subject to a combined single limit, each incident",
        "currencyCode": "USD",
        "amount": 500000000.00,
        "isThePrimaryCoverLimit": true
      }
    ]
  }
]</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/invalidCert</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceByInvalidCertificates" id="11fa722f-9f0f-400c-9b33-fc0e025703af" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST method of Reference By TradingCertificate************"

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByInvalidTradingCertificate.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceByInvalidTradingCertificate.csv"]

//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByInvalidTradingCertificate"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceByInvalidTradingCertificate"+newDateTimeString+".csv"]

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

apiWriter.println("API_TradingCertificateTypeId"+","+"API_TradingCertificateGroupId"+","+"API_TradingCertificateGroupName"+","+"API_TypeCode"+","+"API_TradingCertificateTypeName")
compareWriter.println("SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"API_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"API_TradingCertificateGroupName"+","+"SQL_TypeCode"+","+"API_TypeCode"+","+"SQL_TradingCertificateTypeName"+","+"API_TradingCertificateTypeName"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

con.eachRow(sqlstmt)
{	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	//Run the test Step with name
	testRunner.runTestStepByName('RefByInvalidCertificate')
	String req='${RefByInvalidCertificate#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefByTradingCertificateTypes"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		for(int i=0; i<db_size; i++)
		{
			String newId = jsonRes.id[i]
			if(newId.toString().equals(sql_TradingCertificateTypeId.toString()))
			{
				api_TradingCertificateTypeId=jsonRes.id[i]
				api_TradingCertificateGroupId=jsonRes.tradingCertificateGroup.id[i]
				api_TradingCertificateGroupName=jsonRes.tradingCertificateGroup.name[i]
				api_TypeCode=jsonRes.typeCode[i]
				api_TradingCertificateTypeName=jsonRes.typeName[i]
	
				apiWriter.println(api_TradingCertificateTypeId+","+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_TypeCode+","+api_TradingCertificateTypeName)
				log.info "API responce received as : "+api_TradingCertificateTypeId+","+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_TypeCode+","+api_TradingCertificateTypeName
				
				if(api_TradingCertificateTypeId.toString().equals(sql_TradingCertificateTypeId.toString()) && api_TradingCertificateGroupId.toString().equals(sql_TradingCertificateGroupId.toString()) && api_TradingCertificateGroupName.toString().toUpperCase().equals(sql_TradingCertificateGroupName.toString().toUpperCase()) && api_TypeCode.toString().toUpperCase().equals(sql_TypeCode.toString().toUpperCase()) && api_TradingCertificateTypeName.toString().toUpperCase().equals(sql_TradingCertificateTypeName.toString().toUpperCase()))
				{
					compareWriter.println(sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TypeCode+","+api_TypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+"Test Case Passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TypeCode+","+api_TypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+"Test Case Failed")
					log.info "Details are not matching hence test case is failed"
				}
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for POST method of Reference By TradingCertificate***********"]]></script></con:config></con:testStep><con:testStep type="groovy" name="ExcelRead" id="06bc451d-e755-43be-ac7c-d9627cc979b2" disabled="true"><con:settings/><con:config><script>import jxl.* // import Java Excel API library

def TestCase = context.testCase
def FilePath = "C:\\APITesting\\TradingCertificateTesting\\VesselTypeCertificateValidation.xls"

int count=1
Workbook WorkBook1 = Workbook.getWorkbook(new File(FilePath))

Sheet Sheet1 = WorkBook1.getSheet(1)
log.info Sheet1.getName()

PropertiesTestStep = TestCase.getTestStepByName("Properties")

count = PropertiesTestStep.getPropertyValue("counter").toInteger()
int rowscount=Sheet1.getRows()
int lineNumber =0;

for(int i=0; i&lt;rowscount; i++)
{
	lineNumber = count+1
	log.info "Reading line number : "+lineNumber
	Cell VesselCategory=Sheet1.getCell(0,count)
	Cell EntryType=Sheet1.getCell(1,count)
	Cell id=Sheet1.getCell(2,count)
	Cell name=Sheet1.getCell(3,count)
	Cell reference=Sheet1.getCell(4,count)
	Cell vesselTypeShortCode=Sheet1.getCell(5,count)
	Cell vesselType=Sheet1.getCell(6,count)
	Cell grossTonnage=Sheet1.getCell(7,count)
	Cell passengerCarryingCapacity=Sheet1.getCell(8,count)
	Cell policyReference=Sheet1.getCell(9,count)
	Cell PolicyStart=Sheet1.getCell(10,count)
	Cell PolicyEnd=Sheet1.getCell(11,count)
	Cell CoverLimitid=Sheet1.getCell(12,count)
	Cell coverShortName=Sheet1.getCell(13,count)
	Cell limitName=Sheet1.getCell(14,count)
	Cell currencyCode=Sheet1.getCell(15,count)
	Cell amount=Sheet1.getCell(16,count)
	Cell isThePrimaryCoverLimit=Sheet1.getCell(17,count)
	Cell BBC=Sheet1.getCell(18,count)
	Cell PLRINC=Sheet1.getCell(19,count)
	Cell PLREXC=Sheet1.getCell(20,count)
	Cell NWRC=Sheet1.getCell(21,count)
	Cell CLC=Sheet1.getCell(22,count)
	Cell ITOPF=Sheet1.getCell(23,count)
	Cell MLCA225=Sheet1.getCell(24,count)
	Cell MLCA241=Sheet1.getCell(25,count)
	Cell COFRGreatAmerican=Sheet1.getCell(26,count)
	Cell COFRShoreline=Sheet1.getCell(27,count)
	Cell COFRSIGCO=Sheet1.getCell(28,count)
	Cell COFRSeaAssurance=Sheet1.getCell(29,count)
	Cell COEAsPerRuleEnglish=Sheet1.getCell(30,count)
	Cell COEAsPerRuleSpanish=Sheet1.getCell(31,count)
	Cell COEUSD500MillionEnglish=Sheet1.getCell(32,count)
	Cell COEUSD500MillionSpanish=Sheet1.getCell(33,count)
	Cell GreekCOEEnglish=Sheet1.getCell(34,count)
	Cell GreekCOEGreek=Sheet1.getCell(35,count)
	Cell ItalianCOEEnglish=Sheet1.getCell(36,count)
	Cell ItalianCOEItalian=Sheet1.getCell(37,count)
	Cell BalearicsCOEEnglish=Sheet1.getCell(38,count)
	Cell BalearicsCOESpanish=Sheet1.getCell(39,count)
	Cell SpanishCOEYachtEnglish=Sheet1.getCell(40,count)
	Cell SpanishCOEYachtSpanish=Sheet1.getCell(41,count)
	Cell LoU=Sheet1.getCell(42,count)

	log.info ("Line==>"+lineNumber)
	log.info (" VesselCategory "+VesselCategory.getContents()+" EntryType "+EntryType.getContents()+" id "+id.getContents()+" name "+name.getContents()+" reference "+reference.getContents()+" vesselTypeShortCode "+vesselTypeShortCode.getContents()+" vesselType "+vesselType.getContents()+" grossTonnage "+grossTonnage.getContents()+" passengerCarryingCapacity "+passengerCarryingCapacity.getContents()+" policyReference "+policyReference.getContents()+" PolicyStart "+PolicyStart.getContents()+" PolicyEnd "+PolicyEnd.getContents()+" CoverLimitid "+CoverLimitid.getContents()+" coverShortName "+coverShortName.getContents()+" limitName "+limitName.getContents()+" currencyCode "+currencyCode.getContents()+" amount "+amount.getContents()+" isThePrimaryCoverLimit "+isThePrimaryCoverLimit.getContents()+" BBC "+BBC.getContents()+" PLRINC "+PLRINC.getContents()+" PLREXC "+PLREXC.getContents()+" NWRC "+NWRC.getContents()+" CLC "+CLC.getContents()+" ITOPF "+ITOPF.getContents()+" MLCA225 "+MLCA225.getContents()+" MLCA241 "+MLCA241.getContents()+" COFRGreatAmerican "+COFRGreatAmerican.getContents()+" COFRShoreline "+COFRShoreline.getContents()+" COFRSIGCO "+COFRSIGCO.getContents()+" COFRSeaAssurance "+COFRSeaAssurance.getContents()+" COEAsPerRuleEnglish "+COEAsPerRuleEnglish.getContents()+" COEAsPerRuleSpanish "+COEAsPerRuleSpanish.getContents()+" COEUSD500MillionEnglish "+COEUSD500MillionEnglish.getContents()+" COEUSD500MillionSpanish "+COEUSD500MillionSpanish.getContents()+" GreekCOEEnglish "+GreekCOEEnglish.getContents()+" GreekCOEGreek "+GreekCOEGreek.getContents()+" ItalianCOEEnglish "+ItalianCOEEnglish.getContents()+" ItalianCOEItalian "+ItalianCOEItalian.getContents()+" BalearicsCOEEnglish "+BalearicsCOEEnglish.getContents()+" BalearicsCOESpanish "+BalearicsCOESpanish.getContents()+" SpanishCOEYachtEnglish "+SpanishCOEYachtEnglish.getContents()+" SpanishCOEYachtSpanish "+SpanishCOEYachtSpanish.getContents()+" LoU "+LoU.getContents())

	PropertiesTestStep.setPropertyValue("VesselCategory",VesselCategory.getContents())
	PropertiesTestStep.setPropertyValue("EntryType",EntryType.getContents())
	PropertiesTestStep.setPropertyValue("id",id.getContents())
	PropertiesTestStep.setPropertyValue("name",name.getContents())
	PropertiesTestStep.setPropertyValue("reference",reference.getContents())
	PropertiesTestStep.setPropertyValue("vesselTypeShortCode",vesselTypeShortCode.getContents())
	PropertiesTestStep.setPropertyValue("vesselType",vesselType.getContents())
	PropertiesTestStep.setPropertyValue("grossTonnage",grossTonnage.getContents())
	PropertiesTestStep.setPropertyValue("passengerCarryingCapacity",passengerCarryingCapacity.getContents())
	PropertiesTestStep.setPropertyValue("policyReference",policyReference.getContents())
	PropertiesTestStep.setPropertyValue("PolicyStart",PolicyStart.getContents())
	PropertiesTestStep.setPropertyValue("PolicyEnd",PolicyEnd.getContents())
	PropertiesTestStep.setPropertyValue("CoverLimitid",CoverLimitid.getContents())
	PropertiesTestStep.setPropertyValue("coverShortName",coverShortName.getContents())
	PropertiesTestStep.setPropertyValue("limitName",limitName.getContents())
	PropertiesTestStep.setPropertyValue("currencyCode",currencyCode.getContents())
	PropertiesTestStep.setPropertyValue("amount",amount.getContents())
	PropertiesTestStep.setPropertyValue("isThePrimaryCoverLimit",isThePrimaryCoverLimit.getContents())
	PropertiesTestStep.setPropertyValue("BBC",BBC.getContents())
	PropertiesTestStep.setPropertyValue("PLRINC",PLRINC.getContents())
	PropertiesTestStep.setPropertyValue("PLREXC",PLREXC.getContents())
	PropertiesTestStep.setPropertyValue("NWRC",NWRC.getContents())
	PropertiesTestStep.setPropertyValue("CLC",CLC.getContents())
	PropertiesTestStep.setPropertyValue("ITOPF",ITOPF.getContents())
	PropertiesTestStep.setPropertyValue("MLCA225",MLCA225.getContents())
	PropertiesTestStep.setPropertyValue("MLCA241",MLCA241.getContents())
	PropertiesTestStep.setPropertyValue("COFRGreatAmerican",COFRGreatAmerican.getContents())
	PropertiesTestStep.setPropertyValue("COFRShoreline",COFRShoreline.getContents())
	PropertiesTestStep.setPropertyValue("COFRSIGCO",COFRSIGCO.getContents())
	PropertiesTestStep.setPropertyValue("COFRSeaAssurance",COFRSeaAssurance.getContents())
	PropertiesTestStep.setPropertyValue("COEAsPerRuleEnglish",COEAsPerRuleEnglish.getContents())
	PropertiesTestStep.setPropertyValue("COEAsPerRuleSpanish",COEAsPerRuleSpanish.getContents())
	PropertiesTestStep.setPropertyValue("COEUSD500MillionEnglish",COEUSD500MillionEnglish.getContents())
	PropertiesTestStep.setPropertyValue("COEUSD500MillionSpanish",COEUSD500MillionSpanish.getContents())
	PropertiesTestStep.setPropertyValue("GreekCOEEnglish",GreekCOEEnglish.getContents())
	PropertiesTestStep.setPropertyValue("GreekCOEGreek",GreekCOEGreek.getContents())
	PropertiesTestStep.setPropertyValue("ItalianCOEEnglish",ItalianCOEEnglish.getContents())
	PropertiesTestStep.setPropertyValue("ItalianCOEItalian",ItalianCOEItalian.getContents())
	PropertiesTestStep.setPropertyValue("BalearicsCOEEnglish",BalearicsCOEEnglish.getContents())
	PropertiesTestStep.setPropertyValue("BalearicsCOESpanish",BalearicsCOESpanish.getContents())
	PropertiesTestStep.setPropertyValue("SpanishCOEYachtEnglish",SpanishCOEYachtEnglish.getContents())
	PropertiesTestStep.setPropertyValue("SpanishCOEYachtSpanish",SpanishCOEYachtSpanish.getContents())
	PropertiesTestStep.setPropertyValue("LoU",LoU.getContents())
/*
	//Copy the Excel test data to properties in Properties test step
	PropertiesTestStep.setPropertyValue("Vessel Category",Field1.getContents())
	PropertiesTestStep.setPropertyValue("Entry Type",Field2.getContents())
	PropertiesTestStep.setPropertyValue("id",Field3.getContents())
	PropertiesTestStep.setPropertyValue("name",Field4.getContents())
	PropertiesTestStep.setPropertyValue("reference",Field5.getContents())
	PropertiesTestStep.setPropertyValue("vesselTypeShortCode",Field6.getContents())
	PropertiesTestStep.setPropertyValue("vesselType",Field7.getContents())
	PropertiesTestStep.setPropertyValue("grossTonnage",Field8.getContents())
	PropertiesTestStep.setPropertyValue("passengerCarryingCapacity",Field9.getContents())
	PropertiesTestStep.setPropertyValue("policyReference",Field10.getContents())
	PropertiesTestStep.setPropertyValue("PolicyStart",Field11.getContents())
	PropertiesTestStep.setPropertyValue("PolicyEnd",Field12.getContents())
	PropertiesTestStep.setPropertyValue("CoverLimit id",Field13.getContents())
	PropertiesTestStep.setPropertyValue("coverShortName",Field14.getContents())
	PropertiesTestStep.setPropertyValue("limitName",Field15.getContents())
	PropertiesTestStep.setPropertyValue("currencyCode",Field16.getContents())
	PropertiesTestStep.setPropertyValue("amount",Field17.getContents())
	PropertiesTestStep.setPropertyValue("isThePrimaryCoverLimit",Field18.getContents())
	PropertiesTestStep.setPropertyValue("BBC",Field19.getContents())
	PropertiesTestStep.setPropertyValue("PLR INC",Field20.getContents())
	PropertiesTestStep.setPropertyValue("PLR EXC",Field21.getContents())
	PropertiesTestStep.setPropertyValue("NWRC",Field22.getContents())
	PropertiesTestStep.setPropertyValue("CLC",Field23.getContents())
	PropertiesTestStep.setPropertyValue("ITOPF",Field24.getContents())
	PropertiesTestStep.setPropertyValue("MLC-A.2.2.5",Field25.getContents())
	PropertiesTestStep.setPropertyValue("MLC-A.2.4.1",Field26.getContents())
	PropertiesTestStep.setPropertyValue("COFR-Great American",Field27.getContents())
	PropertiesTestStep.setPropertyValue("COFR-Shoreline",Field28.getContents())
	PropertiesTestStep.setPropertyValue("COFR-SIGCO",Field29.getContents())
	PropertiesTestStep.setPropertyValue("COFR-SeaAssurance",Field30.getContents())
	PropertiesTestStep.setPropertyValue("COE-As Per Rule English",Field31.getContents())
	PropertiesTestStep.setPropertyValue("COE-As Per Rule Spanish",Field32.getContents())
	PropertiesTestStep.setPropertyValue("COE-USD500 Million English",Field33.getContents())
	PropertiesTestStep.setPropertyValue("COE-USD500 Million Spanish",Field34.getContents())
	PropertiesTestStep.setPropertyValue("Greek COE - English",Field35.getContents())
	PropertiesTestStep.setPropertyValue("Greek COE - Greek",Field36.getContents())
	PropertiesTestStep.setPropertyValue("Italian COE - English",Field37.getContents())
	PropertiesTestStep.setPropertyValue("Italian COE - Italian",Field38.getContents())
	PropertiesTestStep.setPropertyValue("Balearics COE - English",Field39.getContents())
	PropertiesTestStep.setPropertyValue("Balearics COE - Spanish",Field40.getContents())
	PropertiesTestStep.setPropertyValue("Spanish COE Yacht - English",Field41.getContents())
	PropertiesTestStep.setPropertyValue("Spanish COE Yacht  - Spanish",Field42.getContents())
	PropertiesTestStep.setPropertyValue("LoU",Field43.getContents())
*/	

	//	PropertiesTestStep.setPropertyValue("counter",Field44.getContents())
	//	PropertiesTestStep.setPropertyValue("End",Field46.getContents())

	PropertiesTestStep.setPropertyValue("Total",rowscount.toString())


	if(count!=rowscount)
	{
		count++
	}
//	if (count == PropertiesTestStep.getPropertyValue("Total").toInteger() - 1)
//	    PropertiesTestStep.setPropertyValue("End", "True")	    
	}
WorkBook1.close()</script></con:config></con:testStep><con:testStep type="properties" name="Properties" id="f379da3b-d0a2-427e-8857-04e3814c9699"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>Vessel Category</con:name><con:value>Yachts</con:value></con:property><con:property><con:name>Entry Type</con:name><con:value/></con:property><con:property><con:name>id</con:name><con:value/></con:property><con:property><con:name>name</con:name><con:value/></con:property><con:property><con:name>reference</con:name><con:value/></con:property><con:property><con:name>vesselTypeShortCode</con:name><con:value>YPD</con:value></con:property><con:property><con:name>vesselType</con:name><con:value/></con:property><con:property><con:name>grossTonnage</con:name><con:value>1001</con:value></con:property><con:property><con:name>passengerCarryingCapacity</con:name><con:value>13</con:value></con:property><con:property><con:name>policyReference</con:name><con:value/></con:property><con:property><con:name>PolicyStart</con:name><con:value/></con:property><con:property><con:name>PolicyEnd</con:name><con:value/></con:property><con:property><con:name>CoverLimit id </con:name><con:value/></con:property><con:property><con:name>coverShortName</con:name><con:value/></con:property><con:property><con:name>limitName</con:name><con:value/></con:property><con:property><con:name>currencyCode</con:name><con:value/></con:property><con:property><con:name>amount</con:name><con:value>USD 500,000,000</con:value></con:property><con:property><con:name>isThePrimaryCoverLimit</con:name><con:value/></con:property><con:property><con:name>BBC</con:name><con:value>O</con:value></con:property><con:property><con:name>PLR INC</con:name><con:value>O</con:value></con:property><con:property><con:name>PLR EXC</con:name><con:value>O</con:value></con:property><con:property><con:name>NWRC</con:name><con:value>O</con:value></con:property><con:property><con:name>CLC</con:name><con:value>O</con:value></con:property><con:property><con:name>ITOPF</con:name><con:value>O</con:value></con:property><con:property><con:name>MLC-A.2.2.5</con:name><con:value>O</con:value></con:property><con:property><con:name>MLC-A.2.4.1</con:name><con:value>O</con:value></con:property><con:property><con:name>COFR-Great American</con:name><con:value>O</con:value></con:property><con:property><con:name>COFR-Shoreline</con:name><con:value>O</con:value></con:property><con:property><con:name>COFR-SIGCO</con:name><con:value>O</con:value></con:property><con:property><con:name>COFR-SeaAssurance</con:name><con:value>O</con:value></con:property><con:property><con:name>COE-As Per Rule English</con:name><con:value>O</con:value></con:property><con:property><con:name>COE-As Per Rule Spanish</con:name><con:value>O</con:value></con:property><con:property><con:name>COE-USD500 Million English</con:name><con:value>O</con:value></con:property><con:property><con:name>COE-USD500 Million Spanish</con:name><con:value>O</con:value></con:property><con:property><con:name>Greek COE - English</con:name><con:value>O</con:value></con:property><con:property><con:name>Greek COE - Greek</con:name><con:value>O</con:value></con:property><con:property><con:name>Italian COE - English</con:name><con:value>O</con:value></con:property><con:property><con:name>Italian COE - Italian</con:name><con:value>O</con:value></con:property><con:property><con:name>Balearics COE - English</con:name><con:value>O</con:value></con:property><con:property><con:name>Balearics COE - Spanish</con:name><con:value>O</con:value></con:property><con:property><con:name>Spanish COE Yacht - English</con:name><con:value>O</con:value></con:property><con:property><con:name>Spanish COE Yacht  - Spanish</con:name><con:value>O</con:value></con:property><con:property><con:name>LoU</con:name><con:value>O</con:value></con:property><con:property><con:name>Counter</con:name><con:value>0</con:value></con:property><con:property><con:name>Total</con:name><con:value>46</con:value></con:property><con:property><con:name>End</con:name><con:value/></con:property><con:property><con:name>CoverLimit id</con:name><con:value/></con:property><con:property><con:name>VesselCategory</con:name><con:value>Yachts</con:value></con:property><con:property><con:name>EntryType</con:name><con:value/></con:property><con:property><con:name>CoverLimitid</con:name><con:value/></con:property><con:property><con:name>PLRINC</con:name><con:value>O</con:value></con:property><con:property><con:name>PLREXC</con:name><con:value>O</con:value></con:property><con:property><con:name>MLCA225</con:name><con:value>O</con:value></con:property><con:property><con:name>MLCA241</con:name><con:value>O</con:value></con:property><con:property><con:name>COFRGreatAmerican</con:name><con:value>O</con:value></con:property><con:property><con:name>COFRShoreline</con:name><con:value>O</con:value></con:property><con:property><con:name>COFRSIGCO</con:name><con:value>O</con:value></con:property><con:property><con:name>COFRSeaAssurance</con:name><con:value>O</con:value></con:property><con:property><con:name>COEAsPerRuleEnglish</con:name><con:value>O</con:value></con:property><con:property><con:name>COEAsPerRuleSpanish</con:name><con:value>O</con:value></con:property><con:property><con:name>COEUSD500MillionEnglish</con:name><con:value>O</con:value></con:property><con:property><con:name>COEUSD500MillionSpanish</con:name><con:value>O</con:value></con:property><con:property><con:name>GreekCOEEnglish</con:name><con:value>O</con:value></con:property><con:property><con:name>GreekCOEGreek</con:name><con:value>O</con:value></con:property><con:property><con:name>ItalianCOEEnglish</con:name><con:value>O</con:value></con:property><con:property><con:name>ItalianCOEItalian</con:name><con:value>O</con:value></con:property><con:property><con:name>BalearicsCOEEnglish</con:name><con:value>O</con:value></con:property><con:property><con:name>BalearicsCOESpanish</con:name><con:value>O</con:value></con:property><con:property><con:name>SpanishCOEYachtEnglish</con:name><con:value>O</con:value></con:property><con:property><con:name>SpanishCOEYachtSpanish</con:name><con:value>O</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="groovy" name="csvFileReading" id="014e25ac-bf66-4391-8b85-9798c43f9eee" disabled="true"><con:settings/><con:config><script>//import java.util.ArrayList
//
//ArrayList&lt;String> values = new ArrayList&lt;String>()
//
//def myFile = new File("C:\\APITesting\\TradingCertificateTesting\\VesselTypeCertificateValidation.csv")
//def lines = myFile.readLines()
//lines.each
//{
//	line ->
//	//println line
//	//log.info "line: "+line
// 	for (int i=0; i&lt;44; i++)
// 	{
// 		values[i]=line
// 		if(line.toString().contains("Fishing Vessels"))
// 		{
// 			log.info "values["+i+"]="+values[i]	
// 		}
// 	}	
//}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script_Rohit" id="679ee14e-c011-4429-80a5-650fe3f19083" disabled="true"><con:settings/><con:config><script>import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token


def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST method of Reference By InvalidCertificate************"


//Reading the Business Rules Sheet
def inputStream = new FileInputStream("C:\\APITesting\\TradingCertificateTesting\\TC_BusinessRules_AutomationTesting.xlsx");
Workbook wb = WorkbookFactory.create(inputStream);
//HSSFWorkbook workbook1 = new HSSFWorkbook (inputStream)
  //  Workbook workbook1 = WorkbookFactory.create( inputStream );
//Workbook workbook1 = Workbook.getWorkbook(config) //file containing the data

def ws = wb.getSheet("VesselType_Validation")
def count = ws.getPhysicalNumberOfRows()



com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt =
"""
	Use tradingcertificate
	Select *
	from TradingCertificate TC

"""

def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByInvalidTradingCertificate.csv"]
def businessRulesFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\BusinessRulesResponse_ReferenceByInvalidTradingCertificate.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceByInvalidTradingCertificate.csv"]

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def rulesFile = new File(businessRulesFile[0])
def rulesWriter = rulesFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

apiWriter.println("ApplicationRiskId"+","+"Reference"+","+"API_tradingCertificateTypeCode"+","+"API_isInvalid"+","+"API_isVesselTypeInvalid"+","+"API_isGrossTonnageInvalid"+","+"API_isPassengerCapacityInvalid"+","+"API_isPolicyDateInvalid"+","+"API_isCoverLimitInvalid"+","+"API_coverLimitName"+","+"API_disabledReasonText")
rulesWriter.println("ApplicationRiskId"+","+"Reference"+","+"RULES_tradingCertificateTypeCode"+","+"RULES_isInvalid"+","+"RULES_isVesselTypeInvalid"+","+"RULES_isGrossTonnageInvalid"+","+"RULES_isPassengerCapacityInvalid"+","+"RULES_isPolicyDateInvalid"+","+"RULES_isCoverLimitInvalid"+","+"RULES_coverLimitName"+","+"RULES_disabledReasonText")
compareWriter.println("API_tradingCertificateTypeCode"+","+"RULES_tradingCertificateTypeCode"+","+"API_isInvalid"+","+"RULES_isInvalid"+","+"API_isVesselTypeInvalid"+","+"RULES_isVesselTypeInvalid"+","+"API_isGrossTonnageInvalid"+","+"RULES_isGrossTonnageInvalid"+","+"API_isPassengerCapacityInvalid"+","+"RULES_isPassengerCapacityInvalid"+","+"API_isPolicyDateInvalid"+","+"RULES_isPolicyDateInvalid"+","+"API_isCoverLimitInvalid"+","+"RULES_isCoverLimitInvalid"+","+"API_coverLimitName"+","+"RULES_coverLimitName"+","+"API_disabledReasonText"+","+"RULES_disabledReasonText"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
	sql_applicationRiskId = row.RiskId
	sql_reference = row.RiskReference
	sql_vesselTypeShortCode = row.VesselName
	sql_vesselType = row.VesselTypeName
	sql_grossTonnage = row.GrossTonnage
	sql_passengerCarryingCapacity = row.PassengerCapacity
	sql_policyReference = row.PolicyReference
	sql_policyStart = row.PolicyStartDate
	sql_policyEnd = row.PolicyEndDate
	sql_currencyCode = row.CurrencyCode
	sql_amount = row.CoverLimitAmount
	sql_vesselName=row.VesselName

	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
	
	//"name": "Newstring",
	
	def newRequest = """
	[
	  {
	    "id": $sql_applicationRiskId,
	    "name": $sql_vesselName,
	    "reference": $sql_reference,
	    "vesselTypeShortCode": "$sql_vesselTypeShortCode",
	    "vesselType": "$sql_vesselType",
	    "grossTonnage": $sql_grossTonnage,
	    "passengerCarryingCapacity": $sql_passengerCarryingCapacity,
	    "policyReference": $sql_policyReference,
	    "policyStart": "$sql_policyStart",
	    "policyEnd": "$sql_policyEnd",
	    "coverLimits": [
	      {
	        "id": 77,
	        "coverShortName": "Passenger Vess Liab",
	        "limitName": "Notwithstanding the limits above, cover will be subject to a combined single limit, each incident",
	        "currencyCode": "$sql_currencyCode",
	        "amount": $sql_amount,
	        "isThePrimaryCoverLimit": true
	      }
	    ]
	  }
	]
	"""

	//Run the test Step with name
	testRunner.testCase.testSteps["RefByInvalidCertificate"].setPropertyValue( "Request", newRequest)
	testRunner.runTestStepByName('RefByInvalidCertificate')
	String req='${RefByInvalidCertificate#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefByTradingCertificateTypes"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		if (!jsonRes.HasError)
		{
			for(int i=0; i&lt;26; i++)
			{
				postApi_applicationRiskId = jsonRes.applicationRiskId[i]
				postApi_reference = jsonRes.reference[i]
				postApi_tradingCertificateTypeCode = jsonRes.tradingCertificateTypeCode[i]
				postApi_isInvalid = jsonRes.isInvalid[i]
				postApi_isVesselTypeInvalid = jsonRes.isVesselTypeInvalid[i]
				postApi_isGrossTonnageInvalid = jsonRes.isGrossTonnageInvalid[i]
				postApi_isPassengerCapacityInvalid = jsonRes.isPassengerCapacityInvalid[i]
				postApi_isPolicyDateInvalid = jsonRes.isPolicyDateInvalid[i]
				postApi_isCoverLimitInvalid = jsonRes.isCoverLimitInvalid[i]
				postApi_coverLimitName = jsonRes.coverLimitName[i]
				postApi_disabledReasonText=jsonRes.disabledReasonText[i]
	
				ApiWriter.println(postApi_applicationRiskId+","+postApi_reference+","+postApi_tradingCertificateTypeCode+","+postApi_isInvalid+","+postApi_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+postApi_coverLimitName+","+postApi_disabledReasonText)
				
				rules_applicationRiskId = postApi_applicationRiskId
				rules_vesselTypeShortCode = sql_vesselTypeShortCode
				rules_vesselType = sql_vesselType
				
				for(i=0; i&lt;count; i++)
				{
					//Row row = ws.getRow(i);
					row = ws.getRow(i);
					Cell vesselCell = row.getCell(0);
					String vesselType = vesselCell.getStringCellValue().trim();
					if(vesselType == rules_vesselType)
					{
						for(int j=0; j&lt;26; j++)
						{
							Column column = ws.getcolumn(j);
							Cell tradingCertType = column.getCell(0);
							String certTypeCode = tradingCertType.getStringCellValue().trim();
							if(certTypeCode == postApi_tradingCertificateTypeCode)
							{
								Cell vesselValidation = row.getCell(j);
								String isValid = vesselValidation.getStringCellValue().trim();
							}
						}
					}

				}
				if(isValid == "Y")
				{
					rules_isInvalid = "false";
				}
				else if(isValid == "N")
				{
					rules_isInvalid = "true";
				}
//will contain the logic of validating other fields
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for POST method of Reference By Trading Certificate Types by Invalid Certificates***********"</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5e440ef1-1151-44dc-bf38-1cb62fcfbed3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OnHOLD_TC_TradingCertificateValidationByCertificateId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="TradingCertificateValidationByCertificateId" id="ff082a52-a3f1-469b-8db1-3b5db3dd57b9"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#certId}/validate" methodName="TradingCertificateValidationByCertificateId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TradingCertificateValidationByCertificateId" id="6b80ff43-31b3-4de7-847a-a9bf7ff7a005" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tradingCertificateId" value="tradingCertificateId" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>tradingCertificateId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="TradingCertificateValidationByCertId" id="54938c20-2324-4055-b1f7-b8faf2451abb" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat
import com.eviware.soapui.support.types.StringToStringMap 

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
//	String dateForApp = newDateTimeString
//	dateForApp= dateForApp.replace("-","")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for Get method of Trading Certificate Validation By Certificate Id************"

//com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt =
"""
	Use tradingcertificate
	Select Id, Type_Id, Reference, CurrentStatus, StorageId, IsRenewal, IsYacht, RiskId, VesselId, PolicyId, MemberPartyId, OwnerPartyId, BrokerPartyId, TradingCertificateVersion, RiskReference, VesselReference, PolicyReference, MemberReference, MemberType, MemberName, OwnerDomicile, OwnerEmailAddress, OwnerReference, OwnerName, BrokerReference, BrokerName, BrokerEmailAddress, policyYear, EmailAddress, CurrencyCode, SignatoryState_Id, VesselName, VesselFlag, VesselType, VesselTypeName, PassengerCapacity, IMONumber, EngineHorsePower, TradeMark, Model, EngineNo, TenderReferenceList, TenderOutboardReferenceList, DistinctiveNumbersOrLetters, GrossTonnage, YearBuilt, PortOfRegistry, AddressType_Id, JointAssuredName, ProductType, SourceSystem
	case when riskReference = 'NULL' then 'True' else 'False' end as isRiskReference
	case when policyYear = 'NULL' then 'True' else 'False' end as isPolicyYear
	case when policyStartDate = 'NULL' then 'True' else 'False' end as ispolicyStartDate
	case when policyEndDate = 'NULL' then 'True' else 'False' end as ispolicyEndDate
	case when nominatedFlagStateName = 'NULL' then 'True' else 'False' end as isnominatedFlagStateName
	case when memberName = 'NULL' then 'True' else 'False' end as ismemberName
	From TradingCertificate TC

"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQLResponse_TradingCertificateValidationByCertificateId.csv"]
def getApiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\APIResponse_TradingCertificateValidationByCertificateId.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_TradingCertificateValidationByCertificateId.csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def getApiFile = new File(getApiResponseFile[0])
def getApiWriter = getApiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_Id"+","+"SQL_TypeId"+","+"SQL_Reference"+","+"SQL_CurrentStatus"+","+"SQL_StorageId"+","+"SQL_IsRenewal"+","+"SQL_IsYacht"+","+"SQL_RiskId"+","+"SQL_VesselId"+","+"SQL_PolicyId"+","+"SQL_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"SQL_TradingCertificateVersion"+","+"SQL_RiskReference"+","+"SQL_VesselReference"+","+"SQL_PolicyReference"+","+"SQL_MemberReference"+","+"SQL_MemberType"+","+"SQL_MemberName"+","+"SQL_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"SQL_OwnerReference"+","+"SQL_OwnerName"+","+"SQL_BrokerReference"+","+"SQL_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"SQL_policyYear"+","+"SQL_EmailAddress"+","+"SQL_CurrencyCode"+","+"SQL_SignatoryState_Id"+","+"SQL_VesselName"+","+"SQL_VesselFlag"+","+"SQL_VesselType"+","+"SQL_VesselTypeName"+","+"SQL_PassengerCapacity"+","+"SQL_IMONumber"+","+"SQL_EngineHorsePower"+","+"SQL_TradeMark"+","+"SQL_Model"+","+"SQL_EngineNo"+","+"SQL_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"SQL_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"SQL_YearBuilt"+","+"SQL_PortOfRegistry"+","+"SQL_AddressType_Id"+","+"SQL_JointAssuredName"+","+"SQL_ProductType"+","+"SQL_SourceSystem")
getApiWriter.println("GET_API_Id"+","+"GET_API_addressTypeId"+","+"GET_API_riskId"+","+"GET_API_vesselId"+","+"GET_API_policyId"+","+"GET_API_memberPartyId"+","+"GET_API_ownerPartyId"+","+"GET_API_brokerPartyId"+","+"GET_API_version"+","+"GET_API_tradingCertificateTypeId"+","+"GET_API_tradingCertificateGroupId"+","+"GET_API_tradingCertificateGroupName"+","+"GET_API_tradingCertificateGroupCode"+","+"GET_API_stateAddressId"+","+"GET_API_ownerAddressId"+","+"GET_API_brokerAddressId"+","+"GET_API_memberAddressId"+","+"GET_API_jointAssuredAddressId")
compareWriter.println("SQL_Id"+","+"GET_API_Id"+","+"SQL_TypeId"+","+"GET_API_TypeId"+","+"SQL_Reference"+","+"GET_API_Reference"+","+"SQL_CurrentStatus"+","+"GET_API_CurrentStatus"+","+"SQL_StorageId"+","+"GET_API_StorageId"+","+"SQL_IsRenewal"+","+"GET_API_IsRenewal"+","+"SQL_IsYacht"+","+"GET_API_IsYacht"+","+"SQL_RiskId"+","+"GET_API_RiskId"+","+"SQL_VesselId"+","+"GET_API_VesselId"+","+"SQL_PolicyId"+","+"GET_API_PolicyId"+","+"SQL_MemberPartyId"+","+"GET_API_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"GET_APIOwnerPartyId_"+","+"SQL_BrokerPartyId"+","+"GET_API_BrokerPartyId"+","+"SQL_TradingCertificateVersion"+","+"GET_API_TradingCertificateVersion"+","+"SQL_RiskReference"+","+"GET_API_RiskReference"+","+"SQL_VesselReference"+","+"GET_API_VesselReference"+","+"SQL_PolicyReference"+","+"GET_API_PolicyReference"+","+"SQL_MemberReference"+","+"GET_API_MemberReference"+","+"SQL_MemberType"+","+"GET_API_MemberType"+","+"SQL_MemberName"+","+"GET_API_MemberName"+","+"SQL_OwnerDomicile"+","+"GET_API_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"GET_API_OwnerEmailAddress"+","+"SQL_OwnerReference"+","+"GET_API_OwnerReference"+","+"SQL_OwnerName"+","+"GET_API_OwnerName"+","+"SQL_BrokerReference"+","+"GET_API_BrokerReference"+","+"SQL_BrokerName"+","+"GET_API_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"GET_API_BrokerEmailAddress"+","+"SQL_policyYear"+","+"GET_API_policyYear"+","+"SQL_EmailAddress"+","+"GET_API_EmailAddress"+","+"SQL_CurrencyCode"+","+"GET_API_CurrencyCode"+","+"SQL_SignatoryState_Id"+","+"GET_API_SignatoryState"+","+"SQL_VesselName"+","+"GET_API_VesselName"+","+"SQL_VesselFlag"+","+"GET_API_VesselFlag"+","+"SQL_VesselType"+","+"GET_API_VesselType"+","+"SQL_VesselTypeName"+","+"GET_API_VesselTypeName"+","+"SQL_PassengerCapacity"+","+"GET_API_PassengerCapacity"+","+"SQL_IMONumber"+","+"GET_API_IMONumber"+","+"SQL_EngineHorsePower"+","+"GET_API_EngineHorsePower"+","+"SQL_TradeMark"+","+"GET_API_TradeMark"+","+"SQL_Model"+","+"GET_API_Model"+","+"SQL_EngineNo"+","+"GET_API_EngineNo"+","+"SQL_TenderReferenceList"+","+"GET_API_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"GET_API_TenderOutboardReferenceList"+","+"SQL_DistinctiveNumbersOrLetters"+","+"GET_API_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"GET_API_GrossTonnage"+","+"SQL_YearBuilt"+","+"GET_API_YearBuilt"+","+"SQL_PortOfRegistry"+","+"GET_API_PortOfRegistry"+","+"SQL_AddressType_Id"+","+"GET_API_AddressType_Id"+","+"SQL_JointAssuredName"+","+"GET_API_JointAssuredName"+","+"SQL_ProductType"+","+"GET_API_ProductType"+","+"SQL_SourceSystem"+","+"GET_API_SourceSystem"+","+"Result")

def response= null
def jsonSlurper=null
def jsonResp=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
	sql_Id=row.Id
	sql_TypeId=row.Type_Id
	sql_Reference=row.Reference
	sql_CurrentStatus=row.CurrentStatus
	sql_StorageId=row.StorageId
	sql_IsRenewal=row.IsRenewal
	sql_IsYacht=row.IsYacht
	sql_RiskId=row.RiskId
	sql_VesselId=row.VesselId
	sql_PolicyId=row.PolicyId
	sql_MemberPartyId=row.MemberPartyId
	sql_OwnerPartyId=row.OwnerPartyId
	sql_BrokerPartyId=row.BrokerPartyId
	sql_TradingCertificateVersion=row.TradingCertificateVersion
	sql_RiskReference=row.RiskReference
	sql_VesselReference=row.VesselReference
	sql_PolicyReference=row.PolicyReference
	sql_MemberReference=row.MemberReference
	sql_MemberType=row.MemberType
	sql_MemberName=row.MemberName
	sql_OwnerDomicile=row.OwnerDomicile
	sql_OwnerEmailAddress=row.OwnerEmailAddress
	sql_OwnerReference=row.OwnerReference
	sql_OwnerName=row.OwnerName
	sql_BrokerReference=row.BrokerReference
	sql_BrokerName=row.BrokerName
	sql_BrokerEmailAddress=row.BrokerEmailAddress
	sql_PolicyYear=row.PolicyYear
	sql_EmailAddress=row.EmailAddress
	sql_CurrencyCode=row.CurrencyCode
	sql_SignatoryState_Id=row.SignatoryState_Id
	sql_VesselName=row.VesselName
	sql_VesselFlag=row.VesselFlag
	sql_VesselType=row.VesselType
	sql_VesselTypeName=row.VesselTypeName
	sql_PassengerCapacity=row.PassengerCapacity
	sql_IMONumber=row.IMONumber
	sql_EngineHorsePower=row.EngineHorsePower
	sql_TradeMark=row.TradeMark
	sql_Model=row.Model
	sql_EngineNo=row.EngineNo
	sql_TenderReferenceList=row.TenderReferenceList
	sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
	sql_DistinctiveNumbersOrLetters=row.DistinctiveNumbersOrLetters
	sql_GrossTonnage=row.GrossTonnage
	sql_YearBuilt=row.YearBuilt
	sql_PortOfRegistry=row.PortOfRegistry
	sql_AddressType_Id=row.AddressType_Id
	sql_JointAssuredName=row.JointAssuredName
	sql_ProductType=row.ProductType
	sql_SourceSystem=row.SourceSystem

	
	sqlWriter.println(sql_Id+","+sql_TypeId+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_RiskId+","+sql_VesselId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_TradingCertificateVersion+","+sql_RiskReference+","+sql_VesselReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_OwnerReference+","+sql_OwnerName+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_policyYear+","+sql_EmailAddress+","+sql_CurrencyCode+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselFlag+","+sql_VesselType+","+sql_VesselTypeName+","+sql_PassengerCapacity+","+sql_IMONumber+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_PortOfRegistry+","+sql_AddressType_Id+","+sql_JointAssuredName+","+sql_ProductType+","+sql_SourceSystem)
	log.info "SQL Response is : "+sql_Id+","+sql_TypeId+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_RiskId+","+sql_VesselId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_TradingCertificateVersion+","+sql_RiskReference+","+sql_VesselReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_OwnerReference+","+sql_OwnerName+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_policyYear+","+sql_EmailAddress+","+sql_CurrencyCode+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselFlag+","+sql_VesselType+","+sql_VesselTypeName+","+sql_PassengerCapacity+","+sql_IMONumber+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_PortOfRegistry+","+sql_AddressType_Id+","+sql_JointAssuredName+","+sql_ProductType+","+sql_SourceSystem


	//Set the Token at test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	String certId=sql_id
	testRunner.testCase.setPropertyValue( "certId", certId)
			
	//Run the test step to get response
	testRunner.runTestStepByName('TradingCertificateByCertificateId')
	String req1='${TradingCertificateByCertificateId#Response}'
	response=context.expand(req1)
	//log.info "API Response for GET method after post received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	httpResponseHeaders = context.testCase.testSteps["TradingCertificateByCertificateId"].testRequest.response.responseHeaders
	httpStatus = httpResponseHeaders["#status#"]
	httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)


	String getApi_isRiskReference = "False"
	String getApi_isPolicyYear = "False"
	String getApi_isPolicyStartDate = "False"
	String getApi_isNominatedFlagStateName = "False"
	String getApi_isMemberName = "False"

	String error = response
	if(httpStatusCode.equals("200"))
	{
		if (!jsonRes.HasError)
		{
				getApi_Id=jsonRes.tradingCertificateId
				getApi_RiskReference=jsonRes.riskReference
				getApi_TradingCertificateType=jsonRes.tradingCertificateType
				getApi_isValid=jsonRes.isValid

				for(int i=0; jsonRes.errors[i]!= null; i++)
				{
					if(jsonRes.errors[i].toString() == "'Risk Reference' must not be empty." && jsonRes.riskReference == null)
					{
						getApi_isRiskReference = "True"
						break;
					}

					else if(jsonRes.errors[i].toString() == "'Policy Year' must not be empty.")
					{
						getApi_isPolicyYear = "True"
						break;
					}
					else if(json.errors[i].toString() == "'Policy Start Date' must not be empty.")
					{
						getApi_isPolicyStartDate = "True"
						break;
					}
					else if(json.errors[i].toString() == "'Policy End Date' must not be empty.")
					{
						getApi_isPolicyEndDate = "True"
						break;
					}
					else if(json.errors[i].toString() == "'Nominated Flag State Name' must not be empty.")
					{
						getApi_isNominatedFlagStateName = "True"
						break;
					}
					else if(json.errors[i].toString() == "'Member Name' must not be empty.")
					{
						getApi_isMemberName = "True"
						break;
					}
				}


			
				getApiWriter.println(getApi_Id+","+getApi_RiskReference+","+getApi_TradingCertificateType+","+getApi_isValid+","+getApi_isRiskReference+","+getApi_isPolicyYear+","+getApi_isPolicyStartDate+","+getApi_isPolicyEndDate+","+getApi_isNominatedFlagStateName+","+getApi_isMemberName+","+getApi_MemberPartyId+","+getApi_OwnerPartyId+","+getApi_BrokerPartyId+","+getApi_TradingCertificateVersion+","+getApi_RiskReference+","+getApi_VesselReference+","+getApi_PolicyReference+","+getApi_MemberReference+","+getApi_MemberType+","+getApi_MemberName+","+getApi_OwnerDomicile+","+getApi_OwnerEmailAddress+","+getApi_OwnerReference+","+getApi_OwnerName+","+getApi_BrokerReference+","+getApi_BrokerName+","+getApi_BrokerEmailAddress+","+getApi_policyYear+","+getApi_EmailAddress+","+getApi_CurrencyCode+","+getApi_SignatoryState_Id+","+getApi_VesselName+","+getApi_VesselFlag+","+getApi_VesselType+","+getApi_VesselTypeName+","+getApi_PassengerCapacity+","+getApi_IMONumber+","+getApi_EngineHorsePower+","+getApi_TradeMark+","+getApi_Model+","+getApi_EngineNo+","+getApi_TenderReferenceList+","+getApi_TenderOutboardReferenceList+","+getApi_DistinctiveNumbersOrLetters+","+getApi_GrossTonnage+","+getApi_YearBuilt+","+getApi_PortOfRegistry+","+getApi_AddressType_Id+","+getApi_JointAssuredName+","+getApi_ProductType+","+getApi_SourceSystem)
				log.info "API Response is :" +getApi_Id+","+getApi_RiskReference+","+getApi_TradingCertificateType+","+getApi_isValid+","+getApi_isRiskReference+","+getApi_isPolicyYear+","+getApi_isPolicyStartDate+","+getApi_isPolicyEndDate+","+getApi_isNominatedFlagStateName+","+getApi_isMemberName+","+getApi_MemberPartyId+","+getApi_OwnerPartyId+","+getApi_BrokerPartyId+","+getApi_TradingCertificateVersion+","+getApi_RiskReference+","+getApi_VesselReference+","+getApi_PolicyReference+","+getApi_MemberReference+","+getApi_MemberType+","+getApi_MemberName+","+getApi_OwnerDomicile+","+getApi_OwnerEmailAddress+","+getApi_OwnerReference+","+getApi_OwnerName+","+getApi_BrokerReference+","+getApi_BrokerName+","+getApi_BrokerEmailAddress+","+getApi_policyYear+","+getApi_EmailAddress+","+getApi_CurrencyCode+","+getApi_SignatoryState_Id+","+getApi_VesselName+","+getApi_VesselFlag+","+getApi_VesselType+","+getApi_VesselTypeName+","+getApi_PassengerCapacity+","+getApi_IMONumber+","+getApi_EngineHorsePower+","+getApi_TradeMark+","+getApi_Model+","+getApi_EngineNo+","+getApi_TenderReferenceList+","+getApi_TenderOutboardReferenceList+","+getApi_DistinctiveNumbersOrLetters+","+getApi_GrossTonnage+","+getApi_YearBuilt+","+getApi_PortOfRegistry+","+getApi_AddressType_Id+","+getApi_JointAssuredName+","+getApi_ProductType+","+getApi_SourceSystem
			
				if(sql_Id.toString().equals(getApi_Id.toString()) && (sql_TypeId.toString()).equals(getApi_TypeId.toString()) && (sql_Reference.toString()).equals(getApi_Reference.toString()) && (sql_CurrentStatus.toString()).equals(getApi_CurrentStatus.toString()) && (sql_StorageId.toString()).equals(getApi_StorageId.toString()) && (sql_IsRenewal.toString()).equals(getApi_IsRenewal.toString()) && (sql_IsYacht.toString()).equals(getApi_IsYacht.toString()) && (sql_RiskId.toString()).equals(getApi_RiskId.toString()) && (sql_VesselId.toString()).equals(getApi_VesselId.toString()) && (sql_PolicyId.toString()).equals(getApi_PolicyId.toString()) && (sql_MemberPartyId.toString()).equals(getApi_MemberPartyId.toString()) && (sql_OwnerPartyId.toString()).equals(getApiOwnerPartyId_.toString()) && (sql_BrokerPartyId.toString()).equals(getApi_BrokerPartyId.toString()) && (sql_TradingCertificateVersion.toString()).equals(getApi_TradingCertificateVersion.toString()) && (sql_RiskReference.toString()).equals(getApi_RiskReference.toString()) && (sql_VesselReference.toString()).equals(getApi_VesselReference.toString()) && (sql_PolicyReference.toString()).equals(getApi_PolicyReference.toString()) && (sql_MemberReference.toString()).equals(getApi_MemberReference.toString()) && (sql_MemberType.toString()).equals(getApi_MemberType.toString()) && (sql_MemberName.toString()).equals(getApi_MemberName.toString()) && (sql_OwnerDomicile.toString()).equals(getApi_OwnerDomicile.toString()) && (sql_OwnerEmailAddress.toString()).equals(getApi_OwnerEmailAddress.toString()) && (sql_OwnerReference.toString()).equals(getApi_OwnerReference.toString()) && (sql_OwnerName.toString()).equals(getApi_OwnerName.toString()) && (sql_BrokerReference.toString()).equals(getApi_BrokerReference.toString()) && (sql_BrokerName.toString()).equals(getApi_BrokerName.toString()) && (sql_BrokerEmailAddress.toString()).equals(getApi_BrokerEmailAddress.toString()) && (sql_policyYear.toString()).equals(getApi_policyYear.toString()) && (sql_EmailAddress.toString()).equals(getApi_EmailAddress.toString()) && (sql_CurrencyCode.toString()).equals(getApi_CurrencyCode.toString()) && (sql_SignatoryState_Id.toString()).equals(getApi_SignatoryState.toString()) && (sql_VesselName.toString()).equals(getApi_VesselName.toString()) && (sql_VesselFlag.toString()).equals(getApi_VesselFlag.toString()) && (sql_VesselType.toString()).equals(getApi_VesselType.toString()) && (sql_VesselTypeName.toString()).equals(getApi_VesselTypeName.toString()) && (sql_PassengerCapacity.toString()).equals(getApi_PassengerCapacity.toString()) && (sql_IMONumber.toString()).equals(getApi_IMONumber.toString()) && (sql_EngineHorsePower.toString()).equals(getApi_EngineHorsePower.toString()) && (sql_TradeMark.toString()).equals(getApi_TradeMark.toString()) && (sql_Model.toString()).equals(getApi_Model.toString()) && (sql_EngineNo.toString()).equals(getApi_EngineNo.toString()) && (sql_TenderReferenceList.toString()).equals(getApi_TenderReferenceList.toString()) && (sql_TenderOutboardReferenceList.toString()).equals(getApi_TenderOutboardReferenceList.toString()) && (sql_DistinctiveNumbersOrLetters.toString()).equals(getApi_DistinctiveNumbersOrLetters.toString()) && (sql_GrossTonnage.toString()).equals(getApi_GrossTonnage.toString()) && (sql_YearBuilt.toString()).equals(getApi_YearBuilt.toString()) && (sql_PortOfRegistry.toString()).equals(getApi_PortOfRegistry.toString()) && (sql_AddressType_Id.toString()).equals(getApi_AddressType_Id.toString()) && (sql_JointAssuredName.toString()).equals(getApi_JointAssuredName.toString()) && (sql_ProductType.toString()).equals(getApi_ProductType.toString()) && (sql_SourceSystem.toString()).equals(getApi_SourceSystem.toString()) )
				{
					compareWriter.println(sql_Id +","+ getApi_Id +","+ sql_TypeId +","+ getApi_TypeId +","+ sql_Reference +","+ getApi_Reference +","+ sql_CurrentStatus +","+ getApi_CurrentStatus +","+ sql_StorageId +","+ getApi_StorageId +","+ sql_IsRenewal +","+ getApi_IsRenewal +","+ sql_IsYacht +","+ getApi_IsYacht +","+ sql_RiskId +","+ getApi_RiskId +","+ sql_VesselId +","+ getApi_VesselId +","+ sql_PolicyId +","+ getApi_PolicyId +","+ sql_MemberPartyId +","+ getApi_MemberPartyId +","+ sql_OwnerPartyId +","+ getApiOwnerPartyId_ +","+ sql_BrokerPartyId +","+ getApi_BrokerPartyId +","+ sql_TradingCertificateVersion +","+ getApi_TradingCertificateVersion +","+ sql_RiskReference +","+ getApi_RiskReference +","+ sql_VesselReference +","+ getApi_VesselReference +","+ sql_PolicyReference +","+ getApi_PolicyReference +","+ sql_MemberReference +","+ getApi_MemberReference +","+ sql_MemberType +","+ getApi_MemberType +","+ sql_MemberName +","+ getApi_MemberName +","+ sql_OwnerDomicile +","+ getApi_OwnerDomicile +","+ sql_OwnerEmailAddress +","+ getApi_OwnerEmailAddress +","+ sql_OwnerReference +","+ getApi_OwnerReference +","+ sql_OwnerName +","+ getApi_OwnerName +","+ sql_BrokerReference +","+ getApi_BrokerReference +","+ sql_BrokerName +","+ getApi_BrokerName +","+ sql_BrokerEmailAddress +","+ getApi_BrokerEmailAddress +","+ sql_policyYear +","+ getApi_policyYear +","+ sql_EmailAddress +","+ getApi_EmailAddress +","+ sql_CurrencyCode +","+ getApi_CurrencyCode +","+ sql_SignatoryState_Id +","+ getApi_SignatoryState +","+ sql_VesselName +","+ getApi_VesselName +","+ sql_VesselFlag +","+ getApi_VesselFlag +","+ sql_VesselType +","+ getApi_VesselType +","+ sql_VesselTypeName +","+ getApi_VesselTypeName +","+ sql_PassengerCapacity +","+ getApi_PassengerCapacity +","+ sql_IMONumber +","+ getApi_IMONumber +","+ sql_EngineHorsePower +","+ getApi_EngineHorsePower +","+ sql_TradeMark +","+ getApi_TradeMark +","+ sql_Model +","+ getApi_Model +","+ sql_EngineNo +","+ getApi_EngineNo +","+ sql_TenderReferenceList +","+ getApi_TenderReferenceList +","+ sql_TenderOutboardReferenceList +","+ getApi_TenderOutboardReferenceList +","+ sql_DistinctiveNumbersOrLetters +","+ getApi_DistinctiveNumbersOrLetters +","+ sql_GrossTonnage +","+ getApi_GrossTonnage +","+ sql_YearBuilt +","+ getApi_YearBuilt +","+ sql_PortOfRegistry +","+ getApi_PortOfRegistry +","+ sql_AddressType_Id +","+ getApi_AddressType_Id +","+ sql_JointAssuredName +","+ getApi_JointAssuredName +","+ sql_ProductType +","+ getApi_ProductType +","+ sql_SourceSystem +","+ getApi_SourceSystem +","+ "Test Case Passed")
					log.info "Details are matching, hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_Id +","+ getApi_Id +","+ sql_TypeId +","+ getApi_TypeId +","+ sql_Reference +","+ getApi_Reference +","+ sql_CurrentStatus +","+ getApi_CurrentStatus +","+ sql_StorageId +","+ getApi_StorageId +","+ sql_IsRenewal +","+ getApi_IsRenewal +","+ sql_IsYacht +","+ getApi_IsYacht +","+ sql_RiskId +","+ getApi_RiskId +","+ sql_VesselId +","+ getApi_VesselId +","+ sql_PolicyId +","+ getApi_PolicyId +","+ sql_MemberPartyId +","+ getApi_MemberPartyId +","+ sql_OwnerPartyId +","+ getApiOwnerPartyId_ +","+ sql_BrokerPartyId +","+ getApi_BrokerPartyId +","+ sql_TradingCertificateVersion +","+ getApi_TradingCertificateVersion +","+ sql_RiskReference +","+ getApi_RiskReference +","+ sql_VesselReference +","+ getApi_VesselReference +","+ sql_PolicyReference +","+ getApi_PolicyReference +","+ sql_MemberReference +","+ getApi_MemberReference +","+ sql_MemberType +","+ getApi_MemberType +","+ sql_MemberName +","+ getApi_MemberName +","+ sql_OwnerDomicile +","+ getApi_OwnerDomicile +","+ sql_OwnerEmailAddress +","+ getApi_OwnerEmailAddress +","+ sql_OwnerReference +","+ getApi_OwnerReference +","+ sql_OwnerName +","+ getApi_OwnerName +","+ sql_BrokerReference +","+ getApi_BrokerReference +","+ sql_BrokerName +","+ getApi_BrokerName +","+ sql_BrokerEmailAddress +","+ getApi_BrokerEmailAddress +","+ sql_policyYear +","+ getApi_policyYear +","+ sql_EmailAddress +","+ getApi_EmailAddress +","+ sql_CurrencyCode +","+ getApi_CurrencyCode +","+ sql_SignatoryState_Id +","+ getApi_SignatoryState +","+ sql_VesselName +","+ getApi_VesselName +","+ sql_VesselFlag +","+ getApi_VesselFlag +","+ sql_VesselType +","+ getApi_VesselType +","+ sql_VesselTypeName +","+ getApi_VesselTypeName +","+ sql_PassengerCapacity +","+ getApi_PassengerCapacity +","+ sql_IMONumber +","+ getApi_IMONumber +","+ sql_EngineHorsePower +","+ getApi_EngineHorsePower +","+ sql_TradeMark +","+ getApi_TradeMark +","+ sql_Model +","+ getApi_Model +","+ sql_EngineNo +","+ getApi_EngineNo +","+ sql_TenderReferenceList +","+ getApi_TenderReferenceList +","+ sql_TenderOutboardReferenceList +","+ getApi_TenderOutboardReferenceList +","+ sql_DistinctiveNumbersOrLetters +","+ getApi_DistinctiveNumbersOrLetters +","+ sql_GrossTonnage +","+ getApi_GrossTonnage +","+ sql_YearBuilt +","+ getApi_YearBuilt +","+ sql_PortOfRegistry +","+ getApi_PortOfRegistry +","+ sql_AddressType_Id +","+ getApi_AddressType_Id +","+ sql_JointAssuredName +","+ getApi_JointAssuredName +","+ sql_ProductType +","+ getApi_ProductType +","+ sql_SourceSystem +","+ getApi_SourceSystem +","+ "Test Case Failed")
					log.info "Details are not matching, hence test case is failed"
				}
		}
	}
	else
	{
		log.info "Failed API response received as : "+response
	}		
	counter=counter+1
	log.info "Number of records verified are : "+counter
}

sqlWriter.flush()
postApiWriter.flush()
getApiWriter.flush()
compareWriter.flush()

sqlWriter.close()
postApiWriter.close()
getApiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for Get method of Trading Certificate By Certificate Id************"	]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="be316445-f404-4a2d-bb73-3677b2c695af" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OnHOLD_TC_ReferenceBySignatoryStateAddressesBySignatoryStatesId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RefBySignatoryStateAddressesBySignatoryStatesId" id="7cfe6293-17ff-4300-957d-3ae5a563a249"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/signatorystateaddresses/${#TestCase#stateId}" methodName="RefBySignatoryStateAddressesBySignatoryStatesId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefBySignatoryStateAddressesBySignatoryStatesId" id="0ceb06f5-f4da-4c55-a616-c74394ef400c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/signatorystateaddresses/25</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceBySignatoryStateAddressesBySignatoryStateId" id="2e994e67-9f93-4304-a2a7-7c495c4feaab" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Signatory State Addresses By Signatory State Id************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
	"""
	USE tradingcertificate 
	SELECT
	TOP 10
	RSS.Id as SignatoryStateId, SSA.Id as SignatoryStateAddressId, SSA.AddressName, SSA.AddressLine1, SSA.AddressLine2, 
	SSA.AddressLine3, SSA.StateOrCounty, SSA.City, SSA.Country, SSA.PostCode
	from dbo.ref_SignatoryState RSS
	inner join dbo.ref_Country RC on RC.Id=RSS.Country_Id
	inner join ref_SignatoryStateAddress SSA on SSA.SignatoryState_Id=RSS.Id
	order by 1 desc
	"""
	//where RSS.Id=25
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceBySignatoryStateAddressesBySignatoryStateId.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceBySignatoryStateAddressesBySignatoryStateId.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceBySignatoryStateAddressesBySignatoryStateId.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceBySignatoryStateAddressesBySignatoryStateId"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceBySignatoryStateAddressesBySignatoryStateId"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\Comparision_GET_Response_ReferenceBySignatoryStateAddressesBySignatoryStateId"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TypeId"+","+"SQL_SignatoryStateAddressId"+","+"SQL_AddressName"+","+"SQL_AddressLine1"+","+"SQL_AddressLine2"+","+"SQL_AddressLine3"+","+"SQL_StateOrCounty"+","+"SQL_City"+","+"SQL_Country"+","+"SQL_PostCode")
apiWriter.println("API_TypeId"+","+"API_SignatoryStateAddressId"+","+"API_AddressName"+","+"API_AddressLine1"+","+"API_AddressLine2"+","+"API_AddressLine3"+","+"API_StateOrCounty"+","+"API_City"+","+"API_Country"+","+"API_PostCode")
compareWriter.println("SQL_TypeId"+","+"API_TypeId"+","+"SQL_SignatoryStateAddressId"+","+"API_SignatoryStateAddressId"+","+"SQL_AddressName"+","+"API_AddressName"+","+"SQL_AddressLine1"+","+"API_AddressLine1"+","+"SQL_AddressLine2"+","+"API_AddressLine2"+","+"SQL_AddressLine3"+","+"API_AddressLine3"+","+"SQL_StateOrCounty"+","+"API_StateOrCounty"+","+"SQL_City"+","+"API_City"+","+"SQL_Country"+","+"API_Country"+","+"SQL_PostCode"+","+"API_PostCode"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter = 0
String field=null

def rows=con.rows(sqlstmt)  
int db_size=rows.size
//log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->

	sql_TypeId=row.SignatoryStateId
	
	sql_SignatoryStateAddressId=row.SignatoryStateAddressId
	
	sql_AddressName=row.AddressName
	field=sql_AddressName
	sql_AddressName=removeComma(field)
	
	sql_AddressLine1=row.AddressLine1
	field=sql_AddressLine1
	sql_AddressLine1=removeComma(field)
	
	sql_AddressLine2=row.AddressLine2
	field=sql_AddressLine2
	sql_AddressLine2=removeComma(field)
	
	sql_AddressLine3=row.AddressLine3
	field=sql_AddressLine3
	sql_AddressLine3=removeComma(field)
	
	sql_StateOrCounty=row.StateOrCounty
	field=sql_StateOrCounty
	sql_StateOrCounty=removeComma(field)
	
	sql_City=row.City
	field=sql_City
	sql_City=removeComma(field)
	
	sql_Country=row.Country
	field=sql_Country
	sql_Country=removeComma(field)
	
	sql_PostCode=row.PostCode
	
	sqlWriter.println(sql_TypeId+","+sql_SignatoryStateAddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode)
	log.info "SQL Response received as :"+sql_TypeId+","+sql_SignatoryStateAddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode

	//Set Id as parameter to test case level
	String stateId = sql_TypeId
	testRunner.testCase.setPropertyValue("stateId", stateId)
	//log.info "tradingCertTypId="+tradingCertTypeId
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('RefBySignatoryStateAddressesBySignatoryStatesId')
	String req='${RefBySignatoryStateAddressesBySignatoryStatesId#Response}'
	response=context.expand(req)
	log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)
/*
	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefBySignatoryStateAddressesBySignatoryStatesId"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		for(int i=0; i<db_size; i++)
		{
			String newId = jsonRes.id[i]
			//log.info "newId : "+newId
			if(newId.toString().equals(sql_SignatoryStateAddressId.toString()))
			{
				api_TypeId=jsonRes.signatoryStateId[i]

				api_SignatoryStateAddressId=jsonRes.id[i]
				
				api_AddressName=jsonRes.addressName[i]
				field=api_AddressName
				api_AddressName=removeComma(field)
				
				api_AddressLine1=jsonRes.addressLine1[i]
				field=api_AddressLine1
				api_AddressLine1=removeComma(field)
				
				api_AddressLine2=jsonRes.addressLine2[i]
				field=api_AddressLine2
				api_AddressLine2=removeComma(field)
				
				api_AddressLine3=jsonRes.addressLine3[i]
				field=api_AddressLine3
				api_AddressLine3=removeComma(field)
				
				api_StateOrCounty=jsonRes.stateOrCounty[i]
				field=api_StateOrCounty
				api_StateOrCounty=removeComma(field)
				
				api_City=jsonRes.city[i]
				field=api_City
				api_City=removeComma(field)
				
				api_Country=jsonRes.country[i]
				field=api_Country
				api_Country=removeComma(field)
				
				api_PostCode=jsonRes.postCode[i]

				apiWriter.println(api_TypeId+","+api_SignatoryStateAddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode)
				log.info "API responce received as : "+api_TypeId+","+api_SignatoryStateAddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode
				
				if(sql_TypeId.toString().equals(api_TypeId.toString()) && sql_SignatoryStateAddressId.toString().equals(api_SignatoryStateAddressId.toString()) && sql_AddressName.toString().toUpperCase().equals(api_AddressName.toString().toUpperCase()) && sql_AddressLine1.toString().toUpperCase().equals(api_AddressLine1.toString().toUpperCase()) && sql_AddressLine2.toString().toUpperCase().equals(api_AddressLine2.toString().toUpperCase()) && sql_AddressLine3.toString().toUpperCase().equals(api_AddressLine3.toString().toUpperCase()) && sql_StateOrCounty.toString().toUpperCase().equals(api_StateOrCounty.toString().toUpperCase()) && sql_City.toString().toUpperCase().equals(api_City.toString().toUpperCase()) && sql_Country.toString().toUpperCase().equals(api_Country.toString().toUpperCase()) && sql_PostCode.toString().toUpperCase().equals(api_PostCode.toString().toUpperCase()))
				{
					compareWriter.println(sql_TypeId+","+api_TypeId+","+sql_SignatoryStateAddressId+","+api_SignatoryStateAddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+"Test Case Passsed")
					log.info "Details are matching hence test case is passed"
					break;
				}
				else
				{
					compareWriter.println(sql_TypeId+","+api_TypeId+","+sql_SignatoryStateAddressId+","+api_SignatoryStateAddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+"Test Case Failed")
					log.info "Details are not matching hence test case is failed"
					break;
				}
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
*/	
	counter = 1+counter
	log.info "Total records tested are : "+counter
}

public String removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Signatory State Addresses By Signatory State Id***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>stateId</con:name><con:value>739</con:value></con:property></con:properties></con:testCase><con:testCase id="3d5d8f96-57af-4786-b6fe-7008d4976a81" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OnHOLD_TC_ReferenceByTradingCertificateTypesByGroupByTypes" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RefByTradingCertificateTypesByGroupByTypes" id="7318a131-8eaa-4243-a990-c2d4ce5fcbd6"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/tradingCertificateTypes/${#TestCase#group}/types" methodName="ReferenceByTradingCertificateTypesByGroupByTypes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByTradingCertificateTypesByGroupByTypes" id="140ec35c-b04b-43e0-9240-be700d1f38b4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/tradingCertificateTypes/COFR/types</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceByTradingCertificateTypesByGroupByTypes_1" id="728fe687-931c-4f66-a37b-bf039c6457d9" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Trading Certificate Types By Group By Types***********"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
	"""
	USE tradingcertificate 
	SELECT
	RT.Id as TradingCertificateTypeId, RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode, 
	RT.TypeCode, RT.Name
	from ref_Group RG
	inner join ref_Type RT on RT.Group_Id =RG.ID
	"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateTypesByGroupByTypes.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateTypesByGroupByTypes.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceByTradingCertificateTypesByGroupByTypes.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateTypesByGroupByTypes"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateTypesByGroupByTypes"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\Comparision_GET_Response_ReferenceByTradingCertificateTypesByGroupByTypes"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"SQL_GroupCode"+","+"SQL_TypeCode"+","+"SQL_Name")
apiWriter.println("API_TradingCertificateTypeId"+","+"API_TradingCertificateGroupId"+","+"API_TradingCertificateGroupName"+","+"API_GroupCode"+","+"API_TypeCode"+","+"API_Name")
compareWriter.println("SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"API_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"API_TradingCertificateGroupName"+","+"SQL_GroupCode"+","+"API_GroupCode"+","+"SQL_TypeCode"+","+"API_TypeCode"+","+"SQL_Name"+","+"API_Name"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
String field=null
int counter=0

def rows=con.rows(sqlstmt)  
int db_size=rows.size
//log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateGroupId=row.TradingCertificateGroupId
	sql_TradingCertificateGroupName=row.TradingCertificateGroupName
	sql_GroupCode=row.GroupCode
	sql_TypeCode=row.TypeCode
	sql_Name=row.Name
	
	sqlWriter.println(sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_GroupCode+","+sql_TypeCode+","+sql_Name)
	log.info "SQL Response received as :"+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_GroupCode+","+sql_TypeCode+","+sql_Name

	//Set Id as parameter to test case level
	String group = sql_GroupCode
	testRunner.testCase.setPropertyValue("group", group)
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('RefByTradingCertificateTypesByGroupByTypes')
	String req='${RefByTradingCertificateTypesByGroupByTypes#Response}'
	response=context.expand(req)
	log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefByTradingCertificateTypesByGroupByTypes"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		for(int i=0; i<db_size; i++)
		{
			String newId = jsonRes.id[i]
			//log.info "newId : "+newId
			if(newId.toString().equals(sql_TradingCertificateTypeId.toString()))
			{
				api_TradingCertificateTypeId=jsonRes.id[i]
				api_TradingCertificateGroupId=jsonRes.tradingCertificateGroup.id[i]
				api_TradingCertificateGroupName=jsonRes.tradingCertificateGroup.name[i]
				api_GroupCode=jsonRes.tradingCertificateGroup.groupCode[i]
				api_TypeCode=jsonRes.typeCode[i]
				api_Name=jsonRes.typeName[i]

	
				apiWriter.println(api_TradingCertificateTypeId+","+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_GroupCode+","+api_TypeCode+","+api_Name)
				log.info "API responce received as : "+api_TradingCertificateTypeId+","+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_GroupCode+","+api_TypeCode+","+api_Name
				
				if(api_TradingCertificateTypeId.toString().equals(sql_TradingCertificateTypeId.toString()) && api_TradingCertificateGroupId.toString().equals(sql_TradingCertificateGroupId.toString()) && api_TradingCertificateGroupName.toString().toUpperCase().equals(sql_TradingCertificateGroupName.toString().toUpperCase()) && api_GroupCode.toString().toUpperCase().equals(sql_GroupCode.toString().toUpperCase()) && api_TypeCode.toString().toUpperCase().equals(sql_TypeCode.toString().toUpperCase()) && api_Name.toString().toUpperCase().equals(sql_Name.toString().toUpperCase()))
				{
					compareWriter.println(sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_GroupCode+","+api_GroupCode+","+sql_TypeCode+","+api_TypeCode+","+sql_Name+","+api_Name+","+"Test Case passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_GroupCode+","+api_GroupCode+","+sql_TypeCode+","+api_TypeCode+","+sql_Name+","+api_Name+","+"Test Case failed")
					log.info "Details are not matching hence test case is failed"
				}
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
	counter = 1+counter
	log.info "Total records tested are : "+counter
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Trading Certificate Types By Group By Types***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>group</con:name><con:value>TRADECERT</con:value></con:property></con:properties></con:testCase><con:testCase id="7ad4ec57-b2fd-4d5f-9059-f4a386f407d2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OnHOLD_TC_ReferenceBySignatoryStatesByCertTypeId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RefBySignatoryStatesByCertTypeId" id="5bc47fb3-1630-4f24-93ab-b03ffad14cc2"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/signatorystates/${#TestCase#tradingCertTypeId}" methodName="ReferenceBySignatoryStatesByCertTypeId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefBySignatoryStatesByCertTypeId" id="02e6e4a4-7465-4edb-85d1-72c122cede41" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/signatorystates/536</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceBySignatoryStatesByCertTypeId" id="f07a1835-a4b2-4935-9062-f620022ac0f8" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Signatory State By Trading Certificate Type Id************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
	"""
	USE tradingcertificate
	SELECT  
	Top 250
	RSS.Id, RC.Name, RC.ShortName, rss.type_id as TradingCertTypeId
	FROM [dbo].[ref_SignatoryState] RSS 
	inner join ref_country RC 
	on RSS.country_id = RC.Id
	order by RC.name ASC, RSS.Id
	"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceBySignatoryStateByTradingCertTypeId.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceBySignatoryStateByTradingCertTypeId.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceBySignatoryStateByTradingCertTypeId.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceBySignatoryStateByTradingCertTypeId"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceBySignatoryStateByTradingCertTypeId"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\Comparision_GET_Response_ReferenceBySignatoryStateByTradingCertTypeId"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_Id"+","+"SQL_Name"+","+"SQL_ShortName"+","+"SQL_TradingCertTypeId")
apiWriter.println("API_Id"+","+"API_Name"+","+"API_ShortName"+","+"API_TradingCertTypeId")
compareWriter.println("SQL_Id"+","+"API_Id"+","+"SQL_Name"+","+"API_Name"+","+"SQL_ShortName"+","+"API_ShortName"+","+"SQL_TradingCertTypeId"+","+"API_TradingCertTypeId"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter = 0
String field=null

def rows=con.rows(sqlstmt)  
int db_size=rows.size
//log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->
	sql_Id=row.Id
	
	sql_Name=row.Name
	field=sql_Name
	sql_Name=removeComma()
				
	sql_ShortName=row.ShortName
	
	sql_TradingCertTypeId=row.TradingCertTypeId
	
	sqlWriter.println(sql_Id+","+sql_Name+","+sql_ShortName+","+sql_TradingCertTypeId)
	log.info "SQL Response received as :"+sql_Id+","+sql_Name+","+sql_ShortName+","+sql_TradingCertTypeId

	//Set Id as parameter to test case level
	String tradingCertTypeId = sql_TradingCertTypeId
	testRunner.testCase.setPropertyValue("tradingCertTypeId", tradingCertTypeId)
	//log.info "tradingCertTypId="+tradingCertTypeId
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('RefBySignatoryStatesByCertTypeId')
	String req='${RefBySignatoryStatesByCertTypeId#Response}'
	response=context.expand(req)
	log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefBySignatoryStatesByCertTypeId"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		for(int i=0; i<db_size; i++)
		{
			String newId = jsonRes.id[i]
			//log.info "newId : "+newId
			if(newId.toString().equals(sql_Id.toString()))
			{
				api_Id=jsonRes.id[i]

				api_Name=jsonRes.name[i]
				field=api_Name
				api_Name=removeComma()
				
				api_shortCode=jsonRes.shortCode[i]
				
				api_tradingCertTypeId=jsonRes.tradingCertTypeId[i]
	
				apiWriter.println(api_Id+","+api_Name+","+api_shortCode+","+api_tradingCertTypeId)
				log.info "API responce received as : "+api_Id+","+api_Name+","+api_shortCode+","+api_tradingCertTypeId
				
				if(api_Id.toString().equals(sql_Id.toString()) && api_Name.toString().toUpperCase().equals(sql_Name.toString().toUpperCase()) && api_shortCode.toString().toUpperCase().equals(sql_ShortName.toString().toUpperCase()) && api_tradingCertTypeId.toString().toUpperCase().equals(sql_TradingCertTypeId.toString().toUpperCase()))
				{
					compareWriter.println(sql_Id+","+api_Id+","+sql_Name+","+api_Name+","+sql_ShortName+","+api_shortCode+","+sql_TradingCertTypeId+","+api_tradingCertTypeId+","+"Test Case Passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_Id+","+api_Id+","+sql_Name+","+api_Name+","+sql_ShortName+","+api_shortCode+","+sql_TradingCertTypeId+","+api_tradingCertTypeId+","+"Test Case Failed")
					log.info "Details are not matching hence test case is failed"
				}
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
	counter = 1+counter
	log.info "Total records tested are : "+counter
}

public String removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Signatory State By Trading Certificate Type Id***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>tradingCertTypeId</con:name><con:value>5</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ilg1ZVhrNHh5b2pORnVtMWtsMll0djhkbE5QNC1jNTdkTzZRR1RWQndhTmsifQ.eyJpc3MiOiJodHRwczovL3NoaXBvd25lcnNjb3VrZGV2YjJjLmIyY2xvZ2luLmNvbS81YzJlY2M4OC1kNmNlLTRkNDEtYThhMi05ZTAzMTc0N2M3ZTYvdjIuMC8iLCJleHAiOjE2MTcyODU2NjgsIm5iZiI6MTYxNzI4MjA2OCwiYXVkIjoiZTQ4NTNjODItNjhjYS00OTk5LTk3NjAtZmZjODkxODk4NGJhIiwib2lkIjoiMTdlYzIyNjQtODZmNS00YWM1LWI3NTItMzkxZmE3ZTVmOWIzIiwic3ViIjoiMTdlYzIyNjQtODZmNS00YWM1LWI3NTItMzkxZmE3ZTVmOWIzIiwibmFtZSI6IlBhbmRpIFRlc3QtT25lIiwiZ2l2ZW5fbmFtZSI6IlBhbmRpIiwiam9iVGl0bGUiOiJCcm9rZXIiLCJleHRlbnNpb25fc3BsX2lkZW50aWZpZXIiOiI4NzI3MWZmOS1iNmY4LWVhMTEtYTgxNS0wMDBkM2FkYjY1NGQiLCJleHRlbnNpb25fc3BsX3JlZmVyZW5jZSI6IjQ1OSIsImZhbWlseV9uYW1lIjoiVGVzdC1PbmUiLCJleHRlbnNpb25fc3BsX3Rlcm1zYWNjZXB0ZWQiOiJ2MSIsImVtYWlscyI6WyJwaXRlc3Ricm9rZXIxQGdtYWlsLmNvbSJdLCJ0ZnAiOiJCMkNfMV9zcGx3ZWJwb3J0YWxkZXZzaWduaW5tZmEiLCJub25jZSI6IiIsInNjcCI6InRyYWRpbmctY2VydHMucmVhZCIsImF6cCI6ImZlZTUzNDUwLWQ4MzQtNGU0MC1hM2FjLTljMmMyNDJkYmIzMCIsInZlciI6IjEuMCIsImlhdCI6MTYxNzI4MjA2OH0.PM6e7J7NGLDFgQv6wozbQiDeLAGdw-eARk5pv9v0_FyvxV6wZt-95J-yNWutqZ9zhQCYPqGjflB9BqKKxAAsDD_I1ackg7ae3vhk_1eHBZkV18wskY2hKR_OfxF3kuVRRFfzr6wCYGAQhtBplitBeSBbDHVm_WDihYdrk1lruKPK0oY7z9fywVZdbiEHIt0KSv0LEPA-PBgnLm2pqSBj2-rDTtnnqnLkThv1JG15YrYAhcWSZvOgUtXLREGyjC6PG7Ed7uNiKle5MZPCFan1amLo5kWu407Z0EV2SVnrVrIGNxUEwzKrs5ENPoRddz_7330o_-KOhOtSXJQRatS9mA</con:value></con:property></con:properties></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer><con:oAuth2Profile><con:name>BearerToken</con:name><con:accessToken>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ilg1ZVhrNHh5b2pORnVtMWtsMll0djhkbE5QNC1jNTdkTzZRR1RWQndhTmsifQ.eyJpc3MiOiJodHRwczovL3NoaXBvd25lcnNjb3VrZGV2YjJjLmIyY2xvZ2luLmNvbS81YzJlY2M4OC1kNmNlLTRkNDEtYThhMi05ZTAzMTc0N2M3ZTYvdjIuMC8iLCJleHAiOjE2MTcxMDQxMTcsIm5iZiI6MTYxNzEwMDUxNywiYXVkIjoiZTQ4NTNjODItNjhjYS00OTk5LTk3NjAtZmZjODkxODk4NGJhIiwib2lkIjoiMTdlYzIyNjQtODZmNS00YWM1LWI3NTItMzkxZmE3ZTVmOWIzIiwic3ViIjoiMTdlYzIyNjQtODZmNS00YWM1LWI3NTItMzkxZmE3ZTVmOWIzIiwibmFtZSI6IlBhbmRpIFRlc3QtT25lIiwiZ2l2ZW5fbmFtZSI6IlBhbmRpIiwiam9iVGl0bGUiOiJCcm9rZXIiLCJleHRlbnNpb25fc3BsX2lkZW50aWZpZXIiOiI4NzI3MWZmOS1iNmY4LWVhMTEtYTgxNS0wMDBkM2FkYjY1NGQiLCJleHRlbnNpb25fc3BsX3JlZmVyZW5jZSI6IjQ1OSIsImZhbWlseV9uYW1lIjoiVGVzdC1PbmUiLCJleHRlbnNpb25fc3BsX3Rlcm1zYWNjZXB0ZWQiOiJ2MSIsImVtYWlscyI6WyJwaXRlc3Ricm9rZXIxQGdtYWlsLmNvbSJdLCJ0ZnAiOiJCMkNfMV9zcGx3ZWJwb3J0YWxkZXZzaWduaW5tZmEiLCJub25jZSI6IiIsInNjcCI6InRyYWRpbmctY2VydHMucmVhZCIsImF6cCI6ImZlZTUzNDUwLWQ4MzQtNGU0MC1hM2FjLTljMmMyNDJkYmIzMCIsInZlciI6IjEuMCIsImlhdCI6MTYxNzEwMDUxN30.GGN3WNCmEd7-xo_2Rf8m1UomDNHYqOdBFCmkmnmedsx44SU8aUiXVvTUVOiEO-fJHpZATLpa8Z2-KV9RMY6_XQLCEDLJOvFJ4Eri9wtOMERqJTiHAHK-sc3trFVprPWrOWzVCtOsGdQ6DpO5S5EFE4_Q1MTGEH069doWNZsfvF1ovWnrPN7BjS4clqg-pKPJQem5XFRWbL19Ms2QDgQbpjDxlwDTu-el_BLVtE8GA4sQvpuVpO7bgzkAS0dl8y16fwn4A5KA4qTWEYM_o_HR1rS2jGy90lKEiQxVlrJhLlBFR-Zs0F-BrCGNsJMzHRzyzLM4ED0FpSDOH4e2iH9pWw</con:accessToken><con:accessTokenPosition>HEADER</con:accessTokenPosition><con:oAuth2Flow>AUTHORIZATION_CODE_GRANT</con:oAuth2Flow><con:refreshAccessTokenMethod>AUTOMATIC</con:refreshAccessTokenMethod><con:accessTokenStatus>UNKNOWN</con:accessTokenStatus><con:accessTokenStartingStatus>ENTERED_MANUALLY</con:accessTokenStartingStatus></con:oAuth2Profile></con:oAuth2ProfileContainer><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>
<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="efe70e00-355c-4834-9298-82229a2f2fd8" activeEnvironment="Default" name="TC_API_Final" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="TestSuite" value="TestSuite"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="TestCase" value="TC_GET_TradingCertificateByTradingCertificateIdByValidate"/>
  <con:entry key="Username" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" id="5e9eb9aa-334f-45ac-b227-3216d545a72b" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="ReferenceByTradingCertificateTypes" path="/reference/tradingCertificateTypes" id="3253fe84-0796-424a-bb1e-9d34198a9e52"><con:settings/><con:parameters><con:parameter><con:name>sortAttribute</con:name><con:value>typeCode</con:value><con:style>QUERY</con:style><con:default>typeCode</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ReferenceByTradingCertificateTypes" id="98297f14-8116-4dcd-9e83-b50539192797" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ReferenceByTradingCertificateTypes" id="4834d0ff-353d-4c82-a971-63332f818c10" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/tradingCertificateTypes</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="sortAttribute" value="typeCode" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>sortAttribute</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="844b2b9c-34c1-414f-b17c-603d3f8f4839" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="ReferenceByTradingcertificateGroups" path="/reference/tradingcertificateGroups" id="7c1c49b6-a09b-40a7-9eb4-2db98564dfab"><con:settings/><con:parameters/><con:method name="ReferenceByTradingcertificateGroups" id="faafda76-e650-4b2b-ad46-2e544aee5c2a" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ReferenceByTradingcertificateGroups" id="97941379-c7e0-4c02-b2a6-33c967b4e981" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://pandionlinedev.shipownersclub.com/tradingcertificates</con:endpoint><con:request/><con:originalUri>https://pandionlinedev.shipownersclub.com/tradingcertificates/reference/tradingcertificateGroups</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="31940856-0cd2-49cd-b6cf-78ecb3caf7f4" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="ReferenceBySignatoryStatesByCertTypeId" path="/reference/signatorystates/${#TestCase#tradingCertTypeId}" id="ba369ffc-e337-4d03-ac6c-087ddef41dcc"><con:settings/><con:parameters/><con:method name="ReferenceBySignatoryStatesByCertTypeId" id="ea6c884d-bb21-4a80-a650-19a3e9cfac88" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ReferenceBySignatoryStatesByCertTypeId" id="02e6e4a4-7465-4edb-85d1-72c122cede41" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="a74b7328-2b01-4e51-a566-2fc93fa6b3b9" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="RefBySignatoryStateAddressesBySignatoryStatesId" path="/reference/signatorystateaddresses/${#TestCase#stateId}" id="5ad1fece-8075-4ae9-b093-e4cd15ef6e29"><con:settings/><con:parameters/><con:method name="RefBySignatoryStateAddressesBySignatoryStatesId" id="9f6869be-015c-45e2-b738-4827b6b78c53" method="GET"><con:settings/><con:parameters/><con:request name="RefBySignatoryStateAddressesBySignatoryStatesId" id="0ceb06f5-f4da-4c55-a616-c74394ef400c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="5bc18d0d-2a10-4343-ba16-08f7e2854ff9" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="Reference​ByTradingCertificateTypes​ByTCGroupCode" path="/reference/tradingCertificateTypes/${#TestCase#groupCode}" id="f3526911-30f2-4b57-8f18-06f58fc044d1"><con:settings/><con:parameters/><con:method name="Reference​ByTradingCertificateTypes​ByTCGroupCode" id="559ae58b-f1ab-4263-b567-e3f12983b39a" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Reference​ByTradingCertificateTypes​ByTCGroupCode" id="60b9e02d-c099-459f-8e3b-2e6d2d42d309" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="73a21727-963d-466c-99f6-0ee15d0db105" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="ReferenceByInvalidCertificate" path="/reference/tradingcertificateTypes/invalidcert" id="24cf2562-5e10-418e-96d0-7dc8014fcdf5"><con:settings/><con:parameters/><con:method name="ReferenceByTradingCertificateByInvalidCertificates" id="e6614616-6c23-403d-a3dc-cdf90a88bd1f" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:inv="https://tradingcerts-dev.azurewebsites.net/reference/invalidCert">inv:Fault</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ReferenceByTradingCertificateByInvalidCertificates" id="45774e96-1ca2-47f5-953c-37023d5b3901" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>[
  {
    "id": 1234,
    "name": "Newstring",
    "reference": 56789,
    "vesselTypeShortCode": "FF",
    "vesselType": "FISH FARM VESSELS",
    "grossTonnage": 2000,
    "passengerCarryingCapacity": 0,
    "policyReference": 10125201,
    "policyStart": "2021-02-18T11:40:11.473Z",
    "policyEnd": "2022-02-18T11:40:11.473Z",
    "coverLimits": [
      {
        "id": 77,
        "coverShortName": "Passenger Vess Liab",
        "limitName": "Notwithstanding the limits above, cover will be subject to a combined single limit, each incident",
        "currencyCode": "USD",
        "amount": 500000000.00,
        "isThePrimaryCoverLimit": true
      }
    ]
  }
]</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/invalidCert</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="e4656ed0-32a1-45d8-91b2-e260f143c69b" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="ReferenceByTradingCertificateTypesByGroupByTypes" path="/reference/tradingCertificateTypes/${#TestCase#group}/types" id="9a4fe342-3ccc-44a1-88b8-472ea6d978b4"><con:settings/><con:parameters/><con:method name="ReferenceByTradingCertificateTypesByGroupByTypes" id="f0b22301-4185-4fe0-bc0c-fc844c0ffd7c" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ReferenceByTradingCertificateTypesByGroupByTypes" id="140ec35c-b04b-43e0-9240-be700d1f38b4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="24072768-f94e-4e6b-b4bb-2e5346ebbaaf" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="SignatoryStatesByCertificateTypeIdByStates" path="/signatorystates/${#TestCase#tradingCertTypeId}/states" id="38c6fd68-9c11-4477-9eac-736e30615ef9"><con:settings/><con:parameters/><con:method name="SignatoryStatesByCertificateTypeIdByStates" id="6602bf0e-0215-42d3-a52d-44b12ec7592d" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:request name="SignatoryStatesByCertificateTypeIdByStates" id="548e0007-78b3-450f-a79c-5fc0f48ba34e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="f939a240-0e91-4c02-8350-49e66b5a70d1" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="SignatureStatesByStateIdByAddresses" path="/signatorystates/${#TestCase#stateId}/addresses" id="318ddcae-d6ce-40f6-8d5d-98661ab55ff3"><con:settings/><con:parameters/><con:method name="SignatureStatesByStateIdByAddresses" id="7b0dd1fd-398b-4df2-8342-1de442b6bde5" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="SignatureStatesByStateIdByAddresses" id="80aedd0f-e2d9-470b-a3d4-193cf0f4a57e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/signatorystates/389/addresses</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="239ce03b-e02c-49f9-ac17-6bb3f6f9a12e" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="SignatoryStatesByCertTypeIdByStates" path="/signatorystates/${#TestCase#certTypeId}/states" id="bd6cd218-c771-4650-900e-6a1b8642b396"><con:settings/><con:parameters/><con:method name="SignatoryStatesByCertTypeIdByStates" id="451338bc-e704-41f4-866c-77e813fe62bc" method="GET"><con:settings/><con:parameters/><con:request name="SignatoryStatesByCertTypeIdByStates" id="1f11686e-080c-4b59-8cf4-0b5e08f95494" mediaType="application/json"><con:settings/><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="5600c16e-0a62-44c8-b51e-fd0e41d876dd" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="POST_TradingCertificateSave" path="/tradingcertificates/" id="f36db103-8a2b-498d-b486-9f2eb155cd29"><con:settings/><con:parameters/><con:method name="POST_TradingCertificateSave" id="87d21567-8c00-4f64-a50f-57731162d4ed" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:trad="https://tradingcerts-dev.azurewebsites.net/tradingcertificates/">trad:Response</con:element></con:representation><con:request name="POST_TradingCertificateSave" id="f0efb725-78f1-47c2-a486-172c93cb9440" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="546c10de-c313-4def-a376-15eaa800f530" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="GET_TradingCertificateByCertificateId" path="/tradingcertificates/${#TestCase#tradingCertificateId}" id="ecd1f185-d8eb-4805-a619-649f1d3d0f53"><con:settings/><con:parameters/><con:method name="GET_TradingCertificateByCertificateId" id="5fe89452-dfbc-4a44-be98-4f693aacde35" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:trad="https://tradingcerts-dev.azurewebsites.net/tradingcertificates/">trad:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GET_TradingCertificateByCertificateId" id="325ac480-28f6-4df9-9f1c-06b0aacf1498" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="551f6a6e-6003-44eb-9bd3-39a33a85858a" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="TradingCertificateValidationByCertificateId" path="/tradingcertificates/${#TestCase#certId}/validate" id="8fd3a469-bfab-4e6f-88f9-5e548e0da9fe"><con:settings/><con:parameters><con:parameter><con:name>tradingCertificateId</con:name><con:value>tradingCertificateId</con:value><con:style>TEMPLATE</con:style><con:default>tradingCertificateId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="TradingCertificateValidationByCertificateId" id="6940eb7e-ac7e-4314-a8d2-80b7f1879010" method="GET"><con:settings/><con:parameters/><con:request name="TradingCertificateValidationByCertificateId" id="6b80ff43-31b3-4de7-847a-a9bf7ff7a005" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tradingCertificateId" value="tradingCertificateId" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>tradingCertificateId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="c898d910-cb6f-4b0e-84ce-ae80ee49adec" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="TCByTCIDByGenerateDraftDocument" path="/tradingcertificates/${#TestCase#tradingCertificateId}/generateDraftDocument" id="c9b22432-85bc-43cb-b438-e37e5024476d"><con:settings/><con:parameters/><con:method name="TCByTCIDByGenerateDraftDocument" id="65e45c6d-2bbd-4e2a-97c5-28f697640e55" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:gen="https://tradingcerts-dev.azurewebsites.net/tradingcertificates/1/generateDraftDocument">gen:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:gen="https://tradingcerts-dev.azurewebsites.net/tradingcertificates/1/generateDraftDocument">gen:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>403</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="TCByTCIDByGenerateDraftDocument" id="ab2d1e5d-6901-47ae-83c7-505727c6c9ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/1/generateDraftDocument</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="3c35d7dc-4ed4-48da-b4a0-89d564cca96d" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="Patch_Tradingcertificates" path="/tradingcertificates" id="95dc4cfc-28d5-4931-abe3-638a37e4ab17"><con:settings/><con:parameters/><con:method name="Patch_Tradingcertificates" id="6cfbb9f0-1ab8-4338-82fb-526e96d64eb2" method="PATCH"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:trad="https://tradingcerts-dev.azurewebsites.net/tradingcertificates">trad:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:request name="Patch_Tradingcertificates" id="29763329-86fc-4dc9-8273-28e9bfd5be0d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>{
    "id": 3,
    "addressTypeId": null,
    "sourceSystem": "SIGMA",
    "reference": "57163/523228/2015/1",
    "currentStatus": "CREATED",
    "storageId": "",
    "riskId": 208816,
    "policyId": 3922018,
    "memberPartyId": 110937,
    "ownerPartyId": null,
    "brokerPartyId": null,
    "isRenewal": false,
    "isYacht": false,
    "version": 1,
    "riskReference": "523228",
    "policyReference": "853475",
    "memberReference": "57163",
    "memberType": "MEMBER",
    "memberName": "SIGMA TEST AUSTRALIA",
    "jointAssuredName": null,
    "ownerReference": null,
    "ownerName": "",
    "ownerDomicile": null,
    "ownerEmailAddress": null,
    "brokerReference": null,
    "brokerName": "Group Clubs",
    "brokerEmailAddress": "kevin.lowe@shipowners.co.uk",
    "policyYear": "2015",
    "certificateIssueDate": "2016-04-16T10:42:22.757",
    "emailAddress": "",
    "ccEmailAddress": "",
    "effectiveStartDate": null,
    "effectiveEndDate": null,
    "passengerCapacity": null,
    "policyStartDate": "2015-12-01T12:00:00",
    "policyEndDate": "2016-12-01T12:00:00",
    "currencyCode": "USD",
    "coverLimitAmount": 500000000.00,
    "signatoryStateId": null,
    "vesselName": "TEST",
    "vesselType": "FI",
    "vesselTypeName": "INSHORE FISHING",
    "vesselEnteredDate": "2015-12-01T12:00:00",
    "vesselFlag": "AUS",
    "imoNumber": null,
    "distinctiveNumbersOrLetters": null,
    "grossTonnage": "10.00",
    "yearBuilt": 1999,
    "engineHorsePower": null,
    "trademarkAndEngineModel": null,
    "model": "",
    "engineNo": null,
    "nominatedFlagState": "",
    "nominatedFlagStateName": "",
    "portOfRegistry": "GENOA",
    "tenderReferenceList": "",
    "tenderOutboardReferenceList": "",
    "tradingCertificateTypeId": 8,
    "tradingCertificateType": {
        "id": 8,
        "tradingCertificateGroup": {
            "id": 2,
            "name": "COFR",
            "groupCode": "COFR"
        },
        "typeCode": "COFRGAIC",
        "typeName": "COFR - Great American Insurance Company"
    },
    "stateAddress": null,
    "ownerAddress": null,
    "brokerAddress": {
        "id": 3,
        "addressName": "Adress Name",
        "addressLine1": "Line 1",
        "addressLine2": "Line 2",
        "addressLine3": "Line 3",
        "stateOrCounty": "",
        "city": "London",
        "country": "United Kingdom",
        "postCode": "EC1C 2EC",
        "primaryAddress": false
    },
    "memberAddress": null,
    "jointAssuredAddress": null,
    "tradingCertificateBanks": []
}</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="19f66b6f-88ab-45b1-859c-a1c80f4afe15" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="Test_Patch_Tradingcertificates" path="/tradingcertificates" id="593db201-76ff-47c2-ae21-60484ab78170"><con:settings/><con:parameters/><con:method name="Test_Patch_Tradingcertificates" id="4522291f-0453-42c3-b881-4d56222c3664" method="PATCH"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:trad="https://tradingcerts-dev.azurewebsites.net/tradingcertificates">trad:Response</con:element></con:representation><con:request name="Test_Patch_Tradingcertificates" id="5e2213b2-74f8-4241-a73e-602434379a89" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>{
"id": 273635,
"addressTypeId": 6,
"sourceSystem": "UTOM",
"reference": "76567/602345/ 2021/78",
"currentStatus": "CREATED",
"storageId": null,
"riskId": 654321,
"policyId": 91827,
"memberPartyId": 56789,
"ownerPartyId": null,
"brokerPartyId": null,
"isRenewal": false,
"isYacht": false,
"version": "78",
"riskReference": "602345",
"policyReference": "1045678",
"memberReference": "76567",
"memberType": "Member",
"memberName": "SIGMA TEST",
"jointAssuredName": null,
"ownerReference": "23407",
"ownerName": "SD Marine Services Limited",
"ownerDomicile": "India",
"ownerEmailAddress": "subicbunker@hoyamarine.com",
"brokerReference": "104",
"brokerName": "Voyager Risk Solutions Limited",
"brokerEmailAddress": "kevinkwan@voyfg.com",
"policyYear": null,
"certificateIssueDate": null,
"emailAddress": "test@test.com",
"ccEmailAddress": "ccTest@test.com",
"effectiveStartDate": "2021-01-01T11:00:00.00Z",
"effectiveEndDate": "2023-12-01T11:00:00.00Z",
"passengerCapacity": "200",
"policyStartDate": "2021-02-28T12:00:00Z",
"policyEndDate": "2021-02-28T12:00:00Z",
"currencyCode": "USD",
"coverLimitAmount": "500000000.00",
"signatoryStateId": 263,
"vesselName": "Test3Policy Risk",
"vesselType": "YA",
"vesselTypeName": "YACHT CHARTER 13+ PAX",
"vesselEnteredDate": "2020-11-08T12:00:00.00Z",
"vesselFlag": "India",
"imoNumber": "3453466",
"distinctiveNumbersOrLetters": "f56",
"grossTonnage": "1100",
"yearBuilt": "2021",
"engineHorsePower": "2000",
"trademarkAndEngineModel": "EMN005",
"model": "M",
"engineNo": "007",
"nominatedFlagState": "IND",
"nominatedFlagStateName": "INDIA",
"portOfRegistry": "Mumbai",
"tenderReferenceList": "TNS-0001",
"tenderOutboardReferenceList": "OMSN-01",
"tradingCertificateTypeId": 1,
"tradingCertificateType": {
"id": 1,
"tradingCertificateGroup": {
"id": 1,
"name": "Trading Certificates",
"groupCode": "TRADECERT"
},
"typeCode": "BBC",
"typeName": "BBC"
},
"stateAddress": {
"id": 1,
"addressName": "StAdrName",
"addressLine1": "StAdrLine1",
"addressLine2": "StAdrLine2",
"addressLine3": "StAdrLine3",
"stateOrCounty": "StAdrState",
"city": "StCity",
"country": "StCountry",
"postCode": "100001",
"primaryAddress": true
  },
"ownerAddress": {
"id": 2,
"addressName": "OwAdrName",
"addressLine1": "OwAdrLine1",
"addressLine2": "OwAdrLine2",
"addressLine3": "OwAdrLine3",
"stateOrCounty": "OwAdrState",
"city": "OwCity",
"country": "OwCountry",
"postCode": "100001",
"primaryAddress": true
  },
  "brokerAddress": {
"id": 3,
"addressName": "BrAdrName",
"addressLine1": "BrAdrLine1",
"addressLine2": "BrAdrLine2",
"addressLine3": "BrAdrLine3",
"stateOrCounty": "BrAdrState",
"city": "BrCity",
"country": "BrCountry",
"postCode": "100001",
"primaryAddress": true
  },
"memberAddress": null,
"jointAssuredAddress": {
"id": 3,
"addressName": "JasAdrName",
"addressLine1": "JasMemAdrLine1",
"addressLine2": "JasMemAdrLine2",
"addressLine3": "JasMemAdrLine3",
"stateOrCounty": "JasMemAdrState",
"city": "JasCity",
"country": "JasCountry",
"postCode": "100001",
"primaryAddress": true
  },
  "tradingCertificateBanks": []
}</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="aa924930-0897-44be-b43a-a479b1b2be90" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="TradingCertificateByTradingCertificateIdByValidate" path="/tradingcertificates/${#TestCase#TredCertId}/validate" id="a6890018-b842-4318-aa22-80a9271d220b"><con:settings/><con:parameters/><con:method name="TradingCertificateByTradingCertificateIdByValidate" id="8db45cec-0282-4966-901d-2c59d6adb7fe" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:val="https://tradingcerts-dev.azurewebsites.net/tradingcertificates/273695/validate">val:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="TradingCertificateByTradingCertificateIdByValidate" id="02b0791d-1371-4ba4-b933-641aade1deeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/273695/validate</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="fc06177c-dafa-4bdc-abdc-b41ac026d59c" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="RiskSelectionTradingCertificatesByRiskReference" path="/riskSelection/tradingCertificates/${#TestCase#riskReference}" id="13903cf3-425e-4486-9c07-b8fe8c8dfbc2"><con:settings/><con:parameters/><con:method name="RiskSelectionTradingCertificatesByRiskReference" id="ce1ffeb7-de8e-4305-87e3-5198884adf47" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="RiskSelectionTradingCertificatesByRiskReference" id="e390b377-cb36-4aad-b9b6-d11439f03da2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="7130554c-b9f5-49a5-9f6b-d3905ae192b1" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="Post_TradingcertificatePacks" path="/tradingcertificatePacks" id="77616247-ded5-47f9-b04a-408e8ebc361e"><con:settings/><con:parameters/><con:method name="Post_TradingcertificatePacks" id="8873f92b-a76d-41e4-9cfa-c305bfe36d87" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:trad="https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks">trad:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Post_TradingcertificatePacks" id="ef0a3539-ce3f-427e-8ca8-5ffc00ee9bc1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>{
    "createdByUserEmailAddress": "Test@test.com",
    "tradingCertificates": []
}</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="6d5c9924-954b-487d-930d-94c19bd287bb" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="GET_TradingcertificatePacksByPackId" path="/tradingcertificatePacks/${#TestCase#TCPackId}" id="d597027f-f1d7-44ef-ad10-68706e4624f5"><con:settings/><con:parameters/><con:method name="GET_TradingcertificatePacksByPackId" id="167ac0c1-facd-461c-a16c-c01ba1026486" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:trad="https://tradingcerts-dev.azurewebsites.net/">trad:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="GET_TradingcertificatePacksByPackId" id="50c13843-d0eb-4c3b-a035-93fd8a637307" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="2bdb624e-f355-455b-b491-449d9762159e" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate" path="/tradingcertificatePacks/${#TestCase#packId}/validate" id="15c0576c-d0e2-4fda-a415-a19414ee28b2"><con:settings/><con:parameters><con:parameter><con:name>sortBy</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate" id="ee796146-4847-40e3-831f-e6f9b81b76ad" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate" id="3c5d4845-01cb-46ee-8b70-3721d2827fc7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/65/validate</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="sortBy" value="tradingCertificateId" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>sortBy</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="5d35cbbe-e70d-4652-9aac-4870774889be" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd" path="/tradingcertificatePacks/${#TestCase#packId}/add" id="56f0e749-89a5-418d-b31d-4165bae61055"><con:settings/><con:parameters/><con:method name="PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd" id="b558b7b3-77bf-4832-b9b6-6ec30050227a" method="PATCH"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd" id="ab02dbc8-05bc-4230-87fc-4f557e9b357a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>[
    134094, 
     134095,
     134096
]</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/76/add</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="b768dc14-840d-4930-b770-dcdff11bffa2" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove" path="/tradingcertificatePacks/${#TestCase#packId}/remove" id="f5bbb566-7fc6-4517-ae41-a6aba1fed2f2"><con:settings/><con:parameters/><con:method name="PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove" id="2ecd6aed-283b-4ced-ab60-87f54c8edc00" method="PATCH"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:rem="https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/76/remove">rem:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove" id="06da4e40-25de-41c4-b377-2ba68cc9200b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>[
    134094
]</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/76/remove</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="eed13b4b-5e22-4a6b-abb0-754aa4d8f04d" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="POST_TradingCertificatePackByTradingCertificatePackIdByIssueDocuments" path="/tradingcertificatePacks/${#TestCase#packId}/issuedocuments" id="a708622f-8bf4-469b-943d-c56fc1623731"><con:settings/><con:parameters/><con:method name="POST_TradingCertificatePackByTradingCertificatePackIdByIssueDocuments" id="78910e99-023b-47eb-b6a1-42fc52d6b198" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:iss="https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/76/issuedocuments">iss:Response</con:element></con:representation><con:request name="POST_TradingCertificatePackByTradingCertificatePackIdByIssueDocuments" id="281058d6-def5-403e-b3b4-c6ecc05ea986" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks//issuedocuments</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="b31a326d-dfe8-4f43-abe1-0b35106882e6" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://tradingcerts-dev.azurewebsites.net" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint></con:endpoints><con:resource name="POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument" path="/tradingcertificatePacks/${#TestCase#tradingCertificatePackID}/generateDraftDocument" id="0caa5030-08c8-4678-9154-66132869e9e9"><con:settings/><con:parameters/><con:method name="POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument" id="a44df189-fc3b-4dda-bb9d-0368ec803f39" method="GET"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:gen="https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/76/generateDraftDocument">gen:Response</con:element></con:representation><con:request name="POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument" id="5ce352b4-69ac-4057-98fc-3bcd474b9df5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/76/generateDraftDocument</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="fcdc14ea-0bd1-4bad-9591-f72c745e01eb" wadlVersion="http://wadl.dev.java.net/2009/02" name="https://pandionlinedev.shipownersclub.com" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>https://pandionlinedev.shipownersclub.com</con:endpoint></con:endpoints><con:resource name="InvalidCert" path="/tradingcertificates/reference/tradingcertificateTypes/invalidCert" id="ff80ec22-475c-4cff-9ed5-f0e6f3626934"><con:settings/><con:parameters/><con:method name="InvalidCert 1" id="b3e7e892-61b5-4d3e-aa47-78c50dcdeddc" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:request name="Request 1" id="a439e473-17f8-4564-b43d-47eb69f54327" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://pandionlinedev.shipownersclub.com</con:endpoint><con:request>		[
		  {
		    "id": 130179,
		    "name": "Newstring",
		    "reference": 682637,
		    "vesselTypeShortCode": "AU",
		    "vesselType": "AUTONOMOUS UNDERWATER",
		    "grossTonnage": 1000,
		    "passengerCarryingCapacity": 12,
		    "policyReference": 1044648,
		    "policyStart": "2021-04-01T12:00:00.0",
		    "policyEnd": "2022-04-01T12:00:00.0",
		    "coverLimits": [
		      {
		        "id": 77,
		        "coverShortName": "Passenger Vess Liab",
		        "limitName": "TestLimit",
		        "currencyCode": "USD",
		        "amount": 50000000.00,
		        "isThePrimaryCoverLimit": true
		      }
		    ]
		  }
		]
		</con:request><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="504bb5b9-f24d-487a-ae9d-5ec1074fe63c" name="TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="1b73b6a1-bc2c-4406-8864-2e47e113c69e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Driver_Script" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Driver" id="57de9c19-bd6e-48f2-a704-7ffa50de1573"><con:settings/><con:config><script><![CDATA[import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.sql.Sql
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;  
  
import org.apache.poi.common.usermodel.*;
import org.apache.poi.common.usermodel.Hyperlink;
//import org.apache.poi.common.usermodel.HyperlinkType
import java.io.*;

public class Driver_Script
{
	XSSFCellStyle rowStyle;	
	/*	
	public printR(log)
	{
		log.info 'Method accessed'
	}
	*/
	//public static writeDetailsinRowwithLink(XSSFWorkbook wb,XSSFSheet ws,XSSFSheet source,def arrDetail,XSSFCellStyle rowStyle,boolean isHeader=false,String tcid,String summary_File)
	public static writeDetailsinRowwithLink(XSSFWorkbook wb, XSSFSheet ws, def arrDetail, XSSFCellStyle rowStyle, boolean isHeader=false, String tcid, String summary_File)
	{	
		int rowNum;
		if(isHeader)
		{
			rowNum=0
		}
		else
		{
			rowNum = ws.getLastRowNum()+1;		
		}
		XSSFRow headerRow=ws.createRow(rowNum);
		for(int i=0;i<arrDetail.size;i++)
		{
			headerRow.createCell(i);
			headerRow.getCell(i).setCellStyle(rowStyle);
			headerRow.getCell(i).setCellValue(arrDetail[i]);
			if(i==0)
			{
				CreationHelper createHelper = wb.getCreationHelper();
				//DOCUMENT
				// XSSFHyperlink link = (XSSFHyperlink)createHelper.createHyperlink(Hyperlink.LINK_FILE);
				XSSFCellStyle hlinkstyle = wb.createCellStyle();
				XSSFFont hlinkfont = wb.createFont();
				hlinkfont.setUnderline(XSSFFont.U_SINGLE);
		
				hlinkfont.setColor(IndexedColors.BLUE.index);
				hlinkstyle.setFont(hlinkfont);
				XSSFHyperlink link = (XSSFHyperlink)createHelper.createHyperlink(Hyperlink.LINK_DOCUMENT);
				link.setAddress(tcid+'!A1' );
				  
				hlinkstyle.setBorderBottom(CellStyle.BORDER_THIN);
				hlinkstyle.setBorderLeft(CellStyle.BORDER_THIN);
				hlinkstyle.setBorderRight(CellStyle.BORDER_THIN);
				hlinkstyle.setBorderTop(CellStyle.BORDER_THIN);
				headerRow.getCell(i).setCellStyle(hlinkstyle);
				headerRow.getCell(i).setHyperlink((XSSFHyperlink) link)
			}
		}
	}
	//public process_Data(XSSFWorkbook O_Summary,XSSFSheet source,int api_startCol,int db_startCol,int row_start,int api_endCol,int db_endCol,int total_size,int db_size,XSSFSheet summary,String summary_File,String uri,String broker,String tcid,String dsc="")
	public process_Data(XSSFWorkbook O_Summary,XSSFSheet source,int api_startCol,int db_startCol,int row_start,int api_endCol,int db_endCol,int total_size,int db_size,XSSFSheet summary,String summary_File,String uri,String tcid,String dsc="")
	{
		XSSFCellStyle rowStyle,rowTrue,rowFalse;
		int api_cnt=0,db_cnt=0
		rowTrue=getCellStyle(O_Summary,'Cell',true);
		rowFalse=getCellStyle(O_Summary,'Cell',false);
		api_cnt=compareData(O_Summary,source,db_startCol,api_startCol,row_start,db_endCol,api_endCol,db_size,total_size)
		
		db_cnt=compareData(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size)
		String exe_Status
		def arrOutputHeader
		if(api_cnt==0 && db_cnt==0)
		{
			exe_Status='PASS'
			rowStyle=rowFalse
		}
		else
		{
			exe_Status='FAIL'
			rowStyle=rowTrue
		}
		//arrOutputHeader=[tcid,dsc,db_size,api_cnt,total_size,db_cnt,broker,exe_Status]
		arrOutputHeader=[tcid,dsc,db_size,api_cnt,total_size,db_cnt,exe_Status]
		//writeDetailsinRow(summary,arrOutputHeader,rowStyle)
		//writeDetailsinRowwithLink(O_Summary, summary, arrOutputHeader, source, rowStyle, tcid, summary_File)
		writeDetailsinRowwithLink(O_Summary, summary, arrOutputHeader, rowStyle, tcid, summary_File)
		//XSSFWorkbook wb, XSSFSheet ws, def arrDetail,XSSFCellStyle rowStyle,boolean isHeader=false,String tcid,String summary_File
		//writeDetailsinRow(summary,arrOutputHeader,rowStyle)
		
		for(int i=0;i<=api_endCol;i++)
		{
			autoSize(source,String.valueOf(i))	
		}		
		autoSize(summary,'0,1,2,3,4,5')
		try
		{
			saveExcelFile(summary_File,O_Summary)
		}
		catch(Exception e){}			
	}
	//RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,broker,tcid,dsc)

	public int compareData(XSSFWorkbook wb,XSSFSheet source,int source_start,int dest_start,int row_start,int source_end,int dest_end,int src_size,int dest_size)
	{
		println source_start
		XSSFCellStyle rowTrue,rowFalse;
		XSSFRow currentrow,currentrow1
		rowTrue=getCellStyle(wb,'Cell',true);
		rowFalse=getCellStyle(wb,'Cell',false);
		int src_counter=row_start;
		int dest_counter=row_start;	
		int colCnt=source_end-source_start
		boolean flag
		int src_cnt=0;
		String apiRef,dbRef,dbData,apiData
		for(int iter=0;iter<src_size;iter++)
		{
			flag=false
			
			currentrow = source.getRow(src_counter);
			//log.info source_start
			apiRef=currentrow.getCell(source_start,Row.RETURN_BLANK_AS_NULL)
			//println apiRef
			dest_counter=row_start;
			for(int j=0;j<dest_size;j++)
			{
				currentrow1 = source.getRow(dest_counter)
				dbRef=currentrow1.getCell(dest_start,Row.RETURN_BLANK_AS_NULL)
				dest_counter++	
				if(apiRef==dbRef)
				{
					flag=true
					for(int k=0;k<colCnt;k++)
					{
						dbData=currentrow.getCell(source_start+k)
						apiData=currentrow1.getCell(dest_start+k)
						if(dbData!=apiData)
						{
							flag=false
							println source_start+k
							println dest_start+k
							println 'Failed for -->'+dbData+'<=value=>'+apiData
							break;
						}
					}
				break;
				}
			}
			if(!flag)
			{
				writeDetails(source,src_counter,source_end,rowTrue,['Not Matched'])
				src_cnt++
			}
			else
			{
				writeDetails(source,src_counter,source_end,rowFalse,['Matched'])	
			}
			src_counter++;
		}
		return src_cnt;
	}

	public writeSummarySheet(XSSFWorkbook O_workbook,XSSFSheet ws,String env)
	{	
		def arrOutputHeader;
		XSSFSheet data_s=O_workbook.getSheet('API_Result');
		int row_cnt=data_s.getLastRowNum()
		int cnt=0;
		XSSFCellStyle headerStyle;
		ws.setDisplayGridlines(false);

		XSSFFont hlinkfont = O_workbook.createFont();
		headerStyle=getCellStyle(O_workbook,'Header',false);
		
		XSSFRow headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("API Execution Summary ");

		Date date1 = new Date();
		String newDate = date1.format('dd-MMM-yyyy');

		headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("Environment");
		headerRow.createCell(1);
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellValue(env)
		
		headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("Execution Date");
		headerRow.createCell(1);
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellValue(newDate)
		

		headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("Total API Records");
		headerRow.createCell(1);
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellFormula("SUM(API_Result!C:C)")

		headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.createCell(1);
		headerStyle=getCellStyle(O_workbook,'Header',true);
     	
		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("Total FAIL Records");
		
		
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellFormula("SUM(API_Result!D:D)")

		headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.createCell(1);
		headerStyle=getCellStyle(O_workbook,'Header',false);
		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("Total PASS Records");
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellFormula("B4-B5")

		headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.createCell(1);
		headerStyle=getCellStyle(O_workbook,'Header',false);
		
		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("Pass Percentage");
		headerRow.getCell(1).setCellFormula("(B6/B4)*100")

		headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.createCell(1);
		headerStyle=getCellStyle(O_workbook,'Header',true);
		headerStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());  

		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("FAIL Percentage");
		
		headerRow.getCell(1).setCellFormula("(B5/B4)*100");


		/*CellStyle style1 = O_workbook.createCellStyle();
        style1.setBorderLeft(CellStyle.BORDER_NONE);
        style1.setBorderRight(CellStyle.BORDER_NONE);
        style1.setBorderBottom(CellStyle.BORDER_NONE);
        style1.setBorderTop(CellStyle.BORDER_NONE);

        for(int i=9; i< 100 ; i++)
		{
            for(int j=0; j< 100; j++)
			{
            	headerRow=ws.createRow(i);
            	headerRow.createCell(j);
            	headerRow.getCell(j).setCellStyle(style1);
            }
        }

		/*	
		for(int i=0; i< 8 ; i++)
		{
			for(int j=4; j< 100; j++)
			{
            	headerRow=ws.createRow(i);
            	headerRow.createCell(j);
            	headerRow.getCell(j).setCellStyle(style1);
            }
        }
		*/
	}
	
	public def getConnection(String fName)
	{
		File config=new File(fName)
		Properties prop=new Properties()

		config.withInputStream
		{
			line->
			prop.load(line)
		}
		String dbURL=prop['DB_URL'];
		String dbPwd=prop['DB_Pwd'];
		String dbDriver='com.microsoft.sqlserver.jdbc.SQLServerDriver';
		String dbUser=prop['DB_User'];
		def con=Sql.newInstance(dbURL,dbUser,dbPwd,dbDriver);
		//con.setNetworkTimeout(null, 10000)
		/*Properties props = new Properties();
		props.setProperty("user", prop['DB_URL']);
		props.setProperty("password", prop['DB_Pwd']);
		props.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_CONNECT_TIMEOUT, "20000");

		Connection con = DriverManager.getConnection("com.microsoft.sqlserver.jdbc.SQLServerDriver", props);*/

		return con;	
	}
	public void saveExcelFile(String strFilePathwithName, XSSFWorkbook outputWorkbook) throws FileNotFoundException
	{	
		try 
		{	
			FileOutputStream out = new FileOutputStream(strFilePathwithName);
			outputWorkbook.write(out);
			out.close();
		} 
		catch (IOException e)
		{
			//TODO Auto-generated catch block
			//e.printStackTrace();
		}	
	}

	public XSSFWorkbook getSummaryWorkbook(String strFilePathwithName)
	{
		File file1 = new File(strFilePathwithName);
		XSSFWorkbook O_workbook;
		XSSFSheet result,result1;
		if(!file1.exists())
		{
			O_workbook = new XSSFWorkbook();
			
			result1 = O_workbook.createSheet("API_Summary");
			result = O_workbook.createSheet("API_Result");
					
			def arrOutputHeader = ["TC ID","Description" ,"Database Record Count","DataBase Mistamatch","API data Count","API Mistmatch","Status"];
			XSSFCellStyle headerStyle = getCellStyle(O_workbook,'Header');
			
			writeDetailsinRow(result,arrOutputHeader,headerStyle,true);	
			try
			{
				saveExcelFile(strFilePathwithName,O_workbook)
			}
			catch(Exception e)
			{}	
		}
		else
		{
			O_workbook = new XSSFWorkbook(new FileInputStream(new File(strFilePathwithName)));
		}
		return O_workbook;
	}


	public autoSize(XSSFSheet ws,String sColumn)
	{
		def sArr=sColumn.split(',')
		for(String values:sArr)
		{
			ws.autoSizeColumn(Integer.parseInt(values))
		}	
	}
	public writeDetails(XSSFSheet ws, int rowNum, int colStart, XSSFCellStyle rowStyle, def arrDetail)
	{
		XSSFRow headerRow=ws.getRow(rowNum);
							
		if(headerRow==null)
			headerRow=ws.createRow(rowNum);		
		//log.info 'Itt'+colStart+arrDetail.size
		for(int i=0;i<arrDetail.size;i++)
		{
			headerRow.createCell(colStart);
			headerRow.getCell(colStart).setCellStyle(rowStyle);
			headerRow.getCell(colStart).setCellValue(arrDetail[i]);
			colStart++;
		}
	}
	public static writeDetailsinRow(XSSFSheet ws,def arrDetail,XSSFCellStyle rowStyle,boolean isHeader=false)
	{
		int rowNum;
		if(isHeader)
		{
			rowNum=0
		}
		else
		{
			rowNum = ws.getLastRowNum()+1;		
		}
		XSSFRow headerRow=ws.createRow(rowNum);
		for(int i=0;i<arrDetail.size;i++)
		{
			headerRow.createCell(i);
			headerRow.getCell(i).setCellStyle(rowStyle);
			headerRow.getCell(i).setCellValue(arrDetail[i]);			
		}
	}
	
	public static XSSFCellStyle getCellStyle(XSSFWorkbook wb,String rowType,boolean errorFlag=false)
	{
		XSSFCellStyle dataStyle = wb.createCellStyle();
		//dataStyle.setWrapText(true);
		if(rowType.equalsIgnoreCase('header'))
		{
			dataStyle.setAlignment(CellStyle.ALIGN_CENTER);
			//headerStyle.setFillForegroundColor(IndexedColors.GREY_50_PERCENT.index);
			//setFillBackgroundColor
			dataStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
			dataStyle.setBorderBottom(CellStyle.BORDER_THICK);
			dataStyle.setBorderLeft(CellStyle.BORDER_THICK);
			dataStyle.setBorderRight(CellStyle.BORDER_THICK);
			dataStyle.setBorderTop(CellStyle.BORDER_THICK);
			if(errorFlag)
			{
				Font font = wb.createFont();
				font.setColor(IndexedColors.RED.getIndex());
				dataStyle.setFont(font);
			}	
		}
		else
		{
			dataStyle.setAlignment(CellStyle.ALIGN_CENTER);
			dataStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
			dataStyle.setBorderBottom(CellStyle.BORDER_THIN);
			dataStyle.setBorderLeft(CellStyle.BORDER_THIN);
			dataStyle.setBorderRight(CellStyle.BORDER_THIN);
			dataStyle.setBorderTop(CellStyle.BORDER_THIN);
			if(errorFlag)
			{
				Font font = wb.createFont();
				font.setColor(IndexedColors.RED.getIndex());
				dataStyle.setFont(font);
			}	
		}
		return dataStyle;
	}
		
	public XSSFWorkbook getOutputWorkbook(strFilePathwithName)
	{
		File file1 = new File(strFilePathwithName);
		XSSFWorkbook O_workbook;
		XSSFSheet result,source,target;
		if(!file1.exists())
		{
			O_workbook = new XSSFWorkbook();
			
			//source = O_workbook.createSheet("API_Data");
			//target = O_workbook.createSheet("DB_Data");
			//result = O_workbook.createSheet("Summary");			
			try
			{
				saveExcelFile(strFilePathwithName,O_workbook)
			}
			catch(Exception e)
			{}
		}
		else
		{
			O_workbook = new XSSFWorkbook(new FileInputStream(new File(strFilePathwithName)));
		}
	
		return O_workbook;
	}
}
context.setProperty("Rt", new Driver_Script())]]></script></con:config></con:testStep><con:testStep type="groovy" name="SetParam" id="e76c02cb-36ac-4b2b-9890-d9bc43af7a41"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;

String fName=testRunner.testCase.getPropertyValue('Config')
File config=new File(fName)
Properties prop=new Properties()

def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
	lib.run(testRunner, context)
	def RT = context.Rt

config.withInputStream
{
	line->
	prop.load(line)
}
//log.info prop['DB_URL']
String resultLocation=prop['ResultLocation']

testRunner.testCase.testSuite.setPropertyValue('EndPoint', prop['EndPoint']);
Date date1 = new Date();
String newDate = date1.format('yyyy/MM/dd');
String newTime = date1.format('hh:mm:ss');
String finalDate=newDate.replace('/','_');
String finalTime= newTime.replace(':','_');
String ResultFolder='Result_'+finalDate+'_'+finalTime
String resLoc=resultLocation+'\\'+ResultFolder
XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
String  summary_File=resLoc+'\\Summary.xlsx';
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
File filePath = new File(resLoc);
boolean b=false
XSSFCell cell
XSSFRow currentrow
if(!filePath.exists())
{
	b=filePath.mkdirs()
}
if(b)
{
	DataFormatter formatter = new DataFormatter();
	String currentcell,cellvalue,token,tcid,eFlag;
	testRunner.testCase.testSuite.setPropertyValue('ResultPath', resLoc);
	testRunner.testCase.testSuite.setPropertyValue('SummaryFile', summary_File);

	O_Summary=RT.getSummaryWorkbook(summary_File);
	File t_data=new File(data_F);
	O_td = new XSSFWorkbook(t_data);
	data_s=O_td.getSheet('TestData');
	int row_cnt=data_s.getLastRowNum()

	testRunner.testCase.testSuite.setPropertyValue('Env', prop['Environment']);
	log.info "Working On Environment ="+prop['Environment']
	log.info "EndPoint For Testing = "+prop['EndPoint']
	log.info "Database URL = "+prop['DB_URL']
	log.info "Result Location = "+prop['ResultLocation']
	
	String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
	config=new File(tName)
	config.withInputStream
	{
		line->
		prop.load(line)
	}
	token=prop['API_TOKEN']
	testRunner.testCase.testSuite.setPropertyValue('token', prop['API_TOKEN']);
	log.info "Token for Test execution = "+prop['API_TOKEN']
}
else
{
	System.exit();
}</script></con:config></con:testStep><con:testStep type="groovy" name="SummaryCreate" id="ad6e4391-b3d9-4cbf-a4d4-15e0ad407688"><con:settings/><con:config><script>import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;

def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt
String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFWorkbook O_Summary=RT.getSummaryWorkbook(summary_File)
XSSFSheet source=O_Summary.getSheet("API_Summary");
String env=testRunner.testCase.testSuite.getPropertyValue('Env')
switch(env)
{
	case "dev-tactical":
			env="DEV"
		break;
	case "int":
			env="INT"
		break;
	case "uat":
			env="UAT"
		break;
	case "P&amp;I DEV":
		env="P&amp;I DEV"
		break;	
}
RT.writeSummarySheet(O_Summary,source,env)
RT.autoSize(source,'0,1')
RT.saveExcelFile(summary_File,O_Summary)</script></con:config></con:testStep><con:properties><con:property><con:name>Config</con:name><con:value>C:\\APITesting\\TradingCertificateTesting\\Config\\config.Properties</con:value></con:property></con:properties></con:testCase><con:testCase id="37aff35c-6191-4947-a3a9-c2a6df7119c7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_ReferenceByTCGroup" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="RefByTradingcertificateGroups" id="95dfc95a-3ca9-45e9-8d5a-dc33a33dddc5"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/tradingcertificateGroups" methodName="ReferenceByTradingcertificateGroups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByTradingcertificateGroups" id="97941379-c7e0-4c02-b2a6-33c967b4e981" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/tradingcertificateGroups</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceByTradingCertificateGroups" id="0e1e5c3e-1754-4f5f-9168-e64e154bf17a"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_GET_ReferenceByTCGroup"))
		tcModuleName="RefByTCGroup"
		
	if(tcModuleName.toString().equals("RefByTCGroup"))
	{
		log.info "Test Execution started for getting Trading Certificate Groups from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["TCGroupId","TCGroupName","TCGroupCode","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			Select Id as TradingCertificateGroupId, Name as TradingCertificateGroupName, GroupCode as TradingCertificateGroupCode
			from ref_Group
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{ 	 	
				row->
				sql_TradingCertificateGroupId=row.TradingCertificateGroupId
				sql_TradingCertificateGroupName=row.TradingCertificateGroupName
				sql_TradingCertificateGroupCode=row.TradingCertificateGroupCode

				log.info "SQL Response is received as =>"+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode
				arrCellVal=[sql_TradingCertificateGroupId,sql_TradingCertificateGroupName,sql_TradingCertificateGroupCode];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			testRunner.testCase.setPropertyValue('token',token)
				
			//API
			testRunner.runTestStepByName('RefByTradingcertificateGroups')
			String req='${RefByTradingcertificateGroups#Response}'
			def response=context.expand(req) 
			def jsonSlurper=new JsonSlurper()

			groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
			httpResponseHeaders = context.testCase.testSteps["RefByTradingcertificateGroups"].testRequest.response.responseHeaders
			httpStatus = httpResponseHeaders["#status#"]
			httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

			log.info "HTTP Status code is received as =>"+httpStatusCode

			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			
			if(httpStatusCode.toString().equals("200"))
			{
				def jsonRes=jsonSlurper.parseText(response)
				size=jsonRes.id.size()
				total_size+=size
				for(int i=0;i&lt;size;i++)
				{
					api_TradingCertificateGroupId=jsonRes.id[i]
					api_TradingCertificateGroupName=jsonRes.name[i]
					api_TradingCertificateGroupCode=jsonRes.groupCode[i]

					log.info "API Response is received as =>"+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode
						
					arrCellVal=[api_TradingCertificateGroupId,api_TradingCertificateGroupName,api_TradingCertificateGroupCode];
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					counter++
				}
			}
			else if(httpStatusCode.toString().equals("401"))
			{
				log.info "Failed API response is received"
				log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
				arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
				RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
			}
			else
			{
				log.info "Failed API response is received"
				log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
				arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
				RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
			}
			
			try
			{
				RT.saveExcelFile(summary_File,O_Summary)
			}
			catch(Exception e)
			{
			  log.info e.getMessage();	
			}
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Trading Certificate Groups with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end</script></con:config></con:testStep><con:properties><con:property><con:name>token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImNuNnRXOElubmRJVzJKVGtqU2tkTlFQakR1UXo3cmMwQ0pEbkpyRlhKVjgifQ.eyJpc3MiOiJodHRwczovL3NoaXBvd25lcnNjb3VrZGV2YjJjLmIyY2xvZ2luLmNvbS81YzJlY2M4OC1kNmNlLTRkNDEtYThhMi05ZTAzMTc0N2M3ZTYvdjIuMC8iLCJleHAiOjE2MjQ5NTYyNDIsIm5iZiI6MTYyNDk1MjY0MiwiYXVkIjoiZTQ4NTNjODItNjhjYS00OTk5LTk3NjAtZmZjODkxODk4NGJhIiwic3ViIjoiNzdmM2YyOGEtZjQ3MS00MTU4LWI4ZTAtNjYwNTY2OTExNGYyIiwiZ3JvdXBzIjpbIlVuZGVyd3JpdGluZyJdLCJzY3AiOiJ0cmFkaW5nLWNlcnRzLnJlYWQiLCJhenAiOiJmZWU1MzQ1MC1kODM0LTRlNDAtYTNhYy05YzJjMjQyZGJiMzAiLCJ2ZXIiOiIxLjAiLCJpYXQiOjE2MjQ5NTI2NDJ9.pjcpBzJTzt6mXNTFpUCygADIZfLMR_-m3L7n6NoqrBqw-axecDgO6xnBv0Xos1CW0SZ6nJDczmMy6T7Op2NYt9OfjMppaYlxaQJ1UazLaVX-9F-BVEzHnBaAnsMD-OAijgyW8kNl-O_e4NMKF8WejMGaPPD_6Vbxy8ezaUDntSYcNhi4b3gjLlv78Vm-py4jQP1GlI2NuUeLEQpgA4rJ-Zw1fHLM7nLH7K_lZ4aR40J9cNj6xvhCDsYzLVkzlZ8mJIsF9BOSFLdnsxR-J4dM__zxBMYXYOynqJrxUUCJkXHzXdk5OPoquSwyX7fQv5NnUMp4OWLY73lp9ppaU1NF4A</con:value></con:property></con:properties></con:testCase><con:testCase id="6098d609-9602-440e-bbb2-9c19b4577314" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_ReferenceByTradingCertificateTypes" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="RefByTradingCertificateTypes" id="a41a8adf-9749-4af9-bb8d-2bf977e721f0"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/tradingCertificateTypes" methodName="ReferenceByTradingCertificateTypes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByTradingCertificateTypes" id="4834d0ff-353d-4c82-a971-63332f818c10" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/tradingCertificateTypes</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="sortAttribute" value="typeCode" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>sortAttribute</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceByTradingCertificateTypes" id="fde06d98-d2b0-4df7-98bd-b2212c675eb5"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_GET_ReferenceByTradingCertificateTypes"))
		tcModuleName="RefByTCType"
		
	if(tcModuleName.toString().equals("RefByTCType"))
	{
		log.info "Test Execution started for getting Trading Certificate Types from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["TCTypeId","TCGroupId","TCGroupName", "TCGroupCode","TCTypeCode","TCTypeName","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			Select 
			T.Id as TradingCertificateTypeId, T.Group_Id as TradingCertificateGroupId, G.Name as TradingCertificateGroupName , G.groupCode, 
			T.TypeCode, T.Name as TradingCertificateTypeName
			from dbo.ref_Type as T
			left join dbo.ref_Group G on G.Id=T.Group_Id
			order by T.TypeCode
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{ 	 	
				row->
				sql_TradingCertificateTypeId=row.TradingCertificateTypeId
				sql_TradingCertificateGroupId=row.TradingCertificateGroupId
				sql_TradingCertificateGroupName=row.TradingCertificateGroupName
				sql_TradingCertificateGroupCode=row.groupCode
				sql_TradingCertificateTypeCode=row.TypeCode
				sql_TradingCertificateTypeName=row.TradingCertificateTypeName

				log.info "SQL Response is received as =>"+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName
				
				arrCellVal=[sql_TradingCertificateTypeId, sql_TradingCertificateGroupId, sql_TradingCertificateGroupName, sql_TradingCertificateGroupCode, sql_TradingCertificateTypeCode, sql_TradingCertificateTypeName];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			testRunner.testCase.setPropertyValue('token',token)
				
			//API
			testRunner.runTestStepByName('RefByTradingCertificateTypes')
			String req='${RefByTradingCertificateTypes#Response}'
			def response=context.expand(req) 
			def jsonSlurper=new JsonSlurper()

			groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
			httpResponseHeaders = context.testCase.testSteps["RefByTradingCertificateTypes"].testRequest.response.responseHeaders
			httpStatus = httpResponseHeaders["#status#"]
			httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			//arrOutputHeader = ["TradingCertificateGroupId","TradingCertificateGroupName", "TradingCertificateGroupCode","Status"];
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			
			if(httpStatusCode.toString().equals("200"))
			{
				def jsonRes=jsonSlurper.parseText(response)
				size=jsonRes.id.size()
				total_size+=size
				for(int i=0;i&lt;size;i++)
				{
					api_TradingCertificateTypeId=jsonRes.id[i]
					api_TradingCertificateGroupId=jsonRes.tradingCertificateGroup[i].id
					api_TradingCertificateGroupName=jsonRes.tradingCertificateGroup[i].name
					api_TradingCertificateGroupCode=jsonRes.tradingCertificateGroup[i].groupCode
					api_TradingCertificateTypeName=jsonRes.typeName[i]
					api_TradingCertificateTypeCode=jsonRes.typeCode[i]

					log.info "API Response is received as =>"+api_TradingCertificateTypeId+","+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode+","+api_TradingCertificateTypeCode+","+api_TradingCertificateTypeName
						
					arrCellVal=[api_TradingCertificateTypeId,api_TradingCertificateGroupId,api_TradingCertificateGroupName,api_TradingCertificateGroupCode,api_TradingCertificateTypeCode,api_TradingCertificateTypeName];
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					counter++
				}
			}
			else if(httpStatusCode.toString().equals("401"))
			{
				log.info "Failed API response is received"
				log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
				arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
				RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
			}
			else
			{
				log.info "Failed API response is received"
				log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
				arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
				RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
			}
			
			try
			{
				RT.saveExcelFile(summary_File,O_Summary)
			}
			catch(Exception e)
			{
			  log.info e.getMessage();	
			}
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Trading Certificate types with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5224170b-14be-4b71-bd2f-a1e34fb4e83d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_Reference​ByTradingCertificateTypes​ByTCGroupCode" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Ref​ByTradingCertificateTypes​ByTCGroupCode" id="d201beb2-35be-499f-820a-2fffb9947061"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/tradingCertificateTypes/${#TestCase#groupCode}" methodName="Reference​ByTradingCertificateTypes​ByTCGroupCode" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Ref​ByTradingCertificateTypes​ByTCGroupCode" id="60b9e02d-c099-459f-8e3b-2e6d2d42d309" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Reference​ByTradingCertificateTypes​ByTCGroupCode" id="705cd290-3f85-49f8-a547-bec9a09d4da8"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_GET_Reference​ByTradingCertificateTypes​ByTCGroupCode"))
		tcModuleName="RefByTCTypeByGroupCode"
	
	if(tcModuleName.toString().equals("RefByTCTypeByGroupCode"))
	{
		log.info "Test Execution started for getting Trading Certificate types by Trading Certificate Groups from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["TCTypeId","TCGroupId", "TCGroupCode", "TCGroupName", "TCTypeCode", "TCName","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			int db_size=0
			int db_endCol=0
			int api_startCol=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));	

			String getGroupCode=
			"""
			SELECT 
			GroupCode 
			from ref_Group
			order by 1 desc
			"""

			con.eachRow(getGroupCode)
			{
				getRows->
				groupCode=getRows.GroupCode

				String sqlstmt=
				"""
				USE tradingcertificate
				SELECT
				RT.Id as TCTypeId, RG.Id as TCGroupId, RG.GroupCode as TCGroupCode, 
				RG.Name as TCGroupName, RT.TypeCode as TCTypeCode, RT.Name as TCTypeName
				from ref_Group RG
				inner join ref_Type RT on RT.Group_Id =RG.ID
				where RG.GroupCode='"""+groupCode+"""'
				order by 6
				"""

				log.info "Checking for Group Code as =>"+groupCode
				
				def rows=con.rows(sqlstmt)  
				//db_size=rows.size
				def arrCellVal;
				arrCellVal=['DB data']
				
				RT.writeDetails(source,0,0,headerStyle,arrCellVal)
				
				headerStyle = RT.getCellStyle(O_Summary,'Header');
				RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
				
				
				def arrData;
				//DB sheet start
				con.eachRow(sqlstmt) 
				{ 
					row->
					sql_TCTypeId=row.TCTypeId
					sql_TCGroupId=row.TCGroupId
					sql_TCGroupName=row.TCGroupName
					sql_TCGroupCode=row.TCGroupCode
					sql_TCTypeCode=row.TCTypeCode
					sql_TCTypeName=row.TCTypeName
	
					log.info "SQL Response is received as =>"+sql_TCTypeId+","+sql_TCGroupId+","+sql_TCGroupName+","+sql_TCGroupCode+","+sql_TCTypeCode+","+sql_TCTypeName
					
					arrCellVal=[sql_TCTypeId, sql_TCGroupId, sql_TCGroupName, sql_TCGroupCode, sql_TCTypeCode, sql_TCTypeName];
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					
					db_size++
					
					counter++
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e) 
					{
						log.info e.toString();
					}
	
				}//sql end
			}
			
			
			
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start
			int recordCount=0

			con.eachRow(getGroupCode)
			{
				getRows->
				groupCode=getRows.GroupCode
				String group=groupCode.toString()

				log.info "Getting api values for =>"+group

				testRunner.testCase.setPropertyValue('token', token)
				testRunner.testCase.setPropertyValue('groupCode', group)
					
				//API
				testRunner.runTestStepByName('Ref​ByTradingCertificateTypes​ByTCGroupCode')
				String req='${Ref​ByTradingCertificateTypes​ByTCGroupCode#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
	
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["Ref​ByTradingCertificateTypes​ByTCGroupCode"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	
				arrCellVal=['API DATA']
				//total_size=0
				RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
				//arrOutputHeader = ["TradingCertificateGroupId","TradingCertificateGroupName", "TradingCertificateGroupCode","Status"];
				RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)

				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)
					size=jsonRes.id.size()
					//total_size+=size
					for(int i=0;i&lt;size;i++)
					{
						api_TCId=jsonRes.id[i]
						api_TCGroupId=jsonRes.tradingCertificateGroup[i].id
						api_TCGroupName=jsonRes.tradingCertificateGroup[i].name
						api_TCGroupCode=jsonRes.tradingCertificateGroup[i].groupCode
						api_TCTypeCode=jsonRes.typeCode[i]
						api_TCTypeName=jsonRes.typeName[i]
		
						log.info "API Response is received as =>"+api_TCId+","+api_TCGroupId+","+api_TCGroupName+","+api_TCGroupCode+","+api_TCTypeCode+","+api_TCTypeName
							
						arrCellVal=[api_TCId, api_TCGroupId, api_TCGroupName, api_TCGroupCode, api_TCTypeCode, api_TCTypeName];
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)

						total_size++
						counter++
					}
					//recordCount=total_size+recordCount//added new
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}
			}
			con.close()	

				//DB compare with API
				int db_startCol=0
				counter=row_start;
				totalColumns = source.getRow(1).getLastCellNum();
				int api_endCol=totalColumns-1
				dsc='Compares API data for Trading Certificate Types as per TC Groups with UTOM Database data'
				tcid=tcModuleName.toString()
				RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
				
		}//inner if end
	}//outer if end
}//outer for end</script></con:config></con:testStep><con:properties><con:property><con:name>groupCode</con:name><con:value>COE</con:value></con:property></con:properties></con:testCase><con:testCase id="f340bbf1-ea05-4857-b4ee-0d4300ff43ce" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_RiskSelectionTradingCertificatesByRiskReference" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="RiskSelectionTradCertsByRiskRef" id="d6c72fd1-0beb-467f-a316-cea84f050075"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/riskSelection/tradingCertificates/${#TestCase#riskReference}" methodName="RiskSelectionTradingCertificatesByRiskReference" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RiskSelectionTradCertsByRiskRef" id="e390b377-cb36-4aad-b9b6-d11439f03da2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/riskSelection/tradingCertificates/99999</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="RiskSelectionTradingCertificatesByRiskReference" id="b1e6d8bd-eb4e-47ff-9c79-898d4ffd744d"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

def api_stateAddressId = api_stateAddressName= api_stateAddressLine1= api_stateAddressLine2= api_stateAddressLine3= api_stateAddressStateOrCounty= api_stateAddressCity= api_stateAddressCountry= api_stateAddressPostCode ="NULL"
def api_stateAddressPrimaryAddress= api_ownerAddressId= api_ownerAddressName= api_ownerAddressLine1= api_ownerAddressLine2= api_ownerAddressLine3= api_ownerAddressStateOrCounty= api_ownerAddressCity= api_ownerAddressCountry= api_ownerAddressPostCode= api_ownerAddressPrimaryAddress= "NULL"
def api_brokerAddressId= api_brokerAddressName= api_brokerAddressLine1= api_brokerAddressLine2= api_brokerAddressLine3= api_brokerAddressStateOrCounty= api_brokerAddressCity= api_brokerAddressCountry= api_brokerAddressPostCode= api_brokerAddressPrimaryAddress= "NULL"
def api_memberAddressId= api_memberAddressName= api_memberAddressLine1= api_memberAddressLine2= api_memberAddressLine3= api_memberAddressStateOrCounty= api_memberAddressCity= api_memberAddressCountry= api_memberAddressPostCode= api_memberAddressPrimaryAddress= "NULL"
def api_jointAssuredAddressId= api_jointAssuredAddressName= api_jointAssuredAddressLine1= api_jointAssuredAddressLine2= api_jointAssuredAddressLine3= api_jointAssuredAddressStateOrCounty= api_jointAssuredAddressCity= api_jointAssuredAddressCountry= api_jointAssuredAddressPostCode= api_jointAssuredAddressPrimaryAddress= "NULL"
def api_branchAddressId= api_branchAddressName= api_branchAddressLine1= api_branchAddressLine2= api_branchAddressLine3= api_branchAddressStateOrCounty= api_branchAddressCity= api_branchAddressCountry= api_branchAddressPostCode= api_branchAddressPrimaryAddress= "NULL"


for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_GET_RiskSelectionTradingCertificatesByRiskReference"))
		tcModuleName="RiskSelection"
	
	if(tcModuleName.toString().equals("RiskSelection"))
	{
		log.info "Test Execution started for getting Trading Certificate details as per risk selection from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["TCId_RiskRef","TCGroupId","TCGroupName","TCGroupCode","RiskReference1","tradingCertificateId","addressTypeId","sourceSystem","reference","currentStatus","storageId","riskId","policyId","memberPartyId","ownerPartyId","brokerPartyId","isRenewal","isYacht","version","riskReference","policyReference","memberReference","memberType","memberName","jointAssuredName","ownerReference","ownerName","ownerDomicile","ownerEmailAddress","brokerReference","brokerName","brokerEmailAddress","policyYear","certificateIssueDate","emailAddress","ccEmailAddress","effectiveStartDate","effectiveEndDate","passengerCapacity","policyStartDate","policyEndDate","currencyCode","coverLimitAmount","signatoryStateId","vesselName","vesselType","vesselTypeName","vesselEnteredDate","vesselFlag","imoNumber","distinctiveNumbersOrLetters","grossTonnage","yearBuilt","engineHorsePower","trademarkAndEngineModel","model","engineNo","nominatedFlagState","nominatedFlagStateName","portOfRegistry","tenderReferenceList","tenderOutboardReferenceList","tradingCertificateTypeId","tradingCertificateGroupId","tradingCertificateGroupName","tradingCertificateGroupCode","tradingCertificateTypeTypeCode","tradingCertificateTypeTypeName","branchCode","tradingCertificatePackId","stateAddressId","stateAddressName","stateAddressLine1","stateAddressLine2","stateAddressLine3","stateAddressStateOrCounty","stateAddressCity","stateAddressCountry","stateAddressPostCode","stateAddressPrimaryAddress","ownerAddressId","ownerAddressName","ownerAddressLine1","ownerAddressLine2","ownerAddressLine3","ownerAddressStateOrCounty","ownerAddressCity","ownerAddressCountry","ownerAddressPostCode","ownerAddressPrimaryAddress","brokerAddressId","brokerAddressName","brokerAddressLine1","brokerAddressLine2","brokerAddressLine3","brokerAddressStateOrCounty","brokerAddressCity","brokerAddressCountry","brokerAddressPostCode","brokerAddressPrimaryAddress","memberAddressId","memberAddressName","memberAddressLine1","memberAddressLine2","memberAddressLine3","memberAddressStateOrCounty","memberAddressCity","memberAddressCountry","memberAddressPostCode","memberAddressPrimaryAddress","jointAssuredAddressId","jointAssuredAddressName","jointAssuredAddressLine1","jointAssuredAddressLine2","jointAssuredAddressLine3","jointAssuredAddressStateOrCounty","jointAssuredAddressCity","jointAssuredAddressCountry","jointAssuredAddressPostCode","jointAssuredAddressPrimaryAddress","branchAddressId","branchAddressName","branchAddressLine1","branchAddressLine2","branchAddressLine3","branchAddressStateOrCounty","branchAddressCity","branchAddressCountry","branchAddressPostCode","branchAddressPrimaryAddress","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			String getRisk=
			"""
			use tradingCertificate
			SELECT
			TOP 10
			TC.RiskReference, TC.Id as TradingCertificateId
			--RG.Id as TCGroupId, RG.Name as GroupName, RG.GroupCode, TC.RiskReference, TC.Id as TradingCertificateId, TC.AddressType_Id,TC.SourceSystem,TC.Reference, TC.CurrentStatus, 
			--TC.StorageId, TC.RiskId, TC.ApplicationRiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId, 
			--case when TC.IsOwner =0 then 'False' when TC.IsOwner =0 then 'True' else NULL end as IsOwner, TC.BrokerContactPartyId,  TC.JointAssuredPartyId, 
			--case when TC.IsRenewal = 1 then 'True'    when TC.IsRenewal = 0 then 'False' else NULL end as IsRenewal,
			--case when TC.IsYacht = 1 then 'True' when TC.IsYacht = 0 then 'False' else NULL end as IsYacht,TC.TradingCertificateVersion as Version,
			--TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,TC.JointAssuredName, TC.OwnerReference,
			--TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,TC.PolicyYear, TC.CertificateIssueDate,
			--TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity, TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,
			--TC.SignatoryState_Id, TC.SignatoryStateAddressId, TC.VesselName,TC.VesselType,TC.VesselTypeName, TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,
			--TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower, TC.TradeMark, TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList,
			--TC.TenderOutboardReferenceList, TC.Type_Id as TradingCertificateTypeId,RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode,
			--RT.TypeCode, RT.Name as TypeName, TC.BranchCode, TC.TradingCertificatePack_Id
			from TradingCertificate TC
			inner join ref_Type RT on RT.Id=TC.Type_Id
			inner join ref_Group RG on RG.Id = RT.Group_Id
			inner join 
			(SELECT riskreference, type_id, max(tradingcertificateversion) as VersionRef FROM [dbo].[TradingCertificate]
			group by  riskreference, type_id) Cvers
			on TC.RiskReference = Cvers.RiskReference and TC.Type_Id = Cvers.Type_Id and TC.TradingCertificateVersion  = Cvers.VersionRef
			left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id and BS.IsDeleted = 0
			inner join 
			(SELECT riskreference, type_id, max(CertificateIssueDate) as IssueDate FROM [dbo].[TradingCertificate]
			group by  riskreference, type_id
			)Cvers1 
			on TC.RiskReference = Cvers.RiskReference and TC.Type_Id = Cvers.Type_Id and TC.CertificateIssueDate  = Cvers1.IssueDate
			where TC.CurrentStatus='Issued'
			order by TC.Id asc, TC.CertificateIssueDate desc
			"""
			String oldRiskRef=null
			con.eachRow(getRisk)
			{
				getRiskRef->
				RiskReference=getRiskRef.RiskReference
				if(oldRiskRef!=RiskReference.toString())	
				{
					String sqlstmt=
					"""
					declare
						@RiskRef as int = '"""+RiskReference+"""'
					SELECT
					RG.Id as TCGroupId, RG.Name as GroupName, RG.GroupCode, TC.RiskReference, TC.Id as TradingCertificateId, TC.AddressType_Id,TC.SourceSystem,TC.Reference, TC.CurrentStatus, 
					TC.StorageId, TC.RiskId, TC.ApplicationRiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId, 
					case when TC.IsOwner =0 then 'FALSE' when TC.IsOwner =0 then 'TRUE' else NULL end as IsOwner, TC.BrokerContactPartyId,  TC.JointAssuredPartyId, 
					case when TC.IsRenewal = 1 then 'TRUE'    when TC.IsRenewal = 0 then 'FALSE' else NULL end as IsRenewal,
					case when TC.IsYacht = 1 then 'TRUE' when TC.IsYacht = 0 then 'FALSE' else NULL end as IsYacht,TC.TradingCertificateVersion as Version,
					TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,TC.JointAssuredName, TC.OwnerReference,
					TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,TC.PolicyYear, TC.CertificateIssueDate,
					TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity, TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,
					TC.SignatoryState_Id, TC.SignatoryStateAddressId, TC.VesselName,TC.VesselType,TC.VesselTypeName, TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,
					TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower, TC.TradeMark, TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList,
					TC.TenderOutboardReferenceList, TC.Type_Id as TradingCertificateTypeId,RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode,
					 RT.TypeCode, RT.Name as TypeName, TC.BranchCode, TC.TradingCertificatePack_Id
					from TradingCertificate TC
					inner join ref_Type RT on RT.Id=TC.Type_Id
					inner join ref_Group RG on RG.Id = RT.Group_Id
					inner join 
					(SELECT riskreference, type_id, max(tradingcertificateversion) as VersionRef
					  FROM [dbo].[TradingCertificate]
					where riskreference = @RiskRef
					group by  riskreference, type_id) Cvers
					on TC.RiskReference = Cvers.RiskReference and TC.Type_Id = Cvers.Type_Id and TC.TradingCertificateVersion  = Cvers.VersionRef
					left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id and BS.IsDeleted = 0
					inner join 
					(SELECT riskreference, type_id, max(CertificateIssueDate) as IssueDate
					  FROM [dbo].[TradingCertificate]
					where riskreference = @RiskRef
					group by  riskreference, type_id
					)Cvers1 
					on TC.RiskReference = Cvers.RiskReference and TC.Type_Id = Cvers.Type_Id and TC.CertificateIssueDate  = Cvers1.IssueDate
					where TC.CurrentStatus='Issued'
					and TC.RiskReference=@RiskRef
					order by TC.Id asc, TC.CertificateIssueDate desc
					"""	
					log.info "Checking for Risk Refernce  =>"+RiskReference
					
					rows=con.rows(sqlstmt) 
					arrCellVal=['DB data']
					
					RT.writeDetails(source,0,0,headerStyle,arrCellVal)
					
					headerStyle = RT.getCellStyle(O_Summary,'Header');
					RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
					
					def arrData;
					//DB sheet start
					con.eachRow(sqlstmt) 
					{ 
						row->
							sql_TCGroupId=row.TCGroupId
							sql_GroupName=row.GroupName
							sql_GroupCode=row.GroupCode
							sql_RiskReference1=row.RiskReference
							sql_RiskReference1=removeComma(sql_RiskReference1.toString())
							sql_TradingCertificateId=row.TradingCertificateId

							String sqlTCid_RiskRef=sql_TradingCertificateId.toString()+"_"+sql_RiskReference1.toString()
							
							sql_AddressType_Id=row.AddressType_Id
							sql_SourceSystem=row.SourceSystem
							sql_Reference=row.Reference
							sql_CurrentStatus=row.CurrentStatus
							sql_StorageId=row.StorageId
							sql_RiskId=row.RiskId
							sql_ApplicationRiskId=row.ApplicationRiskId
							sql_PolicyId=row.PolicyId
							sql_MemberPartyId=row.MemberPartyId
							sql_OwnerPartyId=row.OwnerPartyId
							sql_BrokerPartyId=row.BrokerPartyId
							sql_IsOwner=row.IsOwner
							sql_BrokerContactPartyId=row.BrokerContactPartyId
							sql_JointAssuredPartyId=row.JointAssuredPartyId
							sql_IsRenewal=row.IsRenewal
							sql_IsYacht=row.IsYacht
							sql_Version=row.Version
							sql_RiskReference=row.RiskReference
							sql_PolicyReference=row.PolicyReference
							sql_MemberReference=row.MemberReference
							sql_MemberType=row.MemberType
							sql_MemberName=row.MemberName
							sql_MemberName = removeComma(sql_MemberName.toString())
							sql_JointAssuredName=row.JointAssuredName
							sql_JointAssuredName= removeComma(sql_JointAssuredName.toString())
							sql_OwnerReference=row.OwnerReference
							sql_OwnerName=row.OwnerName
							sql_OwnerName = removeComma(sql_OwnerName.toString())
							sql_OwnerDomicile=row.OwnerDomicile
							sql_OwnerEmailAddress=row.OwnerEmailAddress
							sql_BrokerReference=row.BrokerReference
							sql_BrokerName=row.BrokerName
							sql_BrokerName = removeComma(sql_BrokerName.toString())
							sql_BrokerEmailAddress=row.BrokerEmailAddress
							sql_PolicyYear=row.PolicyYear
							sql_CertificateIssueDate=row.CertificateIssueDate
							if(sql_CertificateIssueDate!=null)
							{
								sql_CertificateIssueDate=sql_CertificateIssueDate.toString().replace(" ", "T")
								sql_CertificateIssueDate=getDate(sql_CertificateIssueDate.toString())
							}
							else 
								sql_CertificateIssueDate="NULL"
							sql_EmailAddress=row.EmailAddress
							sql_CcEmailAddress=row.CcEmailAddress
							sql_EffectiveStartDate=row.EffectiveStartDate
							if(sql_EffectiveStartDate!=null)
							{
								sql_EffectiveStartDate=sql_EffectiveStartDate.toString().replace(" ", "T")
								sql_EffectiveStartDate=getDate(sql_EffectiveStartDate.toString())
							}
							else 
								sql_EffectiveStartDate="NULL"
							sql_EffectiveEndDate=row.EffectiveEndDate
							if(sql_EffectiveEndDate!=null)
							{
								sql_EffectiveEndDate=sql_EffectiveEndDate.toString().replace(" ", "T")
								sql_EffectiveEndDate=getDate(sql_EffectiveEndDate.toString())
							}
							else 
								sql_EffectiveEndDate="NULL"
							sql_PassengerCapacity=row.PassengerCapacity
							sql_PolicyStartDate=row.PolicyStartDate
							if(sql_PolicyStartDate!=null)
							{
								sql_PolicyStartDate=sql_PolicyStartDate.toString().replace(" ", "T")
								sql_PolicyStartDate=getDate(sql_PolicyStartDate.toString())
							}
							else 
								sql_PolicyStartDate="NULL"
							sql_PolicyEndDate=row.PolicyEndDate
							if(sql_PolicyEndDate!=null)
							{
								sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" ", "T")
								sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())
							}
							else 
								sql_PolicyEndDate="NULL"
							sql_CurrencyCode=row.CurrencyCode
							sql_CurrencyCode= removeComma(sql_CurrencyCode.toString())
							sql_CoverLimitAmount=row.CoverLimitAmount
							sql_CoverLimitAmount = removeDotFromCurrency(sql_CoverLimitAmount.toString())
							sql_CoverLimitAmount = removeComma(sql_CoverLimitAmount.toString())
							sql_SignatoryState_Id=row.SignatoryState_Id
							sql_SignatoryStateAddressId=row.SignatoryStateAddressId
							sql_VesselName=row.VesselName
							sql_VesselName = removeComma(sql_VesselName.toString())
							sql_VesselType=row.VesselType
							sql_VesselTypeName=row.VesselTypeName
							sql_vesselEnteredDate=row.vesselEnteredDate
							if(sql_vesselEnteredDate!=null)
							{
								sql_vesselEnteredDate=sql_vesselEnteredDate.toString().replace(" ", "T")
								sql_vesselEnteredDate=getDate(sql_vesselEnteredDate.toString())
							}
							else 
								sql_vesselEnteredDate="NULL"
							sql_vesselFlag=row.vesselFlag
							sql_imoNumber=row.imoNumber
							sql_distinctiveNumbersOrLetters=row.distinctiveNumbersOrLetters
							sql_distinctiveNumbersOrLetters=removeComma(sql_distinctiveNumbersOrLetters.toString())
							sql_grossTonnage=row.grossTonnage
							sql_yearBuilt=row.yearBuilt
							sql_engineHorsePower=row.engineHorsePower
							sql_TradeMark=row.TradeMark
							sql_model=row.model
							sql_engineNo=row.engineNo
							sql_NominatedStateFlag=row.NominatedStateFlag
							sql_NominatedStateFlagName=row.NominatedStateFlagName
							sql_NominatedStateFlagName = removeComma(sql_NominatedStateFlagName.toString())
							sql_portOfRegistry=row.portOfRegistry
							sql_portOfRegistry = removeComma(sql_portOfRegistry.toString())
							sql_TenderReferenceList=row.tenderReferenceList
							sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
							sql_TradingCertificateTypeId=row.TradingCertificateTypeId
							sql_TradingCertificateGroupId=row.TradingCertificateGroupId
							sql_TradingCertificateGroupName=row.TradingCertificateGroupName
							sql_TradingCertificateGroupCode=row.TradingCertificateGroupCode
							sql_TradingCertificateTypeCode=row.TypeCode
							sql_TradingCertificateTypeName=row.TypeName
							sql_BranchCode=row.BranchCode
							sql_TradingCertificatePack_Id=row.TradingCertificatePack_Id
							sql_TradingCertificatePack_Id= removeComma(sql_TradingCertificatePack_Id.toString())
							
							String getStateAddressSQL =
							"""						
							declare
							@riskRef as int ="""+sql_RiskReference+""",
							@tradCertId as int = """+sql_TradingCertificateId+"""
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='SIGNATORYSTATE'
							 and TC.Id=@tradCertId
							 and TC.RiskReference = @riskRef
							 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getStateAddressSQL)
							{
								getRows->
								sql_StateAddressId=getRows.AddressId
								sql_StateAddressId = removeComma(sql_StateAddressId.toString())
								sql_StateAddressName=getRows.AddressName
								sql_StateAddressName = removeComma(sql_StateAddressName.toString())
								sql_StateAddressLine1=getRows.AddressLine1
								sql_StateAddressLine1 = removeComma(sql_StateAddressLine1.toString())
								sql_StateAddressLine2=getRows.AddressLine2
								sql_StateAddressLine2 = removeComma(sql_StateAddressLine2.toString())
								sql_StateAddressLine3=getRows.AddressLine3
								sql_StateAddressLine3 = removeComma(sql_StateAddressLine3.toString())
								sql_StateStateOrCounty=getRows.StateOrCounty
								sql_StateStateOrCounty = removeComma(sql_StateStateOrCounty.toString())
								sql_StateCity=getRows.City
								sql_StateCity = removeComma(sql_StateCity.toString())
								sql_StateCountry=getRows.Country
								sql_StateCountry = removeComma(sql_StateCountry.toString())
								sql_StatePostCode=getRows.PostCode
								sql_StatePostCode = removeComma(sql_StatePostCode.toString())
								sql_StateIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_StateIsPrimaryAddress = removeComma(sql_StateIsPrimaryAddress.toString())
								//log.info "State Address is received as ==> "+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress
							}
						
							String getOwnerAddressSQL =
							"""
							declare
							@riskRef as int ="""+sql_RiskReference+""",
							@tradCertId as int = '"""+sql_TradingCertificateId+"""'
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='OWNER'
							 and TC.Id=@tradCertId
							 and TC.RiskReference = @riskRef
							 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getOwnerAddressSQL)
							{
								getRows->
								sql_OwnerAddressId=getRows.AddressId
								sql_OwnerAddressId = removeComma(sql_OwnerAddressId.toString())
								sql_OwnerAddressName=getRows.AddressName
								sql_OwnerAddressName = removeComma(sql_OwnerAddressName.toString())
								sql_OwnerAddressLine1=getRows.AddressLine1
								sql_OwnerAddressLine1 = removeComma(sql_OwnerAddressLine1.toString())
								sql_OwnerAddressLine2=getRows.AddressLine2
								sql_OwnerAddressLine2 = removeComma(sql_OwnerAddressLine2.toString())
								sql_OwnerAddressLine3=getRows.AddressLine3
								sql_OwnerAddressLine3 = removeComma(sql_OwnerAddressLine3.toString())
								sql_OwnerStateOrCounty=getRows.StateOrCounty
								sql_OwnerStateOrCounty = removeComma(sql_OwnerStateOrCounty.toString())
								sql_OwnerCity=getRows.City
								sql_OwnerCity = removeComma(sql_OwnerCity.toString())
								sql_OwnerCountry=getRows.Country
								sql_OwnerCountry = removeComma(sql_OwnerCountry.toString())
								sql_OwnerPostCode=getRows.PostCode
								sql_OwnerPostCode = removeComma(sql_OwnerPostCode.toString())
								sql_OwnerIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_OwnerIsPrimaryAddress = removeComma(sql_OwnerIsPrimaryAddress.toString())
								//log.info "Owner Address is received as ==> "+sql_OwnerAddressTypeName+","+sql_OwnerAddressTypeId+","+sql_OwnerTradingCertificateId+","+sql_OwnerRiskReference+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressName+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress	
							}
						
							String getBrokerAddressSQL =
							"""
							declare
							@riskRef as int ="""+sql_RiskReference+""",
							@tradCertId as int = '"""+sql_TradingCertificateId+"""'
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='BROKER'
							 and TC.Id=@tradCertId
							 and TC.RiskReference = @riskRef
							 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getBrokerAddressSQL)
							{
								getRows->
								sql_BrokerAddressId=getRows.AddressId
								sql_BrokerAddressId = removeComma(sql_BrokerAddressId.toString())
								sql_BrokerAddressName=getRows.AddressName
								sql_BrokerAddressName = removeComma(sql_BrokerAddressName.toString())
								sql_BrokerAddressLine1=getRows.AddressLine1
								sql_BrokerAddressLine1 = removeComma(sql_BrokerAddressLine1.toString())
								sql_BrokerAddressLine2=getRows.AddressLine2
								sql_BrokerAddressLine2 = removeComma(sql_BrokerAddressLine2.toString())
								sql_BrokerAddressLine3=getRows.AddressLine3
								sql_BrokerAddressLine3 = removeComma(sql_BrokerAddressLine3.toString())
								sql_BrokerStateOrCounty=getRows.StateOrCounty
								sql_BrokerStateOrCounty = removeComma(sql_BrokerStateOrCounty.toString())
								sql_BrokerCity=getRows.City
								sql_BrokerCity = removeComma(sql_BrokerCity.toString())
								sql_BrokerCountry=getRows.Country
								sql_BrokerCountry = removeComma(sql_BrokerCountry.toString())
								sql_BrokerPostCode=getRows.PostCode
								sql_BrokerPostCode = removeComma(sql_BrokerPostCode.toString())
								sql_BrokerIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_BrokerIsPrimaryAddress = removeComma(sql_BrokerIsPrimaryAddress.toString())
								//log.info "Broker Address is received as ==> "+sql_BrokerAddressTypeName+","+sql_BrokerAddressTypeId+","+sql_BrokerTradingCertificateId+","+sql_BrokerRiskReference+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressName+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress	
							}
						
								String getMemberAddressSQL =
							"""
							declare
							@riskRef as int ="""+sql_RiskReference+""",
							@tradCertId as int = """+sql_TradingCertificateId+"""
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='MEMBER'
							 and TC.Id=@tradCertId
							 and TC.RiskReference = @riskRef
							 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getMemberAddressSQL)
							{
								getRows->
								sql_MemberAddressId=getRows.AddressId
								sql_MemberAddressId = removeComma(sql_MemberAddressId.toString())
								sql_MemberAddressName=getRows.AddressName
								sql_MemberAddressName = removeComma(sql_MemberAddressName.toString())
								sql_MemberAddressLine1=getRows.AddressLine1
								sql_MemberAddressLine1 = removeComma(sql_MemberAddressLine1.toString())
								sql_MemberAddressLine2=getRows.AddressLine2
								sql_MemberAddressLine2 = removeComma(sql_MemberAddressLine2.toString())
								sql_MemberAddressLine3=getRows.AddressLine3
								sql_MemberAddressLine3 = removeComma(sql_MemberAddressLine3.toString())
								sql_MemberStateOrCounty=getRows.StateOrCounty
								sql_MemberStateOrCounty = removeComma(sql_MemberStateOrCounty.toString())
								sql_MemberCity=getRows.City
								sql_MemberCity = removeComma(sql_MemberCity.toString())
								sql_MemberCountry=getRows.Country
								sql_MemberCountry = removeComma(sql_MemberCountry.toString())
								sql_MemberPostCode=getRows.PostCode
								sql_MemberPostCode = removeComma(sql_MemberPostCode.toString())
								sql_MemberIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_MemberIsPrimaryAddress = removeComma(sql_MemberIsPrimaryAddress.toString())
								//log.info "Member Address is received as ==> "+sql_MemberAddressTypeName+","+sql_MemberAddressTypeId+","+sql_MemberTradingCertificateId+","+sql_MemberRiskReference+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressName+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress	
							}
							String getJointAssuredAddressSQL =
							"""
							declare
							@riskRef as int ="""+sql_RiskReference+""",
							@tradCertId as int = """+sql_TradingCertificateId+"""
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='JOINTASSURED'
							and TC.Id=@tradCertId
							and TC.RiskReference = @riskRef
							union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getJointAssuredAddressSQL)
							{
								getRows->
								sql_JointAssuredAddressId=getRows.AddressId
								sql_JointAssuredAddressId = removeComma(sql_JointAssuredAddressId.toString())
								sql_JointAssuredAddressName=getRows.AddressName
								sql_JointAssuredAddressName = removeComma(sql_JointAssuredAddressName.toString())
								sql_JointAssuredAddressLine1=getRows.AddressLine1
								sql_JointAssuredAddressLine1 = removeComma(sql_JointAssuredAddressLine1.toString())
								sql_JointAssuredAddressLine2=getRows.AddressLine2
								sql_JointAssuredAddressLine2 = removeComma(sql_JointAssuredAddressLine2.toString())
								sql_JointAssuredAddressLine3=getRows.AddressLine3
								sql_JointAssuredAddressLine3 = removeComma(sql_JointAssuredAddressLine3.toString())
								sql_JointAssuredStateOrCounty=getRows.StateOrCounty
								sql_JointAssuredStateOrCounty = removeComma(sql_JointAssuredStateOrCounty.toString())
								sql_JointAssuredCity=getRows.City
								sql_JointAssuredCity = removeComma(sql_JointAssuredCity.toString())
								sql_JointAssuredCountry=getRows.Country
								sql_JointAssuredCountry = removeComma(sql_JointAssuredCountry.toString())
								sql_JointAssuredPostCode=getRows.PostCode
								sql_JointAssuredPostCode = removeComma(sql_JointAssuredPostCode.toString())
								sql_JointAssuredIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_JointAssuredIsPrimaryAddress = removeComma(sql_JointAssuredIsPrimaryAddress.toString())
								//log.info "JointAssured Address is received as ==> "+sql_JointAssuredAddressTypeName+","+sql_JointAssuredAddressTypeId+","+sql_JointAssuredTradingCertificateId+","+sql_JointAssuredRiskReference+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressName+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress	
							}
						
							String getBranchAddressSQL =
							"""
							declare
							@riskRef as int ="""+sql_RiskReference+""",
							@tradCertId as int = """+sql_TradingCertificateId+"""
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='BRANCH'
							and TC.Id=@tradCertId
							and TC.RiskReference = @riskRef
							union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getBranchAddressSQL)
							{
								getRows->
								sql_BranchAddressId=getRows.AddressId
								sql_BranchAddressId = removeComma(sql_BranchAddressId.toString())
								sql_BranchAddressName=getRows.AddressName
								sql_BranchAddressName = removeComma(sql_BranchAddressName.toString())
								sql_BranchAddressLine1=getRows.AddressLine1
								sql_BranchAddressLine1 = removeComma(sql_BranchAddressLine1.toString())
								sql_BranchAddressLine2=getRows.AddressLine2
								sql_BranchAddressLine2 = removeComma(sql_BranchAddressLine2.toString())
								sql_BranchAddressLine3=getRows.AddressLine3
								sql_BranchAddressLine3 = removeComma(sql_BranchAddressLine3.toString())
								sql_BranchStateOrCounty=getRows.StateOrCounty
								sql_BranchStateOrCounty = removeComma(sql_BranchStateOrCounty.toString())
								sql_BranchCity=getRows.City
								sql_BranchCity = removeComma(sql_BranchCity.toString())
								sql_BranchCountry=getRows.Country
								sql_BranchCountry = removeComma(sql_BranchCountry.toString())
								sql_BranchPostCode=getRows.PostCode
								sql_BranchPostCode = removeComma(sql_BranchPostCode.toString())
								sql_BranchIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_BranchIsPrimaryAddress = removeComma(sql_BranchIsPrimaryAddress.toString())
								//log.info "Branch Address is received as ==> "+sql_BranchAddressTypeName+","+sql_BranchAddressTypeId+","+sql_BranchTradingCertificateId+","+sql_BranchRiskReference+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressName+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress	
							}
			
							log.info "SQL Response is received as =>"+sqlTCid_RiskRef+","+sql_TCGroupId+","+sql_GroupName+","+sql_GroupCode+","+sql_RiskReference1+","+sql_TradingCertificateId+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressLine3+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressLine3+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressLine3+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressLine3+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressLine3+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressLine3+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress+","+sql_BranchCode+","+sql_TradingCertificatePack_Id
							arrCellVal=[sqlTCid_RiskRef,sql_TCGroupId,sql_GroupName,sql_GroupCode,sql_RiskReference1,sql_TradingCertificateId,sql_AddressType_Id,sql_SourceSystem,sql_Reference,sql_CurrentStatus,sql_StorageId,sql_RiskId,sql_PolicyId,sql_MemberPartyId,sql_OwnerPartyId,sql_BrokerPartyId,sql_IsRenewal,sql_IsYacht,sql_Version,sql_RiskReference,sql_PolicyReference,sql_MemberReference,sql_MemberType,sql_MemberName,sql_JointAssuredName,sql_OwnerReference,sql_OwnerName,sql_OwnerDomicile,sql_OwnerEmailAddress,sql_BrokerReference,sql_BrokerName,sql_BrokerEmailAddress,sql_PolicyYear,sql_CertificateIssueDate,sql_EmailAddress,sql_CcEmailAddress,sql_EffectiveStartDate,sql_EffectiveEndDate,sql_PassengerCapacity,sql_PolicyStartDate,sql_PolicyEndDate,sql_CurrencyCode,sql_CoverLimitAmount,sql_SignatoryState_Id,sql_VesselName,sql_VesselType,sql_VesselTypeName,sql_vesselEnteredDate,sql_vesselFlag,sql_imoNumber,sql_distinctiveNumbersOrLetters,sql_grossTonnage,sql_yearBuilt,sql_engineHorsePower,sql_TradeMark,sql_model,sql_engineNo,sql_NominatedStateFlag,sql_NominatedStateFlagName,sql_portOfRegistry,sql_TenderReferenceList,sql_TenderOutboardReferenceList,sql_TradingCertificateTypeId,sql_TradingCertificateGroupId,sql_TradingCertificateGroupName,sql_TradingCertificateGroupCode,sql_TradingCertificateTypeCode,sql_TradingCertificateTypeName,sql_BranchCode,sql_TradingCertificatePack_Id,sql_StateAddressId,sql_StateAddressName,sql_StateAddressLine1,sql_StateAddressLine2,sql_StateAddressLine3,sql_StateStateOrCounty,sql_StateCity,sql_StateCountry,sql_StatePostCode,sql_StateIsPrimaryAddress,sql_OwnerAddressId,sql_OwnerAddressName,sql_OwnerAddressLine1,sql_OwnerAddressLine2,sql_OwnerAddressLine3,sql_OwnerStateOrCounty,sql_OwnerCity,sql_OwnerCountry,sql_OwnerPostCode,sql_OwnerIsPrimaryAddress,sql_BrokerAddressId,sql_BrokerAddressName,sql_BrokerAddressLine1,sql_BrokerAddressLine2,sql_BrokerAddressLine3,sql_BrokerStateOrCounty,sql_BrokerCity,sql_BrokerCountry,sql_BrokerPostCode,sql_BrokerIsPrimaryAddress,sql_MemberAddressId,sql_MemberAddressName,sql_MemberAddressLine1,sql_MemberAddressLine2,sql_MemberAddressLine3,sql_MemberStateOrCounty,sql_MemberCity,sql_MemberCountry,sql_MemberPostCode,sql_MemberIsPrimaryAddress,sql_JointAssuredAddressId,sql_JointAssuredAddressName,sql_JointAssuredAddressLine1,sql_JointAssuredAddressLine2,sql_JointAssuredAddressLine3,sql_JointAssuredStateOrCounty,sql_JointAssuredCity,sql_JointAssuredCountry,sql_JointAssuredPostCode,sql_JointAssuredIsPrimaryAddress,sql_BranchAddressId,sql_BranchAddressName,sql_BranchAddressLine1,sql_BranchAddressLine2,sql_BranchAddressLine3,sql_BranchStateOrCounty,sql_BranchCity,sql_BranchCountry,sql_BranchPostCode,sql_BranchIsPrimaryAddress];
							RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
							db_size++
							counter++

							try
							{
								RT.saveExcelFile(summary_File,O_Summary)
							}
							catch(Exception e) 
							{
								log.info e.toString();
							}
					}//sql end
					oldRiskRef=RiskReference.toString()
				}
			}
			
			totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start
			oldRiskRef=null

			con.eachRow(getRisk)
			{
				getRiskRef->
				RiskReference=getRiskRef.RiskReference
				TradingCertificateId=getRiskRef.TradingCertificateId
				
				if(oldRiskRef!=RiskReference.toString())	
				{
					log.info "Getting api values for Risk Reference =>"+RiskReference
					testRunner.testCase.setPropertyValue('riskReference',RiskReference.toString())
					testRunner.testCase.setPropertyValue('token',token)
						
					//API
					testRunner.runTestStepByName('RiskSelectionTradCertsByRiskRef')
					String req='${RiskSelectionTradCertsByRiskRef#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["RiskSelectionTradCertsByRiskRef"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		
					arrCellVal=['API DATA']
					RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
					RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
					log.info "Original API response is =>"+response
					log.info "HTTP Status code received as =>"+httpStatusCode
					
					if(httpStatusCode.toString().equals("200"))
					{
						def json=jsonSlurper.parseText(response)	
						size=json.tradingCertificates.id.size()
	
						//log.info "DB Risk Reference->"+RiskReference.toString()
						String riskRef=json.riskReference
						riskRef=removeComma(riskRef.toString())
						//log.info "API Risk Reference->"+riskRef
	
						for (int k=0; k<json.riskReference.size(); k++)
						{
							for (int i=0; i<json.tradingCertificates.size(); i++)
							{
								//int tcIdCount = json.tradingCertificates[i].id.size().toInteger()
								for (int j=0; j<json.tradingCertificates[i].id.size(); j++)
								{
									log.info "API value for TCID->"+json.tradingCertificates[i].id[j].toString()
									log.info "DB  value for TCID->"+TradingCertificateId.toString()
									
									//if(json.tradingCertificates[i].id[j].toString().equals(TradingCertificateId.toString()))
										//{
										api_TCGroupId= json.id[k]
										api_TCGroupName= json.name[k]
										api_TCGroupCode= json.groupCode[k]
										api_TCGroupCode= removeComma(api_TCGroupCode.toString())
										api_RiskReference1= json.riskReference[k]
										api_RiskReference1= removeComma(api_RiskReference1.toString())
										api_tradingCertificateId =  json.tradingCertificates[i].id[j]
										
										String api_TcId_riskRef=api_tradingCertificateId.toString()+"_"+api_RiskReference1.toString()
										
										api_addressTypeId =  json.tradingCertificates[i].addressTypeId[j]
										api_sourceSystem =  json.tradingCertificates[i].sourceSystem[j]
										api_sourceSystem= removeComma(api_sourceSystem.toString())
										api_reference =  json.tradingCertificates[i].reference[j]
										api_reference= removeComma(api_reference.toString())
										api_currentStatus =  json.tradingCertificates[i].currentStatus[j]
										api_currentStatus= removeComma(api_currentStatus.toString())
										api_storageId =  json.tradingCertificates[i].storageId[j]
										api_riskId =  json.tradingCertificates[i].riskId[j]
										api_policyId =  json.tradingCertificates[i].policyId[j]
										api_memberPartyId =  json.tradingCertificates[i].memberPartyId[j]
										api_ownerPartyId =  json.tradingCertificates[i].ownerPartyId[j]
										api_brokerPartyId =  json.tradingCertificates[i].brokerPartyId[j]
										api_isRenewal =  json.tradingCertificates[i].isRenewal[j]
										api_isRenewal= removeComma(api_isRenewal.toString())
										api_isYacht =  json.tradingCertificates[i].isYacht[j]
										api_isYacht= removeComma(api_isYacht.toString())
										api_version =  json.tradingCertificates[i].version[j]
										api_riskReference =  json.tradingCertificates[i].riskReference[j]
										api_policyReference =  json.tradingCertificates[i].policyReference[j]
										api_memberReference =  json.tradingCertificates[i].memberReference[j]
										api_memberType =  json.tradingCertificates[i].memberType[j]
										api_memberName =  json.tradingCertificates[i].memberName[j]
										api_memberName=  removeComma(api_memberName.toString())
										api_jointAssuredName =  json.tradingCertificates[i].jointAssuredName[j]
										api_jointAssuredName=  removeComma(api_jointAssuredName.toString())
										api_ownerReference =  json.tradingCertificates[i].ownerReference[j]
										api_ownerName =  json.tradingCertificates[i].ownerName[j]
										api_ownerName=  removeComma(api_ownerName.toString())
										api_ownerDomicile =  json.tradingCertificates[i].ownerDomicile[j]
										api_ownerEmailAddress =  json.tradingCertificates[i].ownerEmailAddress[j]
										api_brokerReference =  json.tradingCertificates[i].brokerReference[j]
										api_brokerName =  json.tradingCertificates[i].brokerName[j]
										api_brokerName=  removeComma(api_brokerName.toString())
										api_brokerEmailAddress =  json.tradingCertificates[i].brokerEmailAddress[j]
										api_policyYear =  json.tradingCertificates[i].policyYear[j]
										api_certificateIssueDate =  json.tradingCertificates[i].certificateIssueDate[j]
										if(api_certificateIssueDate!=null)
										{
											//api_certificateIssueDate=api_certificateIssueDate.toString().replace(" ", "T")
											api_certificateIssueDate=getDate(api_certificateIssueDate.toString())
											api_certificateIssueDate=removeComma(api_certificateIssueDate.toString())
										}
										else 
											api_certificateIssueDate="NULL"
										api_emailAddress =  json.tradingCertificates[i].emailAddress[j]
										api_ccEmailAddress =  json.tradingCertificates[i].ccEmailAddress[j]
										api_effectiveStartDate =  json.tradingCertificates[i].effectiveStartDate[j]
										if(api_effectiveStartDate!=null)
										{
											//api_effectiveStartDate=api_effectiveStartDate.toString().replace(" ", "T")
											api_effectiveStartDate=getDate(api_effectiveStartDate.toString())
											api_effectiveStartDate=removeComma(api_effectiveStartDate.toString())
										}
										else 
											api_effectiveStartDate="NULL"
										api_effectiveEndDate=  json.tradingCertificates[i].effectiveEndDate[j]
										if(api_effectiveEndDate!=null)
										{
											//api_effectiveEndDate=api_effectiveEndDate.toString().replace(" ", "T")
											api_effectiveEndDate=getDate(api_effectiveEndDate.toString())
											api_effectiveEndDate=removeComma(api_effectiveEndDate.toString())
										}
										else 
											api_effectiveEndDate="NULL"
										api_passengerCapacity =  json.tradingCertificates[i].passengerCapacity[j]
										api_policyStartDate =  json.tradingCertificates[i].policyStartDate[j]
										if(api_policyStartDate!=null)
										{
											//api_policyStartDate=api_policyStartDate.toString().replace(" ", "T")
											api_policyStartDate=getDate(api_policyStartDate.toString())
											api_policyStartDate=removeComma(api_policyStartDate.toString())
										}
										else 
											api_policyStartDate="NULL"
										api_policyEndDate =  json.tradingCertificates[i].policyEndDate[j]
										if(api_policyEndDate!=null)
										{
											//api_policyEndDate=api_policyEndDate.toString().replace(" ", "T")
											api_policyEndDate=getDate(api_policyEndDate.toString())
											api_policyEndDate=removeComma(api_policyEndDate.toString())
										}
										else 
											api_policyEndDate="NULL"
										api_currencyCode =  json.tradingCertificates[i].currencyCode[j]
										api_currencyCode= removeComma(api_currencyCode.toString())
										api_coverLimitAmount =  json.tradingCertificates[i].coverLimitAmount[j]
										api_coverLimitAmount =  removeDotFromCurrency(api_coverLimitAmount.toString())
										api_coverLimitAmount= removeComma(api_coverLimitAmount.toString())
										api_signatoryStateId =  json.tradingCertificates[i].signatoryStateId[j]
										api_vesselName =  json.tradingCertificates[i].vesselName[j]
										api_vesselName=  removeComma(api_vesselName.toString())
										api_vesselType =  json.tradingCertificates[i].vesselType[j]
										api_vesselType= removeComma(api_vesselType.toString())
										api_vesselTypeName =  json.tradingCertificates[i].vesselTypeName[j]
										api_vesselTypeName= removeComma(api_vesselTypeName.toString())
										api_vesselEnteredDate =  json.tradingCertificates[i].vesselEnteredDate[j]
										if(api_vesselEnteredDate!=null)
										{
											//api_vesselEnteredDate=api_vesselEnteredDate.toString().replace(" ", "T")
											api_vesselEnteredDate=getDate(api_vesselEnteredDate.toString())
											api_vesselEnteredDate=removeComma(api_vesselEnteredDate.toString())
										}
										else 
											api_vesselEnteredDate="NULL"
										api_vesselFlag =  json.tradingCertificates[i].vesselFlag[j]
										api_vesselFlag= removeComma(api_vesselFlag.toString())
										api_imoNumber =  json.tradingCertificates[i].imoNumber[j]
										api_distinctiveNumbersOrLetters =  json.tradingCertificates[i].distinctiveNumbersOrLetters[j]
										api_distinctiveNumbersOrLetters= removeComma(api_distinctiveNumbersOrLetters.toString())
										api_grossTonnage =  json.tradingCertificates[i].grossTonnage[j]
										api_yearBuilt =  json.tradingCertificates[i].yearBuilt[j]
										api_engineHorsePower =  json.tradingCertificates[i].engineHorsePower[j]
										api_trademarkAndEngineModel =  json.tradingCertificates[i].trademarkAndEngineModel[j]
										api_model =  json.tradingCertificates[i].model[j]
										api_engineNo =  json.tradingCertificates[i].engineNo[j]
										api_nominatedFlagState =  json.tradingCertificates[i].nominatedFlagState[j]
										api_nominatedFlagState= removeComma(api_nominatedFlagState.toString())
										api_nominatedFlagStateName =  json.tradingCertificates[i].nominatedFlagStateName[j]
										api_nominatedFlagStateName =  removeComma(api_nominatedFlagStateName.toString())
										api_portOfRegistry =  json.tradingCertificates[i].portOfRegistry[j]
										api_portOfRegistry =  removeComma(api_portOfRegistry.toString())
										api_tenderReferenceList =  json.tradingCertificates[i].tenderReferenceList[j]
										api_tenderOutboardReferenceList =  json.tradingCertificates[i].tenderOutboardReferenceList[j]
										api_tradingCertificateTypeId =  json.tradingCertificates[i].tradingCertificateType.id[j]
										api_tradingCertificateGroupId =  json.tradingCertificates[i].tradingCertificateType.tradingCertificateGroup.id[j]
										api_tradingCertificateGroupName =  json.tradingCertificates[i].tradingCertificateType.tradingCertificateGroup.name[j]
										api_tradingCertificateGroupCode =  json.tradingCertificates[i].tradingCertificateType.tradingCertificateGroup.groupCode[j]
										api_tradingCertificateTypeTypeCode =  json.tradingCertificates[i].tradingCertificateType.typeCode[j]
										api_tradingCertificateTypeTypeName =  json.tradingCertificates[i].tradingCertificateType.typeName[j]
										api_branchCode= json.tradingCertificates[i].branchCode[j]
										api_tradingCertificatePackId= json.tradingCertificates[i].tradingCertificatePackId[j]
										api_tradingCertificatePackId =  removeComma(api_tradingCertificatePackId.toString())
										api_stateAddress=json.tradingCertificates[i].stateAddress[j]
										api_stateAddress=removeComma(api_stateAddress.toString())
										api_ownerAddress=json.tradingCertificates[i].ownerAddress[j]
										api_ownerAddress=removeComma(api_ownerAddress.toString())
										api_brokerAddress=json.tradingCertificates[i].brokerAddress[j]
										api_brokerAddress=removeComma(api_brokerAddress.toString())
										api_memberAddress=json.tradingCertificates[i].memberAddress[j]
										api_memberAddress=removeComma(api_memberAddress.toString())
										api_jointAssuredAddress=json.tradingCertificates[i].jointAssuredAddress[j]
										api_jointAssuredAddress=removeComma(api_jointAssuredAddress.toString())
										api_branchAddress=json.tradingCertificates[i].branchAddress[j]
										api_branchAddress=removeComma(api_branchAddress.toString())
		
										if(!api_stateAddress.toString().equals("NULL"))
										{
											api_stateAddressId= json.tradingCertificates[i].stateAddress[j].id
											api_stateAddressId= removeComma(api_stateAddressId.toString())
											api_stateAddressName= json.tradingCertificates[i].stateAddress[j].addressName
											api_stateAddressName= removeComma(api_stateAddressName.toString())
											api_stateAddressLine1= json.tradingCertificates[i].stateAddress[j].addressLine1
											api_stateAddressLine1= removeComma(api_stateAddressLine1.toString())
											api_stateAddressLine2= json.tradingCertificates[i].stateAddress[j].addressLine2
											api_stateAddressLine2= removeComma(api_stateAddressLine2.toString())
											api_stateAddressLine3= json.tradingCertificates[i].stateAddress[j].addressLine3
											api_stateAddressLine3= removeComma(api_stateAddressLine3.toString())
											api_stateAddressStateOrCounty= json.tradingCertificates[i].stateAddress[j].stateOrCounty
											api_stateAddressStateOrCounty= removeComma(api_stateAddressStateOrCounty.toString())
											api_stateAddressCity= json.tradingCertificates[i].stateAddress[j].city
											api_stateAddressCity= removeComma(api_stateAddressCity.toString())
											api_stateAddressCountry= json.tradingCertificates[i].stateAddress[j].country
											api_stateAddressCountry= removeComma(api_stateAddressCountry.toString())
											api_stateAddressPostCode= json.tradingCertificates[i].stateAddress[j].postCode
											api_stateAddressPostCode= removeComma(api_stateAddressPostCode.toString())
											api_stateAddressPrimaryAddress= json.tradingCertificates[i].stateAddress[j].primaryAddress
											api_stateAddressPrimaryAddress= removeComma(api_stateAddressPrimaryAddress.toString())
											//log.info "state Address is :"+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress
										}
										else if(api_stateAddress.toString().equals("NULL"))
										{
											api_stateAddressId= "NULL"
											api_stateAddressName= "NULL"
											api_stateAddressLine1= "NULL"
											api_stateAddressLine2= "NULL"
											api_stateAddressLine3= "NULL"
											api_stateAddressStateOrCounty= "NULL"
											api_stateAddressCity= "NULL"
											api_stateAddressCountry= "NULL"
											api_stateAddressPostCode= "NULL"
											api_stateAddressPrimaryAddress= "NULL"
										}
										if(!api_ownerAddress.toString().equals("NULL"))
										{
											api_ownerAddressId= json.tradingCertificates[i].ownerAddress[j].id
											api_ownerAddressId= removeComma(api_ownerAddressId.toString())
											api_ownerAddressName= json.tradingCertificates[i].ownerAddress[j].addressName
											api_ownerAddressName= removeComma(api_ownerAddressName.toString())
											api_ownerAddressLine1= json.tradingCertificates[i].ownerAddress[j].addressLine1
											api_ownerAddressLine1= removeComma(api_ownerAddressLine1.toString())
											api_ownerAddressLine2= json.tradingCertificates[i].ownerAddress[j].addressLine2
											api_ownerAddressLine2= removeComma(api_ownerAddressLine2.toString())
											api_ownerAddressLine3= json.tradingCertificates[i].ownerAddress[j].addressLine3
											api_ownerAddressLine3= removeComma(api_ownerAddressLine3.toString())
											api_ownerAddressStateOrCounty= json.tradingCertificates[i].ownerAddress[j].stateOrCounty
											api_ownerAddressStateOrCounty= removeComma(api_ownerAddressStateOrCounty.toString())
											api_ownerAddressCity= json.tradingCertificates[i].ownerAddress[j].city
											api_ownerAddressCity= removeComma(api_ownerAddressCity.toString())
											api_ownerAddressCountry= json.tradingCertificates[i].ownerAddress[j].country
											api_ownerAddressCountry= removeComma(api_ownerAddressCountry.toString())
											api_ownerAddressPostCode= json.tradingCertificates[i].ownerAddress[j].postCode
											api_ownerAddressPostCode= removeComma(api_ownerAddressPostCode.toString())
											api_ownerAddressPrimaryAddress= json.tradingCertificates[i].ownerAddress[j].primaryAddress
											api_ownerAddressPrimaryAddress= removeComma(api_ownerAddressPrimaryAddress.toString())
											//log.info "Owner Address is :"+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress
										}
										else if(api_ownerAddress.toString().equals("NULL"))
										{
											api_ownerAddressId= "NULL"
											api_ownerAddressName= "NULL"
											api_ownerAddressLine1= "NULL"
											api_ownerAddressLine2= "NULL"
											api_ownerAddressLine3= "NULL"
											api_ownerAddressStateOrCounty= "NULL"
											api_ownerAddressCity= "NULL"
											api_ownerAddressCountry= "NULL"
											api_ownerAddressPostCode= "NULL"
											api_ownerAddressPrimaryAddress= "NULL"
										}
										if(!api_brokerAddress.toString().equals("NULL"))
										{
											api_brokerAddressId= json.tradingCertificates[i].brokerAddress[j].id
											api_brokerAddressId= removeComma(api_brokerAddressId.toString())
											api_brokerAddressName= json.tradingCertificates[i].brokerAddress[j].addressName
											api_brokerAddressName= removeComma(api_brokerAddressName.toString())
											api_brokerAddressLine1= json.tradingCertificates[i].brokerAddress[j].addressLine1
											api_brokerAddressLine1= removeComma(api_brokerAddressLine1.toString())
											api_brokerAddressLine2= json.tradingCertificates[i].brokerAddress[j].addressLine2
											api_brokerAddressLine2= removeComma(api_brokerAddressLine2.toString())
											api_brokerAddressLine3= json.tradingCertificates[i].brokerAddress[j].addressLine3
											api_brokerAddressLine3= removeComma(api_brokerAddressLine3.toString())
											api_brokerAddressStateOrCounty= json.tradingCertificates[i].brokerAddress[j].stateOrCounty
											api_brokerAddressStateOrCounty= removeComma(api_brokerAddressStateOrCounty.toString())
											api_brokerAddressCity= json.tradingCertificates[i].brokerAddress[j].city
											api_brokerAddressCity= removeComma(api_brokerAddressCity.toString())
											api_brokerAddressCountry= json.tradingCertificates[i].brokerAddress[j].country
											api_brokerAddressCountry= removeComma(api_brokerAddressCountry.toString())
											api_brokerAddressPostCode= json.tradingCertificates[i].brokerAddress[j].postCode
											api_brokerAddressPostCode= removeComma(api_brokerAddressPostCode.toString())
											api_brokerAddressPrimaryAddress= json.tradingCertificates[i].brokerAddress[j].primaryAddress
											api_brokerAddressPrimaryAddress= removeComma(api_brokerAddressPrimaryAddress.toString())
											//log.info "Broker Address is :"+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress
										}
										else if(api_brokerAddress.toString().equals("NULL"))
										{
											api_brokerAddressId= "NULL"
											api_brokerAddressName= "NULL"
											api_brokerAddressLine1= "NULL"
											api_brokerAddressLine2= "NULL"
											api_brokerAddressLine3= "NULL"
											api_brokerAddressStateOrCounty= "NULL"
											api_brokerAddressCity= "NULL"
											api_brokerAddressCountry= "NULL"
											api_brokerAddressPostCode= "NULL"
											api_brokerAddressPrimaryAddress= "NULL"
										}
		
										if(!api_memberAddress.toString().equals("NULL"))
										{
											api_memberAddressId= json.tradingCertificates[i].memberAddress[j].id
											api_memberAddressId= removeComma(api_memberAddressId.toString())
											api_memberAddressName= json.tradingCertificates[i].memberAddress[j].addressName
											api_memberAddressName= removeComma(api_memberAddressName.toString())
											api_memberAddressLine1= json.tradingCertificates[i].memberAddress[j].addressLine1
											api_memberAddressLine1= removeComma(api_memberAddressLine1.toString())
											api_memberAddressLine2= json.tradingCertificates[i].memberAddress[j].addressLine2
											api_memberAddressLine2= removeComma(api_memberAddressLine2.toString())
											api_memberAddressLine3= json.tradingCertificates[i].memberAddress[j].addressLine3
											api_memberAddressLine3= removeComma(api_memberAddressLine3.toString())
											api_memberAddressStateOrCounty= json.tradingCertificates[i].memberAddress[j].stateOrCounty
											api_memberAddressStateOrCounty= removeComma(api_memberAddressStateOrCounty.toString())
											api_memberAddressCity= json.tradingCertificates[i].memberAddress[j].city
											api_memberAddressCity= removeComma(api_memberAddressCity.toString())
											api_memberAddressCountry= json.tradingCertificates[i].memberAddress[j].country
											api_memberAddressCountry= removeComma(api_memberAddressCountry.toString())
											api_memberAddressPostCode= json.tradingCertificates[i].memberAddress[j].postCode
											api_memberAddressPostCode= removeComma(api_memberAddressPostCode.toString())
											api_memberAddressPrimaryAddress= json.tradingCertificates[i].memberAddress[j].primaryAddress
											api_memberAddressPrimaryAddress= removeComma(api_memberAddressPrimaryAddress.toString())
											//log.info "Member Address is :"+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress
										}
										else if(api_memberAddress.toString().equals("NULL"))
										{
											api_memberAddressId= "NULL"
											api_memberAddressName= "NULL"
											api_memberAddressLine1= "NULL"
											api_memberAddressLine2= "NULL"
											api_memberAddressLine3= "NULL"
											api_memberAddressStateOrCounty="NULL"
											api_memberAddressCity= "NULL"
											api_memberAddressCountry= "NULL"
											api_memberAddressPostCode= "NULL"
											api_memberAddressPrimaryAddress= "NULL"
										}
										if(!api_jointAssuredAddress.toString().equals("NULL"))
										{
											api_jointAssuredAddressId= json.tradingCertificates[i].jointAssuredAddress[j].id
											api_jointAssuredAddressId= removeComma(api_jointAssuredAddressId.toString())
											api_jointAssuredAddressName= json.tradingCertificates[i].jointAssuredAddress[j].addressName
											api_jointAssuredAddressName= removeComma(api_jointAssuredAddressName.toString())
											api_jointAssuredAddressLine1= json.tradingCertificates[i].jointAssuredAddress[j].addressLine1
											api_jointAssuredAddressLine1= removeComma(api_jointAssuredAddressLine1.toString())
											api_jointAssuredAddressLine2= json.tradingCertificates[i].jointAssuredAddress[j].addressLine2
											api_jointAssuredAddressLine2= removeComma(api_jointAssuredAddressLine2.toString())
											api_jointAssuredAddressLine3= json.tradingCertificates[i].jointAssuredAddress[j].addressLine3
											api_jointAssuredAddressLine3= removeComma(api_jointAssuredAddressLine3.toString())
											api_jointAssuredAddressStateOrCounty= json.tradingCertificates[i].jointAssuredAddress[j].stateOrCounty
											api_jointAssuredAddressStateOrCounty= removeComma(api_jointAssuredAddressStateOrCounty.toString())
											api_jointAssuredAddressCity= json.tradingCertificates[i].jointAssuredAddress[j].city
											api_jointAssuredAddressCity= removeComma(api_jointAssuredAddressCity.toString())
											api_jointAssuredAddressCountry= json.tradingCertificates[i].jointAssuredAddress[j].country
											api_jointAssuredAddressCountry= removeComma(api_jointAssuredAddressCountry.toString())
											api_jointAssuredAddressPostCode= json.tradingCertificates[i].jointAssuredAddress[j].postCode
											api_jointAssuredAddressPostCode= removeComma(api_jointAssuredAddressPostCode.toString())
											api_jointAssuredAddressPrimaryAddress= json.tradingCertificates[i].jointAssuredAddress[j].primaryAddress
											api_jointAssuredAddressPrimaryAddress= removeComma(api_jointAssuredAddressPrimaryAddress.toString())
											//log.info "Joint Assured Address is :"+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress
										}
										else if(api_jointAssuredAddress.toString().equals("NULL"))
										{
											api_jointAssuredAddressId= "NULL"
											api_jointAssuredAddressName= "NULL"
											api_jointAssuredAddressLine1= "NULL"
											api_jointAssuredAddressLine2= "NULL"
											api_jointAssuredAddressLine3= "NULL"
											api_jointAssuredAddressStateOrCounty= "NULL"
											api_jointAssuredAddressCity= "NULL"
											api_jointAssuredAddressCountry= "NULL"
											api_jointAssuredAddressPostCode= "NULL"
											api_jointAssuredAddressPrimaryAddress= "NULL"
										}
										if(!api_branchAddress.toString().equals("NULL"))
										{
											api_branchAddressId= json.tradingCertificates[i].branchAddress[j].id
											api_branchAddressId= removeComma(api_branchAddressId.toString())
											api_branchAddressName= json.tradingCertificates[i].branchAddress[j].addressName
											api_branchAddressName= removeComma(api_branchAddressName.toString())
											api_branchAddressLine1= json.tradingCertificates[i].branchAddress[j].addressLine1
											api_branchAddressLine1= removeComma(api_branchAddressLine1.toString())
											api_branchAddressLine2= json.tradingCertificates[i].branchAddress[j].addressLine2
											api_branchAddressLine2= removeComma(api_branchAddressLine2.toString())
											api_branchAddressLine3= json.tradingCertificates[i].branchAddress[j].addressLine3
											api_branchAddressLine3= removeComma(api_branchAddressLine3.toString())
											api_branchAddressStateOrCounty= json.tradingCertificates[i].branchAddress[j].stateOrCounty
											api_branchAddressStateOrCounty= removeComma(api_branchAddressStateOrCounty.toString())
											api_branchAddressCity= json.tradingCertificates[i].branchAddress[j].city
											api_branchAddressCity= removeComma(api_branchAddressCity.toString())
											api_branchAddressCountry= json.tradingCertificates[i].branchAddress[j].country
											api_branchAddressCountry= removeComma(api_branchAddressCountry.toString())
											api_branchAddressPostCode= json.tradingCertificates[i].branchAddress[j].postCode
											api_branchAddressPostCode= removeComma(api_branchAddressPostCode.toString())
											api_branchAddressPrimaryAddress= json.tradingCertificates[i].branchAddress[j].primaryAddress
											api_branchAddressPrimaryAddress= removeComma(api_branchAddressPrimaryAddress.toString())
											//log.info "Branch Address is :"+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress						
										}
										else if(api_branchAddress.toString().equals("NULL"))
										{
											api_branchAddressId= "NULL"
											api_branchAddressName= "NULL"
											api_branchAddressLine1= "NULL"
											api_branchAddressLine2= "NULL"
											api_branchAddressLine3= "NULL"
											api_branchAddressStateOrCounty= "NULL"
											api_branchAddressCity= "NULL"
											api_branchAddressCountry= "NULL"
											api_branchAddressPostCode= "NULL"
											api_branchAddressPrimaryAddress= "NULL"
										}
									log.info "API Response is received as =>"+api_TcId_riskRef+api_TCGroupId+","+api_TCGroupName+","+api_TCGroupCode+","+api_RiskReference1+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName+","+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress+","+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress+","+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress+","+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress+","+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress+","+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress+","+api_branchCode+","+api_tradingCertificatePackId
									arrCellVal=[api_TcId_riskRef,api_TCGroupId,api_TCGroupName,api_TCGroupCode,api_RiskReference1,api_tradingCertificateId ,api_addressTypeId ,api_sourceSystem ,api_reference ,api_currentStatus ,api_storageId ,api_riskId ,api_policyId ,api_memberPartyId ,api_ownerPartyId ,api_brokerPartyId ,api_isRenewal ,api_isYacht ,api_version ,api_riskReference ,api_policyReference ,api_memberReference ,api_memberType ,api_memberName ,api_jointAssuredName ,api_ownerReference ,api_ownerName ,api_ownerDomicile ,api_ownerEmailAddress ,api_brokerReference ,api_brokerName ,api_brokerEmailAddress ,api_policyYear ,api_certificateIssueDate ,api_emailAddress ,api_ccEmailAddress ,api_effectiveStartDate ,api_effectiveEndDate ,api_passengerCapacity ,api_policyStartDate ,api_policyEndDate ,api_currencyCode ,api_coverLimitAmount ,api_signatoryStateId ,api_vesselName ,api_vesselType ,api_vesselTypeName ,api_vesselEnteredDate ,api_vesselFlag ,api_imoNumber ,api_distinctiveNumbersOrLetters ,api_grossTonnage ,api_yearBuilt ,api_engineHorsePower ,api_trademarkAndEngineModel ,api_model ,api_engineNo ,api_nominatedFlagState ,api_nominatedFlagStateName ,api_portOfRegistry ,api_tenderReferenceList ,api_tenderOutboardReferenceList ,api_tradingCertificateTypeId ,api_tradingCertificateGroupId ,api_tradingCertificateGroupName ,api_tradingCertificateGroupCode ,api_tradingCertificateTypeTypeCode ,api_tradingCertificateTypeTypeName ,api_branchCode,api_tradingCertificatePackId,api_stateAddressId,api_stateAddressName,api_stateAddressLine1,api_stateAddressLine2,api_stateAddressLine3,api_stateAddressStateOrCounty,api_stateAddressCity,api_stateAddressCountry,api_stateAddressPostCode,api_stateAddressPrimaryAddress,api_ownerAddressId,api_ownerAddressName,api_ownerAddressLine1,api_ownerAddressLine2,api_ownerAddressLine3,api_ownerAddressStateOrCounty,api_ownerAddressCity,api_ownerAddressCountry,api_ownerAddressPostCode,api_ownerAddressPrimaryAddress,api_brokerAddressId,api_brokerAddressName,api_brokerAddressLine1,api_brokerAddressLine2,api_brokerAddressLine3,api_brokerAddressStateOrCounty,api_brokerAddressCity,api_brokerAddressCountry,api_brokerAddressPostCode,api_brokerAddressPrimaryAddress,api_memberAddressId,api_memberAddressName,api_memberAddressLine1,api_memberAddressLine2,api_memberAddressLine3,api_memberAddressStateOrCounty,api_memberAddressCity,api_memberAddressCountry,api_memberAddressPostCode,api_memberAddressPrimaryAddress,api_jointAssuredAddressId,api_jointAssuredAddressName,api_jointAssuredAddressLine1,api_jointAssuredAddressLine2,api_jointAssuredAddressLine3,api_jointAssuredAddressStateOrCounty,api_jointAssuredAddressCity,api_jointAssuredAddressCountry,api_jointAssuredAddressPostCode,api_jointAssuredAddressPrimaryAddress,api_branchAddressId,api_branchAddressName,api_branchAddressLine1,api_branchAddressLine2,api_branchAddressLine3,api_branchAddressStateOrCounty,api_branchAddressCity,api_branchAddressCountry,api_branchAddressPostCode,api_branchAddressPrimaryAddress];
									RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
									
									total_size++
									counter++
									//}//end of if
								}//end of inner for loop
							}//end of outer for loop	
						}//end of k for loop
						try
						{
							RT.saveExcelFile(summary_File,O_Summary)
						}
						catch(Exception e)
						{
						  log.info e.getMessage();	
						}
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
					oldRiskRef=RiskReference.toString()
				}
			}
			con.close()	

				//DB compare with API
				int db_startCol=0
				counter=row_start;
				totalColumns = source.getRow(1).getLastCellNum();
				int api_endCol=totalColumns-1
				dsc='Compares API data for Trading Certificate details as per Risk Reference with UTOM Database data'
				tcid=tcModuleName.toString()
				RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
				
		}//inner if end
	}//outer if end
}//outer for end
public String  removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field==null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
		field="NULL"
	}
		
	
	if(field!=null)
		field=field.toUpperCase()
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}
public String getDate(String field)
{
	if(field!=null && field.length()==21)
		field = field.substring(0, field.length() - 2);
	
	if(field==null)
			field="NULL"
	else if(field=="" || field==" " || field==null)	
			field="NULL"
	return field
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>riskReference</con:name><con:value>59080</con:value></con:property></con:properties></con:testCase><con:testCase id="af96ca71-4638-428e-86b2-a437dcd7c858" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_SignatoryStatesByStateIdByAddresses" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="SignStatesByStateIdByAddresses" id="1625d972-9790-4b06-adc4-50eb8c59ff89"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/signatorystates/${#TestCase#stateId}/addresses" methodName="SignatureStatesByStateIdByAddresses" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SignStatesByStateIdByAddresses" id="80aedd0f-e2d9-470b-a3d4-193cf0f4a57e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/signatorystates/389/addresses</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SignatoryStatesByStateIdByAddresses" id="119f0d07-9981-4d1f-8967-6d1c4a082e25"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_GET_SignatoryStatesByStateIdByAddresses"))
		tcModuleName="SignatoryStateAddress"
	
	if(tcModuleName.toString().equals("SignatoryStateAddress"))
	{
		log.info "Test Execution started for getting Signatory States By Signatory States Id By Addresses from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["UniqueId","SignatoryStateId","AddressId","AddressName","AddressLine1","AddressLine2","AddressLine3","StateOrCounty","City","Country","PostCode","IsThePrimaryAddress","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			String stateId=
			"""
			USE tradingcertificate
			SELECT
			DISTINCT
			TOP 50
			RSS.SignatoryState_Id as SignatoryStateId, RSS.Id, RSS.AddressName, RSS.AddressLine1, RSS.AddressLine2, RSS.AddressLine3, RSS.StateOrCounty,
			RSS.City, RSS.Country, RSS.PostCode, RSS.PrimaryAddress, case when RSS.PrimaryAddress = 1 then 'True' 
			when RSS.PrimaryAddress = 0 then 'False' else NULL end as isThePrimaryAddress
			from ref_SignatoryStateAddress RSS
			where RSS.IsDeleted = 0 
			--and RSS.SignatoryState_Id=699
			order by 1 desc, 3 asc
			"""
			String oldSignatoryStateId=null
			con.eachRow(stateId)
			{
				row->
				SignatoryStateId=row.SignatoryStateId
				if(oldSignatoryStateId!=SignatoryStateId.toString())	
				{
					String sqlstmt=
					"""
					declare
					@stateId as int = '"""+SignatoryStateId+"""'
					USE tradingcertificate
					SELECT
					DISTINCT
					TOP 50
					RSS.SignatoryState_Id as SignatoryStateId, RSS.Id, RSS.AddressName, RSS.AddressLine1, RSS.AddressLine2, RSS.AddressLine3, RSS.StateOrCounty,
					RSS.City, RSS.Country, RSS.PostCode, RSS.PrimaryAddress, case when RSS.PrimaryAddress = 1 then 'TRUE' 
					when RSS.PrimaryAddress = 0 then 'FALSE' else NULL end as IsPrimaryAddress
					from ref_SignatoryStateAddress RSS
					where RSS.IsDeleted = 0 
					and RSS.SignatoryState_Id=@stateId
					order by 1 desc, 3 asc
					"""	
					log.info "Checking for Signatory State Id  =>"+SignatoryStateId
					
					rows=con.rows(sqlstmt) 
					arrCellVal=['DB data']
					
					RT.writeDetails(source,0,0,headerStyle,arrCellVal)
					
					headerStyle = RT.getCellStyle(O_Summary,'Header');
					RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
					
					def arrData;
					//DB sheet start
					con.eachRow(sqlstmt) 
					{ 
						getRow->
							sql_SignatoryStateId=getRow.SignatoryStateId
							sql_id=getRow.Id
							sql_addressName=getRow.AddressName
							sql_addressLine1=getRow.AddressLine1
							sql_addressLine2=getRow.AddressLine2
							sql_addressLine3=getRow.AddressLine3
							sql_stateOrCounty=getRow.StateOrCounty
							sql_city=getRow.City
							sql_country=getRow.Country
							sql_postCode=getRow.PostCode
							sql_primaryAddress=getRow.IsPrimaryAddress
							sql_UniqueId=sql_SignatoryStateId.toString()+"_"+sql_id
							log.info "SQL Response is received as =>"+sql_UniqueId+","+sql_SignatoryStateId+","+sql_id+","+sql_addressName+","+sql_addressLine1+","+sql_addressLine2+","+sql_addressLine3+","+sql_stateOrCounty+","+sql_city+","+sql_country+","+sql_postCode+","+sql_primaryAddress
							arrCellVal=[sql_UniqueId,sql_SignatoryStateId,sql_id,sql_addressName,sql_addressLine1,sql_addressLine2,sql_addressLine3,sql_stateOrCounty,sql_city,sql_country,sql_postCode,sql_primaryAddress];
							RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
							
							db_size++
							counter++
							try
							{
								RT.saveExcelFile(summary_File,O_Summary)
							}
							catch(Exception e) 
							{
								log.info e.toString();
							}
					}//inner sql end
					oldSignatoryStateId=SignatoryStateId.toString()
				}
			}//inner sql end
			
			totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start
			oldSignatoryStateId="null"

			con.eachRow(stateId)
			{
				getStateId->
				SignatoryStateId=getStateId.SignatoryStateId
				//sql_id=getStateId.Id
				
				if(oldSignatoryStateId!=SignatoryStateId.toString())	
				{
					log.info "Getting api values for Risk Reference =>"+SignatoryStateId
					testRunner.testCase.setPropertyValue('stateId', SignatoryStateId.toString())
					testRunner.testCase.setPropertyValue('token',token)
						
					//API
					testRunner.runTestStepByName('SignStatesByStateIdByAddresses')
					String req='${SignStatesByStateIdByAddresses#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["SignStatesByStateIdByAddresses"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		
					arrCellVal=['API DATA']
					RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
					RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
					log.info "Original API response is =>"+response
					log.info "HTTP Status code received as =>"+httpStatusCode
					
					if(httpStatusCode.toString().equals("200"))
					{
						def json=jsonSlurper.parseText(response)	
						size=json.signatoryStateId.size()
	
						for (int i=0; i<json.signatoryStateId.size(); i++)
						{
							log.info "API value for Signatory State Id->"+json.SignatoryStateId[i].toString()
							log.info "DB  value for Signatory State Id->"+SignatoryStateId.toString()
						
							api_SignatoryStateId=json.signatoryStateId[i]
							api_id=json.id[i]
							api_addressName=json.addressName[i]
							api_addressLine1=json.addressLine1[i]
							api_addressLine2=json.addressLine2[i]
							api_addressLine3=json.addressLine3[i]
							api_stateOrCounty=json.stateOrCounty[i]
							api_city=json.city[i]
							api_country=json.country[i]
							api_postCode=json.postCode[i]
							api_primaryAddress=json.primaryAddress[i]
							apiUniqueId=api_SignatoryStateId+"_"+api_id
								
							log.info "API Response is received as =>"+apiUniqueId+","+api_SignatoryStateId+","+api_id+","+api_addressName+","+api_addressLine1+","+api_addressLine2+","+api_addressLine3+","+api_stateOrCounty+","+api_city+","+api_country+","+api_postCode+","+api_primaryAddress
							arrCellVal=[apiUniqueId,api_SignatoryStateId,api_id,api_addressName,api_addressLine1,api_addressLine2,api_addressLine3,api_stateOrCounty,api_city,api_country,api_postCode,api_primaryAddress];
							RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
							
							total_size++
							counter++
						}//end of i for loop
						try
						{
							RT.saveExcelFile(summary_File,O_Summary)
						}
						catch(Exception e)
						{
						  log.info e.getMessage();	
						}
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
					oldSignatoryStateId=SignatoryStateId.toString()
				}
			}
			con.close()	

			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Signatory State Addresses as per State Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String  removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field==null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
		field="NULL"
	}
	
	if(field!=null)
		field=field.toUpperCase()
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}
public String getDate(String field)
{
	if(field!=null && field.length()==21)
		field = field.substring(0, field.length() - 2);
	
	if(field==null)
			field="NULL"
	else if(field=="" || field==" " || field==null)	
			field="NULL"
	return field
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>stateId</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="76526a5e-df1a-446b-82ad-c8c2474b5bf2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_SignatoryStatesByCertificateTypeIdByStates" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="SigStatesByCertTypeIdByStates" id="6b7c1205-45b8-499e-8b36-30052730cbf9"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/signatorystates/${#TestCase#tradingCertTypeId}/states" methodName="SignatoryStatesByCertificateTypeIdByStates" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SigStatesByCertTypeIdByStates" id="548e0007-78b3-450f-a79c-5fc0f48ba34e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/signatorystates/5/states</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SignatoryStatesByCertificateTypeIdByStates" id="bcbd38eb-6720-4eca-8d2a-71602845fea4"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_GET_SignatoryStatesByCertificateTypeIdByStates"))
		tcModuleName="SigStatesByTCTypeIdByStates"
	
	if(tcModuleName.toString().equals("SigStatesByTCTypeIdByStates"))
	{
		log.info "Test Execution started for getting Signatory States By Trading Certificate Type Id By States from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["SQL_SignatoryStateId","SQL_CountryName","SQL_ShortName","SQL_TradingCertTypeId","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			int db_size=0
			int db_endCol=0
			int api_startCol=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));	

			String getTcTypeId=
			"""
			USE tradingcertificate
			SELECT
			Top 10
			RSS.Id as SignatoryStateId, RC.Name as CountryName, RC.ShortName, rss.type_id as TradingCertTypeId
			FROM [dbo].[ref_SignatoryState] RSS 
			inner join ref_country RC 
			on RSS.country_id = RC.Id
			order by RC.name ASC
			"""

			con.eachRow(getTcTypeId)
			{
				getTCTypeId->
				TCTypeId=getTCTypeId.TradingCertTypeId

				String sqlstmt=
				"""
				USE tradingcertificate
				SELECT
				RSS.Id as SignatoryStateId, RC.Name as CountryName, RC.ShortName, rss.type_id as TradingCertTypeId
				FROM [dbo].[ref_SignatoryState] RSS 
				inner join ref_country RC 
				on RSS.country_id = RC.Id
				where rss.type_id='"""+TCTypeId+"""'
				order by RC.name ASC
				"""

				log.info "Checking for Trading Certificate Type Id=>"+TCTypeId
				
				def rows=con.rows(sqlstmt)  
				def arrCellVal;
				arrCellVal=['DB data']
				
				RT.writeDetails(source,0,0,headerStyle,arrCellVal)
				
				headerStyle = RT.getCellStyle(O_Summary,'Header');
				RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
				
				
				def arrData;
				//DB sheet start
				con.eachRow(sqlstmt) 
				{ 
					row->
					sql_SignatoryStateId=row.SignatoryStateId
					sql_CountryName=row.CountryName
					sql_CountryName=removeCommaAndBrackets(sql_CountryName.toString())
					sql_ShortName=row.ShortName
					sql_TradingCertTypeId=row.TradingCertTypeId
	
					log.info "SQL Response is received as =>"+sql_SignatoryStateId+","+sql_CountryName+","+sql_ShortName+","+sql_TradingCertTypeId
					arrCellVal=[sql_SignatoryStateId, sql_CountryName, sql_ShortName, sql_TradingCertTypeId];
					
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e) 
					{
						log.info e.toString();
					}
				}//sql end
			}
			
			int totalColumns = source.getRow(1).getLastCellNum()
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start

			con.eachRow(getTcTypeId)
			{
				getTradCertTypeId->
				sql_TCTypeId=getTradCertTypeId.TradingCertTypeId

				log.info "Getting api values Trading Certificate Type Id=>"+sql_TCTypeId

				testRunner.testCase.setPropertyValue('token', token)
				testRunner.testCase.setPropertyValue('tradingCertTypeId', sql_TCTypeId.toString())
					
				//API
				testRunner.runTestStepByName('SigStatesByCertTypeIdByStates')
				String req='${SigStatesByCertTypeIdByStates#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
	
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["SigStatesByCertTypeIdByStates"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	
				arrCellVal=['API DATA']
				RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
				RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
				
				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)					
					size=jsonRes.id.size()
					for(int i=0;i<size;i++)
					{
						api_SignatoryStateId=jsonRes.id[i]
						api_CountryName=jsonRes.name[i]
						api_CountryName=removeCommaAndBrackets(api_CountryName.toString())
						api_ShortName=jsonRes.shortCode[i]
						api_TradingCertTypeId=jsonRes.tradingCertTypeId[i]
		
						log.info "API Response is received as =>"+api_SignatoryStateId+","+api_CountryName+","+api_ShortName+","+api_TradingCertTypeId
						arrCellVal=[api_SignatoryStateId,api_CountryName,api_ShortName,api_TradingCertTypeId];
						
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
						total_size++
						counter++
					}
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}
			}
			con.close()	

				//DB compare with API
				int db_startCol=0
				counter=row_start;
				totalColumns = source.getRow(1).getLastCellNum();
				int api_endCol=totalColumns-1
				dsc='Compares API data for Signatory State By Signatory State Id with UTOM Database data'
				tcid=tcModuleName.toString()
				RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid, dsc)
				
		}//inner if end
	}//outer if end
}//outer for end

public String  removeCommaAndBrackets(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}

	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field!=null)
		field=field.toUpperCase()
	return field
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>tradingCertTypeId</con:name><con:value>26</con:value></con:property></con:properties></con:testCase><con:testCase id="f3169566-8b6f-412d-8504-0bcb7832507a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_TradingCertificatePacksByPackId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GET_TradingCertificatePacksByPackId" id="2bf5c321-7b1b-44a8-9c43-734340d9b818"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificatePacks/${#TestCase#TCPackId}" methodName="GET_TradingcertificatePacksByPackId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_TradingCertificatePacksByPackId" id="50c13843-d0eb-4c3b-a035-93fd8a637307" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="GET_TradingCertificatePacksByPacksId" id="dceb8483-33a5-468f-87a4-d315548afd6d"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

def api_stateAddressId = api_stateAddressName= api_stateAddressLine1= api_stateAddressLine2= api_stateAddressLine3= api_stateAddressStateOrCounty= api_stateAddressCity= api_stateAddressCountry= api_stateAddressPostCode ="NULL"
def api_stateAddressPrimaryAddress= api_ownerAddressId= api_ownerAddressName= api_ownerAddressLine1= api_ownerAddressLine2= api_ownerAddressLine3= api_ownerAddressStateOrCounty= api_ownerAddressCity= api_ownerAddressCountry= api_ownerAddressPostCode= api_ownerAddressPrimaryAddress= "NULL"
def api_brokerAddressId= api_brokerAddressName= api_brokerAddressLine1= api_brokerAddressLine2= api_brokerAddressLine3= api_brokerAddressStateOrCounty= api_brokerAddressCity= api_brokerAddressCountry= api_brokerAddressPostCode= api_brokerAddressPrimaryAddress= "NULL"
def api_memberAddressId= api_memberAddressName= api_memberAddressLine1= api_memberAddressLine2= api_memberAddressLine3= api_memberAddressStateOrCounty= api_memberAddressCity= api_memberAddressCountry= api_memberAddressPostCode= api_memberAddressPrimaryAddress= "NULL"
def api_jointAssuredAddressId= api_jointAssuredAddressName= api_jointAssuredAddressLine1= api_jointAssuredAddressLine2= api_jointAssuredAddressLine3= api_jointAssuredAddressStateOrCounty= api_jointAssuredAddressCity= api_jointAssuredAddressCountry= api_jointAssuredAddressPostCode= api_jointAssuredAddressPrimaryAddress= "NULL"
def api_branchAddressId= api_branchAddressName= api_branchAddressLine1= api_branchAddressLine2= api_branchAddressLine3= api_branchAddressStateOrCounty= api_branchAddressCity= api_branchAddressCountry= api_branchAddressPostCode= api_branchAddressPrimaryAddress= "NULL"


for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_GET_TradingCertificatePacksByPackId"))
		tcModuleName="TCPackByPackId"
	
	if(tcModuleName.toString().equals("TCPackByPackId"))
	{
		log.info "Test Execution started for getting Trading Certificate Pack details by Pack Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Key","TradingCertificatePackId","CreatedByUserEmailAddress","CreatedDateTime","TradingCertificateId","AddressType_Id","SourceSystem","Reference","CurrentStatus","StorageId","RiskId","PolicyId","MemberPartyId","OwnerPartyId","BrokerPartyId","IsRenewalFlag","IsYachtFlag","Version","RiskReference","PolicyReference","MemberReference","MemberType","MemberName","JointAssuredName","OwnerReference","OwnerName","OwnerDomicile","OwnerEmailAddress","BrokerReference","BrokerName","BrokerEmailAddress","PolicyYear","CertificateIssueDate","EmailAddress","CcEmailAddress","EffectiveStartDate","EffectiveEndDate","PassengerCapacity","PolicyStartDate","PolicyEndDate","CurrencyCode","CoverLimitAmount","SignatoryState_Id","VesselName","VesselType","VesselTypeName","vesselEnteredDate","vesselFlag","imoNumber","distinctiveNumbersOrLetters","grossTonnage","yearBuilt","engineHorsePower","model","engineNo","NominatedStateFlag","NominatedStateFlagName","portOfRegistry","TenderReferenceList","TenderOutboardReferenceList","TradingCertificateTypeId","TradingCertificateGroupId","TradingCertificateGroupName","TradingCertificateGroupCode","TradingCertificateTypeCode","TradingCertificateTypeName","StateAddressId","StateAddressName","StateAddressLine1","StateAddressLine2","StateAddressLine3","StateStateOrCounty","StateCity","StateCountry","StatePostCode","StateIsPrimaryAddress","OwnerAddressId","OwnerAddressName","OwnerAddressLine1","OwnerAddressLine2","OwnerAddressLine3","OwnerStateOrCounty","OwnerCity","OwnerCountry","OwnerPostCode","OwnerIsPrimaryAddress","BrokerAddressId","BrokerAddressName","BrokerAddressLine1","BrokerAddressLine2","BrokerAddressLine3","BrokerStateOrCounty","BrokerCity","BrokerCountry","BrokerPostCode","BrokerIsPrimaryAddress","MemberAddressId","MemberAddressName","MemberAddressLine1","MemberAddressLine2","MemberAddressLine3","MemberStateOrCounty","MemberCity","MemberCountry","MemberPostCode","MemberIsPrimaryAddress","JointAssuredAddressId","JointAssuredAddressName","JointAssuredAddressLine1","JointAssuredAddressLine2","JointAssuredAddressLine3","JointAssuredStateOrCounty","JointAssuredCity","JointAssuredCountry","JointAssuredPostCode","JointAssuredIsPrimaryAddress","BranchAddressId","BranchAddressName","BranchAddressLine1","BranchAddressLine2","BranchAddressLine3","BranchStateOrCounty","BranchCity","BranchCountry","BranchPostCode","BranchIsPrimaryAddress","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			String getSingleTCPackId=
			"""
			select
			top 50
			count(Id) as Count, TradingCertificatePack_Id
			from TradingCertificate
			where TradingCertificatePack_Id is not null
			--and TradingCertificatePack_Id = 340
			group by TradingCertificatePack_Id
			having count(Id)<2
			order by count(Id) desc
			"""

			con.eachRow(getSingleTCPackId)
			{
				getPack->
				packId=getPack.TradingCertificatePack_Id

				String sqlstmt=
				"""
					USE tradingcertificate
					SELECT
					TCPA.Id as TradingCertificatePackId, TCPA.CreatedByUserEmailAddress, TCPA.CreatedDateTime, TC.Id as TradingCertificateId, TC.AddressType_Id, TC.SourceSystem, 
					TC.Reference, TC.CurrentStatus, TC.StorageId,  TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
					TC.IsRenewal, case when TC.IsRenewal = 1 then 'TRUE'  when TC.IsRenewal = 0 then 'FALSE' else NULL end as IsRenewalFlag, TC.IsYacht,
					case when TC.IsYacht = 1 then 'TRUE' when TC.IsYacht = 0 then 'FALSE' else NULL end as IsYachtFlag, 
					TC.TradingCertificateVersion as Version, TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,
					TC.JointAssuredName, TC.OwnerReference, TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,
					TC.PolicyYear, TC.CertificateIssueDate, TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity,
					TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,
					TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower,
					TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList, TC.TenderOutboardReferenceList,
					TC.Type_Id as TradingCertificateTypeId, RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode, 
					RT.TypeCode, RT.Name as TypeName, TCPA.Id as TradingCertificatePackId, TC.Type_Id
					from TradingCertificate  Tc
					inner join TradingCertificatePack TCPA on TCPA.Id = TC.TradingCertificatePack_Id
					inner join ref_Type RT on RT.Id=TC.Type_Id
					inner join ref_Group RG on RG.Id = RT.Group_Id
					where TC.TradingCertificatePack_Id is not null
					and TC.TradingCertificatePack_Id='"""+packId+"""'
					order by 1 desc
				"""

				log.info "Checking for Trading Certificate Pack id  =>"+packId
				
				rows=con.rows(sqlstmt) 
				arrCellVal=['DB data']
				
				RT.writeDetails(source,0,0,headerStyle,arrCellVal)
				
				headerStyle = RT.getCellStyle(O_Summary,'Header');
				RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
				
				
				def arrData;
				//DB sheet start
				con.eachRow(sqlstmt) 
				{ 
					getPackRows->
						sql_TradingCertificatePackId=getPackRows.TradingCertificatePackId
						sql_CreatedByUserEmailAddress=getPackRows.CreatedByUserEmailAddress
						sql_CreatedDateTime=getPackRows.CreatedDateTime
						sql_CreatedDateTime=sql_CreatedDateTime.toString().replace(" ", "T")
						sql_CreatedDateTime=getDate(sql_CreatedDateTime.toString())
						sql_TradingCertificateId=getPackRows.TradingCertificateId
						sql_Type_Id=getPackRows.Type_Id
						sql_TradingCertificateId=getPackRows.TradingCertificateId
						sql_AddressType_Id=getPackRows.AddressType_Id
						sql_SourceSystem=getPackRows.SourceSystem
						sql_Reference=getPackRows.Reference
						sql_CurrentStatus=getPackRows.CurrentStatus
						sql_StorageId=getPackRows.StorageId
						sql_RiskId=getPackRows.RiskId
						sql_PolicyId=getPackRows.PolicyId
						sql_MemberPartyId=getPackRows.MemberPartyId
						sql_OwnerPartyId=getPackRows.OwnerPartyId
						sql_BrokerPartyId=getPackRows.BrokerPartyId
						sql_IsRenewalFlag=getPackRows.IsRenewalFlag
						sql_IsRenewalFlag=removeComma(sql_IsRenewalFlag.toString())
						sql_IsYachtFlag=getPackRows.IsYachtFlag
						sql_IsYachtFlag=removeComma(sql_IsYachtFlag.toString())
						sql_Version=getPackRows.Version
						sql_RiskReference=getPackRows.RiskReference
						sql_PolicyReference=getPackRows.PolicyReference
						sql_MemberReference=getPackRows.MemberReference
						sql_MemberType=getPackRows.MemberType
						sql_MemberName=getPackRows.MemberName
						sql_MemberName = removeComma(sql_MemberName.toString())
						sql_JointAssuredName=getPackRows.JointAssuredName
						sql_JointAssuredName = removeComma(sql_JointAssuredName.toString())
						sql_OwnerReference=getPackRows.OwnerReference
						sql_OwnerName=getPackRows.OwnerName
						sql_OwnerName = removeComma(sql_OwnerName.toString())
						sql_OwnerDomicile=getPackRows.OwnerDomicile
						sql_OwnerEmailAddress=getPackRows.OwnerEmailAddress
						sql_BrokerReference=getPackRows.BrokerReference
						sql_BrokerName=getPackRows.BrokerName
						sql_BrokerName = removeComma(sql_BrokerName.toString())
						sql_BrokerEmailAddress=getPackRows.BrokerEmailAddress
						sql_PolicyYear=getPackRows.PolicyYear
						sql_CertificateIssueDate=getPackRows.CertificateIssueDate
						sql_CertificateIssueDate=sql_CertificateIssueDate.toString().replace(" ", "T")
						sql_CertificateIssueDate=getDate(sql_CertificateIssueDate.toString())
						//sql_CertificateIssueDate=sql_CertificateIssueDate.toString().substring(0, 20)
						sql_EmailAddress=getPackRows.EmailAddress
						sql_CcEmailAddress=getPackRows.CcEmailAddress
						sql_EffectiveStartDate=getPackRows.EffectiveStartDate
						sql_EffectiveStartDate=sql_EffectiveStartDate.toString().replace(" ", "T")
						sql_EffectiveStartDate=getDate(sql_EffectiveStartDate.toString())
						//sql_EffectiveStartDate=sql_EffectiveStartDate.toString().substring(0, 20)
						sql_EffectiveEndDate=getPackRows.EffectiveEndDate
						sql_EffectiveEndDate=sql_EffectiveEndDate.toString().replace(" ", "T")
						sql_EffectiveEndDate=getDate(sql_EffectiveEndDate.toString())
						//sql_EffectiveEndDate=sql_EffectiveEndDate.toString().substring(0, 20)
						sql_PassengerCapacity=getPackRows.PassengerCapacity
						sql_PolicyStartDate=getPackRows.PolicyStartDate
						sql_PolicyStartDate=sql_PolicyStartDate.toString().replace(" ", "T")
						sql_PolicyStartDate=getDate(sql_PolicyStartDate.toString())
						//sql_PolicyStartDate=sql_PolicyStartDate.toString().substring(0, 20)
						sql_PolicyEndDate=getPackRows.PolicyEndDate
						sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" ", "T")
						sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())
						//sql_PolicyEndDate=sql_PolicyEndDate.toString().substring(0, 20)
						sql_CurrencyCode=getPackRows.CurrencyCode
						sql_CurrencyCode= removeComma(sql_CurrencyCode.toString())
						sql_CoverLimitAmount=getPackRows.CoverLimitAmount
						sql_CoverLimitAmount = removeDotFromCurrency(sql_CoverLimitAmount.toString())
						sql_SignatoryState_Id=getPackRows.SignatoryState_Id
						sql_VesselName=getPackRows.VesselName
						sql_VesselName = removeComma(sql_VesselName.toString())
						sql_VesselType=getPackRows.VesselType
						sql_VesselTypeName=getPackRows.VesselTypeName
						sql_vesselEnteredDate=getPackRows.vesselEnteredDate
						sql_vesselEnteredDate=sql_vesselEnteredDate.toString().replace(" ", "T")
						sql_vesselEnteredDate=getDate(sql_vesselEnteredDate.toString())
						//sql_vesselEnteredDate=sql_vesselEnteredDate.toString().substring(0, 20)
						sql_vesselFlag=getPackRows.vesselFlag
						sql_imoNumber=getPackRows.imoNumber
						sql_distinctiveNumbersOrLetters=getPackRows.distinctiveNumbersOrLetters
						sql_grossTonnage=getPackRows.grossTonnage
						sql_yearBuilt=getPackRows.yearBuilt
						sql_engineHorsePower=getPackRows.engineHorsePower
						sql_model=getPackRows.model
						sql_engineNo=getPackRows.engineNo
						sql_NominatedStateFlag=getPackRows.NominatedStateFlag
						sql_NominatedStateFlagName=getPackRows.NominatedStateFlagName
						sql_NominatedStateFlagName = removeComma(sql_NominatedStateFlagName.toString())
						sql_portOfRegistry=getPackRows.portOfRegistry
						sql_portOfRegistry = removeComma(sql_portOfRegistry.toString())
						sql_TenderReferenceList=getPackRows.tenderReferenceList
						sql_TenderOutboardReferenceList=getPackRows.TenderOutboardReferenceList
						sql_TradingCertificateTypeId=getPackRows.TradingCertificateTypeId
						sql_TradingCertificateGroupId=getPackRows.TradingCertificateGroupId
						sql_TradingCertificateGroupName=getPackRows.TradingCertificateGroupName
						sql_TradingCertificateGroupCode=getPackRows.TradingCertificateGroupCode
						sql_TradingCertificateTypeCode=getPackRows.TypeCode
						sql_TradingCertificateTypeName=getPackRows.TypeName
	
						int getRiskRef =sql_RiskReference.toInteger()
						int getTradCertId =sql_TradingCertificateId.toInteger()
						
						String getStateAddressSQL =
						"""						
						declare
						@tradCertId as int = """+getTradCertId+"""
						select 
						TC.Type_Id, RT.Name,
						RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
						ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
						ASN.PrimaryAddress,
						case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
						from TradingCertificate TC
						inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
						inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
						inner join ref_Type RT on RT.Id = TC.Type_Id
						where ASN.IsDeleted=0 and RAT.Name ='SIGNATORYSTATE'
						 and TC.Id=@tradCertId
						 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
						"""
						con.eachRow(getStateAddressSQL)
						{
							getRows->
							sql_StateAddressId=getRows.AddressId
							sql_StateAddressId = removeComma(sql_StateAddressId.toString())
							sql_StateAddressName=getRows.AddressName
							sql_StateAddressName = removeComma(sql_StateAddressName.toString())
							sql_StateAddressLine1=getRows.AddressLine1
							sql_StateAddressLine1 = removeComma(sql_StateAddressLine1.toString())
							sql_StateAddressLine2=getRows.AddressLine2
							sql_StateAddressLine2 = removeComma(sql_StateAddressLine2.toString())
							sql_StateAddressLine3=getRows.AddressLine3
							sql_StateAddressLine3 = removeComma(sql_StateAddressLine3.toString())
							sql_StateStateOrCounty=getRows.StateOrCounty
							sql_StateStateOrCounty = removeComma(sql_StateStateOrCounty.toString())
							sql_StateCity=getRows.City
							sql_StateCity = removeComma(sql_StateCity.toString())
							sql_StateCountry=getRows.Country
							sql_StateCountry = removeComma(sql_StateCountry.toString())
							sql_StatePostCode=getRows.PostCode
							sql_StatePostCode = removeComma(sql_StatePostCode.toString())
							sql_StateIsPrimaryAddress=getRows.IsPrimaryAddress
							sql_StateIsPrimaryAddress = removeComma(sql_StateIsPrimaryAddress.toString())
							log.info "State Address is received as ==> "+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress
						}
					
						String getOwnerAddressSQL =
						"""
						declare
						@tradCertId as int = '"""+getTradCertId+"""'
						select 
						TC.Type_Id, RT.Name,
						RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
						ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
						ASN.PrimaryAddress,
						case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
						from TradingCertificate TC
						inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
						inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
						inner join ref_Type RT on RT.Id = TC.Type_Id
						where ASN.IsDeleted=0 and RAT.Name ='OWNER'
						 and TC.Id=@tradCertId
						 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
						"""
						con.eachRow(getOwnerAddressSQL)
						{
							getRows->
							sql_OwnerAddressId=getRows.AddressId
							sql_OwnerAddressId = removeComma(sql_OwnerAddressId.toString())
							sql_OwnerAddressName=getRows.AddressName
							sql_OwnerAddressName = removeComma(sql_OwnerAddressName.toString())
							sql_OwnerAddressLine1=getRows.AddressLine1
							sql_OwnerAddressLine1 = removeComma(sql_OwnerAddressLine1.toString())
							sql_OwnerAddressLine2=getRows.AddressLine2
							sql_OwnerAddressLine2 = removeComma(sql_OwnerAddressLine2.toString())
							sql_OwnerAddressLine3=getRows.AddressLine3
							sql_OwnerAddressLine3 = removeComma(sql_OwnerAddressLine3.toString())
							sql_OwnerStateOrCounty=getRows.StateOrCounty
							sql_OwnerStateOrCounty = removeComma(sql_OwnerStateOrCounty.toString())
							sql_OwnerCity=getRows.City
							sql_OwnerCity = removeComma(sql_OwnerCity.toString())
							sql_OwnerCountry=getRows.Country
							sql_OwnerCountry = removeComma(sql_OwnerCountry.toString())
							sql_OwnerPostCode=getRows.PostCode
							sql_OwnerPostCode = removeComma(sql_OwnerPostCode.toString())
							sql_OwnerIsPrimaryAddress=getRows.IsPrimaryAddress
							sql_OwnerIsPrimaryAddress = removeComma(sql_OwnerIsPrimaryAddress.toString())
							//log.info "Owner Address is received as ==> "+sql_OwnerAddressTypeName+","+sql_OwnerAddressTypeId+","+sql_OwnerTradingCertificateId+","+sql_OwnerRiskReference+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressName+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress	
						}
					
						String getBrokerAddressSQL =
						"""
						declare
						@tradCertId as int = '"""+getTradCertId+"""'
						select 
						TC.Type_Id, RT.Name,
						RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
						ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
						ASN.PrimaryAddress,
						case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
						from TradingCertificate TC
						inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
						inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
						inner join ref_Type RT on RT.Id = TC.Type_Id
						where ASN.IsDeleted=0 and RAT.Name ='BROKER'
						 and TC.Id=@tradCertId
						 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
						"""
						con.eachRow(getBrokerAddressSQL)
						{
							getRows->
							sql_BrokerAddressId=getRows.AddressId
							sql_BrokerAddressId = removeComma(sql_BrokerAddressId.toString())
							sql_BrokerAddressName=getRows.AddressName
							sql_BrokerAddressName = removeComma(sql_BrokerAddressName.toString())
							sql_BrokerAddressLine1=getRows.AddressLine1
							sql_BrokerAddressLine1 = removeComma(sql_BrokerAddressLine1.toString())
							sql_BrokerAddressLine2=getRows.AddressLine2
							sql_BrokerAddressLine2 = removeComma(sql_BrokerAddressLine2.toString())
							sql_BrokerAddressLine3=getRows.AddressLine3
							sql_BrokerAddressLine3 = removeComma(sql_BrokerAddressLine3.toString())
							sql_BrokerStateOrCounty=getRows.StateOrCounty
							sql_BrokerStateOrCounty = removeComma(sql_BrokerStateOrCounty.toString())
							sql_BrokerCity=getRows.City
							sql_BrokerCity = removeComma(sql_BrokerCity.toString())
							sql_BrokerCountry=getRows.Country
							sql_BrokerCountry = removeComma(sql_BrokerCountry.toString())
							sql_BrokerPostCode=getRows.PostCode
							sql_BrokerPostCode = removeComma(sql_BrokerPostCode.toString())
							sql_BrokerIsPrimaryAddress=getRows.IsPrimaryAddress
							sql_BrokerIsPrimaryAddress = removeComma(sql_BrokerIsPrimaryAddress.toString())
							//log.info "Broker Address is received as ==> "+sql_BrokerAddressTypeName+","+sql_BrokerAddressTypeId+","+sql_BrokerTradingCertificateId+","+sql_BrokerRiskReference+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressName+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress	
						}
					
							String getMemberAddressSQL =
						"""
						declare
						@tradCertId as int = """+getTradCertId+"""
						select 
						TC.Type_Id, RT.Name,
						RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
						ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
						ASN.PrimaryAddress,
						case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
						from TradingCertificate TC
						inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
						inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
						inner join ref_Type RT on RT.Id = TC.Type_Id
						where ASN.IsDeleted=0 and RAT.Name ='MEMBER'
						 and TC.Id=@tradCertId
						 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
						"""
						con.eachRow(getMemberAddressSQL)
						{
							getRows->
							sql_MemberAddressId=getRows.AddressId
							sql_MemberAddressId = removeComma(sql_MemberAddressId.toString())
							sql_MemberAddressName=getRows.AddressName
							sql_MemberAddressName = removeComma(sql_MemberAddressName.toString())
							sql_MemberAddressLine1=getRows.AddressLine1
							sql_MemberAddressLine1 = removeComma(sql_MemberAddressLine1.toString())
							sql_MemberAddressLine2=getRows.AddressLine2
							sql_MemberAddressLine2 = removeComma(sql_MemberAddressLine2.toString())
							sql_MemberAddressLine3=getRows.AddressLine3
							sql_MemberAddressLine3 = removeComma(sql_MemberAddressLine3.toString())
							sql_MemberStateOrCounty=getRows.StateOrCounty
							sql_MemberStateOrCounty = removeComma(sql_MemberStateOrCounty.toString())
							sql_MemberCity=getRows.City
							sql_MemberCity = removeComma(sql_MemberCity.toString())
							sql_MemberCountry=getRows.Country
							sql_MemberCountry = removeComma(sql_MemberCountry.toString())
							sql_MemberPostCode=getRows.PostCode
							sql_MemberPostCode = removeComma(sql_MemberPostCode.toString())
							sql_MemberIsPrimaryAddress=getRows.IsPrimaryAddress
							sql_MemberIsPrimaryAddress = removeComma(sql_MemberIsPrimaryAddress.toString())
							//log.info "Member Address is received as ==> "+sql_MemberAddressTypeName+","+sql_MemberAddressTypeId+","+sql_MemberTradingCertificateId+","+sql_MemberRiskReference+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressName+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress	
						}
						String getJointAssuredAddressSQL =
						"""
						declare
						@tradCertId as int = """+getTradCertId+"""
						select 
						TC.Type_Id, RT.Name,
						RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
						ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
						ASN.PrimaryAddress,
						case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
						from TradingCertificate TC
						inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
						inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
						inner join ref_Type RT on RT.Id = TC.Type_Id
						where ASN.IsDeleted=0 and RAT.Name ='JOINTASSURED'
						and TC.Id=@tradCertId
						union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
						"""
						con.eachRow(getJointAssuredAddressSQL)
						{
							getRows->
							sql_JointAssuredAddressId=getRows.AddressId
							sql_JointAssuredAddressId = removeComma(sql_JointAssuredAddressId.toString())
							sql_JointAssuredAddressName=getRows.AddressName
							sql_JointAssuredAddressName = removeComma(sql_JointAssuredAddressName.toString())
							sql_JointAssuredAddressLine1=getRows.AddressLine1
							sql_JointAssuredAddressLine1 = removeComma(sql_JointAssuredAddressLine1.toString())
							sql_JointAssuredAddressLine2=getRows.AddressLine2
							sql_JointAssuredAddressLine2 = removeComma(sql_JointAssuredAddressLine2.toString())
							sql_JointAssuredAddressLine3=getRows.AddressLine3
							sql_JointAssuredAddressLine3 = removeComma(sql_JointAssuredAddressLine3.toString())
							sql_JointAssuredStateOrCounty=getRows.StateOrCounty
							sql_JointAssuredStateOrCounty = removeComma(sql_JointAssuredStateOrCounty.toString())
							sql_JointAssuredCity=getRows.City
							sql_JointAssuredCity = removeComma(sql_JointAssuredCity.toString())
							sql_JointAssuredCountry=getRows.Country
							sql_JointAssuredCountry = removeComma(sql_JointAssuredCountry.toString())
							sql_JointAssuredPostCode=getRows.PostCode
							sql_JointAssuredPostCode = removeComma(sql_JointAssuredPostCode.toString())
							sql_JointAssuredIsPrimaryAddress=getRows.IsPrimaryAddress
							sql_JointAssuredIsPrimaryAddress = removeComma(sql_JointAssuredIsPrimaryAddress.toString())
							//log.info "JointAssured Address is received as ==> "+sql_JointAssuredAddressTypeName+","+sql_JointAssuredAddressTypeId+","+sql_JointAssuredTradingCertificateId+","+sql_JointAssuredRiskReference+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressName+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress	
						}
					
						String getBranchAddressSQL =
						"""
						declare
						@tradCertId as int = """+getTradCertId+"""
						select 
						TC.Type_Id, RT.Name,
						RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
						ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
						ASN.PrimaryAddress,
						case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
						from TradingCertificate TC
						inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
						inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
						inner join ref_Type RT on RT.Id = TC.Type_Id
						where ASN.IsDeleted=0 and RAT.Name ='BRANCH'
						and TC.Id=@tradCertId
						union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
						"""
						con.eachRow(getBranchAddressSQL)
						{
							getRows->
							sql_BranchAddressId=getRows.AddressId
							sql_BranchAddressId = removeComma(sql_BranchAddressId.toString())
							sql_BranchAddressName=getRows.AddressName
							sql_BranchAddressName = removeComma(sql_BranchAddressName.toString())
							sql_BranchAddressLine1=getRows.AddressLine1
							sql_BranchAddressLine1 = removeComma(sql_BranchAddressLine1.toString())
							sql_BranchAddressLine2=getRows.AddressLine2
							sql_BranchAddressLine2 = removeComma(sql_BranchAddressLine2.toString())
							sql_BranchAddressLine3=getRows.AddressLine3
							sql_BranchAddressLine3 = removeComma(sql_BranchAddressLine3.toString())
							sql_BranchStateOrCounty=getRows.StateOrCounty
							sql_BranchStateOrCounty = removeComma(sql_BranchStateOrCounty.toString())
							sql_BranchCity=getRows.City
							sql_BranchCity = removeComma(sql_BranchCity.toString())
							sql_BranchCountry=getRows.Country
							sql_BranchCountry = removeComma(sql_BranchCountry.toString())
							sql_BranchPostCode=getRows.PostCode
							sql_BranchPostCode = removeComma(sql_BranchPostCode.toString())
							sql_BranchIsPrimaryAddress=getRows.IsPrimaryAddress
							sql_BranchIsPrimaryAddress = removeComma(sql_BranchIsPrimaryAddress.toString())
							//log.info "Branch Address is received as ==> "+sql_BranchAddressTypeName+","+sql_BranchAddressTypeId+","+sql_BranchTradingCertificateId+","+sql_BranchRiskReference+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressName+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress	
						}

						key=sql_TradingCertificatePackId+"_"+sql_TradingCertificateId
		
						log.info "SQL Response is received as =>"+key+","+sql_TradingCertificatePackId+","+sql_CreatedByUserEmailAddress+","+sql_CreatedDateTime+","+sql_TradingCertificateId+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewalFlag+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_TradingCertificatePackId+","+sql_Type_Id+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressLine3+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressLine3+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressLine3+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressLine3+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressLine3+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressLine3+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress
						arrCellVal=[key, sql_TradingCertificatePackId,sql_CreatedByUserEmailAddress,sql_CreatedDateTime,sql_TradingCertificateId,sql_AddressType_Id,sql_SourceSystem,sql_Reference,sql_CurrentStatus,sql_StorageId,sql_RiskId,sql_PolicyId,sql_MemberPartyId,sql_OwnerPartyId,sql_BrokerPartyId,sql_IsRenewalFlag,sql_IsYachtFlag,sql_Version,sql_RiskReference,sql_PolicyReference,sql_MemberReference,sql_MemberType,sql_MemberName,sql_JointAssuredName,sql_OwnerReference,sql_OwnerName,sql_OwnerDomicile,sql_OwnerEmailAddress,sql_BrokerReference,sql_BrokerName,sql_BrokerEmailAddress,sql_PolicyYear,sql_CertificateIssueDate,sql_EmailAddress,sql_CcEmailAddress,sql_EffectiveStartDate,sql_EffectiveEndDate,sql_PassengerCapacity,sql_PolicyStartDate,sql_PolicyEndDate,sql_CurrencyCode,sql_CoverLimitAmount,sql_SignatoryState_Id,sql_VesselName,sql_VesselType,sql_VesselTypeName,sql_vesselEnteredDate,sql_vesselFlag,sql_imoNumber,sql_distinctiveNumbersOrLetters,sql_grossTonnage,sql_yearBuilt,sql_engineHorsePower,sql_model,sql_engineNo,sql_NominatedStateFlag,sql_NominatedStateFlagName,sql_portOfRegistry,sql_TenderReferenceList,sql_TenderOutboardReferenceList,sql_TradingCertificateTypeId,sql_TradingCertificateGroupId,sql_TradingCertificateGroupName,sql_TradingCertificateGroupCode,sql_TradingCertificateTypeCode,sql_TradingCertificateTypeName, sql_StateAddressId,sql_StateAddressName,sql_StateAddressLine1,sql_StateAddressLine2,sql_StateAddressLine3,sql_StateStateOrCounty,sql_StateCity,sql_StateCountry,sql_StatePostCode,sql_StateIsPrimaryAddress,sql_OwnerAddressId,sql_OwnerAddressName,sql_OwnerAddressLine1,sql_OwnerAddressLine2,sql_OwnerAddressLine3,sql_OwnerStateOrCounty,sql_OwnerCity,sql_OwnerCountry,sql_OwnerPostCode,sql_OwnerIsPrimaryAddress,sql_BrokerAddressId,sql_BrokerAddressName,sql_BrokerAddressLine1,sql_BrokerAddressLine2,sql_BrokerAddressLine3,sql_BrokerStateOrCounty,sql_BrokerCity,sql_BrokerCountry,sql_BrokerPostCode,sql_BrokerIsPrimaryAddress,sql_MemberAddressId,sql_MemberAddressName,sql_MemberAddressLine1,sql_MemberAddressLine2,sql_MemberAddressLine3,sql_MemberStateOrCounty,sql_MemberCity,sql_MemberCountry,sql_MemberPostCode,sql_MemberIsPrimaryAddress,sql_JointAssuredAddressId,sql_JointAssuredAddressName,sql_JointAssuredAddressLine1,sql_JointAssuredAddressLine2,sql_JointAssuredAddressLine3,sql_JointAssuredStateOrCounty,sql_JointAssuredCity,sql_JointAssuredCountry,sql_JointAssuredPostCode,sql_JointAssuredIsPrimaryAddress,sql_BranchAddressId,sql_BranchAddressName,sql_BranchAddressLine1,sql_BranchAddressLine2,sql_BranchAddressLine3,sql_BranchStateOrCounty,sql_BranchCity,sql_BranchCountry,sql_BranchPostCode,sql_BranchIsPrimaryAddress];
						RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
						db_size++
						counter++
						try
						{
							RT.saveExcelFile(summary_File,O_Summary)
						}
						catch(Exception e) 
						{
							log.info e.toString();
						}
				}//sql end
			}
			
			totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start
			//int recordCount=0

			con.eachRow(getSingleTCPackId)
			{
				getPack->
				packId=getPack.TradingCertificatePack_Id

				log.info "Getting api values for Trading Certificate Pack Id =>"+packId

				testRunner.testCase.setPropertyValue('TCPackId',packId.toString())
				testRunner.testCase.setPropertyValue('token',token)
					
				//API
				testRunner.runTestStepByName('GET_TradingCertificatePacksByPackId')
				String req='${GET_TradingCertificatePacksByPackId#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
	
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["GET_TradingCertificatePacksByPackId"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	
				arrCellVal=['API DATA']
				RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
				RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
				def json=jsonSlurper.parseText(response)	
				
				if(httpStatusCode.toString().equals("200"))
				{
					size=json.tradingCertificates.id.size()
					
					for(int i=0;i<size;i++)
					{
						if(json.id.toString().equals(packId.toString()))
						{
							api_TCPackId= json.id
							api_CreatedByUserEmailAddress=json.createdByUserEmailAddress
							api_CreatedDateTime=json.createdDateTime
							api_CreatedDateTime=getDate(api_CreatedDateTime.toString())
							//api_CreatedDateTime=api_CreatedDateTime.toString().substring(0, 20)
							api_tradingCertificateId = json.tradingCertificates[i].id
							api_addressTypeId = json.tradingCertificates[i].addressTypeId
							api_sourceSystem = json.tradingCertificates[i].sourceSystem
							api_reference = json.tradingCertificates[i].reference
							api_currentStatus = json.tradingCertificates[i].currentStatus
							api_storageId = json.tradingCertificates[i].storageId
							api_riskId = json.tradingCertificates[i].riskId
							api_policyId = json.tradingCertificates[i].policyId
							api_memberPartyId = json.tradingCertificates[i].memberPartyId
							api_ownerPartyId = json.tradingCertificates[i].ownerPartyId
							api_brokerPartyId = json.tradingCertificates[i].brokerPartyId
							api_isRenewal = json.tradingCertificates[i].isRenewal
							api_isRenewal=removeComma(api_isRenewal.toString())
							api_isYacht = json.tradingCertificates[i].isYacht
							api_isYacht=removeComma(api_isYacht.toString())
							api_version = json.tradingCertificates[i].version
							api_riskReference = json.tradingCertificates[i].riskReference
							api_policyReference = json.tradingCertificates[i].policyReference
							api_memberReference = json.tradingCertificates[i].memberReference
							api_memberType = json.tradingCertificates[i].memberType
							api_memberName = json.tradingCertificates[i].memberName
							api_memberName= removeComma(api_memberName.toString())
							api_jointAssuredName = json.tradingCertificates[i].jointAssuredName
							api_jointAssuredName= removeComma(api_jointAssuredName.toString())
							api_ownerReference = json.tradingCertificates[i].ownerReference
							api_ownerName = json.tradingCertificates[i].ownerName
							api_ownerName= removeComma(api_ownerName.toString())
							api_ownerDomicile = json.tradingCertificates[i].ownerDomicile
							api_ownerEmailAddress = json.tradingCertificates[i].ownerEmailAddress
							api_brokerReference = json.tradingCertificates[i].brokerReference
							api_brokerName = json.tradingCertificates[i].brokerName
							api_brokerName= removeComma(api_brokerName.toString())
							api_brokerEmailAddress = json.tradingCertificates[i].brokerEmailAddress
							api_policyYear = json.tradingCertificates[i].policyYear
							api_certificateIssueDate = json.tradingCertificates[i].certificateIssueDate
							api_certificateIssueDate=getDate(api_certificateIssueDate.toString())
							//api_certificateIssueDate=api_certificateIssueDate.toString().substring(0, 20)
							api_emailAddress = json.tradingCertificates[i].emailAddress
							api_ccEmailAddress = json.tradingCertificates[i].ccEmailAddress
							api_effectiveStartDate = json.tradingCertificates[i].effectiveStartDate
							api_effectiveStartDate =getDate(api_effectiveStartDate.toString())
							//api_effectiveStartDate=api_effectiveStartDate.toString().substring(0, 20)
							api_effectiveEndDate = json.tradingCertificates[i].effectiveEndDate
							api_effectiveEndDate  =getDate(api_effectiveEndDate.toString())
							//api_effectiveEndDate=api_effectiveEndDate.toString().substring(0, 20)
							api_passengerCapacity = json.tradingCertificates[i].passengerCapacity
							api_policyStartDate = json.tradingCertificates[i].policyStartDate
							api_policyStartDate =getDate(api_policyStartDate.toString())
							//api_policyStartDate=api_policyStartDate.toString().substring(0, 20)
							api_policyEndDate = json.tradingCertificates[i].policyEndDate
							api_policyEndDate =getDate(api_policyEndDate.toString())
							//api_policyEndDate=api_policyEndDate.toString().substring(0, 20)
							api_currencyCode = json.tradingCertificates[i].currencyCode
							api_currencyCode= removeComma(api_currencyCode.toString())
							api_coverLimitAmount = json.tradingCertificates[i].coverLimitAmount
							api_coverLimitAmount = removeDotFromCurrency(api_coverLimitAmount.toString())
							api_signatoryStateId = json.tradingCertificates[i].signatoryStateId
							api_vesselName = json.tradingCertificates[i].vesselName
							api_vesselName= removeComma(api_vesselName.toString())
							api_vesselType = json.tradingCertificates[i].vesselType
							api_vesselTypeName = json.tradingCertificates[i].vesselTypeName
							api_vesselEnteredDate = json.tradingCertificates[i].vesselEnteredDate
							api_vesselEnteredDate =getDate(api_vesselEnteredDate.toString())
							//api_vesselEnteredDate=api_vesselEnteredDate.toString().substring(0, 20)
							api_vesselFlag = json.tradingCertificates[i].vesselFlag
							api_imoNumber = json.tradingCertificates[i].imoNumber
							api_distinctiveNumbersOrLetters = json.tradingCertificates[i].distinctiveNumbersOrLetters
							api_grossTonnage = json.tradingCertificates[i].grossTonnage
							api_yearBuilt = json.tradingCertificates[i].yearBuilt
							api_engineHorsePower = json.tradingCertificates[i].engineHorsePower
							api_trademarkAndEngineModel = json.tradingCertificates[i].trademarkAndEngineModel
							api_model = json.tradingCertificates[i].model
							api_engineNo = json.tradingCertificates[i].engineNo
							api_nominatedFlagState = json.tradingCertificates[i].nominatedFlagState
							api_nominatedFlagStateName = json.tradingCertificates[i].nominatedFlagStateName
							api_nominatedFlagStateName = removeComma(api_nominatedFlagStateName.toString())
							api_portOfRegistry = json.tradingCertificates[i].portOfRegistry
							api_portOfRegistry = removeComma(api_portOfRegistry.toString())
							api_tenderReferenceList = json.tradingCertificates[i].tenderReferenceList
							api_tenderOutboardReferenceList = json.tradingCertificates[i].tenderOutboardReferenceList
							api_tradingCertificateTypeId = json.tradingCertificates[i].tradingCertificateType.id
							api_tradingCertificateGroupId = json.tradingCertificates[i].tradingCertificateType.tradingCertificateGroup.id
							api_tradingCertificateGroupName = json.tradingCertificates[i].tradingCertificateType.tradingCertificateGroup.name
							api_tradingCertificateGroupCode = json.tradingCertificates[i].tradingCertificateType.tradingCertificateGroup.groupCode
							api_tradingCertificateTypeTypeCode = json.tradingCertificates[i].tradingCertificateType.typeCode
							api_tradingCertificateTypeTypeName = json.tradingCertificates[i].tradingCertificateType.typeName
		
							if(!json.tradingCertificates[i].stateAddress.toString().equals("null"))
							{
								api_stateAddressId= json.tradingCertificates[i].stateAddress.id
								api_stateAddressId= removeComma(api_stateAddressId.toString())
								api_stateAddressName= json.tradingCertificates[i].stateAddress.addressName
								api_stateAddressName= removeComma(api_stateAddressName.toString())
								api_stateAddressLine1= json.tradingCertificates[i].stateAddress.addressLine1
								api_stateAddressLine1= removeComma(api_stateAddressLine1.toString())
								api_stateAddressLine2= json.tradingCertificates[i].stateAddress.addressLine2
								api_stateAddressLine2= removeComma(api_stateAddressLine2.toString())
								api_stateAddressLine3= json.tradingCertificates[i].stateAddress.addressLine3
								api_stateAddressLine3= removeComma(api_stateAddressLine3.toString())
								api_stateAddressStateOrCounty= json.tradingCertificates[i].stateAddress.stateOrCounty
								api_stateAddressStateOrCounty= removeComma(api_stateAddressStateOrCounty.toString())
								api_stateAddressCity= json.tradingCertificates[i].stateAddress.city
								api_stateAddressCity= removeComma(api_stateAddressCity.toString())
								api_stateAddressCountry= json.tradingCertificates[i].stateAddress.country
								api_stateAddressCountry= removeComma(api_stateAddressCountry.toString())
								api_stateAddressPostCode= json.tradingCertificates[i].stateAddress.postCode
								api_stateAddressPostCode= removeComma(api_stateAddressPostCode.toString())
								api_stateAddressPrimaryAddress= json.tradingCertificates[i].stateAddress.primaryAddress
								api_stateAddressPrimaryAddress= removeComma(api_stateAddressPrimaryAddress.toString())
								//log.info "State Address is :"+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress
							}
							else
							{
								api_stateAddressId= "NULL"
								api_stateAddressName= "NULL"
								api_stateAddressLine1= "NULL"
								api_stateAddressLine2= "NULL"
								api_stateAddressLine3= "NULL"
								api_stateAddressStateOrCounty= "NULL"
								api_stateAddressCity= "NULL"
								api_stateAddressCountry= "NULL"
								api_stateAddressPostCode= "NULL"
								api_stateAddressPrimaryAddress= "NULL"
								
							}
							if(!json.tradingCertificates[i].ownerAddress.toString().equals("null"))
							{
								api_ownerAddressId= json.tradingCertificates[i].ownerAddress.id
								api_ownerAddressId= removeComma(api_ownerAddressId.toString())
								api_ownerAddressName= json.tradingCertificates[i].ownerAddress.addressName
								api_ownerAddressName= removeComma(api_ownerAddressName.toString())
								api_ownerAddressLine1= json.tradingCertificates[i].ownerAddress.addressLine1
								api_ownerAddressLine1= removeComma(api_ownerAddressLine1.toString())
								api_ownerAddressLine2= json.tradingCertificates[i].ownerAddress.addressLine2
								api_ownerAddressLine2= removeComma(api_ownerAddressLine2.toString())
								api_ownerAddressLine3= json.tradingCertificates[i].ownerAddress.addressLine3
								api_ownerAddressLine3= removeComma(api_ownerAddressLine3.toString())
								api_ownerAddressStateOrCounty= json.tradingCertificates[i].ownerAddress.stateOrCounty
								api_ownerAddressStateOrCounty= removeComma(api_ownerAddressStateOrCounty.toString())
								api_ownerAddressCity= json.tradingCertificates[i].ownerAddress.city
								api_ownerAddressCity= removeComma(api_ownerAddressCity.toString())
								api_ownerAddressCountry= json.tradingCertificates[i].ownerAddress.country
								api_ownerAddressCountry= removeComma(api_ownerAddressCountry.toString())
								api_ownerAddressPostCode= json.tradingCertificates[i].ownerAddress.postCode
								api_ownerAddressPostCode= removeComma(api_ownerAddressPostCode.toString())
								api_ownerAddressPrimaryAddress= json.tradingCertificates[i].ownerAddress.primaryAddress
								api_ownerAddressPrimaryAddress= removeComma(api_ownerAddressPrimaryAddress.toString())
								//log.info "Owner Address is :"+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress
							}
							else
							{
								api_ownerAddressId= "NULL"
								api_ownerAddressName="NULL"
								api_ownerAddressLine1= "NULL"
								api_ownerAddressLine2= "NULL"
								api_ownerAddressLine3="NULL"
								api_ownerAddressStateOrCounty= "NULL"
								api_ownerAddressCity="NULL"
								api_ownerAddressCountry= "NULL"
								api_ownerAddressPostCode= "NULL"
								api_ownerAddressPrimaryAddress="NULL"
							}
							if(!json.tradingCertificates[i].brokerAddress.toString().equals("null"))
							{
								api_brokerAddressId= json.tradingCertificates[i].brokerAddress.id
								api_brokerAddressId= removeComma(api_brokerAddressId.toString())
								api_brokerAddressName= json.tradingCertificates[i].brokerAddress.addressName
								api_brokerAddressName= removeComma(api_brokerAddressName.toString())
								api_brokerAddressLine1= json.tradingCertificates[i].brokerAddress.addressLine1
								api_brokerAddressLine1= removeComma(api_brokerAddressLine1.toString())
								api_brokerAddressLine2= json.tradingCertificates[i].brokerAddress.addressLine2
								api_brokerAddressLine2= removeComma(api_brokerAddressLine2.toString())
								api_brokerAddressLine3= json.tradingCertificates[i].brokerAddress.addressLine3
								api_brokerAddressLine3= removeComma(api_brokerAddressLine3.toString())
								api_brokerAddressStateOrCounty= json.tradingCertificates[i].brokerAddress.stateOrCounty
								api_brokerAddressStateOrCounty= removeComma(api_brokerAddressStateOrCounty.toString())
								api_brokerAddressCity= json.tradingCertificates[i].brokerAddress.city
								api_brokerAddressCity= removeComma(api_brokerAddressCity.toString())
								api_brokerAddressCountry= json.tradingCertificates[i].brokerAddress.country
								api_brokerAddressCountry= removeComma(api_brokerAddressCountry.toString())
								api_brokerAddressPostCode= json.tradingCertificates[i].brokerAddress.postCode
								api_brokerAddressPostCode= removeComma(api_brokerAddressPostCode.toString())
								api_brokerAddressPrimaryAddress= json.tradingCertificates[i].brokerAddress.primaryAddress
								api_brokerAddressPrimaryAddress= removeComma(api_brokerAddressPrimaryAddress.toString())
								//log.info "Broker Address is :"+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress
							}
							else
							{
								api_brokerAddressId= "NULL"
								api_brokerAddressName="NULL"
								api_brokerAddressLine1= "NULL"
								api_brokerAddressLine2= "NULL"
								api_brokerAddressLine3= "NULL"
								api_brokerAddressStateOrCounty= "NULL"
								api_brokerAddressCity= "NULL"
								api_brokerAddressCountry= "NULL"
								api_brokerAddressPostCode= "NULL"
								api_brokerAddressPrimaryAddress= "NULL"
							}
							
							if(!json.tradingCertificates[i].memberAddress.toString().equals("null"))
							{
								api_memberAddressId= json.tradingCertificates[i].memberAddress.id					
								api_memberAddressId= removeComma(api_memberAddressId.toString())
								api_memberAddressName= json.tradingCertificates[i].memberAddress.addressName
								api_memberAddressName= removeComma(api_memberAddressName.toString())
								api_memberAddressLine1= json.tradingCertificates[i].memberAddress.addressLine1
								api_memberAddressLine1= removeComma(api_memberAddressLine1.toString())
								api_memberAddressLine2= json.tradingCertificates[i].memberAddress.addressLine2
								api_memberAddressLine2= removeComma(api_memberAddressLine2.toString())
								api_memberAddressLine3= json.tradingCertificates[i].memberAddress.addressLine3
								api_memberAddressLine3= removeComma(api_memberAddressLine3.toString())
								api_memberAddressStateOrCounty= json.tradingCertificates[i].memberAddress.stateOrCounty
								api_memberAddressStateOrCounty= removeComma(api_memberAddressStateOrCounty.toString())
								api_memberAddressCity= json.tradingCertificates[i].memberAddress.city
								api_memberAddressCity= removeComma(api_memberAddressCity.toString())
								api_memberAddressCountry= json.tradingCertificates[i].memberAddress.country
								api_memberAddressCountry= removeComma(api_memberAddressCountry.toString())
								api_memberAddressPostCode= json.tradingCertificates[i].memberAddress.postCode
								api_memberAddressPostCode= removeComma(api_memberAddressPostCode.toString())
								api_memberAddressPrimaryAddress= json.tradingCertificates[i].memberAddress.primaryAddress
								api_memberAddressPrimaryAddress= removeComma(api_memberAddressPrimaryAddress.toString())
								//log.info "Member Address is :"+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress
							}
							else
							{
								api_memberAddressId= "NULL"
								api_memberAddressName= "NULL"
								api_memberAddressLine1= "NULL"
								api_memberAddressLine2= "NULL"
								api_memberAddressLine3= "NULL"
								api_memberAddressStateOrCounty= "NULL"
								api_memberAddressCity= "NULL"
								api_memberAddressCountry= "NULL"
								api_memberAddressPostCode= "NULL"
								api_memberAddressPrimaryAddress= "NULL"
							}
							if(!json.tradingCertificates[i].jointAssuredAddress.toString().equals("null"))
							{
								api_jointAssuredAddressId= json.tradingCertificates[i].jointAssuredAddress.id
								api_jointAssuredAddressId= removeComma(api_jointAssuredAddressId.toString())
								api_jointAssuredAddressName= json.tradingCertificates[i].jointAssuredAddress.addressName
								api_jointAssuredAddressName= removeComma(api_jointAssuredAddressName.toString())
								api_jointAssuredAddressLine1= json.tradingCertificates[i].jointAssuredAddress.addressLine1
								api_jointAssuredAddressLine1= removeComma(api_jointAssuredAddressLine1.toString())
								api_jointAssuredAddressLine2= json.tradingCertificates[i].jointAssuredAddress.addressLine2
								api_jointAssuredAddressLine2= removeComma(api_jointAssuredAddressLine2.toString())
								api_jointAssuredAddressLine3= json.tradingCertificates[i].jointAssuredAddress.addressLine3
								api_jointAssuredAddressLine3= removeComma(api_jointAssuredAddressLine3.toString())
								api_jointAssuredAddressStateOrCounty= json.tradingCertificates[i].jointAssuredAddress.stateOrCounty
								api_jointAssuredAddressStateOrCounty= removeComma(api_jointAssuredAddressStateOrCounty.toString())
								api_jointAssuredAddressCity= json.tradingCertificates[i].jointAssuredAddress.city
								api_jointAssuredAddressCity= removeComma(api_jointAssuredAddressCity.toString())
								api_jointAssuredAddressCountry= json.tradingCertificates[i].jointAssuredAddress.country
								api_jointAssuredAddressCountry= removeComma(api_jointAssuredAddressCountry.toString())
								api_jointAssuredAddressPostCode= json.tradingCertificates[i].jointAssuredAddress.postCode
								api_jointAssuredAddressPostCode= removeComma(api_jointAssuredAddressPostCode.toString())
								api_jointAssuredAddressPrimaryAddress= json.tradingCertificates[i].jointAssuredAddress.primaryAddress
								api_jointAssuredAddressPrimaryAddress= removeComma(api_jointAssuredAddressPrimaryAddress.toString())
								//log.info "Joint Assured Address is :"+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress
							}
							else
							{
								api_jointAssuredAddressId= "NULL"
								api_jointAssuredAddressName= "NULL"
								api_jointAssuredAddressLine1= "NULL"
								api_jointAssuredAddressLine2= "NULL"
								api_jointAssuredAddressLine3= "NULL"
								api_jointAssuredAddressStateOrCounty= "NULL"
								api_jointAssuredAddressCity= "NULL"
								api_jointAssuredAddressCountry= "NULL"
								api_jointAssuredAddressPostCode= "NULL"
								api_jointAssuredAddressPrimaryAddress= "NULL"
							}
							//if(json.tradingCertificates[i].branchAddress!=null || !json.tradingCertificates[i].branchAddress.toString().equals(null) || !json.tradingCertificates[i].branchAddress.toString().equals("null"))
							if(!json.tradingCertificates[i].branchAddress.toString().equals("null"))
							{
								api_branchAddressId= json.tradingCertificates[i].branchAddress.id
								api_branchAddressId= removeComma(api_branchAddressId.toString())
								api_branchAddressName= json.tradingCertificates[i].branchAddress.addressName
								api_branchAddressName= removeComma(api_branchAddressName.toString())
								api_branchAddressLine1= json.tradingCertificates[i].branchAddress.addressLine1
								api_branchAddressLine1= removeComma(api_branchAddressLine1.toString())
								api_branchAddressLine2= json.tradingCertificates[i].branchAddress.addressLine2
								api_branchAddressLine2= removeComma(api_branchAddressLine2.toString())
								api_branchAddressLine3= json.tradingCertificates[i].branchAddress.addressLine3
								api_branchAddressLine3= removeComma(api_branchAddressLine3.toString())
								api_branchAddressStateOrCounty= json.tradingCertificates[i].branchAddress.stateOrCounty
								api_branchAddressStateOrCounty= removeComma(api_branchAddressStateOrCounty.toString())
								api_branchAddressCity= json.tradingCertificates[i].branchAddress.city
								api_branchAddressCity= removeComma(api_branchAddressCity.toString())
								api_branchAddressCountry= json.tradingCertificates[i].branchAddress.country
								api_branchAddressCountry= removeComma(api_branchAddressCountry.toString())
								api_branchAddressPostCode= json.tradingCertificates[i].branchAddress.postCode
								api_branchAddressPostCode= removeComma(api_branchAddressPostCode.toString())
								api_branchAddressPrimaryAddress= json.tradingCertificates[i].branchAddress.primaryAddress
								api_branchAddressPrimaryAddress= removeComma(api_branchAddressPrimaryAddress.toString())
								//log.info "Branch Address is :"+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress						
							}
							else
							{
								api_branchAddressId= "NULL"
								api_branchAddressName= "NULL"
								api_branchAddressLine1= "NULL"
								api_branchAddressLine2= "NULL"
								api_branchAddressLine3= "NULL"
								api_branchAddressStateOrCounty= "NULL"
								api_branchAddressCity= "NULL"
								api_branchAddressCountry= "NULL"
								api_branchAddressPostCode= "NULL"
								api_branchAddressPrimaryAddress= "NULL"
							}
						}
						key=api_TCPackId+"_"+api_tradingCertificateId
						
						log.info "API Response is received as =>"+key+","+api_TCPackId+","+api_CreatedByUserEmailAddress+","+api_CreatedDateTime+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_trademarkAndEngineModel+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName+","+api_certificateIssueDate+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_policyStartDate+","+api_policyEndDate+","+api_vesselEnteredDate+","+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress+","+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress+","+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress+","+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress+","+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress+","+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress
						//arrCellVal=[api_TCPackId, api_CreatedByUserEmailAddress,api_CreatedDateTime,api_tradingCertificateId,api_addressTypeId,api_sourceSystem,api_reference,api_currentStatus,api_storageId,api_riskId,api_policyId,api_memberPartyId,api_ownerPartyId,api_brokerPartyId,api_isRenewal,api_isYacht,api_version,api_riskReference,api_policyReference,api_memberReference,api_memberType,api_memberName,api_jointAssuredName,api_ownerReference,api_ownerName,api_ownerDomicile,api_ownerEmailAddress,api_brokerReference,api_brokerName,api_brokerEmailAddress,api_policyYear,api_certificateIssueDate,api_emailAddress,api_ccEmailAddress,api_effectiveStartDate,api_effectiveEndDate,api_passengerCapacity,api_policyStartDate,api_policyEndDate,api_currencyCode,api_coverLimitAmount,api_signatoryStateId,api_vesselName,api_vesselType,api_vesselTypeName,api_vesselEnteredDate,api_vesselFlag,api_imoNumber,api_distinctiveNumbersOrLetters,api_grossTonnage,api_yearBuilt,api_engineHorsePower,api_model,api_engineNo,api_nominatedFlagState,api_nominatedFlagStateName,api_portOfRegistry,api_tenderReferenceList,api_tenderOutboardReferenceList,api_tradingCertificateTypeId,api_tradingCertificateGroupId,api_tradingCertificateGroupName,api_tradingCertificateGroupCode,api_tradingCertificateTypeTypeCode,api_tradingCertificateTypeTypeName,api_certificateIssueDate,api_effectiveStartDate,api_effectiveEndDate,api_policyStartDate,api_policyEndDate,api_vesselEnteredDate,api_stateAddressId,api_stateAddressName,api_stateAddressLine1,api_stateAddressLine2,api_stateAddressLine3,api_stateAddressStateOrCounty,api_stateAddressCity,api_stateAddressCountry,api_stateAddressPostCode,api_stateAddressPrimaryAddress,api_ownerAddressId,api_ownerAddressName,api_ownerAddressLine1,api_ownerAddressLine2,api_ownerAddressLine3,api_ownerAddressStateOrCounty,api_ownerAddressCity,api_ownerAddressCountry,api_ownerAddressPostCode,api_ownerAddressPrimaryAddress,api_brokerAddressId,api_brokerAddressName,api_brokerAddressLine1,api_brokerAddressLine2,api_brokerAddressLine3,api_brokerAddressStateOrCounty,api_brokerAddressCity,api_brokerAddressCountry,api_brokerAddressPostCode,api_brokerAddressPrimaryAddress,api_memberAddressId,api_memberAddressName,api_memberAddressLine1,api_memberAddressLine2,api_memberAddressLine3,api_memberAddressStateOrCounty,api_memberAddressCity,api_memberAddressCountry,api_memberAddressPostCode,api_memberAddressPrimaryAddress,api_jointAssuredAddressId,api_jointAssuredAddressName,api_jointAssuredAddressLine1,api_jointAssuredAddressLine2,api_jointAssuredAddressLine3,api_jointAssuredAddressStateOrCounty,api_jointAssuredAddressCity,api_jointAssuredAddressCountry,api_jointAssuredAddressPostCode,api_jointAssuredAddressPrimaryAddress,api_branchAddressId,api_branchAddressName,api_branchAddressLine1,api_branchAddressLine2,api_branchAddressLine3,api_branchAddressStateOrCounty,api_branchAddressCity,api_branchAddressCountry,api_branchAddressPostCode,api_branchAddressPrimaryAddress];
						arrCellVal=[key, api_TCPackId, api_CreatedByUserEmailAddress,api_CreatedDateTime,api_tradingCertificateId,api_addressTypeId,api_sourceSystem,api_reference,api_currentStatus,api_storageId,api_riskId,api_policyId,api_memberPartyId,api_ownerPartyId,api_brokerPartyId,api_isRenewal,api_isYacht,api_version,api_riskReference,api_policyReference,api_memberReference,api_memberType,api_memberName,api_jointAssuredName,api_ownerReference,api_ownerName,api_ownerDomicile,api_ownerEmailAddress,api_brokerReference,api_brokerName,api_brokerEmailAddress,api_policyYear,api_certificateIssueDate,api_emailAddress,api_ccEmailAddress, api_effectiveStartDate,api_effectiveEndDate,api_passengerCapacity,api_policyStartDate,api_policyEndDate,api_currencyCode,api_coverLimitAmount,api_signatoryStateId,api_vesselName,api_vesselType,api_vesselTypeName,api_vesselEnteredDate,api_vesselFlag,api_imoNumber,api_distinctiveNumbersOrLetters,api_grossTonnage,api_yearBuilt,api_engineHorsePower,api_model,api_engineNo,api_nominatedFlagState,api_nominatedFlagStateName,api_portOfRegistry,api_tenderReferenceList,api_tenderOutboardReferenceList,api_tradingCertificateTypeId,api_tradingCertificateGroupId,api_tradingCertificateGroupName,api_tradingCertificateGroupCode,api_tradingCertificateTypeTypeCode,api_tradingCertificateTypeTypeName,api_stateAddressId,api_stateAddressName,api_stateAddressLine1,api_stateAddressLine2,api_stateAddressLine3,api_stateAddressStateOrCounty,api_stateAddressCity,api_stateAddressCountry,api_stateAddressPostCode,api_stateAddressPrimaryAddress,api_ownerAddressId,api_ownerAddressName,api_ownerAddressLine1,api_ownerAddressLine2,api_ownerAddressLine3,api_ownerAddressStateOrCounty,api_ownerAddressCity,api_ownerAddressCountry,api_ownerAddressPostCode,api_ownerAddressPrimaryAddress,api_brokerAddressId,api_brokerAddressName,api_brokerAddressLine1,api_brokerAddressLine2,api_brokerAddressLine3,api_brokerAddressStateOrCounty,api_brokerAddressCity,api_brokerAddressCountry,api_brokerAddressPostCode,api_brokerAddressPrimaryAddress,api_memberAddressId,api_memberAddressName,api_memberAddressLine1,api_memberAddressLine2,api_memberAddressLine3,api_memberAddressStateOrCounty,api_memberAddressCity,api_memberAddressCountry,api_memberAddressPostCode,api_memberAddressPrimaryAddress,api_jointAssuredAddressId,api_jointAssuredAddressName,api_jointAssuredAddressLine1,api_jointAssuredAddressLine2,api_jointAssuredAddressLine3,api_jointAssuredAddressStateOrCounty,api_jointAssuredAddressCity,api_jointAssuredAddressCountry,api_jointAssuredAddressPostCode,api_jointAssuredAddressPrimaryAddress,api_branchAddressId,api_branchAddressName,api_branchAddressLine1,api_branchAddressLine2,api_branchAddressLine3,api_branchAddressStateOrCounty,api_branchAddressCity,api_branchAddressCountry,api_branchAddressPostCode,api_branchAddressPrimaryAddress];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						total_size++
						counter++
					}
				}
				else if(httpStatusCode.toString().equals("404"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					log.info "API response body has text=>"+response
					arrCellVal=[packId," ", httpStatusCode+"=>"+httpStatus, response]
					RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					total_size++
					counter++
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					total_size++
					counter++
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					total_size++
					counter++
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}
			}
			con.close()	

				//DB compare with API
				int db_startCol=0
				counter=row_start;
				totalColumns = source.getRow(1).getLastCellNum();
				int api_endCol=totalColumns-1
				dsc='Compares API data for Trading Certificate Packs as per Pack Ids with UTOM Database data'
				tcid=tcModuleName.toString()
				RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
				
		}//inner if end
	}//outer if end
}//outer for end
public String  removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field!=null)
		field=field.toUpperCase()
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>TCPackId</con:name><con:value>65</con:value></con:property></con:properties></con:testCase><con:testCase id="70dcc6dd-42f2-4b2b-82c1-7a4ec4cfef8b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_TradingCertificateByTradingCertificateId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="TradCertByTradCertId" id="032fd3a2-efa7-4081-87cd-31655c926e03"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#tradingCertificateId}" methodName="GET_TradingCertificateByCertificateId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TradCertByTradCertId" id="325ac480-28f6-4df9-9f1c-06b0aacf1498" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/89</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="TradingCertificateByTradingCertificateId" id="49242d44-6382-4c50-894f-491f6a0a6b29"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

def api_stateAddressId = api_stateAddressName= api_stateAddressLine1= api_stateAddressLine2= api_stateAddressLine3= api_stateAddressStateOrCounty= api_stateAddressCity= api_stateAddressCountry= api_stateAddressPostCode ="NULL"
def api_stateAddressPrimaryAddress= api_ownerAddressId= api_ownerAddressName= api_ownerAddressLine1= api_ownerAddressLine2= api_ownerAddressLine3= api_ownerAddressStateOrCounty= api_ownerAddressCity= api_ownerAddressCountry= api_ownerAddressPostCode= api_ownerAddressPrimaryAddress= "NULL"
def api_brokerAddressId= api_brokerAddressName= api_brokerAddressLine1= api_brokerAddressLine2= api_brokerAddressLine3= api_brokerAddressStateOrCounty= api_brokerAddressCity= api_brokerAddressCountry= api_brokerAddressPostCode= api_brokerAddressPrimaryAddress= "NULL"
def api_memberAddressId= api_memberAddressName= api_memberAddressLine1= api_memberAddressLine2= api_memberAddressLine3= api_memberAddressStateOrCounty= api_memberAddressCity= api_memberAddressCountry= api_memberAddressPostCode= api_memberAddressPrimaryAddress= "NULL"
def api_jointAssuredAddressId= api_jointAssuredAddressName= api_jointAssuredAddressLine1= api_jointAssuredAddressLine2= api_jointAssuredAddressLine3= api_jointAssuredAddressStateOrCounty= api_jointAssuredAddressCity= api_jointAssuredAddressCountry= api_jointAssuredAddressPostCode= api_jointAssuredAddressPrimaryAddress= "NULL"
def api_branchAddressId= api_branchAddressName= api_branchAddressLine1= api_branchAddressLine2= api_branchAddressLine3= api_branchAddressStateOrCounty= api_branchAddressCity= api_branchAddressCountry= api_branchAddressPostCode= api_branchAddressPrimaryAddress= "NULL"


for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_GET_TradingCertificateByTradingCertificateId"))
		tcModuleName="GET_TradCertsByTradCertId"
	
	if(tcModuleName.toString().equals("GET_TradCertsByTradCertId"))
	{
		log.info "Test Execution started for getting Trading Certificate By Trading Certificate Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader=["TradingCertificateId","AddressType_Id","SourceSystem","Reference","CurrentStatus","StorageId","RiskId","PolicyId","MemberPartyId","OwnerPartyId","BrokerPartyId","IsRenewal","IsYacht","Version","RiskReference","PolicyReference","MemberReference","MemberType","MemberName","JointAssuredName","OwnerReference","OwnerName","OwnerDomicile","OwnerEmailAddress","BrokerReference","BrokerName","BrokerEmailAddress","PolicyYear","CertificateIssueDate","EmailAddress","CcEmailAddress","EffectiveStartDate","EffectiveEndDate","PassengerCapacity","PolicyStartDate","PolicyEndDate","CurrencyCode","CoverLimitAmount","SignatoryState_Id","VesselName","VesselType","VesselTypeName","vesselEnteredDate","vesselFlag","imoNumber","distinctiveNumbersOrLetters","grossTonnage","yearBuilt","engineHorsePower","model","engineNo","NominatedStateFlag","NominatedStateFlagName","portOfRegistry","TenderReferenceList","TenderOutboardReferenceList","TradingCertificateTypeId","TradingCertificateGroupId","TradingCertificateGroupName","TradingCertificateGroupCode","TradingCertificateTypeCode","TradingCertificateTypeName","StateAddressId","StateAddressName","StateAddressLine1","StateAddressLine2","StateAddressLine3","StateStateOrCounty","StateCity","StateCountry","StatePostCode","StateIsPrimaryAddress","OwnerAddressId","OwnerAddressName","OwnerAddressLine1","OwnerAddressLine2","OwnerAddressLine3","OwnerStateOrCounty","OwnerCity","OwnerCountry","OwnerPostCode","OwnerIsPrimaryAddress","BrokerAddressId","BrokerAddressName","BrokerAddressLine1","BrokerAddressLine2","BrokerAddressLine3","BrokerStateOrCounty","BrokerCity","BrokerCountry","BrokerPostCode","BrokerIsPrimaryAddress","MemberAddressId","MemberAddressName","MemberAddressLine1","MemberAddressLine2","MemberAddressLine3","MemberStateOrCounty","MemberCity","MemberCountry","MemberPostCode","MemberIsPrimaryAddress","JointAssuredAddressId","JointAssuredAddressName","JointAssuredAddressLine1","JointAssuredAddressLine2","JointAssuredAddressLine3","JointAssuredStateOrCounty","JointAssuredCity","JointAssuredCountry","JointAssuredPostCode","JointAssuredIsPrimaryAddress","BranchAddressId","BranchAddressName","BranchAddressLine1","BranchAddressLine2","BranchAddressLine3","BranchStateOrCounty","BranchCity","BranchCountry","BranchPostCode","BranchIsPrimaryAddress","BranchCode","TradingCertificatePack_Id","Status"]
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			String getTCId=
			"""
			select
			TOP 50
			TC.Id as TradingCertificateId, TC.AddressType_Id,TC.SourceSystem,TC.Reference, TC.CurrentStatus, 
			TC.StorageId, TC.RiskId, TC.ApplicationRiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId, 
			case when TC.IsOwner =0 then 'FALSE' when TC.IsOwner =0 then 'TRUE' else NULL end as IsOwner, TC.BrokerContactPartyId,  TC.JointAssuredPartyId, 
			case when TC.IsRenewal = 1 then 'TRUE'    when TC.IsRenewal = 0 then 'FALSE' else NULL end as IsRenewal,
			case when TC.IsYacht = 1 then 'TRUE' when TC.IsYacht = 0 then 'FALSE' else NULL end as IsYacht,TC.TradingCertificateVersion as Version,
			TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,TC.JointAssuredName, TC.OwnerReference,
			TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,TC.PolicyYear, TC.CertificateIssueDate,
			TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity, TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,
			TC.SignatoryState_Id, TC.SignatoryStateAddressId, TC.VesselName,TC.VesselType,TC.VesselTypeName, TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,
			TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower, TC.TradeMark, TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList,
			TC.TenderOutboardReferenceList, TC.Type_Id as TradingCertificateTypeId,RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode,
			RT.TypeCode, RT.Name as TypeName, TC.BranchCode, TC.TradingCertificatePack_Id
			from TradingCertificate TC
			inner join ref_Type RT on RT.Id=TC.Type_Id
			inner join ref_Group RG on RG.Id=RT.Group_Id
			left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id and BS.IsDeleted = 0
			Order by 1 desc
			"""
			String oldTCId=null
			con.eachRow(getTCId)
			{
				getTC->
				TCId=getTC.TradingCertificateId
				
				if(oldTCId!=TCId.toString())	
				{
					String sqlstmt=
					"""
					declare
					@TCID as int = '"""+TCId+"""'
					select
					TOP 10
					TC.Id as TradingCertificateId, TC.AddressType_Id,TC.SourceSystem,TC.Reference, TC.CurrentStatus, 
					TC.StorageId, TC.RiskId, TC.ApplicationRiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId, 
					case when TC.IsOwner =0 then 'FALSE' when TC.IsOwner =0 then 'TRUE' else NULL end as IsOwner, TC.BrokerContactPartyId,  TC.JointAssuredPartyId, 
					case when TC.IsRenewal = 1 then 'TRUE'    when TC.IsRenewal = 0 then 'FALSE' else NULL end as IsRenewal,
					case when TC.IsYacht = 1 then 'TRUE' when TC.IsYacht = 0 then 'FALSE' else NULL end as IsYacht,TC.TradingCertificateVersion as Version,
					TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,TC.JointAssuredName, TC.OwnerReference,
					TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,TC.PolicyYear, TC.CertificateIssueDate,
					TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity, TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,
					TC.SignatoryState_Id, TC.SignatoryStateAddressId, TC.VesselName,TC.VesselType,TC.VesselTypeName, TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,
					TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower, TC.TradeMark, TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList,
					TC.TenderOutboardReferenceList, TC.Type_Id as TradingCertificateTypeId,RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode,
					RT.TypeCode, RT.Name as TypeName, TC.BranchCode, TC.TradingCertificatePack_Id
					from TradingCertificate TC
					inner join ref_Type RT on RT.Id=TC.Type_Id
					inner join ref_Group RG on RG.Id=RT.Group_Id
					left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id and BS.IsDeleted = 0
					where TC.Id=@TCID
					Order by 1 desc
					"""	
					log.info "Checking for Trading Certificate Id =>"+TCId
					
					rows=con.rows(sqlstmt) 
					arrCellVal=['DB data']
					
					RT.writeDetails(source,0,0,headerStyle,arrCellVal)
					
					headerStyle = RT.getCellStyle(O_Summary,'Header');
					RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
					
					def arrData;
					//DB sheet start
					con.eachRow(sqlstmt) 
					{ 
						row->
							sql_TradingCertificateId=row.TradingCertificateId
							sql_AddressType_Id=row.AddressType_Id
							sql_SourceSystem=row.SourceSystem
							sql_Reference=row.Reference
							sql_CurrentStatus=row.CurrentStatus
							sql_StorageId=row.StorageId
							sql_RiskId=row.RiskId
							sql_ApplicationRiskId=row.ApplicationRiskId
							sql_PolicyId=row.PolicyId
							sql_MemberPartyId=row.MemberPartyId
							sql_OwnerPartyId=row.OwnerPartyId
							sql_BrokerPartyId=row.BrokerPartyId
							sql_IsOwner=row.IsOwner
							sql_BrokerContactPartyId=row.BrokerContactPartyId
							sql_JointAssuredPartyId=row.JointAssuredPartyId
							sql_IsRenewal=row.IsRenewal
							sql_IsYacht=row.IsYacht
							sql_Version=row.Version
							sql_RiskReference=row.RiskReference
							sql_PolicyReference=row.PolicyReference
							sql_MemberReference=row.MemberReference
							sql_MemberType=row.MemberType
							sql_MemberName=row.MemberName
							sql_MemberName = removeComma(sql_MemberName.toString())
							sql_JointAssuredName=row.JointAssuredName
							sql_JointAssuredName= removeComma(sql_JointAssuredName.toString())
							sql_OwnerReference=row.OwnerReference
							sql_OwnerName=row.OwnerName
							sql_OwnerName = removeComma(sql_OwnerName.toString())
							sql_OwnerDomicile=row.OwnerDomicile
							sql_OwnerEmailAddress=row.OwnerEmailAddress
							sql_BrokerReference=row.BrokerReference
							sql_BrokerName=row.BrokerName
							sql_BrokerName = removeComma(sql_BrokerName.toString())
							sql_BrokerEmailAddress=row.BrokerEmailAddress
							sql_PolicyYear=row.PolicyYear
							sql_CertificateIssueDate=row.CertificateIssueDate
							if(sql_CertificateIssueDate!=null)
							{
								sql_CertificateIssueDate=sql_CertificateIssueDate.toString().replace(" ", "T")
								sql_CertificateIssueDate=getDate(sql_CertificateIssueDate.toString())
							}
							else 
								sql_CertificateIssueDate="NULL"
							sql_EmailAddress=row.EmailAddress
							sql_CcEmailAddress=row.CcEmailAddress
							sql_EffectiveStartDate=row.EffectiveStartDate
							if(sql_EffectiveStartDate!=null)
							{
								sql_EffectiveStartDate=sql_EffectiveStartDate.toString().replace(" ", "T")
								sql_EffectiveStartDate=getDate(sql_EffectiveStartDate.toString())
							}
							else 
								sql_EffectiveStartDate="NULL"
							sql_EffectiveEndDate=row.EffectiveEndDate
							if(sql_EffectiveEndDate!=null)
							{
								sql_EffectiveEndDate=sql_EffectiveEndDate.toString().replace(" ", "T")
								sql_EffectiveEndDate=getDate(sql_EffectiveEndDate.toString())
							}
							else 
								sql_EffectiveEndDate="NULL"
							sql_PassengerCapacity=row.PassengerCapacity
							sql_PolicyStartDate=row.PolicyStartDate
							if(sql_PolicyStartDate!=null)
							{
								sql_PolicyStartDate=sql_PolicyStartDate.toString().replace(" ", "T")
								sql_PolicyStartDate=getDate(sql_PolicyStartDate.toString())
							}
							else 
								sql_PolicyStartDate="NULL"
							sql_PolicyEndDate=row.PolicyEndDate
							if(sql_PolicyEndDate!=null)
							{
								sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" ", "T")
								sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())
							}
							else 
								sql_PolicyEndDate="NULL"
							sql_CurrencyCode=row.CurrencyCode
							sql_CurrencyCode= removeComma(sql_CurrencyCode.toString())						
							sql_CoverLimitAmount=row.CoverLimitAmount
							sql_CoverLimitAmount = removeDotFromCurrency(sql_CoverLimitAmount.toString())
							sql_CoverLimitAmount = removeComma(sql_CoverLimitAmount.toString())
							sql_SignatoryState_Id=row.SignatoryState_Id
							sql_SignatoryStateAddressId=row.SignatoryStateAddressId
							sql_VesselName=row.VesselName
							sql_VesselName = removeComma(sql_VesselName.toString())
							sql_VesselType=row.VesselType
							sql_VesselTypeName=row.VesselTypeName
							sql_vesselEnteredDate=row.vesselEnteredDate
							if(sql_vesselEnteredDate!=null)
							{
								sql_vesselEnteredDate=sql_vesselEnteredDate.toString().replace(" ", "T")
								sql_vesselEnteredDate=getDate(sql_vesselEnteredDate.toString())
							}
							else 
								sql_vesselEnteredDate="NULL"
							sql_vesselFlag=row.vesselFlag
							sql_imoNumber=row.imoNumber
							sql_distinctiveNumbersOrLetters=row.distinctiveNumbersOrLetters
							sql_distinctiveNumbersOrLetters=removeComma(sql_distinctiveNumbersOrLetters.toString())
							sql_grossTonnage=row.grossTonnage
							sql_yearBuilt=row.yearBuilt
							sql_engineHorsePower=row.engineHorsePower
							sql_TradeMark=row.TradeMark
							sql_model=row.model
							sql_engineNo=row.engineNo
							sql_NominatedStateFlag=row.NominatedStateFlag
							sql_NominatedStateFlag= removeComma(sql_NominatedStateFlag.toString())
							sql_NominatedStateFlagName=row.NominatedStateFlagName
							sql_NominatedStateFlagName = removeComma(sql_NominatedStateFlagName.toString())
							sql_portOfRegistry=row.portOfRegistry
							sql_portOfRegistry = removeComma(sql_portOfRegistry.toString())
							sql_TenderReferenceList=row.tenderReferenceList
							sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
							sql_TradingCertificateTypeId=row.TradingCertificateTypeId
							sql_TradingCertificateGroupId=row.TradingCertificateGroupId
							sql_TradingCertificateGroupName=row.TradingCertificateGroupName
							sql_TradingCertificateGroupCode=row.TradingCertificateGroupCode
							sql_TradingCertificateTypeCode=row.TypeCode
							sql_TradingCertificateTypeName=row.TypeName
							sql_BranchCode=row.BranchCode
							sql_TradingCertificatePack_Id=row.TradingCertificatePack_Id
							sql_TradingCertificatePack_Id= removeComma(sql_TradingCertificatePack_Id.toString())
							
							String getStateAddressSQL =
							"""						
							declare
							@tradCertId as int = """+sql_TradingCertificateId+"""
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='SIGNATORYSTATE'
							 and TC.Id=@tradCertId
							 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getStateAddressSQL)
							{
								getRows->
								sql_StateAddressId=getRows.AddressId
								sql_StateAddressId = removeComma(sql_StateAddressId.toString())
								sql_StateAddressName=getRows.AddressName
								sql_StateAddressName = removeComma(sql_StateAddressName.toString())
								sql_StateAddressLine1=getRows.AddressLine1
								sql_StateAddressLine1 = removeComma(sql_StateAddressLine1.toString())
								sql_StateAddressLine2=getRows.AddressLine2
								sql_StateAddressLine2 = removeComma(sql_StateAddressLine2.toString())
								sql_StateAddressLine3=getRows.AddressLine3
								sql_StateAddressLine3 = removeComma(sql_StateAddressLine3.toString())
								sql_StateStateOrCounty=getRows.StateOrCounty
								sql_StateStateOrCounty = removeComma(sql_StateStateOrCounty.toString())
								sql_StateCity=getRows.City
								sql_StateCity = removeComma(sql_StateCity.toString())
								sql_StateCountry=getRows.Country
								sql_StateCountry = removeComma(sql_StateCountry.toString())
								sql_StatePostCode=getRows.PostCode
								sql_StatePostCode = removeComma(sql_StatePostCode.toString())
								sql_StateIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_StateIsPrimaryAddress = removeComma(sql_StateIsPrimaryAddress.toString())
								//log.info "State Address is received as ==> "+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress
							}
						
							String getOwnerAddressSQL =
							"""
							declare
							@tradCertId as int = '"""+sql_TradingCertificateId+"""'
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='OWNER'
							 and TC.Id=@tradCertId
							 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getOwnerAddressSQL)
							{
								getRows->
								sql_OwnerAddressId=getRows.AddressId
								sql_OwnerAddressId = removeComma(sql_OwnerAddressId.toString())
								sql_OwnerAddressName=getRows.AddressName
								sql_OwnerAddressName = removeComma(sql_OwnerAddressName.toString())
								sql_OwnerAddressLine1=getRows.AddressLine1
								sql_OwnerAddressLine1 = removeComma(sql_OwnerAddressLine1.toString())
								sql_OwnerAddressLine2=getRows.AddressLine2
								sql_OwnerAddressLine2 = removeComma(sql_OwnerAddressLine2.toString())
								sql_OwnerAddressLine3=getRows.AddressLine3
								sql_OwnerAddressLine3 = removeComma(sql_OwnerAddressLine3.toString())
								sql_OwnerStateOrCounty=getRows.StateOrCounty
								sql_OwnerStateOrCounty = removeComma(sql_OwnerStateOrCounty.toString())
								sql_OwnerCity=getRows.City
								sql_OwnerCity = removeComma(sql_OwnerCity.toString())
								sql_OwnerCountry=getRows.Country
								sql_OwnerCountry = removeComma(sql_OwnerCountry.toString())
								sql_OwnerPostCode=getRows.PostCode
								sql_OwnerPostCode = removeComma(sql_OwnerPostCode.toString())
								sql_OwnerIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_OwnerIsPrimaryAddress = removeComma(sql_OwnerIsPrimaryAddress.toString())
								//log.info "Owner Address is received as ==> "+sql_OwnerAddressTypeName+","+sql_OwnerAddressTypeId+","+sql_OwnerTradingCertificateId+","+sql_OwnerRiskReference+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressName+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress	
							}
						
							String getBrokerAddressSQL =
							"""
							declare
							@tradCertId as int = '"""+sql_TradingCertificateId+"""'
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='BROKER'
							 and TC.Id=@tradCertId
							 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getBrokerAddressSQL)
							{
								getRows->
								sql_BrokerAddressId=getRows.AddressId
								sql_BrokerAddressId = removeComma(sql_BrokerAddressId.toString())
								sql_BrokerAddressName=getRows.AddressName
								sql_BrokerAddressName = removeComma(sql_BrokerAddressName.toString())
								sql_BrokerAddressLine1=getRows.AddressLine1
								sql_BrokerAddressLine1 = removeComma(sql_BrokerAddressLine1.toString())
								sql_BrokerAddressLine2=getRows.AddressLine2
								sql_BrokerAddressLine2 = removeComma(sql_BrokerAddressLine2.toString())
								sql_BrokerAddressLine3=getRows.AddressLine3
								sql_BrokerAddressLine3 = removeComma(sql_BrokerAddressLine3.toString())
								sql_BrokerStateOrCounty=getRows.StateOrCounty
								sql_BrokerStateOrCounty = removeComma(sql_BrokerStateOrCounty.toString())
								sql_BrokerCity=getRows.City
								sql_BrokerCity = removeComma(sql_BrokerCity.toString())
								sql_BrokerCountry=getRows.Country
								sql_BrokerCountry = removeComma(sql_BrokerCountry.toString())
								sql_BrokerPostCode=getRows.PostCode
								sql_BrokerPostCode = removeComma(sql_BrokerPostCode.toString())
								sql_BrokerIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_BrokerIsPrimaryAddress = removeComma(sql_BrokerIsPrimaryAddress.toString())
								//log.info "Broker Address is received as ==> "+sql_BrokerAddressTypeName+","+sql_BrokerAddressTypeId+","+sql_BrokerTradingCertificateId+","+sql_BrokerRiskReference+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressName+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress	
							}
						
								String getMemberAddressSQL =
							"""
							declare
							@tradCertId as int = """+sql_TradingCertificateId+"""
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='MEMBER'
							 and TC.Id=@tradCertId
							 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getMemberAddressSQL)
							{
								getRows->
								sql_MemberAddressId=getRows.AddressId
								sql_MemberAddressId = removeComma(sql_MemberAddressId.toString())
								sql_MemberAddressName=getRows.AddressName
								sql_MemberAddressName = removeComma(sql_MemberAddressName.toString())
								sql_MemberAddressLine1=getRows.AddressLine1
								sql_MemberAddressLine1 = removeComma(sql_MemberAddressLine1.toString())
								sql_MemberAddressLine2=getRows.AddressLine2
								sql_MemberAddressLine2 = removeComma(sql_MemberAddressLine2.toString())
								sql_MemberAddressLine3=getRows.AddressLine3
								sql_MemberAddressLine3 = removeComma(sql_MemberAddressLine3.toString())
								sql_MemberStateOrCounty=getRows.StateOrCounty
								sql_MemberStateOrCounty = removeComma(sql_MemberStateOrCounty.toString())
								sql_MemberCity=getRows.City
								sql_MemberCity = removeComma(sql_MemberCity.toString())
								sql_MemberCountry=getRows.Country
								sql_MemberCountry = removeComma(sql_MemberCountry.toString())
								sql_MemberPostCode=getRows.PostCode
								sql_MemberPostCode = removeComma(sql_MemberPostCode.toString())
								sql_MemberIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_MemberIsPrimaryAddress = removeComma(sql_MemberIsPrimaryAddress.toString())
								//log.info "Member Address is received as ==> "+sql_MemberAddressTypeName+","+sql_MemberAddressTypeId+","+sql_MemberTradingCertificateId+","+sql_MemberRiskReference+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressName+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress	
							}
							String getJointAssuredAddressSQL =
							"""
							declare
							@tradCertId as int = """+sql_TradingCertificateId+"""
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='JOINTASSURED'
							and TC.Id=@tradCertId
							union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getJointAssuredAddressSQL)
							{
								getRows->
								sql_JointAssuredAddressId=getRows.AddressId
								sql_JointAssuredAddressId = removeComma(sql_JointAssuredAddressId.toString())
								sql_JointAssuredAddressName=getRows.AddressName
								sql_JointAssuredAddressName = removeComma(sql_JointAssuredAddressName.toString())
								sql_JointAssuredAddressLine1=getRows.AddressLine1
								sql_JointAssuredAddressLine1 = removeComma(sql_JointAssuredAddressLine1.toString())
								sql_JointAssuredAddressLine2=getRows.AddressLine2
								sql_JointAssuredAddressLine2 = removeComma(sql_JointAssuredAddressLine2.toString())
								sql_JointAssuredAddressLine3=getRows.AddressLine3
								sql_JointAssuredAddressLine3 = removeComma(sql_JointAssuredAddressLine3.toString())
								sql_JointAssuredStateOrCounty=getRows.StateOrCounty
								sql_JointAssuredStateOrCounty = removeComma(sql_JointAssuredStateOrCounty.toString())
								sql_JointAssuredCity=getRows.City
								sql_JointAssuredCity = removeComma(sql_JointAssuredCity.toString())
								sql_JointAssuredCountry=getRows.Country
								sql_JointAssuredCountry = removeComma(sql_JointAssuredCountry.toString())
								sql_JointAssuredPostCode=getRows.PostCode
								sql_JointAssuredPostCode = removeComma(sql_JointAssuredPostCode.toString())
								sql_JointAssuredIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_JointAssuredIsPrimaryAddress = removeComma(sql_JointAssuredIsPrimaryAddress.toString())
								//log.info "JointAssured Address is received as ==> "+sql_JointAssuredAddressTypeName+","+sql_JointAssuredAddressTypeId+","+sql_JointAssuredTradingCertificateId+","+sql_JointAssuredRiskReference+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressName+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress	
							}
						
							String getBranchAddressSQL =
							"""
							declare
							@tradCertId as int = """+sql_TradingCertificateId+"""
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='BRANCH'
							and TC.Id=@tradCertId
							union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getBranchAddressSQL)
							{
								getRows->
								sql_BranchAddressId=getRows.AddressId
								sql_BranchAddressId = removeComma(sql_BranchAddressId.toString())
								sql_BranchAddressName=getRows.AddressName
								sql_BranchAddressName = removeComma(sql_BranchAddressName.toString())
								sql_BranchAddressLine1=getRows.AddressLine1
								sql_BranchAddressLine1 = removeComma(sql_BranchAddressLine1.toString())
								sql_BranchAddressLine2=getRows.AddressLine2
								sql_BranchAddressLine2 = removeComma(sql_BranchAddressLine2.toString())
								sql_BranchAddressLine3=getRows.AddressLine3
								sql_BranchAddressLine3 = removeComma(sql_BranchAddressLine3.toString())
								sql_BranchStateOrCounty=getRows.StateOrCounty
								sql_BranchStateOrCounty = removeComma(sql_BranchStateOrCounty.toString())
								sql_BranchCity=getRows.City
								sql_BranchCity = removeComma(sql_BranchCity.toString())
								sql_BranchCountry=getRows.Country
								sql_BranchCountry = removeComma(sql_BranchCountry.toString())
								sql_BranchPostCode=getRows.PostCode
								sql_BranchPostCode = removeComma(sql_BranchPostCode.toString())
								sql_BranchIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_BranchIsPrimaryAddress = removeComma(sql_BranchIsPrimaryAddress.toString())
								//log.info "Branch Address is received as ==> "+sql_BranchAddressTypeName+","+sql_BranchAddressTypeId+","+sql_BranchTradingCertificateId+","+sql_BranchRiskReference+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressName+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress	
							}
			
							log.info "SQL Response is received as =>"+sql_TradingCertificateId+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressLine3+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressLine3+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressLine3+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressLine3+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressLine3+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressLine3+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress+","+sql_BranchCode+","+sql_TradingCertificatePack_Id
							arrCellVal=[sql_TradingCertificateId,sql_AddressType_Id,sql_SourceSystem,sql_Reference,sql_CurrentStatus,sql_StorageId,sql_RiskId,sql_PolicyId,sql_MemberPartyId,sql_OwnerPartyId,sql_BrokerPartyId,sql_IsRenewal,sql_IsYacht,sql_Version,sql_RiskReference,sql_PolicyReference,sql_MemberReference,sql_MemberType,sql_MemberName,sql_JointAssuredName,sql_OwnerReference,sql_OwnerName,sql_OwnerDomicile,sql_OwnerEmailAddress,sql_BrokerReference,sql_BrokerName,sql_BrokerEmailAddress,sql_PolicyYear,sql_CertificateIssueDate,sql_EmailAddress,sql_CcEmailAddress,sql_EffectiveStartDate,sql_EffectiveEndDate,sql_PassengerCapacity,sql_PolicyStartDate,sql_PolicyEndDate,sql_CurrencyCode,sql_CoverLimitAmount,sql_SignatoryState_Id,sql_VesselName,sql_VesselType,sql_VesselTypeName,sql_vesselEnteredDate,sql_vesselFlag,sql_imoNumber,sql_distinctiveNumbersOrLetters,sql_grossTonnage,sql_yearBuilt,sql_engineHorsePower,sql_TradeMark,sql_model,sql_engineNo,sql_NominatedStateFlag,sql_NominatedStateFlagName,sql_portOfRegistry,sql_TenderReferenceList,sql_TenderOutboardReferenceList,sql_TradingCertificateTypeId,sql_TradingCertificateGroupId,sql_TradingCertificateGroupName,sql_TradingCertificateGroupCode,sql_TradingCertificateTypeCode,sql_TradingCertificateTypeName,sql_BranchCode,sql_TradingCertificatePack_Id,sql_StateAddressId,sql_StateAddressName,sql_StateAddressLine1,sql_StateAddressLine2,sql_StateAddressLine3,sql_StateStateOrCounty,sql_StateCity,sql_StateCountry,sql_StatePostCode,sql_StateIsPrimaryAddress,sql_OwnerAddressId,sql_OwnerAddressName,sql_OwnerAddressLine1,sql_OwnerAddressLine2,sql_OwnerAddressLine3,sql_OwnerStateOrCounty,sql_OwnerCity,sql_OwnerCountry,sql_OwnerPostCode,sql_OwnerIsPrimaryAddress,sql_BrokerAddressId,sql_BrokerAddressName,sql_BrokerAddressLine1,sql_BrokerAddressLine2,sql_BrokerAddressLine3,sql_BrokerStateOrCounty,sql_BrokerCity,sql_BrokerCountry,sql_BrokerPostCode,sql_BrokerIsPrimaryAddress,sql_MemberAddressId,sql_MemberAddressName,sql_MemberAddressLine1,sql_MemberAddressLine2,sql_MemberAddressLine3,sql_MemberStateOrCounty,sql_MemberCity,sql_MemberCountry,sql_MemberPostCode,sql_MemberIsPrimaryAddress,sql_JointAssuredAddressId,sql_JointAssuredAddressName,sql_JointAssuredAddressLine1,sql_JointAssuredAddressLine2,sql_JointAssuredAddressLine3,sql_JointAssuredStateOrCounty,sql_JointAssuredCity,sql_JointAssuredCountry,sql_JointAssuredPostCode,sql_JointAssuredIsPrimaryAddress,sql_BranchAddressId,sql_BranchAddressName,sql_BranchAddressLine1,sql_BranchAddressLine2,sql_BranchAddressLine3,sql_BranchStateOrCounty,sql_BranchCity,sql_BranchCountry,sql_BranchPostCode,sql_BranchIsPrimaryAddress];
							RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
							db_size++
							counter++

							try
							{
								RT.saveExcelFile(summary_File,O_Summary)
							}
							catch(Exception e) 
							{
								log.info e.toString();
							}
					}//inner sql end
				}//if condition end
			}//outer sql end
			
			totalColumns = source.getRow(1).getLastCellNum()
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start

			con.eachRow(getTCId)
			{
					getTCrow->
					TCId=getTCrow.TradingCertificateId
					
					log.info "Getting api values for Trading Certificate Id =>"+TCId
					testRunner.testCase.setPropertyValue('tradingCertificateId', TCId.toString())
					testRunner.testCase.setPropertyValue('token',token)
						
					//API
					testRunner.runTestStepByName('TradCertByTradCertId')
					String req='${TradCertByTradCertId#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
			
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["TradCertByTradCertId"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
			
					arrCellVal=['API DATA']
					RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
					RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
					log.info "Original API response is =>"+response
					log.info "HTTP Status code received as =>"+httpStatusCode
						
					if(httpStatusCode.toString().equals("200"))
					{
						def json=jsonSlurper.parseText(response)	
						//size=json.tradingCertificates.id.size()
						
						log.info "API value for TCID->"+json.id.toString()
						log.info "DB  value for TCID->"+TCId.toString()
	
						api_tradingCertificateId =  json.id
						api_addressTypeId =  json.addressTypeId
						api_sourceSystem =  json.sourceSystem
						api_sourceSystem= removeComma(api_sourceSystem.toString())
						api_reference =  json.reference
						api_reference= removeComma(api_reference.toString())
						api_currentStatus =  json.currentStatus
						api_currentStatus= removeComma(api_currentStatus.toString())
						api_storageId =  json.storageId
						api_riskId =  json.riskId
						api_policyId =  json.policyId
						api_memberPartyId =  json.memberPartyId
						api_ownerPartyId =  json.ownerPartyId
						api_brokerPartyId =  json.brokerPartyId
						api_isRenewal =  json.isRenewal
						api_isRenewal= removeComma(api_isRenewal.toString())
						api_isYacht =  json.isYacht
						api_isYacht= removeComma(api_isYacht.toString())
						api_version =  json.version
						api_riskReference =  json.riskReference
						api_policyReference =  json.policyReference
						api_memberReference =  json.memberReference
						api_memberType =  json.memberType
						api_memberName =  json.memberName
						api_memberName=  removeComma(api_memberName.toString())
						api_jointAssuredName =  json.jointAssuredName
						api_jointAssuredName=  removeComma(api_jointAssuredName.toString())
						api_ownerReference =  json.ownerReference
						api_ownerName =  json.ownerName
						api_ownerName=  removeComma(api_ownerName.toString())
						api_ownerDomicile =  json.ownerDomicile
						api_ownerEmailAddress =  json.ownerEmailAddress
						api_brokerReference =  json.brokerReference
						api_brokerName =  json.brokerName
						api_brokerName=  removeComma(api_brokerName.toString())
						api_brokerEmailAddress =  json.brokerEmailAddress
						api_policyYear =  json.policyYear
						api_certificateIssueDate =  json.certificateIssueDate
						if(api_certificateIssueDate!=null)
						{
							api_certificateIssueDate=getDate(api_certificateIssueDate.toString())
							api_certificateIssueDate=removeComma(api_certificateIssueDate.toString())
						}
						else 
							api_certificateIssueDate="NULL"
						api_emailAddress =  json.emailAddress
						api_ccEmailAddress =  json.ccEmailAddress
						api_effectiveStartDate =  json.effectiveStartDate
						if(api_effectiveStartDate!=null)
						{
							api_effectiveStartDate=getDate(api_effectiveStartDate.toString())
							api_effectiveStartDate=removeComma(api_effectiveStartDate.toString())
						}
						else 
							api_effectiveStartDate="NULL"
						api_effectiveEndDate=  json.effectiveEndDate
						if(api_effectiveEndDate!=null)
						{
							api_effectiveEndDate=getDate(api_effectiveEndDate.toString())
							api_effectiveEndDate=removeComma(api_effectiveEndDate.toString())
						}
						else 
							api_effectiveEndDate="NULL"
						api_passengerCapacity =  json.passengerCapacity
						api_policyStartDate =  json.policyStartDate
						if(api_policyStartDate!=null)
						{
							api_policyStartDate=getDate(api_policyStartDate.toString())
							api_policyStartDate=removeComma(api_policyStartDate.toString())
						}
						else 
							api_policyStartDate="NULL"
						api_policyEndDate =  json.policyEndDate
						if(api_policyEndDate!=null)
						{
							api_policyEndDate=getDate(api_policyEndDate.toString())
							api_policyEndDate=removeComma(api_policyEndDate.toString())
						}
						else 
							api_policyEndDate="NULL"
						api_currencyCode =  json.currencyCode
						api_currencyCode= removeComma(api_currencyCode.toString())
						api_coverLimitAmount =  json.coverLimitAmount
						api_coverLimitAmount =  removeDotFromCurrency(api_coverLimitAmount.toString())
						api_coverLimitAmount= removeComma(api_coverLimitAmount.toString())
						api_signatoryStateId =  json.signatoryStateId
						api_vesselName =  json.vesselName
						api_vesselName=  removeComma(api_vesselName.toString())
						api_vesselType =  json.vesselType
						api_vesselType= removeComma(api_vesselType.toString())
						api_vesselTypeName =  json.vesselTypeName
						api_vesselTypeName= removeComma(api_vesselTypeName.toString())
						api_vesselEnteredDate =  json.vesselEnteredDate
						if(api_vesselEnteredDate!=null)
						{
							api_vesselEnteredDate=getDate(api_vesselEnteredDate.toString())
							api_vesselEnteredDate=removeComma(api_vesselEnteredDate.toString())
						}
						else 
							api_vesselEnteredDate="NULL"
						api_vesselFlag =  json.vesselFlag
						api_vesselFlag= removeComma(api_vesselFlag.toString())
						api_imoNumber =  json.imoNumber
						api_distinctiveNumbersOrLetters =  json.distinctiveNumbersOrLetters
						api_distinctiveNumbersOrLetters= removeComma(api_distinctiveNumbersOrLetters.toString())
						api_grossTonnage =  json.grossTonnage
						api_yearBuilt =  json.yearBuilt
						api_engineHorsePower =  json.engineHorsePower
						api_trademarkAndEngineModel =  json.trademarkAndEngineModel
						api_model =  json.model
						api_engineNo =  json.engineNo
						api_nominatedFlagState =  json.nominatedFlagState
						api_nominatedFlagState= removeComma(api_nominatedFlagState.toString())
						api_nominatedFlagStateName =  json.nominatedFlagStateName
						api_nominatedFlagStateName =  removeComma(api_nominatedFlagStateName.toString())
						api_portOfRegistry =  json.portOfRegistry
						api_portOfRegistry =  removeComma(api_portOfRegistry.toString())
						api_tenderReferenceList =  json.tenderReferenceList
						api_tenderOutboardReferenceList =  json.tenderOutboardReferenceList
						api_tradingCertificateTypeId =  json.tradingCertificateType.id
						api_tradingCertificateGroupId =  json.tradingCertificateType.tradingCertificateGroup.id
						api_tradingCertificateGroupName =  json.tradingCertificateType.tradingCertificateGroup.name
						api_tradingCertificateGroupCode =  json.tradingCertificateType.tradingCertificateGroup.groupCode
						api_tradingCertificateTypeTypeCode =  json.tradingCertificateType.typeCode
						api_tradingCertificateTypeTypeName =  json.tradingCertificateType.typeName
						api_branchCode= json.branchCode
						api_tradingCertificatePackId= json.tradingCertificatePackId
						api_tradingCertificatePackId =  removeComma(api_tradingCertificatePackId.toString())
						api_stateAddress=json.stateAddress
						api_stateAddress=removeComma(api_stateAddress.toString())
						api_ownerAddress=json.ownerAddress
						api_ownerAddress=removeComma(api_ownerAddress.toString())
						api_brokerAddress=json.brokerAddress
						api_brokerAddress=removeComma(api_brokerAddress.toString())
						api_memberAddress=json.memberAddress
						api_memberAddress=removeComma(api_memberAddress.toString())
						api_jointAssuredAddress=json.jointAssuredAddress
						api_jointAssuredAddress=removeComma(api_jointAssuredAddress.toString())
						api_branchAddress=json.branchAddress
						api_branchAddress=removeComma(api_branchAddress.toString())
					
						if(!api_stateAddress.toString().equals("NULL"))
						{
							api_stateAddressId= json.stateAddress.id
							api_stateAddressId= removeComma(api_stateAddressId.toString())
							api_stateAddressName= json.stateAddress.addressName
							api_stateAddressName= removeComma(api_stateAddressName.toString())
							api_stateAddressLine1= json.stateAddress.addressLine1
							api_stateAddressLine1= removeComma(api_stateAddressLine1.toString())
							api_stateAddressLine2= json.stateAddress.addressLine2
							api_stateAddressLine2= removeComma(api_stateAddressLine2.toString())
							api_stateAddressLine3= json.stateAddress.addressLine3
							api_stateAddressLine3= removeComma(api_stateAddressLine3.toString())
							api_stateAddressStateOrCounty= json.stateAddress.stateOrCounty
							api_stateAddressStateOrCounty= removeComma(api_stateAddressStateOrCounty.toString())
							api_stateAddressCity= json.stateAddress.city
							api_stateAddressCity= removeComma(api_stateAddressCity.toString())
							api_stateAddressCountry= json.stateAddress.country
							api_stateAddressCountry= removeComma(api_stateAddressCountry.toString())
							api_stateAddressPostCode= json.stateAddress.postCode
							api_stateAddressPostCode= removeComma(api_stateAddressPostCode.toString())
							api_stateAddressPrimaryAddress= json.stateAddress.primaryAddress
							api_stateAddressPrimaryAddress= removeComma(api_stateAddressPrimaryAddress.toString())
							//log.info "state Address is :"+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress
						}
						else if(api_stateAddress.toString().equals("NULL"))
						{
							api_stateAddressId= "NULL"
							api_stateAddressName= "NULL"
							api_stateAddressLine1= "NULL"
							api_stateAddressLine2= "NULL"
							api_stateAddressLine3= "NULL"
							api_stateAddressStateOrCounty= "NULL"
							api_stateAddressCity= "NULL"
							api_stateAddressCountry= "NULL"
							api_stateAddressPostCode= "NULL"
							api_stateAddressPrimaryAddress= "NULL"
						}
						if(!api_ownerAddress.toString().equals("NULL"))
						{
							api_ownerAddressId= json.ownerAddress.id
							api_ownerAddressId= removeComma(api_ownerAddressId.toString())
							api_ownerAddressName= json.ownerAddress.addressName
							api_ownerAddressName= removeComma(api_ownerAddressName.toString())
							api_ownerAddressLine1= json.ownerAddress.addressLine1
							api_ownerAddressLine1= removeComma(api_ownerAddressLine1.toString())
							api_ownerAddressLine2= json.ownerAddress.addressLine2
							api_ownerAddressLine2= removeComma(api_ownerAddressLine2.toString())
							api_ownerAddressLine3= json.ownerAddress.addressLine3
							api_ownerAddressLine3= removeComma(api_ownerAddressLine3.toString())
							api_ownerAddressStateOrCounty= json.ownerAddress.stateOrCounty
							api_ownerAddressStateOrCounty= removeComma(api_ownerAddressStateOrCounty.toString())
							api_ownerAddressCity= json.ownerAddress.city
							api_ownerAddressCity= removeComma(api_ownerAddressCity.toString())
							api_ownerAddressCountry= json.ownerAddress.country
							api_ownerAddressCountry= removeComma(api_ownerAddressCountry.toString())
							api_ownerAddressPostCode= json.ownerAddress.postCode
							api_ownerAddressPostCode= removeComma(api_ownerAddressPostCode.toString())
							api_ownerAddressPrimaryAddress= json.ownerAddress.primaryAddress
							api_ownerAddressPrimaryAddress= removeComma(api_ownerAddressPrimaryAddress.toString())
							//log.info "Owner Address is :"+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress
						}
						else if(api_ownerAddress.toString().equals("NULL"))
						{
							api_ownerAddressId= "NULL"
							api_ownerAddressName= "NULL"
							api_ownerAddressLine1= "NULL"
							api_ownerAddressLine2= "NULL"
							api_ownerAddressLine3= "NULL"
							api_ownerAddressStateOrCounty= "NULL"
							api_ownerAddressCity= "NULL"
							api_ownerAddressCountry= "NULL"
							api_ownerAddressPostCode= "NULL"
							api_ownerAddressPrimaryAddress= "NULL"
						}
						if(!api_brokerAddress.toString().equals("NULL"))
						{
							api_brokerAddressId= json.brokerAddress.id
							api_brokerAddressId= removeComma(api_brokerAddressId.toString())
							api_brokerAddressName= json.brokerAddress.addressName
							api_brokerAddressName= removeComma(api_brokerAddressName.toString())
							api_brokerAddressLine1= json.brokerAddress.addressLine1
							api_brokerAddressLine1= removeComma(api_brokerAddressLine1.toString())
							api_brokerAddressLine2= json.brokerAddress.addressLine2
							api_brokerAddressLine2= removeComma(api_brokerAddressLine2.toString())
							api_brokerAddressLine3= json.brokerAddress.addressLine3
							api_brokerAddressLine3= removeComma(api_brokerAddressLine3.toString())
							api_brokerAddressStateOrCounty= json.brokerAddress.stateOrCounty
							api_brokerAddressStateOrCounty= removeComma(api_brokerAddressStateOrCounty.toString())
							api_brokerAddressCity= json.brokerAddress.city
							api_brokerAddressCity= removeComma(api_brokerAddressCity.toString())
							api_brokerAddressCountry= json.brokerAddress.country
							api_brokerAddressCountry= removeComma(api_brokerAddressCountry.toString())
							api_brokerAddressPostCode= json.brokerAddress.postCode
							api_brokerAddressPostCode= removeComma(api_brokerAddressPostCode.toString())
							api_brokerAddressPrimaryAddress= json.brokerAddress.primaryAddress
							api_brokerAddressPrimaryAddress= removeComma(api_brokerAddressPrimaryAddress.toString())
							//log.info "Broker Address is :"+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress
						}
						else if(api_brokerAddress.toString().equals("NULL"))
						{
							api_brokerAddressId= "NULL"
							api_brokerAddressName= "NULL"
							api_brokerAddressLine1= "NULL"
							api_brokerAddressLine2= "NULL"
							api_brokerAddressLine3= "NULL"
							api_brokerAddressStateOrCounty= "NULL"
							api_brokerAddressCity= "NULL"
							api_brokerAddressCountry= "NULL"
							api_brokerAddressPostCode= "NULL"
							api_brokerAddressPrimaryAddress= "NULL"
						}
					
						if(!api_memberAddress.toString().equals("NULL"))
						{
							api_memberAddressId= json.memberAddress.id
							api_memberAddressId= removeComma(api_memberAddressId.toString())
							api_memberAddressName= json.memberAddress.addressName
							api_memberAddressName= removeComma(api_memberAddressName.toString())
							api_memberAddressLine1= json.memberAddress.addressLine1
							api_memberAddressLine1= removeComma(api_memberAddressLine1.toString())
							api_memberAddressLine2= json.memberAddress.addressLine2
							api_memberAddressLine2= removeComma(api_memberAddressLine2.toString())
							api_memberAddressLine3= json.memberAddress.addressLine3
							api_memberAddressLine3= removeComma(api_memberAddressLine3.toString())
							api_memberAddressStateOrCounty= json.memberAddress.stateOrCounty
							api_memberAddressStateOrCounty= removeComma(api_memberAddressStateOrCounty.toString())
							api_memberAddressCity= json.memberAddress.city
							api_memberAddressCity= removeComma(api_memberAddressCity.toString())
							api_memberAddressCountry= json.memberAddress.country
							api_memberAddressCountry= removeComma(api_memberAddressCountry.toString())
							api_memberAddressPostCode= json.memberAddress.postCode
							api_memberAddressPostCode= removeComma(api_memberAddressPostCode.toString())
							api_memberAddressPrimaryAddress= json.memberAddress.primaryAddress
							api_memberAddressPrimaryAddress= removeComma(api_memberAddressPrimaryAddress.toString())
							//log.info "Member Address is :"+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress
						}
						else if(api_memberAddress.toString().equals("NULL"))
						{
							api_memberAddressId= "NULL"
							api_memberAddressName= "NULL"
							api_memberAddressLine1= "NULL"
							api_memberAddressLine2= "NULL"
							api_memberAddressLine3= "NULL"
							api_memberAddressStateOrCounty="NULL"
							api_memberAddressCity= "NULL"
							api_memberAddressCountry= "NULL"
							api_memberAddressPostCode= "NULL"
							api_memberAddressPrimaryAddress= "NULL"
						}
						if(!api_jointAssuredAddress.toString().equals("NULL"))
						{
							api_jointAssuredAddressId= json.jointAssuredAddress.id
							api_jointAssuredAddressId= removeComma(api_jointAssuredAddressId.toString())
							api_jointAssuredAddressName= json.jointAssuredAddress.addressName
							api_jointAssuredAddressName= removeComma(api_jointAssuredAddressName.toString())
							api_jointAssuredAddressLine1= json.jointAssuredAddress.addressLine1
							api_jointAssuredAddressLine1= removeComma(api_jointAssuredAddressLine1.toString())
							api_jointAssuredAddressLine2= json.jointAssuredAddress.addressLine2
							api_jointAssuredAddressLine2= removeComma(api_jointAssuredAddressLine2.toString())
							api_jointAssuredAddressLine3= json.jointAssuredAddress.addressLine3
							api_jointAssuredAddressLine3= removeComma(api_jointAssuredAddressLine3.toString())
							api_jointAssuredAddressStateOrCounty= json.jointAssuredAddress.stateOrCounty
							api_jointAssuredAddressStateOrCounty= removeComma(api_jointAssuredAddressStateOrCounty.toString())
							api_jointAssuredAddressCity= json.jointAssuredAddress.city
							api_jointAssuredAddressCity= removeComma(api_jointAssuredAddressCity.toString())
							api_jointAssuredAddressCountry= json.jointAssuredAddress.country
							api_jointAssuredAddressCountry= removeComma(api_jointAssuredAddressCountry.toString())
							api_jointAssuredAddressPostCode= json.jointAssuredAddress.postCode
							api_jointAssuredAddressPostCode= removeComma(api_jointAssuredAddressPostCode.toString())
							api_jointAssuredAddressPrimaryAddress= json.jointAssuredAddress.primaryAddress
							api_jointAssuredAddressPrimaryAddress= removeComma(api_jointAssuredAddressPrimaryAddress.toString())
							//log.info "Joint Assured Address is :"+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress
						}
						else if(api_jointAssuredAddress.toString().equals("NULL"))
						{
							api_jointAssuredAddressId= "NULL"
							api_jointAssuredAddressName= "NULL"
							api_jointAssuredAddressLine1= "NULL"
							api_jointAssuredAddressLine2= "NULL"
							api_jointAssuredAddressLine3= "NULL"
							api_jointAssuredAddressStateOrCounty= "NULL"
							api_jointAssuredAddressCity= "NULL"
							api_jointAssuredAddressCountry= "NULL"
							api_jointAssuredAddressPostCode= "NULL"
							api_jointAssuredAddressPrimaryAddress= "NULL"
						}
						if(!api_branchAddress.toString().equals("NULL"))
						{
							api_branchAddressId= json.branchAddress.id
							api_branchAddressId= removeComma(api_branchAddressId.toString())
							api_branchAddressName= json.branchAddress.addressName
							api_branchAddressName= removeComma(api_branchAddressName.toString())
							api_branchAddressLine1= json.branchAddress.addressLine1
							api_branchAddressLine1= removeComma(api_branchAddressLine1.toString())
							api_branchAddressLine2= json.branchAddress.addressLine2
							api_branchAddressLine2= removeComma(api_branchAddressLine2.toString())
							api_branchAddressLine3= json.branchAddress.addressLine3
							api_branchAddressLine3= removeComma(api_branchAddressLine3.toString())
							api_branchAddressStateOrCounty= json.branchAddress.stateOrCounty
							api_branchAddressStateOrCounty= removeComma(api_branchAddressStateOrCounty.toString())
							api_branchAddressCity= json.branchAddress.city
							api_branchAddressCity= removeComma(api_branchAddressCity.toString())
							api_branchAddressCountry= json.branchAddress.country
							api_branchAddressCountry= removeComma(api_branchAddressCountry.toString())
							api_branchAddressPostCode= json.branchAddress.postCode
							api_branchAddressPostCode= removeComma(api_branchAddressPostCode.toString())
							api_branchAddressPrimaryAddress= json.branchAddress.primaryAddress
							api_branchAddressPrimaryAddress= removeComma(api_branchAddressPrimaryAddress.toString())
							//log.info "Branch Address is :"+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress						
						}
						else if(api_branchAddress.toString().equals("NULL"))
						{
							api_branchAddressId= "NULL"
							api_branchAddressName= "NULL"
							api_branchAddressLine1= "NULL"
							api_branchAddressLine2= "NULL"
							api_branchAddressLine3= "NULL"
							api_branchAddressStateOrCounty= "NULL"
							api_branchAddressCity= "NULL"
							api_branchAddressCountry= "NULL"
							api_branchAddressPostCode= "NULL"
							api_branchAddressPrimaryAddress= "NULL"
						}
						log.info "API Response is received as =>"+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName+","+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress+","+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress+","+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress+","+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress+","+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress+","+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress+","+api_branchCode+","+api_tradingCertificatePackId
						arrCellVal=[api_tradingCertificateId ,api_addressTypeId ,api_sourceSystem ,api_reference ,api_currentStatus ,api_storageId ,api_riskId ,api_policyId ,api_memberPartyId ,api_ownerPartyId ,api_brokerPartyId ,api_isRenewal ,api_isYacht ,api_version ,api_riskReference ,api_policyReference ,api_memberReference ,api_memberType ,api_memberName ,api_jointAssuredName ,api_ownerReference ,api_ownerName ,api_ownerDomicile ,api_ownerEmailAddress ,api_brokerReference ,api_brokerName ,api_brokerEmailAddress ,api_policyYear ,api_certificateIssueDate ,api_emailAddress ,api_ccEmailAddress ,api_effectiveStartDate ,api_effectiveEndDate ,api_passengerCapacity ,api_policyStartDate ,api_policyEndDate ,api_currencyCode ,api_coverLimitAmount ,api_signatoryStateId ,api_vesselName ,api_vesselType ,api_vesselTypeName ,api_vesselEnteredDate ,api_vesselFlag ,api_imoNumber ,api_distinctiveNumbersOrLetters ,api_grossTonnage ,api_yearBuilt ,api_engineHorsePower ,api_trademarkAndEngineModel ,api_model ,api_engineNo ,api_nominatedFlagState ,api_nominatedFlagStateName ,api_portOfRegistry ,api_tenderReferenceList ,api_tenderOutboardReferenceList ,api_tradingCertificateTypeId ,api_tradingCertificateGroupId ,api_tradingCertificateGroupName ,api_tradingCertificateGroupCode ,api_tradingCertificateTypeTypeCode ,api_tradingCertificateTypeTypeName ,api_branchCode,api_tradingCertificatePackId,api_stateAddressId,api_stateAddressName,api_stateAddressLine1,api_stateAddressLine2,api_stateAddressLine3,api_stateAddressStateOrCounty,api_stateAddressCity,api_stateAddressCountry,api_stateAddressPostCode,api_stateAddressPrimaryAddress,api_ownerAddressId,api_ownerAddressName,api_ownerAddressLine1,api_ownerAddressLine2,api_ownerAddressLine3,api_ownerAddressStateOrCounty,api_ownerAddressCity,api_ownerAddressCountry,api_ownerAddressPostCode,api_ownerAddressPrimaryAddress,api_brokerAddressId,api_brokerAddressName,api_brokerAddressLine1,api_brokerAddressLine2,api_brokerAddressLine3,api_brokerAddressStateOrCounty,api_brokerAddressCity,api_brokerAddressCountry,api_brokerAddressPostCode,api_brokerAddressPrimaryAddress,api_memberAddressId,api_memberAddressName,api_memberAddressLine1,api_memberAddressLine2,api_memberAddressLine3,api_memberAddressStateOrCounty,api_memberAddressCity,api_memberAddressCountry,api_memberAddressPostCode,api_memberAddressPrimaryAddress,api_jointAssuredAddressId,api_jointAssuredAddressName,api_jointAssuredAddressLine1,api_jointAssuredAddressLine2,api_jointAssuredAddressLine3,api_jointAssuredAddressStateOrCounty,api_jointAssuredAddressCity,api_jointAssuredAddressCountry,api_jointAssuredAddressPostCode,api_jointAssuredAddressPrimaryAddress,api_branchAddressId,api_branchAddressName,api_branchAddressLine1,api_branchAddressLine2,api_branchAddressLine3,api_branchAddressStateOrCounty,api_branchAddressCity,api_branchAddressCountry,api_branchAddressPostCode,api_branchAddressPrimaryAddress];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					
						total_size++
						counter++
					//}//end of k for loop
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					}
							
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
				}//inner db get data close
				con.close()	

			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Trading Certificate details with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String  removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field==null && field.contains("[") || field=="NULL" && field.contains("[") || field=="null" && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
		field="NULL"
	}
	if(field!=null)
		field=field.toUpperCase()
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}
public String getDate(String field)
{
	if(field!=null && field.length()==21)
		field = field.substring(0, field.length() - 2);
	
	if(field==null)
			field="NULL"
	else if(field=="" || field==" " || field==null)	
			field="NULL"
	return field
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>tradingCertificateId</con:name><con:value>50</con:value></con:property><con:property><con:name>certId</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="c31d4701-82de-4bba-ab4d-1acd82d39322" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_TradingCertificateByTradingCertificateIdByValidate" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="TredCertByTradCertIdByValidate" id="57a50309-6875-4909-9472-2b1a119f2e89"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#TredCertId}/validate" methodName="TradingCertificateByTradingCertificateIdByValidate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TredCertByTradCertIdByValidate" id="02b0791d-1371-4ba4-b933-641aade1deeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/273695/validate</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getTradCertByTredCertId" id="7a8d508e-114f-4540-83b3-98bd29bc485f"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#tradingCertificateId}" methodName="GET_TradingCertificateByCertificateId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getTradCertByTredCertId" id="325ac480-28f6-4df9-9f1c-06b0aacf1498" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="TradingCertificateByTradingCertificateIdByValidate" id="2cdd3551-0c28-4bc7-aa88-a076afb392a1"><con:settings/><con:config><script><![CDATA[import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;


String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTRUE,rowFALSE;
def arrOutputHeader;
def arrOutputHeaderApi;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow

def inputStream = new FileInputStream("C:\\APITesting\\TradingCertificateTesting\\ValidateCertificateRule.xls");
Workbook wb = WorkbookFactory.create(inputStream);
def ws = wb.getSheet("Rules")
def rowCount = ws.getPhysicalNumberOfRows()

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_GET_TradingCertificateByTradingCertificateIdByValidate"))
		tcModuleName="TradCertsByTradCertIdByValidate"
	
	if(tcModuleName.toString().equals("TradCertsByTradCertIdByValidate"))
	{
		log.info "Test Execution started for Validating Trading Certificate By Trading Certificate Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader=["TradingCertificateId","RiskReference","TradingCertificateType","IsValidFlag","ErrorList/s","Status"]
			arrOutputHeaderApi=["TradingCertificateId","RiskReference","TradingCertificateType","IsValidFlag","ErrorList/s","Status"]
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			int db_size=0
			int db_endCol=0
			int api_startCol=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));	

			String getTcId=
			"""
			SELECT 
			Top 100
			TC.Id, TC.Type_Id, RT.TypeCode, BS.BankName, *
			from TradingCertificate TC 
			left join ref_type RT on RT.Id=TC.Type_id
			left join ref_addressType RAT on RAT.Id=TC.AddressType_Id
			left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id
			--where TC.Id=  274138
			order by 1 desc
			"""

			con.eachRow(getTcId)
			{
				row->
				sql_TCID=row.Id

				log.info "Checking for Trading Certificate Id=>"+sql_TCID
				
				def rows=con.rows(getTcId)  
				def arrCellVal;
				arrCellVal=['DB data']
				
				RT.writeDetails(source,0,0,headerStyle,arrCellVal)
				
				headerStyle = RT.getCellStyle(O_Summary,'Header');
				RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
				
				def arrData;			

				def response= null
				def jsonSlurper=null
				def jsonResValidate=null
				
				int positiveCount=0, negativeCount=0
				boolean flag=false;
				String columnName=null
				boolean ruleFlag = false;
				
					sql_id=row.Id
					sql_addresstypeid=row.AddressType_Id
					sql_type_id=row.Type_Id
					sql_certificatetype=row.TypeCode
					sql_reference=row.Reference
					sql_currentstatus=row.CurrentStatus
					sql_storageid=row.StorageId
					sql_isrenewal=row.IsRenewal
					sql_isyacht=row.IsYacht
					sql_riskid=row.RiskId
					sql_vesselid=row.VesselId
					sql_policyid=row.PolicyId
					sql_memberpartyid=row.MemberPartyId
					sql_ownerpartyid=row.OwnerPartyId
					sql_brokerpartyid=row.BrokerPartyId
					sql_tradingcertificateversion=row.TradingCertificateVersion
					sql_riskref=row.RiskReference
					sql_vesselreference=row.VesselReference
					sql_policyref=row.PolicyReference
					sql_memberref=row.MemberReference
					sql_membertype=row.MemberType
					sql_membername=row.MemberName
					sql_membername = removeBracketAndComma(sql_membername.toString())
					sql_ownerdomicile=row.OwnerDomicile
					sql_ownerdomicile = removeBracketAndComma(sql_ownerdomicile.toString())
					sql_owneremailaddress=row.OwnerEmailAddress
					sql_ownerreference=row.OwnerReference
					sql_ownername=row.OwnerName
					sql_ownername = removeBracketAndComma(sql_ownername.toString())
					sql_brokerreference=row.BrokerReference
					sql_brokername=row.BrokerName
					sql_brokername = removeBracketAndComma(sql_brokername.toString())
					sql_brokeremailaddress=row.BrokerEmailAddress
					sql_policyyear=row.PolicyYear
					sql_certificateissuedate=row.CertificateIssueDate
					sql_emailaddress=row.EmailAddress
					sql_ccemailaddress=row.CCEmailAddress
					sql_effectivestartdate=row.EffectiveStartDate
					sql_effectiveenddate=row.EffectiveEndDate
					sql_policystartdate=row.PolicyStartDate
					sql_policyenddate=row.PolicyEndDate
					sql_currencycode=row.CurrencyCode
					sql_coverlimitamount=row.CoverLimitAmount
					sql_dignatorystate_id=row.SignatoryState_Id
					sql_nominatedstateflag=row.NominatedStateflag
					sql_nominatedflagstatename=row.NominatedStateFlagName
					sql_vesselname=row.VesselName
					sql_vesselname = removeBracketAndComma(sql_vesselname.toString())
					sql_vesselflag=row.VesselFlag
					sql_vesseltype=row.VesselType
					sql_vesseltypename=row.VesselTypeName
					sql_passengercapacity=row.PassengerCapacity
					sql_vesselentereddate=row.VesselEnteredDate
					sql_imonumber=row.IMONumber
					sql_enginehorsepower=row.EngineHorsePower
					sql_trademark=row.TradeMark
					sql_model=row.Model
					sql_engineno=row.EngineNo
					sql_tenderreferencelist=row.TenderReferenceList
					sql_tenderoutboardreferencelist=row.TenderOutboardReferenceList
					sql_distinctivenumbersorletters=row.DistinctiveNumbersOrLetters
					sql_grosstonnage=row.GrossTonnage
					sql_yearbuilt=row.YearBuilt
					sql_portofregistry=row.PortOfRegistry
					sql_portofregistry = removeBracketAndComma(sql_portofregistry.toString())
					sql_lastmodified=row.LastModified
					sql_userprincipalname_lastmodifiedby=row.UserPrincipalName_LastModifiedBy
					sql_addresstype_id=row.AddressType_Id
					sql_jointassuredname=row.JointAssuredName
					sql_producttype=row.ProductType
					sql_sourcesystem=row.SourceSystem
					sql_isdeleted=row.IsDeleted
					sql_name=row.Name
					sql_active=row.Active
					sql_lastmodified=row.LastModified
					sql_userprincipalname_lastmodifiedby=row.UserPrincipalName_LastModifiedBy
					sql_group_id=row.Group_Id
					sql_bankname = row.BankName
					sql_bankname = removeBracketAndComma(sql_bankname.toString())

					testRunner.testCase.setPropertyValue('TredCertId', sql_TCID.toString())
	
					//API
					testRunner.runTestStepByName("TredCertByTradCertIdByValidate")
					String req = '${TredCertByTradCertIdByValidate#Response}'	
					response=context.expand(req)
					//log.info "API response received as : " +response
					jsonSlurper = new JsonSlurper()
					jsonResValidate = jsonSlurper.parseText(response)
					api_tradingCertificateType = jsonResValidate.tradingCertificateType

					
					testRunner.testCase.setPropertyValue('token', token)
					testRunner.testCase.setPropertyValue('tradingCertificateId', sql_TCID.toString())

					testRunner.runTestStepByName("getTradCertByTredCertId")
					String responseBody = '${getTradCertByTredCertId#Response}'	
					getResponse=context.expand(responseBody)
					getJsonSlurper = new JsonSlurper()
					jsonResGetById = getJsonSlurper.parseText(getResponse)
					
					int numberOfCells = 0;
					Iterator rowIterator = ws.rowIterator();
					if (rowIterator.hasNext())
					{
						Row headerRow1 = (Row) rowIterator.next();
						numberOfCells = headerRow1.getPhysicalNumberOfCells();
					}

					//checkig for error list

					for(int i=1; i<rowCount; i++)
					{
						Row rows1 = ws.getRow(i);
						Cell cell2 = rows1.getCell(0);
						String tradingCertificateType = cell2.getStringCellValue().trim();
						if(tradingCertificateType.toString().equals(jsonResGetById.tradingCertificateType.typeCode.toString()))
						{
							String[] numberOfErrors= jsonResValidate.errors
							String allAPIErrors=""
							for (int errorCounter=0; errorCounter<numberOfErrors.length; errorCounter++)
							{
								allAPIErrors=jsonResValidate.errors[errorCounter] +" "+  allAPIErrors
							}
							tradingCertificateRowNumber = i;
							String[] errorList1 = jsonResValidate.errors
							ArrayList<String> errorList = new ArrayList<String>();
							
							int errorCountCheck=0;

							if(errorList1.length >0)
							{
							
								for (int k=0; k<errorList1.length; k++)
								{
									String errorDescription = errorList1[k]
									errorList.add(errorDescription)
									log.info "Reason number "+(k+1)+" : "+errorList1[k]
									String field = getFieldName(errorList[k])
									log.info "Field Name after removing additional text is: "+field
									for (int j=0; j<=95;j++)
									{
										rows1 = ws.getRow(i);
										cell2 = rows1.getCell(j);
										
										Row headerColumns = ws.getRow(0);
										Cell cols = headerColumns.getCell(j);
										columnName = cols.getStringCellValue().trim();
										
										if (cell2.CELL_TYPE_STRING)
										{
											validation = cell2.getStringCellValue().trim();
											//log.info "Field : "+field +"==> columnName : "+columnName+"==>Rule : "+validation
										}//if condition ended for cell type is string from validation rule excel
										else if(cell2.CELL_TYPE_NUMERIC)
										{
											int numericValue = cell2.getNumericCellValue().trim();
											validation = Intger.parseInt(numericValue)
											//log.info "validation in numeric : "+validation
										}
										if(field.toLowerCase().equals(columnName.toLowerCase()))
										{
											if(validation.equals("true"))
												ruleFlag=true
											else 
												ruleFlag=false
											log.info "==>"+field.toLowerCase()+"==>"+columnName.toLowerCase()
											//break;
										}
									}
									if(ruleFlag)
									{
										switch (errorDescription)
										{
											case "'Policy Year' must not be empty.":
													//if(sql_policyyear.equals(jsonResValidate.policyYear))
													if(sql_policyyear.equals(jsonResGetById.policyYear))
													{
														log.info "Rule Flag = "+ruleFlag + "  SQL value for Policy Year is : "+sql_policyyear+" and API value for Policy Year is : "+jsonResGetById.policyYear
														errorCountCheck++;
													}
												break;
											case "'Nominated Flag State' must not be empty.":
													//if(sql_nominatedstateflag.equals(jsonResValidate.nominatedFlagState))
													if(sql_nominatedstateflag.equals(jsonResGetById.nominatedFlagState))
													{
														log.info "Rule Flag = "+ruleFlag + "  SQL value for Nominated State Flag is : "+sql_nominatedstateflag+" and API value for Nominated State Flag is : "+jsonResGetById.nominatedFlagState
														errorCountCheck++;
													}
													break;
											case "Owner name required.":
											case "'Owner Name' must not be empty.":
													//if(sql_ownername.equals(jsonResValidate.ownerName))
													if(sql_ownername.equals(jsonResGetById.ownerName))
													{
														log.info "Rule Flag = "+ruleFlag + "  SQL value for Owner name is : "+sql_ownername+" and API value for Owner name is : "+jsonResGetById.ownername
														errorCountCheck++;
													}
												break;
											case "Vessel name is required.":
											case  "'Vessel Name' must not be empty.":
												//if(sql_vesselname.equals(jsonResValidate.vesselName))
												if(sql_vesselname.equals(jsonResGetById.vesselName))
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Vessel name is : "+sql_vesselname+" and API value for Vessel name is : "+jsonResGetById.vesselName
													errorCountCheck++;
												}
												break;
											case "Member name is required." :
											case "'Member Name' must not be empty.":
												//if(sql_membername.equals(jsonResValidate.memberName))
												if(sql_membername.equals(jsonResGetById.memberName))
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Member name is : "+sql_membername+" and API value for Member name is : "+jsonResGetById.memberName
													errorCountCheck++;
												}
												break;
											case "Disctinctive numbers or letters required.":
											case "'Distinctive Numbers Or Letters' must not be empty.":
												//if(sql_distinctivenumbersorletters.equals(jsonResValidate.distinctiveNumbersOrLetters))
												if(sql_distinctivenumbersorletters.equals(jsonResGetById.distinctiveNumbersOrLetters))
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Distinctive Numbers Or Letters is : "+sql_distinctivenumbersorletters+" and API value for Distinctive Numbers Or Letters is : "+jsonResGetById.distinctiveNumbersOrLetters
													errorCountCheck++;
												}
												break;
											case "'Owner Address' must not be empty.":
												//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.ownerAddress==null)
												if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.ownerAddress==null)
												{
													log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Owner Address is : "+jsonResGetById.ownerAddress
													errorCountCheck++;
												}
												break;
											case "'State Address' must not be empty.":
												//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.stateAddress==null)
												if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.stateAddress==null)
												{
													log.info "SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for State Address is : "+jsonResGetById.stateAddress
													errorCountCheck++;
												}
												break;
											case "'Joint Assured Address' must not be empty.":
												//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.jointAssuredAddress==null)
												if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.jointAssuredAddress==null)
												{
													log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for JA Address is : "+jsonResGetById.jointAssuredAddress
													errorCountCheck++;
												}
												break;
											case "'Joint Assured Name' must not be empty.":
												//if(sql_jointassuredname.equals(jsonResValidate.jointAssuredName))
												if(sql_jointassuredname.equals(jsonResGetById.jointAssuredName))
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Joint Assured name is : "+sql_jointassuredname+" and API value for Joint Assured  name is : "+jsonResGetById.jointAssuredName
													errorCountCheck++;
												}
												break;
											case "Bank Address Bank name is required.":
											if(sql_bankname.equals(null))
													errorCountCheck++;
												break;
											case "'Broker Address' must not be empty.":
												//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.brokerAddress==null)
												if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.brokerAddress==null)
												{
													log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Broker Address is : "+jsonResGetById.brokerAddress
													errorCountCheck++;
												}
												break;
											case "'Member Address' must not be empty.":
												//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.memberAddress==null)
												if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.memberAddress==null)
												{
													log.info "SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Member Address is : "+jsonResGetById.memberAddress
													errorCountCheck++;
												}
												break;
											case "Member name set but no member address found":
												//if(sql_membername!=null && sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.memberAddress==null)
												if(sql_membername!=null && sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.memberAddress==null)
												{
													log.info "SQL value for Member name is : "+sql_membername+" and API Member Name value  is : "+jsonResGetById.memberName+" and SQL value for Address Type Id is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Member Address is : "+jsonResGetById.memberAddress
													errorCountCheck++;
												}
												break;
											case "Policy limit currency code is required.":
											case "'Currency Code' must not be empty.":
												//if(sql_currencycode==null && jsonResValidate.currencyCode==null)
												if(sql_currencycode==null && jsonResGetById.currencyCode==null)
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Currency Code is : "+sql_currencycode+" and API value for Currency Code is : "+jsonResGetById.currencyCode
													errorCountCheck++;
												}
												break;
											case "Policy limit amount is required.":
											case "'Cover Limit Amount' must not be empty.":
												//if(sql_coverlimitamount==null && jsonResValidate.coverLimitAmount==null)
												if(sql_coverlimitamount==null && jsonResGetById.coverLimitAmount==null)
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Cover Limit Amount is : "+sql_coverlimitamount+" and API value for Cover Limit Amount is : "+jsonResGetById.coverLimitAmount
													errorCountCheck++;
												}
												break;
											case "Engine horse power is required.":
											case "'Engine Horse Power' must not be empty.":
												//if(sql_enginehorsepower==null && jsonResValidate.engineHorsePower==null)
												if(sql_enginehorsepower==null && jsonResGetById.engineHorsePower==null)
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Engine Horse Power is : "+sql_enginehorsepower+" and API value for Engine Horse Power is : "+jsonResGetById.engineHorsePower
													errorCountCheck++;
												}
												break;
											case "'Trademark And Engine Model' must not be empty.":
												//if(sql_trademark==null && jsonResValidate.trademarkAndEngineModel==null)
												if(sql_trademark==null && jsonResGetById.trademarkAndEngineModel==null)
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Trade Mark is : "+sql_trademark+" and API value for Trade Mark is : "+jsonResGetById.trademarkAndEngineModel
													errorCountCheck++;
												}
												break;
											case "Gross tonnage is required." :
											case "'Gross Tonnage' must not be empty.":
												//if(sql_grosstonnage==null && jsonResValidate.grossTonnage==null)
												if(sql_grosstonnage==null && jsonResGetById.grossTonnage==null)
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Gross Tonnage is : "+sql_grosstonnage+" and API value for Gross Tonnage is : "+jsonResGetById.grossTonnage
													errorCountCheck++;
												}
												break;
											case "Year built is required.":
											case "'Year Built' must not be empty.":
												//if(sql_grosstonnage==null && jsonResValidate.yearBuilt==null)
												if(sql_yearbuilt==null && jsonResGetById.yearBuilt==null)
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Year Built is : "+sql_yearbuilt+" and API value for Year Built is : "+jsonResGetById.yearBuilt
													errorCountCheck++;	
												}
												break;
											case "Address is required.":
													errorCountCheck++;
												break;
											case "At least a Bank is required!":
												if(jsonResGetById.tradingCertificate.equals(null) || jsonResGetById.tradingCertificate.equals(""))
													errorCountCheck++;
												break;
											case "Address city name is required." :
												errorCountCheck++;
												break;
											case "Address country is require."	:
												errorCountCheck++;
												break;
											case "Address line 1 is required." :
												errorCountCheck++;
												break;
											case "Address line 2 is required.":
												errorCountCheck++;
												break;
											case "Address line 3 is required.":
												errorCountCheck++;
												break;
											case "Address name is required.":
												errorCountCheck++;
												break;
											case "Address poscode is required.":
												errorCountCheck++;
												break;
											case "Address State is required.":				
												errorCountCheck++;
												break;
											case "Bank name is required.":
												if(sql_bankname.equals(jsonResGetById.tradingCertificateBanks.equals(null)) && sql_bankname.equals(null))
													errorCountCheck++;
												break;
											case "Broker name is required.":	
												if(sql_brokername.equals(jsonResGetById.brokerName.equals(null))&& sql_brokername.equals(null))
													errorCountCheck++;
												break;
											case "Email address is required.":	
												if(sql_emailaddress.equals(jsonResGetById.emailAddress.equals(null))&& sql_emailaddress.equals(null))	
													errorCountCheck++;
												break;
											case "Member ref is required."	:				
												if(sql_memberref.equals(jsonResGetById.memberReference.equals(null))&& sql_memberref.equals(null))	
													errorCountCheck++;
												break;
											case "Policy end date is required.":					
												if(sql_policyenddate.equals(jsonResGetById.policyEndDate.equals(null))&& sql_policyenddate.equals(null))	
													errorCountCheck++;
												break;
											case "IMO Number Is Required.":
											case "'IMO Number' must not be empty.":
											case "IMONumberIsRequired.":				
												if(sql_imonumber.equals(jsonResGetById.imoNumber.equals(null))&& sql_imonumber.equals(null))	
													errorCountCheck++;
												break;
											case "Issue Date is required.":				
												if(sql_certificateissuedate.equals(jsonResGetById.certificateIssueDate.equals(null))&& sql_certificateissuedate.equals(null))	
													errorCountCheck++;
												break;
											case "Policy reference number is required." :
												if(sql_policyref.equals(jsonResGetById.policyReference.equals(null))&& sql_policyref.equals(null))	
													errorCountCheck++;
												break;
											case "Policy start date is required." :
												if(sql_policystartdate.equals(jsonResGetById.policyStartDate.equals(null))&& sql_policystartdate.equals(null))	
													errorCountCheck++;
												break;
											case "Port of registry required." :
												if(sql_portofregistry.equals(jsonResGetById.portOfRegistry.equals(null))&& sql_portofregistry.equals(null))	
													errorCountCheck++;
												break;
											case "Risk ref is required." :
												if(sql_riskref.equals(jsonResGetById.riskReference.equals(null))&& sql_riskref.equals(null))	
													errorCountCheck++;
												break;
											case "Signatory state is required." :
												errorCountCheck++;
												break;
											case "Signatory State Address is required." :
												errorCountCheck++;
												break;
											case "Certificate sequence number is required." :
												errorCountCheck++;
												break;
											case "Vessel flag is required." :
												if(sql_vesselflag.equals(jsonResGetById.vesselFlag.equals(null))&& sql_vesselflag.equals(null))	
													errorCountCheck++;
												break;
											case "Vessel model is required." :
												if(sql_model.equals(jsonResGetById.model.equals(null))&& sql_model.equals(null))	
													errorCountCheck++;
												break;
											case "Vessel type is required." :
												if(sql_vesseltype.equals(jsonResGetById.vesselType.equals(null))&& sql_vesseltype.equals(null))	
													errorCountCheck++;
												break;
											case "Vessel trademark is required." :
												if(sql_trademark.equals(jsonResGetById.trademarkAndEngineModel.equals(null))&& sql_trademark.equals(null))	
													errorCountCheck++;
												break;
											case "Member Address Address name is required." :
											case "Member Address Address city name is required " :
											case "Member Address Address country is required" :
														errorCountCheck++;
													break;
											case "Broker Address Address name is required." :
											case "Broker Address Address city name is required " :
											case "Broker Address Address country is required" :
														errorCountCheck++;
													break;
										}//end of switch case
										
										
									}//if condition for rule is true
									
								}//end of error list for loop

								if(errorList1.length.equals(errorCountCheck))
								{
									isValid = "false"
									api_errors=allAPIErrors
									api_errors = removeBracketAndComma(api_errors.toString())
									sql_id= removeBracketAndComma(sql_id.toString())
									sql_riskref=removeBracketAndComma(sql_riskref.toString())
									sql_certificatetype=removeBracketAndComma(sql_certificatetype.toString())
									api_errors=api_errors.replace(",", " ")
									api_errors=removeBracketAndComma(api_errors.toString())
									log.info "SQL query Response received as: "+sql_id+","+sql_riskref+","+sql_certificatetype+","+isValid+","+api_errors
									
									arrCellVal=[sql_id,sql_riskref,sql_certificatetype,isValid,api_errors]
						
						
									RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
									db_size++
									counter++
											
								}
								else
								{
									isValid = "false"
									api_errors=allAPIErrors
									api_errors = removeBracketAndComma(api_errors.toString())
									sql_id= removeBracketAndComma(sql_id.toString())
									sql_riskref=removeBracketAndComma(sql_riskref.toString())
									sql_certificatetype=removeBracketAndComma(sql_certificatetype.toString())
									api_errors=api_errors.replace(",", " ")
									api_errors=removeBracketAndComma(api_errors.toString())

									log.info "SQL query Response received as: "+sql_id+","+sql_riskref+","+sql_certificatetype+","+isValid+","+api_errors
									
									arrCellVal=[sql_id,sql_riskref,sql_certificatetype,isValid,api_errors]
							
							
									RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
									db_size++
									counter++
								}
							}
							else if(errorList1.length == 0)
							{
								isValid = "true"
								api_errors=allAPIErrors
								api_errors = removeBracketAndComma(api_errors.toString())
								sql_id= removeBracketAndComma(sql_id.toString())
								sql_riskref=removeBracketAndComma(sql_riskref.toString())
								sql_certificatetype=removeBracketAndComma(sql_certificatetype.toString())
								api_errors=api_errors.replace(",", " ")
								api_errors=removeBracketAndComma(api_errors.toString())
								arrCellVal=[sql_id,sql_riskref,sql_certificatetype,isValid,api_errors]
					
					
								RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
								db_size++
								counter++
							}
						}//if condition to check the trading certificate types
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e) 
					{
						log.info e.toString();
					}
				//}//sql end
			}

			int totalColumns = source.getRow(1).getLastCellNum()
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start

			con.eachRow(getTcId)
			{
				getTCId1->
				sql_TCID=getTCId1.Id

				log.info "Getting api values Trading Certificate Id=>"+sql_TCID

				testRunner.testCase.setPropertyValue('token', token)
				testRunner.testCase.setPropertyValue('TredCertId', sql_TCID.toString())


				//API
				testRunner.runTestStepByName("TredCertByTradCertIdByValidate")
				String req = '${TredCertByTradCertIdByValidate#Response}'	
				response=context.expand(req)
				//log.info "API response received as : " +response
				jsonSlurper = new JsonSlurper()
				jsonResValidate = jsonSlurper.parseText(response)
				api_tradingCertificateType = jsonResValidate.tradingCertificateType

				//Check the Status code of API response
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				def httpResponseHeaders = context.testCase.testSteps["TredCertByTradCertIdByValidate"].testRequest.response.responseHeaders
				def httpStatus = httpResponseHeaders["#status#"]
				def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

				arrCellVal=['API DATA']
				RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
				RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeaderApi)
	
			
				String[] numberOfErrors= jsonResValidate.errors
				String allAPIErrors=""
				for (int errorCounter=0; errorCounter<numberOfErrors.length; errorCounter++)
				{
					//apiWriter.println(jsonResValidate.tradingCertificateId+","+jsonResValidate.riskReference+","+jsonResValidate.tradingCertificateType+","+jsonResValidate.isValid+","+jsonResValidate.errors[errorCounter])
					allAPIErrors=jsonResValidate.errors[errorCounter] +" "+  allAPIErrors
				}
				if(httpStatusCode.toString().equals("200"))
				{
					if(jsonResValidate.tradingCertificateId.toString()!=null)
					{
						api_tradingCertificateId = jsonResValidate.tradingCertificateId
						api_tradingCertificateId = removeBracketAndComma(api_tradingCertificateId.toString())
						api_riskReference = jsonResValidate.riskReference
						api_riskReference = removeBracketAndComma(api_riskReference.toString())
						api_tradingCertificateType = jsonResValidate.tradingCertificateType
						api_tradingCertificateType = removeBracketAndComma(api_tradingCertificateType.toString())
						api_isValid = jsonResValidate.isValid
						api_isValid = removeBracketAndComma(api_isValid.toString())
						api_errors=allAPIErrors
						api_errors = removeBracketAndComma(api_errors.toString())
						
						log.info "API response recieved as: "+api_tradingCertificateId+","+api_riskReference+","+api_tradingCertificateType+","+api_isValid+","+api_errors
						arrCellVal=[api_tradingCertificateId, api_riskReference, api_tradingCertificateType, api_isValid, api_errors]
	
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
						total_size++
						counter++
					}
				}
				

				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
				}
				else if (httpStatusCode.toString().equals("200") && jsonResValidate.isValid.toString().equals("true"))
				{
					log.info "This is valid Trading certificate"
					arrCellVal=[api_tradingCertificateId, api_riskReference, api_tradingCertificateType, api_isValid, api_errors]
					RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					total_size++
					counter++
				}
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}
			}
			con.close()

			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares Validation Errors of Trading Certificates by Trading Certificate Id with UTOM Database data according to rule sheet'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid, dsc)
				
		}//inner if end
	}//outer if end
}//outer for end


public String getFieldName(String fieldName)
{
	if(fieldName.toString().contains("' must not be empty.") && fieldName!=null || fieldName!="")
	{
		fieldName = fieldName.replace("' must not be empty.","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if(fieldName.toString().contains("is required") && fieldName!=null || fieldName!="")
	{
		fieldName = fieldName.replace("is required","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if (fieldName.toString().contains(" set but no ") && fieldName.toString().contains(" address found")&& fieldName!=null || fieldName!="")
	//Member name set but no member address found
	{
		fieldName = fieldName.replace(" set but no ","")
		fieldName = fieldName.replace(" address found","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if(fieldName.toString().contains("At least a Bank is required!") && fieldName!=null || fieldName!="")
	{
		fieldName =  "bankName"
		fieldName = fieldName.toLowerCase()
	}
	else
		fieldName=null
	return fieldName
}
public String removeBracketAndComma(String field)
{
	if(field != null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(",","")
		}
	}
	return field
}

/*
 * So far we have checked below errors
 * Joint Assured name set but no joint assured address found
'Joint Assured Address' must not be empty.
Address is required
'Broker Address' must not be empty.
Member name set but no member address found
'Member Address' must not be empty
'Member Name' must not be empty
'Owner Name' must not be empty
Owner Address' must not be empty
'Vessel Name' must not be empty
At least a Bank is required!
Bank Address Bank name is required
'Policy Year' must not be empty
'Distinctive Numbers Or Letters' must not be empty
'Currency Code' must not be empty
'Engine Horse Power' must not be empty
'Gross Tonnage' must not be empty
'Year Built' must not be empty
'Cover Limit Amount' must not be empty
'Trademark And Engine Model' must not be empty
'Nominated Flag State' must not be empty
'State Address' must not be empty
 */]]></script></con:config></con:testStep><con:properties><con:property><con:name>TredCertId</con:name><con:value>134013</con:value></con:property><con:property><con:name>tradingCertificateId</con:name><con:value>134013</con:value></con:property></con:properties></con:testCase><con:testCase id="3a617852-9bd8-451d-822a-045dbe318757" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_PATCH_ TradingCertificates" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Patch_TradingCertificate" id="ba2e8a0a-67ba-4a0c-829b-18a10f282db0"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates" methodName="Patch_Tradingcertificates" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Patch_TradingCertificate" id="29763329-86fc-4dc9-8273-28e9bfd5be0d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{"id":274140,"addressTypeId":8,"sourceSystem":"UTOM","reference":"76567/602345/ 2021/17","currentStatus":"CREATED","storageId":null,"riskId":654321,"policyId":91827,"memberPartyId":56789,"ownerPartyId":null,"brokerPartyId":null,"isRenewal":false,"isYacht":false,"version":17,"riskReference":"602345","policyReference":"1045678","memberReference":"76567","memberType":null,"memberName":null,"jointAssuredName":null,"ownerReference":null,"ownerName":null,"ownerDomicile":null,"ownerEmailAddress":null,"brokerReference":null,"brokerName":null,"brokerEmailAddress":null,"policyYear":null,"certificateIssueDate":null,"emailAddress":null,"ccEmailAddress":null,"effectiveStartDate":null,"effectiveEndDate":null,"passengerCapacity":null,"policyStartDate":"2021-02-28T12:00:00Z","policyEndDate":"2021-02-28T12:00:00Z","currencyCode":null,"coverLimitAmount":null,"signatoryStateId":null,"vesselName":null,"vesselType":null,"vesselTypeName":null,"vesselEnteredDate":null,"vesselFlag":null,"imoNumber":null,"distinctiveNumbersOrLetters":null,"grossTonnage":null,"yearBuilt":null,"engineHorsePower":null,"trademarkAndEngineModel":null,"model":null,"engineNo":null,"nominatedFlagState":null,"nominatedFlagStateName":null,"portOfRegistry":"TRIESTE","tenderReferenceList":null,"tenderOutboardReferenceList":null,"tradingCertificateTypeId":26,"tradingCertificateType":{"id":26,"tradingCertificateGroup":{"id":1,"name":"Trading Certificates","groupCode":"TRADECERT"},"typeCode":"MLCA421","typeName":"MLCA421"},"stateAddress":null,"ownerAddress":null,"brokerAddress":null,"memberAddress":null,"jointAssuredAddress":null,"branchAddress":null,"signatureName":null,"tradingCertificateBanks":[]}</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="PATCH_TradingCertificate" id="7db00277-be4a-4e7c-ba2c-2851dd28cfcc"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_PATCH_ TradingCertificates"))
		tcModuleName="Patch_TradingCertificate"
	
	if(tcModuleName.toString().equals("Patch_TradingCertificate"))
	{
		log.info "Test Execution started for Updating Trading Certificates"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["TradingCertificateId","AddressType_Id","SourceSystem","Reference","CurrentStatus","StorageId","RiskId","ApplicationRiskId","PolicyId","MemberPartyId","OwnerPartyId","BrokerPartyId","BrokerContactPartyId","JointAssuredPartyId","IsRenewal","IsYacht","Version","RiskReference","PolicyReference","MemberReference","MemberType","MemberName","JointAssuredName","OwnerReference","OwnerName","OwnerDomicile","OwnerEmailAddress","BrokerReference","BrokerName","BrokerEmailAddress","PolicyYear","EmailAddress","CcEmailAddress","EffectiveStartDate","EffectiveEndDate","PassengerCapacity","PolicyStartDate","PolicyEndDate","CurrencyCode","CoverLimitAmount","SignatoryState_Id","SignatoryStateAddressId","VesselName","VesselType","VesselTypeName","vesselEnteredDate","vesselFlag","imoNumber","distinctiveNumbersOrLetters","grossTonnage","yearBuilt","engineHorsePower","TradeMark","model","engineNo","NominatedStateFlag","NominatedStateFlagName","portOfRegistry","tenderReferenceList","TenderOutboardReferenceList","TradingCertificateTypeId","TradingCertificateGroupId","TradingCertificateGroupName","TradingCertificateGroupCode","TypeCode","TypeName","BranchCode","TradingCertificatePack_Id","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			def tcIdForGetDetails;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			arrCellVal=['API data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)

			ArrayList<String> tcList = new ArrayList<>();

			String sqlstmt=
			"""
			USE tradingcertificate
			Select 
			top 10
			TC.Id, TC.AddressType_Id, TC.SourceSystem, TC.Reference, TC.CurrentStatus, TC.StorageId, TC.IsYacht, case when TC.IsYacht=0 then 'False' when TC.IsYacht=1 then 'True' else null end as IsYachtFlag,
			TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
			TC.isRenewal, case when TC.isRenewal = 1 then 'True' when TC.isRenewal = 0  then 'False' else NULL end as IsRenewalFlag, TC.TradingCertificateVersion as version,
			TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName, TC.JointAssuredName, TC.OwnerReference,
			TC.OwnerName,TC.OwnerDomicile,TC.OwnerEmailAddress,TC.BrokerReference,TC.BrokerName,TC.BrokerEmailAddress,TC.PolicyYear,TC.CertificateIssueDate,
			TC.EmailAddress,TC.CCEmailAddress,TC.EffectiveStartDate,TC.EffectiveEndDate,TC.PassengerCapacity,TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,
			TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,TC.VesselEnteredDate,TC.VesselFlag,TC.ImoNumber,TC.DistinctiveNumbersOrLetters,
			TC.GrossTonnage,TC.YearBuilt,TC.EngineHorsePower,TC.TradeMark,TC.Model,TC.EngineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.PortOfRegistry,
			TC.TenderReferenceList,TC.TenderOutboardReferenceList,TC.Type_Id as TradingCertificateTypeId,RT.Id as TradingCertificateTypeId, RT.Group_Id as GroupId, 
			RG.Name as TradingCertificateGroupName,RG.GroupCode as TradingCertificateGroupCode, RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName,
			TC.ApplicationRiskId, TC.BrokerContactPartyId, TC.JointAssuredPartyId, TC.SignatoryStateAddressId, TC.TradingCertificatePack_Id, TC.BranchCode
			from TradingCertificate TC
			inner join ref_Type RT on RT.Id=TC.Type_Id
			inner join ref_Group RG on RG.Id=RT.Group_Id
			left join AddressSnapshot ADRS on ADRS.TradingCertificate_Id=TC.Id
			where TC.EffectiveStartDate is not null AND TC.PassengerCapacity is not null and TC.CoverLimitAmount is not null
			order by 1 desc
			"""	
			con.eachRow(sqlstmt)
			{
				row ->
				sql_Id=row.Id
				sql_AddressType_Id=row.AddressType_Id
				sql_SourceSystem=row.SourceSystem
				sql_Reference=row.Reference
				sql_CurrentStatus=row.CurrentStatus
				sql_StorageId=row.StorageId
				sql_IsYacht=row.IsYacht
				sql_IsYachtFlag=row.IsYachtFlag
				sql_RiskId=row.RiskId
				sql_PolicyId=row.PolicyId
				sql_MemberPartyId=row.MemberPartyId
				sql_OwnerPartyId=row.OwnerPartyId
				sql_BrokerPartyId=row.BrokerPartyId
				sql_BrokerContactPartyId=row.BrokerContactPartyId
				sql_IsRenewalFlag=row.IsRenewalFlag
				sql_version=row.version
				sql_ApplicationRiskId=row.ApplicationRiskId
				sql_JointAssuredPartyId=row.JointAssuredPartyId
				sql_RiskReference=row.RiskReference
				sql_PolicyReference=row.PolicyReference
				sql_MemberReference=row.MemberReference
				sql_MemberType=row.MemberType
				sql_MemberName=row.MemberName
				sql_MemberName=removeComma(sql_MemberName.toString())
				sql_JointAssuredName=row.JointAssuredName
				sql_OwnerReference=row.OwnerReference
				sql_OwnerName=row.OwnerName
				sql_OwnerDomicile=row.OwnerDomicile
				sql_OwnerEmailAddress=row.OwnerEmailAddress
				sql_BrokerReference=row.BrokerReference
				sql_BrokerName=row.BrokerName
				sql_BrokerEmailAddress=row.BrokerEmailAddress
				sql_PolicyYear=row.PolicyYear
				sql_CertificateIssueDate=row.CertificateIssueDate
				sql_CertificateIssueDate=getDate(sql_CertificateIssueDate.toString())
				sql_EmailAddress=row.EmailAddress
				sql_CCEmailAddress=row.CCEmailAddress
				sql_SignatoryStateAddressId=row.SignatoryStateAddressId
				sql_EffectiveStartDate=row.EffectiveStartDate
				sql_EffectiveStartDate=getDate(sql_EffectiveStartDate.toString())
				sql_EffectiveEndDate=row.EffectiveEndDate
				sql_EffectiveEndDate=getDate(sql_EffectiveEndDate.toString())
				sql_PassengerCapacity=row.PassengerCapacity
				sql_PolicyStartDate=row.PolicyStartDate
				sql_PolicyStartDate=getDate(sql_PolicyStartDate.toString())
				sql_PolicyEndDate=row.PolicyEndDate
				sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())
				sql_CurrencyCode=row.CurrencyCode
				sql_CoverLimitAmount=row.CoverLimitAmount
				sql_CoverLimitAmount=sql_CoverLimitAmount.toString().replace(".00","")
				sql_SignatoryState_Id=row.SignatoryState_Id
				sql_VesselName=row.VesselName
				sql_VesselType=row.VesselType
				sql_VesselTypeName=row.VesselTypeName
				sql_VesselEnteredDate=row.VesselEnteredDate
				sql_VesselEnteredDate=getDate(sql_VesselEnteredDate.toString())
				sql_VesselFlag=row.VesselFlag
				sql_ImoNumber=row.ImoNumber
				sql_DistinctiveNumbersOrLetters=row.DistinctiveNumbersOrLetters
				sql_GrossTonnage=row.GrossTonnage
				sql_YearBuilt=row.YearBuilt
				sql_EngineHorsePower=row.EngineHorsePower
				sql_TradeMark=row.TradeMark
				sql_Model=row.Model
				sql_EngineNo=row.EngineNo
				sql_NominatedStateFlag=row.NominatedStateFlag
				sql_NominatedStateFlag=removeComma(sql_NominatedStateFlag.toString())	
				sql_NominatedStateFlagName=row.NominatedStateFlagName
				sql_NominatedStateFlagName=removeComma(sql_NominatedStateFlagName.toString())
				sql_PortOfRegistry=row.PortOfRegistry
				sql_PortOfRegistry=removeComma(sql_PortOfRegistry.toString())	
				sql_TenderReferenceList=row.TenderReferenceList
				sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
				sql_TradingCertificateTypeId=row.TradingCertificateTypeId
				sql_TradingCertificateTypeId=row.TradingCertificateTypeId
				sql_GroupId=row.GroupId
				sql_TradingCertificateGroupName=row.tradingCertificateGroupName
				sql_TradingCertificateGroupCode=row.tradingCertificateGroupCode
				sql_TradingCertificateTypeCode=row.TradingCertificateTypeCode
				sql_TradingCertificateTypeName=row.TradingCertificateTypeName
				sql_TradingCertificatePack_Id=row.TradingCertificatePack_Id
				sql_branchCode=row.BranchCode
				
				Random a = new Random()
				int rnd =a.next(3)
				log.info rnd
				if(rnd==0)
				{
					rnd=2	
				}
				
				def arrData;
				def patchRequestBody = 
				"""
				{
				"id": $sql_Id, 
			    	"addressTypeId": $sql_AddressType_Id, 
			    	"sourceSystem": "$sql_SourceSystem",
			    	"reference": "$sql_Reference",
			    	"currentStatus": "$sql_CurrentStatus",
			    "storageId": "$sql_StorageId",
			    "riskId": $sql_RiskId,
			    "applicationRiskId": $sql_ApplicationRiskId,
			    "policyId": $sql_PolicyId,
			    "memberPartyId": $sql_MemberPartyId,
			    "ownerPartyId": $sql_OwnerPartyId,
			    "brokerPartyId": $sql_BrokerPartyId,
			    "brokerContactPartyId": $sql_BrokerContactPartyId,
			    "jointAssuredPartyId": $sql_JointAssuredPartyId,
			    "version": $sql_version,
			    "riskReference": "$sql_RiskReference",
			    "policyReference": "$sql_PolicyReference",
			    "memberReference": "$sql_MemberReference",
			    "memberType": "$sql_MemberType",
			    "memberName": "Auomatted_PatchMemberName",
			    "jointAssuredName": "Auomatted_PatchJAName",
			    "ownerReference": "$sql_OwnerReference",
			    "ownerName": "Auomatted_PatchOwnerName",
			    "ownerDomicile": "$sql_OwnerDomicile",
			    "ownerEmailAddress": "$sql_OwnerEmailAddress",
			    "brokerReference": "$sql_BrokerReference",
			    "brokerName": "$sql_BrokerName",
			    "brokerEmailAddress": "$sql_BrokerEmailAddress",
			    "policyYear": "$sql_PolicyYear",
			    "emailAddress": "$sql_EmailAddress",
			    "ccEmailAddress": "$sql_CCEmailAddress",
			    "effectiveStartDate": "2021-01-23T12:00:00",
    			    "effectiveEndDate": "2024-08-13T12:00:00",
			    "passengerCapacity": "$sql_PassengerCapacity",
			    "policyStartDate": "2021-01-23T12:00:00",
    				"policyEndDate": "2024-08-13T12:00:00",
			    "currencyCode": "$sql_CurrencyCode",
			    "coverLimitAmount": "$sql_CoverLimitAmount",
			    "signatoryStateId": $sql_SignatoryState_Id,
			    "signatoryStateAddressId": $sql_SignatoryStateAddressId,
			    "vesselName": "$sql_VesselName",
			    "vesselType": "$sql_VesselType",
			    "vesselEnteredDate": "2020-08-12T12:00:00",
			    "vesselTypeName": "$sql_VesselTypeName",
			    "vesselFlag": "$sql_VesselFlag",
			    "imoNumber": "$sql_ImoNumber",
			    "distinctiveNumbersOrLetters": "$sql_DistinctiveNumbersOrLetters",
			    "grossTonnage": "$sql_GrossTonnage",
			    "yearBuilt": $sql_YearBuilt,
			    "engineHorsePower": "$sql_EngineHorsePower",
			    "trademarkAndEngineModel": null,
			    "model": "$sql_Model",
			    "engineNo": "$sql_EngineNo",
			    "nominatedFlagState": "$sql_NominatedStateFlag",
			    "nominatedFlagStateName": "$sql_NominatedStateFlagName",
			    "portOfRegistry": "$sql_PortOfRegistry",
			    "tenderReferenceList": "$sql_TenderReferenceList",
			    "tenderOutboardReferenceList": "$sql_TenderOutboardReferenceList",
				"tradingCertificateTypeId": "$sql_TradingCertificateTypeId",
				"tradingCertificateType": 
				{
					"id": "$sql_TradingCertificateTypeId",
					"tradingCertificateGroup": 
					{
						"id": "$sql_GroupId",
						"name": "$sql_TradingCertificateGroupName",
						"groupCode": "$sql_TradingCertificateGroupCode"
					},
					"typeCode": "$sql_TradingCertificateTypeCode",
					"typeName": "$sql_TradingCertificateTypeName"
				},
				"stateAddress": null,
			    "ownerAddress": null,
			    "brokerAddress": null,
			    "memberAddress": null,
			    "jointAssuredAddress": null,
			    "branchAddress": null,
			    "signatureName": null,
			    "tradingCertificateBanks": [],
			    "branchCode": "$sql_branchCode",
			    "tradingCertificatePackId": $sql_TradingCertificatePack_Id
			}
				"""

				log.info "Request body for Patch method is : "+patchRequestBody
				
				//Run the test step to get response
				testRunner.testCase.testSteps["Patch_TradingCertificate"].setPropertyValue( "Request", patchRequestBody)
				testRunner.runTestStepByName('Patch_TradingCertificate')
				String req='${Patch_TradingCertificate#Response}'
				response=context.expand(req)
				log.info "Original API response is =>"+response
				jsonSlurper=new JsonSlurper() 
				jsonRes=jsonSlurper.parseText(response)
				
				//Check the Status code of API response
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				def httpResponseHeaders = context.testCase.testSteps["Patch_TradingCertificate"].testRequest.response.responseHeaders
				def httpStatus = httpResponseHeaders["#status#"]
				def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				log.info "HTTP Status code is =>"+httpStatusCode

				if(httpStatusCode.equals("200"))
				{
					def json=jsonSlurper.parseText(response)
						
					postApi_TradingCertificateId=json.id
					TradingCertificateId=postApi_TradingCertificateId.toString()
					tcList.add(TradingCertificateId)
					postApi_AddressType_Id=json.addressTypeId
					postApi_SourceSystem=json.sourceSystem
					postApi_Reference=json.reference
					postApi_CurrentStatus=json.currentStatus
					postApi_StorageId=json.storageId
					postApi_RiskId=json.riskId
					postApi_ApplicationRiskId=json.applicationRiskId
					postApi_PolicyId=json.policyId
					postApi_MemberPartyId=json.memberPartyId
					postApi_OwnerPartyId=json.ownerPartyId
					postApi_BrokerPartyId=json.brokerPartyId
					postApi_BrokerContactPartyId=json.brokerContactPartyId
					postApi_JointAssuredPartyId=json.jointAssuredPartyId
					postApi_IsRenewal=json.isRenewal
					postApi_IsYacht=json.isYacht
					postApi_Version=json.version
					postApi_RiskReference=json.riskReference
					postApi_PolicyReference=json.policyReference
					postApi_MemberReference=json.memberReference
					postApi_MemberType=json.memberType
					postApi_MemberName=json.memberName
					postApi_JointAssuredName=json.jointAssuredName
					postApi_OwnerReference=json.ownerReference
					postApi_OwnerName=json.ownerName
					postApi_OwnerDomicile=json.ownerDomicile
					postApi_OwnerEmailAddress=json.ownerEmailAddress
					postApi_BrokerReference=json.brokerReference
					postApi_BrokerName=json.brokerName
					postApi_BrokerEmailAddress=json.brokerEmailAddress
					postApi_PolicyYear=json.policyYear
					postApi_CertificateIssueDate=json.certificateIssueDate
					postApi_EmailAddress=json.emailAddress
					postApi_CcEmailAddress=json.ccEmailAddress
					postApi_EffectiveStartDate=json.effectiveStartDate
					postApi_EffectiveEndDate=json.effectiveEndDate
					postApi_EffectiveEndDate=getDate(postApi_EffectiveEndDate.toString())
					postApi_PassengerCapacity=json.passengerCapacity
					postApi_PolicyStartDate=json.policyStartDate
					postApi_PolicyEndDate=json.policyEndDate
					postApi_CurrencyCode=json.currencyCode
					postApi_CoverLimitAmount=json.coverLimitAmount
					postApi_SignatoryState_Id=json.signatoryStateId
					postApi_SignatoryStateAddressId=json.signatoryStateAddressId
					postApi_VesselName=json.vesselName
					postApi_VesselType=json.vesselType
					postApi_VesselTypeName=json.vesselTypeName
					postApi_vesselEnteredDate=json.vesselEnteredDate
					postApi_vesselFlag=json.vesselFlag
					postApi_imoNumber=json.imoNumber
					postApi_distinctiveNumbersOrLetters=json.distinctiveNumbersOrLetters
					postApi_grossTonnage=json.grossTonnage
					postApi_yearBuilt=json.yearBuilt
					postApi_engineHorsePower=json.engineHorsePower
					postApi_TradeMark=json.trademarkAndEngineModel
					postApi_model=json.model
					postApi_engineNo=json.engineNo
					postApi_NominatedStateFlag=json.nominatedFlagState
					postApi_NominatedStateFlagName=json.nominatedFlagStateName
					postApi_portOfRegistry=json.portOfRegistry
					postApi_tenderReferenceList=json.tenderReferenceList
					postApi_TenderOutboardReferenceList=json.tenderOutboardReferenceList
					postApi_TradingCertificateTypeId=json.tradingCertificateTypeId
					postApi_TradingCertificateGroupId=json.tradingCertificateType.tradingCertificateGroup.id
					postApi_TradingCertificateGroupName=json.tradingCertificateType.tradingCertificateGroup.name
					postApi_TradingCertificateGroupCode=json.tradingCertificateType.tradingCertificateGroup.groupCode
					postApi_TypeCode=json.tradingCertificateType.typeCode
					postApi_TypeName=json.tradingCertificateType.typeName
					postApi_BranchCode=json.branchCode
					postApi_TradingCertificatePack_Id=json.tradingCertificatePackId

					log.info "API Response is received as =>"+postApi_TradingCertificateId+","+postApi_AddressType_Id+","+postApi_SourceSystem+","+postApi_Reference+","+postApi_CurrentStatus+","+postApi_StorageId+","+postApi_RiskId+","+postApi_ApplicationRiskId+","+postApi_PolicyId+","+postApi_MemberPartyId+","+postApi_OwnerPartyId+","+postApi_BrokerPartyId+","+postApi_BrokerContactPartyId+","+postApi_JointAssuredPartyId+","+postApi_IsRenewal+","+postApi_IsYacht+","+postApi_Version+","+postApi_RiskReference+","+postApi_PolicyReference+","+postApi_MemberReference+","+postApi_MemberType+","+postApi_MemberName+","+postApi_JointAssuredName+","+postApi_OwnerReference+","+postApi_OwnerName+","+postApi_OwnerDomicile+","+postApi_OwnerEmailAddress+","+postApi_BrokerReference+","+postApi_BrokerName+","+postApi_BrokerEmailAddress+","+postApi_PolicyYear+","+postApi_EmailAddress+","+postApi_CcEmailAddress+","+postApi_EffectiveStartDate+","+postApi_EffectiveEndDate+","+postApi_PassengerCapacity+","+postApi_PolicyStartDate+","+postApi_PolicyEndDate+","+postApi_CurrencyCode+","+postApi_CoverLimitAmount+","+postApi_SignatoryState_Id+","+postApi_SignatoryStateAddressId+","+postApi_VesselName+","+postApi_VesselType+","+postApi_VesselTypeName+","+postApi_vesselEnteredDate+","+postApi_vesselFlag+","+postApi_imoNumber+","+postApi_distinctiveNumbersOrLetters+","+postApi_grossTonnage+","+postApi_yearBuilt+","+postApi_engineHorsePower+","+postApi_TradeMark+","+postApi_model+","+postApi_engineNo+","+postApi_NominatedStateFlag+","+postApi_NominatedStateFlagName+","+postApi_portOfRegistry+","+postApi_tenderReferenceList+","+postApi_TenderOutboardReferenceList+","+postApi_TradingCertificateTypeId+","+postApi_TradingCertificateGroupId+","+postApi_TradingCertificateGroupName+","+postApi_TradingCertificateGroupCode+","+postApi_TypeCode+","+postApi_TypeName+","+postApi_BranchCode+","+postApi_TradingCertificatePack_Id
					arrCellVal=[postApi_TradingCertificateId,postApi_AddressType_Id,postApi_SourceSystem,postApi_Reference,postApi_CurrentStatus,postApi_StorageId,postApi_RiskId,postApi_ApplicationRiskId,postApi_PolicyId,postApi_MemberPartyId,postApi_OwnerPartyId,postApi_BrokerPartyId,postApi_BrokerContactPartyId,postApi_JointAssuredPartyId,postApi_IsRenewal,postApi_IsYacht,postApi_Version,postApi_RiskReference,postApi_PolicyReference,postApi_MemberReference,postApi_MemberType,postApi_MemberName,postApi_JointAssuredName,postApi_OwnerReference,postApi_OwnerName,postApi_OwnerDomicile,postApi_OwnerEmailAddress,postApi_BrokerReference,postApi_BrokerName,postApi_BrokerEmailAddress,postApi_PolicyYear,postApi_EmailAddress,postApi_CcEmailAddress,postApi_EffectiveStartDate,postApi_EffectiveEndDate,postApi_PassengerCapacity,postApi_PolicyStartDate,postApi_PolicyEndDate,postApi_CurrencyCode,postApi_CoverLimitAmount,postApi_SignatoryState_Id,postApi_SignatoryStateAddressId,postApi_VesselName,postApi_VesselType,postApi_VesselTypeName,postApi_vesselEnteredDate,postApi_vesselFlag,postApi_imoNumber,postApi_distinctiveNumbersOrLetters,postApi_grossTonnage,postApi_yearBuilt,postApi_engineHorsePower,postApi_TradeMark,postApi_model,postApi_engineNo,postApi_NominatedStateFlag,postApi_NominatedStateFlagName,postApi_portOfRegistry,postApi_tenderReferenceList,postApi_TenderOutboardReferenceList,postApi_TradingCertificateTypeId,postApi_TradingCertificateGroupId,postApi_TradingCertificateGroupName,postApi_TradingCertificateGroupCode,postApi_TypeCode,postApi_TypeName,postApi_BranchCode,postApi_TradingCertificatePack_Id];
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}//if statement closed
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}
			}//inner sql end
			
			totalColumns = source.getRow(1).getLastCellNum()
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start

			arrCellVal=['DB DATA']
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			//arrOutputHeaderapi = ["TradingCertificateId","TradingCertificatePackId","ActualStatusCode","Status"];
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)

			log.info "Number of Trading Certificate are=> "+tcList.size()
			log.info "TradingCertificateId=> "+tcList

			 for (int i = 0; i < tcList.size(); i++)
			 {
			 	tcIdForGetDetails=tcList.get(i)
			 	
			 	log.info "Getting Trading Certificate details =>"+tcIdForGetDetails

			 	String getTCId=
				"""
					declare
					@TCID as int = '"""+tcIdForGetDetails+"""'
					select
					TOP 1
					TC.Id as TradingCertificateId, TC.AddressType_Id,TC.SourceSystem,TC.Reference, TC.CurrentStatus, 
					TC.StorageId, TC.RiskId, TC.ApplicationRiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId, 
					case when TC.IsOwner =0 then 'FALSE' when TC.IsOwner =0 then 'TRUE' else NULL end as IsOwner, TC.BrokerContactPartyId,  TC.JointAssuredPartyId, 
					case when TC.IsRenewal = 1 then 'TRUE'    when TC.IsRenewal = 0 then 'FALSE' else NULL end as IsRenewal,
					case when TC.IsYacht = 1 then 'TRUE' when TC.IsYacht = 0 then 'FALSE' else NULL end as IsYacht,TC.TradingCertificateVersion as Version,
					TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,TC.JointAssuredName, TC.OwnerReference,
					TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,TC.PolicyYear, TC.CertificateIssueDate,
					TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity, TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,
					TC.SignatoryState_Id, TC.SignatoryStateAddressId, TC.VesselName,TC.VesselType,TC.VesselTypeName, TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,
					TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower, TC.TradeMark, TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList,
					TC.TenderOutboardReferenceList, TC.Type_Id as TradingCertificateTypeId,RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode,
					RT.TypeCode, RT.Name as TypeName, TC.BranchCode, TC.TradingCertificatePack_Id
					from TradingCertificate TC
					inner join ref_Type RT on RT.Id=TC.Type_Id
					inner join ref_Group RG on RG.Id=RT.Group_Id
					left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id and BS.IsDeleted = 0
					where TC.Id=@TCID
					Order by 1 desc
				"""
				arrData=null
				//DB sheet start
				con.eachRow(getTCId) 
				{ 
					getDetails->
						sql_TradingCertificateId=getDetails.TradingCertificateId
						sql_AddressType_Id=getDetails.AddressType_Id
						sql_SourceSystem=getDetails.SourceSystem
						sql_Reference=getDetails.Reference
						sql_CurrentStatus=getDetails.CurrentStatus
						sql_StorageId=getDetails.StorageId
						sql_RiskId=getDetails.RiskId
						sql_ApplicationRiskId=getDetails.ApplicationRiskId
						sql_PolicyId=getDetails.PolicyId
						sql_MemberPartyId=getDetails.MemberPartyId
						sql_OwnerPartyId=getDetails.OwnerPartyId
						sql_BrokerPartyId=getDetails.BrokerPartyId
						sql_BrokerContactPartyId=getDetails.BrokerContactPartyId
						sql_JointAssuredPartyId=getDetails.JointAssuredPartyId
						sql_IsRenewal=getDetails.IsRenewal
						sql_IsYacht=getDetails.IsYacht
						sql_Version=getDetails.Version
						sql_RiskReference=getDetails.RiskReference
						sql_PolicyReference=getDetails.PolicyReference
						sql_MemberReference=getDetails.MemberReference
						sql_MemberType=getDetails.MemberType
						sql_MemberName=getDetails.MemberName
						sql_JointAssuredName=getDetails.JointAssuredName
						sql_OwnerReference=getDetails.OwnerReference
						sql_OwnerName=getDetails.OwnerName
						sql_OwnerDomicile=getDetails.OwnerDomicile
						sql_OwnerEmailAddress=getDetails.OwnerEmailAddress
						sql_BrokerReference=getDetails.BrokerReference
						sql_BrokerName=getDetails.BrokerName
						sql_BrokerEmailAddress=getDetails.BrokerEmailAddress
						sql_PolicyYear=getDetails.PolicyYear
						sql_CertificateIssueDate=getDetails.CertificateIssueDate
						sql_CertificateIssueDate=sql_CertificateIssueDate.toString().replace(" ","T")
						sql_CertificateIssueDate=getDate(sql_CertificateIssueDate.toString())
						sql_EmailAddress=getDetails.EmailAddress
						sql_CcEmailAddress=getDetails.CcEmailAddress
						sql_EffectiveStartDate=getDetails.EffectiveStartDate
						sql_EffectiveStartDate=sql_EffectiveStartDate.toString().replace(" ","T")
						sql_EffectiveStartDate=getDate(sql_EffectiveStartDate.toString())
						sql_EffectiveEndDate=getDetails.EffectiveEndDate
						sql_EffectiveEndDate=sql_EffectiveEndDate.toString().replace(" ","T")
						sql_EffectiveEndDate=getDate(sql_EffectiveEndDate.toString())
						sql_PassengerCapacity=getDetails.PassengerCapacity
						sql_PolicyStartDate=getDetails.PolicyStartDate
						sql_PolicyStartDate=sql_PolicyStartDate.toString().replace(" ","T")
						sql_PolicyStartDate=getDate(sql_PolicyStartDate.toString())
						sql_PolicyEndDate=getDetails.PolicyEndDate
						sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" ","T")
						sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())
						sql_CurrencyCode=getDetails.CurrencyCode
						sql_CoverLimitAmount=getDetails.CoverLimitAmount
						sql_SignatoryState_Id=getDetails.SignatoryState_Id
						sql_SignatoryStateAddressId=getDetails.SignatoryStateAddressId
						sql_VesselName=getDetails.VesselName
						sql_VesselType=getDetails.VesselType
						sql_VesselTypeName=getDetails.VesselTypeName
						sql_vesselEnteredDate=getDetails.vesselEnteredDate
						sql_vesselEnteredDate=sql_vesselEnteredDate.toString().replace(" ","T")
						sql_vesselEnteredDate=getDate(sql_vesselEnteredDate.toString())
						sql_vesselFlag=getDetails.vesselFlag
						sql_imoNumber=getDetails.imoNumber
						sql_distinctiveNumbersOrLetters=getDetails.distinctiveNumbersOrLetters
						sql_grossTonnage=getDetails.grossTonnage
						sql_yearBuilt=getDetails.yearBuilt
						sql_engineHorsePower=getDetails.engineHorsePower
						sql_TradeMark=getDetails.TradeMark
						sql_model=getDetails.model
						sql_engineNo=getDetails.engineNo
						sql_NominatedStateFlag=getDetails.NominatedStateFlag
						sql_NominatedStateFlagName=getDetails.NominatedStateFlagName
						sql_portOfRegistry=getDetails.portOfRegistry
						sql_tenderReferenceList=getDetails.tenderReferenceList
						sql_TenderOutboardReferenceList=getDetails.TenderOutboardReferenceList
						sql_TradingCertificateTypeId=getDetails.TradingCertificateTypeId
						sql_TradingCertificateGroupId=getDetails.TradingCertificateGroupId
						sql_TradingCertificateGroupName=getDetails.TradingCertificateGroupName
						sql_TradingCertificateGroupCode=getDetails.TradingCertificateGroupCode
						sql_TypeCode=getDetails.TypeCode
						sql_TypeName=getDetails.TypeName
						sql_BranchCode=getDetails.BranchCode
						sql_TradingCertificatePack_Id=getDetails.TradingCertificatePack_Id

						log.info "SQL response received as =>"+sql_TradingCertificateId+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_ApplicationRiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_BrokerContactPartyId+","+sql_JointAssuredPartyId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_SignatoryStateAddressId+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_TradeMark+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TypeCode+","+sql_TypeName+","+sql_BranchCode+","+sql_TradingCertificatePack_Id
						arrCellVal=[sql_TradingCertificateId,sql_AddressType_Id,sql_SourceSystem,sql_Reference,sql_CurrentStatus,sql_StorageId,sql_RiskId,sql_ApplicationRiskId, sql_PolicyId,sql_MemberPartyId,sql_OwnerPartyId,sql_BrokerPartyId,sql_BrokerContactPartyId,sql_JointAssuredPartyId,sql_IsRenewal,sql_IsYacht,sql_Version,sql_RiskReference,sql_PolicyReference,sql_MemberReference,sql_MemberType,sql_MemberName,sql_JointAssuredName,sql_OwnerReference,sql_OwnerName,sql_OwnerDomicile,sql_OwnerEmailAddress,sql_BrokerReference,sql_BrokerName,sql_BrokerEmailAddress,sql_PolicyYear,sql_EmailAddress,sql_CcEmailAddress,sql_EffectiveStartDate,sql_EffectiveEndDate,sql_PassengerCapacity,sql_PolicyStartDate,sql_PolicyEndDate,sql_CurrencyCode,sql_CoverLimitAmount,sql_SignatoryState_Id,sql_SignatoryStateAddressId,sql_VesselName,sql_VesselType,sql_VesselTypeName,sql_vesselEnteredDate,sql_vesselFlag,sql_imoNumber,sql_distinctiveNumbersOrLetters,sql_grossTonnage,sql_yearBuilt,sql_engineHorsePower,sql_TradeMark,sql_model,sql_engineNo,sql_NominatedStateFlag,sql_NominatedStateFlagName,sql_portOfRegistry,sql_tenderReferenceList,sql_TenderOutboardReferenceList,sql_TradingCertificateTypeId,sql_TradingCertificateGroupId,sql_TradingCertificateGroupName,sql_TradingCertificateGroupCode,sql_TypeCode,sql_TypeName,sql_BranchCode,sql_TradingCertificatePack_Id]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
						total_size++
						counter++
						try
						{
							RT.saveExcelFile(summary_File,O_Summary)
						}
						catch(Exception e)
						{
						  log.info e.getMessage();	
						}
					}//sql end
			 }//for loop end
			con.close()

			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for update Trading Certificate with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String  removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field==null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
		field="NULL"
	}
	if(field!=null)
		field=field.toUpperCase()
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}
public String getDate(String field)
{
	if(field!=null && field.length()==21)
		field = field.substring(0, field.length() - 2);
	
	if(field==null)
			field="NULL"
	else if(field=="" || field==" " || field==null)	
			field="NULL"
	return field
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="PATCH_TradingCertificate_AllTCTypes" id="ece75dbe-c216-46d6-8970-27d19bc32393"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_PATCH_ TradingCertificates"))
		tcModuleName="Patch_TCForAllTCTypes"
	
	if(tcModuleName.toString().equals("Patch_TCForAllTCTypes"))
	{
		log.info "Test Execution started for Updating Trading Certificates"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["TradingCertificateId","AddressType_Id","SourceSystem","Reference","CurrentStatus","StorageId","RiskId","ApplicationRiskId","PolicyId","MemberPartyId","OwnerPartyId","BrokerPartyId","BrokerContactPartyId","JointAssuredPartyId","IsRenewal","IsYacht","Version","RiskReference","PolicyReference","MemberReference","MemberType","MemberName","JointAssuredName","OwnerReference","OwnerName","OwnerDomicile","OwnerEmailAddress","BrokerReference","BrokerName","BrokerEmailAddress","PolicyYear","EmailAddress","CcEmailAddress","EffectiveStartDate","EffectiveEndDate","PassengerCapacity","PolicyStartDate","PolicyEndDate","CurrencyCode","CoverLimitAmount","SignatoryState_Id","SignatoryStateAddressId","VesselName","VesselType","VesselTypeName","vesselEnteredDate","vesselFlag","imoNumber","distinctiveNumbersOrLetters","grossTonnage","yearBuilt","engineHorsePower","TradeMark","model","engineNo","NominatedStateFlag","NominatedStateFlagName","portOfRegistry","tenderReferenceList","TenderOutboardReferenceList","TradingCertificateTypeId","TradingCertificateGroupId","TradingCertificateGroupName","TradingCertificateGroupCode","TypeCode","TypeName","BranchCode","TradingCertificatePack_Id","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			def tcIdForGetDetails;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			arrCellVal=['API data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)

			ArrayList<String> tcList = new ArrayList<>();
			String getTCTpes=
			"""
			Use tradingcertificate
			Select
			RT.Id as TypeId, RT.Group_Id as GroupId, RG.Name as GroupName, RG.GroupCode,
			RT.TypeCode, RT.Name as TypeName
			from ref_Type RT
			inner join ref_Group RG on RT.Group_Id = RG.Id
			"""
		con.eachRow(getTCTpes)
		{
			getType->
			sql_TypeId=getType.TypeId
			sql_TypeCode=getType.TypeCode
			sql_TypeName=getType.TypeName
			sql_GroupId=getType.GroupId
			sql_GroupCode=getType.GroupCode
			sql_GroupName=getType.GroupName

				
			String sqlstmt=
			"""
			USE tradingcertificate
			declare 
			@TypeId as int ="""+sql_TypeId+""",
			@TypeCode varchar(50) ='"""+sql_TypeCode+"""',
			@TypeName varchar(50) ='"""+sql_TypeName+"""',
			@GroupId as int ="""+sql_GroupId+""",
			@GroupCode varchar(50) ='"""+sql_GroupCode+"""',
			@GroupName varchar(50) ='"""+sql_GroupName+"""'
			
			Select 
			top 1
			TC.Id, TC.AddressType_Id, TC.SourceSystem, TC.Reference, TC.CurrentStatus, TC.StorageId, TC.IsYacht, case when TC.IsYacht=0 then 'False' when TC.IsYacht=1 then 'True' else null end as IsYachtFlag,
			TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
			TC.isRenewal, case when TC.isRenewal = 1 then 'True' when TC.isRenewal = 0  then 'False' else NULL end as IsRenewalFlag, TC.TradingCertificateVersion as version,
			TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName, TC.JointAssuredName, TC.OwnerReference,
			TC.OwnerName,TC.OwnerDomicile,TC.OwnerEmailAddress,TC.BrokerReference,TC.BrokerName,TC.BrokerEmailAddress,TC.PolicyYear,TC.CertificateIssueDate,
			TC.EmailAddress,TC.CCEmailAddress,TC.EffectiveStartDate,TC.EffectiveEndDate,TC.PassengerCapacity,TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,
			TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,TC.VesselEnteredDate,TC.VesselFlag,TC.ImoNumber,TC.DistinctiveNumbersOrLetters,
			TC.GrossTonnage,TC.YearBuilt,TC.EngineHorsePower,TC.TradeMark,TC.Model,TC.EngineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.PortOfRegistry,
			TC.TenderReferenceList,TC.TenderOutboardReferenceList,TC.Type_Id as TradingCertificateTypeId,RT.Id as TradingCertificateTypeId, RT.Group_Id as GroupId, 
			RG.Name as TradingCertificateGroupName,RG.GroupCode as TradingCertificateGroupCode, RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName,
			TC.ApplicationRiskId, TC.BrokerContactPartyId, TC.JointAssuredPartyId, TC.SignatoryStateAddressId, TC.TradingCertificatePack_Id, TC.BranchCode
			from TradingCertificate TC
			inner join ref_Type RT on RT.Id=TC.Type_Id
			inner join ref_Group RG on RG.Id=RT.Group_Id
			left join AddressSnapshot ADRS on ADRS.TradingCertificate_Id=TC.Id
			where TC.EffectiveStartDate is not null AND TC.PassengerCapacity is not null and TC.CoverLimitAmount is not null
			and
			TC.Type_Id= @TypeId and
			RT.Group_Id=@GroupId and
			RG.Name=@GroupName and
			RG.GroupCode=@GroupCode and
			RT.TypeCode=@TypeCode and
			RT.Name=@TypeName
			order by 1 desc
			"""	
			con.eachRow(sqlstmt)
			{
				row ->
				sql_Id=row.Id
				sql_AddressType_Id=row.AddressType_Id
				sql_SourceSystem=row.SourceSystem
				sql_Reference=row.Reference
				sql_CurrentStatus=row.CurrentStatus
				sql_StorageId=row.StorageId
				sql_IsYacht=row.IsYacht
				sql_IsYachtFlag=row.IsYachtFlag
				sql_RiskId=row.RiskId
				sql_PolicyId=row.PolicyId
				sql_MemberPartyId=row.MemberPartyId
				sql_OwnerPartyId=row.OwnerPartyId
				sql_BrokerPartyId=row.BrokerPartyId
				sql_BrokerContactPartyId=row.BrokerContactPartyId
				sql_IsRenewalFlag=row.IsRenewalFlag
				sql_version=row.version
				sql_ApplicationRiskId=row.ApplicationRiskId
				sql_JointAssuredPartyId=row.JointAssuredPartyId
				sql_RiskReference=row.RiskReference
				sql_PolicyReference=row.PolicyReference
				sql_MemberReference=row.MemberReference
				sql_MemberType=row.MemberType
				sql_MemberName=row.MemberName
				sql_MemberName=removeComma(sql_MemberName.toString())
				sql_JointAssuredName=row.JointAssuredName
				sql_OwnerReference=row.OwnerReference
				sql_OwnerName=row.OwnerName
				sql_OwnerDomicile=row.OwnerDomicile
				sql_OwnerEmailAddress=row.OwnerEmailAddress
				sql_BrokerReference=row.BrokerReference
				sql_BrokerName=row.BrokerName
				sql_BrokerEmailAddress=row.BrokerEmailAddress
				sql_PolicyYear=row.PolicyYear
				sql_CertificateIssueDate=row.CertificateIssueDate
				sql_CertificateIssueDate=getDate(sql_CertificateIssueDate.toString())
				sql_EmailAddress=row.EmailAddress
				sql_CCEmailAddress=row.CCEmailAddress
				sql_SignatoryStateAddressId=row.SignatoryStateAddressId
				sql_EffectiveStartDate=row.EffectiveStartDate
				sql_EffectiveStartDate=getDate(sql_EffectiveStartDate.toString())
				sql_EffectiveEndDate=row.EffectiveEndDate
				sql_EffectiveEndDate=getDate(sql_EffectiveEndDate.toString())
				sql_PassengerCapacity=row.PassengerCapacity
				sql_PolicyStartDate=row.PolicyStartDate
				sql_PolicyStartDate=getDate(sql_PolicyStartDate.toString())
				sql_PolicyEndDate=row.PolicyEndDate
				sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())
				sql_CurrencyCode=row.CurrencyCode
				sql_CoverLimitAmount=row.CoverLimitAmount
				sql_CoverLimitAmount=sql_CoverLimitAmount.toString().replace(".00","")
				sql_SignatoryState_Id=row.SignatoryState_Id
				sql_VesselName=row.VesselName
				sql_VesselType=row.VesselType
				sql_VesselTypeName=row.VesselTypeName
				sql_VesselEnteredDate=row.VesselEnteredDate
				sql_VesselEnteredDate=getDate(sql_VesselEnteredDate.toString())
				sql_VesselFlag=row.VesselFlag
				sql_ImoNumber=row.ImoNumber
				sql_DistinctiveNumbersOrLetters=row.DistinctiveNumbersOrLetters
				sql_GrossTonnage=row.GrossTonnage
				sql_YearBuilt=row.YearBuilt
				sql_EngineHorsePower=row.EngineHorsePower
				sql_TradeMark=row.TradeMark
				sql_Model=row.Model
				sql_EngineNo=row.EngineNo
				sql_NominatedStateFlag=row.NominatedStateFlag
				sql_NominatedStateFlag=removeComma(sql_NominatedStateFlag.toString())	
				sql_NominatedStateFlagName=row.NominatedStateFlagName
				sql_NominatedStateFlagName=removeComma(sql_NominatedStateFlagName.toString())
				sql_PortOfRegistry=row.PortOfRegistry
				sql_PortOfRegistry=removeComma(sql_PortOfRegistry.toString())	
				sql_TenderReferenceList=row.TenderReferenceList
				sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
				sql_TradingCertificateTypeId=row.TradingCertificateTypeId
				sql_TradingCertificateTypeId=row.TradingCertificateTypeId
				sql_GroupId=row.GroupId
				sql_TradingCertificateGroupName=row.tradingCertificateGroupName
				sql_TradingCertificateGroupCode=row.tradingCertificateGroupCode
				sql_TradingCertificateTypeCode=row.TradingCertificateTypeCode
				sql_TradingCertificateTypeName=row.TradingCertificateTypeName
				sql_TradingCertificatePack_Id=row.TradingCertificatePack_Id
				sql_branchCode=row.BranchCode
				
				Random a = new Random()
				int rnd =a.next(3)
				log.info rnd
				if(rnd==0)
				{
					rnd=2	
				}
				
				def arrData;
				def patchRequestBody = 
				"""
				{
				"id": $sql_Id, 
			    	"addressTypeId": $sql_AddressType_Id, 
			    	"sourceSystem": "$sql_SourceSystem",
			    	"reference": "$sql_Reference",
			    	"currentStatus": "$sql_CurrentStatus",
			    "storageId": "$sql_StorageId",
			    "riskId": $sql_RiskId,
			    "applicationRiskId": $sql_ApplicationRiskId,
			    "policyId": $sql_PolicyId,
			    "memberPartyId": $sql_MemberPartyId,
			    "ownerPartyId": $sql_OwnerPartyId,
			    "brokerPartyId": $sql_BrokerPartyId,
			    "brokerContactPartyId": $sql_BrokerContactPartyId,
			    "jointAssuredPartyId": $sql_JointAssuredPartyId,
			    "version": $sql_version,
			    "riskReference": "$sql_RiskReference",
			    "policyReference": "$sql_PolicyReference",
			    "memberReference": "$sql_MemberReference",
			    "memberType": "$sql_MemberType",
			    "memberName": "$sql_MemberName",
			    "jointAssuredName": "$sql_JointAssuredName",
			    "ownerReference": "$sql_OwnerReference",
			    "ownerName": "$sql_OwnerName",
			    "ownerDomicile": "$sql_OwnerDomicile",
			    "ownerEmailAddress": "$sql_OwnerEmailAddress",
			    "brokerReference": "$sql_BrokerReference",
			    "brokerName": "$sql_BrokerName",
			    "brokerEmailAddress": "$sql_BrokerEmailAddress",
			    "policyYear": "$sql_PolicyYear",
			    "emailAddress": "$sql_EmailAddress",
			    "ccEmailAddress": "$sql_CCEmailAddress",
			    "effectiveStartDate": "2021-01-23T12:00:00",
    			    "effectiveEndDate": "2024-08-13T12:00:00",
			    "passengerCapacity": "$sql_PassengerCapacity",
			    "policyStartDate": "2021-01-23T12:00:00",
    				"policyEndDate": "2024-08-13T12:00:00",
			    "currencyCode": "$sql_CurrencyCode",
			    "coverLimitAmount": "$sql_CoverLimitAmount",
			    "signatoryStateId": $sql_SignatoryState_Id,
			    "signatoryStateAddressId": $sql_SignatoryStateAddressId,
			    "vesselName": "$sql_VesselName",
			    "vesselType": "$sql_VesselType",
			    "vesselEnteredDate": "2020-08-12T12:00:00",
			    "vesselTypeName": "$sql_VesselTypeName",
			    "vesselFlag": "$sql_VesselFlag",
			    "imoNumber": "$sql_ImoNumber",
			    "distinctiveNumbersOrLetters": "$sql_DistinctiveNumbersOrLetters",
			    "grossTonnage": "$sql_GrossTonnage",
			    "yearBuilt": $sql_YearBuilt,
			    "engineHorsePower": "$sql_EngineHorsePower",
			    "trademarkAndEngineModel": null,
			    "model": "$sql_Model",
			    "engineNo": "$sql_EngineNo",
			    "nominatedFlagState": "$sql_NominatedStateFlag",
			    "nominatedFlagStateName": "$sql_NominatedStateFlagName",
			    "portOfRegistry": "$sql_PortOfRegistry",
			    "tenderReferenceList": "$sql_TenderReferenceList",
			    "tenderOutboardReferenceList": "$sql_TenderOutboardReferenceList",
				"tradingCertificateTypeId": "$sql_TradingCertificateTypeId",
				"tradingCertificateType": 
				{
					"id": "$sql_TradingCertificateTypeId",
					"tradingCertificateGroup": 
					{
						"id": "$sql_GroupId",
						"name": "$sql_TradingCertificateGroupName",
						"groupCode": "$sql_TradingCertificateGroupCode"
					},
					"typeCode": "$sql_TradingCertificateTypeCode",
					"typeName": "$sql_TradingCertificateTypeName"
				},
				"stateAddress": null,
			    "ownerAddress": null,
			    "brokerAddress": null,
			    "memberAddress": null,
			    "jointAssuredAddress": null,
			    "branchAddress": null,
			    "signatureName": null,
			    "tradingCertificateBanks": [],
			    "branchCode": "$sql_branchCode",
			    "tradingCertificatePackId": $sql_TradingCertificatePack_Id
			}
				"""

				log.info "Request body for Patch method is : "+patchRequestBody
				
				//Run the test step to get response
				testRunner.testCase.testSteps["Patch_TradingCertificate"].setPropertyValue( "Request", patchRequestBody)
				testRunner.runTestStepByName('Patch_TradingCertificate')
				String req='${Patch_TradingCertificate#Response}'
				response=context.expand(req)
				log.info "Original API response is =>"+response
				jsonSlurper=new JsonSlurper() 
				jsonRes=jsonSlurper.parseText(response)
				
				//Check the Status code of API response
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				def httpResponseHeaders = context.testCase.testSteps["Patch_TradingCertificate"].testRequest.response.responseHeaders
				def httpStatus = httpResponseHeaders["#status#"]
				def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				log.info "HTTP Status code is =>"+httpStatusCode

				if(httpStatusCode.equals("200"))
				{
					def json=jsonSlurper.parseText(response)
						
					postApi_TradingCertificateId=json.id
					TradingCertificateId=postApi_TradingCertificateId.toString()
					tcList.add(TradingCertificateId)
					postApi_AddressType_Id=json.addressTypeId
					postApi_SourceSystem=json.sourceSystem
					postApi_Reference=json.reference
					postApi_CurrentStatus=json.currentStatus
					postApi_StorageId=json.storageId
					postApi_RiskId=json.riskId
					postApi_ApplicationRiskId=json.applicationRiskId
					postApi_PolicyId=json.policyId
					postApi_MemberPartyId=json.memberPartyId
					postApi_OwnerPartyId=json.ownerPartyId
					postApi_BrokerPartyId=json.brokerPartyId
					postApi_BrokerContactPartyId=json.brokerContactPartyId
					postApi_JointAssuredPartyId=json.jointAssuredPartyId
					postApi_IsRenewal=json.isRenewal
					postApi_IsYacht=json.isYacht
					postApi_Version=json.version
					postApi_RiskReference=json.riskReference
					postApi_PolicyReference=json.policyReference
					postApi_MemberReference=json.memberReference
					postApi_MemberType=json.memberType
					postApi_MemberName=json.memberName
					postApi_JointAssuredName=json.jointAssuredName
					postApi_OwnerReference=json.ownerReference
					postApi_OwnerName=json.ownerName
					postApi_OwnerDomicile=json.ownerDomicile
					postApi_OwnerEmailAddress=json.ownerEmailAddress
					postApi_BrokerReference=json.brokerReference
					postApi_BrokerName=json.brokerName
					postApi_BrokerEmailAddress=json.brokerEmailAddress
					postApi_PolicyYear=json.policyYear
					postApi_CertificateIssueDate=json.certificateIssueDate
					postApi_EmailAddress=json.emailAddress
					postApi_CcEmailAddress=json.ccEmailAddress
					postApi_EffectiveStartDate=json.effectiveStartDate
					postApi_EffectiveEndDate=json.effectiveEndDate
					postApi_EffectiveEndDate=getDate(postApi_EffectiveEndDate.toString())
					postApi_PassengerCapacity=json.passengerCapacity
					postApi_PolicyStartDate=json.policyStartDate
					postApi_PolicyEndDate=json.policyEndDate
					postApi_CurrencyCode=json.currencyCode
					postApi_CoverLimitAmount=json.coverLimitAmount
					postApi_SignatoryState_Id=json.signatoryStateId
					postApi_SignatoryStateAddressId=json.signatoryStateAddressId
					postApi_VesselName=json.vesselName
					postApi_VesselType=json.vesselType
					postApi_VesselTypeName=json.vesselTypeName
					postApi_vesselEnteredDate=json.vesselEnteredDate
					postApi_vesselFlag=json.vesselFlag
					postApi_imoNumber=json.imoNumber
					postApi_distinctiveNumbersOrLetters=json.distinctiveNumbersOrLetters
					postApi_grossTonnage=json.grossTonnage
					postApi_yearBuilt=json.yearBuilt
					postApi_engineHorsePower=json.engineHorsePower
					postApi_TradeMark=json.trademarkAndEngineModel
					postApi_model=json.model
					postApi_engineNo=json.engineNo
					postApi_NominatedStateFlag=json.nominatedFlagState
					postApi_NominatedStateFlagName=json.nominatedFlagStateName
					postApi_portOfRegistry=json.portOfRegistry
					postApi_tenderReferenceList=json.tenderReferenceList
					postApi_TenderOutboardReferenceList=json.tenderOutboardReferenceList
					postApi_TradingCertificateTypeId=json.tradingCertificateTypeId
					postApi_TradingCertificateGroupId=json.tradingCertificateType.tradingCertificateGroup.id
					postApi_TradingCertificateGroupName=json.tradingCertificateType.tradingCertificateGroup.name
					postApi_TradingCertificateGroupCode=json.tradingCertificateType.tradingCertificateGroup.groupCode
					postApi_TypeCode=json.tradingCertificateType.typeCode
					postApi_TypeName=json.tradingCertificateType.typeName
					postApi_BranchCode=json.branchCode
					postApi_TradingCertificatePack_Id=json.tradingCertificatePackId

					log.info "API Response is received as =>"+postApi_TradingCertificateId+","+postApi_AddressType_Id+","+postApi_SourceSystem+","+postApi_Reference+","+postApi_CurrentStatus+","+postApi_StorageId+","+postApi_RiskId+","+postApi_ApplicationRiskId+","+postApi_PolicyId+","+postApi_MemberPartyId+","+postApi_OwnerPartyId+","+postApi_BrokerPartyId+","+postApi_BrokerContactPartyId+","+postApi_JointAssuredPartyId+","+postApi_IsRenewal+","+postApi_IsYacht+","+postApi_Version+","+postApi_RiskReference+","+postApi_PolicyReference+","+postApi_MemberReference+","+postApi_MemberType+","+postApi_MemberName+","+postApi_JointAssuredName+","+postApi_OwnerReference+","+postApi_OwnerName+","+postApi_OwnerDomicile+","+postApi_OwnerEmailAddress+","+postApi_BrokerReference+","+postApi_BrokerName+","+postApi_BrokerEmailAddress+","+postApi_PolicyYear+","+postApi_EmailAddress+","+postApi_CcEmailAddress+","+postApi_EffectiveStartDate+","+postApi_EffectiveEndDate+","+postApi_PassengerCapacity+","+postApi_PolicyStartDate+","+postApi_PolicyEndDate+","+postApi_CurrencyCode+","+postApi_CoverLimitAmount+","+postApi_SignatoryState_Id+","+postApi_SignatoryStateAddressId+","+postApi_VesselName+","+postApi_VesselType+","+postApi_VesselTypeName+","+postApi_vesselEnteredDate+","+postApi_vesselFlag+","+postApi_imoNumber+","+postApi_distinctiveNumbersOrLetters+","+postApi_grossTonnage+","+postApi_yearBuilt+","+postApi_engineHorsePower+","+postApi_TradeMark+","+postApi_model+","+postApi_engineNo+","+postApi_NominatedStateFlag+","+postApi_NominatedStateFlagName+","+postApi_portOfRegistry+","+postApi_tenderReferenceList+","+postApi_TenderOutboardReferenceList+","+postApi_TradingCertificateTypeId+","+postApi_TradingCertificateGroupId+","+postApi_TradingCertificateGroupName+","+postApi_TradingCertificateGroupCode+","+postApi_TypeCode+","+postApi_TypeName+","+postApi_BranchCode+","+postApi_TradingCertificatePack_Id
					arrCellVal=[postApi_TradingCertificateId,postApi_AddressType_Id,postApi_SourceSystem,postApi_Reference,postApi_CurrentStatus,postApi_StorageId,postApi_RiskId,postApi_ApplicationRiskId,postApi_PolicyId,postApi_MemberPartyId,postApi_OwnerPartyId,postApi_BrokerPartyId,postApi_BrokerContactPartyId,postApi_JointAssuredPartyId,postApi_IsRenewal,postApi_IsYacht,postApi_Version,postApi_RiskReference,postApi_PolicyReference,postApi_MemberReference,postApi_MemberType,postApi_MemberName,postApi_JointAssuredName,postApi_OwnerReference,postApi_OwnerName,postApi_OwnerDomicile,postApi_OwnerEmailAddress,postApi_BrokerReference,postApi_BrokerName,postApi_BrokerEmailAddress,postApi_PolicyYear,postApi_EmailAddress,postApi_CcEmailAddress,postApi_EffectiveStartDate,postApi_EffectiveEndDate,postApi_PassengerCapacity,postApi_PolicyStartDate,postApi_PolicyEndDate,postApi_CurrencyCode,postApi_CoverLimitAmount,postApi_SignatoryState_Id,postApi_SignatoryStateAddressId,postApi_VesselName,postApi_VesselType,postApi_VesselTypeName,postApi_vesselEnteredDate,postApi_vesselFlag,postApi_imoNumber,postApi_distinctiveNumbersOrLetters,postApi_grossTonnage,postApi_yearBuilt,postApi_engineHorsePower,postApi_TradeMark,postApi_model,postApi_engineNo,postApi_NominatedStateFlag,postApi_NominatedStateFlagName,postApi_portOfRegistry,postApi_tenderReferenceList,postApi_TenderOutboardReferenceList,postApi_TradingCertificateTypeId,postApi_TradingCertificateGroupId,postApi_TradingCertificateGroupName,postApi_TradingCertificateGroupCode,postApi_TypeCode,postApi_TypeName,postApi_BranchCode,postApi_TradingCertificatePack_Id];
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}//if statement closed
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}
			}//inner sql end
		}	
			
			totalColumns = source.getRow(1).getLastCellNum()
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start

			arrCellVal=['DB DATA']
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			//arrOutputHeaderapi = ["TradingCertificateId","TradingCertificatePackId","ActualStatusCode","Status"];
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)

			log.info "Number of Trading Certificate are=> "+tcList.size()
			log.info "TradingCertificateId=> "+tcList

			 for (int i = 0; i < tcList.size(); i++)
			 {
			 	tcIdForGetDetails=tcList.get(i)
			 	
			 	log.info "Getting Trading Certificate details =>"+tcIdForGetDetails

			 	String getTCId=
				"""
					declare
					@TCID as int = '"""+tcIdForGetDetails+"""'
					select
					TOP 1
					TC.Id as TradingCertificateId, TC.AddressType_Id,TC.SourceSystem,TC.Reference, TC.CurrentStatus, 
					TC.StorageId, TC.RiskId, TC.ApplicationRiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId, 
					case when TC.IsOwner =0 then 'FALSE' when TC.IsOwner =0 then 'TRUE' else NULL end as IsOwner, TC.BrokerContactPartyId,  TC.JointAssuredPartyId, 
					case when TC.IsRenewal = 1 then 'TRUE'    when TC.IsRenewal = 0 then 'FALSE' else NULL end as IsRenewal,
					case when TC.IsYacht = 1 then 'TRUE' when TC.IsYacht = 0 then 'FALSE' else NULL end as IsYacht,TC.TradingCertificateVersion as Version,
					TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,TC.JointAssuredName, TC.OwnerReference,
					TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,TC.PolicyYear, TC.CertificateIssueDate,
					TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity, TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,
					TC.SignatoryState_Id, TC.SignatoryStateAddressId, TC.VesselName,TC.VesselType,TC.VesselTypeName, TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,
					TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower, TC.TradeMark, TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList,
					TC.TenderOutboardReferenceList, TC.Type_Id as TradingCertificateTypeId,RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode,
					RT.TypeCode, RT.Name as TypeName, TC.BranchCode, TC.TradingCertificatePack_Id
					from TradingCertificate TC
					inner join ref_Type RT on RT.Id=TC.Type_Id
					inner join ref_Group RG on RG.Id=RT.Group_Id
					left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id and BS.IsDeleted = 0
					where TC.Id=@TCID
					Order by 1 desc
				"""
				arrData=null
				//DB sheet start
				con.eachRow(getTCId) 
				{ 
					getDetails->
						sql_TradingCertificateId=getDetails.TradingCertificateId
						sql_AddressType_Id=getDetails.AddressType_Id
						sql_SourceSystem=getDetails.SourceSystem
						sql_Reference=getDetails.Reference
						sql_CurrentStatus=getDetails.CurrentStatus
						sql_StorageId=getDetails.StorageId
						sql_RiskId=getDetails.RiskId
						sql_ApplicationRiskId=getDetails.ApplicationRiskId
						sql_PolicyId=getDetails.PolicyId
						sql_MemberPartyId=getDetails.MemberPartyId
						sql_OwnerPartyId=getDetails.OwnerPartyId
						sql_BrokerPartyId=getDetails.BrokerPartyId
						sql_BrokerContactPartyId=getDetails.BrokerContactPartyId
						sql_JointAssuredPartyId=getDetails.JointAssuredPartyId
						sql_IsRenewal=getDetails.IsRenewal
						sql_IsYacht=getDetails.IsYacht
						sql_Version=getDetails.Version
						sql_RiskReference=getDetails.RiskReference
						sql_PolicyReference=getDetails.PolicyReference
						sql_MemberReference=getDetails.MemberReference
						sql_MemberType=getDetails.MemberType
						sql_MemberName=getDetails.MemberName
						sql_JointAssuredName=getDetails.JointAssuredName
						sql_OwnerReference=getDetails.OwnerReference
						sql_OwnerName=getDetails.OwnerName
						sql_OwnerDomicile=getDetails.OwnerDomicile
						sql_OwnerEmailAddress=getDetails.OwnerEmailAddress
						sql_BrokerReference=getDetails.BrokerReference
						sql_BrokerName=getDetails.BrokerName
						sql_BrokerEmailAddress=getDetails.BrokerEmailAddress
						sql_PolicyYear=getDetails.PolicyYear
						sql_CertificateIssueDate=getDetails.CertificateIssueDate
						sql_CertificateIssueDate=sql_CertificateIssueDate.toString().replace(" ","T")
						sql_CertificateIssueDate=getDate(sql_CertificateIssueDate.toString())
						sql_EmailAddress=getDetails.EmailAddress
						sql_CcEmailAddress=getDetails.CcEmailAddress
						sql_EffectiveStartDate=getDetails.EffectiveStartDate
						sql_EffectiveStartDate=sql_EffectiveStartDate.toString().replace(" ","T")
						sql_EffectiveStartDate=getDate(sql_EffectiveStartDate.toString())
						sql_EffectiveEndDate=getDetails.EffectiveEndDate
						sql_EffectiveEndDate=sql_EffectiveEndDate.toString().replace(" ","T")
						sql_EffectiveEndDate=getDate(sql_EffectiveEndDate.toString())
						sql_PassengerCapacity=getDetails.PassengerCapacity
						sql_PolicyStartDate=getDetails.PolicyStartDate
						sql_PolicyStartDate=sql_PolicyStartDate.toString().replace(" ","T")
						sql_PolicyStartDate=getDate(sql_PolicyStartDate.toString())
						sql_PolicyEndDate=getDetails.PolicyEndDate
						sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" ","T")
						sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())
						sql_CurrencyCode=getDetails.CurrencyCode
						sql_CoverLimitAmount=getDetails.CoverLimitAmount
						sql_SignatoryState_Id=getDetails.SignatoryState_Id
						sql_SignatoryStateAddressId=getDetails.SignatoryStateAddressId
						sql_VesselName=getDetails.VesselName
						sql_VesselType=getDetails.VesselType
						sql_VesselTypeName=getDetails.VesselTypeName
						sql_vesselEnteredDate=getDetails.vesselEnteredDate
						sql_vesselEnteredDate=sql_vesselEnteredDate.toString().replace(" ","T")
						sql_vesselEnteredDate=getDate(sql_vesselEnteredDate.toString())
						sql_vesselFlag=getDetails.vesselFlag
						sql_imoNumber=getDetails.imoNumber
						sql_distinctiveNumbersOrLetters=getDetails.distinctiveNumbersOrLetters
						sql_grossTonnage=getDetails.grossTonnage
						sql_yearBuilt=getDetails.yearBuilt
						sql_engineHorsePower=getDetails.engineHorsePower
						sql_TradeMark=getDetails.TradeMark
						sql_model=getDetails.model
						sql_engineNo=getDetails.engineNo
						sql_NominatedStateFlag=getDetails.NominatedStateFlag
						sql_NominatedStateFlagName=getDetails.NominatedStateFlagName
						sql_portOfRegistry=getDetails.portOfRegistry
						sql_tenderReferenceList=getDetails.tenderReferenceList
						sql_TenderOutboardReferenceList=getDetails.TenderOutboardReferenceList
						sql_TradingCertificateTypeId=getDetails.TradingCertificateTypeId
						sql_TradingCertificateGroupId=getDetails.TradingCertificateGroupId
						sql_TradingCertificateGroupName=getDetails.TradingCertificateGroupName
						sql_TradingCertificateGroupCode=getDetails.TradingCertificateGroupCode
						sql_TypeCode=getDetails.TypeCode
						sql_TypeName=getDetails.TypeName
						sql_BranchCode=getDetails.BranchCode
						sql_TradingCertificatePack_Id=getDetails.TradingCertificatePack_Id

						log.info "SQL response received as =>"+sql_TradingCertificateId+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_ApplicationRiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_BrokerContactPartyId+","+sql_JointAssuredPartyId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_SignatoryStateAddressId+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_TradeMark+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TypeCode+","+sql_TypeName+","+sql_BranchCode+","+sql_TradingCertificatePack_Id
						arrCellVal=[sql_TradingCertificateId,sql_AddressType_Id,sql_SourceSystem,sql_Reference,sql_CurrentStatus,sql_StorageId,sql_RiskId,sql_ApplicationRiskId, sql_PolicyId,sql_MemberPartyId,sql_OwnerPartyId,sql_BrokerPartyId,sql_BrokerContactPartyId,sql_JointAssuredPartyId,sql_IsRenewal,sql_IsYacht,sql_Version,sql_RiskReference,sql_PolicyReference,sql_MemberReference,sql_MemberType,sql_MemberName,sql_JointAssuredName,sql_OwnerReference,sql_OwnerName,sql_OwnerDomicile,sql_OwnerEmailAddress,sql_BrokerReference,sql_BrokerName,sql_BrokerEmailAddress,sql_PolicyYear,sql_EmailAddress,sql_CcEmailAddress,sql_EffectiveStartDate,sql_EffectiveEndDate,sql_PassengerCapacity,sql_PolicyStartDate,sql_PolicyEndDate,sql_CurrencyCode,sql_CoverLimitAmount,sql_SignatoryState_Id,sql_SignatoryStateAddressId,sql_VesselName,sql_VesselType,sql_VesselTypeName,sql_vesselEnteredDate,sql_vesselFlag,sql_imoNumber,sql_distinctiveNumbersOrLetters,sql_grossTonnage,sql_yearBuilt,sql_engineHorsePower,sql_TradeMark,sql_model,sql_engineNo,sql_NominatedStateFlag,sql_NominatedStateFlagName,sql_portOfRegistry,sql_tenderReferenceList,sql_TenderOutboardReferenceList,sql_TradingCertificateTypeId,sql_TradingCertificateGroupId,sql_TradingCertificateGroupName,sql_TradingCertificateGroupCode,sql_TypeCode,sql_TypeName,sql_BranchCode,sql_TradingCertificatePack_Id]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
						total_size++
						counter++
						try
						{
							RT.saveExcelFile(summary_File,O_Summary)
						}
						catch(Exception e)
						{
						  log.info e.getMessage();	
						}
					}//sql end
			 }//for loop end
			con.close()

			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for update Trading Certificate with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String  removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field==null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
		field="NULL"
	}
	if(field!=null)
		field=field.toUpperCase()
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}
public String getDate(String field)
{
	if(field!=null && field.length()==21)
		field = field.substring(0, field.length() - 2);
	
	if(field==null)
			field="NULL"
	else if(field=="" || field==" " || field==null)	
			field="NULL"
	return field
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>certId</con:name><con:value>273095</con:value></con:property></con:properties></con:testCase><con:testCase id="86be5f02-603e-426d-9812-772429342dfd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_PATCH_Add_TCPackByTCPackId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd" id="1cbce288-3900-468f-8384-d94cba30f498"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificatePacks/${#TestCase#packId}/add" methodName="PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd" id="ab02dbc8-05bc-4230-87fc-4f557e9b357a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>
	[
		134165
	]
	</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/76/add</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Add_TCPackByTCPackId" id="99542e6a-c165-471a-95ee-fa4eccf48ac5"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_PATCH_Add_TCPackByTCPackId"))
		tcModuleName="AddTCPack"
	
	if(tcModuleName.toString().equals("AddTCPack"))
	{
		log.info "Test Execution started for adding trading certificate to trading certficate packs with API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeaderdb = ["TradingCertificateId","TradingCertificatePackId","ExpectedStatusCode","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeaderdb)

			String getNullTcId=
			"""
			select
			top 10
			Tc.id as TraingCertifiacteId, TCPK.Id from TradingCertificate TC
			left join TradingCertificatePack TCPK on TCPK.Id=TC.TradingCertificatePack_id
			where TC.TradingCertificatePack_id is null
			order by 1 desc
			"""
			con.eachRow(getNullTcId)
			{
				getNullTcIdRow->
				sqlTcId=getNullTcIdRow.TraingCertifiacteId
				rows=con.rows(getNullTcId) 

				String getLinkedPackId=
				"""
				select 
				top 1
				count(Id) as Count, TradingCertificatePack_Id
				from TradingCertificate
				where TradingCertificatePack_Id is not null
				group by TradingCertificatePack_Id
				having count(Id)> 1
				order by 2
				"""	
				
				def arrData;
				//DB sheet start
				con.eachRow(getLinkedPackId)
				{
					getLinkedPackIdRow->
					sqlTcPackId=getLinkedPackIdRow.TradingCertificatePack_Id
					String expectedStatus="200"
					arrCellVal=[sqlTcId,sqlTcPackId,expectedStatus];
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
						
					db_size++
					counter++
					try
					{
							RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e) 
					{
						log.info e.toString();
					}
				}//inner sql end
			}//inner sql end
			
			totalColumns = source.getRow(1).getLastCellNum()
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start

			arrCellVal=['API DATA']
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			arrOutputHeaderapi = ["TradingCertificateId","TradingCertificatePackId","ActualStatusCode","Status"];
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeaderapi)
				
			con.eachRow(getNullTcId)
			{
				getTcIdRow->
				TcId=getTcIdRow.TraingCertifiacteId				

				String getLinkedPackId=
				"""
				select 
				top 1
				count(Id) as Count, TradingCertificatePack_Id
				from TradingCertificate
				where TradingCertificatePack_Id is not null
				group by TradingCertificatePack_Id
				having count(Id)> 1
				order by 2
				"""	
				con.eachRow(getLinkedPackId)
				{
					getPackIdRow->
					TcPackId=getPackIdRow.TradingCertificatePack_Id

					addRequestBody=
					"""
					[
						$TcId
					]
					"""
					log.info "Request body for adding TC Id to TC pack Id is : "+addRequestBody
					testRunner.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd"].setPropertyValue( "Request", addRequestBody)
					
					testRunner.testCase.setPropertyValue("packId", TcPackId.toString())
					
					testRunner.testCase.testSuite.setPropertyValue("token", token)
					
					testRunner.runTestStepByName('PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd')
					
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					log.info "httpStatusCode ="+httpStatusCode
				
					log.info "Now Trading Certificate Pack Id =>"+TcPackId+" is getting linked to =>"+TcId
					
					if(httpStatusCode.toString().equals("200"))
					{
						log.info "Trading Certificate ("+TcId+") is successfully linked to Trading Certificate Pack ("+TcPackId+")."
						arrCellVal=[TcId, TcPackId, httpStatusCode.toString()];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						total_size++
						counter++
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
						total_size++
						counter++
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
						total_size++
						counter++
					}
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
				}
			}
			con.close()	

			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data after linking TC Pack Ids with TC Ids with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
</script></con:config></con:testStep><con:properties><con:property><con:name>packId</con:name><con:value>76</con:value></con:property></con:properties></con:testCase><con:testCase id="87f9d022-8582-49ee-a92d-b2d9d2ebcab0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_PATCH_Remove_TCPackByTCPackId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove" id="f6c278f8-de19-4e91-bc10-e1e69b856772"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificatePacks/${#TestCase#packId}/remove" methodName="PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove" id="06da4e40-25de-41c4-b377-2ba68cc9200b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>
				[
				 134165
				]
				</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/76/remove</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Remove_TCPackByTCPackId" id="81d8275e-cffa-4f61-b13e-0d493f1a30d3"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_PATCH_Remove_TCPackByTCPackId"))
		tcModuleName="RemoveTCPack"
	
	if(tcModuleName.toString().equals("RemoveTCPack"))
	{
		log.info "Test Execution started for Removing trading certificate Pack Id from trading certficate with API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeaderdb = ["TradingCertificateId","TradingCertificatePackId","ExpectedStatusCode","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeaderdb)

			String getTcId=
			"""
			select
			TOP 10
			Id as TraingCertifiacteId, TradingCertificatePack_Id as TradingCertificatePackId
			from TradingCertificate TC
			where TC.TradingCertificatePack_id is not null
			order by 2 desc
			"""
			con.eachRow(getTcId)
			{
				getTcIdRow->
				sqlTcId=getTcIdRow.TraingCertifiacteId
				sqlTcPkId=getTcIdRow.TradingCertificatePackId
				
				def arrData;
				String expectedStatus="200"
				
				arrCellVal=[sqlTcId, sqlTcPkId, expectedStatus];
				RT.writeDetails(source, counter, 0, rowStyle, arrCellVal)
						
				db_size++
				counter++
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}
			}//inner sql end
			
			totalColumns = source.getRow(1).getLastCellNum()
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start

			arrCellVal=['API DATA']
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			arrOutputHeaderapi = ["TradingCertificateId","TradingCertificatePackId","ActualStatusCode","Status"];
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeaderapi)
				
			con.eachRow(getTcId)
			{
				getTcIdRow->
				sqlTcId=getTcIdRow.TraingCertifiacteId
				sqlTcPkId=getTcIdRow.TradingCertificatePackId

				removeRequestBody=
				"""
				[
					$sqlTcId
				]
				"""
				log.info "Request body for removing TC Id from TC pack Id is : "+removeRequestBody
				log.info "Now Trading Certificate Pack Id =>"+sqlTcPkId+" is getting removed from Trading Certificate Id=>"+sqlTcId
				testRunner.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove"].setPropertyValue( "Request", removeRequestBody)
				
				testRunner.testCase.setPropertyValue("packId", sqlTcPkId.toString())
				testRunner.testCase.testSuite.setPropertyValue("token", token)
				testRunner.runTestStepByName('PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove')
					
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				log.info "httpStatusCode ="+httpStatusCode

				String getDetails=
				"""
				declare
				@tc as int = """+sqlTcId+"""
				Select Id, TradingCertificatePack_Id from TradingCertificate
				where Id=@tc
				"""
				def TradCertId=null
				def TradCertPackId=null
				con.eachRow(getDetails)
				{
					tcRow->
						TradCertId=tcRow.Id
						TradCertPackId=tcRow.TradingCertificatePack_Id
				}
				log.info "==========>"+TradCertId+","+TradCertPackId

				if(httpStatusCode.toString().equals("200") &amp;&amp; TradCertPackId.toString().equals("null") &amp;&amp; TradCertId.toString().equals(sqlTcId.toString()))
				{					
					log.info "Trading Certificate Pack Id ("+sqlTcPkId+") is successfully removed from Trading Certificate Id ("+sqlTcId+")."
					arrCellVal=[sqlTcId, sqlTcPkId, httpStatusCode.toString()];
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					total_size++
					counter++
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					total_size++
					counter++
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					total_size++
					counter++
				}
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}
			}//outer sql close
			con.close()	

			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data after removing link between TC Pack Ids and TC Ids with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d5af0638-39c6-477c-b69a-95a6669330e8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_TradingCertificateByTradingCertificateIDByGenerateDraftDocument" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="TradCertByTradCertIDByGenDraftDoc" id="ba6c4b71-aa61-49dd-85c1-2b840515215f"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#tradingCertificateId}/generateDraftDocument" methodName="TCByTCIDByGenerateDraftDocument" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TradCertByTradCertIDByGenDraftDoc" id="ab2d1e5d-6901-47ae-83c7-505727c6c9ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/1/generateDraftDocument</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="TradingCertificateByTradingCertificateIDByGenerateDraftDocument" id="d892895a-c9d0-4641-ab01-d73f0377b055"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

def api_stateAddressId = api_stateAddressName= api_stateAddressLine1= api_stateAddressLine2= api_stateAddressLine3= api_stateAddressStateOrCounty= api_stateAddressCity= api_stateAddressCountry= api_stateAddressPostCode ="NULL"
def api_stateAddressPrimaryAddress= api_ownerAddressId= api_ownerAddressName= api_ownerAddressLine1= api_ownerAddressLine2= api_ownerAddressLine3= api_ownerAddressStateOrCounty= api_ownerAddressCity= api_ownerAddressCountry= api_ownerAddressPostCode= api_ownerAddressPrimaryAddress= "NULL"
def api_brokerAddressId= api_brokerAddressName= api_brokerAddressLine1= api_brokerAddressLine2= api_brokerAddressLine3= api_brokerAddressStateOrCounty= api_brokerAddressCity= api_brokerAddressCountry= api_brokerAddressPostCode= api_brokerAddressPrimaryAddress= "NULL"
def api_memberAddressId= api_memberAddressName= api_memberAddressLine1= api_memberAddressLine2= api_memberAddressLine3= api_memberAddressStateOrCounty= api_memberAddressCity= api_memberAddressCountry= api_memberAddressPostCode= api_memberAddressPrimaryAddress= "NULL"
def api_jointAssuredAddressId= api_jointAssuredAddressName= api_jointAssuredAddressLine1= api_jointAssuredAddressLine2= api_jointAssuredAddressLine3= api_jointAssuredAddressStateOrCounty= api_jointAssuredAddressCity= api_jointAssuredAddressCountry= api_jointAssuredAddressPostCode= api_jointAssuredAddressPrimaryAddress= "NULL"
def api_branchAddressId= api_branchAddressName= api_branchAddressLine1= api_branchAddressLine2= api_branchAddressLine3= api_branchAddressStateOrCounty= api_branchAddressCity= api_branchAddressCountry= api_branchAddressPostCode= api_branchAddressPrimaryAddress= "NULL"


for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_POST_TradingCertificateByTradingCertificateIDByGenerateDraftDocument"))
		tcModuleName="TCIDGenerateDraftDocument"
	
	if(tcModuleName.toString().equals("TCIDGenerateDraftDocument"))
	{
		log.info "Test Execution started for getting Trading Certificate by Trading Certificated ID by Generate Draft Document"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader=["TradingCertificateId","AddressType_Id","SourceSystem","Reference","CurrentStatus","StorageId","RiskId","PolicyId","MemberPartyId","OwnerPartyId","BrokerPartyId","IsRenewal","IsYacht","Version","RiskReference","PolicyReference","MemberReference","MemberType","MemberName","JointAssuredName","OwnerReference","OwnerName","OwnerDomicile","OwnerEmailAddress","BrokerReference","BrokerName","BrokerEmailAddress","PolicyYear","CertificateIssueDate","EmailAddress","CcEmailAddress","EffectiveStartDate","EffectiveEndDate","PassengerCapacity","PolicyStartDate","PolicyEndDate","CurrencyCode","CoverLimitAmount","SignatoryState_Id","VesselName","VesselType","VesselTypeName","vesselEnteredDate","vesselFlag","imoNumber","distinctiveNumbersOrLetters","grossTonnage","yearBuilt","engineHorsePower","TradeMark","model","engineNo","NominatedStateFlag","NominatedStateFlagName","portOfRegistry","TenderReferenceList","TenderOutboardReferenceList","TradingCertificateTypeId","TradingCertificateGroupId","TradingCertificateGroupName","TradingCertificateGroupCode","TradingCertificateTypeCode","TradingCertificateTypeName","BranchCode","TradingCertificatePack_Id","Status"]

			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			String getTC=
			"""
			select
			TOP 50
			TC.Id as TradingCertificateId, TC.AddressType_Id,TC.SourceSystem,TC.Reference, TC.CurrentStatus, 
			TC.StorageId, TC.RiskId, TC.ApplicationRiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId, 
			case when TC.IsOwner =0 then 'FALSE' when TC.IsOwner =0 then 'TRUE' else NULL end as IsOwner, TC.BrokerContactPartyId,  TC.JointAssuredPartyId, 
			case when TC.IsRenewal = 1 then 'TRUE'    when TC.IsRenewal = 0 then 'FALSE' else NULL end as IsRenewal,
			case when TC.IsYacht = 1 then 'TRUE' when TC.IsYacht = 0 then 'FALSE' else NULL end as IsYacht,TC.TradingCertificateVersion as Version,
			TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,TC.JointAssuredName, TC.OwnerReference,
			TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,TC.PolicyYear, TC.CertificateIssueDate,
			TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity, TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,
			TC.SignatoryState_Id, TC.SignatoryStateAddressId, TC.VesselName,TC.VesselType,TC.VesselTypeName, TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,
			TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower, TC.TradeMark, TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList,
			TC.TenderOutboardReferenceList, TC.Type_Id as TradingCertificateTypeId,RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode,
			RT.TypeCode, RT.Name as TypeName, TC.BranchCode, TC.TradingCertificatePack_Id
			from TradingCertificate TC
			inner join ref_Type RT on RT.Id=TC.Type_Id
			inner join ref_Group RG on RG.Id=RT.Group_Id
			left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id and BS.IsDeleted = 0
			Order by 1 desc
			"""
			//String oldRiskRef=null

			rows=con.rows(getTC) 
			arrCellVal=['DB data']
					
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
					
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
					
			def arrData;
			//DB sheet start
			con.eachRow(getTC)
			{ 
					row->
		              	sql_TradingCertificateId=row.TradingCertificateId
					sql_AddressType_Id=row.AddressType_Id
					sql_SourceSystem=row.SourceSystem
					sql_Reference=row.Reference
					sql_CurrentStatus=row.CurrentStatus
					sql_StorageId=row.StorageId
					sql_RiskId=row.RiskId
					sql_ApplicationRiskId=row.ApplicationRiskId
					sql_PolicyId=row.PolicyId
					sql_MemberPartyId=row.MemberPartyId
					sql_OwnerPartyId=row.OwnerPartyId
					sql_BrokerPartyId=row.BrokerPartyId
					sql_IsOwner=row.IsOwner
					sql_BrokerContactPartyId=row.BrokerContactPartyId
					sql_JointAssuredPartyId=row.JointAssuredPartyId
					sql_IsRenewal=row.IsRenewal
					sql_IsYacht=row.IsYacht
					sql_Version=row.Version
					sql_RiskReference=row.RiskReference
					sql_PolicyReference=row.PolicyReference
					sql_MemberReference=row.MemberReference
					sql_MemberType=row.MemberType
					sql_MemberName=row.MemberName
					sql_MemberName = removeComma(sql_MemberName.toString())
					sql_JointAssuredName=row.JointAssuredName
					sql_JointAssuredName= removeComma(sql_JointAssuredName.toString())
					sql_OwnerReference=row.OwnerReference
					sql_OwnerName=row.OwnerName
					sql_OwnerName = removeComma(sql_OwnerName.toString())
					sql_OwnerDomicile=row.OwnerDomicile
					sql_OwnerEmailAddress=row.OwnerEmailAddress
					sql_BrokerReference=row.BrokerReference
					sql_BrokerName=row.BrokerName
					sql_BrokerName = removeComma(sql_BrokerName.toString())
					sql_BrokerEmailAddress=row.BrokerEmailAddress
					sql_PolicyYear=row.PolicyYear
					sql_CertificateIssueDate=row.CertificateIssueDate
					if(sql_CertificateIssueDate!=null)
					{
						sql_CertificateIssueDate=sql_CertificateIssueDate.toString().replace(" ", "T")
						sql_CertificateIssueDate=getDate(sql_CertificateIssueDate.toString())
					}
					else 
						sql_CertificateIssueDate="NULL"
					sql_EmailAddress=row.EmailAddress
					sql_CcEmailAddress=row.CcEmailAddress
					sql_EffectiveStartDate=row.EffectiveStartDate
					if(sql_EffectiveStartDate!=null)
					{
						sql_EffectiveStartDate=sql_EffectiveStartDate.toString().replace(" ", "T")
						sql_EffectiveStartDate=getDate(sql_EffectiveStartDate.toString())
					}
					else 
						sql_EffectiveStartDate="NULL"
					sql_EffectiveEndDate=row.EffectiveEndDate
					if(sql_EffectiveEndDate!=null)
					{
						sql_EffectiveEndDate=sql_EffectiveEndDate.toString().replace(" ", "T")
						sql_EffectiveEndDate=getDate(sql_EffectiveEndDate.toString())
					}
					else 
						sql_EffectiveEndDate="NULL"
					sql_PassengerCapacity=row.PassengerCapacity
					sql_PolicyStartDate=row.PolicyStartDate
					if(sql_PolicyStartDate!=null)
					{
						sql_PolicyStartDate=sql_PolicyStartDate.toString().replace(" ", "T")
						sql_PolicyStartDate=getDate(sql_PolicyStartDate.toString())
					}
					else 
						sql_PolicyStartDate="NULL"
					sql_PolicyEndDate=row.PolicyEndDate
					if(sql_PolicyEndDate!=null)
					{
						sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" ", "T")
						sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())
					}
					else 
						sql_PolicyEndDate="NULL"
					sql_CurrencyCode=row.CurrencyCode
					sql_CurrencyCode= removeComma(sql_CurrencyCode.toString())						
					sql_CoverLimitAmount=row.CoverLimitAmount
					sql_CoverLimitAmount = removeDotFromCurrency(sql_CoverLimitAmount.toString())
					sql_CoverLimitAmount = removeComma(sql_CoverLimitAmount.toString())
					sql_SignatoryState_Id=row.SignatoryState_Id
					sql_SignatoryStateAddressId=row.SignatoryStateAddressId
					sql_VesselName=row.VesselName
					sql_VesselName = removeComma(sql_VesselName.toString())
					sql_VesselType=row.VesselType
					sql_VesselTypeName=row.VesselTypeName
					sql_vesselEnteredDate=row.vesselEnteredDate
					if(sql_vesselEnteredDate!=null)
					{
						sql_vesselEnteredDate=sql_vesselEnteredDate.toString().replace(" ", "T")
						sql_vesselEnteredDate=getDate(sql_vesselEnteredDate.toString())
					}
					else 
						sql_vesselEnteredDate="NULL"
					sql_vesselFlag=row.vesselFlag
					sql_imoNumber=row.imoNumber
					sql_distinctiveNumbersOrLetters=row.distinctiveNumbersOrLetters
					sql_distinctiveNumbersOrLetters=removeComma(sql_distinctiveNumbersOrLetters.toString())
					sql_grossTonnage=row.grossTonnage
					sql_yearBuilt=row.yearBuilt
					sql_engineHorsePower=row.engineHorsePower
					sql_TradeMark=row.TradeMark
					sql_model=row.model
					sql_engineNo=row.engineNo
					sql_NominatedStateFlag=row.NominatedStateFlag
					sql_NominatedStateFlag= removeComma(sql_NominatedStateFlag.toString())
					sql_NominatedStateFlagName=row.NominatedStateFlagName
					sql_NominatedStateFlagName = removeComma(sql_NominatedStateFlagName.toString())
					sql_portOfRegistry=row.portOfRegistry
					sql_portOfRegistry = removeComma(sql_portOfRegistry.toString())
					sql_TenderReferenceList=row.tenderReferenceList
					sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
					sql_TradingCertificateTypeId=row.TradingCertificateTypeId
					sql_TradingCertificateGroupId=row.TradingCertificateGroupId
					sql_TradingCertificateGroupName=row.TradingCertificateGroupName
					sql_TradingCertificateGroupCode=row.TradingCertificateGroupCode
					sql_TradingCertificateTypeCode=row.TypeCode
					sql_TradingCertificateTypeName=row.TypeName
					sql_BranchCode=row.BranchCode
					sql_TradingCertificatePack_Id=row.TradingCertificatePack_Id
					sql_TradingCertificatePack_Id= removeComma(sql_TradingCertificatePack_Id.toString())
						
					log.info "SQL Response is received as =>"+sql_TradingCertificateId+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName //+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressLine3+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressLine3+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressLine3+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressLine3+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressLine3+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressLine3+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress+","+sql_BranchCode+","+sql_TradingCertificatePack_Id
					arrCellVal=[sql_TradingCertificateId,sql_AddressType_Id,sql_SourceSystem,sql_Reference,sql_CurrentStatus,sql_StorageId,sql_RiskId,sql_PolicyId,sql_MemberPartyId,sql_OwnerPartyId,sql_BrokerPartyId,sql_IsRenewal,sql_IsYacht,sql_Version,sql_RiskReference,sql_PolicyReference,sql_MemberReference,sql_MemberType,sql_MemberName,sql_JointAssuredName,sql_OwnerReference,sql_OwnerName,sql_OwnerDomicile,sql_OwnerEmailAddress,sql_BrokerReference,sql_BrokerName,sql_BrokerEmailAddress,sql_PolicyYear,sql_CertificateIssueDate,sql_EmailAddress,sql_CcEmailAddress,sql_EffectiveStartDate,sql_EffectiveEndDate,sql_PassengerCapacity,sql_PolicyStartDate,sql_PolicyEndDate,sql_CurrencyCode,sql_CoverLimitAmount,sql_SignatoryState_Id,sql_VesselName,sql_VesselType,sql_VesselTypeName,sql_vesselEnteredDate,sql_vesselFlag,sql_imoNumber,sql_distinctiveNumbersOrLetters,sql_grossTonnage,sql_yearBuilt,sql_engineHorsePower,sql_TradeMark,sql_model,sql_engineNo,sql_NominatedStateFlag,sql_NominatedStateFlagName,sql_portOfRegistry,sql_TenderReferenceList,sql_TenderOutboardReferenceList,sql_TradingCertificateTypeId,sql_TradingCertificateGroupId,sql_TradingCertificateGroupName,sql_TradingCertificateGroupCode,sql_TradingCertificateTypeCode,sql_TradingCertificateTypeName,sql_BranchCode,sql_TradingCertificatePack_Id] //,sql_StateAddressId,sql_StateAddressName,sql_StateAddressLine1,sql_StateAddressLine2,sql_StateAddressLine3,sql_StateStateOrCounty,sql_StateCity,sql_StateCountry,sql_StatePostCode,sql_StateIsPrimaryAddress,sql_OwnerAddressId,sql_OwnerAddressName,sql_OwnerAddressLine1,sql_OwnerAddressLine2,sql_OwnerAddressLine3,sql_OwnerStateOrCounty,sql_OwnerCity,sql_OwnerCountry,sql_OwnerPostCode,sql_OwnerIsPrimaryAddress,sql_BrokerAddressId,sql_BrokerAddressName,sql_BrokerAddressLine1,sql_BrokerAddressLine2,sql_BrokerAddressLine3,sql_BrokerStateOrCounty,sql_BrokerCity,sql_BrokerCountry,sql_BrokerPostCode,sql_BrokerIsPrimaryAddress,sql_MemberAddressId,sql_MemberAddressName,sql_MemberAddressLine1,sql_MemberAddressLine2,sql_MemberAddressLine3,sql_MemberStateOrCounty,sql_MemberCity,sql_MemberCountry,sql_MemberPostCode,sql_MemberIsPrimaryAddress,sql_JointAssuredAddressId,sql_JointAssuredAddressName,sql_JointAssuredAddressLine1,sql_JointAssuredAddressLine2,sql_JointAssuredAddressLine3,sql_JointAssuredStateOrCounty,sql_JointAssuredCity,sql_JointAssuredCountry,sql_JointAssuredPostCode,sql_JointAssuredIsPrimaryAddress,sql_BranchAddressId,sql_BranchAddressName,sql_BranchAddressLine1,sql_BranchAddressLine2,sql_BranchAddressLine3,sql_BranchStateOrCounty,sql_BranchCity,sql_BranchCountry,sql_BranchPostCode,sql_BranchIsPrimaryAddress];
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e) 
					{
						log.info e.toString();
					}
			}
			
			totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start

			con.eachRow(getTC)
			{
				getRow->
				TradingCertificateId=getRow.TradingCertificateId
								
				log.info "Getting api values for Trading Certificate Id =>"+TradingCertificateId
				testRunner.testCase.setPropertyValue('tradingCertificateId',TradingCertificateId.toString())
				testRunner.testCase.setPropertyValue('token',token)
					
				//API
				testRunner.runTestStepByName('TradCertByTradCertIDByGenDraftDoc')
				String req='${TradCertByTradCertIDByGenDraftDoc#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
				
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["TradCertByTradCertIDByGenDraftDoc"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				
				arrCellVal=['API DATA']
				RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
				RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
				log.info "Original API response is =>"+response
				log.info "HTTP Status code received as =>"+httpStatusCode
				
					if(httpStatusCode.toString().equals("200"))
					{
						def json=jsonSlurper.parseText(response)	

						log.info "API value for TCID->"+json.id.toString()
						log.info "DB  value for TCID->"+sql_TradingCertificateId.toString()
	
						api_tradingCertificateId =  json.id
						api_addressTypeId =  json.addressTypeId
						api_sourceSystem =  json.sourceSystem
						api_sourceSystem= removeComma(api_sourceSystem.toString())
						api_reference =  json.reference
						api_reference= removeComma(api_reference.toString())
						api_currentStatus =  json.currentStatus
						api_currentStatus= removeComma(api_currentStatus.toString())
						api_storageId =  json.storageId
						api_riskId =  json.riskId
						api_policyId =  json.policyId
						api_memberPartyId =  json.memberPartyId
						api_ownerPartyId =  json.ownerPartyId
						api_brokerPartyId =  json.brokerPartyId
						api_isRenewal =  json.isRenewal
						api_isRenewal= removeComma(api_isRenewal.toString())
						api_isYacht =  json.isYacht
						api_isYacht= removeComma(api_isYacht.toString())
						api_version =  json.version
						api_riskReference =  json.riskReference
						api_policyReference =  json.policyReference
						api_memberReference =  json.memberReference
						api_memberType =  json.memberType
						api_memberName =  json.memberName
						api_memberName=  removeComma(api_memberName.toString())
						api_jointAssuredName =  json.jointAssuredName
						api_jointAssuredName=  removeComma(api_jointAssuredName.toString())
						api_ownerReference =  json.ownerReference
						api_ownerName =  json.ownerName
						api_ownerName=  removeComma(api_ownerName.toString())
						api_ownerDomicile =  json.ownerDomicile
						api_ownerEmailAddress =  json.ownerEmailAddress
						api_brokerReference =  json.brokerReference
						api_brokerName =  json.brokerName
						api_brokerName=  removeComma(api_brokerName.toString())
						api_brokerEmailAddress =  json.brokerEmailAddress
						api_policyYear =  json.policyYear
						api_certificateIssueDate =  json.certificateIssueDate
						if(api_certificateIssueDate!=null)
						{
							api_certificateIssueDate=getDate(api_certificateIssueDate.toString())
							api_certificateIssueDate=removeComma(api_certificateIssueDate.toString())
						}
						else 
							api_certificateIssueDate="NULL"
						api_emailAddress =  json.emailAddress
						api_ccEmailAddress =  json.ccEmailAddress
						api_effectiveStartDate =  json.effectiveStartDate
						if(api_effectiveStartDate!=null)
						{
							api_effectiveStartDate=getDate(api_effectiveStartDate.toString())
							api_effectiveStartDate=removeComma(api_effectiveStartDate.toString())
						}
						else 
							api_effectiveStartDate="NULL"
						api_effectiveEndDate=  json.effectiveEndDate
						if(api_effectiveEndDate!=null)
						{
							api_effectiveEndDate=getDate(api_effectiveEndDate.toString())
							api_effectiveEndDate=removeComma(api_effectiveEndDate.toString())
						}
						else 
							api_effectiveEndDate="NULL"
						api_passengerCapacity =  json.passengerCapacity
						api_policyStartDate =  json.policyStartDate
						if(api_policyStartDate!=null)
						{
							api_policyStartDate=getDate(api_policyStartDate.toString())
							api_policyStartDate=removeComma(api_policyStartDate.toString())
						}
						else 
							api_policyStartDate="NULL"
						api_policyEndDate =  json.policyEndDate
						if(api_policyEndDate!=null)
						{
							api_policyEndDate=getDate(api_policyEndDate.toString())
							api_policyEndDate=removeComma(api_policyEndDate.toString())
						}
						else 
							api_policyEndDate="NULL"
						api_currencyCode =  json.currencyCode
						api_currencyCode= removeComma(api_currencyCode.toString())
						api_coverLimitAmount =  json.coverLimitAmount
						api_coverLimitAmount =  removeDotFromCurrency(api_coverLimitAmount.toString())
						api_coverLimitAmount= removeComma(api_coverLimitAmount.toString())
						api_signatoryStateId =  json.signatoryStateId
						api_vesselName =  json.vesselName
						api_vesselName=  removeComma(api_vesselName.toString())
						api_vesselType =  json.vesselType
						api_vesselType= removeComma(api_vesselType.toString())
						api_vesselTypeName =  json.vesselTypeName
						api_vesselTypeName= removeComma(api_vesselTypeName.toString())
						api_vesselEnteredDate =  json.vesselEnteredDate
						if(api_vesselEnteredDate!=null)
						{
							api_vesselEnteredDate=getDate(api_vesselEnteredDate.toString())
							api_vesselEnteredDate=removeComma(api_vesselEnteredDate.toString())
						}
						else 
							api_vesselEnteredDate="NULL"
						api_vesselFlag =  json.vesselFlag
						api_vesselFlag= removeComma(api_vesselFlag.toString())
						api_imoNumber =  json.imoNumber
						api_distinctiveNumbersOrLetters =  json.distinctiveNumbersOrLetters
						api_distinctiveNumbersOrLetters= removeComma(api_distinctiveNumbersOrLetters.toString())
						api_grossTonnage =  json.grossTonnage
						api_yearBuilt =  json.yearBuilt
						api_engineHorsePower =  json.engineHorsePower
						api_trademarkAndEngineModel =  json.trademarkAndEngineModel
						api_model =  json.model
						api_engineNo =  json.engineNo
						api_nominatedFlagState =  json.nominatedFlagState
						api_nominatedFlagState= removeComma(api_nominatedFlagState.toString())
						api_nominatedFlagStateName =  json.nominatedFlagStateName
						api_nominatedFlagStateName =  removeComma(api_nominatedFlagStateName.toString())
						api_portOfRegistry =  json.portOfRegistry
						api_portOfRegistry =  removeComma(api_portOfRegistry.toString())
						api_tenderReferenceList =  json.tenderReferenceList
						api_tenderOutboardReferenceList =  json.tenderOutboardReferenceList
						api_tradingCertificateTypeId =  json.tradingCertificateType.id
						api_tradingCertificateGroupId =  json.tradingCertificateType.tradingCertificateGroup.id
						api_tradingCertificateGroupName =  json.tradingCertificateType.tradingCertificateGroup.name
						api_tradingCertificateGroupCode =  json.tradingCertificateType.tradingCertificateGroup.groupCode
						api_tradingCertificateTypeTypeCode =  json.tradingCertificateType.typeCode
						api_tradingCertificateTypeTypeName =  json.tradingCertificateType.typeName
						api_branchCode= json.branchCode
						api_tradingCertificatePackId= json.tradingCertificatePackId
						api_tradingCertificatePackId =  removeComma(api_tradingCertificatePackId.toString())
//						api_stateAddress=json.stateAddress
//						api_stateAddress=removeComma(api_stateAddress.toString())
//						api_ownerAddress=json.ownerAddress
//						api_ownerAddress=removeComma(api_ownerAddress.toString())
//						api_brokerAddress=json.brokerAddress
//						api_brokerAddress=removeComma(api_brokerAddress.toString())
//						api_memberAddress=json.memberAddress
//						api_memberAddress=removeComma(api_memberAddress.toString())
//						api_jointAssuredAddress=json.jointAssuredAddress
//						api_jointAssuredAddress=removeComma(api_jointAssuredAddress.toString())
//						api_branchAddress=json.branchAddress
//						api_branchAddress=removeComma(api_branchAddress.toString())

						log.info "API Response is received as =>"+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName //+","+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress+","+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress+","+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress+","+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress+","+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress+","+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress+","+api_branchCode+","+api_tradingCertificatePackId
						arrCellVal=[api_tradingCertificateId ,api_addressTypeId ,api_sourceSystem ,api_reference ,api_currentStatus ,api_storageId ,api_riskId ,api_policyId ,api_memberPartyId ,api_ownerPartyId ,api_brokerPartyId ,api_isRenewal ,api_isYacht ,api_version ,api_riskReference ,api_policyReference ,api_memberReference ,api_memberType ,api_memberName ,api_jointAssuredName ,api_ownerReference ,api_ownerName ,api_ownerDomicile ,api_ownerEmailAddress ,api_brokerReference ,api_brokerName ,api_brokerEmailAddress ,api_policyYear ,api_certificateIssueDate ,api_emailAddress ,api_ccEmailAddress ,api_effectiveStartDate ,api_effectiveEndDate ,api_passengerCapacity ,api_policyStartDate ,api_policyEndDate ,api_currencyCode ,api_coverLimitAmount ,api_signatoryStateId ,api_vesselName ,api_vesselType ,api_vesselTypeName ,api_vesselEnteredDate ,api_vesselFlag ,api_imoNumber ,api_distinctiveNumbersOrLetters ,api_grossTonnage ,api_yearBuilt ,api_engineHorsePower ,api_trademarkAndEngineModel ,api_model ,api_engineNo ,api_nominatedFlagState ,api_nominatedFlagStateName ,api_portOfRegistry ,api_tenderReferenceList ,api_tenderOutboardReferenceList ,api_tradingCertificateTypeId ,api_tradingCertificateGroupId ,api_tradingCertificateGroupName ,api_tradingCertificateGroupCode ,api_tradingCertificateTypeTypeCode ,api_tradingCertificateTypeTypeName ,api_branchCode,api_tradingCertificatePackId] // ,api_stateAddressId,api_stateAddressName,api_stateAddressLine1,api_stateAddressLine2,api_stateAddressLine3,api_stateAddressStateOrCounty,api_stateAddressCity,api_stateAddressCountry,api_stateAddressPostCode,api_stateAddressPrimaryAddress,api_ownerAddressId,api_ownerAddressName,api_ownerAddressLine1,api_ownerAddressLine2,api_ownerAddressLine3,api_ownerAddressStateOrCounty,api_ownerAddressCity,api_ownerAddressCountry,api_ownerAddressPostCode,api_ownerAddressPrimaryAddress,api_brokerAddressId,api_brokerAddressName,api_brokerAddressLine1,api_brokerAddressLine2,api_brokerAddressLine3,api_brokerAddressStateOrCounty,api_brokerAddressCity,api_brokerAddressCountry,api_brokerAddressPostCode,api_brokerAddressPrimaryAddress,api_memberAddressId,api_memberAddressName,api_memberAddressLine1,api_memberAddressLine2,api_memberAddressLine3,api_memberAddressStateOrCounty,api_memberAddressCity,api_memberAddressCountry,api_memberAddressPostCode,api_memberAddressPrimaryAddress,api_jointAssuredAddressId,api_jointAssuredAddressName,api_jointAssuredAddressLine1,api_jointAssuredAddressLine2,api_jointAssuredAddressLine3,api_jointAssuredAddressStateOrCounty,api_jointAssuredAddressCity,api_jointAssuredAddressCountry,api_jointAssuredAddressPostCode,api_jointAssuredAddressPrimaryAddress,api_branchAddressId,api_branchAddressName,api_branchAddressLine1,api_branchAddressLine2,api_branchAddressLine3,api_branchAddressStateOrCounty,api_branchAddressCity,api_branchAddressCountry,api_branchAddressPostCode,api_branchAddressPrimaryAddress];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
									
						total_size++
						counter++
						try
						{
							RT.saveExcelFile(summary_File,O_Summary)
						}
						catch(Exception e)
						{
						  log.info e.getMessage();	
						}
					}//end of IF status 200 check
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					}
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
			}
			con.close()	

				//DB compare with API
				int db_startCol=0
				counter=row_start;
				totalColumns = source.getRow(1).getLastCellNum();
				int api_endCol=totalColumns-1
				dsc='Compares API data for Generated Draft Document details for Trading Certificate with UTOM Database data'
				tcid=tcModuleName.toString()
				RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
				
		}//inner if end
	}//outer if end
}//outer for end
public String  removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field==null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
		field="NULL"
	}
		
	
	if(field!=null)
		field=field.toUpperCase()
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}
public String getDate(String field)
{
	if(field!=null && field.length()==21)
		field = field.substring(0, field.length() - 2);
	
	if(field==null)
			field="NULL"
	else if(field=="" || field==" " || field==null)	
			field="NULL"
	return field
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>tradingCertificateId</con:name><con:value>59080</con:value></con:property></con:properties></con:testCase><con:testCase id="b8b27229-e803-4a68-8bf5-71a7d58ad7a8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_TradingCertificatePackByTradingCertificatePackIdByIssueDocuments" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="TradCertPackByTradCertPackIDByIssueDocs" id="80a86e58-1fe2-4459-b810-6ee9f25cfade"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificatePacks/${#TestCase#packId}/issuedocuments" methodName="POST_TradingCertificatePackByTradingCertificatePackIdByIssueDocuments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TradCertPackByTradCertPackIDByIssueDocs" id="281058d6-def5-403e-b3b4-c6ecc05ea986" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/76/issuedocuments</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get_TradingCertificateByTradingCertificateId" id="a2be9c40-ccdd-4a83-934f-c6939a1425c4"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#tradingCertificateId}" methodName="GET_TradingCertificateByCertificateId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_TradingCertificateByTradingCertificateId" id="325ac480-28f6-4df9-9f1c-06b0aacf1498" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="POST_TradingCertificatePackByTradingCertificatePackIdByIssueDocuments" id="4018831d-4dc3-4f87-8e73-ab7662739a61"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
                line->
                prop.load(line)
}
token=prop['API_TOKEN']


XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
//boolean flag=false


XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
def inputStream = new FileInputStream("C:\\APITesting\\TradingCertificateTesting\\ValidateCertificateRule.xls");

Workbook wb = WorkbookFactory.create(inputStream);
def ws = wb.getSheet("Rules")
def rowCount = ws.getPhysicalNumberOfRows()

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_POST_TradingCertificatePackByTradingCertificatePackIdByIssueDocuments"))
	{
     	tcModuleName="RefByPackIDIssuedDoc"
                
		if(tcModuleName.toString().equals("RefByPackIDIssuedDoc"))
		{
			log.info "Test Execution started for getting Trading Certificate by Trading Certificated ID by Issued Drafr Document"
                                
			testRunner.testCase.testSuite.setPropertyValue('token',token)
			testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
			                                
			if(eFlag.equalsIgnoreCase('Y'))
			{
				rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
				headerStyle = RT.getCellStyle(O_Summary,'Header');
				                                                
				arrOutputHeader = ["UniqueKey","TradingCertificatePackId","TradingCertificateId","ValidationStatus","ErrorCount","PackIssueStatus","CurrentStatus","Status"];                                              
				source=O_Summary.createSheet(tcModuleName.toString());
				int total_size=0
				int api_cnt=0
				int db_cnt=0
				int row_start=2
				int counter=2
				int db_size=0
				int db_endCol=0
				int api_startCol=0

				//SQL connection and query
				def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
				
				String sqlstmt=
				"""
				SELECT 
				TOP 50
				TCPK.Id as TradingCertificatePackId, TC.Id as TradingCertificateId, TC.CurrentStatus, TC.RiskReference, RT.TypeCode, TC.AddressType_Id, TC.SourceSystem, 
				TC.Reference, TC.StorageId,  TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
				TC.IsRenewal, case when TC.IsRenewal = 1 then 'True'    when TC.IsRenewal = 0 then 'False' else NULL end as IsRenewalFlag, TC.IsYacht,
				case when TC.IsYacht = 1 then 'True' when TC.IsYacht = 0 then 'False' else NULL end as IsYachtFlag, 
				TC.TradingCertificateVersion as Version, TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,
				TC.JointAssuredName, TC.OwnerReference, TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,
				TC.policyyear, TC.CertificateIssueDate, TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity,
				TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,
				TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower,
				TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList, TC.TenderOutboardReferenceList,
				TC.Type_Id as TradingCertificateTypeId, RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode, 
				RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName, BS.BankName
				from TradingCertificate TC 
				inner join TradingCertificatePack TCPK  on TCPK.Id = TC.TradingCertificatePack_Id
				left join ref_type RT on RT.Id=TC.Type_id
				inner join ref_Group RG on RG.Id = RT.Group_Id
				left join ref_addressType RAT on RAT.Id=TC.AddressType_Id
				left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id
				--where TCPK.Id= 76
				order by TCPK.Id desc, TC.Id desc
                                                """
                 con.eachRow(sqlstmt) 
				{                              
                                                                
					row ->
					
					sql_TCID=row.TradingCertificateId
					sql_TcPackId=row.TradingCertificatePackId
					
					log.info "Checking for Trading Certificate Id=>"+sql_TCID+" of Pack Id=> "+sql_TcPackId
																	    
					def rows=con.rows(sqlstmt)  
					def arrCellVal;
					arrCellVal=['DB data']
					
					RT.writeDetails(source,0,0,headerStyle,arrCellVal)
					
					headerStyle = RT.getCellStyle(O_Summary,'Header');
					RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
					
					
					def arrData;
					
					def response= null
					def jsonSlurper=null
					def jsonResValidate=null
									
					int positiveCount=0, negativeCount=0
					boolean flag=false;
					String columnName=null
					boolean ruleFlag = false;

												    
					sql_TradingCertificateId=row.TradingCertificateId
					sql_TradingCertificateId=removeComma(sql_TradingCertificateId.toString())
					sql_RiskReference=row.RiskReference
					sql_TypeCode=row.TypeCode
					sql_TradingCertificatePackId=row.TradingCertificatePackId
					sql_addresstypeid=row.AddressType_Id
					sql_SourceSystem=row.SourceSystem
					sql_Reference=row.Reference
					sql_CurrentStatus=row.CurrentStatus
					sql_StorageId=row.StorageId
					sql_RiskId=row.RiskId
					sql_PolicyId=row.PolicyId
					sql_MemberPartyId=row.MemberPartyId
					sql_OwnerPartyId=row.OwnerPartyId
					sql_BrokerPartyId=row.BrokerPartyId
					sql_IsRenewal=row.IsRenewal
					sql_IsRenewalFlag=row.IsRenewalFlag
					sql_IsYacht=row.IsYacht
					sql_IsYachtFlag=row.IsYachtFlag
					sql_Version=row.Version
					sql_RiskReference=row.RiskReference
					sql_PolicyReference=row.PolicyReference
					sql_MemberReference=row.MemberReference
					sql_MemberType=row.MemberType
					sql_membername=row.MemberName
					sql_JointAssuredName=row.JointAssuredName
					sql_OwnerReference=row.OwnerReference
					sql_ownername=row.OwnerName
					sql_OwnerDomicile=row.OwnerDomicile
					sql_OwnerEmailAddress=row.OwnerEmailAddress
					sql_BrokerReference=row.BrokerReference
					sql_BrokerName=row.BrokerName
					sql_BrokerEmailAddress=row.BrokerEmailAddress
					sql_policyyear=row.policyyear
					sql_CertificateIssueDate=row.CertificateIssueDate
					sql_EmailAddress=row.EmailAddress
					sql_CcEmailAddress=row.CcEmailAddress
					sql_EffectiveStartDate=row.EffectiveStartDate
					sql_EffectiveEndDate=row.EffectiveEndDate
					sql_PassengerCapacity=row.PassengerCapacity
					sql_PolicyStartDate=row.PolicyStartDate
					sql_PolicyEndDate=row.PolicyEndDate
					sql_CurrencyCode=row.CurrencyCode
					sql_CoverLimitAmount=row.CoverLimitAmount
					sql_SignatoryState_Id=row.SignatoryState_Id
					sql_vesselname=row.VesselName
					sql_VesselType=row.VesselType
					sql_VesselTypeName=row.VesselTypeName
					sql_vesselEnteredDate=row.vesselEnteredDate
					sql_vesselFlag=row.vesselFlag
					sql_imoNumber=row.imoNumber
					sql_distinctivenumbersorletters=row.distinctiveNumbersOrLetters
					sql_grossTonnage=row.grossTonnage
					sql_yearBuilt=row.yearBuilt
					sql_engineHorsePower=row.engineHorsePower
					sql_model=row.model
					sql_engineNo=row.engineNo
					sql_nominatedstateflag=row.NominatedStateFlag
					sql_nominatedstateflagname=row.NominatedStateFlagName
					sql_portOfRegistry=row.portOfRegistry
					sql_tenderReferenceList=row.tenderReferenceList
					sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
					sql_TradingCertificateTypeId=row.TradingCertificateTypeId
					sql_TradingCertificateGroupId=row.TradingCertificateGroupId
					sql_TradingCertificateGroupName=row.TradingCertificateGroupName
					sql_TradingCertificateGroupCode=row.TradingCertificateGroupCode
					sql_TradingCertificateTypeCode=row.TradingCertificateTypeCode
					sql_TradingCertificateTypeName=row.TradingCertificateTypeName
					sql_bankname = row.BankName
					sql_bankname = removeComma(sql_bankname.toString())
						                                                
					testRunner.testCase.testSuite.setPropertyValue("token", token)
					
					String packId=sql_TcPackId.toString()
					String key
					testRunner.testCase.setPropertyValue("packId", packId)
					                                                                
					//API
					testRunner.runTestStepByName('TradCertPackByTradCertPackIDByIssueDocs')
					String req='${TradCertPackByTradCertPackIDByIssueDocs#Response}'
					response=context.expand(req) 
					jsonSlurper=new JsonSlurper()
					jsonResValidate = jsonSlurper.parseText(response)
					//log.info jsonResValidate
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["TradCertPackByTradCertPackIDByIssueDocs"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					//checkig for error list
					numberOfTcs=jsonResValidate.validationResults.tradingCertificateId.size().toInteger()

					log.info "---------Checking for Validation-------------"

						String tredCertId=sql_TradingCertificateId.toString()
						testRunner.testCase.setPropertyValue("tradingCertificateId", tredCertId)
					
						testRunner.runTestStepByName("Get_TradingCertificateByTradingCertificateId")
						String responseBody = '${Get_TradingCertificateByTradingCertificateId#Response}'	
						getResponse=context.expand(responseBody)
						getJsonSlurper = new JsonSlurper()
						jsonResGetById = getJsonSlurper.parseText(getResponse)

						def httpResponseHeadersGet = context.testCase.testSteps["Get_TradingCertificateByTradingCertificateId"].testRequest.response.responseHeaders
						def httpStatusGet = httpResponseHeadersGet["#status#"]
						def httpStatusCodeGet = (httpStatusGet =~ "[1-5]\\d\\d")[0]
					
						//get Number of Columns from Excel
						int numberOfCells = 0;
						Iterator rowIterator = ws.rowIterator();
						if (rowIterator.hasNext())
						{
							Row headerRow1 = (Row) rowIterator.next();
							numberOfCells = headerRow1.getPhysicalNumberOfCells();
						}
						
						numberOfTcs=jsonResValidate.validationResults.tradingCertificateId.size().toInteger()
						log.info "Number of records displayed into result=>"+numberOfTcs


						for (int tccounter=0; tccounter<numberOfTcs; tccounter++)
						{
							int tcId=jsonResValidate.validationResults.tradingCertificateId[tccounter]
							
							if(tcId.toString().equals(sql_TCID.toString()))
							{
								int errorCountCheck=0;
								String allAPIErrors=""
								String[] numberOfErrors=""
								
								log.info "Validation of TC =>"+ tcId + " is in progress......"
								
	
								for(int i=1; i<rowCount; i++)
								{
									Row rows1 = ws.getRow(i);
									Cell cell2 = rows1.getCell(0);
									String tradingCertificateType = cell2.getStringCellValue().trim();

									if(tradingCertificateType.toString().equals(jsonResGetById.tradingCertificateType.typeCode.toString()))
									{
										numberOfErrors= jsonResValidate.validationResults.errors[tccounter]
										
										for (int errorCounter=0; errorCounter<numberOfErrors.length; errorCounter++)
										{
											
											allAPIErrors= allAPIErrors +" "+ jsonResValidate.validationResults.errors[tccounter][errorCounter]
										}
										
										log.info "No of Errors===>"+numberOfErrors.length
										tradingCertificateRowNumber = i;
										String[] errorList1 = jsonResValidate.validationResults.errors[tccounter]
										ArrayList<String> errorList = new ArrayList<String>();
			
										if(errorList1.length >0)
										{
											log.info "---------Validation Error Found-------------"
											
										
											for (int k=0; k<errorList1.length; k++)
								{
									String errorDescription = errorList1[k]
									errorList.add(errorDescription)
									log.info "Reason number "+(k+1)+" : "+errorList1[k]
									String field = getFieldName(errorList[k])
									log.info "Field Name after removing additional text is: "+field
									for (int j=0; j<=95;j++)
									{
										rows1 = ws.getRow(i);
										cell2 = rows1.getCell(j);
										
										Row headerColumns = ws.getRow(0);
										Cell cols = headerColumns.getCell(j);
										columnName = cols.getStringCellValue().trim();
										
										if (cell2.CELL_TYPE_STRING)
										{
											validation = cell2.getStringCellValue().trim();
											//log.info "Field : "+field +"==> columnName : "+columnName+"==>Rule : "+validation
										}//if condition ended for cell type is string from validation rule excel
										else if(cell2.CELL_TYPE_NUMERIC)
										{
											int numericValue = cell2.getNumericCellValue().trim();
											validation = Intger.parseInt(numericValue)
											//log.info "validation in numeric : "+validation
										}
										if(field.toLowerCase().equals(columnName.toLowerCase()))
										{
											if(validation.equals("true"))
												ruleFlag=true
											else 
												ruleFlag=false
											log.info "==>"+field.toLowerCase()+"==>"+columnName.toLowerCase()
											//break;
										}
									}
									if(ruleFlag)
									{
										switch (errorDescription)
										{
											case "'Policy Year' must not be empty.":
													//if(sql_policyyear.equals(jsonResValidate.policyYear))
													if(sql_policyyear.equals(jsonResGetById.policyYear))
													{
														log.info "Rule Flag = "+ruleFlag + "  SQL value for Policy Year is : "+sql_policyyear+" and API value for Policy Year is : "+jsonResGetById.policyYear
														errorCountCheck++;
													}
												break;
											case "'Nominated Flag State' must not be empty.":
													//if(sql_nominatedstateflag.equals(jsonResValidate.nominatedFlagState))
													if(sql_nominatedstateflag.equals(jsonResGetById.nominatedFlagState))
													{
														log.info "Rule Flag = "+ruleFlag + "  SQL value for Nominated State Flag is : "+sql_nominatedstateflag+" and API value for Nominated State Flag is : "+jsonResGetById.nominatedFlagState
														errorCountCheck++;
													}
													break;
											case "Owner name required.":
											case "'Owner Name' must not be empty.":
													//if(sql_ownername.equals(jsonResValidate.ownerName))
													if(sql_ownername.equals(jsonResGetById.ownerName))
													{
														log.info "Rule Flag = "+ruleFlag + "  SQL value for Owner name is : "+sql_ownername+" and API value for Owner name is : "+jsonResGetById.ownername
														errorCountCheck++;
													}
												break;
											case "Vessel name is required.":
											case  "'Vessel Name' must not be empty.":
												//if(sql_vesselname.equals(jsonResValidate.vesselName))
												if(sql_vesselname.equals(jsonResGetById.vesselName))
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Vessel name is : "+sql_vesselname+" and API value for Vessel name is : "+jsonResGetById.vesselName
													errorCountCheck++;
												}
												break;
											case "Member name is required." :
											case "'Member Name' must not be empty.":
												//if(sql_membername.equals(jsonResValidate.memberName))
												if(sql_membername.equals(jsonResGetById.memberName))
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Member name is : "+sql_membername+" and API value for Member name is : "+jsonResGetById.memberName
													errorCountCheck++;
												}
												break;
											case "Disctinctive numbers or letters required.":
											case "'Distinctive Numbers Or Letters' must not be empty.":
												//if(sql_distinctivenumbersorletters.equals(jsonResValidate.distinctiveNumbersOrLetters))
												if(sql_distinctivenumbersorletters.equals(jsonResGetById.distinctiveNumbersOrLetters))
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Distinctive Numbers Or Letters is : "+sql_distinctivenumbersorletters+" and API value for Distinctive Numbers Or Letters is : "+jsonResGetById.distinctiveNumbersOrLetters
													errorCountCheck++;
												}
												break;
											case "'Owner Address' must not be empty.":
												//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.ownerAddress==null)
												if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.ownerAddress==null)
												{
													log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Owner Address is : "+jsonResGetById.ownerAddress
													errorCountCheck++;
												}
												break;
											case "'State Address' must not be empty.":
												//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.stateAddress==null)
												if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.stateAddress==null)
												{
													log.info "SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for State Address is : "+jsonResGetById.stateAddress
													errorCountCheck++;
												}
												break;
											case "'Joint Assured Address' must not be empty.":
												//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.jointAssuredAddress==null)
												if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.jointAssuredAddress==null)
												{
													log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for JA Address is : "+jsonResGetById.jointAssuredAddress
													errorCountCheck++;
												}
												break;
											case "'Joint Assured Name' must not be empty.":
												//if(sql_jointassuredname.equals(jsonResValidate.jointAssuredName))
												if(sql_jointassuredname.equals(jsonResGetById.jointAssuredName))
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Joint Assured name is : "+sql_jointassuredname+" and API value for Joint Assured  name is : "+jsonResGetById.jointAssuredName
													errorCountCheck++;
												}
												break;
											case "Bank Address Bank name is required.":
											if(sql_bankname.equals(null))
													errorCountCheck++;
												break;
											case "'Broker Address' must not be empty.":
												//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.brokerAddress==null)
												if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.brokerAddress==null)
												{
													log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Broker Address is : "+jsonResGetById.brokerAddress
													errorCountCheck++;
												}
												break;
											case "'Member Address' must not be empty.":
												//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.memberAddress==null)
												if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.memberAddress==null)
												{
													log.info "SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Member Address is : "+jsonResGetById.memberAddress
													errorCountCheck++;
												}
												break;
											case "Member name set but no member address found":
												//if(sql_membername!=null && sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.memberAddress==null)
												if(sql_membername!=null && sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.memberAddress==null)
												{
													log.info "SQL value for Member name is : "+sql_membername+" and API Member Name value  is : "+jsonResGetById.memberName+" and SQL value for Address Type Id is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Member Address is : "+jsonResGetById.memberAddress
													errorCountCheck++;
												}
												break;
											case "Policy limit currency code is required.":
											case "'Currency Code' must not be empty.":
												//if(sql_currencycode==null && jsonResValidate.currencyCode==null)
												if(sql_currencycode==null && jsonResGetById.currencyCode==null)
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Currency Code is : "+sql_currencycode+" and API value for Currency Code is : "+jsonResGetById.currencyCode
													errorCountCheck++;
												}
												break;
											case "Policy limit amount is required.":
											case "'Cover Limit Amount' must not be empty.":
												//if(sql_coverlimitamount==null && jsonResValidate.coverLimitAmount==null)
												if(sql_coverlimitamount==null && jsonResGetById.coverLimitAmount==null)
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Cover Limit Amount is : "+sql_coverlimitamount+" and API value for Cover Limit Amount is : "+jsonResGetById.coverLimitAmount
													errorCountCheck++;
												}
												break;
											case "Engine horse power is required.":
											case "'Engine Horse Power' must not be empty.":
												//if(sql_enginehorsepower==null && jsonResValidate.engineHorsePower==null)
												if(sql_enginehorsepower==null && jsonResGetById.engineHorsePower==null)
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Engine Horse Power is : "+sql_enginehorsepower+" and API value for Engine Horse Power is : "+jsonResGetById.engineHorsePower
													errorCountCheck++;
												}
												break;
											case "'Trademark And Engine Model' must not be empty.":
												//if(sql_trademark==null && jsonResValidate.trademarkAndEngineModel==null)
												if(sql_trademark==null && jsonResGetById.trademarkAndEngineModel==null)
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Trade Mark is : "+sql_trademark+" and API value for Trade Mark is : "+jsonResGetById.trademarkAndEngineModel
													errorCountCheck++;
												}
												break;
											case "Gross tonnage is required." :
											case "'Gross Tonnage' must not be empty.":
												//if(sql_grosstonnage==null && jsonResValidate.grossTonnage==null)
												if(sql_grosstonnage==null && jsonResGetById.grossTonnage==null)
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Gross Tonnage is : "+sql_grosstonnage+" and API value for Gross Tonnage is : "+jsonResGetById.grossTonnage
													errorCountCheck++;
												}
												break;
											case "Year built is required.":
											case "'Year Built' must not be empty.":
												//if(sql_grosstonnage==null && jsonResValidate.yearBuilt==null)
												if(sql_yearbuilt==null && jsonResGetById.yearBuilt==null)
												{
													log.info "Rule Flag = "+ruleFlag + "  SQL value for Year Built is : "+sql_yearbuilt+" and API value for Year Built is : "+jsonResGetById.yearBuilt
													errorCountCheck++;	
												}
												break;
											case "Address is required.":
													errorCountCheck++;
												break;
											case "At least a Bank is required!":
												if(jsonResGetById.tradingCertificate.equals(null) || jsonResGetById.tradingCertificate.equals(""))
													errorCountCheck++;
												break;
											case "Address city name is required." :
												errorCountCheck++;
												break;
											case "Address country is require."	:
												errorCountCheck++;
												break;
											case "Address line 1 is required." :
												errorCountCheck++;
												break;
											case "Address line 2 is required.":
												errorCountCheck++;
												break;
											case "Address line 3 is required.":
												errorCountCheck++;
												break;
											case "Address name is required.":
												errorCountCheck++;
												break;
											case "Address poscode is required.":
												errorCountCheck++;
												break;
											case "Address State is required.":				
												errorCountCheck++;
												break;
											case "Bank name is required.":
												if(sql_bankname.equals(jsonResGetById.tradingCertificateBanks.equals(null)) && sql_bankname.equals(null))
													errorCountCheck++;
												break;
											case "Broker name is required.":	
												if(sql_brokername.equals(jsonResGetById.brokerName.equals(null))&& sql_brokername.equals(null))
													errorCountCheck++;
												break;
											case "Email address is required.":	
												if(sql_emailaddress.equals(jsonResGetById.emailAddress.equals(null))&& sql_emailaddress.equals(null))	
													errorCountCheck++;
												break;
											case "Member ref is required."	:				
												if(sql_memberref.equals(jsonResGetById.memberReference.equals(null))&& sql_memberref.equals(null))	
													errorCountCheck++;
												break;
											case "Policy end date is required.":					
												if(sql_policyenddate.equals(jsonResGetById.policyEndDate.equals(null))&& sql_policyenddate.equals(null))	
													errorCountCheck++;
												break;
											case "IMO Number Is Required.":
											case "'IMO Number' must not be empty.":
											case "IMONumberIsRequired.":				
												if(sql_imonumber.equals(jsonResGetById.imoNumber.equals(null))&& sql_imonumber.equals(null))	
													errorCountCheck++;
												break;
											case "Issue Date is required.":				
												if(sql_certificateissuedate.equals(jsonResGetById.certificateIssueDate.equals(null))&& sql_certificateissuedate.equals(null))	
													errorCountCheck++;
												break;
											case "Policy reference number is required." :
												if(sql_policyref.equals(jsonResGetById.policyReference.equals(null))&& sql_policyref.equals(null))	
													errorCountCheck++;
												break;
											case "Policy start date is required." :
												if(sql_policystartdate.equals(jsonResGetById.policyStartDate.equals(null))&& sql_policystartdate.equals(null))	
													errorCountCheck++;
												break;
											case "Port of registry required." :
												if(sql_portofregistry.equals(jsonResGetById.portOfRegistry.equals(null))&& sql_portofregistry.equals(null))	
													errorCountCheck++;
												break;
											case "Risk ref is required." :
												if(sql_riskref.equals(jsonResGetById.riskReference.equals(null))&& sql_riskref.equals(null))	
													errorCountCheck++;
												break;
											case "Signatory state is required." :
												errorCountCheck++;
												break;
											case "Signatory State Address is required." :
												errorCountCheck++;
												break;
											case "Certificate sequence number is required." :
												errorCountCheck++;
												break;
											case "Vessel flag is required." :
												if(sql_vesselflag.equals(jsonResGetById.vesselFlag.equals(null))&& sql_vesselflag.equals(null))	
													errorCountCheck++;
												break;
											case "Vessel model is required." :
												if(sql_model.equals(jsonResGetById.model.equals(null))&& sql_model.equals(null))	
													errorCountCheck++;
												break;
											case "Vessel type is required." :
												if(sql_vesseltype.equals(jsonResGetById.vesselType.equals(null))&& sql_vesseltype.equals(null))	
													errorCountCheck++;
												break;
											case "Vessel trademark is required." :
												if(sql_trademark.equals(jsonResGetById.trademarkAndEngineModel.equals(null))&& sql_trademark.equals(null))	
													errorCountCheck++;
												break;
											case "Member Address Address name is required." :
											case "Member Address Address city name is required " :
											case "Member Address Address country is required" :
														errorCountCheck++;
													break;
											case "Broker Address Address name is required." :
											case "Broker Address Address city name is required " :
											case "Broker Address Address country is required" :
														errorCountCheck++;
													break;
										}//end of switch case
										
										
									}//if condition for rule is true
									
								}//end of error list for loop
			
											if(errorList1.length.equals(errorCountCheck))
											{
												isValid = "false"
												packIssueStatus = "false"
												packIssueStatus=removeComma(packIssueStatus.toString())
												errorCountCheck=removeComma(errorCountCheck.toString())

												sqlErrorCount = errorList1.length
												sqlErrorCount = removeComma(sqlErrorCount.toString())
												//currentStatus = "TC is not valid"
												api_errors=allAPIErrors
												api_errors = removeComma(api_errors.toString())
												sql_TradingCertificateId= removeComma(sql_TradingCertificateId.toString())
												api_errors=api_errors.replace(",", " ")

												 key = sql_TcPackId + "_" + sql_TradingCertificateId
												log.info "SQL query Response received as: "+sql_TcPackId+","+sql_TradingCertificateId+","+isValid+","+sqlErrorCount+","+packIssueStatus+","+sql_CurrentStatus
												
												arrCellVal=[key,sql_TcPackId,sql_TradingCertificateId,isValid,sqlErrorCount,packIssueStatus,sql_CurrentStatus]
									
									
												RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
												db_size++
												counter++
														
											}
											else
											{
												isValid = "false"
												packIssueStatus = "false"
												packIssueStatus=removeComma(packIssueStatus.toString())
												errorCountCheck=removeComma(errorCountCheck.toString())
												log.info "TC is not valid & Error count wrong"
												api_errors=allAPIErrors
												api_errors = removeComma(api_errors.toString())
												sql_TradingCertificateId= removeComma(sql_TradingCertificateId.toString())

												api_errors=api_errors.replace(",", " ")
												//api_errors=removeComma(api_errors.toString())
												 key = sql_TcPackId + "_" + sql_TradingCertificateId

												sqlErrorCount = errorList1.length
												sqlErrorCount = removeComma(sqlErrorCount.toString())

			
												log.info "SQL query Response received as: "+sql_TcPackId+","+sql_TradingCertificateId+","+isValid+","+sqlErrorCount+","+packIssueStatus+","+sql_CurrentStatus
												
												arrCellVal=[key, sql_TcPackId,sql_TradingCertificateId,isValid,sqlErrorCount,packIssueStatus,sql_CurrentStatus]
										
										
												RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
												db_size++
												counter++
											}
										}
										else if(errorList1.length ==0)
										{
											isValid = "true"
											isValid = removeComma(isValid.toString())
											log.info "---------------TC is Valid, moving to check Pack Status------------------"
											String sqlStmtIssuedStatus = 
											"""
											SELECT 
											TOP 1
											TCPK.Id as TradingCertificatePackId, TC.Id as TradingCertificateId, TC.CurrentStatus, TC.RiskReference, RT.TypeCode, TC.AddressType_Id, TC.SourceSystem, 
											TC.Reference, TC.StorageId,  TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
											TC.IsRenewal, case when TC.IsRenewal = 1 then 'True'    when TC.IsRenewal = 0 then 'False' else NULL end as IsRenewalFlag, TC.IsYacht,
											case when TC.IsYacht = 1 then 'True' when TC.IsYacht = 0 then 'False' else NULL end as IsYachtFlag, 
											TC.TradingCertificateVersion as Version, TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,
											TC.JointAssuredName, TC.OwnerReference, TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,
											TC.policyyear, TC.CertificateIssueDate, TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity,
											TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,
											TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower,
											TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList, TC.TenderOutboardReferenceList,
											TC.Type_Id as TradingCertificateTypeId, RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode, 
											RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName, BS.BankName
											from TradingCertificate TC 
											inner join TradingCertificatePack TCPK  on TCPK.Id = TC.TradingCertificatePack_Id
											left join ref_type RT on RT.Id=TC.Type_id
											inner join ref_Group RG on RG.Id = RT.Group_Id
											left join ref_addressType RAT on RAT.Id=TC.AddressType_Id
											left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id
											where TCPK.Id= $packId and TC.Id= $sql_TradingCertificateId
											order by TCPK.Id desc, TC.Id desc
											"""
											
											con.eachRow(sqlStmtIssuedStatus)
											{	
												rowNew ->
												sql_CurrentStatusIssued=rowNew.CurrentStatus
												sql_CurrentStatusIssued = removeComma(sql_CurrentStatusIssued.toString())
					
												
												String errorrCount = removeComma(errorList1.length.toString())
												//isValid = "true"
												
									
												if(sql_CurrentStatusIssued.toString().toUpperCase() == "ISSUED")
												{
													packIssueStatus = "true"
													packIssueStatus = removeComma(packIssueStatus.toString())
													
													log.info "Pack Issued Successfully"
													log.info "SQL query Response received as: "+sql_TcPackId+","+sql_TradingCertificateId+","+isValid+","+errorrCount+","+packIssueStatus+","+sql_CurrentStatusIssued
													sql_TradingCertificateId=removeComma(sql_TradingCertificateId.toString())
													 key = sql_TcPackId + "_" + sql_TradingCertificateId
													arrCellVal=[key, sql_TcPackId,sql_TradingCertificateId,isValid,errorrCount,packIssueStatus,sql_CurrentStatusIssued]
													
													RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
													db_size++
													counter++
												}
												else if(sql_CurrentStatusIssued.toString().toUpperCase() != "ISSUED" )
												{
													packIssueStatus = "false"
													packIssueStatus = removeComma(packIssueStatus.toString())
													log.info "TC not Issued"
													log.info "SQL query Response received as: "+sql_TcPackId+","+sql_TradingCertificateId+","+isValid+","+errorrCount+","+packIssueStatus+","+sql_CurrentStatusIssued
													sql_TradingCertificateId=removeComma(sql_TradingCertificateId.toString())
													key = sql_TcPackId + "_" + sql_TradingCertificateId
													arrCellVal=[key, sql_TcPackId,sql_TradingCertificateId,isValid,errorrCount,packIssueStatus,sql_CurrentStatusIssued]
					
													RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
													db_size++
													counter++
												}
											}
										}
									}//if condition to check the trading certificate types
								}
							}
						}
						try
						{
							RT.saveExcelFile(summary_File,O_Summary)
						}
						catch(Exception e) 
						{
							log.info e.toString();
						}
				}//sql end

				int totalColumns = source.getRow(1).getLastCellNum()
				db_endCol=totalColumns-1
				api_startCol=totalColumns+2
				counter=row_start
	
//				String getTcId1=
//				"""
//				SELECT 
//				TOP 50
//				TCPK.Id as TradingCertificatePackId, TC.Id as TradingCertificateId, TC.CurrentStatus, TC.RiskReference, RT.TypeCode, TC.AddressType_Id, TC.SourceSystem, 
//				TC.Reference, TC.StorageId,  TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
//				TC.IsRenewal, case when TC.IsRenewal = 1 then 'True'    when TC.IsRenewal = 0 then 'False' else NULL end as IsRenewalFlag, TC.IsYacht,
//				case when TC.IsYacht = 1 then 'True' when TC.IsYacht = 0 then 'False' else NULL end as IsYachtFlag, 
//				TC.TradingCertificateVersion as Version, TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,
//				TC.JointAssuredName, TC.OwnerReference, TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,
//				TC.policyyear, TC.CertificateIssueDate, TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity,
//				TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,
//				TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower,
//				TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList, TC.TenderOutboardReferenceList,
//				TC.Type_Id as TradingCertificateTypeId, RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode, 
//				RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName, BS.BankName
//				from TradingCertificate TC 
//				inner join TradingCertificatePack TCPK  on TCPK.Id = TC.TradingCertificatePack_Id
//				left join ref_type RT on RT.Id=TC.Type_id
//				inner join ref_Group RG on RG.Id = RT.Group_Id
//				left join ref_addressType RAT on RAT.Id=TC.AddressType_Id
//				left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id
//				--where TCPK.Id= 76
//				order by TCPK.Id desc, TC.Id desc
//				"""

				con.eachRow(sqlstmt)
				{
					row1->
					sql_TCID=row1.TradingCertificateId
					sql_TcPackId=row1.TradingCertificatePackId
					sql_CurrentStatusIssued=row1.CurrentStatus

					String key
	
					log.info "Getting API values of Trading Certificate Id=>"+sql_TCID+" of Pack Id=> "+sql_TcPackId
	
					testRunner.testCase.setPropertyValue('token', token)
					testRunner.testCase.setPropertyValue('packId', sql_TcPackId.toString())
	
					//API
					testRunner.runTestStepByName('TradCertPackByTradCertPackIDByIssueDocs')
					String req='${TradCertPackByTradCertPackIDByIssueDocs#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
					jsonResValidate = jsonSlurper.parseText(response)
					//log.info jsonResValidate
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["TradCertPackByTradCertPackIDByIssueDocs"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

					arrCellVal=['API DATA']
					RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
					RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)				
					if(httpStatusCode.toString().equals("200"))
					{
							numberOfTcs=jsonResValidate.validationResults.tradingCertificateId.size().toInteger()
							log.info "-----------Issue Doc for Pack Failed. Validation error found----------------"
	
							for (int tccounter=0; tccounter<numberOfTcs; tccounter++)
							{
								int tcId=jsonResValidate.validationResults.tradingCertificateId[tccounter]
								
								if(tcId.toString().equals(sql_TCID.toString()))
								{
									
									isValid = jsonResValidate.validationResults.isValid[tccounter]
									isValid = removeComma(isValid.toString())
									String[] Errors = jsonResValidate.validationResults.errors[tccounter]
									String numberOfErrors = Errors.length
									if(sql_CurrentStatusIssued == "ISSUED")
									{
										packIssueStatus = "true"
									}
									else if(sql_CurrentStatusIssued != "ISSUED")
									{
										packIssueStatus = "false"
									}
									key= sql_TcPackId + "_" + sql_TCID
									sql_TCID=removeComma(sql_TCID.toString())
									arrCellVal=[key, sql_TcPackId,sql_TCID,isValid,numberOfErrors,packIssueStatus,sql_CurrentStatusIssued]
								
									RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
									total_size++
									counter++
								}
							}	
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[""," "," ", httpStatusCode+"=>"+httpStatus]
						
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
						total_size++
						counter++
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
						log.info e.getMessage();	
					}
					
				}

				con.close()
				
				//DB compare with API
				int db_startCol=0
				counter=row_start;
				totalColumns = source.getRow(1).getLastCellNum();
				
				int api_endCol=totalColumns-1
				dsc='Issue Documents of Trading Certificate Packs by Trading Certificate Pack Id and check status from Database'
				tcid=tcModuleName.toString()
				RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid, dsc)
			}
		}
	}
}

public String getFieldName(String fieldName)
{
	if(fieldName.toString().contains("' must not be empty.") && fieldName!=null || fieldName!="")
	{
		fieldName = fieldName.replace("' must not be empty.","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if(fieldName.toString().contains("is required") && fieldName!=null || fieldName!="")
	{
		fieldName = fieldName.replace("is required","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if (fieldName.toString().contains(" set but no ") && fieldName.toString().contains(" address found")&& fieldName!=null || fieldName!="")
	//Member name set but no member address found
	{
		fieldName = fieldName.replace(" set but no ","")
		fieldName = fieldName.replace(" address found","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if(fieldName.toString().contains("At least a Bank is required!") && fieldName!=null || fieldName!="")
	{
		fieldName =  "bankName"
		fieldName = fieldName.toLowerCase()
	}
	else
		fieldName=null
	return fieldName
}
public String removeComma(String field)
{
	if(field != null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(",","")
		}
	}
	return field
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>packId</con:name><con:value>76</con:value></con:property></con:properties></con:testCase><con:testCase id="3adb663e-5e4d-4414-b756-0ca74766a27e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument" id="174eeba3-1d3a-4ea8-bc88-2abd2f15cb1e"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificatePacks/${#TestCase#tradingCertificatePackID}/generateDraftDocument" methodName="POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument" id="5ce352b4-69ac-4057-98fc-3bcd474b9df5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/76/generateDraftDocument</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="TradCertPackByTradCertPackIDByGenDraftDoc" id="5979fe8d-b66d-4261-884b-8f396555ce5b"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

def api_stateAddressId = api_stateAddressName= api_stateAddressLine1= api_stateAddressLine2= api_stateAddressLine3= api_stateAddressStateOrCounty= api_stateAddressCity= api_stateAddressCountry= api_stateAddressPostCode ="NULL"
def api_stateAddressPrimaryAddress= api_ownerAddressId= api_ownerAddressName= api_ownerAddressLine1= api_ownerAddressLine2= api_ownerAddressLine3= api_ownerAddressStateOrCounty= api_ownerAddressCity= api_ownerAddressCountry= api_ownerAddressPostCode= api_ownerAddressPrimaryAddress= "NULL"
def api_brokerAddressId= api_brokerAddressName= api_brokerAddressLine1= api_brokerAddressLine2= api_brokerAddressLine3= api_brokerAddressStateOrCounty= api_brokerAddressCity= api_brokerAddressCountry= api_brokerAddressPostCode= api_brokerAddressPrimaryAddress= "NULL"
def api_memberAddressId= api_memberAddressName= api_memberAddressLine1= api_memberAddressLine2= api_memberAddressLine3= api_memberAddressStateOrCounty= api_memberAddressCity= api_memberAddressCountry= api_memberAddressPostCode= api_memberAddressPrimaryAddress= "NULL"
def api_jointAssuredAddressId= api_jointAssuredAddressName= api_jointAssuredAddressLine1= api_jointAssuredAddressLine2= api_jointAssuredAddressLine3= api_jointAssuredAddressStateOrCounty= api_jointAssuredAddressCity= api_jointAssuredAddressCountry= api_jointAssuredAddressPostCode= api_jointAssuredAddressPrimaryAddress= "NULL"
def api_branchAddressId= api_branchAddressName= api_branchAddressLine1= api_branchAddressLine2= api_branchAddressLine3= api_branchAddressStateOrCounty= api_branchAddressCity= api_branchAddressCountry= api_branchAddressPostCode= api_branchAddressPrimaryAddress= "NULL"


for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument"))
		tcModuleName="GenerateDraftDocumentForPack"
	
	if(tcModuleName.toString().equals("GenerateDraftDocumentForPack"))
	{
		log.info "Test Execution started for getting Generate Draft Document with Trading Certificate Packs from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["TCPackID_TCID","TCPackID","TCCreatedByUserEmailAddress","TCCreatedDateTime","tradingCertificateId","addressTypeId","sourceSystem","reference","currentStatus","storageId","riskId","policyId","memberPartyId","ownerPartyId","brokerPartyId","isRenewal","isYacht","version","riskReference","policyReference","memberReference","memberType","memberName","jointAssuredName","ownerReference","ownerName","ownerDomicile","ownerEmailAddress","brokerReference","brokerName","brokerEmailAddress","policyYear","certificateIssueDate","emailAddress","ccEmailAddress","effectiveStartDate","effectiveEndDate","passengerCapacity","policyStartDate","policyEndDate","currencyCode","coverLimitAmount","signatoryStateId","vesselName","vesselType","vesselTypeName","vesselEnteredDate","vesselFlag","imoNumber","distinctiveNumbersOrLetters","grossTonnage","yearBuilt","engineHorsePower","trademarkAndEngineModel","model","engineNo","nominatedFlagState","nominatedFlagStateName","portOfRegistry","tenderReferenceList","tenderOutboardReferenceList","tradingCertificateTypeId","tradingCertificateGroupId","tradingCertificateGroupName","tradingCertificateGroupCode","tradingCertificateTypeTypeCode","tradingCertificateTypeTypeName","branchCode","tradingCertificatePackId","stateAddressId","stateAddressName","stateAddressLine1","stateAddressLine2","stateAddressLine3","stateAddressStateOrCounty","stateAddressCity","stateAddressCountry","stateAddressPostCode","stateAddressPrimaryAddress","ownerAddressId","ownerAddressName","ownerAddressLine1","ownerAddressLine2","ownerAddressLine3","ownerAddressStateOrCounty","ownerAddressCity","ownerAddressCountry","ownerAddressPostCode","ownerAddressPrimaryAddress","brokerAddressId","brokerAddressName","brokerAddressLine1","brokerAddressLine2","brokerAddressLine3","brokerAddressStateOrCounty","brokerAddressCity","brokerAddressCountry","brokerAddressPostCode","brokerAddressPrimaryAddress","memberAddressId","memberAddressName","memberAddressLine1","memberAddressLine2","memberAddressLine3","memberAddressStateOrCounty","memberAddressCity","memberAddressCountry","memberAddressPostCode","memberAddressPrimaryAddress","jointAssuredAddressId","jointAssuredAddressName","jointAssuredAddressLine1","jointAssuredAddressLine2","jointAssuredAddressLine3","jointAssuredAddressStateOrCounty","jointAssuredAddressCity","jointAssuredAddressCountry","jointAssuredAddressPostCode","jointAssuredAddressPrimaryAddress","branchAddressId","branchAddressName","branchAddressLine1","branchAddressLine2","branchAddressLine3","branchAddressStateOrCounty","branchAddressCity","branchAddressCountry","branchAddressPostCode","branchAddressPrimaryAddress","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

					String sqlstmt=
					"""
					SELECT
					top 50
					TC.TradingCertificatePack_Id, TCPK.CreatedByUserEmailAddress, TCPK.CreatedDateTime,
					TC.Id as TradingCertificateId, TC.AddressType_Id,TC.SourceSystem,TC.Reference, TC.CurrentStatus, 
					TC.StorageId, TC.RiskId, TC.ApplicationRiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId, 
					case when TC.IsOwner =0 then 'FALSE' when TC.IsOwner =0 then 'TRUE' else NULL end as IsOwner, TC.BrokerContactPartyId,  TC.JointAssuredPartyId, 
					case when TC.IsRenewal = 1 then 'TRUE'    when TC.IsRenewal = 0 then 'FALSE' else NULL end as IsRenewal,
					case when TC.IsYacht = 1 then 'TRUE' when TC.IsYacht = 0 then 'FALSE' else NULL end as IsYacht,TC.TradingCertificateVersion as Version,
					TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,TC.JointAssuredName, TC.OwnerReference,
					TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,TC.PolicyYear, TC.CertificateIssueDate,
					TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity, TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,
					TC.SignatoryState_Id, TC.SignatoryStateAddressId, TC.VesselName,TC.VesselType,TC.VesselTypeName, TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,
					TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower, TC.TradeMark, TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList,
					TC.TenderOutboardReferenceList, TC.Type_Id as TradingCertificateTypeId,RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode,
					RT.TypeCode, RT.Name as TypeName, TC.BranchCode, TC.TradingCertificatePack_Id
					from TradingCertificate TC
					inner join ref_Type RT on RT.Id=TC.Type_Id
					inner join ref_Group RG on RG.Id=RT.Group_Id
					inner join TradingCertificatePack TCPK on TCPK.Id=TC.TradingCertificatePack_Id
					where TC.TradingCertificatePack_Id is not NULL --and TC.TradingCertificatePack_Id = 85
					order by TC.TradingCertificatePack_Id
					"""	
					
					rows=con.rows(sqlstmt) 
					arrCellVal=['DB data']
					
					RT.writeDetails(source,0,0,headerStyle,arrCellVal)
					
					headerStyle = RT.getCellStyle(O_Summary,'Header');
					RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
					
					def arrData;
					//DB sheet start
					con.eachRow(sqlstmt) 
					{ 
						row->
							sql_TCPackId=row.TradingCertificatePack_Id
							sql_CreatedByUserEmailAddress=row.CreatedByUserEmailAddress
							sql_CreatedDateTime=row.CreatedDateTime
							if(sql_CreatedDateTime!=null)
							{
								sql_CreatedDateTime=sql_CreatedDateTime.toString().replace(" ", "T")
								sql_CreatedDateTime=getDate(sql_CreatedDateTime.toString())
							}
							else 
								sql_CreatedDateTime="NULL"
							sql_TradingCertificateId=row.TradingCertificateId

							String sqlTCPKId_TCId=sql_TCPackId.toString()+"_"+sql_TradingCertificateId.toString()
							
							sql_AddressType_Id=row.AddressType_Id
							sql_SourceSystem=row.SourceSystem
							sql_Reference=row.Reference
							sql_CurrentStatus=row.CurrentStatus
							sql_StorageId=row.StorageId
							sql_RiskId=row.RiskId
							sql_ApplicationRiskId=row.ApplicationRiskId
							sql_PolicyId=row.PolicyId
							sql_MemberPartyId=row.MemberPartyId
							sql_OwnerPartyId=row.OwnerPartyId
							sql_BrokerPartyId=row.BrokerPartyId
							sql_IsOwner=row.IsOwner
							sql_BrokerContactPartyId=row.BrokerContactPartyId
							sql_JointAssuredPartyId=row.JointAssuredPartyId
							sql_IsRenewal=row.IsRenewal
							sql_IsYacht=row.IsYacht
							sql_Version=row.Version
							sql_RiskReference=row.RiskReference
							sql_PolicyReference=row.PolicyReference
							sql_MemberReference=row.MemberReference
							sql_MemberType=row.MemberType
							sql_MemberName=row.MemberName
							sql_MemberName = removeComma(sql_MemberName.toString())
							sql_JointAssuredName=row.JointAssuredName
							sql_JointAssuredName= removeComma(sql_JointAssuredName.toString())
							sql_OwnerReference=row.OwnerReference
							sql_OwnerName=row.OwnerName
							sql_OwnerName = removeComma(sql_OwnerName.toString())
							sql_OwnerDomicile=row.OwnerDomicile
							sql_OwnerEmailAddress=row.OwnerEmailAddress
							sql_BrokerReference=row.BrokerReference
							sql_BrokerName=row.BrokerName
							sql_BrokerName = removeComma(sql_BrokerName.toString())
							sql_BrokerEmailAddress=row.BrokerEmailAddress
							sql_PolicyYear=row.PolicyYear
							sql_CertificateIssueDate=row.CertificateIssueDate
							if(sql_CertificateIssueDate!=null)
							{
								sql_CertificateIssueDate=sql_CertificateIssueDate.toString().replace(" ", "T")
								sql_CertificateIssueDate=getDate(sql_CertificateIssueDate.toString())
							}
							else 
								sql_CertificateIssueDate="NULL"
							sql_EmailAddress=row.EmailAddress
							sql_CcEmailAddress=row.CcEmailAddress
							sql_EffectiveStartDate=row.EffectiveStartDate
							if(sql_EffectiveStartDate!=null)
							{
								sql_EffectiveStartDate=sql_EffectiveStartDate.toString().replace(" ", "T")
								sql_EffectiveStartDate=getDate(sql_EffectiveStartDate.toString())
							}
							else 
								sql_EffectiveStartDate="NULL"
							sql_EffectiveEndDate=row.EffectiveEndDate
							if(sql_EffectiveEndDate!=null)
							{
								sql_EffectiveEndDate=sql_EffectiveEndDate.toString().replace(" ", "T")
								sql_EffectiveEndDate=getDate(sql_EffectiveEndDate.toString())
							}
							else 
								sql_EffectiveEndDate="NULL"
							sql_PassengerCapacity=row.PassengerCapacity
							sql_PolicyStartDate=row.PolicyStartDate
							if(sql_PolicyStartDate!=null)
							{
								sql_PolicyStartDate=sql_PolicyStartDate.toString().replace(" ", "T")
								sql_PolicyStartDate=getDate(sql_PolicyStartDate.toString())
							}
							else 
								sql_PolicyStartDate="NULL"
							sql_PolicyEndDate=row.PolicyEndDate
							if(sql_PolicyEndDate!=null)
							{
								sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" ", "T")
								sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())
							}
							else 
								sql_PolicyEndDate="NULL"
							sql_CurrencyCode=row.CurrencyCode
							sql_CurrencyCode= removeComma(sql_CurrencyCode.toString())
							sql_CoverLimitAmount=row.CoverLimitAmount
							sql_CoverLimitAmount = removeDotFromCurrency(sql_CoverLimitAmount.toString())
							sql_CoverLimitAmount = removeComma(sql_CoverLimitAmount.toString())
							sql_SignatoryState_Id=row.SignatoryState_Id
							sql_SignatoryStateAddressId=row.SignatoryStateAddressId
							sql_VesselName=row.VesselName
							sql_VesselName = removeComma(sql_VesselName.toString())
							sql_VesselType=row.VesselType
							sql_VesselTypeName=row.VesselTypeName
							sql_vesselEnteredDate=row.vesselEnteredDate
							if(sql_vesselEnteredDate!=null)
							{
								sql_vesselEnteredDate=sql_vesselEnteredDate.toString().replace(" ", "T")
								sql_vesselEnteredDate=getDate(sql_vesselEnteredDate.toString())
							}
							else 
								sql_vesselEnteredDate="NULL"
							sql_vesselFlag=row.vesselFlag
							sql_imoNumber=row.imoNumber
							sql_distinctiveNumbersOrLetters=row.distinctiveNumbersOrLetters
							sql_distinctiveNumbersOrLetters=removeComma(sql_distinctiveNumbersOrLetters.toString())
							sql_grossTonnage=row.grossTonnage
							sql_yearBuilt=row.yearBuilt
							sql_engineHorsePower=row.engineHorsePower
							sql_TradeMark=row.TradeMark
							sql_model=row.model
							sql_engineNo=row.engineNo
							sql_NominatedStateFlag=row.NominatedStateFlag
							sql_NominatedStateFlag= removeComma(sql_NominatedStateFlag.toString())
							sql_NominatedStateFlagName=row.NominatedStateFlagName
							sql_NominatedStateFlagName = removeComma(sql_NominatedStateFlagName.toString())
							sql_portOfRegistry=row.portOfRegistry
							sql_portOfRegistry = removeComma(sql_portOfRegistry.toString())
							sql_TenderReferenceList=row.tenderReferenceList
							sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
							sql_TradingCertificateTypeId=row.TradingCertificateTypeId
							sql_TradingCertificateGroupId=row.TradingCertificateGroupId
							sql_TradingCertificateGroupName=row.TradingCertificateGroupName
							sql_TradingCertificateGroupCode=row.TradingCertificateGroupCode
							sql_TradingCertificateTypeCode=row.TypeCode
							sql_TradingCertificateTypeName=row.TypeName
							sql_BranchCode=row.BranchCode
							sql_TradingCertificatePack_Id=row.TradingCertificatePack_Id
							sql_TradingCertificatePack_Id= removeComma(sql_TradingCertificatePack_Id.toString())
							
							String getStateAddressSQL =
							"""						
							declare
							@tradCertId as int = """+sql_TradingCertificateId+"""
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='SIGNATORYSTATE'
							 and TC.Id=@tradCertId
							 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getStateAddressSQL)
							{
								getRows->
								sql_StateAddressId=getRows.AddressId
								sql_StateAddressId = removeComma(sql_StateAddressId.toString())
								sql_StateAddressName=getRows.AddressName
								sql_StateAddressName = removeComma(sql_StateAddressName.toString())
								sql_StateAddressLine1=getRows.AddressLine1
								sql_StateAddressLine1 = removeComma(sql_StateAddressLine1.toString())
								sql_StateAddressLine2=getRows.AddressLine2
								sql_StateAddressLine2 = removeComma(sql_StateAddressLine2.toString())
								sql_StateAddressLine3=getRows.AddressLine3
								sql_StateAddressLine3 = removeComma(sql_StateAddressLine3.toString())
								sql_StateStateOrCounty=getRows.StateOrCounty
								sql_StateStateOrCounty = removeComma(sql_StateStateOrCounty.toString())
								sql_StateCity=getRows.City
								sql_StateCity = removeComma(sql_StateCity.toString())
								sql_StateCountry=getRows.Country
								sql_StateCountry = removeComma(sql_StateCountry.toString())
								sql_StatePostCode=getRows.PostCode
								sql_StatePostCode = removeComma(sql_StatePostCode.toString())
								sql_StateIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_StateIsPrimaryAddress = removeComma(sql_StateIsPrimaryAddress.toString())
								//log.info "State Address is received as ==> "+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress
							}
						
							String getOwnerAddressSQL =
							"""
							declare
							@tradCertId as int = '"""+sql_TradingCertificateId+"""'
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='OWNER'
							 and TC.Id=@tradCertId
							 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getOwnerAddressSQL)
							{
								getRows->
								sql_OwnerAddressId=getRows.AddressId
								sql_OwnerAddressId = removeComma(sql_OwnerAddressId.toString())
								sql_OwnerAddressName=getRows.AddressName
								sql_OwnerAddressName = removeComma(sql_OwnerAddressName.toString())
								sql_OwnerAddressLine1=getRows.AddressLine1
								sql_OwnerAddressLine1 = removeComma(sql_OwnerAddressLine1.toString())
								sql_OwnerAddressLine2=getRows.AddressLine2
								sql_OwnerAddressLine2 = removeComma(sql_OwnerAddressLine2.toString())
								sql_OwnerAddressLine3=getRows.AddressLine3
								sql_OwnerAddressLine3 = removeComma(sql_OwnerAddressLine3.toString())
								sql_OwnerStateOrCounty=getRows.StateOrCounty
								sql_OwnerStateOrCounty = removeComma(sql_OwnerStateOrCounty.toString())
								sql_OwnerCity=getRows.City
								sql_OwnerCity = removeComma(sql_OwnerCity.toString())
								sql_OwnerCountry=getRows.Country
								sql_OwnerCountry = removeComma(sql_OwnerCountry.toString())
								sql_OwnerPostCode=getRows.PostCode
								sql_OwnerPostCode = removeComma(sql_OwnerPostCode.toString())
								sql_OwnerIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_OwnerIsPrimaryAddress = removeComma(sql_OwnerIsPrimaryAddress.toString())
								//log.info "Owner Address is received as ==> "+sql_OwnerAddressTypeName+","+sql_OwnerAddressTypeId+","+sql_OwnerTradingCertificateId+","+sql_OwnerRiskReference+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressName+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress	
							}
						
							String getBrokerAddressSQL =
							"""
							declare
							@tradCertId as int = '"""+sql_TradingCertificateId+"""'
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='BROKER'
							 and TC.Id=@tradCertId
							 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getBrokerAddressSQL)
							{
								getRows->
								sql_BrokerAddressId=getRows.AddressId
								sql_BrokerAddressId = removeComma(sql_BrokerAddressId.toString())
								sql_BrokerAddressName=getRows.AddressName
								sql_BrokerAddressName = removeComma(sql_BrokerAddressName.toString())
								sql_BrokerAddressLine1=getRows.AddressLine1
								sql_BrokerAddressLine1 = removeComma(sql_BrokerAddressLine1.toString())
								sql_BrokerAddressLine2=getRows.AddressLine2
								sql_BrokerAddressLine2 = removeComma(sql_BrokerAddressLine2.toString())
								sql_BrokerAddressLine3=getRows.AddressLine3
								sql_BrokerAddressLine3 = removeComma(sql_BrokerAddressLine3.toString())
								sql_BrokerStateOrCounty=getRows.StateOrCounty
								sql_BrokerStateOrCounty = removeComma(sql_BrokerStateOrCounty.toString())
								sql_BrokerCity=getRows.City
								sql_BrokerCity = removeComma(sql_BrokerCity.toString())
								sql_BrokerCountry=getRows.Country
								sql_BrokerCountry = removeComma(sql_BrokerCountry.toString())
								sql_BrokerPostCode=getRows.PostCode
								sql_BrokerPostCode = removeComma(sql_BrokerPostCode.toString())
								sql_BrokerIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_BrokerIsPrimaryAddress = removeComma(sql_BrokerIsPrimaryAddress.toString())
								//log.info "Broker Address is received as ==> "+sql_BrokerAddressTypeName+","+sql_BrokerAddressTypeId+","+sql_BrokerTradingCertificateId+","+sql_BrokerRiskReference+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressName+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress	
							}
						
								String getMemberAddressSQL =
							"""
							declare
							@tradCertId as int = """+sql_TradingCertificateId+"""
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='MEMBER'
							 and TC.Id=@tradCertId
							 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getMemberAddressSQL)
							{
								getRows->
								sql_MemberAddressId=getRows.AddressId
								sql_MemberAddressId = removeComma(sql_MemberAddressId.toString())
								sql_MemberAddressName=getRows.AddressName
								sql_MemberAddressName = removeComma(sql_MemberAddressName.toString())
								sql_MemberAddressLine1=getRows.AddressLine1
								sql_MemberAddressLine1 = removeComma(sql_MemberAddressLine1.toString())
								sql_MemberAddressLine2=getRows.AddressLine2
								sql_MemberAddressLine2 = removeComma(sql_MemberAddressLine2.toString())
								sql_MemberAddressLine3=getRows.AddressLine3
								sql_MemberAddressLine3 = removeComma(sql_MemberAddressLine3.toString())
								sql_MemberStateOrCounty=getRows.StateOrCounty
								sql_MemberStateOrCounty = removeComma(sql_MemberStateOrCounty.toString())
								sql_MemberCity=getRows.City
								sql_MemberCity = removeComma(sql_MemberCity.toString())
								sql_MemberCountry=getRows.Country
								sql_MemberCountry = removeComma(sql_MemberCountry.toString())
								sql_MemberPostCode=getRows.PostCode
								sql_MemberPostCode = removeComma(sql_MemberPostCode.toString())
								sql_MemberIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_MemberIsPrimaryAddress = removeComma(sql_MemberIsPrimaryAddress.toString())
								//log.info "Member Address is received as ==> "+sql_MemberAddressTypeName+","+sql_MemberAddressTypeId+","+sql_MemberTradingCertificateId+","+sql_MemberRiskReference+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressName+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress	
							}
							String getJointAssuredAddressSQL =
							"""
							declare
							@tradCertId as int = """+sql_TradingCertificateId+"""
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='JOINTASSURED'
							and TC.Id=@tradCertId
							union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getJointAssuredAddressSQL)
							{
								getRows->
								sql_JointAssuredAddressId=getRows.AddressId
								sql_JointAssuredAddressId = removeComma(sql_JointAssuredAddressId.toString())
								sql_JointAssuredAddressName=getRows.AddressName
								sql_JointAssuredAddressName = removeComma(sql_JointAssuredAddressName.toString())
								sql_JointAssuredAddressLine1=getRows.AddressLine1
								sql_JointAssuredAddressLine1 = removeComma(sql_JointAssuredAddressLine1.toString())
								sql_JointAssuredAddressLine2=getRows.AddressLine2
								sql_JointAssuredAddressLine2 = removeComma(sql_JointAssuredAddressLine2.toString())
								sql_JointAssuredAddressLine3=getRows.AddressLine3
								sql_JointAssuredAddressLine3 = removeComma(sql_JointAssuredAddressLine3.toString())
								sql_JointAssuredStateOrCounty=getRows.StateOrCounty
								sql_JointAssuredStateOrCounty = removeComma(sql_JointAssuredStateOrCounty.toString())
								sql_JointAssuredCity=getRows.City
								sql_JointAssuredCity = removeComma(sql_JointAssuredCity.toString())
								sql_JointAssuredCountry=getRows.Country
								sql_JointAssuredCountry = removeComma(sql_JointAssuredCountry.toString())
								sql_JointAssuredPostCode=getRows.PostCode
								sql_JointAssuredPostCode = removeComma(sql_JointAssuredPostCode.toString())
								sql_JointAssuredIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_JointAssuredIsPrimaryAddress = removeComma(sql_JointAssuredIsPrimaryAddress.toString())
								//log.info "JointAssured Address is received as ==> "+sql_JointAssuredAddressTypeName+","+sql_JointAssuredAddressTypeId+","+sql_JointAssuredTradingCertificateId+","+sql_JointAssuredRiskReference+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressName+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress	
							}
						
							String getBranchAddressSQL =
							"""
							declare
							@tradCertId as int = """+sql_TradingCertificateId+"""
							select 
							TC.Type_Id, RT.Name,
							RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
							ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
							ASN.PrimaryAddress,
							case when ASN.PrimaryAddress=0 then 'FALSE' when ASN.PrimaryAddress=1 then 'TRUE' end as IsPrimaryAddress
							from TradingCertificate TC
							inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
							inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
							inner join ref_Type RT on RT.Id = TC.Type_Id
							where ASN.IsDeleted=0 and RAT.Name ='BRANCH'
							and TC.Id=@tradCertId
							union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
							"""
							con.eachRow(getBranchAddressSQL)
							{
								getRows->
								sql_BranchAddressId=getRows.AddressId
								sql_BranchAddressId = removeComma(sql_BranchAddressId.toString())
								sql_BranchAddressName=getRows.AddressName
								sql_BranchAddressName = removeComma(sql_BranchAddressName.toString())
								sql_BranchAddressLine1=getRows.AddressLine1
								sql_BranchAddressLine1 = removeComma(sql_BranchAddressLine1.toString())
								sql_BranchAddressLine2=getRows.AddressLine2
								sql_BranchAddressLine2 = removeComma(sql_BranchAddressLine2.toString())
								sql_BranchAddressLine3=getRows.AddressLine3
								sql_BranchAddressLine3 = removeComma(sql_BranchAddressLine3.toString())
								sql_BranchStateOrCounty=getRows.StateOrCounty
								sql_BranchStateOrCounty = removeComma(sql_BranchStateOrCounty.toString())
								sql_BranchCity=getRows.City
								sql_BranchCity = removeComma(sql_BranchCity.toString())
								sql_BranchCountry=getRows.Country
								sql_BranchCountry = removeComma(sql_BranchCountry.toString())
								sql_BranchPostCode=getRows.PostCode
								sql_BranchPostCode = removeComma(sql_BranchPostCode.toString())
								sql_BranchIsPrimaryAddress=getRows.IsPrimaryAddress
								sql_BranchIsPrimaryAddress = removeComma(sql_BranchIsPrimaryAddress.toString())
								//log.info "Branch Address is received as ==> "+sql_BranchAddressTypeName+","+sql_BranchAddressTypeId+","+sql_BranchTradingCertificateId+","+sql_BranchRiskReference+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressName+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress	
							}
			
							log.info "SQL Response is received as =>"+sqlTCPKId_TCId+","+sql_TCPackId+","+sql_CreatedByUserEmailAddress+","+sql_CreatedDateTime+","+sql_TradingCertificateId+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressLine3+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressLine3+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressLine3+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressLine3+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressLine3+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressLine3+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress+","+sql_BranchCode+","+sql_TradingCertificatePack_Id
							arrCellVal=[sqlTCPKId_TCId,sql_TCPackId,sql_CreatedByUserEmailAddress,sql_CreatedDateTime,sql_TradingCertificateId,sql_AddressType_Id,sql_SourceSystem,sql_Reference,sql_CurrentStatus,sql_StorageId,sql_RiskId,sql_PolicyId,sql_MemberPartyId,sql_OwnerPartyId,sql_BrokerPartyId,sql_IsRenewal,sql_IsYacht,sql_Version,sql_RiskReference,sql_PolicyReference,sql_MemberReference,sql_MemberType,sql_MemberName,sql_JointAssuredName,sql_OwnerReference,sql_OwnerName,sql_OwnerDomicile,sql_OwnerEmailAddress,sql_BrokerReference,sql_BrokerName,sql_BrokerEmailAddress,sql_PolicyYear,sql_CertificateIssueDate,sql_EmailAddress,sql_CcEmailAddress,sql_EffectiveStartDate,sql_EffectiveEndDate,sql_PassengerCapacity,sql_PolicyStartDate,sql_PolicyEndDate,sql_CurrencyCode,sql_CoverLimitAmount,sql_SignatoryState_Id,sql_VesselName,sql_VesselType,sql_VesselTypeName,sql_vesselEnteredDate,sql_vesselFlag,sql_imoNumber,sql_distinctiveNumbersOrLetters,sql_grossTonnage,sql_yearBuilt,sql_engineHorsePower,sql_TradeMark,sql_model,sql_engineNo,sql_NominatedStateFlag,sql_NominatedStateFlagName,sql_portOfRegistry,sql_TenderReferenceList,sql_TenderOutboardReferenceList,sql_TradingCertificateTypeId,sql_TradingCertificateGroupId,sql_TradingCertificateGroupName,sql_TradingCertificateGroupCode,sql_TradingCertificateTypeCode,sql_TradingCertificateTypeName,sql_BranchCode,sql_TradingCertificatePack_Id,sql_StateAddressId,sql_StateAddressName,sql_StateAddressLine1,sql_StateAddressLine2,sql_StateAddressLine3,sql_StateStateOrCounty,sql_StateCity,sql_StateCountry,sql_StatePostCode,sql_StateIsPrimaryAddress,sql_OwnerAddressId,sql_OwnerAddressName,sql_OwnerAddressLine1,sql_OwnerAddressLine2,sql_OwnerAddressLine3,sql_OwnerStateOrCounty,sql_OwnerCity,sql_OwnerCountry,sql_OwnerPostCode,sql_OwnerIsPrimaryAddress,sql_BrokerAddressId,sql_BrokerAddressName,sql_BrokerAddressLine1,sql_BrokerAddressLine2,sql_BrokerAddressLine3,sql_BrokerStateOrCounty,sql_BrokerCity,sql_BrokerCountry,sql_BrokerPostCode,sql_BrokerIsPrimaryAddress,sql_MemberAddressId,sql_MemberAddressName,sql_MemberAddressLine1,sql_MemberAddressLine2,sql_MemberAddressLine3,sql_MemberStateOrCounty,sql_MemberCity,sql_MemberCountry,sql_MemberPostCode,sql_MemberIsPrimaryAddress,sql_JointAssuredAddressId,sql_JointAssuredAddressName,sql_JointAssuredAddressLine1,sql_JointAssuredAddressLine2,sql_JointAssuredAddressLine3,sql_JointAssuredStateOrCounty,sql_JointAssuredCity,sql_JointAssuredCountry,sql_JointAssuredPostCode,sql_JointAssuredIsPrimaryAddress,sql_BranchAddressId,sql_BranchAddressName,sql_BranchAddressLine1,sql_BranchAddressLine2,sql_BranchAddressLine3,sql_BranchStateOrCounty,sql_BranchCity,sql_BranchCountry,sql_BranchPostCode,sql_BranchIsPrimaryAddress];
							RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
							db_size++
							counter++

							try
							{
								RT.saveExcelFile(summary_File,O_Summary)
							}
							catch(Exception e) 
							{
								log.info e.toString();
							}
					}//sql end
				//}
			//}
			
			totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start
			oldPackId=null

			con.eachRow(sqlstmt)
			{
				getRow->
				sql_TCPackId=getRow.TradingCertificatePack_Id
				sql_TradingCertificateId=getRow.TradingCertificateId
				
				if(oldPackId!=sql_TCPackId.toString())	
				{
					log.info "Getting api values for Trading Certificate Pack Id =>"+sql_TCPackId
					testRunner.testCase.setPropertyValue("tradingCertificatePackID",sql_TCPackId.toString())
					testRunner.testCase.setPropertyValue('token',token)
						
					//API
					testRunner.runTestStepByName('POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument')
					String req='${POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		
					arrCellVal=['API DATA']
					RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
					RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
					//log.info "Original API response is =>"+response
					log.info "HTTP Status code received as =>"+httpStatusCode
					
					if(httpStatusCode.toString().equals("200"))
					{
						def json=jsonSlurper.parseText(response)	
						size=json.tradingCertificates.id.size()

						//for (int i=0; i<json.tradingCertificates.size(); i++)
						//{
							for (int i=0; i<size; i++)
							{
								api_PackId= json.id
								api_CreatedByUserEmailAddress= json.createdByUserEmailAddress
								api_CreatedDateTime= json.createdDateTime
								api_tradingCertificateId=  json.tradingCertificates.id[i]
								log.info "api_tradingCertificateId=>>"+api_tradingCertificateId
								String api_TcPkId_TCId=api_PackId.toString()+"_"+api_tradingCertificateId.toString()
								api_addressTypeId =  json.tradingCertificates.addressTypeId[i]
								api_sourceSystem =  json.tradingCertificates.sourceSystem[i]
								api_sourceSystem= removeComma(api_sourceSystem.toString())
								api_reference =  json.tradingCertificates.reference[i]
								api_reference= removeComma(api_reference.toString())
								api_currentStatus =  json.tradingCertificates.currentStatus[i]
								api_currentStatus= removeComma(api_currentStatus.toString())
								api_storageId =  json.tradingCertificates.storageId[i]
								api_riskId =  json.tradingCertificates.riskId[i]
								api_policyId =  json.tradingCertificates.policyId[i]
								api_memberPartyId =  json.tradingCertificates.memberPartyId[i]
								api_ownerPartyId =  json.tradingCertificates.ownerPartyId[i]
								api_brokerPartyId =  json.tradingCertificates.brokerPartyId[i]
								api_isRenewal =  json.tradingCertificates.isRenewal[i]
								api_isRenewal= removeComma(api_isRenewal.toString())
								api_isYacht =  json.tradingCertificates.isYacht[i]
								api_isYacht= removeComma(api_isYacht.toString())
								api_version =  json.tradingCertificates.version[i]
								api_riskReference =  json.tradingCertificates.riskReference[i]
								api_policyReference =  json.tradingCertificates.policyReference[i]
								api_memberReference =  json.tradingCertificates.memberReference[i]
								api_memberType =  json.tradingCertificates.memberType[i]
								api_memberName =  json.tradingCertificates.memberName[i]
								api_memberName=  removeComma(api_memberName.toString())
								api_jointAssuredName =  json.tradingCertificates.jointAssuredName[i]
								api_jointAssuredName=  removeComma(api_jointAssuredName.toString())
								api_ownerReference =  json.tradingCertificates.ownerReference[i]
								api_ownerName =  json.tradingCertificates.ownerName[i]
								api_ownerName=  removeComma(api_ownerName.toString())
								api_ownerDomicile =  json.tradingCertificates.ownerDomicile[i]
								api_ownerEmailAddress =  json.tradingCertificates.ownerEmailAddress[i]
								api_brokerReference =  json.tradingCertificates.brokerReference[i]
								api_brokerName =  json.tradingCertificates.brokerName[i]
								api_brokerName=  removeComma(api_brokerName.toString())
								api_brokerEmailAddress =  json.tradingCertificates.brokerEmailAddress[i]
								api_policyYear =  json.tradingCertificates.policyYear[i]
								api_certificateIssueDate =  json.tradingCertificates.certificateIssueDate[i]
								if(api_certificateIssueDate!=null)
								{
									api_certificateIssueDate=getDate(api_certificateIssueDate.toString())
									api_certificateIssueDate=removeComma(api_certificateIssueDate.toString())
								}
								else 
									api_certificateIssueDate="NULL"
								api_emailAddress =  json.tradingCertificates.emailAddress[i]
								api_ccEmailAddress =  json.tradingCertificates.ccEmailAddress[i]
								api_effectiveStartDate =  json.tradingCertificates.effectiveStartDate[i]
								if(api_effectiveStartDate!=null)
								{
									api_effectiveStartDate=getDate(api_effectiveStartDate.toString())
									api_effectiveStartDate=removeComma(api_effectiveStartDate.toString())
								}
								else 
									api_effectiveStartDate="NULL"
								api_effectiveEndDate=  json.tradingCertificates.effectiveEndDate[i]
								if(api_effectiveEndDate!=null)
								{
									api_effectiveEndDate=getDate(api_effectiveEndDate.toString())
									api_effectiveEndDate=removeComma(api_effectiveEndDate.toString())
								}
								else 
									api_effectiveEndDate="NULL"
								api_passengerCapacity =  json.tradingCertificates.passengerCapacity[i]
								api_policyStartDate =  json.tradingCertificates.policyStartDate[i]
								if(api_policyStartDate!=null)
								{
									api_policyStartDate=getDate(api_policyStartDate.toString())
									api_policyStartDate=removeComma(api_policyStartDate.toString())
								}
								else 
									api_policyStartDate="NULL"
								api_policyEndDate =  json.tradingCertificates.policyEndDate[i]
								if(api_policyEndDate!=null)
								{
									api_policyEndDate=getDate(api_policyEndDate.toString())
									api_policyEndDate=removeComma(api_policyEndDate.toString())
								}
								else 
									api_policyEndDate="NULL"
								api_currencyCode =  json.tradingCertificates.currencyCode[i]
								api_currencyCode= removeComma(api_currencyCode.toString())
								api_coverLimitAmount =  json.tradingCertificates.coverLimitAmount[i]
								api_coverLimitAmount =  removeDotFromCurrency(api_coverLimitAmount.toString())
								api_coverLimitAmount= removeComma(api_coverLimitAmount.toString())
								api_signatoryStateId =  json.tradingCertificates.signatoryStateId[i]
								api_vesselName =  json.tradingCertificates.vesselName[i]
								api_vesselName=  removeComma(api_vesselName.toString())
								api_vesselType =  json.tradingCertificates.vesselType[i]
								api_vesselType= removeComma(api_vesselType.toString())
								api_vesselTypeName =  json.tradingCertificates.vesselTypeName[i]
								api_vesselTypeName= removeComma(api_vesselTypeName.toString())
								api_vesselEnteredDate =  json.tradingCertificates.vesselEnteredDate[i]
								if(api_vesselEnteredDate!=null)
								{
									api_vesselEnteredDate=getDate(api_vesselEnteredDate.toString())
									api_vesselEnteredDate=removeComma(api_vesselEnteredDate.toString())
								}
								else 
									api_vesselEnteredDate="NULL"
								api_vesselFlag =  json.tradingCertificates.vesselFlag[i]
								api_vesselFlag= removeComma(api_vesselFlag.toString())
								api_imoNumber =  json.tradingCertificates.imoNumber[i]
								api_distinctiveNumbersOrLetters =  json.tradingCertificates.distinctiveNumbersOrLetters[i]
								api_distinctiveNumbersOrLetters= removeComma(api_distinctiveNumbersOrLetters.toString())
								api_grossTonnage =  json.tradingCertificates.grossTonnage[i]
								api_yearBuilt =  json.tradingCertificates.yearBuilt[i]
								api_engineHorsePower =  json.tradingCertificates.engineHorsePower[i]
								api_trademarkAndEngineModel =  json.tradingCertificates.trademarkAndEngineModel[i]
								api_model =  json.tradingCertificates.model[i]
								api_engineNo =  json.tradingCertificates.engineNo[i]
								api_nominatedFlagState =  json.tradingCertificates.nominatedFlagState[i]
								api_nominatedFlagState= removeComma(api_nominatedFlagState.toString())
								api_nominatedFlagStateName =  json.tradingCertificates.nominatedFlagStateName[i]
								api_nominatedFlagStateName =  removeComma(api_nominatedFlagStateName.toString())
								api_portOfRegistry =  json.tradingCertificates.portOfRegistry[i]
								api_portOfRegistry =  removeComma(api_portOfRegistry.toString())
								api_tenderReferenceList =  json.tradingCertificates.tenderReferenceList[i]
								api_tenderOutboardReferenceList =  json.tradingCertificates.tenderOutboardReferenceList[i]
								api_tradingCertificateTypeId =  json.tradingCertificates.tradingCertificateType.id[i]
								api_tradingCertificateGroupId =  json.tradingCertificates.tradingCertificateType.tradingCertificateGroup.id[i]
								api_tradingCertificateGroupName =  json.tradingCertificates.tradingCertificateType.tradingCertificateGroup.name[i]
								api_tradingCertificateGroupCode =  json.tradingCertificates.tradingCertificateType.tradingCertificateGroup.groupCode[i]
								api_tradingCertificateTypeTypeCode =  json.tradingCertificates.tradingCertificateType.typeCode[i]
								api_tradingCertificateTypeTypeName =  json.tradingCertificates.tradingCertificateType.typeName[i]
								api_branchCode= json.tradingCertificates.branchCode[i]
								api_tradingCertificatePackId= json.tradingCertificates.tradingCertificatePackId[i]
								api_tradingCertificatePackId =  removeComma(api_tradingCertificatePackId.toString())
								api_stateAddress=json.tradingCertificates.stateAddress[i]
								api_stateAddress=removeComma(api_stateAddress.toString())
								api_ownerAddress=json.tradingCertificates.ownerAddress[i]
								api_ownerAddress=removeComma(api_ownerAddress.toString())
								api_brokerAddress=json.tradingCertificates.brokerAddress[i]
								api_brokerAddress=removeComma(api_brokerAddress.toString())
								api_memberAddress=json.tradingCertificates.memberAddress[i]
								api_memberAddress=removeComma(api_memberAddress.toString())
								api_jointAssuredAddress=json.tradingCertificates.jointAssuredAddress[i]
								api_jointAssuredAddress=removeComma(api_jointAssuredAddress.toString())
								api_branchAddress=json.tradingCertificates.branchAddress[i]
								api_branchAddress=removeComma(api_branchAddress.toString())
							
								if(!api_stateAddress.toString().equals("NULL"))
								{
									api_stateAddressId= json.tradingCertificates.stateAddress[i].id
									api_stateAddressId= removeComma(api_stateAddressId.toString())
									api_stateAddressName= json.tradingCertificates.stateAddress[i].addressName
									api_stateAddressName= removeComma(api_stateAddressName.toString())
									api_stateAddressLine1= json.tradingCertificates.stateAddress[i].addressLine1
									api_stateAddressLine1= removeComma(api_stateAddressLine1.toString())
									api_stateAddressLine2= json.tradingCertificates.stateAddress[i].addressLine2
									api_stateAddressLine2= removeComma(api_stateAddressLine2.toString())
									api_stateAddressLine3= json.tradingCertificates.stateAddress[i].addressLine3
									api_stateAddressLine3= removeComma(api_stateAddressLine3.toString())
									api_stateAddressStateOrCounty= json.tradingCertificates.stateAddress[i].stateOrCounty
									api_stateAddressStateOrCounty= removeComma(api_stateAddressStateOrCounty.toString())
									api_stateAddressCity= json.tradingCertificates.stateAddress[i].city
									api_stateAddressCity= removeComma(api_stateAddressCity.toString())
									api_stateAddressCountry= json.tradingCertificates.stateAddress[i].country
									api_stateAddressCountry= removeComma(api_stateAddressCountry.toString())
									api_stateAddressPostCode= json.tradingCertificates.stateAddress[i].postCode
									api_stateAddressPostCode= removeComma(api_stateAddressPostCode.toString())
									api_stateAddressPrimaryAddress= json.tradingCertificates.stateAddress[i].primaryAddress
									api_stateAddressPrimaryAddress= removeComma(api_stateAddressPrimaryAddress.toString())
									//log.info "state Address is :"+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress
								}
								else if(api_stateAddress.toString().equals("NULL"))
								{
									api_stateAddressId= "NULL"
									api_stateAddressName= "NULL"
									api_stateAddressLine1= "NULL"
									api_stateAddressLine2= "NULL"
									api_stateAddressLine3= "NULL"
									api_stateAddressStateOrCounty= "NULL"
									api_stateAddressCity= "NULL"
									api_stateAddressCountry= "NULL"
									api_stateAddressPostCode= "NULL"
									api_stateAddressPrimaryAddress= "NULL"
								}
								if(!api_ownerAddress.toString().equals("NULL"))
								{
									api_ownerAddressId= json.tradingCertificates.ownerAddress[i].id
									api_ownerAddressId= removeComma(api_ownerAddressId.toString())
									api_ownerAddressName= json.tradingCertificates.ownerAddress[i].addressName
									api_ownerAddressName= removeComma(api_ownerAddressName.toString())
									api_ownerAddressLine1= json.tradingCertificates.ownerAddress[i].addressLine1
									api_ownerAddressLine1= removeComma(api_ownerAddressLine1.toString())
									api_ownerAddressLine2= json.tradingCertificates.ownerAddress[i].addressLine2
									api_ownerAddressLine2= removeComma(api_ownerAddressLine2.toString())
									api_ownerAddressLine3= json.tradingCertificates.ownerAddress[i].addressLine3
									api_ownerAddressLine3= removeComma(api_ownerAddressLine3.toString())
									api_ownerAddressStateOrCounty= json.tradingCertificates.ownerAddress[i].stateOrCounty
									api_ownerAddressStateOrCounty= removeComma(api_ownerAddressStateOrCounty.toString())
									api_ownerAddressCity= json.tradingCertificates.ownerAddress[i].city
									api_ownerAddressCity= removeComma(api_ownerAddressCity.toString())
									api_ownerAddressCountry= json.tradingCertificates.ownerAddress[i].country
									api_ownerAddressCountry= removeComma(api_ownerAddressCountry.toString())
									api_ownerAddressPostCode= json.tradingCertificates.ownerAddress[i].postCode
									api_ownerAddressPostCode= removeComma(api_ownerAddressPostCode.toString())
									api_ownerAddressPrimaryAddress= json.tradingCertificates.ownerAddress[i].primaryAddress
									api_ownerAddressPrimaryAddress= removeComma(api_ownerAddressPrimaryAddress.toString())
									//log.info "Owner Address is :"+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress
								}
								else if(api_ownerAddress.toString().equals("NULL"))
								{
									api_ownerAddressId= "NULL"
									api_ownerAddressName= "NULL"
									api_ownerAddressLine1= "NULL"
									api_ownerAddressLine2= "NULL"
									api_ownerAddressLine3= "NULL"
									api_ownerAddressStateOrCounty= "NULL"
									api_ownerAddressCity= "NULL"
									api_ownerAddressCountry= "NULL"
									api_ownerAddressPostCode= "NULL"
									api_ownerAddressPrimaryAddress= "NULL"
								}
								if(!api_brokerAddress.toString().equals("NULL"))
								{
									api_brokerAddressId= json.tradingCertificates.brokerAddress[i].id
									api_brokerAddressId= removeComma(api_brokerAddressId.toString())
									api_brokerAddressName= json.tradingCertificates.brokerAddress[i].addressName
									api_brokerAddressName= removeComma(api_brokerAddressName.toString())
									api_brokerAddressLine1= json.tradingCertificates.brokerAddress[i].addressLine1
									api_brokerAddressLine1= removeComma(api_brokerAddressLine1.toString())
									api_brokerAddressLine2= json.tradingCertificates.brokerAddress[i].addressLine2
									api_brokerAddressLine2= removeComma(api_brokerAddressLine2.toString())
									api_brokerAddressLine3= json.tradingCertificates.brokerAddress[i].addressLine3
									api_brokerAddressLine3= removeComma(api_brokerAddressLine3.toString())
									api_brokerAddressStateOrCounty= json.tradingCertificates.brokerAddress[i].stateOrCounty
									api_brokerAddressStateOrCounty= removeComma(api_brokerAddressStateOrCounty.toString())
									api_brokerAddressCity= json.tradingCertificates.brokerAddress[i].city
									api_brokerAddressCity= removeComma(api_brokerAddressCity.toString())
									api_brokerAddressCountry= json.tradingCertificates.brokerAddress[i].country
									api_brokerAddressCountry= removeComma(api_brokerAddressCountry.toString())
									api_brokerAddressPostCode= json.tradingCertificates.brokerAddress[i].postCode
									api_brokerAddressPostCode= removeComma(api_brokerAddressPostCode.toString())
									api_brokerAddressPrimaryAddress= json.tradingCertificates.brokerAddress[i].primaryAddress
									api_brokerAddressPrimaryAddress= removeComma(api_brokerAddressPrimaryAddress.toString())
									//log.info "Broker Address is :"+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress
								}
								else if(api_brokerAddress.toString().equals("NULL"))
								{
									api_brokerAddressId= "NULL"
									api_brokerAddressName= "NULL"
									api_brokerAddressLine1= "NULL"
									api_brokerAddressLine2= "NULL"
									api_brokerAddressLine3= "NULL"
									api_brokerAddressStateOrCounty= "NULL"
									api_brokerAddressCity= "NULL"
									api_brokerAddressCountry= "NULL"
									api_brokerAddressPostCode= "NULL"
									api_brokerAddressPrimaryAddress= "NULL"
								}
							
								if(!api_memberAddress.toString().equals("NULL"))
								{
									api_memberAddressId= json.tradingCertificates.memberAddress[i].id
									api_memberAddressId= removeComma(api_memberAddressId.toString())
									api_memberAddressName= json.tradingCertificates.memberAddress[i].addressName
									api_memberAddressName= removeComma(api_memberAddressName.toString())
									api_memberAddressLine1= json.tradingCertificates.memberAddress[i].addressLine1
									api_memberAddressLine1= removeComma(api_memberAddressLine1.toString())
									api_memberAddressLine2= json.tradingCertificates.memberAddress[i].addressLine2
									api_memberAddressLine2= removeComma(api_memberAddressLine2.toString())
									api_memberAddressLine3= json.tradingCertificates.memberAddress[i].addressLine3
									api_memberAddressLine3= removeComma(api_memberAddressLine3.toString())
									api_memberAddressStateOrCounty= json.tradingCertificates.memberAddress[i].stateOrCounty
									api_memberAddressStateOrCounty= removeComma(api_memberAddressStateOrCounty.toString())
									api_memberAddressCity= json.tradingCertificates.memberAddress[i].city
									api_memberAddressCity= removeComma(api_memberAddressCity.toString())
									api_memberAddressCountry= json.tradingCertificates.memberAddress[i].country
									api_memberAddressCountry= removeComma(api_memberAddressCountry.toString())
									api_memberAddressPostCode= json.tradingCertificates.memberAddress[i].postCode
									api_memberAddressPostCode= removeComma(api_memberAddressPostCode.toString())
									api_memberAddressPrimaryAddress= json.tradingCertificates.memberAddress[i].primaryAddress
									api_memberAddressPrimaryAddress= removeComma(api_memberAddressPrimaryAddress.toString())
									//log.info "Member Address is :"+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress
								}
								else if(api_memberAddress.toString().equals("NULL"))
								{
									api_memberAddressId= "NULL"
									api_memberAddressName= "NULL"
									api_memberAddressLine1= "NULL"
									api_memberAddressLine2= "NULL"
									api_memberAddressLine3= "NULL"
									api_memberAddressStateOrCounty="NULL"
									api_memberAddressCity= "NULL"
									api_memberAddressCountry= "NULL"
									api_memberAddressPostCode= "NULL"
									api_memberAddressPrimaryAddress= "NULL"
								}
								if(!api_jointAssuredAddress.toString().equals("NULL"))
								{
									api_jointAssuredAddressId= json.tradingCertificates.jointAssuredAddress[i].id
									api_jointAssuredAddressId= removeComma(api_jointAssuredAddressId.toString())
									api_jointAssuredAddressName= json.tradingCertificates.jointAssuredAddress[i].addressName
									api_jointAssuredAddressName= removeComma(api_jointAssuredAddressName.toString())
									api_jointAssuredAddressLine1= json.tradingCertificates.jointAssuredAddress[i].addressLine1
									api_jointAssuredAddressLine1= removeComma(api_jointAssuredAddressLine1.toString())
									api_jointAssuredAddressLine2= json.tradingCertificates.jointAssuredAddress[i].addressLine2
									api_jointAssuredAddressLine2= removeComma(api_jointAssuredAddressLine2.toString())
									api_jointAssuredAddressLine3= json.tradingCertificates.jointAssuredAddress[i].addressLine3
									api_jointAssuredAddressLine3= removeComma(api_jointAssuredAddressLine3.toString())
									api_jointAssuredAddressStateOrCounty= json.tradingCertificates.jointAssuredAddress[i].stateOrCounty
									api_jointAssuredAddressStateOrCounty= removeComma(api_jointAssuredAddressStateOrCounty.toString())
									api_jointAssuredAddressCity= json.tradingCertificates.jointAssuredAddress[i].city
									api_jointAssuredAddressCity= removeComma(api_jointAssuredAddressCity.toString())
									api_jointAssuredAddressCountry= json.tradingCertificates.jointAssuredAddress[i].country
									api_jointAssuredAddressCountry= removeComma(api_jointAssuredAddressCountry.toString())
									api_jointAssuredAddressPostCode= json.tradingCertificates.jointAssuredAddress[i].postCode
									api_jointAssuredAddressPostCode= removeComma(api_jointAssuredAddressPostCode.toString())
									api_jointAssuredAddressPrimaryAddress= json.tradingCertificates.jointAssuredAddress[i].primaryAddress
									api_jointAssuredAddressPrimaryAddress= removeComma(api_jointAssuredAddressPrimaryAddress.toString())
									//log.info "Joint Assured Address is :"+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress
								}
								else if(api_jointAssuredAddress.toString().equals("NULL"))
								{
									api_jointAssuredAddressId= "NULL"
									api_jointAssuredAddressName= "NULL"
									api_jointAssuredAddressLine1= "NULL"
									api_jointAssuredAddressLine2= "NULL"
									api_jointAssuredAddressLine3= "NULL"
									api_jointAssuredAddressStateOrCounty= "NULL"
									api_jointAssuredAddressCity= "NULL"
									api_jointAssuredAddressCountry= "NULL"
									api_jointAssuredAddressPostCode= "NULL"
									api_jointAssuredAddressPrimaryAddress= "NULL"
								}
								if(!api_branchAddress.toString().equals("NULL"))
								{
									api_branchAddressId= json.tradingCertificates.branchAddress[i].id
									api_branchAddressId= removeComma(api_branchAddressId.toString())
									api_branchAddressName= json.tradingCertificates.branchAddress[i].addressName
									api_branchAddressName= removeComma(api_branchAddressName.toString())
									api_branchAddressLine1= json.tradingCertificates.branchAddress[i].addressLine1
									api_branchAddressLine1= removeComma(api_branchAddressLine1.toString())
									api_branchAddressLine2= json.tradingCertificates.branchAddress[i].addressLine2
									api_branchAddressLine2= removeComma(api_branchAddressLine2.toString())
									api_branchAddressLine3= json.tradingCertificates.branchAddress[i].addressLine3
									api_branchAddressLine3= removeComma(api_branchAddressLine3.toString())
									api_branchAddressStateOrCounty= json.tradingCertificates.branchAddress[i].stateOrCounty
									api_branchAddressStateOrCounty= removeComma(api_branchAddressStateOrCounty.toString())
									api_branchAddressCity= json.tradingCertificates.branchAddress[i].city
									api_branchAddressCity= removeComma(api_branchAddressCity.toString())
									api_branchAddressCountry= json.tradingCertificates.branchAddress[i].country
									api_branchAddressCountry= removeComma(api_branchAddressCountry.toString())
									api_branchAddressPostCode= json.tradingCertificates.branchAddress[i].postCode
									api_branchAddressPostCode= removeComma(api_branchAddressPostCode.toString())
									api_branchAddressPrimaryAddress= json.tradingCertificates.branchAddress[i].primaryAddress
									api_branchAddressPrimaryAddress= removeComma(api_branchAddressPrimaryAddress.toString())
									//log.info "Branch Address is :"+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress						
								}
								else if(api_branchAddress.toString().equals("NULL"))
								{
									api_branchAddressId= "NULL"
									api_branchAddressName= "NULL"
									api_branchAddressLine1= "NULL"
									api_branchAddressLine2= "NULL"
									api_branchAddressLine3= "NULL"
									api_branchAddressStateOrCounty= "NULL"
									api_branchAddressCity= "NULL"
									api_branchAddressCountry= "NULL"
									api_branchAddressPostCode= "NULL"
									api_branchAddressPrimaryAddress= "NULL"
								}
							log.info "API Response is received as =>"+api_TcPkId_TCId+","+api_PackId+","+api_CreatedByUserEmailAddress+","+api_CreatedDateTime+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName+","+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress+","+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress+","+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress+","+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress+","+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress+","+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress+","+api_branchCode+","+api_tradingCertificatePackId
							arrCellVal=[api_TcPkId_TCId, api_PackId, api_CreatedByUserEmailAddress, api_CreatedDateTime, api_tradingCertificateId, api_addressTypeId ,api_sourceSystem ,api_reference ,api_currentStatus ,api_storageId ,api_riskId ,api_policyId ,api_memberPartyId ,api_ownerPartyId ,api_brokerPartyId ,api_isRenewal ,api_isYacht ,api_version ,api_riskReference ,api_policyReference ,api_memberReference ,api_memberType ,api_memberName ,api_jointAssuredName ,api_ownerReference ,api_ownerName ,api_ownerDomicile ,api_ownerEmailAddress ,api_brokerReference ,api_brokerName ,api_brokerEmailAddress ,api_policyYear ,api_certificateIssueDate ,api_emailAddress ,api_ccEmailAddress ,api_effectiveStartDate ,api_effectiveEndDate ,api_passengerCapacity ,api_policyStartDate ,api_policyEndDate ,api_currencyCode ,api_coverLimitAmount ,api_signatoryStateId ,api_vesselName ,api_vesselType ,api_vesselTypeName ,api_vesselEnteredDate ,api_vesselFlag ,api_imoNumber ,api_distinctiveNumbersOrLetters ,api_grossTonnage ,api_yearBuilt ,api_engineHorsePower ,api_trademarkAndEngineModel ,api_model ,api_engineNo ,api_nominatedFlagState ,api_nominatedFlagStateName ,api_portOfRegistry ,api_tenderReferenceList ,api_tenderOutboardReferenceList ,api_tradingCertificateTypeId ,api_tradingCertificateGroupId ,api_tradingCertificateGroupName ,api_tradingCertificateGroupCode ,api_tradingCertificateTypeTypeCode ,api_tradingCertificateTypeTypeName ,api_branchCode,api_tradingCertificatePackId,api_stateAddressId,api_stateAddressName,api_stateAddressLine1,api_stateAddressLine2,api_stateAddressLine3,api_stateAddressStateOrCounty,api_stateAddressCity,api_stateAddressCountry,api_stateAddressPostCode,api_stateAddressPrimaryAddress,api_ownerAddressId,api_ownerAddressName,api_ownerAddressLine1,api_ownerAddressLine2,api_ownerAddressLine3,api_ownerAddressStateOrCounty,api_ownerAddressCity,api_ownerAddressCountry,api_ownerAddressPostCode,api_ownerAddressPrimaryAddress,api_brokerAddressId,api_brokerAddressName,api_brokerAddressLine1,api_brokerAddressLine2,api_brokerAddressLine3,api_brokerAddressStateOrCounty,api_brokerAddressCity,api_brokerAddressCountry,api_brokerAddressPostCode,api_brokerAddressPrimaryAddress,api_memberAddressId,api_memberAddressName,api_memberAddressLine1,api_memberAddressLine2,api_memberAddressLine3,api_memberAddressStateOrCounty,api_memberAddressCity,api_memberAddressCountry,api_memberAddressPostCode,api_memberAddressPrimaryAddress,api_jointAssuredAddressId,api_jointAssuredAddressName,api_jointAssuredAddressLine1,api_jointAssuredAddressLine2,api_jointAssuredAddressLine3,api_jointAssuredAddressStateOrCounty,api_jointAssuredAddressCity,api_jointAssuredAddressCountry,api_jointAssuredAddressPostCode,api_jointAssuredAddressPrimaryAddress,api_branchAddressId,api_branchAddressName,api_branchAddressLine1,api_branchAddressLine2,api_branchAddressLine3,api_branchAddressStateOrCounty,api_branchAddressCity,api_branchAddressCountry,api_branchAddressPostCode,api_branchAddressPrimaryAddress];
							RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
							
							total_size++
							counter++
							}
						try
						{
							RT.saveExcelFile(summary_File,O_Summary)
						}
						catch(Exception e)
						{
						  log.info e.getMessage();	
						}
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
					oldPackId=sql_TCPackId.toString()
				}
			}
			con.close()	

				//DB compare with API
				int db_startCol=0
				counter=row_start;
				totalColumns = source.getRow(1).getLastCellNum();
				int api_endCol=totalColumns-1
				dsc='Compares API data for Generated Draft document details of Trading Certificate Packs with UTOM Database data'
				tcid=tcModuleName.toString()
				RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
				
		}//inner if end
	}//outer if end
}//outer for end
public String  removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field==null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
		field="NULL"
	}
		
	
	if(field!=null)
		field=field.toUpperCase()
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}
public String getDate(String field)
{
	if(field!=null && field.length()==21)
		field = field.substring(0, field.length() - 2);
	
	if(field==null)
			field="NULL"
	else if(field=="" || field==" " || field==null)	
			field="NULL"
	return field
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>tradingCertificatePackID</con:name><con:value>76</con:value></con:property></con:properties></con:testCase><con:testCase id="7995ea9f-47cb-4903-9062-13438c07bdab" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_TradingcertificatePacks" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Post_TradingcertificatePacks" id="7d3810e8-d191-43e4-a73a-3b927595e770"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificatePacks" methodName="Post_TradingcertificatePacks" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post_TradingcertificatePacks" id="ef0a3539-ce3f-427e-8ca8-5ffc00ee9bc1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>{
	"createdByUserEmailAddress": "Test@testmail.com",
	"tradingCertificates": [
	]
}</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Post_TradingcertificatePack" id="043902bb-acab-423d-ba26-e3d31d38c9ea" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper  
import groovy.json.*
import groovy.sql.Sql
import java.io.File 
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST Method for Trading Certificate Packs************"

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_POSTMethodForTradingCertificatePacks.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_POSTMethodForTradingCertificatePacks.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POST_POSTMethodForTradingCertificatePacks.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_POSTMethodForTradingCertificatePacks"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_POSTMethodForTradingCertificatePacks"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POST_Response_POSTMethodForTradingCertificatePacks"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificatePackId"+","+"SQL_TCPackCreatedByUserEmail"+","+"SQL_TCPackCreatedDateTime"+","+"SQL_IsDeleted"+","+"SQL_UserPrincipalNameLastModifiedBy")
apiWriter.println("API_TradingCertificatePackId"+","+"API_TCPackCreatedByUserEmail"+","+"API_TCPackCreatedDateTime"+","+"API_TradingCertificates")
compareWriter.println("SQL_TradingCertificatePackId"+","+"API_TCPackId"+","+"SQL_TCPackCreatedByUserEmail"+","+"API_TCPackCreatedByUserEmailAddress"+","+"SQL_TCPackCreatedDateTime"+","+"API_TCPackCreatedDateTime"+","+"API_TCPackTradingCertificates"+","+"SQL_IsDeleted"+","+"SQL_UserPrincipalNameLastModifiedBy"+","+"Test Case Status")


for (int i=0; i&lt;5; i++)
{
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('Post_TradingcertificatePacks')
	String req='${Post_TradingcertificatePacks#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	
	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["Post_TradingcertificatePacks"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 
	//log.info ("HTTP status : " + httpStatus) 

	if(httpStatusCode.toString().equals("200"))
	{
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)
	
		api_TCPackId=jsonRes.id
		api_TCPackCreatedByUserEmailAddress=jsonRes.createdByUserEmailAddress
		api_TCPackCreatedDateTime=jsonRes.createdDateTime
		api_TCPackCreatedDateTime=api_TCPackCreatedDateTime.toString().replace("T"," ")
		api_TCPackCreatedDateTime=api_TCPackCreatedDateTime.toString().substring(0, 19)
		log.info "API="+api_TCPackCreatedDateTime
		api_TCPackTradingCertificates=jsonRes.tradingCertificates
	
		apiWriter.println(api_TCPackId+","+api_TCPackCreatedByUserEmailAddress+","+api_TCPackCreatedDateTime+","+api_TCPackTradingCertificates)
		log.info "API response is received as "+api_TCPackId+","+api_TCPackCreatedByUserEmailAddress+","+api_TCPackCreatedDateTime+","+api_TCPackTradingCertificates
	
		int TCPackId=api_TCPackId.toInteger()
		
		String sqlstmt=
		"""
		USE tradingcertificate 
		select * 
		from TradingCertificatePack 
		where Id="""+TCPackId+"""
		"""
		con.eachRow(sqlstmt)
		{
			row->
				sql_TradingCertificatePackId=row.Id
				sql_TCPackCreatedByUserEmail=row.CreatedByUserEmailAddress
				sql_TCPackCreatedDateTime=row.CreatedDateTime
				sql_TCPackCreatedDateTime=sql_TCPackCreatedDateTime.toString().substring(0, 19)
				log.info "SQL="+sql_TCPackCreatedDateTime
				sql_IsDeleted=row.IsDeleted
				sql_UserPrincipalNameLastModifiedBy=row.UserPrincipalName_LastModifiedBy
		
			log.info "SQL Response is received as "+sql_TradingCertificatePackId+","+sql_TCPackCreatedByUserEmail+","+sql_TCPackCreatedDateTime+","+sql_IsDeleted+","+sql_UserPrincipalNameLastModifiedBy
			sqlWriter.println(sql_TradingCertificatePackId+","+sql_TCPackCreatedByUserEmail+","+sql_TCPackCreatedDateTime+","+sql_IsDeleted+","+sql_UserPrincipalNameLastModifiedBy)
		}
		if(	sql_TradingCertificatePackId.toString().equals(api_TCPackId.toString()) &amp;&amp;
			sql_TCPackCreatedByUserEmail.toString().equals(api_TCPackCreatedByUserEmailAddress.toString()) &amp;&amp; 
			sql_TCPackCreatedDateTime.toString().equals(api_TCPackCreatedDateTime.toString())
		)	
		{
			compareWriter.println(sql_TradingCertificatePackId+","+api_TCPackId+","+sql_TCPackCreatedByUserEmail+","+api_TCPackCreatedByUserEmailAddress+","+sql_TCPackCreatedDateTime+","+api_TCPackCreatedDateTime+","+api_TCPackTradingCertificates+","+sql_IsDeleted+","+sql_UserPrincipalNameLastModifiedBy+","+"Test Case Passed")
			log.info "Details are matching hence test case is passed=>"+sql_TradingCertificatePackId+","+api_TCPackId+","+sql_TCPackCreatedByUserEmail+","+api_TCPackCreatedByUserEmailAddress+","+sql_TCPackCreatedDateTime+","+api_TCPackCreatedDateTime
		}
		else
		{
			compareWriter.println(sql_TradingCertificatePackId+","+api_TCPackId+","+sql_TCPackCreatedByUserEmail+","+api_TCPackCreatedByUserEmailAddress+","+sql_TCPackCreatedDateTime+","+api_TCPackCreatedDateTime+","+api_TCPackTradingCertificates+","+sql_IsDeleted+","+sql_UserPrincipalNameLastModifiedBy+","+"Test Case Failed")
			log.info "Details are not matching hence test case is failed=>"+sql_TradingCertificatePackId+","+api_TCPackId+","+sql_TCPackCreatedByUserEmail+","+api_TCPackCreatedByUserEmailAddress+","+sql_TCPackCreatedDateTime+","+api_TCPackCreatedDateTime
		}	
	}
	else if(httpStatusCode.toString().equals("401"))
	{
		apiWriter.println("API response status code is received as =>"+httpStatusCode+" so because invalid token is provided and error is received as =>"+httpStatus)
		compareWriter.println("API response status code is received as =>"+httpStatusCode+" so because invalid token is provided and error is received as =>"+httpStatus)
		log.info "API response status code is received as =>"+httpStatusCode+" so because invalid token is provided and error is received as =>"+httpStatus
	}
	else
	{
		log.info "Something wrong has happened, need to check the error"
		apiWriter.println("Something wrong has happened, need to check the error")
		compareWriter.println("Something wrong has happened, need to check the error")
	}
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for POST Method for Trading Certificate Packs***********"</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="62e02c9e-da00-4923-afa1-f08fae619504"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_POST_TradingcertificatePacks"))
		tcModuleName="POST_TCPack"
	
	if(tcModuleName.toString().equals("POST_TCPack"))
	{
		log.info "Test Execution started for Creating new Trading Certificates Packs"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["TradingCertificatePackId","CreatedByUserEmailAddress","createdDateTime","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			def tcIdForGetDetails;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			arrCellVal=['API data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)

			int numberOfPackToBeCreated = 10;

			ArrayList<String> packList = new ArrayList<>();
			for(int i=0; i<numberOfPackToBeCreated ; i++)
			{	
				def arrData;
				def newRequest = 
				"""
				{
					"createdByUserEmailAddress": "suraj.khole@adrosonic.com",
					"tradingCertificates": []
				}
				"""
				//Run the test step to get response
				testRunner.testCase.testSteps["Post_TradingcertificatePacks"].setPropertyValue( "Request", newRequest)
				testRunner.runTestStepByName('Post_TradingcertificatePacks')
				String req='${Post_TradingcertificatePacks#Response}'
				response=context.expand(req)
				log.info "Original API response is =>"+response
				jsonSlurper=new JsonSlurper() 
				jsonRes=jsonSlurper.parseText(response)
				
				//Check the Status code of API response
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				def httpResponseHeaders = context.testCase.testSteps["Post_TradingcertificatePacks"].testRequest.response.responseHeaders
				def httpStatus = httpResponseHeaders["#status#"]
				def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				log.info "HTTP Status code is =>"+httpStatusCode
				if(httpStatusCode.equals("200"))
				{
					def json=jsonSlurper.parseText(response)
					api_PackId=json.id
					packList.add(api_PackId)
					api_CreatedByUserEmailAddress=json.createdByUserEmailAddress
					api_CreatedDateTime=json.createdDateTime
					api_CreatedDateTime=getDate(api_CreatedDateTime.toString())
					//api_TradingCertificates=json.tradingCertificates
					
					log.info "API Response is received as =>"+api_PackId+","+api_CreatedByUserEmailAddress+","+api_CreatedDateTime
					arrCellVal=[api_PackId, api_CreatedByUserEmailAddress, api_CreatedDateTime];
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}//if statement closed
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}
			}//for loop end
			
			totalColumns = source.getRow(1).getLastCellNum()
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start

			arrCellVal=['DB DATA']
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			//arrOutputHeaderapi = ["TradingCertificateId","TradingCertificatePackId","ActualStatusCode","Status"];
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)

			log.info "Number of Pack Id created are=> "+packList.size()
			log.info "Created Trading Certificate Pack Ids => "+packList

			 for (int i = 0; i < packList.size(); i++)
			 {
			 	packId=packList.get(i)
			 	
			 	log.info "Getting Trading Certificate Pack Id details =>"+packId

			 	String getTCId=
				"""
					declare
					@pack as int = '"""+packId+"""'
					select * 
					from TradingCertificatePack 
					where Id=@pack
					Order by 1 desc
				"""
				arrData=null
				//DB sheet start
				con.eachRow(getTCId) 
				{ 
					row->
						sql_TradingCertificatePackId=row.Id
						sql_TCPackCreatedByUserEmail=row.CreatedByUserEmailAddress
						sql_TCPackCreatedDateTime=row.CreatedDateTime
						sql_TCPackCreatedDateTime=sql_TCPackCreatedDateTime.toString().replace(" ","T")
						sql_TCPackCreatedDateTime=getDate(sql_TCPackCreatedDateTime.toString())
						
						log.info "SQL response received as =>"+sql_TradingCertificatePackId+","+sql_TCPackCreatedByUserEmail+","+sql_TCPackCreatedDateTime
						arrCellVal=[sql_TradingCertificatePackId, sql_TCPackCreatedByUserEmail, sql_TCPackCreatedDateTime]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
						total_size++
						counter++
						try
						{
							RT.saveExcelFile(summary_File,O_Summary)
						}
						catch(Exception e)
						{
						  log.info e.getMessage();	
						}
					}//sql end
			 }//for loop end
			con.close()

			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for newly created Trading Certificate Packs with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String getDate(String field)
{
	if(field!=null )//&& field.length()==33)
		field = field.substring(0, 21);
		//field = field.substring(0, field.length() - 12);
		
	
	if(field==null)
			field="NULL"
	else if(field=="" || field==" " || field==null)	
			field="NULL"
	return field
}]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ac6553b7-d74a-43c5-aedd-1ec091634088" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate" id="cbec9684-079b-4289-bb0f-fec908b52bdb"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificatePacks/${#TestCase#packId}/validate" methodName="POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate" id="3c5d4845-01cb-46ee-8b70-3721d2827fc7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/65/validate</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="sortBy" value="tradingCertificateId" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>sortBy</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="TradingCertificatePacksByTradingCertificatePackIdByValidate_old" id="bf7f13da-9862-4297-b1d2-e16f8847c7a1" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST method of Trading Certificate Packs By Trading Certificate Pack Id By Validate************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

def inputStream = new FileInputStream("C:\\APITesting\\TradingCertificateTesting\\ValidateCertificateRule.xls");
Workbook wb = WorkbookFactory.create(inputStream);
def ws = wb.getSheet("Rules")
def rowCount = ws.getPhysicalNumberOfRows()
//log.info "Number of rows in rule excel are"+rowCount

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_TradingCertificatePackByTCPackIdByValidate.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_TradingCertificatePackByTCPackIdByValidate.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_TradingCertificatePackByTCPackIdByValidate.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_TradingCertificatePackByTCPackIdByValidate"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_TradingCertificatePackByTCPackIdByValidate"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_TradingCertificatePackByTCPackIdByValidate"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificateId"+","+"SQL_RiskReference"+","+"SQL_TypeCode"+","+"SQL_TradingCertificatePackId"+","+"sql_addresstypeid"+","+"SQL_SourceSystem"+","+"SQL_Reference"+","+"SQL_CurrentStatus"+","+"SQL_StorageId"+","+"SQL_RiskId"+","+"SQL_PolicyId"+","+"SQL_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"SQL_IsRenewal"+","+"SQL_IsRenewalFlag"+","+"SQL_IsYacht"+","+"SQL_IsYachtFlag"+","+"SQL_Version"+","+"SQL_RiskReference"+","+"SQL_PolicyReference"+","+"SQL_MemberReference"+","+"SQL_MemberType"+","+"sql_membername"+","+"SQL_JointAssuredName"+","+"SQL_OwnerReference"+","+"sql_ownername"+","+"SQL_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"SQL_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"SQL_policyyear"+","+"SQL_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"SQL_CcEmailAddress"+","+"SQL_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"sql_vesselname"+","+"SQL_VesselType"+","+"SQL_VesselTypeName"+","+"SQL_vesselEnteredDate"+","+"SQL_vesselFlag"+","+"SQL_imoNumber"+","+"sql_distinctivenumbersorletters"+","+"SQL_grossTonnage"+","+"SQL_yearBuilt"+","+"SQL_engineHorsePower"+","+"SQL_model"+","+"SQL_engineNo"+","+"sql_nominatedstateflag"+","+"sql_nominatedstateflagname"+","+"SQL_portOfRegistry"+","+"SQL_tenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"SQL_TradingCertificateTypeCode"+","+"SQL_TradingCertificateTypeName")
apiWriter.println("SQL_TradingCertificateId"+","+"API_TradingCertificateId"+","+"API_RiskReference"+","+"API_TradingCertificateType"+","+"API_IsValidFlag"+","+"API_ErrorList/s")
compareWriter.println("SQL_TradingCertificatePackId"+","+"API_TradingCertificateId"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_TypeCode"+","+"API_TradingCertificateType"+","+"API_IsValid"+","+"allAPIErrors"+","+"Test Case is Status")

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlStmt = 
"""
SELECT 
TOP 200
TC.Id as TradingCertificateId, TC.RiskReference, RT.TypeCode, TCPK.Id as TradingCertificatePackId, TC.AddressType_Id, TC.SourceSystem, 
TC.Reference, TC.CurrentStatus, TC.StorageId,  TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
TC.IsRenewal, case when TC.IsRenewal = 1 then 'True'    when TC.IsRenewal = 0 then 'False' else NULL end as IsRenewalFlag, TC.IsYacht,
case when TC.IsYacht = 1 then 'True' when TC.IsYacht = 0 then 'False' else NULL end as IsYachtFlag, 
TC.TradingCertificateVersion as Version, TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,
TC.JointAssuredName, TC.OwnerReference, TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,
TC.policyyear, TC.CertificateIssueDate, TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity,
TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,
TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower,
TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList, TC.TenderOutboardReferenceList,
TC.Type_Id as TradingCertificateTypeId, RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode, 
RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName, BS.BankName
from TradingCertificate TC 
inner join TradingCertificatePack TCPK  on TCPK.Id = TC.TradingCertificatePack_Id
left join ref_type RT on RT.Id=TC.Type_id
inner join ref_Group RG on RG.Id = RT.Group_Id
left join ref_addressType RAT on RAT.Id=TC.AddressType_Id
left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id
where TCPK.Id= 94
order by TCPK.Id desc, TC.Id desc
"""

def response= null
def jsonSlurper=null
def jsonResValidate=null
int counter=0
boolean flag=false;
String columnName=null
boolean ruleFlag = false;
int numberOfTcs=0

con.eachRow(sqlStmt)
{	
	row ->
	sql_TradingCertificateId=row.TradingCertificateId
	sql_RiskReference=row.RiskReference
	sql_TypeCode=row.TypeCode
	sql_TradingCertificatePackId=row.TradingCertificatePackId
	sql_addresstypeid=row.AddressType_Id
	sql_SourceSystem=row.SourceSystem
	sql_Reference=row.Reference
	sql_CurrentStatus=row.CurrentStatus
	sql_StorageId=row.StorageId
	sql_RiskId=row.RiskId
	sql_PolicyId=row.PolicyId
	sql_MemberPartyId=row.MemberPartyId
	sql_OwnerPartyId=row.OwnerPartyId
	sql_BrokerPartyId=row.BrokerPartyId
	sql_IsRenewal=row.IsRenewal
	sql_IsRenewalFlag=row.IsRenewalFlag
	sql_IsYacht=row.IsYacht
	sql_IsYachtFlag=row.IsYachtFlag
	sql_Version=row.Version
	sql_RiskReference=row.RiskReference
	sql_PolicyReference=row.PolicyReference
	sql_MemberReference=row.MemberReference
	sql_MemberType=row.MemberType
	sql_membername=row.MemberName
	sql_JointAssuredName=row.JointAssuredName
	sql_OwnerReference=row.OwnerReference
	sql_ownername=row.OwnerName
	sql_OwnerDomicile=row.OwnerDomicile
	sql_OwnerEmailAddress=row.OwnerEmailAddress
	sql_BrokerReference=row.BrokerReference
	sql_BrokerName=row.BrokerName
	sql_BrokerEmailAddress=row.BrokerEmailAddress
	sql_policyyear=row.policyyear
	sql_CertificateIssueDate=row.CertificateIssueDate
	sql_EmailAddress=row.EmailAddress
	sql_CcEmailAddress=row.CcEmailAddress
	sql_EffectiveStartDate=row.EffectiveStartDate
	sql_EffectiveEndDate=row.EffectiveEndDate
	sql_PassengerCapacity=row.PassengerCapacity
	sql_PolicyStartDate=row.PolicyStartDate
	sql_PolicyEndDate=row.PolicyEndDate
	sql_CurrencyCode=row.CurrencyCode
	sql_CoverLimitAmount=row.CoverLimitAmount
	sql_SignatoryState_Id=row.SignatoryState_Id
	sql_vesselname=row.VesselName
	sql_VesselType=row.VesselType
	sql_VesselTypeName=row.VesselTypeName
	sql_vesselEnteredDate=row.vesselEnteredDate
	sql_vesselFlag=row.vesselFlag
	sql_imoNumber=row.imoNumber
	sql_distinctivenumbersorletters=row.distinctiveNumbersOrLetters
	sql_grossTonnage=row.grossTonnage
	sql_yearBuilt=row.yearBuilt
	sql_engineHorsePower=row.engineHorsePower
	sql_model=row.model
	sql_engineNo=row.engineNo
	sql_nominatedstateflag=row.NominatedStateFlag
	sql_nominatedstateflagname=row.NominatedStateFlagName
	sql_portOfRegistry=row.portOfRegistry
	sql_tenderReferenceList=row.tenderReferenceList
	sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateGroupId=row.TradingCertificateGroupId
	sql_TradingCertificateGroupName=row.TradingCertificateGroupName
	sql_TradingCertificateGroupCode=row.TradingCertificateGroupCode
	sql_TradingCertificateTypeCode=row.TradingCertificateTypeCode
	sql_TradingCertificateTypeName=row.TradingCertificateTypeName
	sql_bankname = row.BankName
	sql_bankname = removeBracketAndComma(sql_bankname.toString())
	
	sqlWriter.println(sql_TradingCertificateId+","+sql_RiskReference+","+sql_TypeCode+","+sql_TradingCertificatePackId+","+sql_addresstypeid+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_membername+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_ownername+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_policyyear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_vesselname+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctivenumbersorletters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_nominatedstateflag+","+sql_nominatedstateflagname+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_bankname)
	log.info "SQL query Response is received as "+sql_TradingCertificateId+","+sql_RiskReference+","+sql_TypeCode+","+sql_TradingCertificatePackId+","+sql_addresstypeid+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_membername+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_ownername+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_policyyear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_vesselname+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctivenumbersorletters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_nominatedstateflag+","+sql_nominatedstateflagname+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_bankname
	
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	String packId=sql_TradingCertificatePackId.toString()
	testRunner.testCase.setPropertyValue("packId", packId)
	
	testRunner.runTestStepByName("POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate")
	String req = '${POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate#Response}'	
	response=context.expand(req)
	log.info "API response for validate Trading Certificate pack is received as==>" +response
	jsonSlurper = new JsonSlurper()
	jsonResValidate = jsonSlurper.parseText(response)
	api_tradingCertificateType = jsonResValidate.tradingCertificateType

	String tredCertId=sql_TradingCertificateId.toString()
	testRunner.testCase.setPropertyValue("tradingCertificateId", tredCertId)

	testRunner.runTestStepByName("GET_TradCertByTredCertId")
	String responseBody = '${GET_TradCertByTredCertId#Response}'	
	getResponse=context.expand(responseBody)
	log.info "API response for GET Trading Certificate by Trading Certificate Id is received as==>" +getResponse
	getJsonSlurper = new JsonSlurper()
	jsonResGetById = getJsonSlurper.parseText(getResponse)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

	//get Number of Columns from Excel
	int numberOfCells = 0;
	Iterator rowIterator = ws.rowIterator();
	if (rowIterator.hasNext())
	{
		Row headerRow = (Row) rowIterator.next();
		numberOfCells = headerRow.getPhysicalNumberOfCells();
	}
	
	numberOfTcs=jsonResValidate.tradingCertificateId.size().toInteger()
	log.info "Number of records displayed into result=>"+numberOfTcs
	
	String allAPIErrors=""
	for (int tccounter=0; tccounter<numberOfTcs; tccounter++)
	{
		int tcId=jsonResValidate.tradingCertificateId[tccounter]
		if(tcId.toString().equals(sql_TradingCertificateId.toString()))
		{
			log.info "Checking for record number "+tccounter+" =>"+ jsonResValidate.tradingCertificateId[tccounter]

			String[] numberOfErrors= jsonResValidate.errors
			for (int errorCounter=0; errorCounter<numberOfErrors.length; errorCounter++)
			{
				if(tcId.toString().equals(sql_TradingCertificateId.toString()))
				{
					allAPIErrors=allAPIErrors+" "+jsonResValidate.errors[tccounter]
					api_tradingCertificateId = jsonResValidate.tradingCertificateId[tccounter]
					api_tradingCertificateId = removeBracketAndComma(api_tradingCertificateId.toString())
					api_riskReference = jsonResValidate.riskReference[tccounter]
					api_riskReference = removeBracketAndComma(api_riskReference.toString())
					api_tradingCertificateType = jsonResValidate.tradingCertificateType[tccounter]
					api_tradingCertificateType = removeBracketAndComma(api_tradingCertificateType.toString())
					api_isValid = jsonResValidate.isValid[tccounter]
					api_isValid = removeBracketAndComma(api_isValid.toString())
					api_errors=allAPIErrors
					api_errors = removeBracketAndComma(api_errors.toString())

					apiWriter.println(sql_TradingCertificatePackId+","+api_tradingCertificateId+","+api_riskReference+","+api_tradingCertificateType+","+api_isValid+","+api_errors)
					
					break;
				}
			}


			if(jsonResValidate.isValid[tccounter].toString().equals("false") && httpStatusCode.toString().equals("200"))
			{
			//log.info "API response is received sucessfully"+response
				for(int i=1; i<rowCount; i++)
				{
					Row rows = ws.getRow(i);
					Cell cell = rows.getCell(0);
					String tradingCertificateType = cell.getStringCellValue().trim();
					//log.info "tradingCertificateType : "+tradingCertificateType
					if(tradingCertificateType.toString().equals(api_tradingCertificateType.toString()))
					{
						tradingCertificateRowNumber = i;
						String[] errorList1 = jsonResValidate.errors[tccounter]
						ArrayList<String> errorList = new ArrayList<String>();
						
						int errorCountCheck=0;
						
						for (int k=0; k<errorList1.length; k++)
						{
							String errorDescription = errorList1[k]
							errorList.add(errorDescription)
							log.info "For TC number "+tccounter+" reason number "+(k+1)+" : "+errorList1[k]
							String field = getFieldName(errorList[k])
							log.info "Field Name after removing additional text is: "+field
							for (int j=0; j<=95;j++)
							{
								rows = ws.getRow(i);
								cell = rows.getCell(j);
								
								Row headerColumns = ws.getRow(0);
								Cell cols = headerColumns.getCell(j);
								columnName = cols.getStringCellValue().trim();
								
								if (cell.CELL_TYPE_STRING)
								{
									validation = cell.getStringCellValue().trim();
									//log.info "Field : "+field +"==> columnName : "+columnName+"==>Rule : "+validation
								}//if condition ended for cell type is string from validation rule excel
								else if(cell.CELL_TYPE_NUMERIC)
								{
									int numericValue = cell.getNumericCellValue().trim();
									validation = Intger.parseInt(numericValue)
									//log.info "validation in numeric : "+validation
								}
								if(field.toLowerCase().equals(columnName.toLowerCase()))
								{
									if(validation.equals("true"))
										ruleFlag=true
									else 
										ruleFlag=false
									log.info "==>"+field.toLowerCase()+"==>"+columnName.toLowerCase()
									//break;
								}
							}
							if(ruleFlag)
							{
								switch (errorDescription)
								{
									case "'Policy Year' must not be empty.":
											if(sql_policyyear.toString().equals(""))
												sql_policyyear=null
											log.info sql_policyyear+"<==>"+jsonResGetById.policyyear
											if(sql_policyyear.equals(jsonResGetById.policyyear))
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Policy Year is : "+sql_policyyear+" and API value for Policy Year is : "+jsonResGetById.policyyear
												errorCountCheck++;
											}
											break;
									case "'Nominated Flag State' must not be empty.":
											if(sql_nominatedstateflag.equals(jsonResGetById.nominatedFlagState))
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Nominated State Flag is : "+sql_nominatedstateflag+" and API value for Nominated State Flag is : "+jsonResGetById.nominatedFlagState
												errorCountCheck++;
											}
											break;
									case "Owner name required.":
									case "'Owner Name' must not be empty.":
											if(sql_ownername.equals(jsonResGetById.ownerName))
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Owner name is : "+sql_ownername+" and API value for Owner name is : "+jsonResGetById.ownername
												errorCountCheck++;
											}
											break;
									case "Vessel name is required.":
									case  "'Vessel Name' must not be empty.":
											if(sql_vesselname.equals(jsonResGetById.vesselName))
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Vessel name is : "+sql_vesselname+" and API value for Vessel name is : "+jsonResGetById.vesselName
												errorCountCheck++;
											}
											break;
									case "Member name is required." :
									case "'Member Name' must not be empty.":
											if(sql_membername.equals(jsonResGetById.memberName))
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Member name is : "+sql_membername+" and API value for Member name is : "+jsonResGetById.memberName
												errorCountCheck++;
											}
											break;
									case "Disctinctive numbers or letters required.":
									case "'Distinctive Numbers Or Letters' must not be empty.":
											if(sql_distinctivenumbersorletters.equals(jsonResGetById.distinctiveNumbersOrLetters))
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Distinctive Numbers Or Letters is : "+sql_distinctivenumbersorletters+" and API value for Distinctive Numbers Or Letters is : "+jsonResGetById.distinctiveNumbersOrLetters
												errorCountCheck++;
											}
											break;
									case "'Owner Address' must not be empty.":
											if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.ownerAddress==null)
											{
												log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Owner Address is : "+jsonResGetById.ownerAddress
												errorCountCheck++;
											}
											break;
									case "'State Address' must not be empty.":
											if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.stateAddress==null)
											{
												log.info "SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for State Address is : "+jsonResGetById.stateAddress
												errorCountCheck++;
											}
											break;
									case "'Joint Assured Address' must not be empty.":
											if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.jointAssuredAddress==null)
											{
												log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for JA Address is : "+jsonResGetById.jointAssuredAddress
												errorCountCheck++;
											}
											break;
									case "'Joint Assured Name' must not be empty.":
											if(sql_jointassuredname.equals(jsonResGetById.jointAssuredName))
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Joint Assured name is : "+sql_jointassuredname+" and API value for Joint Assured  name is : "+jsonResGetById.jointAssuredName
												errorCountCheck++;
											}
											break;
									case "Bank Address Bank name is required.":
											if(sql_bankname.equals(null))
												errorCountCheck++;
											break;
									case "Bank Address Address name is required." :
									case "Bank Address Address city name is required " :
									case "Bank Address Address country is required" :
												errorCountCheck++;
											break;
									case "'Broker Address' must not be empty.":
											if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.brokerAddress==null)
											{
												log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Broker Address is : "+jsonResGetById.brokerAddress
												errorCountCheck++;
											}
											break;
									case "'Member Address' must not be empty.":
											if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.memberAddress==null)
											{
												log.info "SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Member Address is : "+jsonResGetById.memberAddress
												errorCountCheck++;
											}
											break;
									case "Member name set but no member address found":
											if(sql_membername!=null && sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.memberAddress==null)
											{
												log.info "SQL value for Member name is : "+sql_membername+" and API Member Name value  is : "+jsonResGetById.memberName+" and SQL value for Address Type Id is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Member Address is : "+jsonResGetById.memberAddress
												errorCountCheck++;
											}
											break;
									case "Policy limit currency code is required.":
									case "'Currency Code' must not be empty.":
											if(sql_currencycode==null && jsonResGetById.currencyCode==null)
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Currency Code is : "+sql_currencycode+" and API value for Currency Code is : "+jsonResGetById.currencyCode
												errorCountCheck++;
											}
											break;
									case "Policy limit amount is required.":
									case "'Cover Limit Amount' must not be empty.":
											if(sql_coverlimitamount==null && jsonResGetById.coverLimitAmount==null)
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Cover Limit Amount is : "+sql_coverlimitamount+" and API value for Cover Limit Amount is : "+jsonResGetById.coverLimitAmount
												errorCountCheck++;
											}
											break;
									case "Engine horse power is required.":
									case "'Engine Horse Power' must not be empty.":
											if(sql_enginehorsepower==null && jsonResGetById.engineHorsePower==null)
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Engine Horse Power is : "+sql_enginehorsepower+" and API value for Engine Horse Power is : "+jsonResGetById.engineHorsePower
												errorCountCheck++;
											}
											break;
									case "'Trademark And Engine Model' must not be empty.":
											if(sql_trademark==null && jsonResGetById.trademarkAndEngineModel==null)
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Trade Mark is : "+sql_trademark+" and API value for Trade Mark is : "+jsonResGetById.trademarkAndEngineModel
												errorCountCheck++;
											}
											break;
									case "Gross tonnage is required." :
									case "'Gross Tonnage' must not be empty.":
											if(sql_grosstonnage==null && jsonResGetById.grossTonnage==null)
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Gross Tonnage is : "+sql_grosstonnage+" and API value for Gross Tonnage is : "+jsonResGetById.grossTonnage
												errorCountCheck++;
											}
											break;
									case "Year built is required.":
									case "'Year Built' must not be empty.":
											if(sql_yearbuilt==null && jsonResGetById.yearBuilt==null)
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Year Built is : "+sql_yearbuilt+" and API value for Year Built is : "+jsonResGetById.yearBuilt
												errorCountCheck++;	
											}
											break;
									case "Address is required.":
												errorCountCheck++;
											break;
									case "At least a Bank is required!":
											if(jsonResGetById.tradingCertificate.equals(null) || jsonResGetById.tradingCertificate.equals(""))
												errorCountCheck++;
											break;
									case "Address city name is required." :
												errorCountCheck++;
											break;
									case "Address country is require."	:
												errorCountCheck++;
											break;
									case "Address line 1 is required." :
												errorCountCheck++;
											break;
									case "Address line 2 is required.":
												errorCountCheck++;
											break;
									case "Address line 3 is required.":
												errorCountCheck++;
											break;
									case "Address name is required.":
												errorCountCheck++;
											break;
									case "Address poscode is required.":
												errorCountCheck++;
											break;
									case "Address State is required.":				
												errorCountCheck++;
											break;
									case "Bank name is required.":
											if(sql_bankname.equals(jsonResGetById.tradingCertificateBanks.equals(null)) && sql_bankname.equals(null))
												errorCountCheck++;
											break;
									case "Broker name is required.":	
											if(sql_brokername.equals(jsonResGetById.brokerName.equals(null))&& sql_brokername.equals(null))
												errorCountCheck++;
											break;
									case "Email address is required.":	
											if(sql_emailaddress.equals(jsonResGetById.emailAddress.equals(null))&& sql_emailaddress.equals(null))	
												errorCountCheck++;
											break;
									case "Member ref is required."	:				
											if(sql_memberref.equals(jsonResGetById.memberReference.equals(null))&& sql_memberref.equals(null))	
												errorCountCheck++;
											break;
									case "Policy end date is required.":					
											if(sql_policyenddate.equals(jsonResGetById.policyEndDate.equals(null))&& sql_policyenddate.equals(null))	
												errorCountCheck++;
											break;
									case "IMO Number Is Required.":
									case "'IMO Number' must not be empty.":
									case "IMONumberIsRequired.":				
											if(sql_imonumber.equals(jsonResGetById.imoNumber.equals(null))&& sql_imonumber.equals(null))	
												errorCountCheck++;
											break;
									case "Issue Date is required.":				
											if(sql_certificateissuedate.equals(jsonResGetById.certificateIssueDate.equals(null))&& sql_certificateissuedate.equals(null))	
												errorCountCheck++;
											break;
									case "Policy reference number is required." :
											if(sql_policyref.equals(jsonResGetById.policyReference.equals(null))&& sql_policyref.equals(null))	
												errorCountCheck++;
											break;
									case "Policy start date is required." :
											if(sql_policystartdate.equals(jsonResGetById.policyStartDate.equals(null))&& sql_policystartdate.equals(null))	
												errorCountCheck++;
											break;
									case "Port of registry required." :
											if(sql_portofregistry.equals(jsonResGetById.portOfRegistry.equals(null))&& sql_portofregistry.equals(null))	
												errorCountCheck++;
											break;
									case "Risk ref is required." :
											if(sql_riskref.equals(jsonResGetById.riskReference.equals(null))&& sql_riskref.equals(null))	
												errorCountCheck++;
											break;
									case "Signatory state is required." :
												errorCountCheck++;
											break;
									case "Signatory State Address is required." :
												errorCountCheck++;
											break;
									case "Certificate sequence number is required." :
												errorCountCheck++;
											break;
									case "Vessel flag is required." :
											if(sql_vesselflag.equals(jsonResGetById.vesselFlag.equals(null))&& sql_vesselflag.equals(null))	
												errorCountCheck++;
											break;
									case "Vessel model is required." :
											if(sql_model.equals(jsonResGetById.model.equals(null))&& sql_model.equals(null))	
												errorCountCheck++;
											break;
									case "Vessel type is required." :
											if(sql_vesseltype.equals(jsonResGetById.vesselType.equals(null))&& sql_vesseltype.equals(null))	
												errorCountCheck++;
											break;
									case "Vessel trademark is required." :
											if(sql_trademark.equals(jsonResGetById.trademarkAndEngineModel.equals(null))&& sql_trademark.equals(null))	
												errorCountCheck++;
											break;
									case "Member Address Address name is required." :
									case "Member Address Address city name is required " :
									case "Member Address Address country is required" :
												errorCountCheck++;
											break;
									case "Broker Address Address name is required." :
									case "Broker Address Address city name is required " :
									case "Broker Address Address country is required" :
												errorCountCheck++;
											break;					
								}//switch case
								if(errorList1.length.equals(errorCountCheck))
								{
									log.info "Error count is matching hence test case is passed"
									allAPIErrors=allAPIErrors.replace(",", " ")
									compareWriter.println(sql_TradingCertificatePackId+","+jsonResValidate.tradingCertificateId[k]+","+sql_RiskReference+","+jsonResValidate.riskReference[k]+","+sql_TypeCode+","+jsonResValidate.tradingCertificateType[k]+","+jsonResValidate.isValid[k]+","+allAPIErrors+","+"Test Case is passed")
								}
							}//if rule flag is true
							else
							{
								log.info "Error count is not matching hence test case is failed"
								allAPIErrors=allAPIErrors.replace(",", " ")
								compareWriter.println(sql_TradingCertificatePackId+","+jsonResValidate.tradingCertificateId[k]+","+sql_RiskReference+","+jsonResValidate.riskReference[k]+","+sql_TypeCode+","+jsonResValidate.tradingCertificateType[k]+","+jsonResValidate.isValid[k]+","+allAPIErrors+","+"Test Case is Failed")
							}
						}//for loop end of number if errors into the list
					}
				}		
			}
			else if(httpStatusCode.toString().equals("401"))
			{
				log.info "Failed API response received as :"+response
				//compareWriter.println(sql_id+","+"Failed API response received as :"+response)
				compareWriter.println(sql_id+","+"Failed API response received as :"+response+","+","+","+","+","+","+","+"Test Case is Failed")
			}
			else if (httpStatusCode.toString().equals("200") && jsonResValidate.isValid[tccounter].toString().equals("true"))
			{
				log.info "This is valid Trading certificate"
				compareWriter.println(sql_TradingCertificatePackId+","+jsonResValidate.tradingCertificateId[tccounter]+","+sql_RiskReference+","+jsonResValidate.riskReference[tccounter]+","+sql_TypeCode+","+jsonResValidate.tradingCertificateType[tccounter]+","+jsonResValidate.isValid[tccounter]+","+allAPIErrors+","+"Test Case is passed")
			}
			break;
		}
	}//for loop of number of trading certificates
	counter = 1+counter
	log.info "Total number of verified are =>"+counter
}
public String getFieldName(String fieldName)
{
	if(fieldName.toString().contains("' must not be empty.") && fieldName!=null || fieldName!="")
	{
		fieldName = fieldName.replace("' must not be empty.","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if(fieldName.toString().contains("is required") && fieldName!=null || fieldName!="")
	{
		fieldName = fieldName.replace("is required","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if (fieldName.toString().contains(" set but no ") && fieldName.toString().contains(" address found")&& fieldName!=null || fieldName!="")
	//Member name set but no member address found
	{
		fieldName = fieldName.replace(" set but no ","")
		fieldName = fieldName.replace(" address found","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if(fieldName.toString().contains("At least a Bank is required!") && fieldName!=null || fieldName!="")
	{
		fieldName =  "bankName"
		fieldName = fieldName.toLowerCase()
	}
	else
		fieldName=null
	return fieldName
}
public String removeBracketAndComma(String field)
{
	if(field != null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(",","")
		}
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Trading Certificate By Trading Certificate Id By Validate***********"]]></script></con:config></con:testStep><con:testStep type="restrequest" name="GET_TradCertByTredCertId" id="ea102d5e-5e47-4017-a018-ac08d0188dfd"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#tradingCertificateId}" methodName="GET_TradingCertificateByCertificateId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_TradCertByTredCertId" id="325ac480-28f6-4df9-9f1c-06b0aacf1498" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="TradingCertificatePacksByTradingCertificatePackIdByValidate" id="d31f7dcf-91d0-4658-bdfd-f3f86347396b"><con:settings/><con:config><script><![CDATA[import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTRUE,rowFALSE;
def arrOutputHeader;
def arrOutputHeaderApi;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow

def inputStream = new FileInputStream("C:\\APITesting\\TradingCertificateTesting\\ValidateCertificateRule.xls");
Workbook wb = WorkbookFactory.create(inputStream);
def ws = wb.getSheet("Rules")
def rowCount = ws.getPhysicalNumberOfRows()

String key=null


for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate"))
		tcModuleName="TradCertPackskByTradCertPackIdByValidate"
	
	if(tcModuleName.toString().equals("TradCertPackskByTradCertPackIdByValidate"))
	{
		log.info "Test Execution started for Validating Trading Certificate Packs By Trading Certificate Pack Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader=["Key","TradingCertificatePackId","TradingCertificateId","RiskReference","TradingCertificateType","IsValidFlag","ErrorList/s","Status"]
			arrOutputHeaderApi=["Key","TradingCertificatePackId","TradingCertificateId","RiskReference","TradingCertificateType","IsValidFlag","ErrorList/s","Status"]
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			int db_size=0
			int db_endCol=0
			int api_startCol=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));	

			String getTcId=
			"""
			SELECT 
			Top 100
			TCPK.Id as TradingCertificatePackId, TC.Id, TC.Type_Id, RT.TypeCode, BS.BankName, *
			from TradingCertificate TC 
			inner join TradingCertificatePack TCPK  on TCPK.Id = TC.TradingCertificatePack_Id
			left join ref_type RT on RT.Id=TC.Type_id
			left join ref_addressType RAT on RAT.Id=TC.AddressType_Id
			left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id
			--where TC.Id=  274138
			order by 1 desc
			"""

			con.eachRow(getTcId)
			{
				row->
				sql_TCID=row.Id
				sql_TcPackId=row.TradingCertificatePackId

				log.info "Checking for Trading Certificate Id=>"+sql_TCID+" of Pack Id=> "+sql_TcPackId
				
				def rows=con.rows(getTcId)  
				def arrCellVal;
				arrCellVal=['DB data']
				
				RT.writeDetails(source,0,0,headerStyle,arrCellVal)
				
				headerStyle = RT.getCellStyle(O_Summary,'Header');
				RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
				
				
				def arrData;			

				def response= null
				def jsonSlurper=null
				def jsonResValidate=null
				
				int positiveCount=0, negativeCount=0
				boolean flag=false;
				String columnName=null
				boolean ruleFlag = false;

				//DB sheet start
				//con.eachRow(sqlstmt)
				//{	
					//row ->
					sql_id=row.Id
					sql_addresstypeid=row.AddressType_Id
					sql_type_id=row.Type_Id
					sql_certificatetype=row.TypeCode
					sql_reference=row.Reference
					sql_currentstatus=row.CurrentStatus
					sql_storageid=row.StorageId
					sql_isrenewal=row.IsRenewal
					sql_isyacht=row.IsYacht
					sql_riskid=row.RiskId
					sql_vesselid=row.VesselId
					sql_policyid=row.PolicyId
					sql_memberpartyid=row.MemberPartyId
					sql_ownerpartyid=row.OwnerPartyId
					sql_brokerpartyid=row.BrokerPartyId
					sql_tradingcertificateversion=row.TradingCertificateVersion
					sql_riskref=row.RiskReference
					sql_vesselreference=row.VesselReference
					sql_policyref=row.PolicyReference
					sql_memberref=row.MemberReference
					sql_membertype=row.MemberType
					sql_membername=row.MemberName
					sql_membername = removeBracketAndComma(sql_membername.toString())
					sql_ownerdomicile=row.OwnerDomicile
					sql_ownerdomicile = removeBracketAndComma(sql_ownerdomicile.toString())
					sql_owneremailaddress=row.OwnerEmailAddress
					sql_ownerreference=row.OwnerReference
					sql_ownername=row.OwnerName
					sql_ownername = removeBracketAndComma(sql_ownername.toString())
					sql_brokerreference=row.BrokerReference
					sql_brokername=row.BrokerName
					sql_brokername = removeBracketAndComma(sql_brokername.toString())
					sql_brokeremailaddress=row.BrokerEmailAddress
					sql_policyyear=row.PolicyYear
					sql_certificateissuedate=row.CertificateIssueDate
					sql_emailaddress=row.EmailAddress
					sql_ccemailaddress=row.CCEmailAddress
					sql_effectivestartdate=row.EffectiveStartDate
					sql_effectiveenddate=row.EffectiveEndDate
					sql_policystartdate=row.PolicyStartDate
					sql_policyenddate=row.PolicyEndDate
					sql_currencycode=row.CurrencyCode
					sql_coverlimitamount=row.CoverLimitAmount
					sql_dignatorystate_id=row.SignatoryState_Id
					sql_nominatedstateflag=row.NominatedStateflag
					sql_nominatedflagstatename=row.NominatedStateFlagName
					sql_vesselname=row.VesselName
					sql_vesselname = removeBracketAndComma(sql_vesselname.toString())
					sql_vesselflag=row.VesselFlag
					sql_vesseltype=row.VesselType
					sql_vesseltypename=row.VesselTypeName
					sql_passengercapacity=row.PassengerCapacity
					sql_vesselentereddate=row.VesselEnteredDate
					sql_imonumber=row.IMONumber
					sql_enginehorsepower=row.EngineHorsePower
					sql_trademark=row.TradeMark
					sql_model=row.Model
					sql_engineno=row.EngineNo
					sql_tenderreferencelist=row.TenderReferenceList
					sql_tenderoutboardreferencelist=row.TenderOutboardReferenceList
					sql_distinctivenumbersorletters=row.DistinctiveNumbersOrLetters
					sql_grosstonnage=row.GrossTonnage
					sql_yearbuilt=row.YearBuilt
					sql_portofregistry=row.PortOfRegistry
					sql_portofregistry = removeBracketAndComma(sql_portofregistry.toString())
					sql_lastmodified=row.LastModified
					sql_userprincipalname_lastmodifiedby=row.UserPrincipalName_LastModifiedBy
					sql_addresstype_id=row.AddressType_Id
					sql_jointassuredname=row.JointAssuredName
					sql_producttype=row.ProductType
					sql_sourcesystem=row.SourceSystem
					sql_isdeleted=row.IsDeleted
					sql_name=row.Name
					sql_active=row.Active
					sql_lastmodified=row.LastModified
					sql_userprincipalname_lastmodifiedby=row.UserPrincipalName_LastModifiedBy
					sql_group_id=row.Group_Id
					sql_bankname = row.BankName
					sql_bankname = removeBracketAndComma(sql_bankname.toString())
					testRunner.testCase.setPropertyValue('packId', sql_TcPackId.toString())
	
					//API
					testRunner.runTestStepByName("POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate")
					String req = '${POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate#Response}'	
					response=context.expand(req)
					//log.info "API response received as : " +response
					jsonSlurper = new JsonSlurper()
					jsonResValidate = jsonSlurper.parseText(response)
					
					testRunner.testCase.setPropertyValue('token', token)
					testRunner.testCase.setPropertyValue('tradingCertificateId', sql_TCID.toString())

					testRunner.runTestStepByName("GET_TradCertByTredCertId")
					String responseBody = '${GET_TradCertByTredCertId#Response}'	
					getResponse=context.expand(responseBody)
					//log.info "API response for GET Trading certificate by Trading Certificate Id is received as : " +getResponse
					getJsonSlurper = new JsonSlurper()
					jsonResGetById = getJsonSlurper.parseText(getResponse)

					//get Number of Columns from Excel
					int numberOfCells = 0;
					Iterator rowIterator = ws.rowIterator();
					if (rowIterator.hasNext())
					{
						Row headerRow1 = (Row) rowIterator.next();
						numberOfCells = headerRow1.getPhysicalNumberOfCells();
					}

					//checkig for error list
					numberOfTcs=jsonResValidate.tradingCertificateId.size().toInteger()
					//log.info "Number of TCs for Pack Id=>"+sql_TcPackId+" are=> "+numberOfTcs
					
					
					for (int tccounter=0; tccounter<numberOfTcs; tccounter++)
					{
						int tcId=jsonResValidate.tradingCertificateId[tccounter]
						
						if(tcId.toString().equals(sql_TCID.toString()))
						{
							String allAPIErrors=""
					String[] numberOfErrors=""
							
							log.info "Validation of TC =>"+ jsonResValidate.tradingCertificateId[tccounter] + " is in progress......"
							

							for(int i=1; i<rowCount; i++)
							{
								Row rows1 = ws.getRow(i);
								Cell cell2 = rows1.getCell(0);
								String tradingCertificateType = cell2.getStringCellValue().trim();
								//log.info "tradingCertificateType : "+tradingCertificateType
								if(tradingCertificateType.toString().equals(jsonResGetById.tradingCertificateType.typeCode.toString()))
								{
									numberOfErrors= jsonResValidate.errors[tccounter]
									
									for (int errorCounter=0; errorCounter<numberOfErrors.length; errorCounter++)
									{
										
										allAPIErrors= allAPIErrors +" "+ jsonResValidate.errors[tccounter][errorCounter]
									}
									
									log.info "Error List===>"+numberOfErrors
									//log.info "Error List===>"+numberOfErrors(1)
									tradingCertificateRowNumber = i;
									String[] errorList1 = jsonResValidate.errors[tccounter]
									ArrayList<String> errorList = new ArrayList<String>();
									
									int errorCountCheck=0;
		
									if(errorList1.length >0)
									{
										//log.info "Error List===>"+errorList1.length
									
										for (int k=0; k<errorList1.length; k++)
										{
											String errorDescription = errorList1[k]
											errorList.add(errorDescription)
											log.info "Reason number "+(k+1)+" : "+errorList1[k]
											String field = getFieldName(errorList[k])
											log.info "Field Name after removing additional text is: "+field
											for (int j=0; j<=95;j++)
											{
												rows1 = ws.getRow(i);
												cell2 = rows1.getCell(j);
												
												Row headerColumns = ws.getRow(0);
												Cell cols = headerColumns.getCell(j);
												columnName = cols.getStringCellValue().trim();
												
												if (cell2.CELL_TYPE_STRING)
												{
													validation = cell2.getStringCellValue().trim();
													//log.info "Field : "+field +"==> columnName : "+columnName+"==>Rule : "+validation
												}//if condition ended for cell type is string from validation rule excel
												else if(cell2.CELL_TYPE_NUMERIC)
												{
													int numericValue = cell2.getNumericCellValue().trim();
													validation = Intger.parseInt(numericValue)
													//log.info "validation in numeric : "+validation
												}
												if(field.toLowerCase().equals(columnName.toLowerCase()))
												{
													if(validation.equals("true"))
														ruleFlag=true
													else 
														ruleFlag=false
													log.info "==>"+field.toLowerCase()+"==>"+columnName.toLowerCase()
													//break;
												}
											}
											if(ruleFlag)
											{
												switch (errorDescription)
												{
													case "'Policy Year' must not be empty.":
															//if(sql_policyyear.equals(jsonResValidate.policyYear))
															if(sql_policyyear.equals(jsonResGetById.policyYear))
															{
																log.info "Rule Flag = "+ruleFlag + "  SQL value for Policy Year is : "+sql_policyyear+" and API value for Policy Year is : "+jsonResGetById.policyYear
																errorCountCheck++;
															}
														break;
													case "'Nominated Flag State' must not be empty.":
															//if(sql_nominatedstateflag.equals(jsonResValidate.nominatedFlagState))
															if(sql_nominatedstateflag.equals(jsonResGetById.nominatedFlagState))
															{
																log.info "Rule Flag = "+ruleFlag + "  SQL value for Nominated State Flag is : "+sql_nominatedstateflag+" and API value for Nominated State Flag is : "+jsonResGetById.nominatedFlagState
																errorCountCheck++;
															}
															break;
													case "Owner name required.":
													case "'Owner Name' must not be empty.":
															//if(sql_ownername.equals(jsonResValidate.ownerName))
															if(sql_ownername.equals(jsonResGetById.ownerName))
															{
																log.info "Rule Flag = "+ruleFlag + "  SQL value for Owner name is : "+sql_ownername+" and API value for Owner name is : "+jsonResGetById.ownername
																errorCountCheck++;
															}
														break;
													case "Vessel name is required.":
													case  "'Vessel Name' must not be empty.":
														//if(sql_vesselname.equals(jsonResValidate.vesselName))
														if(sql_vesselname.equals(jsonResGetById.vesselName))
														{
															log.info "Rule Flag = "+ruleFlag + "  SQL value for Vessel name is : "+sql_vesselname+" and API value for Vessel name is : "+jsonResGetById.vesselName
															errorCountCheck++;
														}
														break;
													case "Member name is required." :
													case "'Member Name' must not be empty.":
														//if(sql_membername.equals(jsonResValidate.memberName))
														if(sql_membername.equals(jsonResGetById.memberName))
														{
															log.info "Rule Flag = "+ruleFlag + "  SQL value for Member name is : "+sql_membername+" and API value for Member name is : "+jsonResGetById.memberName
															errorCountCheck++;
														}
														break;
													case "Disctinctive numbers or letters required.":
													case "'Distinctive Numbers Or Letters' must not be empty.":
														//if(sql_distinctivenumbersorletters.equals(jsonResValidate.distinctiveNumbersOrLetters))
														if(sql_distinctivenumbersorletters.equals(jsonResGetById.distinctiveNumbersOrLetters))
														{
															log.info "Rule Flag = "+ruleFlag + "  SQL value for Distinctive Numbers Or Letters is : "+sql_distinctivenumbersorletters+" and API value for Distinctive Numbers Or Letters is : "+jsonResGetById.distinctiveNumbersOrLetters
															errorCountCheck++;
														}
														break;
													case "'Owner Address' must not be empty.":
														//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.ownerAddress==null)
														if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.ownerAddress==null)
														{
															log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Owner Address is : "+jsonResGetById.ownerAddress
															errorCountCheck++;
														}
														break;
													case "'State Address' must not be empty.":
														//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.stateAddress==null)
														if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.stateAddress==null)
														{
															log.info "SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for State Address is : "+jsonResGetById.stateAddress
															errorCountCheck++;
														}
														break;
													case "'Joint Assured Address' must not be empty.":
														//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.jointAssuredAddress==null)
														if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.jointAssuredAddress==null)
														{
															log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for JA Address is : "+jsonResGetById.jointAssuredAddress
															errorCountCheck++;
														}
														break;
													case "'Joint Assured Name' must not be empty.":
														//if(sql_jointassuredname.equals(jsonResValidate.jointAssuredName))
														if(sql_jointassuredname.equals(jsonResGetById.jointAssuredName))
														{
															log.info "Rule Flag = "+ruleFlag + "  SQL value for Joint Assured name is : "+sql_jointassuredname+" and API value for Joint Assured  name is : "+jsonResGetById.jointAssuredName
															errorCountCheck++;
														}
														break;
													case "Bank Address Bank name is required.":
													if(sql_bankname.equals(null))
															errorCountCheck++;
														break;
													case "'Broker Address' must not be empty.":
														//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.brokerAddress==null)
														if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.brokerAddress==null)
														{
															log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Broker Address is : "+jsonResGetById.brokerAddress
															errorCountCheck++;
														}
														break;
													case "'Member Address' must not be empty.":
														//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.memberAddress==null)
														if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.memberAddress==null)
														{
															log.info "SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Member Address is : "+jsonResGetById.memberAddress
															errorCountCheck++;
														}
														break;
													case "Member name set but no member address found":
														//if(sql_membername!=null && sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.memberAddress==null)
														if(sql_membername!=null && sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.memberAddress==null)
														{
															log.info "SQL value for Member name is : "+sql_membername+" and API Member Name value  is : "+jsonResGetById.memberName+" and SQL value for Address Type Id is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Member Address is : "+jsonResGetById.memberAddress
															errorCountCheck++;
														}
														break;
													case "Policy limit currency code is required.":
													case "'Currency Code' must not be empty.":
														//if(sql_currencycode==null && jsonResValidate.currencyCode==null)
														if(sql_currencycode==null && jsonResGetById.currencyCode==null)
														{
															log.info "Rule Flag = "+ruleFlag + "  SQL value for Currency Code is : "+sql_currencycode+" and API value for Currency Code is : "+jsonResGetById.currencyCode
															errorCountCheck++;
														}
														break;
													case "Policy limit amount is required.":
													case "'Cover Limit Amount' must not be empty.":
														//if(sql_coverlimitamount==null && jsonResValidate.coverLimitAmount==null)
														if(sql_coverlimitamount==null && jsonResGetById.coverLimitAmount==null)
														{
															log.info "Rule Flag = "+ruleFlag + "  SQL value for Cover Limit Amount is : "+sql_coverlimitamount+" and API value for Cover Limit Amount is : "+jsonResGetById.coverLimitAmount
															errorCountCheck++;
														}
														break;
													case "Engine horse power is required.":
													case "'Engine Horse Power' must not be empty.":
														//if(sql_enginehorsepower==null && jsonResValidate.engineHorsePower==null)
														if(sql_enginehorsepower==null && jsonResGetById.engineHorsePower==null)
														{
															log.info "Rule Flag = "+ruleFlag + "  SQL value for Engine Horse Power is : "+sql_enginehorsepower+" and API value for Engine Horse Power is : "+jsonResGetById.engineHorsePower
															errorCountCheck++;
														}
														break;
													case "'Trademark And Engine Model' must not be empty.":
														//if(sql_trademark==null && jsonResValidate.trademarkAndEngineModel==null)
														if(sql_trademark==null && jsonResGetById.trademarkAndEngineModel==null)
														{
															log.info "Rule Flag = "+ruleFlag + "  SQL value for Trade Mark is : "+sql_trademark+" and API value for Trade Mark is : "+jsonResGetById.trademarkAndEngineModel
															errorCountCheck++;
														}
														break;
													case "Gross tonnage is required." :
													case "'Gross Tonnage' must not be empty.":
														//if(sql_grosstonnage==null && jsonResValidate.grossTonnage==null)
														if(sql_grosstonnage==null && jsonResGetById.grossTonnage==null)
														{
															log.info "Rule Flag = "+ruleFlag + "  SQL value for Gross Tonnage is : "+sql_grosstonnage+" and API value for Gross Tonnage is : "+jsonResGetById.grossTonnage
															errorCountCheck++;
														}
														break;
													case "Year built is required.":
													case "'Year Built' must not be empty.":
														//if(sql_grosstonnage==null && jsonResValidate.yearBuilt==null)
														if(sql_yearbuilt==null && jsonResGetById.yearBuilt==null)
														{
															log.info "Rule Flag = "+ruleFlag + "  SQL value for Year Built is : "+sql_yearbuilt+" and API value for Year Built is : "+jsonResGetById.yearBuilt
															errorCountCheck++;	
														}
														break;
													case "Address is required.":
															errorCountCheck++;
														break;
													case "At least a Bank is required!":
														if(jsonResGetById.tradingCertificate.equals(null) || jsonResGetById.tradingCertificate.equals(""))
															errorCountCheck++;
														break;
													case "Address city name is required." :
														errorCountCheck++;
														break;
													case "Address country is require."	:
														errorCountCheck++;
														break;
													case "Address line 1 is required." :
														errorCountCheck++;
														break;
													case "Address line 2 is required.":
														errorCountCheck++;
														break;
													case "Address line 3 is required.":
														errorCountCheck++;
														break;
													case "Address name is required.":
														errorCountCheck++;
														break;
													case "Address poscode is required.":
														errorCountCheck++;
														break;
													case "Address State is required.":				
														errorCountCheck++;
														break;
													case "Bank name is required.":
														if(sql_bankname.equals(jsonResGetById.tradingCertificateBanks.equals(null)) && sql_bankname.equals(null))
															errorCountCheck++;
														break;
													case "Broker name is required.":	
														if(sql_brokername.equals(jsonResGetById.brokerName.equals(null))&& sql_brokername.equals(null))
															errorCountCheck++;
														break;
													case "Email address is required.":	
														if(sql_emailaddress.equals(jsonResGetById.emailAddress.equals(null))&& sql_emailaddress.equals(null))	
															errorCountCheck++;
														break;
													case "Member ref is required."	:				
														if(sql_memberref.equals(jsonResGetById.memberReference.equals(null))&& sql_memberref.equals(null))	
															errorCountCheck++;
														break;
													case "Policy end date is required.":					
														if(sql_policyenddate.equals(jsonResGetById.policyEndDate.equals(null))&& sql_policyenddate.equals(null))	
															errorCountCheck++;
														break;
													case "IMO Number Is Required.":
													case "'IMO Number' must not be empty.":
													case "IMONumberIsRequired.":				
														if(sql_imonumber.equals(jsonResGetById.imoNumber.equals(null))&& sql_imonumber.equals(null))	
															errorCountCheck++;
														break;
													case "Issue Date is required.":				
														if(sql_certificateissuedate.equals(jsonResGetById.certificateIssueDate.equals(null))&& sql_certificateissuedate.equals(null))	
															errorCountCheck++;
														break;
													case "Policy reference number is required." :
														if(sql_policyref.equals(jsonResGetById.policyReference.equals(null))&& sql_policyref.equals(null))	
															errorCountCheck++;
														break;
													case "Policy start date is required." :
														if(sql_policystartdate.equals(jsonResGetById.policyStartDate.equals(null))&& sql_policystartdate.equals(null))	
															errorCountCheck++;
														break;
													case "Port of registry required." :
														if(sql_portofregistry.equals(jsonResGetById.portOfRegistry.equals(null))&& sql_portofregistry.equals(null))	
															errorCountCheck++;
														break;
													case "Risk ref is required." :
														if(sql_riskref.equals(jsonResGetById.riskReference.equals(null))&& sql_riskref.equals(null))	
															errorCountCheck++;
														break;
													case "Signatory state is required." :
														errorCountCheck++;
														break;
													case "Signatory State Address is required." :
														errorCountCheck++;
														break;
													case "Certificate sequence number is required." :
														errorCountCheck++;
														break;
													case "Vessel flag is required." :
														if(sql_vesselflag.equals(jsonResGetById.vesselFlag.equals(null))&& sql_vesselflag.equals(null))	
															errorCountCheck++;
														break;
													case "Vessel model is required." :
														if(sql_model.equals(jsonResGetById.model.equals(null))&& sql_model.equals(null))	
															errorCountCheck++;
														break;
													case "Vessel type is required." :
														if(sql_vesseltype.equals(jsonResGetById.vesselType.equals(null))&& sql_vesseltype.equals(null))	
															errorCountCheck++;
														break;
													case "Vessel trademark is required." :
														if(sql_trademark.equals(jsonResGetById.trademarkAndEngineModel.equals(null))&& sql_trademark.equals(null))	
															errorCountCheck++;
														break;
													case "Member Address Address name is required." :
													case "Member Address Address city name is required " :
													case "Member Address Address country is required" :
																errorCountCheck++;
															break;
													case "Broker Address Address name is required." :
													case "Broker Address Address city name is required " :
													case "Broker Address Address country is required" :
																errorCountCheck++;
															break;
												}//end of switch case
												
												
											}//if condition for rule is true
											
										}//end of error list for loop
		
										if(errorList1.length.equals(errorCountCheck))
										{
											isValid = "false"
											api_errors=allAPIErrors
											api_errors = removeBracketAndComma(api_errors.toString())
											sql_id= removeBracketAndComma(sql_id.toString())
											sql_riskref=removeBracketAndComma(sql_riskref.toString())
											sql_certificatetype=removeBracketAndComma(sql_certificatetype.toString())
											api_errors=api_errors.replace(",", " ")
											//api_errors=removeBracketAndComma(api_errors.toString())

											numberOfErrors = numberOfErrors.toString()
											numberOfErrors = removeBracketAndComma(numberOfErrors.toString())
											log.info "SQL query Response received as: "+sql_TcPackId+","+sql_id+","+sql_riskref+","+sql_certificatetype+","+isValid+","+api_errors

											key=sql_TcPackId+"_"+sql_id
											arrCellVal=[key, sql_TcPackId,sql_id,sql_riskref,sql_certificatetype,isValid,api_errors]
								
								
											RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
											db_size++
											counter++
													
										}
										else
										{
											isValid = "false"
											api_errors=allAPIErrors
											api_errors = removeBracketAndComma(api_errors.toString())
											sql_id= removeBracketAndComma(sql_id.toString())
											sql_riskref=removeBracketAndComma(sql_riskref.toString())
											sql_certificatetype=removeBracketAndComma(sql_certificatetype.toString())
											api_errors=api_errors.replace(",", " ")
											//api_errors=removeBracketAndComma(api_errors.toString())

											numberOfErrors = numberOfErrors.toString()
											numberOfErrors = removeBracketAndComma(numberOfErrors.toString())
		
											log.info "SQL query Response received as: "+sql_TcPackId+","+sql_id+","+sql_riskref+","+sql_certificatetype+","+isValid+","+api_errors
											key=sql_TcPackId+"_"+sql_id
											arrCellVal=[key, sql_TcPackId,sql_id,sql_riskref,sql_certificatetype,isValid,api_errors]
									
									
											RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
											db_size++
											counter++
										}
									}
									else if(errorList1.length == 0)
									{
										isValid = "true"
										api_errors=allAPIErrors
										api_errors = removeBracketAndComma(api_errors.toString())
										sql_id= removeBracketAndComma(sql_id.toString())
										sql_riskref=removeBracketAndComma(sql_riskref.toString())
										sql_certificatetype=removeBracketAndComma(sql_certificatetype.toString())
										api_errors=api_errors.replace(",", " ")
										//api_errors=removeBracketAndComma(api_errors.toString())

										numberOfErrors = numberOfErrors.toString()
										numberOfErrors = removeBracketAndComma(numberOfErrors.toString())
										key=sql_TcPackId+"_"+sql_id
										arrCellVal=[key, sql_TcPackId,sql_id,sql_riskref,sql_certificatetype,isValid,api_errors]
							
										RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
										db_size++
										counter++
									}
								}//if condition to check the trading certificate types
							}
						}
						
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e) 
					{
						log.info e.toString();
					}
				//}//sql end
			}

			int totalColumns = source.getRow(1).getLastCellNum()
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start

			con.eachRow(getTcId)
			{
				row1->
				sql_TCID=row1.Id
				sql_TcPackId=row1.TradingCertificatePackId

				log.info "Getting API values of Trading Certificate Id=>"+sql_TCID+" of Pack Id=> "+sql_TcPackId

				testRunner.testCase.setPropertyValue('token', token)
				testRunner.testCase.setPropertyValue('packId', sql_TcPackId.toString())


				//API
				testRunner.runTestStepByName("POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate")
				String req = '${POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate#Response}'	
				response=context.expand(req)
				//log.info "API response received as : " +response
				jsonSlurper = new JsonSlurper()
				jsonResValidate = jsonSlurper.parseText(response)
				

				

				

				//Check the Status code of API response
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				def httpResponseHeaders = context.testCase.testSteps["POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate"].testRequest.response.responseHeaders
				def httpStatus = httpResponseHeaders["#status#"]
				def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

				arrCellVal=['API DATA']
				RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
				RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeaderApi)
	
			
				//String[] numberOfErrors= jsonResValidate.errors
				
				
				if(httpStatusCode.toString().equals("200"))
				{
					numberOfTcs=jsonResValidate.tradingCertificateId.size().toInteger()
					for (int tccounter=0; tccounter<numberOfTcs; tccounter++)
					{
						tcId=jsonResValidate.tradingCertificateId[tccounter]
						tcId = removeBracketAndComma(tcId.toString())
						if(tcId.toString().equals(sql_TCID.toString()))
						{
							String allAPIErrors=""
				String[] numberOfErrors=""
							numberOfErrors= jsonResValidate.errors[tccounter]
							api_riskReference = jsonResValidate.riskReference[tccounter]
							api_riskReference = removeBracketAndComma(api_riskReference.toString())
							api_tradingCertificateType = jsonResValidate.tradingCertificateType[tccounter]
							api_tradingCertificateType = removeBracketAndComma(api_tradingCertificateType.toString())
							api_isValid = jsonResValidate.isValid[tccounter]
							api_isValid = removeBracketAndComma(api_isValid.toString())
							
							//numberOfErrors = removeBracketAndComma(numberOfErrors.toString())

							for (int errorCounter=0; errorCounter<numberOfErrors.length; errorCounter++)
							{
										
								allAPIErrors= allAPIErrors +" "+ jsonResValidate.errors[tccounter][errorCounter]
							}
							allAPIErrors = removeBracketAndComma(allAPIErrors.toString())
							log.info "API response recieved as: "+sql_TcPackId+","+ tcId+","+api_riskReference+","+api_tradingCertificateType+","+api_isValid+","+allAPIErrors
							key=sql_TcPackId+"_"+tcId
							arrCellVal=[key, sql_TcPackId, tcId, api_riskReference, api_tradingCertificateType, api_isValid, allAPIErrors]
	
							RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
							total_size++
							counter++
							
						}
						else if(tccounter.toString().equals(numberOfTcs.toString()) && tcId.toString() != sql_TCID.toString())
						{
							log.info "TC number=> "+tcId.toString()+" not found in Pack!!!!!"
							arrCellVal=["Not Found","Not Found","Not Found","Not Found","Not Found","Not Found"]
							
							
							RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
							db_size++
							counter++
						}
					}
					
				}
				

				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}
			}
			con.close()

			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares Validation Errors of Trading Certificate Packs by Trading Certificate Pack Id with UTOM Database data according to rule sheet'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid, dsc)
				
		}//inner if end
	}//outer if end
}//outer for end


public String getFieldName(String fieldName)
{
	if(fieldName.toString().contains("' must not be empty.") && fieldName!=null || fieldName!="")
	{
		fieldName = fieldName.replace("' must not be empty.","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if(fieldName.toString().contains("is required") && fieldName!=null || fieldName!="")
	{
		fieldName = fieldName.replace("is required","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if (fieldName.toString().contains(" set but no ") && fieldName.toString().contains(" address found")&& fieldName!=null || fieldName!="")
	//Member name set but no member address found
	{
		fieldName = fieldName.replace(" set but no ","")
		fieldName = fieldName.replace(" address found","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if(fieldName.toString().contains("At least a Bank is required!") && fieldName!=null || fieldName!="")
	{
		fieldName =  "bankName"
		fieldName = fieldName.toLowerCase()
	}
	else
		fieldName=null
	return fieldName
}
public String removeBracketAndComma(String field)
{
	if(field != null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(",","")
		}
	}
	return field
}

/*
 * So far we have checked below errors
 * Joint Assured name set but no joint assured address found
'Joint Assured Address' must not be empty.
Address is required
'Broker Address' must not be empty.
Member name set but no member address found
'Member Address' must not be empty
'Member Name' must not be empty
'Owner Name' must not be empty
Owner Address' must not be empty
'Vessel Name' must not be empty
At least a Bank is required!
Bank Address Bank name is required
'Policy Year' must not be empty
'Distinctive Numbers Or Letters' must not be empty
'Currency Code' must not be empty
'Engine Horse Power' must not be empty
'Gross Tonnage' must not be empty
'Year Built' must not be empty
'Cover Limit Amount' must not be empty
'Trademark And Engine Model' must not be empty
'Nominated Flag State' must not be empty
'State Address' must not be empty
 */	]]></script></con:config></con:testStep><con:properties><con:property><con:name>packId</con:name><con:value>94</con:value></con:property><con:property><con:name>tradingCertificateId</con:name><con:value>134075</con:value></con:property></con:properties></con:testCase><con:testCase id="e712be76-f432-4d2e-a0e2-1cce9b99f38d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_TradingCertificateSave" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="POST_TradingCertSave" id="6102ab9b-1381-45a3-a9b8-c5fd5beff1dc"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/" methodName="POST_TradingCertificateSave" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST_TradingCertSave" id="f0efb725-78f1-47c2-a486-172c93cb9440" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>
	{
	  "id": 1,
	  "addressTypeId": "7",
	  "sourceSystem": "PIOnline",
	  "reference": "123654",
	  "currentStatus": "ISSUED",
	  "storageId": null,
	  "riskId": 130179,
	  "vesselId": 130179,
	  "policyId": 1044648,
	  "memberPartyId": 112673,
	  "ownerPartyId": 0,
	  "brokerPartyId": 1,
	  "isRenewal": true,
	  "isYacht": true,
	  "version": 0,
	  "riskReference": "682637",
	  "vesselReference": "682637",
	  "policyReference": "1044648",
	  "memberReference": "73328",
	  "memberType": "N/K",
	  "memberName": "Test3Member Variation1",
	  "jointAssuredName": "N/K",
	  "ownerReference": "N/K",
	  "ownerName": "N/K",
	  "ownerDomicile": "N/K",
	  "ownerEmailAddress": "N/K",
	  "brokerReference": "104",
	  "brokerName": "POST &amp; CO (P &amp; I)",
	  "brokerEmailAddress": "claims@post-co.com"  ,
	  "policyYear": "2022",
	  "certificateIssueDate": "2021-03-01T11:30:33.510Z",
	  "emailAddress": "string",
	  "ccEmailAddress": "string",
	  "effectiveStartDate": "2021-03-01T11:30:33.510Z",
	  "effectiveEndDate": "2021-03-01T11:30:33.510Z",
	  "passengerCapacity": 0,
	  "policyStartDate": "2021-04-01T12:00:00.000Z",
	  "policyEndDate": "2022-04-01T12:00:00.000Z",
	  "currencyCode": "USD",
	  "coverLimitAmount": 500000000.00,
	  "signatoryStateId": 263,
	  "vesselName": "Test3Policy Risk",
	  "vesselType": "YA",
	  "vesselTypeName": "YACHT CHARTER 13+ PAX",
	  "vesselEnteredDate": "2020-11-08T12:00:00.000Z",
	  "vesselFlag": "ITALY",
	  "imoNumber": "3453466",
	  "distinctiveNumbersOrLetters": "f56",
	  "grossTonnage": "2500",
	  "yearBuilt": 2012,
	  "engineHorsePower": "N/K",
	  "trademarkAndEngineModel": "N/K",
	  "model": "N/K",
	  "engineNo": "N/K",
	  "nominatedFlagState": "ITALY",
	  "nominatedFlagStateName": "CONSAP S.p.a",
	  "portOfRegistry": "TRIESTE",
	  "lastModifiedByUserId": 115,
	  "lastModifiedDate": "2021-02-04T14:07:44.898Z",
	  "tenderReferenceList": "N/K",
	  "tenderOutboardReferenceList": "N/K",
	  "tradingCertificateTypeId": "1",
	  "tradingCertificateType": 
	  {
		"id": "1",
		"tradingCertificateGroup": 
		{
			"id": "1",
			"name": "BBC",
			"groupCode": "TRADECERT"
		},
		"typeCode": "Trading Certificates",
		"typeName": "BBC"
	  },
	  "addresses": [
	    {
	      "id": "7",
	      "addressName": "addressName",
	      "addressLine1": "Line1",
	      "addressLine2": "Line2",
	      "addressLine3": "Line3",
	      "stateOrCounty": "MH",
	      "city": "Mumbai",
	      "country": "India",
	      "postCode": "432131",
	      "primaryAddress": true
	    }
	  ],
	  "stateAddress": {
	     "id": "7",
	    "addressName": "CONSAP S.p.a",
	    "addressLine1": "VIA YSER 14",
	    "addressLine2": "N/K",
	    "addressLine3": "N/K",
	    "stateOrCounty": "",
	    "city": "Roma",
	    "country": "ITALY",
	    "postCode": "00198",
	    "primaryAddress": true
	  },
	  "ownerAddress": {
	    "id": "7",
	    "addressName": "string",
	    "addressLine1": "string",
	    "addressLine2": "string",
	    "addressLine3": "string",
	    "stateOrCounty": "string",
	    "city": "string",
	    "country": "string",
	    "postCode": "string",
	    "primaryAddress": true
	  },
	  "brokerAddress": {
	    "id": "7",
	    "addressName": "Blaak 31 11th Floor",
	    "addressLine1": "",
	    "addressLine2": "",
	    "addressLine3": "",
	    "stateOrCounty": "",
	    "city": "Rotterdam",
	    "country": "NETHERLANDS",
	    "postCode": "3011 GA",
	    "primaryAddress": true
	  },
	  "memberAddress": {
	    "id": "7",
	    "addressName": "Test3Member Created AddName",
	    "addressLine1": "Test3Member Created L1",
	    "addressLine2": "Test3Member Created L2",
	    "addressLine3": "",
	    "stateOrCounty": "Alabama",
	    "city": "Birmingham",
	    "country": "UNITED STATES OF AMERICA",
	    "postCode": "54734",
	    "primaryAddress": true
	  },
	  "jointAssuredAddress": {
	    "id": "7",
	    "addressName": "string",
	    "addressLine1": "string",
	    "addressLine2": "string",
	    "addressLine3": "string",
	    "stateOrCounty": "string",
	    "city": "string",
	    "country": "string",
	    "postCode": "string",
	    "primaryAddress": true
	  },
	  "tradingCertificateBanksForValidation": [
	    {
	      "id": 0,
	      "addressName": "string",
	      "addressLine1": "string",
	      "addressLine2": "string",
	      "addressLine3": "string",
	      "stateOrCounty": "string",
	      "city": "string",
	      "country": "string",
	      "postCode": "string",
	      "primaryAddress": true,
	      "bankCapacities": [
	        {
	          "id": 0,
	          "name": "string"
	        }
	      ],
	      "bankPartyId": 0,
	      "tradingCertificateId": 0,
	      "bankName": "string",
	      "startDate": "2021-03-04T07:49:44.584Z",
	      "endDate": "2021-03-04T07:49:44.584Z"
	    }
	  ],
	  "tradingCertificateBanks": [
	    {
	      "id": 0,
	      "addressName": "string",
	      "addressLine1": "string",
	      "addressLine2": "string",
	      "addressLine3": "string",
	      "stateOrCounty": "string",
	      "city": "string",
	      "country": "string",
	      "postCode": "string",
	      "primaryAddress": true,
	      "bankCapacities": [
	        {
	          "id": 0,
	          "name": "string"
	        }
	      ],
	      "bankPartyId": 0,
	      "tradingCertificateId": 0,
	      "bankName": "string",
	      "startDate": "2021-03-04T07:49:44.584Z",
	      "endDate": "2021-03-04T07:49:44.584Z"
	    }
	  ]
	}
	</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="GET_TradingCertificateByCertificateId" id="46cafc7e-0cb4-4d6b-850d-eb1038c25e04"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#tradingCertificateId}" methodName="GET_TradingCertificateByCertificateId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_TradingCertificateByCertificateId" id="325ac480-28f6-4df9-9f1c-06b0aacf1498" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/394</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="POST_TradingCertificateSave" id="3b6ef24c-0252-4e52-bdf5-496e41c1f036"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_POST_TradingCertificateSave"))
		tcModuleName="POST_TCSave"
	
	if(tcModuleName.toString().equals("POST_TCSave"))
	{
		log.info "Test Execution started for Creating and Saving Trading Certificates"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["TradingCertificateId","AddressType_Id","SourceSystem","Reference","CurrentStatus","StorageId","RiskId","ApplicationRiskId","PolicyId","MemberPartyId","OwnerPartyId","BrokerPartyId","BrokerContactPartyId","JointAssuredPartyId","IsRenewal","IsYacht","Version","RiskReference","PolicyReference","MemberReference","MemberType","MemberName","JointAssuredName","OwnerReference","OwnerName","OwnerDomicile","OwnerEmailAddress","BrokerReference","BrokerName","BrokerEmailAddress","PolicyYear","CertificateIssueDate","EmailAddress","CcEmailAddress","EffectiveStartDate","EffectiveEndDate","PassengerCapacity","PolicyStartDate","PolicyEndDate","CurrencyCode","CoverLimitAmount","SignatoryState_Id","SignatoryStateAddressId","VesselName","VesselType","VesselTypeName","vesselEnteredDate","vesselFlag","imoNumber","distinctiveNumbersOrLetters","grossTonnage","yearBuilt","engineHorsePower","TradeMark","model","engineNo","NominatedStateFlag","NominatedStateFlagName","portOfRegistry","tenderReferenceList","TenderOutboardReferenceList","TradingCertificateTypeId","TradingCertificateGroupId","TradingCertificateGroupName","TradingCertificateGroupCode","TypeCode","TypeName","BranchCode","TradingCertificatePack_Id","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			def tcIdForGetDetails;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			arrCellVal=['API data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)

			ArrayList<String> tcList = new ArrayList<>();

			String sqlstmt=
			"""
			Select
			top 26
			RT.Id as TypeId, RT.Group_Id as GroupId, RG.Name as GroupName, RG.GroupCode,
			RT.TypeCode, RT.Name as TypeName
			from ref_Type RT
			inner join ref_Group RG on RT.Group_Id = RG.Id
			"""
			con.eachRow(sqlstmt)
			{
				row -> 
				sql_TypeId=row.TypeId
				sql_TypeCode=row.TypeCode
				sql_TypeName=row.TypeName
				sql_GroupId=row.GroupId
				sql_GroupCode=row.GroupCode
				sql_GroupName=row.GroupName

				String TypeId=sql_TypeId
				String GroupId=sql_GroupId
				String GroupCode=sql_GroupCode
				String TypeName=sql_TypeName
				String GroupName=sql_GroupName
				
				Random a = new Random()
				int rnd =a.next(3)
				log.info rnd
				if(rnd==0)
				{
					rnd=2	
				}
				
				def arrData;
				def newRequest = 
				"""
				{
				 "id": 1,
			    "addressTypeId": 4,
			    "sourceSystem": "TOM",
			    "reference": "70935/672833/2020/2",
			    "currentStatus": "ISSUED",
			    "storageId": "8560001",
			    "riskId": 113003,
			    "applicationRiskId": 0,
			    "policyId": 56120,
			    "memberPartyId": 105425,
			    "ownerPartyId": 105425,
			    "brokerPartyId": null,
			    "brokerContactPartyId": null,
			    "jointAssuredPartyId": null,
			    "isRenewal": true,
			    "isYacht": false,
			    "version": 2,
			    "riskReference": "672833",
			    "policyReference": "1029368",
			    "memberReference": "70935",
			    "memberType": "Owner/Other",
			    "memberName": "Kai Lee Shipping Sdn Bhd",
			    "jointAssuredName": null,
			    "ownerReference": "70935",
			    "ownerName": "Kai Lee Shipping Sdn Bhd",
			    "ownerDomicile": null,
			    "ownerEmailAddress": null,
			    "brokerReference": null,
			    "brokerName": null,
			    "brokerEmailAddress": "",
			    "policyYear": "2020",
			    "certificateIssueDate": "2020-01-06T09:11:57.79",
			    "emailAddress": "",
			    "ccEmailAddress": "",
			    "effectiveStartDate": "2020-02-20T00:00:00",
			    "effectiveEndDate": null,
			    "passengerCapacity": null,
			    "policyStartDate": "2020-02-20T12:00:00",
			    "policyEndDate": "2021-02-20T12:00:00",
			    "currencyCode": "",
			    "coverLimitAmount": null,
			    "signatoryStateId": 583,
			    "signatoryStateAddressId": 591,
			    "vesselName": "Atlantic 8",
			    "vesselType": "HCT",
			    "vesselTypeName": "COASTAL TUG",
			    "vesselEnteredDate": "2019-07-24T12:00:00",
			    "vesselFlag": "MYS",
			    "imoNumber": "9500015",
			    "distinctiveNumbersOrLetters": "9WHJ6",
			    "grossTonnage": "270",
			    "yearBuilt": 2007,
			    "engineHorsePower": null,
			    "trademarkAndEngineModel": null,
			    "model": "",
			    "engineNo": null,
			    "nominatedFlagState": "MYS",
			    "nominatedFlagStateName": "MALAYSIA",
			    "portOfRegistry": "KUCHING",
			    "tenderReferenceList": null,
			    "tenderOutboardReferenceList": null,
				"tradingCertificateTypeId": "$TypeId",
				"tradingCertificateType": 
				{
					"id": "$TypeId",
					"tradingCertificateGroup": 
					{
						"id": "$GroupId",
						"name": "$TypeName",
						"groupCode": "$GroupCode"
					},
					"typeCode": "$GroupName",
					"typeName": "$TypeName"
				},
				"stateAddress": {
			        "id": "$rnd",
			        "addressName": "Marine Department of Malaysia",
			        "addressLine1": "P.O. Box 12 Jalan Limbungan",
			        "addressLine2": null,
			        "addressLine3": null,
			        "stateOrCounty": null,
			        "city": "Port Klang Selangor",
			        "country": "Malaysia",
			        "postCode": "42007",
			        "primaryAddress": false
			    },
			    "ownerAddress": {
			        "id": "$rnd",
			        "addressName": "D-3-1, Miri Times Square,",
			        "addressLine1": "Marina Parkcity, Jalan Bendahara,",
			        "addressLine2": "",
			        "addressLine3": "",
			        "stateOrCounty": "",
			        "city": "98000 Miri, Sarawak",
			        "country": "MALAYSIA",
			        "postCode": null,
			        "primaryAddress": false
			    },
			    "brokerAddress":{
			        "id": "$rnd",
			        "addressName": "Miri Times Square,",
			        "addressLine1": "Marina Bendahara,",
			        "addressLine2": "bearq",
			        "addressLine3": "great tv",
			        "stateOrCounty": "LA",
			        "city": "Miri",
			        "country": "MALAYSIA",
			        "postCode": null,
			        "primaryAddress": false
			    },
			    "memberAddress": {
			        "id": "$rnd",
			        "addressName": "Miri Square,",
			        "addressLine1": "Marina ,",
			        "addressLine2": "bearq",
			        "addressLine3": "great tv",
			        "stateOrCounty": "LA",
			        "city": "Mrawak",
			        "country": "MALAYSIA",
			        "postCode": null,
			        "primaryAddress": false
			    },
			    "jointAssuredAddress": {
			        "id": "$rnd",
			        "addressName": "Smane,",
			        "addressLine1": "greateaskldhhn ,",
			        "addressLine2": "antohs",
			        "addressLine3": "bindolzunc",
			        "stateOrCounty": "kihhsnn",
			        "city": "Mrawakrgh",
			        "country": "MALAYSIA",
			        "postCode": null,
			        "primaryAddress": false
			    },
			    "branchAddress": {
			        "id": "$rnd",
			        "addressName": "Smane,",
			        "addressLine1": "greateaskldhhn ,",
			        "addressLine2": "antohs",
			        "addressLine3": "bindolzunc",
			        "stateOrCounty": "kihhsnn",
			        "city": "Mrawakrgh",
			        "country": "MALAYSIA",
			        "postCode": null,
			        "primaryAddress": false
			    },
			    "signatureName": null,
			    "tradingCertificateBanks": null,
			    "branchCode": "LON",
			    "tradingCertificatePackId": 89
			}
				"""
				//Run the test step to get response
				testRunner.testCase.testSteps["POST_TradingCertSave"].setPropertyValue( "Request", newRequest)
				testRunner.runTestStepByName('POST_TradingCertSave')
				String req='${POST_TradingCertSave#Response}'
				response=context.expand(req)
				log.info "Original API response is =>"+response
				jsonSlurper=new JsonSlurper() 
				jsonRes=jsonSlurper.parseText(response)
				
				//Check the Status code of API response
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				def httpResponseHeaders = context.testCase.testSteps["POST_TradingCertSave"].testRequest.response.responseHeaders
				def httpStatus = httpResponseHeaders["#status#"]
				def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				log.info "HTTP Status code is =>"+httpStatusCode

				if(httpStatusCode.equals("200"))
				{
					def json=jsonSlurper.parseText(response)
						
					postApi_TradingCertificateId=json.id
					TradingCertificateId=postApi_TradingCertificateId.toString()
					tcList.add(TradingCertificateId)
					postApi_AddressType_Id=json.addressTypeId
					postApi_SourceSystem=json.sourceSystem
					postApi_Reference=json.reference
					postApi_CurrentStatus=json.currentStatus
					postApi_StorageId=json.storageId
					postApi_RiskId=json.riskId
					postApi_ApplicationRiskId=json.applicationRiskId
					postApi_PolicyId=json.policyId
					postApi_MemberPartyId=json.memberPartyId
					postApi_OwnerPartyId=json.ownerPartyId
					postApi_BrokerPartyId=json.brokerPartyId
					postApi_BrokerContactPartyId=json.brokerContactPartyId
					postApi_JointAssuredPartyId=json.jointAssuredPartyId
					postApi_IsRenewal=json.isRenewal
					postApi_IsYacht=json.isYacht
					postApi_Version=json.version
					postApi_RiskReference=json.riskReference
					postApi_PolicyReference=json.policyReference
					postApi_MemberReference=json.memberReference
					postApi_MemberType=json.memberType
					postApi_MemberName=json.memberName
					postApi_JointAssuredName=json.jointAssuredName
					postApi_OwnerReference=json.ownerReference
					postApi_OwnerName=json.ownerName
					postApi_OwnerDomicile=json.ownerDomicile
					postApi_OwnerEmailAddress=json.ownerEmailAddress
					postApi_BrokerReference=json.brokerReference
					postApi_BrokerName=json.brokerName
					postApi_BrokerEmailAddress=json.brokerEmailAddress
					postApi_PolicyYear=json.policyYear
					postApi_CertificateIssueDate=json.certificateIssueDate
					postApi_EmailAddress=json.emailAddress
					postApi_CcEmailAddress=json.ccEmailAddress
					postApi_EffectiveStartDate=json.effectiveStartDate
					postApi_EffectiveEndDate=json.effectiveEndDate
					postApi_EffectiveEndDate=getDate(postApi_EffectiveEndDate.toString())
					postApi_PassengerCapacity=json.passengerCapacity
					postApi_PolicyStartDate=json.policyStartDate
					postApi_PolicyEndDate=json.policyEndDate
					postApi_CurrencyCode=json.currencyCode
					postApi_CoverLimitAmount=json.coverLimitAmount
					postApi_SignatoryState_Id=json.signatoryStateId
					postApi_SignatoryStateAddressId=json.signatoryStateAddressId
					postApi_VesselName=json.vesselName
					postApi_VesselType=json.vesselType
					postApi_VesselTypeName=json.vesselTypeName
					postApi_vesselEnteredDate=json.vesselEnteredDate
					postApi_vesselFlag=json.vesselFlag
					postApi_imoNumber=json.imoNumber
					postApi_distinctiveNumbersOrLetters=json.distinctiveNumbersOrLetters
					postApi_grossTonnage=json.grossTonnage
					postApi_yearBuilt=json.yearBuilt
					postApi_engineHorsePower=json.engineHorsePower
					postApi_TradeMark=json.trademarkAndEngineModel
					postApi_model=json.model
					postApi_engineNo=json.engineNo
					postApi_NominatedStateFlag=json.nominatedFlagState
					postApi_NominatedStateFlagName=json.nominatedFlagStateName
					postApi_portOfRegistry=json.portOfRegistry
					postApi_tenderReferenceList=json.tenderReferenceList
					postApi_TenderOutboardReferenceList=json.tenderOutboardReferenceList
					postApi_TradingCertificateTypeId=json.tradingCertificateTypeId
					postApi_TradingCertificateGroupId=json.tradingCertificateType.tradingCertificateGroup.id
					postApi_TradingCertificateGroupName=json.tradingCertificateType.tradingCertificateGroup.name
					postApi_TradingCertificateGroupCode=json.tradingCertificateType.tradingCertificateGroup.groupCode
					postApi_TypeCode=json.tradingCertificateType.typeCode
					postApi_TypeName=json.tradingCertificateType.typeName
					postApi_BranchCode=json.branchCode
					postApi_TradingCertificatePack_Id=json.tradingCertificatePackId

					log.info "API Response is received as =>"+postApi_TradingCertificateId+","+postApi_AddressType_Id+","+postApi_SourceSystem+","+postApi_Reference+","+postApi_CurrentStatus+","+postApi_StorageId+","+postApi_RiskId+","+postApi_ApplicationRiskId+","+postApi_PolicyId+","+postApi_MemberPartyId+","+postApi_OwnerPartyId+","+postApi_BrokerPartyId+","+postApi_BrokerContactPartyId+","+postApi_JointAssuredPartyId+","+postApi_IsRenewal+","+postApi_IsYacht+","+postApi_Version+","+postApi_RiskReference+","+postApi_PolicyReference+","+postApi_MemberReference+","+postApi_MemberType+","+postApi_MemberName+","+postApi_JointAssuredName+","+postApi_OwnerReference+","+postApi_OwnerName+","+postApi_OwnerDomicile+","+postApi_OwnerEmailAddress+","+postApi_BrokerReference+","+postApi_BrokerName+","+postApi_BrokerEmailAddress+","+postApi_PolicyYear+","+postApi_CertificateIssueDate+","+postApi_EmailAddress+","+postApi_CcEmailAddress+","+postApi_EffectiveStartDate+","+postApi_EffectiveEndDate+","+postApi_PassengerCapacity+","+postApi_PolicyStartDate+","+postApi_PolicyEndDate+","+postApi_CurrencyCode+","+postApi_CoverLimitAmount+","+postApi_SignatoryState_Id+","+postApi_SignatoryStateAddressId+","+postApi_VesselName+","+postApi_VesselType+","+postApi_VesselTypeName+","+postApi_vesselEnteredDate+","+postApi_vesselFlag+","+postApi_imoNumber+","+postApi_distinctiveNumbersOrLetters+","+postApi_grossTonnage+","+postApi_yearBuilt+","+postApi_engineHorsePower+","+postApi_TradeMark+","+postApi_model+","+postApi_engineNo+","+postApi_NominatedStateFlag+","+postApi_NominatedStateFlagName+","+postApi_portOfRegistry+","+postApi_tenderReferenceList+","+postApi_TenderOutboardReferenceList+","+postApi_TradingCertificateTypeId+","+postApi_TradingCertificateGroupId+","+postApi_TradingCertificateGroupName+","+postApi_TradingCertificateGroupCode+","+postApi_TypeCode+","+postApi_TypeName+","+postApi_BranchCode+","+postApi_TradingCertificatePack_Id
					arrCellVal=[postApi_TradingCertificateId,postApi_AddressType_Id,postApi_SourceSystem,postApi_Reference,postApi_CurrentStatus,postApi_StorageId,postApi_RiskId,postApi_ApplicationRiskId,postApi_PolicyId,postApi_MemberPartyId,postApi_OwnerPartyId,postApi_BrokerPartyId,postApi_BrokerContactPartyId,postApi_JointAssuredPartyId,postApi_IsRenewal,postApi_IsYacht,postApi_Version,postApi_RiskReference,postApi_PolicyReference,postApi_MemberReference,postApi_MemberType,postApi_MemberName,postApi_JointAssuredName,postApi_OwnerReference,postApi_OwnerName,postApi_OwnerDomicile,postApi_OwnerEmailAddress,postApi_BrokerReference,postApi_BrokerName,postApi_BrokerEmailAddress,postApi_PolicyYear,postApi_CertificateIssueDate,postApi_EmailAddress,postApi_CcEmailAddress,postApi_EffectiveStartDate,postApi_EffectiveEndDate,postApi_PassengerCapacity,postApi_PolicyStartDate,postApi_PolicyEndDate,postApi_CurrencyCode,postApi_CoverLimitAmount,postApi_SignatoryState_Id,postApi_SignatoryStateAddressId,postApi_VesselName,postApi_VesselType,postApi_VesselTypeName,postApi_vesselEnteredDate,postApi_vesselFlag,postApi_imoNumber,postApi_distinctiveNumbersOrLetters,postApi_grossTonnage,postApi_yearBuilt,postApi_engineHorsePower,postApi_TradeMark,postApi_model,postApi_engineNo,postApi_NominatedStateFlag,postApi_NominatedStateFlagName,postApi_portOfRegistry,postApi_tenderReferenceList,postApi_TenderOutboardReferenceList,postApi_TradingCertificateTypeId,postApi_TradingCertificateGroupId,postApi_TradingCertificateGroupName,postApi_TradingCertificateGroupCode,postApi_TypeCode,postApi_TypeName,postApi_BranchCode,postApi_TradingCertificatePack_Id];
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}//if statement closed
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}
			}//inner sql end
			
			totalColumns = source.getRow(1).getLastCellNum()
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start

			arrCellVal=['DB DATA']
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			//arrOutputHeaderapi = ["TradingCertificateId","TradingCertificatePackId","ActualStatusCode","Status"];
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)

			log.info "Number of Trading Certificate are=> "+tcList.size()
			log.info "TradingCertificateId=> "+tcList

			 for (int i = 0; i < tcList.size(); i++)
			 {
			 	tcIdForGetDetails=tcList.get(i)
			 	
			 	log.info "Getting Trading Certificate details =>"+tcIdForGetDetails

			 	String getTCId=
				"""
					declare
					@TCID as int = '"""+tcIdForGetDetails+"""'
					select
					TOP 1
					TC.Id as TradingCertificateId, TC.AddressType_Id,TC.SourceSystem,TC.Reference, TC.CurrentStatus, 
					TC.StorageId, TC.RiskId, TC.ApplicationRiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId, 
					case when TC.IsOwner =0 then 'FALSE' when TC.IsOwner =0 then 'TRUE' else NULL end as IsOwner, TC.BrokerContactPartyId,  TC.JointAssuredPartyId, 
					case when TC.IsRenewal = 1 then 'TRUE'    when TC.IsRenewal = 0 then 'FALSE' else NULL end as IsRenewal,
					case when TC.IsYacht = 1 then 'TRUE' when TC.IsYacht = 0 then 'FALSE' else NULL end as IsYacht,TC.TradingCertificateVersion as Version,
					TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,TC.JointAssuredName, TC.OwnerReference,
					TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,TC.PolicyYear, TC.CertificateIssueDate,
					TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity, TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,
					TC.SignatoryState_Id, TC.SignatoryStateAddressId, TC.VesselName,TC.VesselType,TC.VesselTypeName, TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,
					TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower, TC.TradeMark, TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList,
					TC.TenderOutboardReferenceList, TC.Type_Id as TradingCertificateTypeId,RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode,
					RT.TypeCode, RT.Name as TypeName, TC.BranchCode, TC.TradingCertificatePack_Id
					from TradingCertificate TC
					inner join ref_Type RT on RT.Id=TC.Type_Id
					inner join ref_Group RG on RG.Id=RT.Group_Id
					left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id and BS.IsDeleted = 0
					where TC.Id=@TCID
					Order by 1 desc
				"""
				arrData=null
				//DB sheet start
				con.eachRow(getTCId) 
				{ 
					getDetails->
						sql_TradingCertificateId=getDetails.TradingCertificateId
						sql_AddressType_Id=getDetails.AddressType_Id
						sql_SourceSystem=getDetails.SourceSystem
						sql_Reference=getDetails.Reference
						sql_CurrentStatus=getDetails.CurrentStatus
						sql_StorageId=getDetails.StorageId
						sql_RiskId=getDetails.RiskId
						sql_ApplicationRiskId=getDetails.ApplicationRiskId
						sql_PolicyId=getDetails.PolicyId
						sql_MemberPartyId=getDetails.MemberPartyId
						sql_OwnerPartyId=getDetails.OwnerPartyId
						sql_BrokerPartyId=getDetails.BrokerPartyId
						sql_BrokerContactPartyId=getDetails.BrokerContactPartyId
						sql_JointAssuredPartyId=getDetails.JointAssuredPartyId
						sql_IsRenewal=getDetails.IsRenewal
						sql_IsYacht=getDetails.IsYacht
						sql_Version=getDetails.Version
						sql_RiskReference=getDetails.RiskReference
						sql_PolicyReference=getDetails.PolicyReference
						sql_MemberReference=getDetails.MemberReference
						sql_MemberType=getDetails.MemberType
						sql_MemberName=getDetails.MemberName
						sql_JointAssuredName=getDetails.JointAssuredName
						sql_OwnerReference=getDetails.OwnerReference
						sql_OwnerName=getDetails.OwnerName
						sql_OwnerDomicile=getDetails.OwnerDomicile
						sql_OwnerEmailAddress=getDetails.OwnerEmailAddress
						sql_BrokerReference=getDetails.BrokerReference
						sql_BrokerName=getDetails.BrokerName
						sql_BrokerEmailAddress=getDetails.BrokerEmailAddress
						sql_PolicyYear=getDetails.PolicyYear
						sql_CertificateIssueDate=getDetails.CertificateIssueDate
						sql_CertificateIssueDate=sql_CertificateIssueDate.toString().replace(" ","T")
						sql_CertificateIssueDate=getDate(sql_CertificateIssueDate.toString())
						sql_EmailAddress=getDetails.EmailAddress
						sql_CcEmailAddress=getDetails.CcEmailAddress
						sql_EffectiveStartDate=getDetails.EffectiveStartDate
						sql_EffectiveStartDate=sql_EffectiveStartDate.toString().replace(" ","T")
						sql_EffectiveStartDate=getDate(sql_EffectiveStartDate.toString())
						sql_EffectiveEndDate=getDetails.EffectiveEndDate
						sql_EffectiveEndDate=sql_EffectiveEndDate.toString().replace(" ","T")
						sql_EffectiveEndDate=getDate(sql_EffectiveEndDate.toString())
						sql_PassengerCapacity=getDetails.PassengerCapacity
						sql_PolicyStartDate=getDetails.PolicyStartDate
						sql_PolicyStartDate=sql_PolicyStartDate.toString().replace(" ","T")
						sql_PolicyStartDate=getDate(sql_PolicyStartDate.toString())
						sql_PolicyEndDate=getDetails.PolicyEndDate
						sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" ","T")
						sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())
						sql_CurrencyCode=getDetails.CurrencyCode
						sql_CoverLimitAmount=getDetails.CoverLimitAmount
						sql_SignatoryState_Id=getDetails.SignatoryState_Id
						sql_SignatoryStateAddressId=getDetails.SignatoryStateAddressId
						sql_VesselName=getDetails.VesselName
						sql_VesselType=getDetails.VesselType
						sql_VesselTypeName=getDetails.VesselTypeName
						sql_vesselEnteredDate=getDetails.vesselEnteredDate
						sql_vesselEnteredDate=sql_vesselEnteredDate.toString().replace(" ","T")
						sql_vesselEnteredDate=getDate(sql_vesselEnteredDate.toString())
						sql_vesselFlag=getDetails.vesselFlag
						sql_imoNumber=getDetails.imoNumber
						sql_distinctiveNumbersOrLetters=getDetails.distinctiveNumbersOrLetters
						sql_grossTonnage=getDetails.grossTonnage
						sql_yearBuilt=getDetails.yearBuilt
						sql_engineHorsePower=getDetails.engineHorsePower
						sql_TradeMark=getDetails.TradeMark
						sql_model=getDetails.model
						sql_engineNo=getDetails.engineNo
						sql_NominatedStateFlag=getDetails.NominatedStateFlag
						sql_NominatedStateFlagName=getDetails.NominatedStateFlagName
						sql_portOfRegistry=getDetails.portOfRegistry
						sql_tenderReferenceList=getDetails.tenderReferenceList
						sql_TenderOutboardReferenceList=getDetails.TenderOutboardReferenceList
						sql_TradingCertificateTypeId=getDetails.TradingCertificateTypeId
						sql_TradingCertificateGroupId=getDetails.TradingCertificateGroupId
						sql_TradingCertificateGroupName=getDetails.TradingCertificateGroupName
						sql_TradingCertificateGroupCode=getDetails.TradingCertificateGroupCode
						sql_TypeCode=getDetails.TypeCode
						sql_TypeName=getDetails.TypeName
						sql_BranchCode=getDetails.BranchCode
						sql_TradingCertificatePack_Id=getDetails.TradingCertificatePack_Id

						log.info "SQL response received as =>"+sql_TradingCertificateId+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_ApplicationRiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_BrokerContactPartyId+","+sql_JointAssuredPartyId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_SignatoryStateAddressId+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_TradeMark+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TypeCode+","+sql_TypeName+","+sql_BranchCode+","+sql_TradingCertificatePack_Id
						arrCellVal=[sql_TradingCertificateId,sql_AddressType_Id,sql_SourceSystem,sql_Reference,sql_CurrentStatus,sql_StorageId,sql_RiskId,sql_ApplicationRiskId, sql_PolicyId,sql_MemberPartyId,sql_OwnerPartyId,sql_BrokerPartyId,sql_BrokerContactPartyId,sql_JointAssuredPartyId,sql_IsRenewal,sql_IsYacht,sql_Version,sql_RiskReference,sql_PolicyReference,sql_MemberReference,sql_MemberType,sql_MemberName,sql_JointAssuredName,sql_OwnerReference,sql_OwnerName,sql_OwnerDomicile,sql_OwnerEmailAddress,sql_BrokerReference,sql_BrokerName,sql_BrokerEmailAddress,sql_PolicyYear,sql_CertificateIssueDate,sql_EmailAddress,sql_CcEmailAddress,sql_EffectiveStartDate,sql_EffectiveEndDate,sql_PassengerCapacity,sql_PolicyStartDate,sql_PolicyEndDate,sql_CurrencyCode,sql_CoverLimitAmount,sql_SignatoryState_Id,sql_SignatoryStateAddressId,sql_VesselName,sql_VesselType,sql_VesselTypeName,sql_vesselEnteredDate,sql_vesselFlag,sql_imoNumber,sql_distinctiveNumbersOrLetters,sql_grossTonnage,sql_yearBuilt,sql_engineHorsePower,sql_TradeMark,sql_model,sql_engineNo,sql_NominatedStateFlag,sql_NominatedStateFlagName,sql_portOfRegistry,sql_tenderReferenceList,sql_TenderOutboardReferenceList,sql_TradingCertificateTypeId,sql_TradingCertificateGroupId,sql_TradingCertificateGroupName,sql_TradingCertificateGroupCode,sql_TypeCode,sql_TypeName,sql_BranchCode,sql_TradingCertificatePack_Id]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
						total_size++
						counter++
						try
						{
							RT.saveExcelFile(summary_File,O_Summary)
						}
						catch(Exception e)
						{
						  log.info e.getMessage();	
						}
					}//sql end
			 }//for loop end
			con.close()

			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for newly created Trading Certificate with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String  removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field==null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
		field="NULL"
	}
	if(field!=null)
		field=field.toUpperCase()
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}
public String getDate(String field)
{
	if(field!=null && field.length()==21)
		field = field.substring(0, field.length() - 2);
	
	if(field==null)
			field="NULL"
	else if(field=="" || field==" " || field==null)	
			field="NULL"
	return field
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>certId</con:name><con:value>273057</con:value></con:property></con:properties></con:testCase><con:testCase id="37ec1969-5ecb-4dc6-8f5c-d0140b1cbc8b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_ReferenceByTradingCertificateTypesByInvalidCertificate" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="POST_RefByTradCertByInvalidCert" id="06fa6cdd-cb78-4647-9787-875294cad210"><con:settings/><con:config service="https://pandionlinedev.shipownersclub.com" resourcePath="/tradingcertificates/reference/tradingcertificateTypes/invalidCert" methodName="InvalidCert 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST_RefByTradCertByInvalidCert" id="a439e473-17f8-4564-b43d-47eb69f54327" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://pandionlinedev.shipownersclub.com</con:endpoint><con:request>		[
		  {
		    "id": 130179,
		    "name": "Newstring",
		    "reference": 682637,
		    "vesselTypeShortCode": "AU",
		    "vesselType": "AUTONOMOUS UNDERWATER",
		    "grossTonnage": 1000,
		    "passengerCarryingCapacity": 12,
		    "policyReference": 1044648,
		    "policyStart": "2021-04-01T12:00:00.0",
		    "policyEnd": "2022-04-01T12:00:00.0",
		    "coverLimits": [
		      {
		        "id": 77,
		        "coverShortName": "Passenger Vess Liab",
		        "limitName": "TestLimit",
		        "currencyCode": "USD",
		        "amount": 50000000.00,
		        "isThePrimaryCoverLimit": true
		      }
		    ]
		  }
		]
		</con:request><con:originalUri>https://pandionlinedev.shipownersclub.com/tradingcertificates/reference/tradingcertificateTypes/invalidCert</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="POST_ReferenceByTradingCertificateByInvalidCertificates" id="ed92aab8-2abe-4d19-8554-cf118d79b689"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\TradingCertificateTesting\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
                line->
                prop.load(line)
}
token=prop['API_TOKEN']


XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
//boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
def inputStream = new FileInputStream("C:\\APITesting\\TradingCertificateTesting\\TC_BusinessRules_AutomationTesting.xls");
Workbook wb = WorkbookFactory.create(inputStream);

def ws = wb.getSheet("VesselType_Validation")
def rowCount = ws.getPhysicalNumberOfRows()

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	
	vesselTypeShortCode ="BA"//"YC"// "PCV"
	vesselType = "ACCOMMODATION BARGE"//"YACHT COMPANY OWNED NO CHARTER"//"PASSENGER CRUISE VESSEL"
	String grossTonnge = 1000
	passengerCaparicy=12
	String limitAmount = 50000000.00
	String sql_limitName = "limitName"
				
	if(tcModuleName.toString().equals("TC_POST_ReferenceByTradingCertificateTypesByInvalidCertificate"))
	{
     	tcModuleName="RefByCertIdTypeByInvalidCert"
                
		if(tcModuleName.toString().equals("RefByCertIdTypeByInvalidCert"))
		{
			log.info "Test Execution started for getting Trading Certificate Types by Invalid Certificate"
                                
			testRunner.testCase.testSuite.setPropertyValue('token',token)
			testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
			                                
			if(eFlag.equalsIgnoreCase('Y'))
			{
				rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
				headerStyle = RT.getCellStyle(O_Summary,'Header');
				                                                
				arrOutputHeader = ["Key","ApplicationRiskId","RiskReference","VesselTypeShortCode","isInvalid","isVesselTypeInvalid","isGrossTonnageInvalid","isPassengerCapacityInvalid","isPolicyDateInvalid","isCoverLimitInvalid","Status"];                                              
				source=O_Summary.createSheet(tcModuleName.toString());
				
				int total_size=0
				int api_cnt=0
				int db_cnt=0
				int row_start=2
				int counter=2
				int db_size=0
				int db_endCol=0
				int api_startCol=0
				
				//SQL connection and query
				def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
				
				String sqlstmt=
				"""
				Use tradingcertificate
				Select Top 10
				RiskId, RiskReference, VesselName, VesselTypeName, GrossTonnage, PassengerCapacity, PolicyReference, 
				PolicyStartDate, PolicyEndDate, CurrencyCode, CoverLimitAmount
				from TradingCertificate TC
				order by TC.PolicyEndDate desc
				"""
				
				con.eachRow(sqlstmt) 
				{
					row -> 
					sql_applicationRiskId = row.RiskId
					sql_reference = row.RiskReference

					def rows=con.rows(sqlstmt)  
					def arrCellVal;
					arrCellVal=['DB data']
					
					RT.writeDetails(source,0,0,headerStyle,arrCellVal)
					
					headerStyle = RT.getCellStyle(O_Summary,'Header');
					RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
					
					def arrData;
					
					int positiveCount=0, negativeCount=0
					boolean flag=false;
					String columnName=null
					boolean ruleFlag = false;

					sql_vesselTypeShortCode =vesselTypeShortCode
					sql_vesselType = vesselType
					
					sql_policyReference = row.PolicyReference
					String sql_policyStart = row.PolicyStartDate
					String sql_policyEnd = row.PolicyEndDate
					sql_currencyCode = row.CurrencyCode

					//Converting gross(Object) to Int
					sql_grossTonnage_double = Double.parseDouble(grossTonnge);
					int sql_grossTonnage = (Integer) sql_grossTonnage_double;

					//Converting dates to required format
					sql_policyStart=sql_policyStart.replaceAll("\\s", "T");
					sql_policyEnd=sql_policyEnd.replaceAll("\\s", "T");

					//Removing null value of sql_amount
					if(limitAmount == null) {
						limitAmount = 0.00;
					}

					rules_applicationRiskId = sql_applicationRiskId
					rules_vesselTypeShortCode = sql_vesselTypeShortCode
					rules_vesselType = sql_vesselType

					int vesselTypeRowNo = 0;

					for(int j=1; j<rowCount; j++)
					{
						Row vesselRow = ws.getRow(j);
						Cell vesselCell = vesselRow.getCell(2);
						Cell vesselCellCode = vesselRow.getCell(3);
						String vesselType = vesselCell.getStringCellValue().trim();
						String vesselCode = vesselCellCode.getStringCellValue().trim();
						//log.info vesselType
						//log.info vesselCode
						if(vesselType.toString().equals(rules_vesselType.toString()) && vesselCode.toString().equals(rules_vesselTypeShortCode.toString()) )
						{
						vesselTypeRowNo = j;
						//log.info vesselType
						break;
						}
					}

					Row rowCertType = ws.getRow(0);
					Row vesselRow = ws.getRow(vesselTypeRowNo);

					for(int m=4; m<30; m++)
					{
						String rules_isInvalid = "false"
						String rules_isVesselTypeInvalid
						String rules_isGrossTonnageInvalid
						String rules_isPassengerCapacityInvalid
						String rules_isPolicyDateInvalid
						String rules_isCoverLimitInvalid
						String rules_coverLimitName
						String rules_disabledReasonText
						
						Cell certTypeCell = rowCertType.getCell(m);
						String certTypeCode = certTypeCell.getStringCellValue().trim();
						String rules_tradingCertificateTypeCode = certTypeCode
						if(rules_tradingCertificateTypeCode.toString() == "BBC")
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_grossTonnage <1000)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "true";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is invalid for "+rules_tradingCertificateTypeCode
									
								}
								else if(sql_grossTonnage >= 1000)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
								rules_isInvalid = "true";
								rules_isVesselTypeInvalid = "true";
								rules_isGrossTonnageInvalid = "false";
								rules_isPassengerCapacityInvalid = "false";
								rules_isPolicyDateInvalid = "false"
								rules_isCoverLimitInvalid = "false"
								rules_coverLimitName = null
								rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
						}                                                                                         
						else if((rules_tradingCertificateTypeCode == "PLRIn" || rules_tradingCertificateTypeCode == "PLREx"))
						{
							
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(passengerCaparicy <12)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "true";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Passenger Capacity "+passengerCaparicy+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(passengerCaparicy >= 12)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Passenger Capacity "+passengerCaparicy+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
								rules_isInvalid = "true";
								rules_isVesselTypeInvalid = "true";
								rules_isGrossTonnageInvalid = "false";
								rules_isPassengerCapacityInvalid = "false";
								rules_isPolicyDateInvalid = "false"
								rules_isCoverLimitInvalid = "false"
								rules_coverLimitName = null
								rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							
						}
						else if(rules_tradingCertificateTypeCode == "NWRC")
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_grossTonnage <300)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "true";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_grossTonnage >= 300)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
								rules_isInvalid = "true";
								rules_isVesselTypeInvalid = "true";
								rules_isGrossTonnageInvalid = "false";
								rules_isPassengerCapacityInvalid = "false";
								rules_isPolicyDateInvalid = "false"
								rules_isCoverLimitInvalid = "false"
								rules_coverLimitName = null
								rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
						}

						else if((rules_tradingCertificateTypeCode == "COE500M" || rules_tradingCertificateTypeCode == "COE500MSPANISH" || rules_tradingCertificateTypeCode == "COEYACHTESPENGLISH" || rules_tradingCertificateTypeCode == "COEYACHTESPSPANISH"))
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(limitAmount != 500000000.00)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "true"
									rules_coverLimitName = sql_limitName
									rules_disabledReasonText = "Cover Limit "+"'"+sql_limitName+"'"+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(limitAmount == 500000000.00)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = sql_limitName
									rules_disabledReasonText = "Cover Limit "+"'"+sql_limitName+"'"+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
								rules_isInvalid = "true";
								rules_isVesselTypeInvalid = "true";
								rules_isGrossTonnageInvalid = "false";
								rules_isPassengerCapacityInvalid = "false";
								rules_isPolicyDateInvalid = "false"
								rules_isCoverLimitInvalid = "false"
								rules_coverLimitName = null
								rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
						}

						else
						{
							Cell vesselValidation = vesselRow.getCell(m);

							if(vesselValidation.getStringCellValue().trim() == "N")
							{
								rules_isInvalid = "true";
								rules_isVesselTypeInvalid = "true";
								rules_isGrossTonnageInvalid = "false";
								rules_isPassengerCapacityInvalid = "false";
								rules_isPolicyDateInvalid = "false"
								rules_isCoverLimitInvalid = "false"
								rules_coverLimitName = null
								rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}

							else if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								rules_isInvalid = "false";
								rules_isVesselTypeInvalid = "false";
								rules_isGrossTonnageInvalid = "false";
								rules_isPassengerCapacityInvalid = "false";
								rules_isPolicyDateInvalid = "false"
								rules_isCoverLimitInvalid = "false"
								rules_coverLimitName = null
								rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is valid for "+rules_tradingCertificateTypeCode
							}
						}
						
						if(rules_isInvalid.equals("true"))
						{
							//log.info sql_applicationRiskId + rules_tradingCertificateTypeCode
							key = sql_applicationRiskId+"_"+rules_tradingCertificateTypeCode.toString().toUpperCase()
							arrCellVal=[key,sql_applicationRiskId.toString(),sql_reference.toString(),rules_tradingCertificateTypeCode.toString().toUpperCase(),rules_isInvalid.toString().toLowerCase(),rules_isVesselTypeInvalid.toString().toLowerCase(),rules_isGrossTonnageInvalid.toString().toLowerCase(),rules_isPassengerCapacityInvalid.toString().toLowerCase(),rules_isPolicyDateInvalid.toString().toLowerCase(),rules_isCoverLimitInvalid.toString().toLowerCase()]
							RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
							db_size++
							counter++
						}
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e) 
					{
						log.info e.toString();
					}
				}
				//sql_end
				
				int totalColumns = source.getRow(1).getLastCellNum()
				db_endCol=totalColumns-1
				api_startCol=totalColumns+2
				counter=row_start
				
				def response= null
				def jsonSlurper=null
				def jsonRes=null
				
				con.eachRow(sqlstmt) 
				{
					row ->
					
					sql_applicationRiskId = row.RiskId
					sql_reference = row.RiskReference           
					sql_vesselTypeShortCode =vesselTypeShortCode
					sql_vesselType = vesselType
					String gross = grossTonnge
					sql_passengerCarryingCapacity = passengerCaparicy
					String sql_amount = limitAmount

					sql_policyReference = row.PolicyReference
					String sql_policyStart = row.PolicyStartDate
					String sql_policyEnd = row.PolicyEndDate
					sql_currencyCode = row.CurrencyCode

					sql_limitName = "TestLimit"

					//Converting gross(Object) to Int
					sql_grossTonnage_double = Double.parseDouble(grossTonnge);
					int sql_grossTonnage = (Integer) sql_grossTonnage_double;

					//Converting dates to required format
					sql_policyStart=sql_policyStart.replaceAll("\\s", "T");
					sql_policyEnd=sql_policyEnd.replaceAll("\\s", "T");
					
					//Removing null value of sql_amount
					if(limitAmount == null)
						limitAmount = 0.00;
					
					testRunner.testCase.testSuite.setPropertyValue("token", token)
					
					def newRequest = """
					[
					{
					  "id": $sql_applicationRiskId,
					  "name": "Newstring",
					  "reference": $sql_reference,
					  "vesselTypeShortCode": "$sql_vesselTypeShortCode",
					  "vesselType": "$sql_vesselType",
					  "grossTonnage": $sql_grossTonnage,
					  "passengerCarryingCapacity": $sql_passengerCarryingCapacity,
					  "policyReference": $sql_policyReference,
					  "policyStart": "$sql_policyStart",
					  "policyEnd": "$sql_policyEnd",
					  "coverLimits": [
						{
						  "id": 77,
						  "coverShortName": "Passenger Vess Liab",
						  "limitName": "$sql_limitName",
						  "currencyCode": "$sql_currencyCode",
						  "amount": $sql_amount,
						  "isThePrimaryCoverLimit": true
						}
					  ]
					}
					]
					"""
					log.info "New Request body is =>"+newRequest
					
					testRunner.testCase.testSteps["POST_RefByTradCertByInvalidCert"].setPropertyValue( "Request", newRequest)

					testRunner.runTestStepByName('POST_RefByTradCertByInvalidCert')
					String req='${POST_RefByTradCertByInvalidCert#Response}'
					response=context.expand(req)
					log.info "Original API Response is :"+response
					jsonSlurper=new JsonSlurper() 
					jsonRes=jsonSlurper.parseText(response)

					//Check the Status code of API response
					def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					def httpResponseHeaders = context.testCase.testSteps["POST_RefByTradCertByInvalidCert"].testRequest.response.responseHeaders
					def httpStatus = httpResponseHeaders["#status#"]
					def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					//log.info("HTTP status code: " + httpStatusCode) 
					
					arrCellVal=['API DATA']
					RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
					RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)

					String error = response
					log.info httpStatusCode
					//log.info newRequest
					if(httpStatusCode.equals("200"))
					{
						log.info "Test Case Running"
						Row rowCertType = ws.getRow(0);
						for(int m=4; m<30; m++)
						{
							Cell certTypeCell = rowCertType.getCell(m);
							String certTypeCode = certTypeCell.getStringCellValue().trim();
							
							for(int i=0; i<26; i++)
							{
								if(certTypeCode.toString().equals(jsonRes.invalidCerts.tradingCertificateTypeCode[0][i]))
								{
									postApi_applicationRiskId = jsonRes.invalidCerts.applicationRiskId[0][i].toString()
									postApi_reference = jsonRes.invalidCerts.reference[0][i].toString()
									postApi_tradingCertificateTypeCode = jsonRes.invalidCerts.tradingCertificateTypeCode[0][i].toString().toUpperCase()
									postApi_isInvalid = jsonRes.invalidCerts.isInvalid[0][i].toString().toLowerCase()
									postApi_isVesselTypeInvalid = jsonRes.invalidCerts.isVesselTypeInvalid[0][i].toString().toLowerCase()
									postApi_isGrossTonnageInvalid = jsonRes.invalidCerts.isGrossTonnageInvalid[0][i].toString().toLowerCase()
									postApi_isPassengerCapacityInvalid = jsonRes.invalidCerts.isPassengerCapacityInvalid[0][i].toString().toLowerCase()
									postApi_isPolicyDateInvalid = jsonRes.invalidCerts.isPolicyDateInvalid[0][i].toString().toLowerCase()
									postApi_isCoverLimitInvalid = jsonRes.invalidCerts.isCoverLimitInvalid[0][i].toString().toLowerCase()
									postApi_coverLimitName = jsonRes.invalidCerts.coverLimitName[0][i].toString().toLowerCase()
									postApi_disabledReasonText=jsonRes.invalidCerts.disabledReasonText[0][i]

									key = postApi_applicationRiskId+"_"+postApi_tradingCertificateTypeCode

									arrCellVal=[key, postApi_applicationRiskId, postApi_reference,postApi_tradingCertificateTypeCode,postApi_isInvalid,postApi_isVesselTypeInvalid,postApi_isGrossTonnageInvalid,postApi_isPassengerCapacityInvalid, postApi_isPolicyDateInvalid, postApi_isCoverLimitInvalid]
								
									RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
									total_size++
									counter++
								}
							}
						}
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[""," "," ", httpStatusCode+"=>"+httpStatus]
						
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
						total_size++
						counter++
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
						log.info e.getMessage();	
					}
				}
				
				con.close()
				//DB compare with API
				int db_startCol=0
				counter=row_start;
				totalColumns = source.getRow(1).getLastCellNum();
				
				int api_endCol=totalColumns-1
				dsc='Issue Documents of Trading Certificate Packs by Trading Certificate Pack Id and check status from Database'
				tcid=tcModuleName.toString()
				RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid, dsc)
			}
		}
	}
}


public String removeBracketAndComma(String field)
{
	if(field != null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(",","")
		}
	}
	return field
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="POST_ReferenceByTradingCertificateByInvalidCertificates_Final" id="b3834a94-5a07-4702-bd81-e8443b8f8168" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST method of Reference By Trading Certificate by Invalid Certificate************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

//Reading the Business Rules Sheet
def inputStream = new FileInputStream("C:\\APITesting\\TradingCertificateTesting\\TC_BusinessRules_AutomationTesting.xls");
Workbook wb = WorkbookFactory.create(inputStream);
//HSSFWorkbook workbook1 = new HSSFWorkbook (inputStream)
  //  Workbook workbook1 = WorkbookFactory.create( inputStream );
//Workbook workbook1 = Workbook.getWorkbook(config) //file containing the data

def ws = wb.getSheet("VesselType_Validation")
def rowCount = ws.getPhysicalNumberOfRows()

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt =
"""
	Use tradingcertificate
	Select Top 5
	RiskId, RiskReference, VesselName, VesselTypeName, GrossTonnage, PassengerCapacity, PolicyReference, 
	PolicyStartDate, PolicyEndDate, CurrencyCode, CoverLimitAmount
	from TradingCertificate TC
	order by TC.PolicyEndDate desc
"""

//	sql_vesselTypeShortCode ="YC"// "PCV"
//	sql_vesselType = "YACHT COMPANY OWNED NO CHARTER"//"PASSENGER CRUISE VESSEL"
//	String gross = 10
//	sql_passengerCarryingCapacity = 11
//	String sql_amount = 50000000.00

vesselTypeShortCode ="BA"//"YC"// "PCV"
vesselType = "ACCOMMODATION BARGE"//"YACHT COMPANY OWNED NO CHARTER"//"PASSENGER CRUISE VESSEL"


def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]
def businessRulesFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\BusinessRulesResponse_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POST_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]
//def businessRulesFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\BusinessRulesForReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POST_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]


def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def rulesFile = new File(businessRulesFile[0])
def rulesWriter = rulesFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_applicationRiskId"+","+"SQL_reference"+","+"SQL_vesselTypeShortCode"+","+"SQL_vesselType"+","+"SQL_grossTonnage"+","+"SQL_passengerCarryingCapacity"+","+"SQL_policyReference"+","+"SQL_policyStart"+","+"SQL_policyEnd"+","+"SQL_currencyCode"+","+"SQL_amount")
apiWriter.println("ApplicationRiskId"+","+"Reference"+","+"API_tradingCertificateTypeCode"+","+"API_isInvalid"+","+"API_isVesselTypeInvalid"+","+"API_isGrossTonnageInvalid"+","+"API_isPassengerCapacityInvalid"+","+"API_isPolicyDateInvalid"+","+"API_isCoverLimitInvalid"+","+"API_coverLimitName"+","+"API_disabledReasonText")
rulesWriter.println("ApplicationRiskId"+","+"Reference"+","+"RULES_tradingCertificateTypeCode"+","+"RULES_isInvalid"+","+"RULES_isVesselTypeInvalid"+","+"RULES_isGrossTonnageInvalid"+","+"RULES_isPassengerCapacityInvalid"+","+"RULES_isPolicyDateInvalid"+","+"RULES_isCoverLimitInvalid"+","+"RULES_coverLimitName"+","+"RULES_disabledReasonText")
compareWriter.println("ApplicationRiskId"+","+"API_tradingCertificateTypeCode"+","+"RULES_tradingCertificateTypeCode"+","+"API_isInvalid"+","+"RULES_isInvalid"+","+"API_isVesselTypeInvalid"+","+"RULES_isVesselTypeInvalid"+","+"API_isGrossTonnageInvalid"+","+"RULES_isGrossTonnageInvalid"+","+"API_isPassengerCapacityInvalid"+","+"RULES_isPassengerCapacityInvalid"+","+"API_isPolicyDateInvalid"+","+"RULES_isPolicyDateInvalid"+","+"API_isCoverLimitInvalid"+","+"RULES_isCoverLimitInvalid"+","+"API_coverLimitName"+","+"RULES_coverLimitName"+","+"API_disabledReasonText"+","+"RULES_disabledReasonText"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
	sql_applicationRiskId = row.RiskId
	sql_reference = row.RiskReference
	
	//sql_vesselTypeShortCode = row.VesselName
	//sql_vesselType = row.VesselTypeName
	//String gross = row.GrossTonnage
	//sql_passengerCarryingCapacity = row.PassengerCapacity
	//String sql_amount = row.CoverLimitAmount

	sql_vesselTypeShortCode =vesselTypeShortCode
	sql_vesselType = vesselType
	String gross = 1000
	sql_passengerCarryingCapacity = 12
	String sql_amount = 50000000.00
	
	sql_policyReference = row.PolicyReference
	String sql_policyStart = row.PolicyStartDate
	String sql_policyEnd = row.PolicyEndDate
	sql_currencyCode = row.CurrencyCode

	String sql_limitName = "limitName"

	//Converting gross(Object) to Int
	sql_grossTonnage_double = Double.parseDouble(gross);
	int sql_grossTonnage = (Integer) sql_grossTonnage_double;

	//Converting dates to required format
	sql_policyStart=sql_policyStart.replaceAll("\\s", "T");
	sql_policyEnd=sql_policyEnd.replaceAll("\\s", "T");

	//Removing null value of sql_amount
	if(sql_amount == null) {
		sql_amount = 0.00;
	}

	sqlWriter.println(sql_applicationRiskId+","+sql_reference+","+sql_vesselTypeShortCode+","+sql_vesselType+","+sql_grossTonnage+","+sql_passengerCarryingCapacity+","+sql_policyReference+","+sql_policyStart+","+sql_policyEnd+","+sql_currencyCode+","+sql_amount)
	log.info "SQL Response received as : "+sql_applicationRiskId+","+sql_reference+","+sql_vesselTypeShortCode+","+sql_vesselType+","+sql_grossTonnage+","+sql_passengerCarryingCapacity+","+sql_policyReference+","+sql_policyStart+","+sql_policyEnd+","+sql_currencyCode+","+sql_amount

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	def newRequest = """
	[
	  {
	    "id": $sql_applicationRiskId,
	    "name": "Newstring",
	    "reference": $sql_reference,
	    "vesselTypeShortCode": "$sql_vesselTypeShortCode",
	    "vesselType": "$sql_vesselType",
	    "grossTonnage": $sql_grossTonnage,
	    "passengerCarryingCapacity": $sql_passengerCarryingCapacity,
	    "policyReference": $sql_policyReference,
	    "policyStart": "$sql_policyStart",
	    "policyEnd": "$sql_policyEnd",
	    "coverLimits": [
	      {
	        "id": 77,
	        "coverShortName": "Passenger Vess Liab",
	        "limitName": "$sql_limitName",
	        "currencyCode": "$sql_currencyCode",
	        "amount": $sql_amount,
	        "isThePrimaryCoverLimit": true
	      }
	    ]
	  }
	]
	"""

	log.info "Request body for post trading certificate is : "+newRequest

	//Run the test Step with name
	testRunner.testCase.testSteps["POST_RefByTradCertByInvalidCert"].setPropertyValue( "Request", newRequest)
	
	testRunner.runTestStepByName('POST_RefByTradCertByInvalidCert')
	String req='${POST_RefByTradCertByInvalidCert_#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["POST_RefByTradCertByInvalidCert"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
			for(int i=0; i<26; i++)
			{ 
				postApi_applicationRiskId = jsonRes.invalidCerts.applicationRiskId[0][i]
				postApi_reference = jsonRes.invalidCerts.reference[0][i]
				postApi_tradingCertificateTypeCode = jsonRes.invalidCerts.tradingCertificateTypeCode[0][i]
				postApi_isInvalid = jsonRes.invalidCerts.isInvalid[0][i]
				postApi_isVesselTypeInvalid = jsonRes.invalidCerts.isVesselTypeInvalid[0][i]
				postApi_isGrossTonnageInvalid = jsonRes.invalidCerts.isGrossTonnageInvalid[0][i]
				postApi_isPassengerCapacityInvalid = jsonRes.invalidCerts.isPassengerCapacityInvalid[0][i]
				postApi_isPolicyDateInvalid = jsonRes.invalidCerts.isPolicyDateInvalid[0][i]
				postApi_isCoverLimitInvalid = jsonRes.invalidCerts.isCoverLimitInvalid[0][i]
				postApi_coverLimitName = jsonRes.invalidCerts.coverLimitName[0][i]
				postApi_disabledReasonText=jsonRes.invalidCerts.disabledReasonText[0][i]

				if(postApi_applicationRiskId == null)
				{
					break;
				}
				
				apiWriter.println(postApi_applicationRiskId+","+postApi_reference+","+postApi_tradingCertificateTypeCode+","+postApi_isInvalid+","+postApi_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+postApi_coverLimitName+","+postApi_disabledReasonText)
				log.info "API response recieved is: "+postApi_applicationRiskId+","+postApi_reference+","+postApi_tradingCertificateTypeCode+","+postApi_isInvalid+","+postApi_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+postApi_coverLimitName+","+postApi_disabledReasonText
				
				rules_applicationRiskId = postApi_applicationRiskId
				rules_tradingCertificateTypeCode = postApi_tradingCertificateTypeCode
				String rules_isInvalid
				String rules_isVesselTypeInvalid
				String rules_isGrossTonnageInvalid
				String rules_isPassengerCapacityInvalid
				String rules_isPolicyDateInvalid
				String rules_isCoverLimitInvalid
				String rules_coverLimitName
				String rules_disabledReasonText

				rules_vesselTypeShortCode = sql_vesselTypeShortCode
				rules_vesselType = sql_vesselType
				
				int vesselTypeRowNo = 0;
				
				for(int j=1; j<rowCount; j++)
				{
					Row vesselRow = ws.getRow(j);
					Cell vesselCell = vesselRow.getCell(2);
					Cell vesselCellCode = vesselRow.getCell(3);
					String vesselType = vesselCell.getStringCellValue().trim();
					String vesselCode = vesselCellCode.getStringCellValue().trim();
					//log.info vesselType
					//log.info vesselCode
					if(vesselType.toString().equals(rules_vesselType.toString()) && vesselCode.toString().equals(rules_vesselTypeShortCode.toString()) )
					{
						vesselTypeRowNo = j;
						break;
					}
				}
				
				Row rowCertType = ws.getRow(0);
				Row vesselRow = ws.getRow(vesselTypeRowNo);
				
				
				for(int m=4; m<30; m++)
				{
					Cell certTypeCell = rowCertType.getCell(m);
					String certTypeCode = certTypeCell.getStringCellValue().trim();
						if(certTypeCode == rules_tradingCertificateTypeCode && rules_tradingCertificateTypeCode == "BBC")
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_grossTonnage <1000)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "true";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_grossTonnage >= 1000)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}						
						else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "PLRIn" || rules_tradingCertificateTypeCode == "PLREx"))
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_passengerCarryingCapacity <12)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "true";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Passenger Capacity "+sql_passengerCarryingCapacity+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_passengerCarryingCapacity >= 12)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Passenger Capacity "+sql_passengerCarryingCapacity+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}
						else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "NWRC"))
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_grossTonnage <300)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "true";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_grossTonnage >= 300)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}

						else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "COE500M" || rules_tradingCertificateTypeCode == "COE500MSPANISH" || rules_tradingCertificateTypeCode == "COEYACHTESPENGLISH" || rules_tradingCertificateTypeCode == "COEYACHTESPSPANISH"))
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_amount != 500000000.00)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "true"
									rules_coverLimitName = sql_limitName
									rules_disabledReasonText = "Cover Limit "+"'"+sql_limitName+"'"+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_amount == 500000000.00)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = sql_limitName
									rules_disabledReasonText = "Cover Limit "+"'"+sql_limitName+"'"+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}

						else if(certTypeCode == rules_tradingCertificateTypeCode)
						{
							Cell vesselValidation = vesselRow.getCell(m);
						
							if(vesselValidation.getStringCellValue().trim() == "N")
							{
								rules_isInvalid = "true";
								rules_isVesselTypeInvalid = "true";
								rules_isGrossTonnageInvalid = "false";
								rules_isPassengerCapacityInvalid = "false";
								rules_isPolicyDateInvalid = "false"
								rules_isCoverLimitInvalid = "false"
								rules_coverLimitName = null
								rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}

							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
								rules_isInvalid = "false";
								rules_isVesselTypeInvalid = "false";
								rules_isGrossTonnageInvalid = "false";
								rules_isPassengerCapacityInvalid = "false";
								rules_isPolicyDateInvalid = "false"
								rules_isCoverLimitInvalid = "false"
								rules_coverLimitName = null
								rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is valid for "+rules_tradingCertificateTypeCode
							}
						}
				}

				rulesWriter.println(rules_applicationRiskId+","+rules_tradingCertificateTypeCode+","+rules_isInvalid+","+rules_isVesselTypeInvalid+","+rules_isGrossTonnageInvalid+","+rules_isPassengerCapacityInvalid+","+rules_isPolicyDateInvalid+","+rules_isCoverLimitInvalid+","+rules_coverLimitName+","+rules_disabledReasonText)
				log.info "Response according to business rules: "+rules_applicationRiskId+","+rules_tradingCertificateTypeCode+","+rules_isInvalid+","+rules_isVesselTypeInvalid+","+rules_isGrossTonnageInvalid+","+rules_isPassengerCapacityInvalid+","+rules_isPolicyDateInvalid+","+rules_isCoverLimitInvalid+","+rules_coverLimitName+","+rules_disabledReasonText

				if(postApi_applicationRiskId.toString().equals(rules_applicationRiskId.toString()) && postApi_tradingCertificateTypeCode.toString().toUpperCase().equals(rules_tradingCertificateTypeCode.toString().toUpperCase()) && postApi_isInvalid.toString().toUpperCase().equals(rules_isInvalid.toString().toUpperCase()) && postApi_isVesselTypeInvalid.toString().toUpperCase().equals(rules_isVesselTypeInvalid.toString().toUpperCase()) && postApi_isGrossTonnageInvalid.toString().toUpperCase().equals(rules_isGrossTonnageInvalid.toString().toUpperCase()) && postApi_isPassengerCapacityInvalid.toString().toUpperCase().equals(rules_isPassengerCapacityInvalid.toString().toUpperCase()) && postApi_isPolicyDateInvalid.toString().toUpperCase().equals(rules_isPolicyDateInvalid.toString().toUpperCase()) && postApi_isCoverLimitInvalid.toString().toUpperCase().equals(rules_isCoverLimitInvalid.toString().toUpperCase()) && postApi_coverLimitName.toString().equals(rules_coverLimitName.toString()) )
				{
					compareWriter.println(postApi_applicationRiskId+","+rules_applicationRiskId+","+postApi_tradingCertificateTypeCode+","+rules_tradingCertificateTypeCode+","+postApi_isInvalid+","+rules_isInvalid+","+postApi_isVesselTypeInvalid+","+rules_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+rules_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+rules_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+rules_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+rules_isCoverLimitInvalid+","+postApi_coverLimitName+","+rules_coverLimitName+","+postApi_disabledReasonText+","+rules_disabledReasonText+","+"Test Case Passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(postApi_applicationRiskId+","+rules_applicationRiskId+","+postApi_tradingCertificateTypeCode+","+rules_tradingCertificateTypeCode+","+postApi_isInvalid+","+rules_isInvalid+","+postApi_isVesselTypeInvalid+","+rules_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+rules_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+rules_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+rules_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+rules_isCoverLimitInvalid+","+postApi_coverLimitName+","+rules_coverLimitName+","+postApi_disabledReasonText+","+rules_disabledReasonText+","+"Test Case Passed")
					log.info "Details are not matching hence test case is failed"
				}		
			}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
	counter = counter+1
	log.info "Number of records vertified are : "+counter
}
sqlWriter.flush()
apiWriter.flush()
rulesWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
rulesWriter.flush()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for POST method of Reference By Trading Certificate by Invalid Certificate***********"]]></script></con:config></con:testStep><con:testStep type="groovy" name="POST_HardCodedVesselTypeTest_InvalidTradCerts" id="3e5e72db-b68c-4b8a-9848-60d6c6a10df8" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST method of Reference By Trading Certificate by Invalid Certificate************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

//Reading the Business Rules Sheet
def inputStream = new FileInputStream("C:\\APITesting\\TradingCertificateTesting\\TC_BusinessRules_AutomationTesting.xls");
Workbook wb = WorkbookFactory.create(inputStream);
//HSSFWorkbook workbook1 = new HSSFWorkbook (inputStream)
//  Workbook workbook1 = WorkbookFactory.create( inputStream );
//Workbook workbook1 = Workbook.getWorkbook(config) //file containing the data

def ws = wb.getSheet("VesselType_Validation")
def rowCount = ws.getPhysicalNumberOfRows()

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt =
"""
	Use tradingcertificate
	Select Top 5
	RiskId, RiskReference, VesselName, VesselTypeName, GrossTonnage, PassengerCapacity, PolicyReference, 
	PolicyStartDate, PolicyEndDate, CurrencyCode, CoverLimitAmount
	from TradingCertificate TC
	order by TC.PolicyEndDate desc
"""

//	sql_vesselTypeShortCode ="YC"// "PCV"
//	sql_vesselType = "YACHT COMPANY OWNED NO CHARTER"//"PASSENGER CRUISE VESSEL"
//	String gross = 10
//	sql_passengerCarryingCapacity = 11
//	String sql_amount = 50000000.00

vesselTypeShortCode ="BA"//"YC"// "PCV"
vesselType = "ACCOMMODATION BARGE"//"YACHT COMPANY OWNED NO CHARTER"//"PASSENGER CRUISE VESSEL"


def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]
def businessRulesFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\BusinessRulesResponse_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POST_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]
//def businessRulesFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\BusinessRulesForReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POST_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]


def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def rulesFile = new File(businessRulesFile[0])
def rulesWriter = rulesFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_applicationRiskId"+","+"SQL_reference"+","+"SQL_vesselTypeShortCode"+","+"SQL_vesselType"+","+"SQL_grossTonnage"+","+"SQL_passengerCarryingCapacity"+","+"SQL_policyReference"+","+"SQL_policyStart"+","+"SQL_policyEnd"+","+"SQL_currencyCode"+","+"SQL_amount")
apiWriter.println("ApplicationRiskId"+","+"Reference"+","+"API_tradingCertificateTypeCode"+","+"API_isInvalid"+","+"API_isVesselTypeInvalid"+","+"API_isGrossTonnageInvalid"+","+"API_isPassengerCapacityInvalid"+","+"API_isPolicyDateInvalid"+","+"API_isCoverLimitInvalid"+","+"API_coverLimitName"+","+"API_disabledReasonText")
rulesWriter.println("ApplicationRiskId"+","+"Reference"+","+"RULES_tradingCertificateTypeCode"+","+"RULES_isInvalid"+","+"RULES_isVesselTypeInvalid"+","+"RULES_isGrossTonnageInvalid"+","+"RULES_isPassengerCapacityInvalid"+","+"RULES_isPolicyDateInvalid"+","+"RULES_isCoverLimitInvalid"+","+"RULES_coverLimitName"+","+"RULES_disabledReasonText")
compareWriter.println("ApplicationRiskId"+","+"API_tradingCertificateTypeCode"+","+"RULES_tradingCertificateTypeCode"+","+"API_isInvalid"+","+"RULES_isInvalid"+","+"API_isVesselTypeInvalid"+","+"RULES_isVesselTypeInvalid"+","+"API_isGrossTonnageInvalid"+","+"RULES_isGrossTonnageInvalid"+","+"API_isPassengerCapacityInvalid"+","+"RULES_isPassengerCapacityInvalid"+","+"API_isPolicyDateInvalid"+","+"RULES_isPolicyDateInvalid"+","+"API_isCoverLimitInvalid"+","+"RULES_isCoverLimitInvalid"+","+"API_coverLimitName"+","+"RULES_coverLimitName"+","+"API_disabledReasonText"+","+"RULES_disabledReasonText"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
	sql_applicationRiskId = row.RiskId
	sql_reference = row.RiskReference
	
	//sql_vesselTypeShortCode = row.VesselName
	//sql_vesselType = row.VesselTypeName
	//String gross = row.GrossTonnage
	//sql_passengerCarryingCapacity = row.PassengerCapacity
	//String sql_amount = row.CoverLimitAmount

	sql_vesselTypeShortCode =vesselTypeShortCode
	sql_vesselType = vesselType
	String gross = 1000
	sql_passengerCarryingCapacity = 12
	String sql_amount = 50000000.00
	
	sql_policyReference = row.PolicyReference
	String sql_policyStart = row.PolicyStartDate
	String sql_policyEnd = row.PolicyEndDate
	sql_currencyCode = row.CurrencyCode

	String sql_limitName = "TestLimit"

	//Converting gross(Object) to Int
	sql_grossTonnage_double = Double.parseDouble(gross);
	int sql_grossTonnage = (Integer) sql_grossTonnage_double;

	//Converting dates to required format
	sql_policyStart=sql_policyStart.replaceAll("\\s", "T");
	sql_policyEnd=sql_policyEnd.replaceAll("\\s", "T");

	//Removing null value of sql_amount
	if(sql_amount == null) {
		sql_amount = 0.00;
	}

	sqlWriter.println(sql_applicationRiskId+","+sql_reference+","+sql_vesselTypeShortCode+","+sql_vesselType+","+sql_grossTonnage+","+sql_passengerCarryingCapacity+","+sql_policyReference+","+sql_policyStart+","+sql_policyEnd+","+sql_currencyCode+","+sql_amount)
	log.info "SQL Response received as : "+sql_applicationRiskId+","+sql_reference+","+sql_vesselTypeShortCode+","+sql_vesselType+","+sql_grossTonnage+","+sql_passengerCarryingCapacity+","+sql_policyReference+","+sql_policyStart+","+sql_policyEnd+","+sql_currencyCode+","+sql_amount

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	def newRequest = """
	[
	  {
	    "id": $sql_applicationRiskId,
	    "name": "Newstring",
	    "reference": $sql_reference,
	    "vesselTypeShortCode": "$sql_vesselTypeShortCode",
	    "vesselType": "$sql_vesselType",
	    "grossTonnage": $sql_grossTonnage,
	    "passengerCarryingCapacity": $sql_passengerCarryingCapacity,
	    "policyReference": $sql_policyReference,
	    "policyStart": "$sql_policyStart",
	    "policyEnd": "$sql_policyEnd",
	    "coverLimits": [
	      {
	        "id": 77,
	        "coverShortName": "Passenger Vess Liab",
	        "limitName": "$sql_limitName",
	        "currencyCode": "$sql_currencyCode",
	        "amount": $sql_amount,
	        "isThePrimaryCoverLimit": true
	      }
	    ]
	  }
	]
	"""

	log.info "Request body for post trading certificate is : "+newRequest

	//Run the test Step with name
	testRunner.testCase.testSteps["POST_RefByTradCertByInvalidCert"].setPropertyValue( "Request", newRequest)
	
	testRunner.runTestStepByName('POST_RefByTradCertByInvalidCert')
	String req='${POST_RefByTradCertByInvalidCert_#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["POST_RefByTradCertByInvalidCert"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
			for(int i=0; i<26; i++)
			{ 
				postApi_applicationRiskId = jsonRes.invalidCerts.applicationRiskId[0][i]
				postApi_reference = jsonRes.invalidCerts.reference[0][i]
				postApi_tradingCertificateTypeCode = jsonRes.invalidCerts.tradingCertificateTypeCode[0][i]
				postApi_isInvalid = jsonRes.invalidCerts.isInvalid[0][i]
				postApi_isVesselTypeInvalid = jsonRes.invalidCerts.isVesselTypeInvalid[0][i]
				postApi_isGrossTonnageInvalid = jsonRes.invalidCerts.isGrossTonnageInvalid[0][i]
				postApi_isPassengerCapacityInvalid = jsonRes.invalidCerts.isPassengerCapacityInvalid[0][i]
				postApi_isPolicyDateInvalid = jsonRes.invalidCerts.isPolicyDateInvalid[0][i]
				postApi_isCoverLimitInvalid = jsonRes.invalidCerts.isCoverLimitInvalid[0][i]
				postApi_coverLimitName = jsonRes.invalidCerts.coverLimitName[0][i]
				postApi_disabledReasonText=jsonRes.invalidCerts.disabledReasonText[0][i]

				if(postApi_applicationRiskId == null)
				{
					break;
				}
				
				apiWriter.println(postApi_applicationRiskId+","+postApi_reference+","+postApi_tradingCertificateTypeCode+","+postApi_isInvalid+","+postApi_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+postApi_coverLimitName+","+postApi_disabledReasonText)
				log.info "API response recieved is: "+postApi_applicationRiskId+","+postApi_reference+","+postApi_tradingCertificateTypeCode+","+postApi_isInvalid+","+postApi_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+postApi_coverLimitName+","+postApi_disabledReasonText
				
				rules_applicationRiskId = postApi_applicationRiskId
				rules_tradingCertificateTypeCode = postApi_tradingCertificateTypeCode
				String rules_isInvalid
				String rules_isVesselTypeInvalid
				String rules_isGrossTonnageInvalid
				String rules_isPassengerCapacityInvalid
				String rules_isPolicyDateInvalid
				String rules_isCoverLimitInvalid
				String rules_coverLimitName
				String rules_disabledReasonText

				rules_vesselTypeShortCode = sql_vesselTypeShortCode
				rules_vesselType = sql_vesselType
				
				int vesselTypeRowNo = 0;
				
				for(int j=1; j<rowCount; j++)
				{
					Row vesselRow = ws.getRow(j);
					Cell vesselCell = vesselRow.getCell(2);
					Cell vesselCellCode = vesselRow.getCell(3);
					String vesselType = vesselCell.getStringCellValue().trim();
					String vesselCode = vesselCellCode.getStringCellValue().trim();
					//log.info vesselType
					//log.info vesselCode
					if(vesselType.toString().equals(rules_vesselType.toString()) && vesselCode.toString().equals(rules_vesselTypeShortCode.toString()) )
					{
						vesselTypeRowNo = j;
						break;
					}
				}
				
				Row rowCertType = ws.getRow(0);
				Row vesselRow = ws.getRow(vesselTypeRowNo);
				
				
				for(int m=4; m<30; m++)
				{
					Cell certTypeCell = rowCertType.getCell(m);
					String certTypeCode = certTypeCell.getStringCellValue().trim();
						if(certTypeCode == rules_tradingCertificateTypeCode && rules_tradingCertificateTypeCode == "BBC")
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_grossTonnage <1000)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "true";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_grossTonnage >= 1000)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}						
						else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "PLRIn" || rules_tradingCertificateTypeCode == "PLREx"))
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_passengerCarryingCapacity <12)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "true";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Passenger Capacity "+sql_passengerCarryingCapacity+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_passengerCarryingCapacity >= 12)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Passenger Capacity "+sql_passengerCarryingCapacity+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}
						else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "NWRC"))
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_grossTonnage <300)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "true";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_grossTonnage >= 300)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}

						else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "COE500M" || rules_tradingCertificateTypeCode == "COE500MSPANISH" || rules_tradingCertificateTypeCode == "COEYACHTESPENGLISH" || rules_tradingCertificateTypeCode == "COEYACHTESPSPANISH"))
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_amount != 500000000.00)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "true"
									rules_coverLimitName = sql_limitName
									rules_disabledReasonText = "Cover Limit "+"'"+sql_limitName+"'"+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_amount == 500000000.00)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = sql_limitName
									rules_disabledReasonText = "Cover Limit "+"'"+sql_limitName+"'"+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}

						else if(certTypeCode == rules_tradingCertificateTypeCode)
						{
							Cell vesselValidation = vesselRow.getCell(m);
						
							if(vesselValidation.getStringCellValue().trim() == "N")
							{
								rules_isInvalid = "true";
								rules_isVesselTypeInvalid = "true";
								rules_isGrossTonnageInvalid = "false";
								rules_isPassengerCapacityInvalid = "false";
								rules_isPolicyDateInvalid = "false"
								rules_isCoverLimitInvalid = "false"
								rules_coverLimitName = null
								rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}

							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
								rules_isInvalid = "false";
								rules_isVesselTypeInvalid = "false";
								rules_isGrossTonnageInvalid = "false";
								rules_isPassengerCapacityInvalid = "false";
								rules_isPolicyDateInvalid = "false"
								rules_isCoverLimitInvalid = "false"
								rules_coverLimitName = null
								rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is valid for "+rules_tradingCertificateTypeCode
							}
						}
				}

				rulesWriter.println(rules_applicationRiskId+","+rules_tradingCertificateTypeCode+","+rules_isInvalid+","+rules_isVesselTypeInvalid+","+rules_isGrossTonnageInvalid+","+rules_isPassengerCapacityInvalid+","+rules_isPolicyDateInvalid+","+rules_isCoverLimitInvalid+","+rules_coverLimitName+","+rules_disabledReasonText)
				log.info "Response according to business rules: "+rules_applicationRiskId+","+rules_tradingCertificateTypeCode+","+rules_isInvalid+","+rules_isVesselTypeInvalid+","+rules_isGrossTonnageInvalid+","+rules_isPassengerCapacityInvalid+","+rules_isPolicyDateInvalid+","+rules_isCoverLimitInvalid+","+rules_coverLimitName+","+rules_disabledReasonText

				if(postApi_applicationRiskId.toString().equals(rules_applicationRiskId.toString()) && postApi_tradingCertificateTypeCode.toString().toUpperCase().equals(rules_tradingCertificateTypeCode.toString().toUpperCase()) && postApi_isInvalid.toString().toUpperCase().equals(rules_isInvalid.toString().toUpperCase()) && postApi_isVesselTypeInvalid.toString().toUpperCase().equals(rules_isVesselTypeInvalid.toString().toUpperCase()) && postApi_isGrossTonnageInvalid.toString().toUpperCase().equals(rules_isGrossTonnageInvalid.toString().toUpperCase()) && postApi_isPassengerCapacityInvalid.toString().toUpperCase().equals(rules_isPassengerCapacityInvalid.toString().toUpperCase()) && postApi_isPolicyDateInvalid.toString().toUpperCase().equals(rules_isPolicyDateInvalid.toString().toUpperCase()) && postApi_isCoverLimitInvalid.toString().toUpperCase().equals(rules_isCoverLimitInvalid.toString().toUpperCase()) && postApi_coverLimitName.toString().equals(rules_coverLimitName.toString()) )
				{
					compareWriter.println(postApi_applicationRiskId+","+rules_applicationRiskId+","+postApi_tradingCertificateTypeCode+","+rules_tradingCertificateTypeCode+","+postApi_isInvalid+","+rules_isInvalid+","+postApi_isVesselTypeInvalid+","+rules_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+rules_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+rules_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+rules_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+rules_isCoverLimitInvalid+","+postApi_coverLimitName+","+rules_coverLimitName+","+postApi_disabledReasonText+","+rules_disabledReasonText+","+"Test Case Passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(postApi_applicationRiskId+","+rules_applicationRiskId+","+postApi_tradingCertificateTypeCode+","+rules_tradingCertificateTypeCode+","+postApi_isInvalid+","+rules_isInvalid+","+postApi_isVesselTypeInvalid+","+rules_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+rules_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+rules_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+rules_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+rules_isCoverLimitInvalid+","+postApi_coverLimitName+","+rules_coverLimitName+","+postApi_disabledReasonText+","+rules_disabledReasonText+","+"Test Case Passed")
					log.info "Details are not matching hence test case is failed"
				}		
			}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
	counter = counter+1
	log.info "Number of records vertified are : "+counter
}

sqlWriter.flush()
apiWriter.flush()
rulesWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
rulesWriter.flush()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for POST method of Reference By Trading Certificate by Invalid Certificate***********"]]></script></con:config></con:testStep><con:testStep type="groovy" name="POST_AllVesselType_InvalidTradCerts" id="04ecb520-b2fa-4cf6-bd36-90c015cf48b9" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST method of Reference By Trading Certificate by Invalid Certificate************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver)

//Reading the Business Rules Sheet
def inputStream = new FileInputStream("C:\\APITesting\\TradingCertificateTesting\\TC_BusinessRules_AutomationTesting.xls");
Workbook wb = WorkbookFactory.create(inputStream);

def ws = wb.getSheet("VesselType_Validation")
def rowCount = ws.getPhysicalNumberOfRows()

for(int k=1; k<rowCount; k++)
{
	Row vesselRow1 = ws.getRow(k);
	Cell vesselCell1 = vesselRow1.getCell(2);
	Cell vesselCellCode1 = vesselRow1.getCell(3);
	String vesselType1 = vesselCell1.getStringCellValue().trim();
	String vesselCode1 = vesselCellCode1.getStringCellValue().trim();
	//log.info vesselRow+" : "+vesselCell+" : "+vesselCellCode+" : "+vesselType+" : "+vesselCode
	log.info "vesselType: "+vesselType1+" vesselCode : "+vesselCode1

	String vesselTypeForFileName=vesselType1.replace("/","_")
	String vesselCodeForFileName=vesselCode1.replace("/","_")
	String sqlstmt =
	"""
	Use tradingcertificate
	Select Top 5
	RiskId, RiskReference, VesselName, VesselTypeName, GrossTonnage, PassengerCapacity, PolicyReference, 
	PolicyStartDate, PolicyEndDate, CurrencyCode, CoverLimitAmount
	from TradingCertificate TC
	order by TC.PolicyEndDate desc
	"""
	def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\InvalidCertificate\\SQL_Response_ReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+".csv"]
	def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\InvalidCertificate\\API_Response_ReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+".csv"]
	def businessRulesFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\InvalidCertificate\\BusinessRulesResponse_ReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+".csv"]
	def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\InvalidCertificate\\Comparision_POST_ReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+".csv"]
	
	//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\InvalidCertificate\\SQL_Response_ReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+"_"+newDateTimeString+".csv"]
	//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\InvalidCertificate\\API_Response_ReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+"_"+newDateTimeString+".csv"]
	//def businessRulesFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\InvalidCertificate\\BusinessRulesForReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+"_"+newDateTimeString+".csv"]
	//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\InvalidCertificate\\Comparision_POST_Response_ReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+"_"+newDateTimeString+".csv"]
	
	def sqlFile = new File(sqlResponseFile[0])
	def sqlWriter = sqlFile.newPrintWriter()
	
	def apiFile = new File(apiResponseFile[0])
	def apiWriter = apiFile.newPrintWriter()
	
	def rulesFile = new File(businessRulesFile[0])
	def rulesWriter = rulesFile.newPrintWriter()
	
	def compareFile = new File(compareReportFile[0])
	def compareWriter = compareFile.newPrintWriter()
	
	sqlWriter.println("SQL_applicationRiskId"+","+"SQL_reference"+","+"SQL_vesselTypeShortCode"+","+"SQL_vesselType"+","+"SQL_grossTonnage"+","+"SQL_passengerCarryingCapacity"+","+"SQL_policyReference"+","+"SQL_policyStart"+","+"SQL_policyEnd"+","+"SQL_currencyCode"+","+"SQL_amount")
	apiWriter.println("ApplicationRiskId"+","+"Reference"+","+"API_tradingCertificateTypeCode"+","+"API_isInvalid"+","+"API_isVesselTypeInvalid"+","+"API_isGrossTonnageInvalid"+","+"API_isPassengerCapacityInvalid"+","+"API_isPolicyDateInvalid"+","+"API_isCoverLimitInvalid"+","+"API_coverLimitName"+","+"API_disabledReasonText")
	rulesWriter.println("ApplicationRiskId"+","+"Reference"+","+"RULES_tradingCertificateTypeCode"+","+"RULES_isInvalid"+","+"RULES_isVesselTypeInvalid"+","+"RULES_isGrossTonnageInvalid"+","+"RULES_isPassengerCapacityInvalid"+","+"RULES_isPolicyDateInvalid"+","+"RULES_isCoverLimitInvalid"+","+"RULES_coverLimitName"+","+"RULES_disabledReasonText")
	compareWriter.println("ApplicationRiskId"+","+"API_tradingCertificateTypeCode"+","+"RULES_tradingCertificateTypeCode"+","+"API_isInvalid"+","+"RULES_isInvalid"+","+"API_isVesselTypeInvalid"+","+"RULES_isVesselTypeInvalid"+","+"API_isGrossTonnageInvalid"+","+"RULES_isGrossTonnageInvalid"+","+"API_isPassengerCapacityInvalid"+","+"RULES_isPassengerCapacityInvalid"+","+"API_isPolicyDateInvalid"+","+"RULES_isPolicyDateInvalid"+","+"API_isCoverLimitInvalid"+","+"RULES_isCoverLimitInvalid"+","+"API_coverLimitName"+","+"RULES_coverLimitName"+","+"API_disabledReasonText"+","+"RULES_disabledReasonText"+","+"Status")
	
	def response= null
	def jsonSlurper=null
	def jsonRes=null
	
	int counter=0;
	
	con.eachRow(sqlstmt)
	{	
		row -> 
		sql_applicationRiskId = row.RiskId
		sql_reference = row.RiskReference
		
		//sql_vesselTypeShortCode = row.VesselName
		//sql_vesselType = row.VesselTypeName
		//String gross = row.GrossTonnage
		//sql_passengerCarryingCapacity = row.PassengerCapacity
		//String sql_amount = row.CoverLimitAmount
	
		sql_vesselTypeShortCode =vesselCode1
		sql_vesselType = vesselType1
		String gross = 1000
		sql_passengerCarryingCapacity = 12
		String sql_amount = 50000000.00
		
		sql_policyReference = row.PolicyReference
		String sql_policyStart = row.PolicyStartDate
		String sql_policyEnd = row.PolicyEndDate
		sql_currencyCode = row.CurrencyCode
	
		String sql_limitName = "TestLimit"
	
		//Converting gross(Object) to Int
		sql_grossTonnage_double = Double.parseDouble(gross);
		int sql_grossTonnage = (Integer) sql_grossTonnage_double;
	
		//Converting dates to required format
		sql_policyStart=sql_policyStart.replaceAll("\\s", "T");
		sql_policyEnd=sql_policyEnd.replaceAll("\\s", "T");
	
		//Removing null value of sql_amount
		if(sql_amount == null) {
			sql_amount = 0.00;
		}
	
		sqlWriter.println(sql_applicationRiskId+","+sql_reference+","+sql_vesselTypeShortCode+","+sql_vesselType+","+sql_grossTonnage+","+sql_passengerCarryingCapacity+","+sql_policyReference+","+sql_policyStart+","+sql_policyEnd+","+sql_currencyCode+","+sql_amount)
		log.info "SQL Response received as : "+sql_applicationRiskId+","+sql_reference+","+sql_vesselTypeShortCode+","+sql_vesselType+","+sql_grossTonnage+","+sql_passengerCarryingCapacity+","+sql_policyReference+","+sql_policyStart+","+sql_policyEnd+","+sql_currencyCode+","+sql_amount
	
		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
	
		def newRequest = """
		[
		  {
		    "id": $sql_applicationRiskId,
		    "name": "Newstring",
		    "reference": $sql_reference,
		    "vesselTypeShortCode": "$sql_vesselTypeShortCode",
		    "vesselType": "$sql_vesselType",
		    "grossTonnage": $sql_grossTonnage,
		    "passengerCarryingCapacity": $sql_passengerCarryingCapacity,
		    "policyReference": $sql_policyReference,
		    "policyStart": "$sql_policyStart",
		    "policyEnd": "$sql_policyEnd",
		    "coverLimits": [
		      {
		        "id": 77,
		        "coverShortName": "Passenger Vess Liab",
		        "limitName": "$sql_limitName",
		        "currencyCode": "$sql_currencyCode",
		        "amount": $sql_amount,
		        "isThePrimaryCoverLimit": true
		      }
		    ]
		  }
		]
		"""
	
		log.info "Request body for post trading certificate is : "+newRequest
	
		//Run the test Step with name
		testRunner.testCase.testSteps["POST_RefByTradCertByInvalidCert"].setPropertyValue( "Request", newRequest)
		
		testRunner.runTestStepByName('POST_RefByTradCertByInvalidCert')
		String req='${POST_RefByTradCertByInvalidCert_#Response}'
		response=context.expand(req)
		//log.info "API Response is :"+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)
	
		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["POST_RefByTradCertByInvalidCert"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info("HTTP status code: " + httpStatusCode) 
	
		String error = response
		if(httpStatusCode.equals("200"))
		{	
				for(int i=0; i<26; i++)
				{ 
					postApi_applicationRiskId = jsonRes.invalidCerts.applicationRiskId[0][i]
					postApi_reference = jsonRes.invalidCerts.reference[0][i]
					postApi_tradingCertificateTypeCode = jsonRes.invalidCerts.tradingCertificateTypeCode[0][i]
					postApi_isInvalid = jsonRes.invalidCerts.isInvalid[0][i]
					postApi_isVesselTypeInvalid = jsonRes.invalidCerts.isVesselTypeInvalid[0][i]
					postApi_isGrossTonnageInvalid = jsonRes.invalidCerts.isGrossTonnageInvalid[0][i]
					postApi_isPassengerCapacityInvalid = jsonRes.invalidCerts.isPassengerCapacityInvalid[0][i]
					postApi_isPolicyDateInvalid = jsonRes.invalidCerts.isPolicyDateInvalid[0][i]
					postApi_isCoverLimitInvalid = jsonRes.invalidCerts.isCoverLimitInvalid[0][i]
					postApi_coverLimitName = jsonRes.invalidCerts.coverLimitName[0][i]
					postApi_disabledReasonText=jsonRes.invalidCerts.disabledReasonText[0][i]
	
					if(postApi_applicationRiskId == null)
					{
						break;
					}
					
					apiWriter.println(postApi_applicationRiskId+","+postApi_reference+","+postApi_tradingCertificateTypeCode+","+postApi_isInvalid+","+postApi_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+postApi_coverLimitName+","+postApi_disabledReasonText)
					log.info "API response recieved is: "+postApi_applicationRiskId+","+postApi_reference+","+postApi_tradingCertificateTypeCode+","+postApi_isInvalid+","+postApi_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+postApi_coverLimitName+","+postApi_disabledReasonText
					
					rules_applicationRiskId = postApi_applicationRiskId
					rules_tradingCertificateTypeCode = postApi_tradingCertificateTypeCode
					String rules_isInvalid
					String rules_isVesselTypeInvalid
					String rules_isGrossTonnageInvalid
					String rules_isPassengerCapacityInvalid
					String rules_isPolicyDateInvalid
					String rules_isCoverLimitInvalid
					String rules_coverLimitName
					String rules_disabledReasonText
	
					rules_vesselTypeShortCode = sql_vesselTypeShortCode
					rules_vesselType = sql_vesselType
					
					int vesselTypeRowNo = 0;
					
					for(int j=1; j<rowCount; j++)
					{
						Row vesselRow = ws.getRow(j);
						Cell vesselCell = vesselRow.getCell(2);
						Cell vesselCellCode = vesselRow.getCell(3);
						String vesselType = vesselCell.getStringCellValue().trim();
						String vesselCode = vesselCellCode.getStringCellValue().trim();
						//log.info vesselType
						//log.info vesselCode
						if(vesselType.toString().equals(rules_vesselType.toString()) && vesselCode.toString().equals(rules_vesselTypeShortCode.toString()) )
						{
							vesselTypeRowNo = j;
							break;
						}
					}
					
					Row rowCertType = ws.getRow(0);
					Row vesselRow = ws.getRow(vesselTypeRowNo);
					
					
					for(int m=4; m<30; m++)
					{
						Cell certTypeCell = rowCertType.getCell(m);
						String certTypeCode = certTypeCell.getStringCellValue().trim();
							if(certTypeCode == rules_tradingCertificateTypeCode && rules_tradingCertificateTypeCode == "BBC")
							{
								Cell vesselValidation = vesselRow.getCell(m);
								if(vesselValidation.getStringCellValue().trim() == "Y")
								{
									if(sql_grossTonnage <1000)
									{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "true";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is invalid for "+rules_tradingCertificateTypeCode
									}
									else if(sql_grossTonnage >= 1000)
									{
										rules_isInvalid = "false";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is valid for "+rules_tradingCertificateTypeCode
									}
								}
								else if(vesselValidation.getStringCellValue().trim() == "N")
								{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "true";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
								}
								break;
							}						
							else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "PLRIn" || rules_tradingCertificateTypeCode == "PLREx"))
							{
								Cell vesselValidation = vesselRow.getCell(m);
								if(vesselValidation.getStringCellValue().trim() == "Y")
								{
									if(sql_passengerCarryingCapacity <12)
									{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "true";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Passenger Capacity "+sql_passengerCarryingCapacity+" is invalid for "+rules_tradingCertificateTypeCode
									}
									else if(sql_passengerCarryingCapacity >= 12)
									{
										rules_isInvalid = "false";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Passenger Capacity "+sql_passengerCarryingCapacity+" is valid for "+rules_tradingCertificateTypeCode
									}
								}
								else if(vesselValidation.getStringCellValue().trim() == "N")
								{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "true";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
								}
								break;
							}
							else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "NWRC"))
							{
								Cell vesselValidation = vesselRow.getCell(m);
								if(vesselValidation.getStringCellValue().trim() == "Y")
								{
									if(sql_grossTonnage <300)
									{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "true";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is invalid for "+rules_tradingCertificateTypeCode
									}
									else if(sql_grossTonnage >= 300)
									{
										rules_isInvalid = "false";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is valid for "+rules_tradingCertificateTypeCode
									}
								}
								else if(vesselValidation.getStringCellValue().trim() == "N")
								{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "true";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
								}
								break;
							}
	
							else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "COE500M" || rules_tradingCertificateTypeCode == "COE500MSPANISH" || rules_tradingCertificateTypeCode == "COEYACHTESPENGLISH" || rules_tradingCertificateTypeCode == "COEYACHTESPSPANISH"))
							{
								Cell vesselValidation = vesselRow.getCell(m);
								if(vesselValidation.getStringCellValue().trim() == "Y")
								{
									if(sql_amount != 500000000.00)
									{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "true"
										rules_coverLimitName = sql_limitName
										rules_disabledReasonText = "Cover Limit "+"'"+sql_limitName+"'"+" is invalid for "+rules_tradingCertificateTypeCode
									}
									else if(sql_amount == 500000000.00)
									{
										rules_isInvalid = "false";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = sql_limitName
										rules_disabledReasonText = "Cover Limit "+"'"+sql_limitName+"'"+" is valid for "+rules_tradingCertificateTypeCode
									}
								}
								else if(vesselValidation.getStringCellValue().trim() == "N")
								{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "true";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
								}
								break;
							}
	
							else if(certTypeCode == rules_tradingCertificateTypeCode)
							{
								Cell vesselValidation = vesselRow.getCell(m);
							
								if(vesselValidation.getStringCellValue().trim() == "N")
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
								}
	
								else if(vesselValidation.getStringCellValue().trim() == "N")
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
					}
	
					rulesWriter.println(rules_applicationRiskId+","+rules_tradingCertificateTypeCode+","+rules_isInvalid+","+rules_isVesselTypeInvalid+","+rules_isGrossTonnageInvalid+","+rules_isPassengerCapacityInvalid+","+rules_isPolicyDateInvalid+","+rules_isCoverLimitInvalid+","+rules_coverLimitName+","+rules_disabledReasonText)
					log.info "Response according to business rules: "+rules_applicationRiskId+","+rules_tradingCertificateTypeCode+","+rules_isInvalid+","+rules_isVesselTypeInvalid+","+rules_isGrossTonnageInvalid+","+rules_isPassengerCapacityInvalid+","+rules_isPolicyDateInvalid+","+rules_isCoverLimitInvalid+","+rules_coverLimitName+","+rules_disabledReasonText
	
					if(postApi_applicationRiskId.toString().equals(rules_applicationRiskId.toString()) && postApi_tradingCertificateTypeCode.toString().toUpperCase().equals(rules_tradingCertificateTypeCode.toString().toUpperCase()) && postApi_isInvalid.toString().toUpperCase().equals(rules_isInvalid.toString().toUpperCase()) && postApi_isVesselTypeInvalid.toString().toUpperCase().equals(rules_isVesselTypeInvalid.toString().toUpperCase()) && postApi_isGrossTonnageInvalid.toString().toUpperCase().equals(rules_isGrossTonnageInvalid.toString().toUpperCase()) && postApi_isPassengerCapacityInvalid.toString().toUpperCase().equals(rules_isPassengerCapacityInvalid.toString().toUpperCase()) && postApi_isPolicyDateInvalid.toString().toUpperCase().equals(rules_isPolicyDateInvalid.toString().toUpperCase()) && postApi_isCoverLimitInvalid.toString().toUpperCase().equals(rules_isCoverLimitInvalid.toString().toUpperCase()) && postApi_coverLimitName.toString().equals(rules_coverLimitName.toString()) )
					{
						compareWriter.println(postApi_applicationRiskId+","+rules_applicationRiskId+","+postApi_tradingCertificateTypeCode+","+rules_tradingCertificateTypeCode+","+postApi_isInvalid+","+rules_isInvalid+","+postApi_isVesselTypeInvalid+","+rules_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+rules_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+rules_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+rules_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+rules_isCoverLimitInvalid+","+postApi_coverLimitName+","+rules_coverLimitName+","+postApi_disabledReasonText+","+rules_disabledReasonText+","+"Test Case Passed")
						log.info "Details are matching hence test case is passed"
					}
					else
					{
						compareWriter.println(postApi_applicationRiskId+","+rules_applicationRiskId+","+postApi_tradingCertificateTypeCode+","+rules_tradingCertificateTypeCode+","+postApi_isInvalid+","+rules_isInvalid+","+postApi_isVesselTypeInvalid+","+rules_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+rules_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+rules_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+rules_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+rules_isCoverLimitInvalid+","+postApi_coverLimitName+","+rules_coverLimitName+","+postApi_disabledReasonText+","+rules_disabledReasonText+","+"Test Case Passed")
						log.info "Details are not matching hence test case is failed"
					}		
				}
		}
		else
		{
			log.info "Failed API response is received : "+response
		}
		counter = counter+1
		log.info "Number of records vertified are : "+counter
	}

	sqlWriter.flush()
	apiWriter.flush()
	rulesWriter.flush()
	compareWriter.flush()
	
	sqlWriter.close()
	apiWriter.close()
	rulesWriter.flush()
	compareWriter.close()
}

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for POST method of Reference By Trading Certificate by Invalid Certificate***********"]]></script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>config</con:name><con:value>C:\APITesting\TradingCertificateTesting\Config\config.Properties</con:value></con:property><con:property><con:name>EndPoint</con:name><con:value>https://pandionlinedev.shipownersclub.com/tradingcertificates</con:value></con:property><con:property><con:name>ResultPath</con:name><con:value>C:\APITesting\TradingCertificateTesting\Results\Result_2021_07_27_01_13_23</con:value></con:property><con:property><con:name>SummaryFile</con:name><con:value>C:\APITesting\TradingCertificateTesting\Results\Result_2021_07_27_01_13_23\Summary.xlsx</con:value></con:property><con:property><con:name>token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImNuNnRXOElubmRJVzJKVGtqU2tkTlFQakR1UXo3cmMwQ0pEbkpyRlhKVjgifQ.eyJpc3MiOiJodHRwczovL3NoaXBvd25lcnNjb3VrZGV2YjJjLmIyY2xvZ2luLmNvbS81YzJlY2M4OC1kNmNlLTRkNDEtYThhMi05ZTAzMTc0N2M3ZTYvdjIuMC8iLCJleHAiOjE2Mjg4NTI5MTIsIm5iZiI6MTYyODg0OTMxMiwiYXVkIjoiZTQ4NTNjODItNjhjYS00OTk5LTk3NjAtZmZjODkxODk4NGJhIiwic3ViIjoiNzdmM2YyOGEtZjQ3MS00MTU4LWI4ZTAtNjYwNTY2OTExNGYyIiwiZ3JvdXBzIjpbIlVuZGVyd3JpdGluZyJdLCJzY3AiOiJ0cmFkaW5nLWNlcnRzLndyaXRlIGRvY3VtZW50LnJlYWQgdHJhZGluZy1jZXJ0cy5yZWFkIiwiYXpwIjoiZmVlNTM0NTAtZDgzNC00ZTQwLWEzYWMtOWMyYzI0MmRiYjMwIiwidmVyIjoiMS4wIiwiaWF0IjoxNjI4ODQ5MzEyfQ.HpKxtHGJ8G2-quviROUOe5df_rQCrbZw85-NgU_xNCKMLBD2XDoQn6eDLV6BAtsx0wLf0n8RsoQzb3Cij4XGG4dnrTVmAuRWpbwJgL4Ti71Ix3QbYZa15Qs8jUtJ_zXxstW6j99okTZepRKGFeAcPhK1U2Xl0rMz8CRg4QwhMuh2yGTz3Mi97YuDMbCKFPuodTYuw_z76pP2IoBV5l_wPiIcz_Wuy9jJ2sX2Nl_BaBu3zhzm4uIcamV-ncIPes8FQDe3AY5mOO0SFWIlIE8Eq_4tbsA66AwFN5WwNpNs5c4NVUgsM19GRaC5Wq90jcHaOOpF50uuav8vZ8e4jrEi0A</con:value></con:property></con:properties></con:testSuite><con:testSuite id="c4d15267-47b8-4984-8eea-ffd4c89c5094" name="TestSuite_CSVReport" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="85010f2b-c43e-48a8-bc3e-06e417786ba8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_TradingCertificatePackByTradingCertificatePackIBdyGenerateDraftDocument" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="TradCertPackByTradCertPackIDByGenDraftDoc" id="aaefad3a-0b3a-4ceb-adad-9264a5d4ddbd" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST method of  Trading Certificate Pack By Trading Certificate Pack ID By Generate Draft Document************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

String sqlstmt="""
		USE tradingcertificate
		Select 
		top 10
		TC.TradingCertificatePack_Id,
		TC.Id, TC.AddressType_Id, TC.SourceSystem, TC.Reference, TC.CurrentStatus, TC.StorageId, TC.IsYacht, case when TC.IsYacht=0 then 'False' when TC.IsYacht=1 then 'True' else null end as IsYachtFlag,
		TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
		TC.isRenewal, case when TC.isRenewal = 1 then 'True' when TC.isRenewal = 0  then 'False' else NULL end as IsRenewalFlag, TC.TradingCertificateVersion as version,
		TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName, TC.JointAssuredName, TC.OwnerReference,
		TC.OwnerName,TC.OwnerDomicile,TC.OwnerEmailAddress,TC.BrokerReference,TC.BrokerName,TC.BrokerEmailAddress,TC.PolicyYear,TC.CertificateIssueDate,
		TC.EmailAddress,TC.CCEmailAddress,TC.EffectiveStartDate,TC.EffectiveEndDate,TC.PassengerCapacity,TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,
		TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,TC.VesselEnteredDate,TC.VesselFlag,TC.ImoNumber,TC.DistinctiveNumbersOrLetters,
		TC.GrossTonnage,TC.YearBuilt,TC.EngineHorsePower,TC.TradeMark,TC.Model,TC.EngineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.PortOfRegistry,
		TC.TenderReferenceList,TC.TenderOutboardReferenceList,TC.Type_Id as TradingCertificateTypeId,RT.Id as TradingCertificateTypeId, RT.Group_Id as GroupId, 
		RG.Name as TradingCertificateGroupName,RG.GroupCode as TradingCertificateGroupCode, RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName
		
		from TradingCertificate TC
		inner join ref_Type RT on RT.Id=TC.Type_Id
		inner join ref_Group RG on RG.Id=RT.Group_Id
		
		where TC.TradingCertificatePack_Id is not NULL --and TC.TradingCertificatePack_Id = 85
		order by TC.TradingCertificatePack_Id
"""		

/*ADRS.Id as AddressId, ADRS.AddressName, ADRS.AddressLine1, ADRS.AddressLine2, ADRS.AddressLine3, ADRS.StateOrCounty, ADRS.City, ADRS.Country, ADRS.PostCode, ADRS.PrimaryAddress,
		case when ADRS.PrimaryAddress=1 then 'true' when ADRS.PrimaryAddress=0 then 'false' else NULL end as PrimaryAddressFlag
		left join AddressSnapshot ADRS on ADRS.TradingCertificate_Id=TC.Id*/
		
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_POSTmethodofTradingCertificatePackByTradingCertificatePackIDByGenerateDraftDocument.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_POSTmethodofTradingCertificatePackByTradingCertificatePackIDByGenerateDraftDocument.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POSTmethodofTradingCertificatePackByTradingCertificatePackIDByGenerateDraftDocument.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_POSTmethodofTradingCertificateByTradingCertificateIDByGenerateDraftDocument"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_POSTmethodofTradingCertificateByTradingCertificateIDByGenerateDraftDocument"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POSTmethodofTradingCertificateByTradingCertificateIDByGenerateDraftDocument"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificatePackId"+","+"SQL_Id"+","+"SQL_AddressType_Id"+","+"SQL_SourceSystem"+","+"SQL_Reference"+","+"SQL_CurrentStatus"+","+"SQL_StorageId"+","+"SQL_IsYacht"+","+"SQL_IsYachtFlag"+","+"SQL_RiskId"+","+"SQL_PolicyId"+","+"SQL_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"SQL_isRenewal"+","+"SQL_IsRenewalFlag"+","+"SQL_version"+","+"SQL_RiskReference"+","+"SQL_PolicyReference"+","+"SQL_MemberReference"+","+"SQL_MemberType"+","+"SQL_MemberName"+","+"SQL_JointAssuredName"+","+"SQL_OwnerReference"+","+"SQL_OwnerName"+","+"SQL_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"SQL_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"SQL_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"SQL_CCEmailAddress"+","+"SQL_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"SQL_VesselName"+","+"SQL_VesselType"+","+"SQL_VesselTypeName"+","+"SQL_VesselEnteredDate"+","+"SQL_VesselFlag"+","+"SQL_ImoNumber"+","+"SQL_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"SQL_YearBuilt"+","+"SQL_EngineHorsePower"+","+"SQL_TradeMark"+","+"SQL_Model"+","+"SQL_EngineNo"+","+"SQL_NominatedStateFlag"+","+"SQL_NominatedStateFlagName"+","+"SQL_PortOfRegistry"+","+"SQL_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateTypeId"+","+"SQL_GroupId"+","+"SQL_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"SQL_TradingCertificateTypeCode"+","+"SQL_TradingCertificateTypeName"+","+"SQL_AddressId"+","+"SQL_AddressName"+","+"SQL_AddressLine1"+","+"SQL_AddressLine2"+","+"SQL_AddressLine3"+","+"SQL_StateOrCounty"+","+"SQL_City"+","+"SQL_Country"+","+"SQL_PostCode"+","+"SQL_PrimaryAddress"+","+"SQL_PrimaryAddressFlag")
apiWriter.println("API_TradingCertificatePackId"+","+"API_Id"+","+"API_AddressType_Id"+","+"API_SourceSystem"+","+"API_Reference"+","+"API_CurrentStatus"+","+"API_StorageId"+","+"API_IsYachtFlag"+","+"API_RiskId"+","+"API_PolicyId"+","+"API_MemberPartyId"+","+"API_OwnerPartyId"+","+"API_IsRenewalFlag"+","+"API_version"+","+"API_RiskReference"+","+"API_PolicyReference"+","+"API_MemberReference"+","+"API_MemberType"+","+"API_MemberName"+","+"API_JointAssuredName"+","+"API_OwnerReference"+","+"API_OwnerName"+","+"API_OwnerDomicile"+","+"API_OwnerEmailAddress"+","+"API_BrokerReference"+","+"API_BrokerName"+","+"API_BrokerEmailAddress"+","+"API_PolicyYear"+","+"API_CertificateIssueDate"+","+"API_EmailAddress"+","+"API_CCEmailAddress"+","+"API_EffectiveStartDate"+","+"API_EffectiveEndDate"+","+"API_PassengerCapacity"+","+"API_PolicyStartDate"+","+"API_PolicyEndDate"+","+"API_CurrencyCode"+","+"API_CoverLimitAmount"+","+"API_SignatoryState_Id"+","+"API_VesselName"+","+"API_VesselType"+","+"API_VesselTypeName"+","+"API_VesselEnteredDate"+","+"API_VesselFlag"+","+"API_ImoNumber"+","+"API_DistinctiveNumbersOrLetters"+","+"API_GrossTonnage"+","+"API_YearBuilt"+","+"API_EngineHorsePower"+","+"API_TradeMark"+","+"API_Model"+","+"API_EngineNo"+","+"API_NominatedStateFlag"+","+"API_NominatedStateFlagName"+","+"API_PortOfRegistry"+","+"API_TenderReferenceList"+","+"API_TenderOutboardReferenceList"+","+"API_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"API_GroupId"+","+"API_TradingCertificateGroupName"+","+"API_TradingCertificateGroupCode"+","+"API_TradingCertificateTypeCode"+","+"API_TradingCertificateTypeName"+","+"API_AddressId"+","+"API_AddressName"+","+"API_AddressLine1"+","+"API_AddressLine2"+","+"API_AddressLine3"+","+"API_StateOrCounty"+","+"API_City"+","+"API_Country"+","+"API_PostCode"+","+"API_PrimaryAddress")
compareWriter.println("SQL_TradingCertificatePackId"+","+"API_TradingCertificatePackId"+","+"SQL_Id"+","+"API_Id"+","+"SQL_AddressType_Id"+","+"API_AddressType_Id"+","+"SQL_SourceSystem"+","+"API_SourceSystem"+","+"SQL_Reference"+","+"API_Reference"+","+"SQL_CurrentStatus"+","+"API_CurrentStatus"+","+"SQL_StorageId"+","+"API_StorageId"+","+"SQL_RiskId"+","+"API_RiskId"+","+"SQL_PolicyId"+","+"API_PolicyId"+","+"SQL_MemberPartyId"+","+"API_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"API_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"API_BrokerPartyId"+","+"SQL_IsRenewalFlag"+","+"API_IsRenewalFlag"+","+"SQL_IsYachtFlag"+","+"API_IsYachtFlag"+","+"SQL_version"+","+"API_version"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_PolicyReference"+","+"API_PolicyReference"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberType"+","+"API_MemberType"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_JointAssuredName"+","+"API_JointAssuredName"+","+"SQL_OwnerReference"+","+"API_OwnerReference"+","+"SQL_OwnerName"+","+"API_OwnerName"+","+"SQL_OwnerDomicile"+","+"API_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"API_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"API_BrokerReference"+","+"SQL_BrokerName"+","+"API_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"API_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"API_PolicyYear"+","+"SQL_CertificateIssueDate"+","+"API_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_CCEmailAddress"+","+"API_CCEmailAddress"+","+"SQL_EffectiveStartDate"+","+"API_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"API_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"API_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"API_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"API_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"API_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"API_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"API_SignatoryState_Id"+","+"SQL_VesselName"+","+"API_VesselName"+","+"SQL_VesselType"+","+"API_VesselType"+","+"SQL_VesselTypeName"+","+"API_VesselTypeName"+","+"SQL_VesselEnteredDate"+","+"API_VesselEnteredDate"+","+"SQL_VesselFlag"+","+"API_VesselFlag"+","+"SQL_ImoNumber"+","+"API_ImoNumber"+","+"SQL_DistinctiveNumbersOrLetters"+","+"API_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"API_GrossTonnage"+","+"SQL_YearBuilt"+","+"API_YearBuilt"+","+"SQL_EngineHorsePower"+","+"API_EngineHorsePower"+","+"SQL_TradeMark"+","+"API_TradeMark"+","+"SQL_Model"+","+"API_Model"+","+"SQL_EngineNo"+","+"API_EngineNo"+","+"SQL_NominatedStateFlag"+","+"API_NominatedStateFlag"+","+"SQL_NominatedStateFlagName"+","+"API_NominatedStateFlagName"+","+"SQL_PortOfRegistry"+","+"API_PortOfRegistry"+","+"SQL_TenderReferenceList"+","+"API_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"API_TenderOutboardReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId1"+","+"SQL_GroupId"+","+"API_GroupId"+","+"SQL_TradingCertificateGroupName"+","+"API_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"API_TradingCertificateGroupCode"+","+"SQL_TradingCertificateTypeCode"+","+"API_TradingCertificateTypeCode"+","+"SQL_TradingCertificateTypeName"+","+"API_TradingCertificateTypeName" +","+ "SQL_AddressId"+","+"API_AddressId"+","+"SQL_AddressName"+","+"API_AddressName"+","+"SQL_AddressLine1"+","+"API_AddressLine1"+","+"SQL_AddressLine2"+","+"API_AddressLine2"+","+"SQL_AddressLine3"+","+"API_AddressLine3"+","+"SQL_StateOrCounty"+","+"API_StateOrCounty"+","+"SQL_City"+","+"API_City"+","+"SQL_Country"+","+"API_Country"+","+"SQL_PostCode"+","+"API_PostCode"+","+"SQL_PrimaryAddressFlag"+","+"API_PrimaryAddress"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter=0

def rows=con.rows(sqlstmt)  
int db_size=rows.size
String field=null
//log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->
	sql_TradingCertificatePackId=row.TradingCertificatePack_Id
	sql_Id=row.Id
	sql_AddressType_Id=row.AddressType_Id
	sql_SourceSystem=row.SourceSystem
	sql_Reference=row.Reference
	sql_CurrentStatus=row.CurrentStatus
	sql_StorageId=row.StorageId
	sql_IsYacht=row.IsYacht
	sql_IsYachtFlag=row.IsYachtFlag
	sql_RiskId=row.RiskId
	sql_PolicyId=row.PolicyId
	sql_MemberPartyId=row.MemberPartyId
	sql_OwnerPartyId=row.OwnerPartyId
	sql_BrokerPartyId=row.BrokerPartyId
	sql_isRenewal=row.isRenewal
	sql_IsRenewalFlag=row.IsRenewalFlag
	sql_version=row.version
	sql_RiskReference=row.RiskReference
	sql_PolicyReference=row.PolicyReference
	sql_MemberReference=row.MemberReference
	sql_MemberType=row.MemberType
	sql_MemberName=row.MemberName
	sql_MemberName=replaceComma(sql_MemberName.toString())
	sql_JointAssuredName=row.JointAssuredName
	sql_OwnerReference=row.OwnerReference
	sql_OwnerName=row.OwnerName
	sql_OwnerDomicile=row.OwnerDomicile
	sql_OwnerEmailAddress=row.OwnerEmailAddress
	sql_BrokerReference=row.BrokerReference
	sql_BrokerName=row.BrokerName
	sql_BrokerEmailAddress=row.BrokerEmailAddress
	sql_PolicyYear=row.PolicyYear
	sql_CertificateIssueDate=row.CertificateIssueDate
	sql_EmailAddress=row.EmailAddress
	sql_CCEmailAddress=row.CCEmailAddress
	sql_EffectiveStartDate=row.EffectiveStartDate
	sql_EffectiveEndDate=row.EffectiveEndDate
	sql_PassengerCapacity=row.PassengerCapacity
	sql_PolicyStartDate=row.PolicyStartDate
	sql_PolicyEndDate=row.PolicyEndDate
	sql_CurrencyCode=row.CurrencyCode
	sql_CoverLimitAmount=row.CoverLimitAmount
	sql_CoverLimitAmount=(int) sql_CoverLimitAmount
	sql_SignatoryState_Id=row.SignatoryState_Id
	sql_VesselName=row.VesselName
	sql_VesselType=row.VesselType
	sql_VesselTypeName=row.VesselTypeName
	sql_VesselEnteredDate=row.VesselEnteredDate
	sql_VesselFlag=row.VesselFlag
	sql_ImoNumber=row.ImoNumber
	sql_DistinctiveNumbersOrLetters=row.DistinctiveNumbersOrLetters
	sql_GrossTonnage=row.GrossTonnage
	sql_YearBuilt=row.YearBuilt
	sql_EngineHorsePower=row.EngineHorsePower
	sql_TradeMark=row.TradeMark
	sql_Model=row.Model
	sql_EngineNo=row.EngineNo
	sql_NominatedStateFlag=row.NominatedStateFlag
	sql_NominatedStateFlag=replaceComma(sql_NominatedStateFlag.toString())	
	sql_NominatedStateFlagName=row.NominatedStateFlagName
	sql_NominatedStateFlagName=replaceComma(sql_NominatedStateFlagName.toString())
	sql_PortOfRegistry=row.PortOfRegistry
	sql_PortOfRegistry=replaceComma(sql_PortOfRegistry.toString())	
	sql_TenderReferenceList=row.TenderReferenceList
	sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_GroupId=row.GroupId
	sql_TradingCertificateGroupName=row.tradingCertificateGroupName
	sql_TradingCertificateGroupCode=row.tradingCertificateGroupCode
	sql_TradingCertificateTypeCode=row.TradingCertificateTypeCode
	sql_TradingCertificateTypeName=row.TradingCertificateTypeName
	
	/*sql_AddressId=row.AddressId	
	sql_AddressName=row.AddressName
	sql_AddressName=replaceComma(sql_AddressName.toString())
	sql_AddressLine1=row.AddressLine1
	sql_AddressLine1=replaceComma(sql_AddressLine1.toString())
	sql_AddressLine2=row.AddressLine2
	sql_AddressLine2=replaceComma(sql_AddressLine2.toString())
	sql_AddressLine3=row.AddressLine3
	sql_AddressLine3=replaceComma(sql_AddressLine3.toString())
	sql_StateOrCounty=row.StateOrCounty
	sql_StateOrCounty=replaceComma(sql_StateOrCounty.toString())
	sql_City=row.City
	sql_City=replaceComma(sql_City.toString())
	sql_Country=row.Country
	sql_Country=replaceComma(sql_Country.toString())
	sql_PostCode=row.PostCode
	sql_PrimaryAddress=row.PrimaryAddress
	sql_PrimaryAddressFlag=row.PrimaryAddressFlag  */
	
	//sqlWriter.println(sql_TradingCertificatePackId+","+sql_Id+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_isRenewal+","+sql_IsRenewalFlag+","+sql_version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CCEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_VesselEnteredDate+","+sql_VesselFlag+","+sql_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_PortOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+sql_GroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName) /*+","+sql_AddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_PrimaryAddressFlag) */
	//log.info "SQL Response received as :"+sql_TradingCertificatePackId+","+sql_Id+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_isRenewal+","+sql_IsRenewalFlag+","+sql_version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CCEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_VesselEnteredDate+","+sql_VesselFlag+","+sql_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_PortOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+sql_GroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName  /*+","+sql_AddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_PrimaryAddressFlag  */

	String tradingCertificatePackID = sql_TradingCertificatePackId.toString()
	testRunner.testCase.setPropertyValue("tradingCertificatePackID",tradingCertificatePackID)
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	//Run the test Step with name
	testRunner.runTestStepByName('POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument')
	String req='${POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		if (!jsonRes.HasError)
		{
			int size = jsonRes.tradingCertificates.id.size().toInteger()
			for(int i=0; i<size; i++)
			{
				if(tradingCertificatePackID == jsonRes.id.toString() && sql_Id.toString() == jsonRes.tradingCertificates.id[i].toString())
				{
					api_TradingCertificatePackId=jsonRes.id
					api_Id=jsonRes.tradingCertificates.id[i]
					api_AddressType_Id=jsonRes.tradingCertificates.addressTypeId[i]
					api_SourceSystem=jsonRes.tradingCertificates.sourceSystem[i]
					api_Reference=jsonRes.tradingCertificates.reference[i]
					api_CurrentStatus=jsonRes.tradingCertificates.currentStatus[i]
					api_StorageId=jsonRes.tradingCertificates.storageId[i]
					api_RiskId=jsonRes.tradingCertificates.riskId[i]
					api_PolicyId=jsonRes.tradingCertificates.policyId[i]
					api_MemberPartyId=jsonRes.tradingCertificates.memberPartyId[i]
					api_OwnerPartyId=jsonRes.tradingCertificates.ownerPartyId[i]
					api_BrokerPartyId=jsonRes.tradingCertificates.brokerPartyId[i]
					api_IsRenewalFlag=jsonRes.tradingCertificates.isRenewal[i]
					api_IsYachtFlag=jsonRes.tradingCertificates.isYacht[i]
					api_version=jsonRes.tradingCertificates.version[i]
					api_RiskReference=jsonRes.tradingCertificates.riskReference[i]
					api_PolicyReference=jsonRes.tradingCertificates.policyReference[i]
					api_MemberReference=jsonRes.tradingCertificates.memberReference[i]
					api_MemberType=jsonRes.tradingCertificates.memberType[i]
					api_MemberName=jsonRes.tradingCertificates.memberName[i]
					api_MemberName=replaceComma(api_MemberName.toString())
					api_JointAssuredName=jsonRes.tradingCertificates.jointAssuredName[i]
					api_OwnerReference=jsonRes.tradingCertificates.ownerReference[i]
					api_OwnerName=jsonRes.tradingCertificates.ownerName[i]
					api_OwnerDomicile=jsonRes.tradingCertificates.ownerDomicile[i]
					api_OwnerEmailAddress=jsonRes.tradingCertificates.ownerEmailAddress[i]
					api_BrokerReference=jsonRes.tradingCertificates.brokerReference[i]
					api_BrokerName=jsonRes.tradingCertificates.brokerName[i]
					api_BrokerEmailAddress=jsonRes.tradingCertificates.brokerEmailAddress[i]
					api_PolicyYear=jsonRes.tradingCertificates.policyYear[i]
					api_CertificateIssueDate=jsonRes.tradingCertificates.certificateIssueDate[i]
					api_EmailAddress=jsonRes.tradingCertificates.emailAddress[i]
					api_CCEmailAddress=jsonRes.tradingCertificates.ccEmailAddress[i]
					api_EffectiveStartDate=jsonRes.tradingCertificates.effectiveStartDate[i]
					api_EffectiveEndDate=jsonRes.tradingCertificates.effectiveEndDate[i]
					api_PassengerCapacity=jsonRes.tradingCertificates.passengerCapacity[i]
					api_PolicyStartDate=jsonRes.tradingCertificates.policyStartDate[i]
					api_PolicyEndDate=jsonRes.tradingCertificates.policyEndDate[i]
					api_CurrencyCode=jsonRes.tradingCertificates.currencyCode[i]
					api_CoverLimitAmount=jsonRes.tradingCertificates.coverLimitAmount[i]
					api_SignatoryState_Id=jsonRes.tradingCertificates.signatoryStateId[i]
					api_VesselName=jsonRes.tradingCertificates.vesselName[i]
					api_VesselType=jsonRes.tradingCertificates.vesselType[i]
					api_VesselTypeName=jsonRes.tradingCertificates.vesselTypeName[i]
					api_VesselEnteredDate=jsonRes.tradingCertificates.vesselEnteredDate[i]
					api_VesselFlag=jsonRes.tradingCertificates.vesselFlag[i]
					api_ImoNumber=jsonRes.tradingCertificates.imoNumber[i]
					api_DistinctiveNumbersOrLetters=jsonRes.tradingCertificates.distinctiveNumbersOrLetters[i]
					api_GrossTonnage=jsonRes.tradingCertificates.grossTonnage[i]
					api_YearBuilt=jsonRes.tradingCertificates.yearBuilt[i]
					api_EngineHorsePower=jsonRes.tradingCertificates.engineHorsePower[i]
					api_TradeMark=jsonRes.tradingCertificates.trademarkAndEngineModel[i]
					api_Model=jsonRes.tradingCertificates.model[i]
					api_EngineNo=jsonRes.tradingCertificates.engineNo[i]
					api_NominatedStateFlag=jsonRes.tradingCertificates.nominatedFlagState[i]
					api_NominatedStateFlag=replaceComma(api_NominatedStateFlag.toString())	
					api_NominatedStateFlagName=jsonRes.tradingCertificates.nominatedFlagStateName[i]
					api_NominatedStateFlagName=replaceComma(api_NominatedStateFlagName.toString())				
					api_PortOfRegistry=jsonRes.tradingCertificates.portOfRegistry[i]
					api_PortOfRegistry=replaceComma(api_PortOfRegistry.toString())				
					api_TenderReferenceList=jsonRes.tradingCertificates.tenderReferenceList[i]
					api_TenderOutboardReferenceList=jsonRes.tradingCertificates.tenderOutboardReferenceList[i]
					api_TradingCertificateTypeId=jsonRes.tradingCertificates.tradingCertificateTypeId[i]
					api_TradingCertificateTypeId1=jsonRes.tradingCertificates.tradingCertificateType[i].id
					api_GroupId=jsonRes.tradingCertificates.tradingCertificateType.tradingCertificateGroup[i].id
					api_TradingCertificateGroupName=jsonRes.tradingCertificates.tradingCertificateType.tradingCertificateGroup[i].name
					api_TradingCertificateGroupCode=jsonRes.tradingCertificates.tradingCertificateType.tradingCertificateGroup[i].groupCode
					api_TradingCertificateTypeCode=jsonRes.tradingCertificates.tradingCertificateType[i].typeCode
					api_TradingCertificateTypeName=jsonRes.tradingCertificates.tradingCertificateType[i].typeName


					if(jsonRes.tradingCertificates.stateAddress[i].toString().toUpperCase() != "NULL")
					{
						String getStateAddressSQL =
						"""
						declare
						@addressid as int = """+jsonRes.tradingCertificates.stateAddress[i].id.toString().toUpperCase()+"""
						select 
						ADRS.Id as AddressId, ADRS.AddressName, ADRS.AddressLine1, ADRS.AddressLine2, ADRS.AddressLine3, 
						ADRS.StateOrCounty, ADRS.City, ADRS.Country, ADRS.PostCode, ADRS.PrimaryAddress,
						case when ADRS.PrimaryAddress=1 then 'true' when ADRS.PrimaryAddress=0 then 'false' else NULL end as PrimaryAddressFlag
						from  AddressSnapshot ADRS on ADRS.TradingCertificate_Id="""+jsonRes.tradingCertificates.id[i].toString()+""" 
						and ADRS.Id=@addressid
						"""
						con.eachRow(getStateAddressSQL)
						{
							getRows->
							//sql_StateAddressTypeName=getRows.AddressTypeName
							//sql_StateAddressTypeId=getRows.AddressTypeId
							sql_StateAddressId=getRows.AddressId
							sql_StateAddressName=getRows.AddressName
							sql_StateAddressName = removeComma(sql_StateAddressName.toString())
							sql_StateAddressLine1=getRows.AddressLine1
							sql_StateAddressLine1 = removeComma(sql_StateAddressLine1.toString())
							sql_StateAddressLine2=getRows.AddressLine2
							sql_StateAddressLine2 = removeComma(sql_StateAddressLine2.toString())
							sql_StateAddressLine3=getRows.AddressLine3
							sql_StateAddressLine3 = removeComma(sql_StateAddressLine3.toString())
							sql_StateStateOrCounty=getRows.StateOrCounty
							sql_StateStateOrCounty = removeComma(sql_StateStateOrCounty.toString())
							sql_StateCity=getRows.City
							sql_StateCity = removeComma(sql_StateCity.toString())
							sql_StateCountry=getRows.Country
							sql_StateCountry = removeComma(sql_StateCountry.toString())
							sql_StatePostCode=getRows.PostCode
							sql_StateIsPrimaryAddress=getRows.IsPrimaryAddress
							log.info "State Address is received as ==> "+sql_StateAddressTypeName+","+sql_StateAddressTypeId+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress
						}
						api_StateAddressId=jsonRes.tradingCertificates.stateAddress[i].id
						api_StateAddressName=jsonRes.tradingCertificates.stateAddress[i].addressName
						api_StateAddressName=replaceComma(api_AddressName.toString())
						api_StateAddressLine1=jsonRes.tradingCertificates.stateAddress[i].addressLine1
						api_StateAddressLine1=replaceComma(api_AddressLine1.toString())
						api_StateAddressLine2=jsonRes.tradingCertificates.stateAddress[i].addressLine2
						api_StateAddressLine2=replaceComma(api_AddressLine2.toString())
						api_StateAddressLine3=jsonRes.tradingCertificates.stateAddress[i].addressLine3
						api_StateAddressLine3=replaceComma(api_AddressLine3.toString())
						api_StateStateOrCounty=jsonRes.tradingCertificates.stateAddress[i].stateOrCounty
						api_StateAddressCity=jsonRes.tradingCertificates.stateAddress[i].city
						api_StateAddressCountry=jsonRes.tradingCertificates.stateAddress[i].country
						api_StateAddressPostCode=jsonRes.tradingCertificates.stateAddress[i].postCode
						api_StateAddressPrimaryAddress=jsonRes.tradingCertificates.stateAddress[i].primaryAddress

						/*apiWriter.println(api_TradingCertificatePackId+","+api_Id+","+api_AddressType_Id+","+api_SourceSystem+","+api_Reference+","+api_CurrentStatus+","+api_StorageId+","+api_IsYachtFlag+","+api_RiskId+","+api_PolicyId+","+api_MemberPartyId+","+api_OwnerPartyId+","+api_IsRenewalFlag+","+api_version+","+api_RiskReference+","+api_PolicyReference+","+api_MemberReference+","+api_MemberType+","+api_MemberName+","+api_JointAssuredName+","+api_OwnerReference+","+api_OwnerName+","+api_OwnerDomicile+","+api_OwnerEmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_BrokerEmailAddress+","+api_PolicyYear+","+api_CertificateIssueDate+","+api_EmailAddress+","+api_CCEmailAddress+","+api_EffectiveStartDate+","+api_EffectiveEndDate+","+api_PassengerCapacity+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_CurrencyCode+","+api_CoverLimitAmount+","+api_SignatoryState_Id+","+api_VesselName+","+api_VesselType+","+api_VesselTypeName+","+api_VesselEnteredDate+","+api_VesselFlag+","+api_ImoNumber+","+api_DistinctiveNumbersOrLetters+","+api_GrossTonnage+","+api_YearBuilt+","+api_EngineHorsePower+","+api_TradeMark+","+api_Model+","+api_EngineNo+","+api_NominatedStateFlag+","+api_NominatedStateFlagName+","+api_PortOfRegistry+","+api_TenderReferenceList+","+api_TenderOutboardReferenceList+","+api_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+api_GroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode+","+api_TradingCertificateTypeCode+","+api_TradingCertificateTypeName +","+api_AddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_PrimaryAddress)
						log.info "API Response is :" +api_TradingCertificatePackId+","+api_Id+","+api_AddressType_Id+","+api_SourceSystem+","+api_Reference+","+api_CurrentStatus+","+api_StorageId+","+api_IsYachtFlag+","+api_RiskId+","+api_PolicyId+","+api_MemberPartyId+","+api_OwnerPartyId+","+api_IsRenewalFlag+","+api_version+","+api_RiskReference+","+api_PolicyReference+","+api_MemberReference+","+api_MemberType+","+api_MemberName+","+api_JointAssuredName+","+api_OwnerReference+","+api_OwnerName+","+api_OwnerDomicile+","+api_OwnerEmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_BrokerEmailAddress+","+api_PolicyYear+","+api_CertificateIssueDate+","+api_EmailAddress+","+api_CCEmailAddress+","+api_EffectiveStartDate+","+api_EffectiveEndDate+","+api_PassengerCapacity+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_CurrencyCode+","+api_CoverLimitAmount+","+api_SignatoryState_Id+","+api_VesselName+","+api_VesselType+","+api_VesselTypeName+","+api_VesselEnteredDate+","+api_VesselFlag+","+api_ImoNumber+","+api_DistinctiveNumbersOrLetters+","+api_GrossTonnage+","+api_YearBuilt+","+api_EngineHorsePower+","+api_TradeMark+","+api_Model+","+api_EngineNo+","+api_NominatedStateFlag+","+api_NominatedStateFlagName+","+api_PortOfRegistry+","+api_TenderReferenceList+","+api_TenderOutboardReferenceList+","+api_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+api_GroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode+","+api_TradingCertificateTypeCode+","+api_TradingCertificateTypeName +","+api_AddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_PrimaryAddress

						
						if(api_TradingCertificatePackId.toString().toUpperCase().equals(sql_TradingCertificatePackId.toString().toUpperCase()) && api_Id.toString().toUpperCase().equals(sql_Id.toString().toUpperCase()) && api_AddressType_Id.toString().toUpperCase().equals(sql_AddressType_Id.toString().toUpperCase()) && api_SourceSystem.toString().toUpperCase().equals(sql_SourceSystem.toString().toUpperCase()) && api_Reference.toString().toUpperCase().equals(sql_Reference.toString().toUpperCase()) && api_CurrentStatus.toString().toUpperCase().equals(sql_CurrentStatus.toString().toUpperCase()) && api_StorageId.toString().toUpperCase().equals(sql_StorageId.toString().toUpperCase()) && api_RiskId.toString().toUpperCase().equals(sql_RiskId.toString().toUpperCase()) && api_PolicyId.toString().toUpperCase().equals(sql_PolicyId.toString().toUpperCase()) && api_MemberPartyId.toString().toUpperCase().equals(sql_MemberPartyId.toString().toUpperCase()) && api_OwnerPartyId.toString().toUpperCase().equals(sql_OwnerPartyId.toString().toUpperCase()) && api_BrokerPartyId.toString().toUpperCase().equals(sql_BrokerPartyId.toString().toUpperCase()) && api_IsRenewalFlag.toString().toUpperCase().equals(sql_IsRenewalFlag.toString().toUpperCase()) && api_IsYachtFlag.toString().toUpperCase().equals(sql_IsYachtFlag.toString().toUpperCase()) && api_version.toString().toUpperCase().equals(sql_version.toString().toUpperCase()) && api_RiskReference.toString().toUpperCase().equals(sql_RiskReference.toString().toUpperCase()) && api_PolicyReference.toString().toUpperCase().equals(sql_PolicyReference.toString().toUpperCase()) && api_MemberReference.toString().toUpperCase().equals(sql_MemberReference.toString().toUpperCase()) && api_MemberType.toString().toUpperCase().equals(sql_MemberType.toString().toUpperCase()) && api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && api_JointAssuredName.toString().toUpperCase().equals(sql_JointAssuredName.toString().toUpperCase()) && api_OwnerReference.toString().toUpperCase().equals(sql_OwnerReference.toString().toUpperCase()) && api_OwnerName.toString().toUpperCase().equals(sql_OwnerName.toString().toUpperCase()) && api_OwnerDomicile.toString().toUpperCase().equals(sql_OwnerDomicile.toString().toUpperCase()) && api_OwnerEmailAddress.toString().toUpperCase().equals(sql_OwnerEmailAddress.toString().toUpperCase()) && api_BrokerReference.toString().toUpperCase().equals(sql_BrokerReference.toString().toUpperCase()) && api_BrokerName.toString().toUpperCase().equals(sql_BrokerName.toString().toUpperCase()) && api_BrokerEmailAddress.toString().toUpperCase().equals(sql_BrokerEmailAddress.toString().toUpperCase()) && api_PolicyYear.toString().toUpperCase().equals(sql_PolicyYear.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && api_CCEmailAddress.toString().toUpperCase().equals(sql_CCEmailAddress.toString().toUpperCase()) && api_PassengerCapacity.toString().toUpperCase().equals(sql_PassengerCapacity.toString().toUpperCase()) && api_CurrencyCode.toString().toUpperCase().equals(sql_CurrencyCode.toString().toUpperCase()) && api_CoverLimitAmount.toString().toUpperCase().equals(sql_CoverLimitAmount.toString().toUpperCase()) && api_SignatoryState_Id.toString().toUpperCase().equals(sql_SignatoryState_Id.toString().toUpperCase()) && api_VesselName.toString().toUpperCase().equals(sql_VesselName.toString().toUpperCase()) && api_VesselType.toString().toUpperCase().equals(sql_VesselType.toString().toUpperCase()) && api_VesselTypeName.toString().toUpperCase().equals(sql_VesselTypeName.toString().toUpperCase()) && api_VesselFlag.toString().toUpperCase().equals(sql_VesselFlag.toString().toUpperCase()) && api_ImoNumber.toString().toUpperCase().equals(sql_ImoNumber.toString().toUpperCase()) && api_DistinctiveNumbersOrLetters.toString().toUpperCase().equals(sql_DistinctiveNumbersOrLetters.toString().toUpperCase()) && api_GrossTonnage.toString().toUpperCase().equals(sql_GrossTonnage.toString().toUpperCase()) && api_YearBuilt.toString().toUpperCase().equals(sql_YearBuilt.toString().toUpperCase()) && api_EngineHorsePower.toString().toUpperCase().equals(sql_EngineHorsePower.toString().toUpperCase()) && api_TradeMark.toString().toUpperCase().equals(sql_TradeMark.toString().toUpperCase()) && api_Model.toString().toUpperCase().equals(sql_Model.toString().toUpperCase()) && api_EngineNo.toString().toUpperCase().equals(sql_EngineNo.toString().toUpperCase()) && api_NominatedStateFlag.toString().toUpperCase().equals(sql_NominatedStateFlag.toString().toUpperCase()) && api_NominatedStateFlagName.toString().toUpperCase().equals(sql_NominatedStateFlagName.toString().toUpperCase()) && api_PortOfRegistry.toString().toUpperCase().equals(sql_PortOfRegistry.toString().toUpperCase()) && api_TenderReferenceList.toString().toUpperCase().equals(sql_TenderReferenceList.toString().toUpperCase()) && api_TenderOutboardReferenceList.toString().toUpperCase().equals(sql_TenderOutboardReferenceList.toString().toUpperCase()) && api_TradingCertificateTypeId.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) && api_TradingCertificateTypeId1.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) && api_GroupId.toString().toUpperCase().equals(sql_GroupId.toString().toUpperCase()) && api_TradingCertificateGroupName.toString().toUpperCase().equals(sql_TradingCertificateGroupName.toString().toUpperCase()) && api_TradingCertificateGroupCode.toString().toUpperCase().equals(sql_TradingCertificateGroupCode.toString().toUpperCase()) && api_TradingCertificateTypeCode.toString().toUpperCase().equals(sql_TradingCertificateTypeCode.toString().toUpperCase()) && api_TradingCertificateTypeName.toString().toUpperCase().equals(sql_TradingCertificateTypeName.toString().toUpperCase()) && api_AddressId.toString().equals(sql_AddressId.toString()) && api_AddressName.toString().toUpperCase().equals(sql_AddressName.toString().toUpperCase()) && api_AddressLine1.toString().toUpperCase().equals(sql_AddressLine1.toString().toUpperCase()) && api_AddressLine2.toString().toUpperCase().equals(sql_AddressLine2.toString().toUpperCase()) && api_AddressLine3.toString().toUpperCase().equals(sql_AddressLine3.toString().toUpperCase()) && api_StateOrCounty.toString().toUpperCase().equals(sql_StateOrCounty.toString().toUpperCase()) && api_City.toString().toUpperCase().equals(sql_City.toString().toUpperCase()) &&  api_Country.toString().toUpperCase().equals(sql_Country.toString().toUpperCase()) &&  api_PostCode.toString().toUpperCase().equals(sql_PostCode.toString().toUpperCase()) && api_PrimaryAddress.toString().toUpperCase().equals(sql_PrimaryAddressFlag.toString().toUpperCase()))
						{
							compareWriter.println(sql_TradingCertificatePackId+","+api_TradingCertificatePackId+","+sql_Id+","+api_Id+","+sql_AddressType_Id+","+api_AddressType_Id+","+sql_SourceSystem+","+api_SourceSystem+","+sql_Reference+","+api_Reference+","+sql_CurrentStatus+","+api_CurrentStatus+","+sql_StorageId+","+api_StorageId+","+sql_RiskId+","+api_RiskId+","+sql_PolicyId+","+api_PolicyId+","+sql_MemberPartyId+","+api_MemberPartyId+","+sql_OwnerPartyId+","+api_OwnerPartyId+","+sql_BrokerPartyId+","+api_BrokerPartyId+","+sql_IsRenewalFlag+","+api_IsRenewalFlag+","+sql_IsYachtFlag+","+api_IsYachtFlag+","+sql_version+","+api_version+","+sql_RiskReference+","+api_RiskReference+","+sql_PolicyReference+","+api_PolicyReference+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberType+","+api_MemberType+","+sql_MemberName+","+api_MemberName+","+sql_JointAssuredName+","+api_JointAssuredName+","+sql_OwnerReference+","+api_OwnerReference+","+sql_OwnerName+","+api_OwnerName+","+sql_OwnerDomicile+","+api_OwnerDomicile+","+sql_OwnerEmailAddress+","+api_OwnerEmailAddress+","+sql_BrokerReference+","+api_BrokerReference+","+sql_BrokerName+","+api_BrokerName+","+sql_BrokerEmailAddress+","+api_BrokerEmailAddress+","+sql_PolicyYear+","+api_PolicyYear+","+sql_CertificateIssueDate+","+api_CertificateIssueDate+","+sql_EmailAddress+","+api_EmailAddress+","+sql_CCEmailAddress+","+api_CCEmailAddress+","+sql_EffectiveStartDate+","+api_EffectiveStartDate+","+sql_EffectiveEndDate+","+api_EffectiveEndDate+","+sql_PassengerCapacity+","+api_PassengerCapacity+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_CoverLimitAmount+","+api_CoverLimitAmount+","+sql_SignatoryState_Id+","+api_SignatoryState_Id+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_VesselTypeName+","+api_VesselTypeName+","+sql_VesselEnteredDate+","+api_VesselEnteredDate+","+sql_VesselFlag+","+api_VesselFlag+","+sql_ImoNumber+","+api_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+api_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TradeMark+","+api_TradeMark+","+sql_Model+","+api_Model+","+sql_EngineNo+","+api_EngineNo+","+sql_NominatedStateFlag+","+api_NominatedStateFlag+","+sql_NominatedStateFlagName+","+api_NominatedStateFlagName+","+sql_PortOfRegistry+","+api_PortOfRegistry+","+sql_TenderReferenceList+","+api_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+sql_GroupId+","+api_GroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_PrimaryAddressFlag+","+api_PrimaryAddress+","+"Test Case Passed")
							log.info "Details are matching, hence test case is passed"
						}
						else
						{
							compareWriter.println(sql_TradingCertificatePackId+","+api_TradingCertificatePackId+","+sql_Id+","+api_Id+","+sql_AddressType_Id+","+api_AddressType_Id+","+sql_SourceSystem+","+api_SourceSystem+","+sql_Reference+","+api_Reference+","+sql_CurrentStatus+","+api_CurrentStatus+","+sql_StorageId+","+api_StorageId+","+sql_RiskId+","+api_RiskId+","+sql_PolicyId+","+api_PolicyId+","+sql_MemberPartyId+","+api_MemberPartyId+","+sql_OwnerPartyId+","+api_OwnerPartyId+","+sql_BrokerPartyId+","+api_BrokerPartyId+","+sql_IsRenewalFlag+","+api_IsRenewalFlag+","+sql_IsYachtFlag+","+api_IsYachtFlag+","+sql_version+","+api_version+","+sql_RiskReference+","+api_RiskReference+","+sql_PolicyReference+","+api_PolicyReference+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberType+","+api_MemberType+","+sql_MemberName+","+api_MemberName+","+sql_JointAssuredName+","+api_JointAssuredName+","+sql_OwnerReference+","+api_OwnerReference+","+sql_OwnerName+","+api_OwnerName+","+sql_OwnerDomicile+","+api_OwnerDomicile+","+sql_OwnerEmailAddress+","+api_OwnerEmailAddress+","+sql_BrokerReference+","+api_BrokerReference+","+sql_BrokerName+","+api_BrokerName+","+sql_BrokerEmailAddress+","+api_BrokerEmailAddress+","+sql_PolicyYear+","+api_PolicyYear+","+sql_CertificateIssueDate+","+api_CertificateIssueDate+","+sql_EmailAddress+","+api_EmailAddress+","+sql_CCEmailAddress+","+api_CCEmailAddress+","+sql_EffectiveStartDate+","+api_EffectiveStartDate+","+sql_EffectiveEndDate+","+api_EffectiveEndDate+","+sql_PassengerCapacity+","+api_PassengerCapacity+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_CoverLimitAmount+","+api_CoverLimitAmount+","+sql_SignatoryState_Id+","+api_SignatoryState_Id+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_VesselTypeName+","+api_VesselTypeName+","+sql_VesselEnteredDate+","+api_VesselEnteredDate+","+sql_VesselFlag+","+api_VesselFlag+","+sql_ImoNumber+","+api_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+api_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TradeMark+","+api_TradeMark+","+sql_Model+","+api_Model+","+sql_EngineNo+","+api_EngineNo+","+sql_NominatedStateFlag+","+api_NominatedStateFlag+","+sql_NominatedStateFlagName+","+api_NominatedStateFlagName+","+sql_PortOfRegistry+","+api_PortOfRegistry+","+sql_TenderReferenceList+","+api_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+sql_GroupId+","+api_GroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_PrimaryAddress+","+api_PrimaryAddress+","+"Test Case Failed")
							log.info "Details are not matching, hence test case is failed"
						}
						break; */
					
					}
					else
					{
						api_StateAddressId=null
						api_StateAddressName=null
						api_StateAddressLine1=null
						api_StateAddressLine2=null
						api_StateAddressLine3=null
						api_StateStateOrCounty=null
						api_StateAddressCity=null
						api_StateAddressCountry=null
						api_StateAddressPostCode=null
						api_StateAddressPrimaryAddress=null
					}

					if(jsonRes.tradingCertificates.ownerAddress[i].toString().toUpperCase() != "NULL")
				 	{
				 		String getOwnerAddressSQL =
						"""
						declare
						@addressid as int = """+jsonRes.tradingCertificates.ownerAddress[i].id.toString().toUpperCase()+"""
						select ADRS.Id as AddressId, ADRS.AddressName, ADRS.AddressLine1, ADRS.AddressLine2, ADRS.AddressLine3, ADRS.StateOrCounty, ADRS.City, ADRS.Country, ADRS.PostCode, ADRS.PrimaryAddress,
						case when ADRS.PrimaryAddress=1 then 'true' when ADRS.PrimaryAddress=0 then 'false' else NULL end as PrimaryAddressFlag
						left join AddressSnapshot ADRS on ADRS.TradingCertificate_Id="""+jsonRes.tradingCertificates.id[i].toString()+""" and ADRS.Id=@addressid
						"""
						con.eachRow(getOwnerAddressSQL)
						{
							getRows->
							//sql_OwnerAddressTypeName=getRows.AddressTypeName
							//sql_OwnerAddressTypeId=getRows.AddressTypeId
							sql_OwnerAddressId=getRows.AddressId
							sql_OwnerAddressName=getRows.AddressName
							sql_OwnerAddressName = removeComma(sql_StateAddressName.toString())
							sql_OwnerAddressLine1=getRows.AddressLine1
							sql_OwnerAddressLine1 = removeComma(sql_StateAddressLine1.toString())
							sql_OwnerAddressLine2=getRows.AddressLine2
							sql_OwnerAddressLine2 = removeComma(sql_StateAddressLine2.toString())
							sql_OwnerAddressLine3=getRows.AddressLine3
							sql_OwnerAddressLine3 = removeComma(sql_StateAddressLine3.toString())
							sql_OwnerStateOrCounty=getRows.StateOrCounty
							sql_OwnerStateOrCounty = removeComma(sql_StateStateOrCounty.toString())
							sql_OwnerCity=getRows.City
							sql_OwnerCity = removeComma(sql_StateCity.toString())
							sql_OwnerCountry=getRows.Country
							sql_OwnerCountry = removeComma(sql_StateCountry.toString())
							sql_OwnerPostCode=getRows.PostCode
							sql_OwnerIsPrimaryAddress=getRows.IsPrimaryAddress
							//log.info "Owner Address is received as ==> "+sql_StateAddressTypeName+","+sql_StateAddressTypeId+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress
						}
						api_OwnerAddressId=jsonRes.tradingCertificates.ownerAddress[i].id
						api_OwnerAddressName=jsonRes.tradingCertificates.ownerAddress[i].addressName
						api_OwnerAddressLine1=jsonRes.tradingCertificates.ownerAddress[i].addressLine1
						api_OwnerAddressLine2=jsonRes.tradingCertificates.ownerAddress[i].addressLine2
						api_OwnerAddressLine3=jsonRes.tradingCertificates.ownerAddress[i].addressLine3
						api_OwnerStateOrCounty=jsonRes.tradingCertificates.ownerAddress[i].stateOrCounty
						api_OwnerCity=jsonRes.tradingCertificates.ownerAddress[i].city
						api_OwnerCountry=jsonRes.tradingCertificates.ownerAddress[i].country
						api_OwnerPostCode=jsonRes.tradingCertificates.ownerAddress[i].postCode
						api_OwnerPrimaryAddress=jsonRes.tradingCertificates.ownerAddress[i].primaryAddress

						
					}
					else
					{
						api_OwnerAddressId=null
						api_OwnerAddressName=null
						api_OwnerAddressLine1=null
						api_OwnerAddressLine2=null
						api_OwnerAddressLine3=null
						api_OwnerStateOrCounty=null
						api_OwnerAddressCity=null
						api_OwnerAddressCountry=null
						api_OwnerAddressPostCode=null
						api_OwnerAddressPrimaryAddress=null
					}

					if(jsonRes.tradingCertificates.brokerAddress[i].toString().toUpperCase() != "NULL")
					{
						String getBrokerAddressSQL =
						"""
						declare
						@addressid as int = """+jsonRes.tradingCertificates.brokerAddress[i].id.toString().toUpperCase()+"""
						select ADRS.Id as AddressId, ADRS.AddressName, ADRS.AddressLine1, ADRS.AddressLine2, ADRS.AddressLine3, ADRS.StateOrCounty, ADRS.City, ADRS.Country, ADRS.PostCode, ADRS.PrimaryAddress,
						case when ADRS.PrimaryAddress=1 then 'true' when ADRS.PrimaryAddress=0 then 'false' else NULL end as PrimaryAddressFlag
						left join AddressSnapshot ADRS on ADRS.TradingCertificate_Id="""+jsonRes.tradingCertificates.id[i].toString()+""" and ADRS.Id=@addressid
						"""
						con.eachRow(getBrokerAddressSQL)
						{
							getRows->
							//sql_BrokerAddressTypeName=getRows.AddressTypeName
							//sql_BrokerAddressTypeId=getRows.AddressTypeId
							sql_BrokerAddressId=getRows.AddressId
							sql_BrokerAddressName=getRows.AddressName
							sql_BrokerAddressName = removeComma(sql_StateAddressName.toString())
							sql_BrokerAddressLine1=getRows.AddressLine1
							sql_BrokerAddressLine1 = removeComma(sql_StateAddressLine1.toString())
							sql_BrokerAddressLine2=getRows.AddressLine2
							sql_BrokerAddressLine2 = removeComma(sql_StateAddressLine2.toString())
							sql_BrokerAddressLine3=getRows.AddressLine3
							sql_BrokerAddressLine3 = removeComma(sql_StateAddressLine3.toString())
							sql_BrokerStateOrCounty=getRows.StateOrCounty
							sql_BrokerStateOrCounty = removeComma(sql_StateStateOrCounty.toString())
							sql_BrokerCity=getRows.City
							sql_BrokerCity = removeComma(sql_StateCity.toString())
							sql_BrokerCountry=getRows.Country
							sql_BrokerCountry = removeComma(sql_StateCountry.toString())
							sql_BrokerPostCode=getRows.PostCode
							sql_BrokerIsPrimaryAddress=getRows.IsPrimaryAddress

						}
						api_BrokerAddressId=jsonRes.tradingCertificates.brokerAddress[i].id
						api_BrokerAddressName=jsonRes.tradingCertificates.brokerAddress[i].addressName
						api_BrokerAddressLine1=jsonRes.tradingCertificates.brokerAddress[i].addressLine1
						api_BrokerAddressLine2=jsonRes.tradingCertificates.brokerAddress[i].addressLine2
						api_BrokerAddressLine3=jsonRes.tradingCertificates.brokerAddress[i].addressLine3
						api_BrokerStateOrCounty=jsonRes.tradingCertificates.brokerAddress[i].stateOrCounty
						api_BrokerCity=jsonRes.tradingCertificates.brokerAddress[i].city
						api_BrokerCountry=jsonRes.tradingCertificates.brokerAddress[i].country
						api_BrokerPostCode=jsonRes.tradingCertificates.brokerAddress[i].postCode
						api_BrokerPrimaryAddress=jsonRes.tradingCertificates.brokerAddress[i].primaryAddress

						
					}
					else
					{
						api_BrokerAddressId=null
						api_BrokerAddressName=null
						api_BrokerAddressLine1=null
						api_BrokerAddressLine2=null
						api_BrokerAddressLine3=null
						api_BrokerStateOrCounty=null
						api_BrokerAddressCity=null
						api_BrokerAddressCountry=null
						api_BrokerAddressPostCode=null
						api_BrokerAddressPrimaryAddress=null
					}

					
					if(jsonRes.tradingCertificates.memberAddress[i].toString().toUpperCase() != "NULL")
					{
						String getMemberAddressSQL =
						"""
						declare
						@addressid as int = """+jsonRes.tradingCertificates.memberAddress[i].id.toString().toUpperCase()+"""
						select ADRS.Id as AddressId, ADRS.AddressName, ADRS.AddressLine1, ADRS.AddressLine2, ADRS.AddressLine3, ADRS.StateOrCounty, ADRS.City, ADRS.Country, ADRS.PostCode, ADRS.PrimaryAddress,
						case when ADRS.PrimaryAddress=1 then 'true' when ADRS.PrimaryAddress=0 then 'false' else NULL end as PrimaryAddressFlag
						left join AddressSnapshot ADRS on ADRS.TradingCertificate_Id="""+jsonRes.tradingCertificates.id[i].toString()+""" and ADRS.Id=@addressid
						"""
						con.eachRow(getMemberAddressSQL)
						{
							getRows->
							//sql_MemberAddressTypeName=getRows.AddressTypeName
							//sql_MemberAddressTypeId=getRows.AddressTypeId
							sql_MemberAddressId=getRows.AddressId
							sql_MemberAddressName=getRows.AddressName
							sql_MemberAddressName = removeComma(sql_StateAddressName.toString())
							sql_MemberAddressLine1=getRows.AddressLine1
							sql_MemberAddressLine1 = removeComma(sql_StateAddressLine1.toString())
							sql_MemberAddressLine2=getRows.AddressLine2
							sql_MemberAddressLine2 = removeComma(sql_StateAddressLine2.toString())
							sql_MemberAddressLine3=getRows.AddressLine3
							sql_MemberAddressLine3 = removeComma(sql_StateAddressLine3.toString())
							sql_MemberStateOrCounty=getRows.StateOrCounty
							sql_MemberStateOrCounty = removeComma(sql_StateStateOrCounty.toString())
							sql_MemberCity=getRows.City
							sql_MemberCity = removeComma(sql_StateCity.toString())
							sql_MemberCountry=getRows.Country
							sql_MemberCountry = removeComma(sql_StateCountry.toString())
							sql_MemberPostCode=getRows.PostCode
							sql_MemberIsPrimaryAddress=getRows.IsPrimaryAddress

						}
						api_MemberAddressId=jsonRes.tradingCertificates.memberAddress[i].id
						api_MemberAddressName=jsonRes.tradingCertificates.memberAddress[i].addressName
						api_MemberAddressLine1=jsonRes.tradingCertificates.memberAddress[i].addressLine1
						api_MemberAddressLine2=jsonRes.tradingCertificates.memberAddress[i].addressLine2
						api_MemberAddressLine3=jsonRes.tradingCertificates.memberAddress[i].addressLine3
						api_MemberStateOrCounty=jsonRes.tradingCertificates.memberAddress[i].stateOrCounty
						api_MemberCity=jsonRes.tradingCertificates.memberAddress[i].city
						api_MemberCountry=jsonRes.tradingCertificates.memberAddress[i].country
						api_MemberPostCode=jsonRes.tradingCertificates.memberAddress[i].postCode
						api_MemberPrimaryAddress=jsonRes.tradingCertificates.memberAddress[i].primaryAddress
						
					}
					else
					{
						api_MemberAddressId=null
						api_MemberAddressName=null
						api_MemberAddressLine1=null
						api_MemberAddressLine2=null
						api_MemberAddressLine3=null
						api_MemberStateOrCounty=null
						api_MemberAddressCity=null
						api_MemberAddressCountry=null
						api_MemberAddressPostCode=null
						api_MemberAddressPrimaryAddress=null
					}

					
					if(jsonRes.tradingCertificates.jointAssuredAddress[i].toString().toUpperCase() != "NULL")
					{
						String getJointAssuredAddressSQL =
						"""
						declare
						@addressid as int = """+jsonRes.tradingCertificates.jointAssuredAddress[i].id.toString().toUpperCase()+"""
						select ADRS.Id as AddressId, ADRS.AddressName, ADRS.AddressLine1, ADRS.AddressLine2, ADRS.AddressLine3, ADRS.StateOrCounty, ADRS.City, ADRS.Country, ADRS.PostCode, ADRS.PrimaryAddress,
						case when ADRS.PrimaryAddress=1 then 'true' when ADRS.PrimaryAddress=0 then 'false' else NULL end as PrimaryAddressFlag
						left join AddressSnapshot ADRS on ADRS.TradingCertificate_Id="""+jsonRes.tradingCertificates.id[i].toString()+""" and ADRS.Id=@addressid
						"""
						con.eachRow(getJointAssuredAddressSQL)
						{
							getRows->
							//sql_JointAssuredAddressTypeName=getRows.AddressTypeName
							//sql_JointAssuredAddressTypeId=getRows.AddressTypeId
							sql_JointAssuredAddressId=getRows.AddressId
							sql_JointAssuredAddressName=getRows.AddressName
							sql_JointAssuredAddressName = removeComma(sql_StateAddressName.toString())
							sql_JointAssuredAddressLine1=getRows.AddressLine1
							sql_JointAssuredAddressLine1 = removeComma(sql_StateAddressLine1.toString())
							sql_JointAssuredAddressLine2=getRows.AddressLine2
							sql_JointAssuredAddressLine2 = removeComma(sql_StateAddressLine2.toString())
							sql_JointAssuredAddressLine3=getRows.AddressLine3
							sql_JointAssuredAddressLine3 = removeComma(sql_StateAddressLine3.toString())
							sql_JointAssuredStateOrCounty=getRows.StateOrCounty
							sql_JointAssuredStateOrCounty = removeComma(sql_StateStateOrCounty.toString())
							sql_JointAssuredCity=getRows.City
							sql_JointAssuredCity = removeComma(sql_StateCity.toString())
							sql_JointAssuredCountry=getRows.Country
							sql_JointAssuredCountry = removeComma(sql_StateCountry.toString())
							sql_JointAssuredPostCode=getRows.PostCode
							sql_JointAssuredIsPrimaryAddress=getRows.IsPrimaryAddress

						}
						api_JointAssuredAddressId=jsonRes.tradingCertificates.jointAssuredAddress[i].id
						api_JointAssuredAddressName=jsonRes.tradingCertificates.jointAssuredAddress[i].addressName
						api_JointAssuredAddressLine1=jsonRes.tradingCertificates.jointAssuredAddress[i].addressLine1
						api_JointAssuredAddressLine2=jsonRes.tradingCertificates.jointAssuredAddress[i].addressLine2
						api_JointAssuredAddressLine3=jsonRes.tradingCertificates.jointAssuredAddress[i].addressLine3
						api_JointAssuredStateOrCounty=jsonRes.tradingCertificates.jointAssuredAddress[i].stateOrCounty
						api_JointAssuredCity=jsonRes.tradingCertificates.jointAssuredAddress[i].city
						api_JointAssuredCountry=jsonRes.tradingCertificates.jointAssuredAddress[i].country
						api_JointAssuredPostCode=jsonRes.tradingCertificates.jointAssuredAddress[i].postCode
						api_JointAssuredPrimaryAddress=jsonRes.tradingCertificates.jointAssuredAddress[i].primaryAddress

						
					}
					else
					{
						api_JointAssuredAddressId=null
						api_JointAssuredAddressName=null
						api_JointAssuredAddressLine1=null
						api_JointAssuredAddressLine2=null
						api_JointAssuredAddressLine3=null
						api_JointAssuredStateOrCounty=null
						api_JointAssuredAddressCity=null
						api_JointAssuredAddressCountry=null
						api_JointAssuredAddressPostCode=null
						api_JointAssuredAddressPrimaryAddress=null
					}

					sqlWriter.println(sql_TradingCertificatePackId+","+sql_Id+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_isRenewal+","+sql_IsRenewalFlag+","+sql_version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CCEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_VesselEnteredDate+","+sql_VesselFlag+","+sql_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_PortOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+sql_GroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress+","+sql_OwnerAddressTypeName+","+sql_OwnerAddressTypeId+","+sql_OwnerTradingCertificateId+","+sql_OwnerRiskReference+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressName+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress+","+sql_BrokerAddressTypeName+","+sql_BrokerAddressTypeId+","+sql_BrokerTradingCertificateId+","+sql_BrokerRiskReference+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressName+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress+","+sql_MemberAddressTypeName+","+sql_MemberAddressTypeId+","+sql_MemberTradingCertificateId+","+sql_MemberRiskReference+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressName+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress+","+sql_JointAssuredAddressTypeName+","+sql_JointAssuredAddressTypeId+","+sql_JointAssuredTradingCertificateId+","+sql_JointAssuredRiskReference+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressName+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress) /*+","+sql_AddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_PrimaryAddressFlag) */
					log.info "SQL Response received as :"+sql_TradingCertificatePackId+","+sql_Id+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_isRenewal+","+sql_IsRenewalFlag+","+sql_version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CCEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_VesselEnteredDate+","+sql_VesselFlag+","+sql_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_PortOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+sql_GroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress+","+sql_OwnerAddressTypeName+","+sql_OwnerAddressTypeId+","+sql_OwnerTradingCertificateId+","+sql_OwnerRiskReference+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressName+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress+","+sql_BrokerAddressTypeName+","+sql_BrokerAddressTypeId+","+sql_BrokerTradingCertificateId+","+sql_BrokerRiskReference+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressName+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress+","+sql_MemberAddressTypeName+","+sql_MemberAddressTypeId+","+sql_MemberTradingCertificateId+","+sql_MemberRiskReference+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressName+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress+","+sql_JointAssuredAddressTypeName+","+sql_JointAssuredAddressTypeId+","+sql_JointAssuredTradingCertificateId+","+sql_JointAssuredRiskReference+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressName+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress  /*+","+sql_AddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_PrimaryAddressFlag  */

					apiWriter.println(api_TradingCertificatePackId+","+api_Id+","+api_AddressType_Id+","+api_SourceSystem+","+api_Reference+","+api_CurrentStatus+","+api_StorageId+","+api_IsYachtFlag+","+api_RiskId+","+api_PolicyId+","+api_MemberPartyId+","+api_OwnerPartyId+","+api_IsRenewalFlag+","+api_version+","+api_RiskReference+","+api_PolicyReference+","+api_MemberReference+","+api_MemberType+","+api_MemberName+","+api_JointAssuredName+","+api_OwnerReference+","+api_OwnerName+","+api_OwnerDomicile+","+api_OwnerEmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_BrokerEmailAddress+","+api_PolicyYear+","+api_CertificateIssueDate+","+api_EmailAddress+","+api_CCEmailAddress+","+api_EffectiveStartDate+","+api_EffectiveEndDate+","+api_PassengerCapacity+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_CurrencyCode+","+api_CoverLimitAmount+","+api_SignatoryState_Id+","+api_VesselName+","+api_VesselType+","+api_VesselTypeName+","+api_VesselEnteredDate+","+api_VesselFlag+","+api_ImoNumber+","+api_DistinctiveNumbersOrLetters+","+api_GrossTonnage+","+api_YearBuilt+","+api_EngineHorsePower+","+api_TradeMark+","+api_Model+","+api_EngineNo+","+api_NominatedStateFlag+","+api_NominatedStateFlagName+","+api_PortOfRegistry+","+api_TenderReferenceList+","+api_TenderOutboardReferenceList+","+api_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+api_GroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode+","+api_TradingCertificateTypeCode+","+api_TradingCertificateTypeName +","+ api_StateAddressId+","+api_StateAddressName+","+api_StateAddressLine1+","+api_StateAddressLine2+","+api_StateAddressName+","+api_StateStateOrCounty+","+api_StateCity+","+api_StateCountry+","+api_StatePostCode+","+api_StateIsPrimaryAddress+","+api_OwnerAddressTypeName+","+api_OwnerAddressTypeId+","+api_OwnerTradingCertificateId+","+api_OwnerRiskReference+","+api_OwnerAddressId+","+api_OwnerAddressName+","+api_OwnerAddressLine1+","+api_OwnerAddressLine2+","+api_OwnerAddressName+","+api_OwnerStateOrCounty+","+api_OwnerCity+","+api_OwnerCountry+","+api_OwnerPostCode+","+api_OwnerIsPrimaryAddress+","+api_BrokerAddressTypeName+","+api_BrokerAddressTypeId+","+api_BrokerTradingCertificateId+","+api_BrokerRiskReference+","+api_BrokerAddressId+","+api_BrokerAddressName+","+api_BrokerAddressLine1+","+api_BrokerAddressLine2+","+api_BrokerAddressName+","+api_BrokerStateOrCounty+","+api_BrokerCity+","+api_BrokerCountry+","+api_BrokerPostCode+","+api_BrokerIsPrimaryAddress+","+api_MemberAddressTypeName+","+api_MemberAddressTypeId+","+api_MemberTradingCertificateId+","+api_MemberRiskReference+","+api_MemberAddressId+","+api_MemberAddressName+","+api_MemberAddressLine1+","+api_MemberAddressLine2+","+api_MemberAddressName+","+api_MemberStateOrCounty+","+api_MemberCity+","+api_MemberCountry+","+api_MemberPostCode+","+api_MemberIsPrimaryAddress+","+api_JointAssuredAddressTypeName+","+api_JointAssuredAddressTypeId+","+api_JointAssuredTradingCertificateId+","+api_JointAssuredRiskReference+","+api_JointAssuredAddressId+","+api_JointAssuredAddressName+","+api_JointAssuredAddressLine1+","+api_JointAssuredAddressLine2+","+api_JointAssuredAddressName+","+api_JointAssuredStateOrCounty+","+api_JointAssuredCity+","+api_JointAssuredCountry+","+api_JointAssuredPostCode+","+api_JointAssuredIsPrimaryAddress)  /* +","+api_AddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_PrimaryAddress)  */
					log.info "API Response is :" +api_TradingCertificatePackId+","+api_Id+","+api_AddressType_Id+","+api_SourceSystem+","+api_Reference+","+api_CurrentStatus+","+api_StorageId+","+api_IsYachtFlag+","+api_RiskId+","+api_PolicyId+","+api_MemberPartyId+","+api_OwnerPartyId+","+api_IsRenewalFlag+","+api_version+","+api_RiskReference+","+api_PolicyReference+","+api_MemberReference+","+api_MemberType+","+api_MemberName+","+api_JointAssuredName+","+api_OwnerReference+","+api_OwnerName+","+api_OwnerDomicile+","+api_OwnerEmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_BrokerEmailAddress+","+api_PolicyYear+","+api_CertificateIssueDate+","+api_EmailAddress+","+api_CCEmailAddress+","+api_EffectiveStartDate+","+api_EffectiveEndDate+","+api_PassengerCapacity+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_CurrencyCode+","+api_CoverLimitAmount+","+api_SignatoryState_Id+","+api_VesselName+","+api_VesselType+","+api_VesselTypeName+","+api_VesselEnteredDate+","+api_VesselFlag+","+api_ImoNumber+","+api_DistinctiveNumbersOrLetters+","+api_GrossTonnage+","+api_YearBuilt+","+api_EngineHorsePower+","+api_TradeMark+","+api_Model+","+api_EngineNo+","+api_NominatedStateFlag+","+api_NominatedStateFlagName+","+api_PortOfRegistry+","+api_TenderReferenceList+","+api_TenderOutboardReferenceList+","+api_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+api_GroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode+","+api_TradingCertificateTypeCode+","+api_TradingCertificateTypeName  +","+ api_StateAddressId+","+api_StateAddressName+","+api_StateAddressLine1+","+api_StateAddressLine2+","+api_StateAddressName+","+api_StateStateOrCounty+","+api_StateCity+","+api_StateCountry+","+api_StatePostCode+","+api_StateIsPrimaryAddress+","+api_OwnerAddressTypeName+","+api_OwnerAddressTypeId+","+api_OwnerTradingCertificateId+","+api_OwnerRiskReference+","+api_OwnerAddressId+","+api_OwnerAddressName+","+api_OwnerAddressLine1+","+api_OwnerAddressLine2+","+api_OwnerAddressName+","+api_OwnerStateOrCounty+","+api_OwnerCity+","+api_OwnerCountry+","+api_OwnerPostCode+","+api_OwnerIsPrimaryAddress+","+api_BrokerAddressTypeName+","+api_BrokerAddressTypeId+","+api_BrokerTradingCertificateId+","+api_BrokerRiskReference+","+api_BrokerAddressId+","+api_BrokerAddressName+","+api_BrokerAddressLine1+","+api_BrokerAddressLine2+","+api_BrokerAddressName+","+api_BrokerStateOrCounty+","+api_BrokerCity+","+api_BrokerCountry+","+api_BrokerPostCode+","+api_BrokerIsPrimaryAddress+","+api_MemberAddressTypeName+","+api_MemberAddressTypeId+","+api_MemberTradingCertificateId+","+api_MemberRiskReference+","+api_MemberAddressId+","+api_MemberAddressName+","+api_MemberAddressLine1+","+api_MemberAddressLine2+","+api_MemberAddressName+","+api_MemberStateOrCounty+","+api_MemberCity+","+api_MemberCountry+","+api_MemberPostCode+","+api_MemberIsPrimaryAddress+","+api_JointAssuredAddressTypeName+","+api_JointAssuredAddressTypeId+","+api_JointAssuredTradingCertificateId+","+api_JointAssuredRiskReference+","+api_JointAssuredAddressId+","+api_JointAssuredAddressName+","+api_JointAssuredAddressLine1+","+api_JointAssuredAddressLine2+","+api_JointAssuredAddressName+","+api_JointAssuredStateOrCounty+","+api_JointAssuredCity+","+api_JointAssuredCountry+","+api_JointAssuredPostCode+","+api_JointAssuredIsPrimaryAddress /* +","+api_AddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_PrimaryAddress  */



					if(api_TradingCertificatePackId.toString().toUpperCase().equals(sql_TradingCertificatePackId.toString().toUpperCase()) && api_Id.toString().toUpperCase().equals(sql_Id.toString().toUpperCase()) && api_AddressType_Id.toString().toUpperCase().equals(sql_AddressType_Id.toString().toUpperCase()) && api_SourceSystem.toString().toUpperCase().equals(sql_SourceSystem.toString().toUpperCase()) && api_Reference.toString().toUpperCase().equals(sql_Reference.toString().toUpperCase()) && api_CurrentStatus.toString().toUpperCase().equals(sql_CurrentStatus.toString().toUpperCase()) && api_StorageId.toString().toUpperCase().equals(sql_StorageId.toString().toUpperCase()) && api_RiskId.toString().toUpperCase().equals(sql_RiskId.toString().toUpperCase()) && api_PolicyId.toString().toUpperCase().equals(sql_PolicyId.toString().toUpperCase()) && api_MemberPartyId.toString().toUpperCase().equals(sql_MemberPartyId.toString().toUpperCase()) && api_OwnerPartyId.toString().toUpperCase().equals(sql_OwnerPartyId.toString().toUpperCase()) && api_BrokerPartyId.toString().toUpperCase().equals(sql_BrokerPartyId.toString().toUpperCase()) && api_IsRenewalFlag.toString().toUpperCase().equals(sql_IsRenewalFlag.toString().toUpperCase()) && api_IsYachtFlag.toString().toUpperCase().equals(sql_IsYachtFlag.toString().toUpperCase()) && api_version.toString().toUpperCase().equals(sql_version.toString().toUpperCase()) && api_RiskReference.toString().toUpperCase().equals(sql_RiskReference.toString().toUpperCase()) && api_PolicyReference.toString().toUpperCase().equals(sql_PolicyReference.toString().toUpperCase()) && api_MemberReference.toString().toUpperCase().equals(sql_MemberReference.toString().toUpperCase()) && api_MemberType.toString().toUpperCase().equals(sql_MemberType.toString().toUpperCase()) && api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && api_JointAssuredName.toString().toUpperCase().equals(sql_JointAssuredName.toString().toUpperCase()) && api_OwnerReference.toString().toUpperCase().equals(sql_OwnerReference.toString().toUpperCase()) && api_OwnerName.toString().toUpperCase().equals(sql_OwnerName.toString().toUpperCase()) && api_OwnerDomicile.toString().toUpperCase().equals(sql_OwnerDomicile.toString().toUpperCase()) && api_OwnerEmailAddress.toString().toUpperCase().equals(sql_OwnerEmailAddress.toString().toUpperCase()) && api_BrokerReference.toString().toUpperCase().equals(sql_BrokerReference.toString().toUpperCase()) && api_BrokerName.toString().toUpperCase().equals(sql_BrokerName.toString().toUpperCase()) && api_BrokerEmailAddress.toString().toUpperCase().equals(sql_BrokerEmailAddress.toString().toUpperCase()) && api_PolicyYear.toString().toUpperCase().equals(sql_PolicyYear.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && api_CCEmailAddress.toString().toUpperCase().equals(sql_CCEmailAddress.toString().toUpperCase()) && api_PassengerCapacity.toString().toUpperCase().equals(sql_PassengerCapacity.toString().toUpperCase()) && api_CurrencyCode.toString().toUpperCase().equals(sql_CurrencyCode.toString().toUpperCase()) && api_CoverLimitAmount.toString().toUpperCase().equals(sql_CoverLimitAmount.toString().toUpperCase()) && api_SignatoryState_Id.toString().toUpperCase().equals(sql_SignatoryState_Id.toString().toUpperCase()) && api_VesselName.toString().toUpperCase().equals(sql_VesselName.toString().toUpperCase()) && api_VesselType.toString().toUpperCase().equals(sql_VesselType.toString().toUpperCase()) && api_VesselTypeName.toString().toUpperCase().equals(sql_VesselTypeName.toString().toUpperCase()) && api_VesselFlag.toString().toUpperCase().equals(sql_VesselFlag.toString().toUpperCase()) && api_ImoNumber.toString().toUpperCase().equals(sql_ImoNumber.toString().toUpperCase()) && api_DistinctiveNumbersOrLetters.toString().toUpperCase().equals(sql_DistinctiveNumbersOrLetters.toString().toUpperCase()) && api_GrossTonnage.toString().toUpperCase().equals(sql_GrossTonnage.toString().toUpperCase()) && api_YearBuilt.toString().toUpperCase().equals(sql_YearBuilt.toString().toUpperCase()) && api_EngineHorsePower.toString().toUpperCase().equals(sql_EngineHorsePower.toString().toUpperCase()) && api_TradeMark.toString().toUpperCase().equals(sql_TradeMark.toString().toUpperCase()) && api_Model.toString().toUpperCase().equals(sql_Model.toString().toUpperCase()) && api_EngineNo.toString().toUpperCase().equals(sql_EngineNo.toString().toUpperCase()) && api_NominatedStateFlag.toString().toUpperCase().equals(sql_NominatedStateFlag.toString().toUpperCase()) && api_NominatedStateFlagName.toString().toUpperCase().equals(sql_NominatedStateFlagName.toString().toUpperCase()) && api_PortOfRegistry.toString().toUpperCase().equals(sql_PortOfRegistry.toString().toUpperCase()) && api_TenderReferenceList.toString().toUpperCase().equals(sql_TenderReferenceList.toString().toUpperCase()) && api_TenderOutboardReferenceList.toString().toUpperCase().equals(sql_TenderOutboardReferenceList.toString().toUpperCase()) && api_TradingCertificateTypeId.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) && api_TradingCertificateTypeId1.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) && api_GroupId.toString().toUpperCase().equals(sql_GroupId.toString().toUpperCase()) && api_TradingCertificateGroupName.toString().toUpperCase().equals(sql_TradingCertificateGroupName.toString().toUpperCase()) && api_TradingCertificateGroupCode.toString().toUpperCase().equals(sql_TradingCertificateGroupCode.toString().toUpperCase()) && api_TradingCertificateTypeCode.toString().toUpperCase().equals(sql_TradingCertificateTypeCode.toString().toUpperCase()) && api_TradingCertificateTypeName.toString().toUpperCase().equals(sql_TradingCertificateTypeName.toString().toUpperCase()) && 
						
						api_StateAddressId.toString().equals(sql_StateAddressId.toString()) && 
						api_StateAddressName.toString().toUpperCase().equals(sql_StateAddressName.toString().toUpperCase()) && 
						api_StateAddressLine1.toString().toUpperCase().equals(sql_StateAddressLine1.toString().toUpperCase()) && 
						api_StateAddressLine2.toString().toUpperCase().equals(sql_StateAddressLine2.toString().toUpperCase()) && 
						api_StateAddressLine3.toString().toUpperCase().equals(sql_StateAddressLine3.toString().toUpperCase()) && 
						api_StateAddressStateOrCounty.toString().toUpperCase().equals(sql_StateStateOrCounty.toString().toUpperCase()) && 
						api_StateAddressCity.toString().toUpperCase().equals(sql_StateCity.toString().toUpperCase()) && 
						api_StateAddressCountry.toString().toUpperCase().equals(sql_StateCountry.toString().toUpperCase()) && 
						api_StateAddressPostCode.toString().toUpperCase().equals(sql_StatePostCode.toString().toUpperCase()) && 
						api_StateAddressPrimaryAddress.toString().toUpperCase().equals(sql_StateIsPrimaryAddress.toString().toUpperCase()) && 
						api_OwnerAddressId.toString().equals(sql_OwnerAddressId.toString()) && 
						api_OwnerAddressName.toString().toUpperCase().equals(sql_OwnerAddressName.toString().toUpperCase()) && 
						api_OwnerAddressLine1.toString().toUpperCase().equals(sql_OwnerAddressLine1.toString().toUpperCase()) && 
						api_OwnerAddressLine2.toString().toUpperCase().equals(sql_OwnerAddressLine2.toString().toUpperCase()) && 
						api_OwnerAddressLine3.toString().toUpperCase().equals(sql_OwnerAddressLine3.toString().toUpperCase()) && 
						api_OwnerAddressStateOrCounty.toString().toUpperCase().equals(sql_OwnerStateOrCounty.toString().toUpperCase()) && 
						api_OwnerAddressCity.toString().toUpperCase().equals(sql_OwnerCity.toString().toUpperCase()) && 
						api_OwnerAddressCountry.toString().toUpperCase().equals(sql_OwnerCountry.toString().toUpperCase()) && 
						api_OwnerAddressPostCode.toString().toUpperCase().equals(sql_OwnerPostCode.toString().toUpperCase()) && 
						api_OwnerAddressPrimaryAddress.toString().toUpperCase().equals(sql_OwnerIsPrimaryAddress.toString().toUpperCase()) && 
						api_BrokerAddressId.toString().equals(sql_BrokerAddressId.toString()) && 
						api_BrokerAddressName.toString().toUpperCase().equals(sql_BrokerAddressName.toString().toUpperCase()) && 
						api_BrokerAddressLine1.toString().toUpperCase().equals(sql_BrokerAddressLine1.toString().toUpperCase()) && 
						api_BrokerAddressLine2.toString().toUpperCase().equals(sql_BrokerAddressLine2.toString().toUpperCase()) && 
						api_BrokerAddressLine3.toString().toUpperCase().equals(sql_BrokerAddressLine3.toString().toUpperCase()) && 
						api_BrokerAddressStateOrCounty.toString().toUpperCase().equals(sql_BrokerStateOrCounty.toString().toUpperCase()) && 
						api_BrokerAddressCity.toString().toUpperCase().equals(sql_BrokerCity.toString().toUpperCase()) && 
						api_BrokerAddressCountry.toString().toUpperCase().equals(sql_BrokerCountry.toString().toUpperCase()) && 
						api_BrokerAddressPostCode.toString().toUpperCase().equals(sql_BrokerPostCode.toString().toUpperCase()) && 
						api_BrokerAddressPrimaryAddress.toString().toUpperCase().equals(sql_BrokerIsPrimaryAddress.toString().toUpperCase()) && 
						api_MemberAddressId.toString().equals(sql_MemberAddressId.toString()) && 
						api_MemberAddressName.toString().toUpperCase().equals(sql_MemberAddressName.toString().toUpperCase()) && 
						api_MemberAddressLine1.toString().toUpperCase().equals(sql_MemberAddressLine1.toString().toUpperCase()) && 
						api_MemberAddressLine2.toString().toUpperCase().equals(sql_MemberAddressLine2.toString().toUpperCase()) && 
						api_MemberAddressLine3.toString().toUpperCase().equals(sql_MemberAddressLine3.toString().toUpperCase()) && 
						api_MemberAddressStateOrCounty.toString().toUpperCase().equals(sql_MemberStateOrCounty.toString().toUpperCase()) && 
						api_MemberAddressCity.toString().toUpperCase().equals(sql_MemberCity.toString().toUpperCase()) && 
						api_MemberAddressCountry.toString().toUpperCase().equals(sql_MemberCountry.toString().toUpperCase()) && 
						api_MemberAddressPostCode.toString().toUpperCase().equals(sql_MemberPostCode.toString().toUpperCase()) && 
						api_MemberAddressPrimaryAddress.toString().toUpperCase().equals(sql_MemberIsPrimaryAddress.toString().toUpperCase()) && 
						api_JointAssuredAddressId.toString().equals(sql_JointAssuredAddressId.toString()) && 
						api_JointAssuredAddressName.toString().toUpperCase().equals(sql_JointAssuredAddressName.toString().toUpperCase()) && 
						api_JointAssuredAddressLine1.toString().toUpperCase().equals(sql_JointAssuredAddressLine1.toString().toUpperCase()) && 
						api_JointAssuredAddressLine2.toString().toUpperCase().equals(sql_JointAssuredAddressLine2.toString().toUpperCase()) && 
						api_JointAssuredAddressLine3.toString().toUpperCase().equals(sql_JointAssuredAddressLine3.toString().toUpperCase()) && 
						api_JointAssuredAddressStateOrCounty.toString().toUpperCase().equals(sql_JointAssuredStateOrCounty.toString().toUpperCase()) && 
						api_JointAssuredAddressCity.toString().toUpperCase().equals(sql_JointAssuredCity.toString().toUpperCase()) && 
						api_JointAssuredAddressCountry.toString().toUpperCase().equals(sql_JointAssuredCountry.toString().toUpperCase()) && 
						api_JointAssuredAddressPostCode.toString().toUpperCase().equals(sql_JointAssuredPostCode.toString().toUpperCase()) && 
						api_JointAssuredAddressPrimaryAddress.toString().toUpperCase().equals(sql_JointAssuredIsPrimaryAddress.toString().toUpperCase())
						
						)

						
						{
							compareWriter.println(sql_TradingCertificatePackId+","+api_TradingCertificatePackId+","+sql_Id+","+api_Id+","+sql_AddressType_Id+","+api_AddressType_Id+","+sql_SourceSystem+","+api_SourceSystem+","+sql_Reference+","+api_Reference+","+sql_CurrentStatus+","+api_CurrentStatus+","+sql_StorageId+","+api_StorageId+","+sql_RiskId+","+api_RiskId+","+sql_PolicyId+","+api_PolicyId+","+sql_MemberPartyId+","+api_MemberPartyId+","+sql_OwnerPartyId+","+api_OwnerPartyId+","+sql_BrokerPartyId+","+api_BrokerPartyId+","+sql_IsRenewalFlag+","+api_IsRenewalFlag+","+sql_IsYachtFlag+","+api_IsYachtFlag+","+sql_version+","+api_version+","+sql_RiskReference+","+api_RiskReference+","+sql_PolicyReference+","+api_PolicyReference+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberType+","+api_MemberType+","+sql_MemberName+","+api_MemberName+","+sql_JointAssuredName+","+api_JointAssuredName+","+sql_OwnerReference+","+api_OwnerReference+","+sql_OwnerName+","+api_OwnerName+","+sql_OwnerDomicile+","+api_OwnerDomicile+","+sql_OwnerEmailAddress+","+api_OwnerEmailAddress+","+sql_BrokerReference+","+api_BrokerReference+","+sql_BrokerName+","+api_BrokerName+","+sql_BrokerEmailAddress+","+api_BrokerEmailAddress+","+sql_PolicyYear+","+api_PolicyYear+","+sql_CertificateIssueDate+","+api_CertificateIssueDate+","+sql_EmailAddress+","+api_EmailAddress+","+sql_CCEmailAddress+","+api_CCEmailAddress+","+sql_EffectiveStartDate+","+api_EffectiveStartDate+","+sql_EffectiveEndDate+","+api_EffectiveEndDate+","+sql_PassengerCapacity+","+api_PassengerCapacity+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_CoverLimitAmount+","+api_CoverLimitAmount+","+sql_SignatoryState_Id+","+api_SignatoryState_Id+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_VesselTypeName+","+api_VesselTypeName+","+sql_VesselEnteredDate+","+api_VesselEnteredDate+","+sql_VesselFlag+","+api_VesselFlag+","+sql_ImoNumber+","+api_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+api_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TradeMark+","+api_TradeMark+","+sql_Model+","+api_Model+","+sql_EngineNo+","+api_EngineNo+","+sql_NominatedStateFlag+","+api_NominatedStateFlag+","+sql_NominatedStateFlagName+","+api_NominatedStateFlagName+","+sql_PortOfRegistry+","+api_PortOfRegistry+","+sql_TenderReferenceList+","+api_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+sql_GroupId+","+api_GroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName   +","+api_StateAddressId+","+sql_StateAddressId+","+api_StateAddressName+","+sql_StateAddressName+","+api_StateAddressLine1+","+sql_StateAddressLine1+","+api_StateAddressLine2+","+sql_StateAddressLine2+","+api_StateAddressLine3+","+sql_StateAddressLine3+","+api_StateAddressStateOrCounty+","+sql_StateStateOrCounty+","+api_StateAddressCity+","+sql_StateCity+","+api_StateAddressCountry+","+sql_StateCountry+","+api_StateAddressPostCode+","+sql_StatePostCode+","+api_StateAddressPrimaryAddress+","+sql_StateIsPrimaryAddress+","+api_OwnerAddressId+","+sql_OwnerAddressId+","+api_OwnerAddressName+","+sql_OwnerAddressName+","+api_OwnerAddressLine1+","+sql_OwnerAddressLine1+","+api_OwnerAddressLine2+","+sql_OwnerAddressLine2+","+api_OwnerAddressLine3+","+sql_OwnerAddressLine3+","+api_OwnerAddressStateOrCounty+","+sql_OwnerStateOrCounty+","+api_OwnerAddressCity+","+sql_OwnerCity+","+api_OwnerAddressCountry+","+sql_OwnerCountry+","+api_OwnerAddressPostCode+","+sql_OwnerPostCode+","+api_OwnerAddressPrimaryAddress+","+sql_OwnerIsPrimaryAddress+","+api_BrokerAddressId+","+sql_BrokerAddressId+","+api_BrokerAddressName+","+sql_BrokerAddressName+","+api_BrokerAddressLine1+","+sql_BrokerAddressLine1+","+api_BrokerAddressLine2+","+sql_BrokerAddressLine2+","+api_BrokerAddressLine3+","+sql_BrokerAddressLine3+","+api_BrokerAddressStateOrCounty+","+sql_BrokerStateOrCounty+","+api_BrokerAddressCity+","+sql_BrokerCity+","+api_BrokerAddressCountry+","+sql_BrokerCountry+","+api_BrokerAddressPostCode+","+sql_BrokerPostCode+","+api_BrokerAddressPrimaryAddress+","+sql_BrokerIsPrimaryAddress+","+api_MemberAddressId+","+sql_MemberAddressId+","+api_MemberAddressName+","+sql_MemberAddressName+","+api_MemberAddressLine1+","+sql_MemberAddressLine1+","+api_MemberAddressLine2+","+sql_MemberAddressLine2+","+api_MemberAddressLine3+","+sql_MemberAddressLine3+","+api_MemberAddressStateOrCounty+","+sql_MemberStateOrCounty+","+api_MemberAddressCity+","+sql_MemberCity+","+api_MemberAddressCountry+","+sql_MemberCountry+","+api_MemberAddressPostCode+","+sql_MemberPostCode+","+api_MemberAddressPrimaryAddress+","+sql_MemberIsPrimaryAddress+","+api_JointAssuredAddressId+","+sql_JointAssuredAddressId+","+api_JointAssuredAddressName+","+sql_JointAssuredAddressName+","+api_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine1+","+api_JointAssuredAddressLine2+","+sql_JointAssuredAddressLine2+","+api_JointAssuredAddressLine3+","+sql_JointAssuredAddressLine3+","+api_JointAssuredAddressStateOrCounty+","+sql_JointAssuredStateOrCounty+","+api_JointAssuredAddressCity+","+sql_JointAssuredCity+","+api_JointAssuredAddressCountry+","+sql_JointAssuredCountry+","+api_JointAssuredAddressPostCode+","+sql_JointAssuredPostCode+","+api_JointAssuredAddressPrimaryAddress+","+"Test Case Passed")
							log.info "Details are matching, hence test case is passed"
						}
						else
						{
							compareWriter.println(sql_TradingCertificatePackId+","+api_TradingCertificatePackId+","+sql_Id+","+api_Id+","+sql_AddressType_Id+","+api_AddressType_Id+","+sql_SourceSystem+","+api_SourceSystem+","+sql_Reference+","+api_Reference+","+sql_CurrentStatus+","+api_CurrentStatus+","+sql_StorageId+","+api_StorageId+","+sql_RiskId+","+api_RiskId+","+sql_PolicyId+","+api_PolicyId+","+sql_MemberPartyId+","+api_MemberPartyId+","+sql_OwnerPartyId+","+api_OwnerPartyId+","+sql_BrokerPartyId+","+api_BrokerPartyId+","+sql_IsRenewalFlag+","+api_IsRenewalFlag+","+sql_IsYachtFlag+","+api_IsYachtFlag+","+sql_version+","+api_version+","+sql_RiskReference+","+api_RiskReference+","+sql_PolicyReference+","+api_PolicyReference+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberType+","+api_MemberType+","+sql_MemberName+","+api_MemberName+","+sql_JointAssuredName+","+api_JointAssuredName+","+sql_OwnerReference+","+api_OwnerReference+","+sql_OwnerName+","+api_OwnerName+","+sql_OwnerDomicile+","+api_OwnerDomicile+","+sql_OwnerEmailAddress+","+api_OwnerEmailAddress+","+sql_BrokerReference+","+api_BrokerReference+","+sql_BrokerName+","+api_BrokerName+","+sql_BrokerEmailAddress+","+api_BrokerEmailAddress+","+sql_PolicyYear+","+api_PolicyYear+","+sql_CertificateIssueDate+","+api_CertificateIssueDate+","+sql_EmailAddress+","+api_EmailAddress+","+sql_CCEmailAddress+","+api_CCEmailAddress+","+sql_EffectiveStartDate+","+api_EffectiveStartDate+","+sql_EffectiveEndDate+","+api_EffectiveEndDate+","+sql_PassengerCapacity+","+api_PassengerCapacity+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_CoverLimitAmount+","+api_CoverLimitAmount+","+sql_SignatoryState_Id+","+api_SignatoryState_Id+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_VesselTypeName+","+api_VesselTypeName+","+sql_VesselEnteredDate+","+api_VesselEnteredDate+","+sql_VesselFlag+","+api_VesselFlag+","+sql_ImoNumber+","+api_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+api_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TradeMark+","+api_TradeMark+","+sql_Model+","+api_Model+","+sql_EngineNo+","+api_EngineNo+","+sql_NominatedStateFlag+","+api_NominatedStateFlag+","+sql_NominatedStateFlagName+","+api_NominatedStateFlagName+","+sql_PortOfRegistry+","+api_PortOfRegistry+","+sql_TenderReferenceList+","+api_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+sql_GroupId+","+api_GroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName    +","+api_StateAddressId+","+sql_StateAddressId+","+api_StateAddressName+","+sql_StateAddressName+","+api_StateAddressLine1+","+sql_StateAddressLine1+","+api_StateAddressLine2+","+sql_StateAddressLine2+","+api_StateAddressLine3+","+sql_StateAddressLine3+","+api_StateAddressStateOrCounty+","+sql_StateStateOrCounty+","+api_StateAddressCity+","+sql_StateCity+","+api_StateAddressCountry+","+sql_StateCountry+","+api_StateAddressPostCode+","+sql_StatePostCode+","+api_StateAddressPrimaryAddress+","+sql_StateIsPrimaryAddress+","+api_OwnerAddressId+","+sql_OwnerAddressId+","+api_OwnerAddressName+","+sql_OwnerAddressName+","+api_OwnerAddressLine1+","+sql_OwnerAddressLine1+","+api_OwnerAddressLine2+","+sql_OwnerAddressLine2+","+api_OwnerAddressLine3+","+sql_OwnerAddressLine3+","+api_OwnerAddressStateOrCounty+","+sql_OwnerStateOrCounty+","+api_OwnerAddressCity+","+sql_OwnerCity+","+api_OwnerAddressCountry+","+sql_OwnerCountry+","+api_OwnerAddressPostCode+","+sql_OwnerPostCode+","+api_OwnerAddressPrimaryAddress+","+sql_OwnerIsPrimaryAddress+","+api_BrokerAddressId+","+sql_BrokerAddressId+","+api_BrokerAddressName+","+sql_BrokerAddressName+","+api_BrokerAddressLine1+","+sql_BrokerAddressLine1+","+api_BrokerAddressLine2+","+sql_BrokerAddressLine2+","+api_BrokerAddressLine3+","+sql_BrokerAddressLine3+","+api_BrokerAddressStateOrCounty+","+sql_BrokerStateOrCounty+","+api_BrokerAddressCity+","+sql_BrokerCity+","+api_BrokerAddressCountry+","+sql_BrokerCountry+","+api_BrokerAddressPostCode+","+sql_BrokerPostCode+","+api_BrokerAddressPrimaryAddress+","+sql_BrokerIsPrimaryAddress+","+api_MemberAddressId+","+sql_MemberAddressId+","+api_MemberAddressName+","+sql_MemberAddressName+","+api_MemberAddressLine1+","+sql_MemberAddressLine1+","+api_MemberAddressLine2+","+sql_MemberAddressLine2+","+api_MemberAddressLine3+","+sql_MemberAddressLine3+","+api_MemberAddressStateOrCounty+","+sql_MemberStateOrCounty+","+api_MemberAddressCity+","+sql_MemberCity+","+api_MemberAddressCountry+","+sql_MemberCountry+","+api_MemberAddressPostCode+","+sql_MemberPostCode+","+api_MemberAddressPrimaryAddress+","+sql_MemberIsPrimaryAddress+","+api_JointAssuredAddressId+","+sql_JointAssuredAddressId+","+api_JointAssuredAddressName+","+sql_JointAssuredAddressName+","+api_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine1+","+api_JointAssuredAddressLine2+","+sql_JointAssuredAddressLine2+","+api_JointAssuredAddressLine3+","+sql_JointAssuredAddressLine3+","+api_JointAssuredAddressStateOrCounty+","+sql_JointAssuredStateOrCounty+","+api_JointAssuredAddressCity+","+sql_JointAssuredCity+","+api_JointAssuredAddressCountry+","+sql_JointAssuredCountry+","+api_JointAssuredAddressPostCode+","+sql_JointAssuredPostCode+","+api_JointAssuredAddressPrimaryAddress+","+"Test Case Failed")
							log.info "Details are not matching, hence test case is failed"
						}
						break;
				}

			}
		}
	}
	else
	{
		log.info "Failed API response received as : "+response
	}

	counter = 1+counter
	log.info "Total records tested are : "+counter
}

public String replaceComma(String field)
{
	if(field!=null)
	{
		field=field.replace(",", " " )
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for POST method of  Trading Certificate Pack By Trading Certificate Pack Id By Generate Draft Document***********"]]></script></con:config></con:testStep><con:testStep type="restrequest" name="POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument" id="8a5a9fec-a093-4bfb-8f17-198b8c771d72"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificatePacks/${#TestCase#tradingCertificatePackID}/generateDraftDocument" methodName="POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST_TradingCertificatePackByTradingCertificatePackIdByGenerateDraftDocument" id="5ce352b4-69ac-4057-98fc-3bcd474b9df5" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/76/generateDraftDocument</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tradingCertificatePackID</con:name><con:value>76</con:value></con:property></con:properties></con:testCase><con:testCase id="8b12b953-ccce-430c-8e66-318e9179f2c6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_TradingCertificatePackByTradingCertificatePackIdByIssueDocuments" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="POST_TradingCertificatePackByTradingCertificatePackIdByIssueDocuments" id="384b05f5-ead9-4300-8405-a3878c6442e6" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST method of Trading Certificate Pack By Trading Certificate Pack Id By Issue Documents************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

log.info token

def inputStream = new FileInputStream("C:\\APITesting\\TradingCertificateTesting\\ValidateCertificateRule.xls");
Workbook wb = WorkbookFactory.create(inputStream);
def ws = wb.getSheet("Rules")
def rowCount = ws.getPhysicalNumberOfRows()
//log.info "Number of rows in rule excel are"+rowCount

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_TradingCertificatePackByTCPackIdByValidate.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_TradingCertificatePackByTCPackIdByValidate.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_TradingCertificatePackByTCPackIdByValidate.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_TradingCertificatePackByTCPackIdByValidate"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_TradingCertificatePackByTCPackIdByValidate"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_TradingCertificatePackByTCPackIdByValidate"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificatePackId"+","+"SQL_TradingCertificateId"+","+"SQL_CurrentStatus"+","+"SQL_RiskReference"+","+"SQL_TypeCode"+","+"SQL_addresstypeid"+","+"SQL_SourceSystem"+","+"SQL_Reference"+","+"SQL_StorageId"+","+"SQL_RiskId"+","+"SQL_PolicyId"+","+"SQL_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"SQL_IsRenewal"+","+"SQL_IsRenewalFlag"+","+"SQL_IsYacht"+","+"SQL_IsYachtFlag"+","+"SQL_Version"+","+"SQL_RiskReference"+","+"SQL_PolicyReference"+","+"SQL_MemberReference"+","+"SQL_MemberType"+","+"sql_membername"+","+"SQL_JointAssuredName"+","+"SQL_OwnerReference"+","+"sql_ownername"+","+"SQL_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"SQL_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"SQL_policyyear"+","+"SQL_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"SQL_CcEmailAddress"+","+"SQL_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"sql_vesselname"+","+"SQL_VesselType"+","+"SQL_VesselTypeName"+","+"SQL_vesselEnteredDate"+","+"SQL_vesselFlag"+","+"SQL_imoNumber"+","+"sql_distinctivenumbersorletters"+","+"SQL_grossTonnage"+","+"SQL_yearBuilt"+","+"SQL_engineHorsePower"+","+"SQL_model"+","+"SQL_engineNo"+","+"sql_nominatedstateflag"+","+"sql_nominatedstateflagname"+","+"SQL_portOfRegistry"+","+"SQL_tenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"SQL_TradingCertificateTypeCode"+","+"SQL_TradingCertificateTypeName")
apiWriter.println("API_TradingCertificatePackId"+","+"API_TradingCertificateId"+","+"API_RiskReference"+","+"API_TradingCertificateType"+","+"API_IsValidFlag"+","+"API_ErrorList/s"+","+"API_SucceedFlag")
compareWriter.println("SQL_TradingCertificatePackId"+","+"SQL_TradingCertificateId"+","+"API_TradingCertificateId"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_TypeCode"+","+"API_TradingCertificateType"+","+"API_IsValid"+","+"allAPIErrors"+","+"API_SucceedFlag"+","+"Test Case Status")

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlStmt = 
"""
SELECT 
TOP 10
TCPK.Id as TradingCertificatePackId, TC.Id as TradingCertificateId, TC.CurrentStatus, TC.RiskReference, RT.TypeCode, TC.AddressType_Id, TC.SourceSystem, 
TC.Reference, TC.StorageId,  TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
TC.IsRenewal, case when TC.IsRenewal = 1 then 'True'    when TC.IsRenewal = 0 then 'False' else NULL end as IsRenewalFlag, TC.IsYacht,
case when TC.IsYacht = 1 then 'True' when TC.IsYacht = 0 then 'False' else NULL end as IsYachtFlag, 
TC.TradingCertificateVersion as Version, TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,
TC.JointAssuredName, TC.OwnerReference, TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,
TC.policyyear, TC.CertificateIssueDate, TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity,
TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,
TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower,
TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList, TC.TenderOutboardReferenceList,
TC.Type_Id as TradingCertificateTypeId, RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode, 
RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName, BS.BankName
from TradingCertificate TC 
inner join TradingCertificatePack TCPK  on TCPK.Id = TC.TradingCertificatePack_Id
left join ref_type RT on RT.Id=TC.Type_id
inner join ref_Group RG on RG.Id = RT.Group_Id
left join ref_addressType RAT on RAT.Id=TC.AddressType_Id
left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id
where TCPK.Id= 76
order by TCPK.Id desc, TC.Id desc
"""

def response= null
def jsonSlurper=null
def jsonResValidate=null
int counter=0
boolean flag=false;
String columnName=null
boolean ruleFlag = false;
int numberOfTcs=0

boolean packIsIssued=false

con.eachRow(sqlStmt)
{	
	row ->
	sql_TradingCertificateId=row.TradingCertificateId
	sql_RiskReference=row.RiskReference
	sql_TypeCode=row.TypeCode
	sql_TradingCertificatePackId=row.TradingCertificatePackId
	sql_addresstypeid=row.AddressType_Id
	sql_SourceSystem=row.SourceSystem
	sql_Reference=row.Reference
	sql_CurrentStatus=row.CurrentStatus
	sql_StorageId=row.StorageId
	sql_RiskId=row.RiskId
	sql_PolicyId=row.PolicyId
	sql_MemberPartyId=row.MemberPartyId
	sql_OwnerPartyId=row.OwnerPartyId
	sql_BrokerPartyId=row.BrokerPartyId
	sql_IsRenewal=row.IsRenewal
	sql_IsRenewalFlag=row.IsRenewalFlag
	sql_IsYacht=row.IsYacht
	sql_IsYachtFlag=row.IsYachtFlag
	sql_Version=row.Version
	sql_RiskReference=row.RiskReference
	sql_PolicyReference=row.PolicyReference
	sql_MemberReference=row.MemberReference
	sql_MemberType=row.MemberType
	sql_membername=row.MemberName
	sql_JointAssuredName=row.JointAssuredName
	sql_OwnerReference=row.OwnerReference
	sql_ownername=row.OwnerName
	sql_OwnerDomicile=row.OwnerDomicile
	sql_OwnerEmailAddress=row.OwnerEmailAddress
	sql_BrokerReference=row.BrokerReference
	sql_BrokerName=row.BrokerName
	sql_BrokerEmailAddress=row.BrokerEmailAddress
	sql_policyyear=row.policyyear
	sql_CertificateIssueDate=row.CertificateIssueDate
	sql_EmailAddress=row.EmailAddress
	sql_CcEmailAddress=row.CcEmailAddress
	sql_EffectiveStartDate=row.EffectiveStartDate
	sql_EffectiveEndDate=row.EffectiveEndDate
	sql_PassengerCapacity=row.PassengerCapacity
	sql_PolicyStartDate=row.PolicyStartDate
	sql_PolicyEndDate=row.PolicyEndDate
	sql_CurrencyCode=row.CurrencyCode
	sql_CoverLimitAmount=row.CoverLimitAmount
	sql_SignatoryState_Id=row.SignatoryState_Id
	sql_vesselname=row.VesselName
	sql_VesselType=row.VesselType
	sql_VesselTypeName=row.VesselTypeName
	sql_vesselEnteredDate=row.vesselEnteredDate
	sql_vesselFlag=row.vesselFlag
	sql_imoNumber=row.imoNumber
	sql_distinctivenumbersorletters=row.distinctiveNumbersOrLetters
	sql_grossTonnage=row.grossTonnage
	sql_yearBuilt=row.yearBuilt
	sql_engineHorsePower=row.engineHorsePower
	sql_model=row.model
	sql_engineNo=row.engineNo
	sql_nominatedstateflag=row.NominatedStateFlag
	sql_nominatedstateflagname=row.NominatedStateFlagName
	sql_portOfRegistry=row.portOfRegistry
	sql_tenderReferenceList=row.tenderReferenceList
	sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateGroupId=row.TradingCertificateGroupId
	sql_TradingCertificateGroupName=row.TradingCertificateGroupName
	sql_TradingCertificateGroupCode=row.TradingCertificateGroupCode
	sql_TradingCertificateTypeCode=row.TradingCertificateTypeCode
	sql_TradingCertificateTypeName=row.TradingCertificateTypeName
	sql_bankname = row.BankName
	sql_bankname = removeBracketAndComma(sql_bankname.toString())
	
	sqlWriter.println(sql_TradingCertificatePackId+","+sql_TradingCertificateId+","+sql_CurrentStatus+","+sql_RiskReference+","+sql_TypeCode+","+sql_addresstypeid+","+sql_SourceSystem+","+sql_Reference+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_membername+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_ownername+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_policyyear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_vesselname+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctivenumbersorletters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_nominatedstateflag+","+sql_nominatedstateflagname+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_bankname)
	log.info "SQL Response is received as "+sql_TradingCertificatePackId+","+sql_TradingCertificateId+","+sql_CurrentStatus+","+sql_RiskReference+","+sql_TypeCode+","+sql_addresstypeid+","+sql_SourceSystem+","+sql_Reference+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_membername+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_ownername+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_policyyear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_vesselname+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctivenumbersorletters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_nominatedstateflag+","+sql_nominatedstateflagname+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_bankname
	
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	String packId=sql_TradingCertificatePackId.toString()
	testRunner.testCase.setPropertyValue("packId", packId)
	
	testRunner.runTestStepByName("TradCertPackByTradCertPackIDByIssueDocs")
	String req = '${TradCertPackByTradCertPackIDByIssueDocs#Response}'	
	response=context.expand(req)
	log.info "API response for validate Trading Certificate pack is received as==>" +response
	jsonSlurper = new JsonSlurper()
	jsonResValidate = jsonSlurper.parseText(response)

	//Check the Status code of POST API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["TradCertPackByTradCertPackIDByIssueDocs"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)


	log.info "---------Checking for Validation-------------"
	
	if(httpStatusCode.toString().equals("200"))
	{
		if(jsonResValidate.validationResults.toString().toUpperCase() != "NULL" && jsonResValidate.succeed.toString().equals("false"))
		{
			log.info "---------Validation Error Found-------------"
			api_tradingCertificateTypeapi_tradingCertificateTypeapi_tradingCertificateType = jsonResValidate.tradingCertificateType
			String tredCertId=sql_TradingCertificateId.toString()
			testRunner.testCase.setPropertyValue("tradingCertificateId", tredCertId)
		
			testRunner.runTestStepByName("GET_TradCertByTredCertId")
			String responseBody = '${GET_TradCertByTredCertId#Response}'	
			getResponse=context.expand(responseBody)
			log.info "API response for GET Trading Certificate by Trading Certificate Id is received as==>" +getResponse
			getJsonSlurper = new JsonSlurper()
			jsonResGetById = getJsonSlurper.parseText(getResponse)
		
			//Check the Status code of GET API response
			//def groovyUtilsGet = new com.eviware.soapui.support.GroovyUtils( context )
			def httpResponseHeadersGet = context.testCase.testSteps["GET_TradCertByTredCertId"].testRequest.response.responseHeaders
			def httpStatusGet = httpResponseHeadersGet["#status#"]
			def httpStatusCodeGet = (httpStatusGet =~ "[1-5]\\d\\d")[0]
		
			//get Number of Columns from Excel
			int numberOfCells = 0;
			Iterator rowIterator = ws.rowIterator();
			if (rowIterator.hasNext())
			{
				Row headerRow = (Row) rowIterator.next();
				numberOfCells = headerRow.getPhysicalNumberOfCells();
			}
			
			numberOfTcs=jsonResValidate.validationResults.tradingCertificateId.size().toInteger()
			log.info "Number of records displayed into result=>"+numberOfTcs
			
			String allAPIErrors=""
			for (int tccounter=0; tccounter<numberOfTcs; tccounter++)
			{
				int tcId=jsonResValidate.validationResults.tradingCertificateId[tccounter]
				if(tcId.toString().equals(sql_TradingCertificateId.toString()))
				{
					log.info "Checking for record number "+(tccounter+1)+" =>"+ jsonResValidate.validationResults.tradingCertificateId[tccounter]
		
					String[] numberOfErrors= jsonResValidate.validationResults.errors
					for (int errorCounter=0; errorCounter<numberOfErrors.length; errorCounter++)
					{
						if(tcId.toString().equals(sql_TradingCertificateId.toString()))
						{
							allAPIErrors=allAPIErrors+" "+jsonResValidate.validationResults.errors[tccounter]
							api_tradingCertificateId = jsonResValidate.validationResults.tradingCertificateId[tccounter]
							api_tradingCertificateId = removeBracketAndComma(api_tradingCertificateId.toString())
							api_riskReference = jsonResValidate.validationResults.riskReference[tccounter]
							api_riskReference = removeBracketAndComma(api_riskReference.toString())
							api_tradingCertificateType = jsonResValidate.validationResults.tradingCertificateType[tccounter]
							api_tradingCertificateType = removeBracketAndComma(api_tradingCertificateType.toString())
							api_isValid = jsonResValidate.validationResults.isValid[tccounter]
							api_isValid = removeBracketAndComma(api_isValid.toString())
							api_errors=allAPIErrors
							api_errors = removeBracketAndComma(api_errors.toString())
		
							apiWriter.println(sql_TradingCertificatePackId+","+api_tradingCertificateId+","+api_riskReference+","+api_tradingCertificateType+","+api_isValid+","+api_errors+","+jsonResValidate.succeed)
							
							break;
						}//if cndition close
					}//inner for loop close
		
		
					if(jsonResValidate.validationResults.isValid[tccounter].toString().equals("false") && httpStatusCodeGet.toString().equals("200"))
					{
					//log.info "API response is received sucessfully"+response
						for(int i=1; i<rowCount; i++)
						{
							Row rows = ws.getRow(i);
							Cell cell = rows.getCell(0);
							String tradingCertificateType = cell.getStringCellValue().trim();
							//log.info "tradingCertificateType : "+tradingCertificateType
							if(tradingCertificateType.toString().equals(api_tradingCertificateType.toString()))
							{
								tradingCertificateRowNumber = i;
								String[] errorList1 = jsonResValidate.validationResults.errors[tccounter]
								ArrayList<String> errorList = new ArrayList<String>();
								
								int errorCountCheck=0;
								
								for (int k=0; k<errorList1.length; k++)
								{
									String errorDescription = errorList1[k]
									errorList.add(errorDescription)
									//log.info "For TC number "+tccounter+" reason number "+(k+1)+" : "+errorList1[k]
									String field = getFieldName(errorList[k])
									//log.info "Field Name after removing additional text is: "+field
									for (int j=0; j<=95;j++)
									{
										rows = ws.getRow(i);
										cell = rows.getCell(j);
										
										Row headerColumns = ws.getRow(0);
										Cell cols = headerColumns.getCell(j);
										columnName = cols.getStringCellValue().trim();
										
										if (cell.CELL_TYPE_STRING)
										{
											validation = cell.getStringCellValue().trim();
											//log.info "Field : "+field +"==> columnName : "+columnName+"==>Rule : "+validation
										}//if condition ended for cell type is string from validation rule excel
										else if(cell.CELL_TYPE_NUMERIC)
										{
											int numericValue = cell.getNumericCellValue().trim();
											validation = Intger.parseInt(numericValue)
											//log.info "validation in numeric : "+validation
										}
										if(field.toLowerCase().equals(columnName.toLowerCase()))
										{
											if(validation.equals("true"))
												ruleFlag=true
											else 
												ruleFlag=false
											//log.info "==>"+field.toLowerCase()+"==>"+columnName.toLowerCase()
											//break;
										}
									}
									if(ruleFlag)
									{
										switch (errorDescription)
										{
											case "'Policy Year' must not be empty.":
													if(sql_policyyear.toString().equals(""))
														sql_policyyear=null
													//log.info sql_policyyear+"<==>"+jsonResGetById.policyyear
													if(sql_policyyear.equals(jsonResGetById.policyyear))
													{
														//log.info "Rule Flag = "+ruleFlag + "  SQL value for Policy Year is : "+sql_policyyear+" and API value for Policy Year is : "+jsonResGetById.policyyear
														errorCountCheck++;
													}
													break;
											case "'Nominated Flag State' must not be empty.":
													if(sql_nominatedstateflag.equals(jsonResGetById.nominatedFlagState))
													{
														//log.info "Rule Flag = "+ruleFlag + "  SQL value for Nominated State Flag is : "+sql_nominatedstateflag+" and API value for Nominated State Flag is : "+jsonResGetById.nominatedFlagState
														errorCountCheck++;
													}
													break;
											case "Owner name required.":
											case "'Owner Name' must not be empty.":
													if(sql_ownername.equals(jsonResGetById.ownerName))
													{
														//log.info "Rule Flag = "+ruleFlag + "  SQL value for Owner name is : "+sql_ownername+" and API value for Owner name is : "+jsonResGetById.ownername
														errorCountCheck++;
													}
													break;
											case "Vessel name is required.":
											case  "'Vessel Name' must not be empty.":
													if(sql_vesselname.equals(jsonResGetById.vesselName))
													{
														//log.info "Rule Flag = "+ruleFlag + "  SQL value for Vessel name is : "+sql_vesselname+" and API value for Vessel name is : "+jsonResGetById.vesselName
														errorCountCheck++;
													}
													break;
											case "Member name is required." :
											case "'Member Name' must not be empty.":
													if(sql_membername.equals(jsonResGetById.memberName))
													{
														//log.info "Rule Flag = "+ruleFlag + "  SQL value for Member name is : "+sql_membername+" and API value for Member name is : "+jsonResGetById.memberName
														errorCountCheck++;
													}
													break;
											case "Disctinctive numbers or letters required.":
											case "'Distinctive Numbers Or Letters' must not be empty.":
													if(sql_distinctivenumbersorletters.equals(jsonResGetById.distinctiveNumbersOrLetters))
													{
														//log.info "Rule Flag = "+ruleFlag + "  SQL value for Distinctive Numbers Or Letters is : "+sql_distinctivenumbersorletters+" and API value for Distinctive Numbers Or Letters is : "+jsonResGetById.distinctiveNumbersOrLetters
														errorCountCheck++;
													}
													break;
											case "'Owner Address' must not be empty.":
													if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.ownerAddress==null)
													{
														//log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Owner Address is : "+jsonResGetById.ownerAddress
														errorCountCheck++;
													}
													break;
											case "'State Address' must not be empty.":
													if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.stateAddress==null)
													{
														//log.info "SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for State Address is : "+jsonResGetById.stateAddress
														errorCountCheck++;
													}
													break;
											case "'Joint Assured Address' must not be empty.":
													if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.jointAssuredAddress==null)
													{
														//log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for JA Address is : "+jsonResGetById.jointAssuredAddress
														errorCountCheck++;
													}
													break;
											case "'Joint Assured Name' must not be empty.":
													if(sql_jointassuredname.equals(jsonResGetById.jointAssuredName))
													{
														//log.info "Rule Flag = "+ruleFlag + "  SQL value for Joint Assured name is : "+sql_jointassuredname+" and API value for Joint Assured  name is : "+jsonResGetById.jointAssuredName
														errorCountCheck++;
													}
													break;
											case "Bank Address Bank name is required.":
													if(sql_bankname.equals(null))
														errorCountCheck++;
													break;
											case "Bank Address Address name is required." :
											case "Bank Address Address city name is required " :
											case "Bank Address Address country is required" :
														errorCountCheck++;
													break;
											case "'Broker Address' must not be empty.":
													if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.brokerAddress==null)
													{
														//log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Broker Address is : "+jsonResGetById.brokerAddress
														errorCountCheck++;
													}
													break;
											case "'Member Address' must not be empty.":
													if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.memberAddress==null)
													{
														//log.info "SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Member Address is : "+jsonResGetById.memberAddress
														errorCountCheck++;
													}
													break;
											case "Member name set but no member address found":
													if(sql_membername!=null && sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.memberAddress==null)
													{
														//log.info "SQL value for Member name is : "+sql_membername+" and API Member Name value  is : "+jsonResGetById.memberName+" and SQL value for Address Type Id is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Member Address is : "+jsonResGetById.memberAddress
														errorCountCheck++;
													}
													break;
											case "Policy limit currency code is required.":
											case "'Currency Code' must not be empty.":
													if(sql_currencycode==null && jsonResGetById.currencyCode==null)
													{
														//log.info "Rule Flag = "+ruleFlag + "  SQL value for Currency Code is : "+sql_currencycode+" and API value for Currency Code is : "+jsonResGetById.currencyCode
														errorCountCheck++;
													}
													break;
											case "Policy limit amount is required.":
											case "'Cover Limit Amount' must not be empty.":
													if(sql_coverlimitamount==null && jsonResGetById.coverLimitAmount==null)
													{
														//log.info "Rule Flag = "+ruleFlag + "  SQL value for Cover Limit Amount is : "+sql_coverlimitamount+" and API value for Cover Limit Amount is : "+jsonResGetById.coverLimitAmount
														errorCountCheck++;
													}
													break;
											case "Engine horse power is required.":
											case "'Engine Horse Power' must not be empty.":
													if(sql_enginehorsepower==null && jsonResGetById.engineHorsePower==null)
													{
														//log.info "Rule Flag = "+ruleFlag + "  SQL value for Engine Horse Power is : "+sql_enginehorsepower+" and API value for Engine Horse Power is : "+jsonResGetById.engineHorsePower
														errorCountCheck++;
													}
													break;
											case "'Trademark And Engine Model' must not be empty.":
													if(sql_trademark==null && jsonResGetById.trademarkAndEngineModel==null)
													{
														//log.info "Rule Flag = "+ruleFlag + "  SQL value for Trade Mark is : "+sql_trademark+" and API value for Trade Mark is : "+jsonResGetById.trademarkAndEngineModel
														errorCountCheck++;
													}
													break;
											case "Gross tonnage is required." :
											case "'Gross Tonnage' must not be empty.":
													if(sql_grosstonnage==null && jsonResGetById.grossTonnage==null)
													{
														//log.info "Rule Flag = "+ruleFlag + "  SQL value for Gross Tonnage is : "+sql_grosstonnage+" and API value for Gross Tonnage is : "+jsonResGetById.grossTonnage
														errorCountCheck++;
													}
													break;
											case "Year built is required.":
											case "'Year Built' must not be empty.":
													if(sql_yearbuilt==null && jsonResGetById.yearBuilt==null)
													{
														//log.info "Rule Flag = "+ruleFlag + "  SQL value for Year Built is : "+sql_yearbuilt+" and API value for Year Built is : "+jsonResGetById.yearBuilt
														errorCountCheck++;	
													}
													break;
											case "Address is required.":
														errorCountCheck++;
													break;
											case "At least a Bank is required!":
													if(jsonResGetById.tradingCertificate.equals(null) || jsonResGetById.tradingCertificate.equals(""))
														errorCountCheck++;
													break;
											case "Address city name is required." :
														errorCountCheck++;
													break;
											case "Address country is require."	:
														errorCountCheck++;
													break;
											case "Address line 1 is required." :
														errorCountCheck++;
													break;
											case "Address line 2 is required.":
														errorCountCheck++;
													break;
											case "Address line 3 is required.":
														errorCountCheck++;
													break;
											case "Address name is required.":
														errorCountCheck++;
													break;
											case "Address poscode is required.":
														errorCountCheck++;
													break;
											case "Address State is required.":				
														errorCountCheck++;
													break;
											case "Bank name is required.":
													if(sql_bankname.equals(jsonResGetById.tradingCertificateBanks.equals(null)) && sql_bankname.equals(null))
														errorCountCheck++;
													break;
											case "Broker name is required.":	
													if(sql_brokername.equals(jsonResGetById.brokerName.equals(null))&& sql_brokername.equals(null))
														errorCountCheck++;
													break;
											case "Email address is required.":	
													if(sql_emailaddress.equals(jsonResGetById.emailAddress.equals(null))&& sql_emailaddress.equals(null))	
														errorCountCheck++;
													break;
											case "Member ref is required."	:				
													if(sql_memberref.equals(jsonResGetById.memberReference.equals(null))&& sql_memberref.equals(null))	
														errorCountCheck++;
													break;
											case "Policy end date is required.":					
													if(sql_policyenddate.equals(jsonResGetById.policyEndDate.equals(null))&& sql_policyenddate.equals(null))	
														errorCountCheck++;
													break;
											case "IMO Number Is Required.":
											case "'IMO Number' must not be empty.":
											case "IMONumberIsRequired.":				
													if(sql_imonumber.equals(jsonResGetById.imoNumber.equals(null))&& sql_imonumber.equals(null))	
														errorCountCheck++;
													break;
											case "Issue Date is required.":				
													if(sql_certificateissuedate.equals(jsonResGetById.certificateIssueDate.equals(null))&& sql_certificateissuedate.equals(null))	
														errorCountCheck++;
													break;
											case "Policy reference number is required." :
													if(sql_policyref.equals(jsonResGetById.policyReference.equals(null))&& sql_policyref.equals(null))	
														errorCountCheck++;
													break;
											case "Policy start date is required." :
													if(sql_policystartdate.equals(jsonResGetById.policyStartDate.equals(null))&& sql_policystartdate.equals(null))	
														errorCountCheck++;
													break;
											case "Port of registry required." :
													if(sql_portofregistry.equals(jsonResGetById.portOfRegistry.equals(null))&& sql_portofregistry.equals(null))	
														errorCountCheck++;
													break;
											case "Risk ref is required." :
													if(sql_riskref.equals(jsonResGetById.riskReference.equals(null))&& sql_riskref.equals(null))	
														errorCountCheck++;
													break;
											case "Signatory state is required." :
														errorCountCheck++;
													break;
											case "Signatory State Address is required." :
														errorCountCheck++;
													break;
											case "Certificate sequence number is required." :
														errorCountCheck++;
													break;
											case "Vessel flag is required." :
													if(sql_vesselflag.equals(jsonResGetById.vesselFlag.equals(null))&& sql_vesselflag.equals(null))	
														errorCountCheck++;
													break;
											case "Vessel model is required." :
													if(sql_model.equals(jsonResGetById.model.equals(null))&& sql_model.equals(null))	
														errorCountCheck++;
													break;
											case "Vessel type is required." :
													if(sql_vesseltype.equals(jsonResGetById.vesselType.equals(null))&& sql_vesseltype.equals(null))	
														errorCountCheck++;
													break;
											case "Vessel trademark is required." :
													if(sql_trademark.equals(jsonResGetById.trademarkAndEngineModel.equals(null))&& sql_trademark.equals(null))	
														errorCountCheck++;
													break;
											case "Member Address Address name is required." :
											case "Member Address Address city name is required " :
											case "Member Address Address country is required" :
														errorCountCheck++;
													break;
											case "Broker Address Address name is required." :
											case "Broker Address Address city name is required " :
											case "Broker Address Address country is required" :
														errorCountCheck++;
													break;					
										}//switch case
										if(errorList1.length.equals(errorCountCheck))
										{
											log.info "--------Error count is matching hence validation results passed---------"
											log.info "--------Test Case Passed: Pack will not be issued due to validation issue---------"
											allAPIErrors=allAPIErrors.replace(",", " ")
											compareWriter.println(sql_TradingCertificatePackId+","+sql_TradingCertificateId+","+jsonResValidate.validationResults.tradingCertificateId[k]+","+sql_RiskReference+","+jsonResValidate.validationResults.riskReference[k]+","+sql_TypeCode+","+jsonResValidate.validationResults.tradingCertificateType[k]+","+jsonResValidate.validationResults.isValid[k]+","+allAPIErrors+","+jsonResValidate.succeed+","+"Test Case is passed"+","+"Error count is matching hence validation results passed")
										}
									}//if rule flag is true
									else
									{
										log.info "Error count is not matching hence validation results are wrong"
										log.info "--------Test Case Failed: Pack will not be issued due to validation issue & API response of Validation Result is wrong---------"
										allAPIErrors=allAPIErrors.replace(",", " ")
										compareWriter.println(sql_TradingCertificatePackId+","+sql_TradingCertificateId+","+jsonResValidate.validationResults.tradingCertificateId[k]+","+sql_RiskReference+","+jsonResValidate.validationResults.riskReference[k]+","+sql_TypeCode+","+jsonResValidate.validationResults.tradingCertificateType[k]+","+jsonResValidate.validationResults.isValid[k]+","+allAPIErrors+","+jsonResValidate.succeed+","+"Test Case is Failed"+","+"Validation Wrong: Error count is not matching hence validation results are wrong")
									}
								}//for loop end of number if errors into the list
							}
						}		
					}
					
				}
			}//for loop of number of trading certificates
		}
	
	
		//Validation Done, Now checking for issue status
		else if(jsonResValidate.validationResults.toString().toUpperCase() == "NULL" && jsonResValidate.succeed.toString().equals("true"))
		{
			log.info "Pack is Valid, moving to check Pack Status"
			def conStatus=Sql.newInstance(url,username,Pwd,driver)
			String sqlStmtIssuedStatus = 
			"""
			SELECT 
			TOP 1
			TCPK.Id as TradingCertificatePackId, TC.Id as TradingCertificateId, TC.CurrentStatus, TC.RiskReference, RT.TypeCode, TC.AddressType_Id, TC.SourceSystem, 
			TC.Reference, TC.StorageId,  TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
			TC.IsRenewal, case when TC.IsRenewal = 1 then 'True'    when TC.IsRenewal = 0 then 'False' else NULL end as IsRenewalFlag, TC.IsYacht,
			case when TC.IsYacht = 1 then 'True' when TC.IsYacht = 0 then 'False' else NULL end as IsYachtFlag, 
			TC.TradingCertificateVersion as Version, TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,
			TC.JointAssuredName, TC.OwnerReference, TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,
			TC.policyyear, TC.CertificateIssueDate, TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity,
			TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,
			TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower,
			TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList, TC.TenderOutboardReferenceList,
			TC.Type_Id as TradingCertificateTypeId, RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode, 
			RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName, BS.BankName
			from TradingCertificate TC 
			inner join TradingCertificatePack TCPK  on TCPK.Id = TC.TradingCertificatePack_Id
			left join ref_type RT on RT.Id=TC.Type_id
			inner join ref_Group RG on RG.Id = RT.Group_Id
			left join ref_addressType RAT on RAT.Id=TC.AddressType_Id
			left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id
			where TCPK.Id= $packId and TC.Id= $sql_TradingCertificateId
			order by TCPK.Id desc, TC.Id desc
			"""
			
			conStatus.eachRow(sqlStmtIssuedStatus)
			{	
				rowNew ->
				sql_CurrentStatusIssued=rowNew.CurrentStatus
	
				if(sql_CurrentStatusIssued.toString().toUpperCase() == "ISSUED")
				{
					packIsIssued = true
					log.info "Pack Issued Successfully, Test Case Passed"
					apiWriter.println(sql_TradingCertificatePackId+","+","+","+","+","+","+","+","+","+","+","+jsonResValidate.succeed)
					compareWriter.println(sql_TradingCertificatePackId+","+sql_TradingCertificateId+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+jsonResValidate.succeed+","+"Test Case is Passed"+","+"Pack is Validated and Issued Successfully")
				}
			}
			
			if(packIsIssued == false && sql_CurrentStatusIssued.toString().toUpperCase() == "ISSUING")
			{
				log.info "Pack Status is stuck on ISSUING, Test Case Failed"
				apiWriter.println(sql_TradingCertificatePackId+","+","+","+","+","+","+","+","+","+","+","+jsonResValidate.succeed)
				compareWriter.println(sql_TradingCertificatePackId+","+sql_TradingCertificateId+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+jsonResValidate.succeed+","+"Test Case is Failed"+","+"Pack is Validated Status is stuck on ISSUING")
			}
		}  
	
		else if(jsonResValidate.validationResults.toString().toUpperCase() == "NULL" && jsonResValidate.succeed.toString().equals("false"))
		{
			apiWriter.println(sql_TradingCertificatePackId+","+","+","+","+","+","+","+","+","+","+","+jsonResValidate.succeed)
			compareWriter.println(sql_TradingCertificatePackId+","+sql_TradingCertificateId+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+jsonResValidate.succeed+","+"Test Case is Failed"+","+"Pack is Valid but not being Issued")
			log.info "Pack is Valid but not being Issued"
		}
	
	}
	
	else if(httpStatusCode.toString().equals("401"))
	{
		log.info "Failed API response received as :"+response
		//compareWriter.println(sql_id+","+"Failed API response received as :"+response)
	}
	

	counter = 1+counter
	log.info "Total number of results verified are =>"+counter
}





			
public String getFieldName(String fieldName)
{
	if(fieldName.toString().contains("' must not be empty.") && fieldName!=null || fieldName!="")
	{
		fieldName = fieldName.replace("' must not be empty.","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if(fieldName.toString().contains("is required") && fieldName!=null || fieldName!="")
	{
		fieldName = fieldName.replace("is required","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if (fieldName.toString().contains(" set but no ") && fieldName.toString().contains(" address found")&& fieldName!=null || fieldName!="")
	//Member name set but no member address found
	{
		fieldName = fieldName.replace(" set but no ","")
		fieldName = fieldName.replace(" address found","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if(fieldName.toString().contains("At least a Bank is required!") && fieldName!=null || fieldName!="")
	{
		fieldName =  "bankName"
		fieldName = fieldName.toLowerCase()
	}
	else
		fieldName=null
	return fieldName
}
public String removeBracketAndComma(String field)
{
	if(field != null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(",","")
		}
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()
newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Trading Certificate Pack By Trading Certificate Pack Id By Issue Documents***********"]]></script></con:config></con:testStep><con:testStep type="restrequest" name="TradCertPackByTradCertPackIDByIssueDocs" id="ddca0e1f-19ff-4880-a605-e317cf04ebd0"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificatePacks/${#TestCase#packId}/issuedocuments" methodName="POST_TradingCertificatePackByTradingCertificatePackIdByIssueDocuments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TradCertPackByTradCertPackIDByIssueDocs" id="281058d6-def5-403e-b3b4-c6ecc05ea986" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/76/issuedocuments</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get_TradingCertificateByTradingCertificateId" id="c2cc0632-c633-4f60-a9b2-aa5003e2f189"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#tradingCertificateId}" methodName="GET_TradingCertificateByCertificateId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_TradingCertificateByTradingCertificateId" id="325ac480-28f6-4df9-9f1c-06b0aacf1498" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>packId</con:name><con:value>76</con:value></con:property></con:properties></con:testCase><con:testCase id="e711191e-e3c2-4e5b-8b5a-42ea7520cc90" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_PATCH_AddRemove_TCPackByTCPackId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd" id="5695daf9-64b1-4787-b89d-4965ccd93217"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificatePacks/${#TestCase#packId}/add" methodName="PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd" id="ab02dbc8-05bc-4230-87fc-4f557e9b357a" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>
	[
		134165
	]
	</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/76/add</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove" id="8f7d7f51-b907-4521-af6b-907a074199e6"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificatePacks/${#TestCase#packId}/remove" methodName="PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove" id="06da4e40-25de-41c4-b377-2ba68cc9200b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>
				[
				 134165
				]
				</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/76/remove</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="POST_TCPACK" id="f467e119-e008-4722-964d-618d9b7a4265"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificatePacks" methodName="Post_TradingcertificatePacks" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST_TCPACK" id="ef0a3539-ce3f-427e-8ca8-5ffc00ee9bc1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>
{
"createdByUserEmailAddress": "Test@test.com",
"tradingCertificates": []
}
</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="PATCH_AddRemoveTCPack" id="da00a233-63ad-445d-8dab-6649d05f6b60" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for PATCH method of Trading Certificate Packs By Trading Certificate Pack Id By Add************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_PATCH_TradingCertificatePacksByTradingCertificatePackIdByAddOrRemove.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_PATCH_TradingCertificatePacksByTradingCertificatePackIdByAddOrRemove.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_PATCH_TradingCertificatePacksByTradingCertificatePackIdByAddOrRemove.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_PATCH_TradingCertificatePacksByTradingCertificatePackIdByAddOrRemove"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_PATCH_TradingCertificatePacksByTradingCertificatePackIdByAddOrRemove"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_PATCH_TradingCertificatePacksByTradingCertificatePackIdByAddOrRemove"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificatePackId"+","+"SQL_TradingCertificateId")
apiWriter.println("API_TradingCertificateId"+","+"HTTP Status Code")
compareWriter.println("Status")

def response= null
def jsonSlurper=null
def jsonRes=null
def groovyUtils=null
def httpResponseHeaders=null
def httpStatus=null
def httpStatusCode=null
String req=null

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver)

log.info "<==Senario started for removal of linked Trading Certificate ID from Trading Certificate Pack ID (Using existing TC ID)==>"
sqlWriter.println("<==Senario started for removal of linked Trading Certificate ID from Trading Certificate Pack ID (Using existing TC ID)==>")
apiWriter.println("<==Senario started for removal of linked Trading Certificate ID from Trading Certificate Pack ID (Using existing TC ID)==>")
compareWriter.println("<==Senario started for removal of linked Trading Certificate ID from Trading Certificate Pack ID (Using existing TC ID)==>")

String sqlstmt=
"""
USE tradingcertificate
select 
top 1
TradingCertificatePack_Id as TradingCertificatePackId, Id as TradingCertificateId, * 
from TradingCertificate 
where TradingCertificatePack_Id is not null 
--and TradingCertificatePack_Id=76
order by 2 desc
"""
con.eachRow(sqlstmt)
{	
	row ->
	sql_TradingCertificatePackId=row.TradingCertificatePackId
	sql_TradingCertificateId=row.TradingCertificateId
	
	sqlWriter.println(sql_TradingCertificatePackId+","+sql_TradingCertificateId)
	log.info "Trading Certificate Pack Id=> "+sql_TradingCertificatePackId+" is linked to Trading Certificate Id => "+sql_TradingCertificateId
	
	testRunner.testCase.testSuite.setPropertyValue("token", token)
	testRunner.testCase.setPropertyValue("packId", sql_TradingCertificatePackId.toString())
	
	def newRequest = """
	[
  	$sql_TradingCertificateId
	]
	"""

	log.info "Request body for post trading certificate is : "+newRequest

	testRunner.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove"].setPropertyValue( "Request", newRequest)
	testRunner.runTestStepByName('PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove')

	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	httpResponseHeaders = context.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove"].testRequest.response.responseHeaders
	httpStatus = httpResponseHeaders["#status#"]
	httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

	log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with staus message as =>"+httpStatus
	apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with staus message as =>"+httpStatus)

	if(httpStatusCode.toString().equals("200"))
	{
		int packIdToBeChecked=sql_TradingCertificatePackId.toInteger()
		
		String newSQL=
		"""
		declare 
		@PackId as int = """+packIdToBeChecked+""",
		@TcId as int ="""+sql_TradingCertificateId+"""
		select 
		TradingCertificatePack_Id as TradingCertificatePackId, Id as TradingCertificateId
		from TradingCertificate 
		where TradingCertificatePack_Id=@PackId
		and Id=@TcId
		 union select all null,null
		order by 2 desc
		"""
		con.eachRow(newSQL)
		{	
				rows->
				 newSQL_TradingCertificatePackId=rows.TradingCertificatePackId
				 newSQL_TradingCertificateId=rows.TradingCertificateId

				 log.info "Value in DB after removing the link of TC pack id to tarding certificate "+ newSQL_TradingCertificatePackId+","+ newSQL_TradingCertificateId
	
				 if(newSQL_TradingCertificatePackId==null && newSQL_TradingCertificateId==null)
				 {
				 	log.info "Link of Trading Certificate Pack Id ("+sql_TradingCertificatePackId+") and Trading Certificate Id ("+sql_TradingCertificateId+") is removed successfully"+","+"Test case Passed"
				 	compareWriter.println("Link of Trading Certificate Pack Id ("+sql_TradingCertificatePackId+") and Trading Certificate Id ("+sql_TradingCertificateId+") is removed successfully"+","+"Test case Passed")
				 }
				 else
				 {
				 	log.info "Link of Trading Certificate Pack Id ("+sql_TradingCertificatePackId+") and Trading Certificate Id ("+sql_TradingCertificateId+") is not removed"+","+"Test case Failed"
				 	compareWriter.println("Link of Trading Certificate Pack Id ("+sql_TradingCertificatePackId+") and Trading Certificate Id ("+sql_TradingCertificateId+") is not removed"+","+"Test case Failed")
				 }
			}	
	}
	else if(httpStatusCode.toString().equals("401"))
	{
		log.info "Failed API response is received"
		log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
		apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
		compareWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
	}
	else
	{
		log.info "Failed API response is received"
		log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
		apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
		compareWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
	}
}
log.info "<==Senario finished for removal of linked Trading Certificate ID from Trading Certificate Pack ID (Using existing TC ID)==>"
sqlWriter.println("<==Senario finished for removal of linked Trading Certificate ID from Trading Certificate Pack ID (Using existing TC ID)==>")
apiWriter.println("<==Senario finished for removal of linked Trading Certificate ID from Trading Certificate Pack ID (Using existing TC ID)==>")
compareWriter.println("<==Senario finished for removal of linked Trading Certificate ID from Trading Certificate Pack ID (Using existing TC ID)==>")
sqlWriter.println(" ") 
apiWriter.println(" ") 
compareWriter.println(" ")

log.info"<==Scenario execution Started for removing 1 TC id out of 2 from linked pack id==>"
sqlWriter.println("<==Scenario execution Started for removing 1 TC id out of 2 from linked pack id==>")
apiWriter.println("<==Scenario execution Started for removing 1 TC id out of 2 from linked pack id==>")
compareWriter.println("<==Scenario execution Started for removing 1 TC id out of 2 from linked pack id==>")
log.info"Create pack Id then add 2 Trading Certificate to empty pack and then remove only one from the linked one "

def createPackIdRequestBody = 
"""
{
"createdByUserEmailAddress": "Test@test.com",
"tradingCertificates": []
}
"""

log.info "Request body for Creating new trading certificate pack Id is : "+createPackIdRequestBody
testRunner.testCase.testSteps["POST_TCPACK"].setPropertyValue( "Request", createPackIdRequestBody)
testRunner.testCase.testSuite.setPropertyValue("token", token)
testRunner.runTestStepByName('POST_TCPACK')
req='${POST_TCPACK#Response}'
response=context.expand(req)
jsonSlurper=new JsonSlurper() 
jsonResPostTCPACK=jsonSlurper.parseText(response)

//Check the Status code of API response
groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
httpResponseHeaders = context.testCase.testSteps["POST_TCPACK"].testRequest.response.responseHeaders
httpStatus = httpResponseHeaders["#status#"]
httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

if(httpStatusCode.toString().equals("200"))
{
	api_TCPackId=jsonResPostTCPACK.id
	api_CreatedByUserEmailAddress=jsonResPostTCPACK.createdByUserEmailAddress
	api_CreatedDateTime=jsonResPostTCPACK.createdDateTime
	api_TradingCertificates=jsonResPostTCPACK.tradingCertificates
	log.info "New Pack Id is created with Id as =>"+api_TCPackId+","+api_CreatedByUserEmailAddress+","+api_CreatedDateTime+","+api_TradingCertificates
	apiWriter.println("New Pack Id is created with Id as =>"+api_TCPackId+","+api_CreatedByUserEmailAddress+","+api_CreatedDateTime+","+api_TradingCertificates)	
}
else if(httpStatusCode.toString().equals("401"))
{
	log.info "Failed API response is received"
	log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
	apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
	compareWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
}
else
{
	log.info "Failed API response is received"
	log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
	apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
	compareWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
}
log.info "Getting new trading certifiacate ids which are not linked to any trading certificate pack Ids"
String getNonLinkedTcIds=
"""
select
Top 2 
Tc.id as TradingCertifiacteId, TCPK.Id as PackId from TradingCertificate TC
left join TradingCertificatePack TCPK on TCPK.Id=TC.TradingCertificatePack_id
where TC.TradingCertificatePack_id is null
order by 1 desc
"""
int tc1=0 
int tc2=0
boolean flag=false

con.eachRow(getNonLinkedTcIds)
{
	getRow->
	sql_TradingCertificateId=getRow.TradingCertifiacteId
	sql_TCPKId=getRow.PackId

	sqlWriter.println("Non Linked Trading Certificate ids are =>"+sql_TradingCertificateId+","+sql_TCPKId)
	log.info "Non Linked Trading Certificate ids are =>"+sql_TradingCertificateId+","+sql_TCPKId
	
	if(tc1==0)
	{
		tc1=sql_TradingCertificateId.toInteger()	
		tc2=1
	}
	else if(tc2==1)
	{
		tc2=sql_TradingCertificateId.toInteger()	
	}
}

log.info "Adding/linking 2 Trading Certificated Ids ("+tc1+","+tc2+") to newly created pack Id=>"+api_TCPackId

String packId=api_TCPackId.toString()
testRunner.testCase.setPropertyValue("packId", packId)

String addRequestBody=
"""
[
	$tc1,
	$tc2
]
"""
log.info "Request body for adding TC ids to trading certificate pack Id is : "+addRequestBody
testRunner.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd"].setPropertyValue( "Request", addRequestBody)
testRunner.testCase.testSuite.setPropertyValue("token", token)
testRunner.runTestStepByName('PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd')

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
httpResponseHeaders = context.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd"].testRequest.response.responseHeaders
httpStatus = httpResponseHeaders["#status#"]
httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

log.info "httpStatusCode ="+httpStatusCode

if(httpStatusCode.toString().equals("200"))
{
	log.info "TC pack Id "+api_TCPackId+" is linked to TC Ids "+tc1+","+tc2
}
else if(httpStatusCode.toString().equals("401"))
{
	log.info "Failed API response is received"
	log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
	apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
	compareWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
}
else
{
	log.info "Failed API response is received"
	log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
	apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
	compareWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
}

log.info "Removing / delinking 1 Trading Certificated Id "+tc1+" out of 2 Trading Certificated Ids ("+tc1+","+tc2+") from pack Id=>"+api_TCPackId

def removeTCIdRequest =
"""
[
 $tc1
]
"""
log.info "Request body for removing trading certificate Id is : "+removeTCIdRequest
testRunner.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove"].setPropertyValue( "Request", removeTCIdRequest)
testRunner.runTestStepByName('PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove')
groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
httpResponseHeaders = context.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove"].testRequest.response.responseHeaders
httpStatus = httpResponseHeaders["#status#"]
httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with staus message as =>"+httpStatus
apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with staus message as =>"+httpStatus)

if(httpStatusCode.toString().equals("200"))
{
	int tcIdToBeChecked=tc1.toInteger()
		
	String getDelinkedTcIdDetails=
	"""
	declare 
	@tcId as int = """+tcIdToBeChecked+"""
	
	select 
	top 1
	TradingCertificatePack_Id as TradingCertificatePackId, Id as TradingCertificateId
	from TradingCertificate 
	--where TradingCertificatePack_Id=@PackId
	where id=@tcId
	order by 2 desc
	"""
	con.eachRow(getDelinkedTcIdDetails)
	{
		getRemovedRows->
		sql_TradingCertificatePackId=getRemovedRows.TradingCertificatePackId
		sql_TradingCertificateId=getRemovedRows.TradingCertificateId

		log.info "After removing the trading Certificate Id "+sql_TradingCertificateId+" from pack id "+api_TCPackId
		log.info "TC pack Id value after delink =>"+sql_TradingCertificatePackId
		if(sql_TradingCertificatePackId.toString().equals("null"))
		{
			log.info "Link of Trading Certificate Pack Id ("+sql_TradingCertificatePackId+") and Trading Certificate Id ("+sql_TradingCertificateId+") is removed successfully"+","+"Test case Passed"
			compareWriter.println("Link of Trading Certificate Pack Id ("+sql_TradingCertificatePackId+") and Trading Certificate Id ("+sql_TradingCertificateId+") is removed successfully"+","+"Test case Passed")
		}
		else
		{
			log.info "Link of Trading Certificate Pack Id ("+sql_TradingCertificatePackId+") and Trading Certificate Id ("+sql_TradingCertificateId+") is not removed"+","+"Test case Failed"
			compareWriter.println("Link of Trading Certificate Pack Id ("+sql_TradingCertificatePackId+") and Trading Certificate Id ("+sql_TradingCertificateId+") is not removed"+","+"Test case Failed")
		}
	}
}
else if(httpStatusCode.toString().equals("401"))
{
	log.info "Failed API response is received"
	log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
	apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
	compareWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
}
else
{
	log.info "Failed API response is received"
	log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
	apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
	compareWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
}

log.info"<==Scenario execution finished for removing 1 TC id out of 2 from linked pack id==>"
sqlWriter.println("<==Scenario execution finished Started for removing 1 TC id out of 2 from linked pack id==>")
apiWriter.println("<==Scenario execution finished for removing 1 TC id out of 2 from linked pack id==>")
compareWriter.println("<==Scenario execution finished for removing 1 TC id out of 2 from linked pack id==>")
sqlWriter.println(" ") 
apiWriter.println(" ") 
compareWriter.println(" ")

log.info"<==Scenario execution Started for adding 1 TC id in existing pack id which has already linked TC Ids==>"
sqlWriter.println("<==Scenario execution Started for adding 1 TC id in existing pack id which has already linked TC Ids==>")
apiWriter.println("<==Scenario execution Started for adding 1 TC id in existing pack id which has already linked TC Ids==>")
compareWriter.println("<==Scenario execution Started for adding 1 TC id in existing pack id which has already linked TC Ids==>")

String getNullTcId=
"""
select
top 1 
Tc.id as TraingCertifiacteId, TCPK.Id from TradingCertificate TC
left join TradingCertificatePack TCPK on TCPK.Id=TC.TradingCertificatePack_id
where TC.TradingCertificatePack_id is null
order by 1 desc
"""
con.eachRow(getNullTcId)
{
	getNullTcIdRow->
	sqlTcId=getNullTcIdRow.TraingCertifiacteId
	
	log.info "Non linked Trading Certificate Id is=>"+sqlTcId
	sqlWriter.println("Non linked Trading Certificate Id is=>"+sqlTcId)
}

String getLinkedPackId=
"""
select 
top 1
count(Id) as Count, TradingCertificatePack_Id
from TradingCertificate
where TradingCertificatePack_Id is not null
group by TradingCertificatePack_Id
having count(Id)> 1
order by 2

"""
con.eachRow(getLinkedPackId)
{
	getLinkedPackIdRow->
	sqlTcPackId=getLinkedPackIdRow.TradingCertificatePack_Id
	sqlLinkedTcIdCount=getLinkedPackIdRow.Count

	log.info "Trading Certificate Pack Id "+sqlTcPackId+" has "+sqlLinkedTcIdCount+" number of linked trading certificates"
	sqlWriter.println("Trading Certificate Pack Id "+sqlTcPackId+" has "+sqlLinkedTcIdCount+" number of linked trading certificates")
	
	log.info "Now Trading Certificate Pack Id =>"+sqlTcPackId+" is getting linked to =>"+sqlTcId
	sqlWriter.println("Now Trading Certificate Pack Id =>"+sqlTcPackId+" is getting linked to trading certificate Id =>"+sqlTcId)
}

packId=sqlTcPackId.toString()
testRunner.testCase.setPropertyValue("packId", packId)

addRequestBody=
"""
[
	$sqlTcId
]
"""
log.info "Request body for adding TC id to trading certificate pack Id is : "+addRequestBody

testRunner.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd"].setPropertyValue( "Request", addRequestBody)
testRunner.testCase.testSuite.setPropertyValue("token", token)
testRunner.runTestStepByName('PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd')

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
httpResponseHeaders = context.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd"].testRequest.response.responseHeaders
httpStatus = httpResponseHeaders["#status#"]
httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

log.info "httpStatusCode ="+httpStatusCode

if(httpStatusCode.toString().equals("200"))
{

	getlinkedTcId=
		"""
		select
		top 1 
		Tc.id as TraingCertifiacteId, TC.TradingCertificatePack_id
		from TradingCertificate TC
		left join TradingCertificatePack TCPK on TCPK.Id=TC.TradingCertificatePack_id
		where TC.Id="""+sqlTcId+"""
		order by 1 desc
		"""
		con.eachRow(getlinkedTcId)
		{
			getNullTcIdRow->
			TcIdAfterLink=getNullTcIdRow.TraingCertifiacteId
			PackIdAfterLink=getNullTcIdRow.TradingCertificatePack_id
			
			if(TcIdAfterLink.toString().equals(sqlTcId.toString()) && PackIdAfterLink.toString().equals(sqlTcPackId.toString()))
			{				
				apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
				log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
				
				apiWriter.println("TC pack Id "+sqlTcPackId+" is successfully linked to TC Id "+sqlTcId)
				compareWriter.println("TC pack Id "+sqlTcPackId+" is successfully linked to TC Id "+sqlTcId)	
			}
		}
}
else if(httpStatusCode.toString().equals("401"))
{
	log.info "Failed API response is received"
	log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
	apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
	compareWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
}
else
{
	log.info "Failed API response is received"
	log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
	apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
	compareWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
}

log.info"<==Scenario execution finished for adding 1 TC id in existing pack id which has already linked TC Ids==>"
sqlWriter.println("<==Scenario execution finished for adding 1 TC id in existing pack id which has already linked TC Ids==>")
apiWriter.println("<==Scenario execution finished for adding 1 TC id in existing pack id which has already linked TC Ids==>")
compareWriter.println("<==Scenario execution finished for adding 1 TC id in existing pack id which has already linked TC Ids==>")
sqlWriter.println(" ") 
apiWriter.println(" ") 
compareWriter.println(" ")


log.info"<==Scenario execution started for creating new pack Id linked/adding existing Tc Id which to newly created pack Id and removing the same after linking==>"
sqlWriter.println("<==Scenario execution started for creating new pack Id linked/adding existing Tc Id which to newly created pack Id and removing the same after linking==>")
apiWriter.println("<==Scenario execution started for creating new pack Id linked/adding existing Tc Id which to newly created pack Id and removing the same after linking==>")
compareWriter.println("<==Scenario execution started for creating new pack Id linked/adding existing Tc Id which to newly created pack Id and removing the same after linking==>")

createPackIdRequestBody = 
"""
{
"createdByUserEmailAddress": "Test@test.com",
"tradingCertificates": []
}
"""

log.info "Request body for Creating new trading certificate pack Id is : "+createPackIdRequestBody
testRunner.testCase.testSteps["POST_TCPACK"].setPropertyValue( "Request", createPackIdRequestBody)
testRunner.testCase.testSuite.setPropertyValue("token", token)
testRunner.runTestStepByName('POST_TCPACK')
req='${POST_TCPACK#Response}'
response=context.expand(req)
jsonSlurper=new JsonSlurper() 
jsonResPostTCPACK=jsonSlurper.parseText(response)

groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
httpResponseHeaders = context.testCase.testSteps["POST_TCPACK"].testRequest.response.responseHeaders
httpStatus = httpResponseHeaders["#status#"]
httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

if(httpStatusCode.toString().equals("200"))
{
	api_TCPackId=jsonResPostTCPACK.id
	api_CreatedByUserEmailAddress=jsonResPostTCPACK.createdByUserEmailAddress
	api_CreatedDateTime=jsonResPostTCPACK.createdDateTime
	api_TradingCertificates=jsonResPostTCPACK.tradingCertificates
	log.info "New Pack Id is created with Id as =>"+api_TCPackId+","+api_CreatedByUserEmailAddress+","+api_CreatedDateTime+","+api_TradingCertificates
	apiWriter.println("New Pack Id is created with Id as =>"+api_TCPackId+","+api_CreatedByUserEmailAddress+","+api_CreatedDateTime+","+api_TradingCertificates)	
}
else if(httpStatusCode.toString().equals("401"))
{
	log.info "Failed API response is received"
	log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
	apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
	compareWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
}
else
{
	log.info "Failed API response is received"
	log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
	apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
	compareWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
}

log.info "Getting new trading certifiacate id which is linked to another trading certificate pack Ids"

String getLinkedTcIds=
"""
select
Top 1
Tc.id as TradingCertifiacteId, TCPK.Id as PackId from TradingCertificate TC
left join TradingCertificatePack TCPK on TCPK.Id=TC.TradingCertificatePack_id
where TC.TradingCertificatePack_id is not null
order by 1 desc
"""

con.eachRow(getLinkedTcIds)
{
	getRow->
	sql_TradingCertificateId=getRow.TradingCertifiacteId
	sql_TCPKId=getRow.PackId

	sqlWriter.println("Trading Certificate Id =>"+sql_TradingCertificateId+" is linked to Pack Id =>"+sql_TCPKId)
	log.info "Trading Certificate Id =>"+sql_TradingCertificateId+" is linked to Pack Id =>"+sql_TCPKId
}
if(!sql_TCPKId.toString().equals(api_TCPackId.toString()))
{
	log.info "Adding/linking Trading Certificated Ids ("+sql_TradingCertificateId+") to newly created pack Id=>"+api_TCPackId
	
	packId=api_TCPackId.toString()
	testRunner.testCase.setPropertyValue("packId", packId)
	
	addRequestBody=
	"""
	[
		$sql_TradingCertificateId
	]
	"""
	log.info "Request body for adding TC id to trading certificate pack Id is : "+addRequestBody
	testRunner.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd"].setPropertyValue( "Request", addRequestBody)
	testRunner.testCase.testSuite.setPropertyValue("token", token)
	testRunner.runTestStepByName('PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd')
	
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	httpResponseHeaders = context.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByAdd"].testRequest.response.responseHeaders
	httpStatus = httpResponseHeaders["#status#"]
	httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	
	if(httpStatusCode.toString().equals("200"))
	{
		log.info "Checking newly created pack id is linked to trading certificate id which was already linked to another pack Id"
		getLinkedTcIds1=
		"""
		declare
		@packid as int="""+api_TCPackId+""",
		@tcId as int="""+sql_TradingCertificateId+"""
		select
		Top 1
		Tc.id as LinkedTradingCertifiacteId, TCPK.Id as LinkedPackId from TradingCertificate TC
		left join TradingCertificatePack TCPK on TCPK.Id=TC.TradingCertificatePack_id
		where TC.TradingCertificatePack_id =@packid
		and TC.Id=@tcId
		order by 1 desc
		"""
		con.eachRow(getLinkedTcIds1)
		{
			getRows1->
			sql_packid = getRows1.LinkedPackId
			sql_tcid = getRows1.LinkedTradingCertifiacteId
			//log.info "sql_packid="+sql_packid
			//log.info "sql_tcid="+sql_tcid

			if(sql_tcid.toString().equals(sql_TradingCertificateId.toString()) && sql_packid.toString().equals(api_TCPackId.toString()))
			{
				log.info "Trading Certificate Id ("+sql_tcid+") is successfully linked to Trading Certificate Pack Id ("+sql_packid+")"
				apiWriter.println("Trading Certificate Id ("+sql_tcid+") is successfully linked to Trading Certificate Pack Id ("+sql_packid+")")
				compareWriter.println("Trading Certificate Id ("+sql_tcid+") is successfully linked to Trading Certificate Pack Id ("+sql_packid+")")
			}
			else
			{
				log.info "Trading Certificate Id ("+sql_tcid+") is not linked to Trading Certificate Pack Id ("+sql_packid+")"
				apiWriter.println("Trading Certificate Id ("+sql_tcid+") is not linked to Trading Certificate Pack Id ("+sql_packid+")")
				compareWriter.println("Trading Certificate Id ("+sql_tcid+") is not linked to Trading Certificate Pack Id ("+sql_packid+")")
			}
			log.info "Checking whether previously linked pack Id is removed"
			
			getDeLinkedTcIds=
			"""
			declare
			@packid as int="""+sql_TCPKId+""",
			@tcId as int="""+sql_TradingCertificateId+"""
			select
			Top 1
			Tc.id as deLinkedTradingCertifiacteId, TCPK.Id as deLinkedPackId from TradingCertificate TC
			left join TradingCertificatePack TCPK on TCPK.Id=TC.TradingCertificatePack_id
			where TC.TradingCertificatePack_id =@packid
			and TC.Id=@tcId
			union select all null,null
			order by 1 desc
			"""
			con.eachRow(getDeLinkedTcIds)
			{
				delinkedRows->
				sql_delinkedPackId=delinkedRows.deLinkedPackId
				sql_delinkedTcId=delinkedRows.deLinkedTradingCertifiacteId
				
				if(sql_delinkedPackId==null && sql_delinkedTcId==null)
				{
					log.info "Trading Certificate Id ("+sql_delinkedTcId+") is automatically removed from Trading Certificate Pack Id ("+sql_delinkedPackId+") Hence test case is passed"
					apiWriter.println("Trading Certificate Id ("+sql_delinkedTcId+") is automatically removed from Trading Certificate Pack Id ("+sql_delinkedPackId+") Hence test case is passed")
					compareWriter.println("Trading Certificate Id ("+sql_delinkedTcId+") is automatically removed from Trading Certificate Pack Id ("+sql_delinkedPackId+") Hence test case is passed")
				}
				else
				{
					log.info "Trading Certificate Id ("+sql_delinkedTcId+") is automatically not removed from Trading Certificate Pack Id ("+sql_delinkedPackId+") hence test case is failed"
					apiWriter.println("Trading Certificate Id ("+sql_delinkedTcId+") is automatically removed from Trading Certificate Pack Id ("+sql_delinkedPackId+") hence test case is failed")
					compareWriter.println("Trading Certificate Id ("+sql_delinkedTcId+") is automatically removed from Trading Certificate Pack Id ("+sql_delinkedPackId+") hence test case is failed")
				}
				log.info "Removing / delinking Trading Certificated Id "+sql_TradingCertificateId+" from pack Id=>"+sql_TCPKId

				removeTCIdRequest =
				"""
				[
				 $sql_TradingCertificateId
				]
				"""
				packId=sql_TCPKId.toString()
				testRunner.testCase.setPropertyValue("packId", packId)
	
				log.info "Request body for removing trading certificate Id is : "+removeTCIdRequest
				testRunner.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove"].setPropertyValue( "Request", removeTCIdRequest)
				testRunner.runTestStepByName('PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove')
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["PATCH_TradingCertificatePacksByTradingCertificatePackIdByRemove"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				
				log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with staus message as =>"+httpStatus
				apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with staus message as =>"+httpStatus)

				if(httpStatusCode.toString().equals("200"))
				{						
					String getDelinkedTcIdDetails=
					"""
					declare
					@packid as int="""+api_TCPackId+""",
					@tcId as int="""+sql_TradingCertificateId+"""
					select
					Top 1
					Tc.id as deLinkedTradingCertifiacteId, TCPK.Id as deLinkedPackId from TradingCertificate TC
					left join TradingCertificatePack TCPK on TCPK.Id=TC.TradingCertificatePack_id
					where TC.TradingCertificatePack_id =@packid
					and TC.Id=@tcId
					union select all null,null
					order by 1 desc
					"""
					con.eachRow(getDelinkedTcIdDetails)
					{
						RemovedRows->
						sql_pack=RemovedRows.deLinkedPackId
						sql_Tc=RemovedRows.deLinkedTradingCertifiacteId
						//log.info sql_pack
						//log.info sql_Tc
						if(sql_pack==null && sql_Tc==null)
						{
							log.info "Trading Certificate Id ("+sql_Tc+") is removed successfully from Trading Certificate Pack Id ("+sql_pack+") hence test case is passed"
							apiWriter.println("Trading Certificate Id ("+sql_Tc+") is removed successfully from Trading Certificate Pack Id ("+sql_pack+") hence test case is passed")
							compareWriter.println("Trading Certificate Id ("+sql_Tc+") is removed successfully from Trading Certificate Pack Id ("+sql_pack+") hence test case is passed")
						}
						else
						{
							log.info "Trading Certificate Id ("+sql_Tc+") is not removed from Trading Certificate Pack Id ("+sql_pack+") hence test case is failed"
							apiWriter.println("Trading Certificate Id ("+sql_Tc+") is not removed from Trading Certificate Pack Id ("+sql_pack+") hence test case is failed")
							compareWriter.println("Trading Certificate Id ("+sql_Tc+") is not removed from Trading Certificate Pack Id ("+sql_pack+") hence test case is failed")
						}
					}
				}					
			}
		}
	}
	else if(httpStatusCode.toString().equals("401"))
	{
		log.info "Failed API response is received"
		log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
		apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
		compareWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
	}
	else
	{
		log.info "Failed API response is received"
		log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
		apiWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
		compareWriter.println("In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus)
	}
}

log.info"<==Scenario execution finished for creating new pack Id linked/adding existing Tc Id which to newly created pack Id and removing the same after linking==>"
sqlWriter.println("<==Scenario execution finished for creating new pack Id linked/adding existing Tc Id which to newly created pack Id and removing the same after linking==>")
apiWriter.println("<==Scenario execution finished for creating new pack Id linked/adding existing Tc Id which to newly created pack Id and removing the same after linking==>")
compareWriter.println("<==Scenario execution finished for creating new pack Id linked/adding existing Tc Id which to newly created pack Id and removing the same after linking==>")

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for PATCH method of Trading Certificate Packs By Trading Certificate Pack Id By Add***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>packId</con:name><con:value>76</con:value></con:property></con:properties></con:testCase><con:testCase id="f94ddfa6-0fdb-4eaa-a1aa-f082833c4451" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate" id="719be310-0c67-47a5-ab95-278c040d3e53"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificatePacks/${#TestCase#packId}/validate" methodName="POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate" id="3c5d4845-01cb-46ee-8b70-3721d2827fc7" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks/65/validate</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="sortBy" value="tradingCertificateId" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>sortBy</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="TradingCertificatePacksByTradingCertificatePackIdByValidate" id="49f99b90-a797-45ed-b005-66c48f32f28b" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST method of Trading Certificate Packs By Trading Certificate Pack Id By Validate************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

def inputStream = new FileInputStream("C:\\APITesting\\TradingCertificateTesting\\ValidateCertificateRule.xls");
Workbook wb = WorkbookFactory.create(inputStream);
def ws = wb.getSheet("Rules")
def rowCount = ws.getPhysicalNumberOfRows()
//log.info "Number of rows in rule excel are"+rowCount

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_TradingCertificatePackByTCPackIdByValidate.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_TradingCertificatePackByTCPackIdByValidate.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_TradingCertificatePackByTCPackIdByValidate.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_TradingCertificatePackByTCPackIdByValidate"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_TradingCertificatePackByTCPackIdByValidate"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_TradingCertificatePackByTCPackIdByValidate"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificateId"+","+"SQL_RiskReference"+","+"SQL_TypeCode"+","+"SQL_TradingCertificatePackId"+","+"sql_addresstypeid"+","+"SQL_SourceSystem"+","+"SQL_Reference"+","+"SQL_CurrentStatus"+","+"SQL_StorageId"+","+"SQL_RiskId"+","+"SQL_PolicyId"+","+"SQL_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"SQL_IsRenewal"+","+"SQL_IsRenewalFlag"+","+"SQL_IsYacht"+","+"SQL_IsYachtFlag"+","+"SQL_Version"+","+"SQL_RiskReference"+","+"SQL_PolicyReference"+","+"SQL_MemberReference"+","+"SQL_MemberType"+","+"sql_membername"+","+"SQL_JointAssuredName"+","+"SQL_OwnerReference"+","+"sql_ownername"+","+"SQL_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"SQL_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"SQL_policyyear"+","+"SQL_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"SQL_CcEmailAddress"+","+"SQL_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"sql_vesselname"+","+"SQL_VesselType"+","+"SQL_VesselTypeName"+","+"SQL_vesselEnteredDate"+","+"SQL_vesselFlag"+","+"SQL_imoNumber"+","+"sql_distinctivenumbersorletters"+","+"SQL_grossTonnage"+","+"SQL_yearBuilt"+","+"SQL_engineHorsePower"+","+"SQL_model"+","+"SQL_engineNo"+","+"sql_nominatedstateflag"+","+"sql_nominatedstateflagname"+","+"SQL_portOfRegistry"+","+"SQL_tenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"SQL_TradingCertificateTypeCode"+","+"SQL_TradingCertificateTypeName")
apiWriter.println("SQL_TradingCertificateId"+","+"API_TradingCertificateId"+","+"API_RiskReference"+","+"API_TradingCertificateType"+","+"API_IsValidFlag"+","+"API_ErrorList/s")
compareWriter.println("SQL_TradingCertificatePackId"+","+"API_TradingCertificateId"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_TypeCode"+","+"API_TradingCertificateType"+","+"API_IsValid"+","+"allAPIErrors"+","+"Test Case is Status")

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlStmt = 
"""
SELECT 
TOP 200
TC.Id as TradingCertificateId, TC.RiskReference, RT.TypeCode, TCPK.Id as TradingCertificatePackId, TC.AddressType_Id, TC.SourceSystem, 
TC.Reference, TC.CurrentStatus, TC.StorageId,  TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
TC.IsRenewal, case when TC.IsRenewal = 1 then 'True'    when TC.IsRenewal = 0 then 'False' else NULL end as IsRenewalFlag, TC.IsYacht,
case when TC.IsYacht = 1 then 'True' when TC.IsYacht = 0 then 'False' else NULL end as IsYachtFlag, 
TC.TradingCertificateVersion as Version, TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,
TC.JointAssuredName, TC.OwnerReference, TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,
TC.policyyear, TC.CertificateIssueDate, TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity,
TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,
TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower,
TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList, TC.TenderOutboardReferenceList,
TC.Type_Id as TradingCertificateTypeId, RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode, 
RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName, BS.BankName
from TradingCertificate TC 
inner join TradingCertificatePack TCPK  on TCPK.Id = TC.TradingCertificatePack_Id
left join ref_type RT on RT.Id=TC.Type_id
inner join ref_Group RG on RG.Id = RT.Group_Id
left join ref_addressType RAT on RAT.Id=TC.AddressType_Id
left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id
where TCPK.Id= 94
order by TCPK.Id desc, TC.Id desc
"""

def response= null
def jsonSlurper=null
def jsonResValidate=null
int counter=0
boolean flag=false;
String columnName=null
boolean ruleFlag = false;
int numberOfTcs=0

con.eachRow(sqlStmt)
{	
	row ->
	sql_TradingCertificateId=row.TradingCertificateId
	sql_RiskReference=row.RiskReference
	sql_TypeCode=row.TypeCode
	sql_TradingCertificatePackId=row.TradingCertificatePackId
	sql_addresstypeid=row.AddressType_Id
	sql_SourceSystem=row.SourceSystem
	sql_Reference=row.Reference
	sql_CurrentStatus=row.CurrentStatus
	sql_StorageId=row.StorageId
	sql_RiskId=row.RiskId
	sql_PolicyId=row.PolicyId
	sql_MemberPartyId=row.MemberPartyId
	sql_OwnerPartyId=row.OwnerPartyId
	sql_BrokerPartyId=row.BrokerPartyId
	sql_IsRenewal=row.IsRenewal
	sql_IsRenewalFlag=row.IsRenewalFlag
	sql_IsYacht=row.IsYacht
	sql_IsYachtFlag=row.IsYachtFlag
	sql_Version=row.Version
	sql_RiskReference=row.RiskReference
	sql_PolicyReference=row.PolicyReference
	sql_MemberReference=row.MemberReference
	sql_MemberType=row.MemberType
	sql_membername=row.MemberName
	sql_JointAssuredName=row.JointAssuredName
	sql_OwnerReference=row.OwnerReference
	sql_ownername=row.OwnerName
	sql_OwnerDomicile=row.OwnerDomicile
	sql_OwnerEmailAddress=row.OwnerEmailAddress
	sql_BrokerReference=row.BrokerReference
	sql_BrokerName=row.BrokerName
	sql_BrokerEmailAddress=row.BrokerEmailAddress
	sql_policyyear=row.policyyear
	sql_CertificateIssueDate=row.CertificateIssueDate
	sql_EmailAddress=row.EmailAddress
	sql_CcEmailAddress=row.CcEmailAddress
	sql_EffectiveStartDate=row.EffectiveStartDate
	sql_EffectiveEndDate=row.EffectiveEndDate
	sql_PassengerCapacity=row.PassengerCapacity
	sql_PolicyStartDate=row.PolicyStartDate
	sql_PolicyEndDate=row.PolicyEndDate
	sql_CurrencyCode=row.CurrencyCode
	sql_CoverLimitAmount=row.CoverLimitAmount
	sql_SignatoryState_Id=row.SignatoryState_Id
	sql_vesselname=row.VesselName
	sql_VesselType=row.VesselType
	sql_VesselTypeName=row.VesselTypeName
	sql_vesselEnteredDate=row.vesselEnteredDate
	sql_vesselFlag=row.vesselFlag
	sql_imoNumber=row.imoNumber
	sql_distinctivenumbersorletters=row.distinctiveNumbersOrLetters
	sql_grossTonnage=row.grossTonnage
	sql_yearBuilt=row.yearBuilt
	sql_engineHorsePower=row.engineHorsePower
	sql_model=row.model
	sql_engineNo=row.engineNo
	sql_nominatedstateflag=row.NominatedStateFlag
	sql_nominatedstateflagname=row.NominatedStateFlagName
	sql_portOfRegistry=row.portOfRegistry
	sql_tenderReferenceList=row.tenderReferenceList
	sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateGroupId=row.TradingCertificateGroupId
	sql_TradingCertificateGroupName=row.TradingCertificateGroupName
	sql_TradingCertificateGroupCode=row.TradingCertificateGroupCode
	sql_TradingCertificateTypeCode=row.TradingCertificateTypeCode
	sql_TradingCertificateTypeName=row.TradingCertificateTypeName
	sql_bankname = row.BankName
	sql_bankname = removeBracketAndComma(sql_bankname.toString())
	
	sqlWriter.println(sql_TradingCertificateId+","+sql_RiskReference+","+sql_TypeCode+","+sql_TradingCertificatePackId+","+sql_addresstypeid+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_membername+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_ownername+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_policyyear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_vesselname+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctivenumbersorletters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_nominatedstateflag+","+sql_nominatedstateflagname+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_bankname)
	log.info "SQL query Response is received as "+sql_TradingCertificateId+","+sql_RiskReference+","+sql_TypeCode+","+sql_TradingCertificatePackId+","+sql_addresstypeid+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_membername+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_ownername+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_policyyear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_vesselname+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctivenumbersorletters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_nominatedstateflag+","+sql_nominatedstateflagname+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_bankname
	
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	String packId=sql_TradingCertificatePackId.toString()
	testRunner.testCase.setPropertyValue("packId", packId)
	
	testRunner.runTestStepByName("POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate")
	String req = '${POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate#Response}'	
	response=context.expand(req)
	log.info "API response for validate Trading Certificate pack is received as==>" +response
	jsonSlurper = new JsonSlurper()
	jsonResValidate = jsonSlurper.parseText(response)
	api_tradingCertificateType = jsonResValidate.tradingCertificateType

	String tredCertId=sql_TradingCertificateId.toString()
	testRunner.testCase.setPropertyValue("tradingCertificateId", tredCertId)

	testRunner.runTestStepByName("GET_TradCertByTredCertId")
	String responseBody = '${GET_TradCertByTredCertId#Response}'	
	getResponse=context.expand(responseBody)
	log.info "API response for GET Trading Certificate by Trading Certificate Id is received as==>" +getResponse
	getJsonSlurper = new JsonSlurper()
	jsonResGetById = getJsonSlurper.parseText(getResponse)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["POST_TradingCertificatePacksByTradingCertificatePacksIdByValidate"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

	//get Number of Columns from Excel
	int numberOfCells = 0;
	Iterator rowIterator = ws.rowIterator();
	if (rowIterator.hasNext())
	{
		Row headerRow = (Row) rowIterator.next();
		numberOfCells = headerRow.getPhysicalNumberOfCells();
	}
	
	numberOfTcs=jsonResValidate.tradingCertificateId.size().toInteger()
	log.info "Number of records displayed into result=>"+numberOfTcs
	
	String allAPIErrors=""
	for (int tccounter=0; tccounter<numberOfTcs; tccounter++)
	{
		int tcId=jsonResValidate.tradingCertificateId[tccounter]
		if(tcId.toString().equals(sql_TradingCertificateId.toString()))
		{
			log.info "Checking for record number "+tccounter+" =>"+ jsonResValidate.tradingCertificateId[tccounter]

			String[] numberOfErrors= jsonResValidate.errors
			for (int errorCounter=0; errorCounter<numberOfErrors.length; errorCounter++)
			{
				if(tcId.toString().equals(sql_TradingCertificateId.toString()))
				{
					allAPIErrors=allAPIErrors+" "+jsonResValidate.errors[tccounter]
					api_tradingCertificateId = jsonResValidate.tradingCertificateId[tccounter]
					api_tradingCertificateId = removeBracketAndComma(api_tradingCertificateId.toString())
					api_riskReference = jsonResValidate.riskReference[tccounter]
					api_riskReference = removeBracketAndComma(api_riskReference.toString())
					api_tradingCertificateType = jsonResValidate.tradingCertificateType[tccounter]
					api_tradingCertificateType = removeBracketAndComma(api_tradingCertificateType.toString())
					api_isValid = jsonResValidate.isValid[tccounter]
					api_isValid = removeBracketAndComma(api_isValid.toString())
					api_errors=allAPIErrors
					api_errors = removeBracketAndComma(api_errors.toString())

					apiWriter.println(sql_TradingCertificatePackId+","+api_tradingCertificateId+","+api_riskReference+","+api_tradingCertificateType+","+api_isValid+","+api_errors)
					
					break;
				}
			}


			if(jsonResValidate.isValid[tccounter].toString().equals("false") && httpStatusCode.toString().equals("200"))
			{
			//log.info "API response is received sucessfully"+response
				for(int i=1; i<rowCount; i++)
				{
					Row rows = ws.getRow(i);
					Cell cell = rows.getCell(0);
					String tradingCertificateType = cell.getStringCellValue().trim();
					//log.info "tradingCertificateType : "+tradingCertificateType
					if(tradingCertificateType.toString().equals(api_tradingCertificateType.toString()))
					{
						tradingCertificateRowNumber = i;
						String[] errorList1 = jsonResValidate.errors[tccounter]
						ArrayList<String> errorList = new ArrayList<String>();
						
						int errorCountCheck=0;
						
						for (int k=0; k<errorList1.length; k++)
						{
							String errorDescription = errorList1[k]
							errorList.add(errorDescription)
							log.info "For TC number "+tccounter+" reason number "+(k+1)+" : "+errorList1[k]
							String field = getFieldName(errorList[k])
							log.info "Field Name after removing additional text is: "+field
							for (int j=0; j<=95;j++)
							{
								rows = ws.getRow(i);
								cell = rows.getCell(j);
								
								Row headerColumns = ws.getRow(0);
								Cell cols = headerColumns.getCell(j);
								columnName = cols.getStringCellValue().trim();
								
								if (cell.CELL_TYPE_STRING)
								{
									validation = cell.getStringCellValue().trim();
									//log.info "Field : "+field +"==> columnName : "+columnName+"==>Rule : "+validation
								}//if condition ended for cell type is string from validation rule excel
								else if(cell.CELL_TYPE_NUMERIC)
								{
									int numericValue = cell.getNumericCellValue().trim();
									validation = Intger.parseInt(numericValue)
									//log.info "validation in numeric : "+validation
								}
								if(field.toLowerCase().equals(columnName.toLowerCase()))
								{
									if(validation.equals("true"))
										ruleFlag=true
									else 
										ruleFlag=false
									log.info "==>"+field.toLowerCase()+"==>"+columnName.toLowerCase()
									//break;
								}
							}
							if(ruleFlag)
							{
								switch (errorDescription)
								{
									case "'Policy Year' must not be empty.":
											if(sql_policyyear.toString().equals(""))
												sql_policyyear=null
											log.info sql_policyyear+"<==>"+jsonResGetById.policyyear
											if(sql_policyyear.equals(jsonResGetById.policyyear))
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Policy Year is : "+sql_policyyear+" and API value for Policy Year is : "+jsonResGetById.policyyear
												errorCountCheck++;
											}
											break;
									case "'Nominated Flag State' must not be empty.":
											if(sql_nominatedstateflag.equals(jsonResGetById.nominatedFlagState))
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Nominated State Flag is : "+sql_nominatedstateflag+" and API value for Nominated State Flag is : "+jsonResGetById.nominatedFlagState
												errorCountCheck++;
											}
											break;
									case "Owner name required.":
									case "'Owner Name' must not be empty.":
											if(sql_ownername.equals(jsonResGetById.ownerName))
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Owner name is : "+sql_ownername+" and API value for Owner name is : "+jsonResGetById.ownername
												errorCountCheck++;
											}
											break;
									case "Vessel name is required.":
									case  "'Vessel Name' must not be empty.":
											if(sql_vesselname.equals(jsonResGetById.vesselName))
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Vessel name is : "+sql_vesselname+" and API value for Vessel name is : "+jsonResGetById.vesselName
												errorCountCheck++;
											}
											break;
									case "Member name is required." :
									case "'Member Name' must not be empty.":
											if(sql_membername.equals(jsonResGetById.memberName))
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Member name is : "+sql_membername+" and API value for Member name is : "+jsonResGetById.memberName
												errorCountCheck++;
											}
											break;
									case "Disctinctive numbers or letters required.":
									case "'Distinctive Numbers Or Letters' must not be empty.":
											if(sql_distinctivenumbersorletters.equals(jsonResGetById.distinctiveNumbersOrLetters))
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Distinctive Numbers Or Letters is : "+sql_distinctivenumbersorletters+" and API value for Distinctive Numbers Or Letters is : "+jsonResGetById.distinctiveNumbersOrLetters
												errorCountCheck++;
											}
											break;
									case "'Owner Address' must not be empty.":
											if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.ownerAddress==null)
											{
												log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Owner Address is : "+jsonResGetById.ownerAddress
												errorCountCheck++;
											}
											break;
									case "'State Address' must not be empty.":
											if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.stateAddress==null)
											{
												log.info "SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for State Address is : "+jsonResGetById.stateAddress
												errorCountCheck++;
											}
											break;
									case "'Joint Assured Address' must not be empty.":
											if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.jointAssuredAddress==null)
											{
												log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for JA Address is : "+jsonResGetById.jointAssuredAddress
												errorCountCheck++;
											}
											break;
									case "'Joint Assured Name' must not be empty.":
											if(sql_jointassuredname.equals(jsonResGetById.jointAssuredName))
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Joint Assured name is : "+sql_jointassuredname+" and API value for Joint Assured  name is : "+jsonResGetById.jointAssuredName
												errorCountCheck++;
											}
											break;
									case "Bank Address Bank name is required.":
											if(sql_bankname.equals(null))
												errorCountCheck++;
											break;
									case "Bank Address Address name is required." :
									case "Bank Address Address city name is required " :
									case "Bank Address Address country is required" :
												errorCountCheck++;
											break;
									case "'Broker Address' must not be empty.":
											if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.brokerAddress==null)
											{
												log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Broker Address is : "+jsonResGetById.brokerAddress
												errorCountCheck++;
											}
											break;
									case "'Member Address' must not be empty.":
											if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.memberAddress==null)
											{
												log.info "SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Member Address is : "+jsonResGetById.memberAddress
												errorCountCheck++;
											}
											break;
									case "Member name set but no member address found":
											if(sql_membername!=null && sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.memberAddress==null)
											{
												log.info "SQL value for Member name is : "+sql_membername+" and API Member Name value  is : "+jsonResGetById.memberName+" and SQL value for Address Type Id is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Member Address is : "+jsonResGetById.memberAddress
												errorCountCheck++;
											}
											break;
									case "Policy limit currency code is required.":
									case "'Currency Code' must not be empty.":
											if(sql_currencycode==null && jsonResGetById.currencyCode==null)
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Currency Code is : "+sql_currencycode+" and API value for Currency Code is : "+jsonResGetById.currencyCode
												errorCountCheck++;
											}
											break;
									case "Policy limit amount is required.":
									case "'Cover Limit Amount' must not be empty.":
											if(sql_coverlimitamount==null && jsonResGetById.coverLimitAmount==null)
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Cover Limit Amount is : "+sql_coverlimitamount+" and API value for Cover Limit Amount is : "+jsonResGetById.coverLimitAmount
												errorCountCheck++;
											}
											break;
									case "Engine horse power is required.":
									case "'Engine Horse Power' must not be empty.":
											if(sql_enginehorsepower==null && jsonResGetById.engineHorsePower==null)
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Engine Horse Power is : "+sql_enginehorsepower+" and API value for Engine Horse Power is : "+jsonResGetById.engineHorsePower
												errorCountCheck++;
											}
											break;
									case "'Trademark And Engine Model' must not be empty.":
											if(sql_trademark==null && jsonResGetById.trademarkAndEngineModel==null)
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Trade Mark is : "+sql_trademark+" and API value for Trade Mark is : "+jsonResGetById.trademarkAndEngineModel
												errorCountCheck++;
											}
											break;
									case "Gross tonnage is required." :
									case "'Gross Tonnage' must not be empty.":
											if(sql_grosstonnage==null && jsonResGetById.grossTonnage==null)
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Gross Tonnage is : "+sql_grosstonnage+" and API value for Gross Tonnage is : "+jsonResGetById.grossTonnage
												errorCountCheck++;
											}
											break;
									case "Year built is required.":
									case "'Year Built' must not be empty.":
											if(sql_yearbuilt==null && jsonResGetById.yearBuilt==null)
											{
												log.info "Rule Flag = "+ruleFlag + "  SQL value for Year Built is : "+sql_yearbuilt+" and API value for Year Built is : "+jsonResGetById.yearBuilt
												errorCountCheck++;	
											}
											break;
									case "Address is required.":
												errorCountCheck++;
											break;
									case "At least a Bank is required!":
											if(jsonResGetById.tradingCertificate.equals(null) || jsonResGetById.tradingCertificate.equals(""))
												errorCountCheck++;
											break;
									case "Address city name is required." :
												errorCountCheck++;
											break;
									case "Address country is require."	:
												errorCountCheck++;
											break;
									case "Address line 1 is required." :
												errorCountCheck++;
											break;
									case "Address line 2 is required.":
												errorCountCheck++;
											break;
									case "Address line 3 is required.":
												errorCountCheck++;
											break;
									case "Address name is required.":
												errorCountCheck++;
											break;
									case "Address poscode is required.":
												errorCountCheck++;
											break;
									case "Address State is required.":				
												errorCountCheck++;
											break;
									case "Bank name is required.":
											if(sql_bankname.equals(jsonResGetById.tradingCertificateBanks.equals(null)) && sql_bankname.equals(null))
												errorCountCheck++;
											break;
									case "Broker name is required.":	
											if(sql_brokername.equals(jsonResGetById.brokerName.equals(null))&& sql_brokername.equals(null))
												errorCountCheck++;
											break;
									case "Email address is required.":	
											if(sql_emailaddress.equals(jsonResGetById.emailAddress.equals(null))&& sql_emailaddress.equals(null))	
												errorCountCheck++;
											break;
									case "Member ref is required."	:				
											if(sql_memberref.equals(jsonResGetById.memberReference.equals(null))&& sql_memberref.equals(null))	
												errorCountCheck++;
											break;
									case "Policy end date is required.":					
											if(sql_policyenddate.equals(jsonResGetById.policyEndDate.equals(null))&& sql_policyenddate.equals(null))	
												errorCountCheck++;
											break;
									case "IMO Number Is Required.":
									case "'IMO Number' must not be empty.":
									case "IMONumberIsRequired.":				
											if(sql_imonumber.equals(jsonResGetById.imoNumber.equals(null))&& sql_imonumber.equals(null))	
												errorCountCheck++;
											break;
									case "Issue Date is required.":				
											if(sql_certificateissuedate.equals(jsonResGetById.certificateIssueDate.equals(null))&& sql_certificateissuedate.equals(null))	
												errorCountCheck++;
											break;
									case "Policy reference number is required." :
											if(sql_policyref.equals(jsonResGetById.policyReference.equals(null))&& sql_policyref.equals(null))	
												errorCountCheck++;
											break;
									case "Policy start date is required." :
											if(sql_policystartdate.equals(jsonResGetById.policyStartDate.equals(null))&& sql_policystartdate.equals(null))	
												errorCountCheck++;
											break;
									case "Port of registry required." :
											if(sql_portofregistry.equals(jsonResGetById.portOfRegistry.equals(null))&& sql_portofregistry.equals(null))	
												errorCountCheck++;
											break;
									case "Risk ref is required." :
											if(sql_riskref.equals(jsonResGetById.riskReference.equals(null))&& sql_riskref.equals(null))	
												errorCountCheck++;
											break;
									case "Signatory state is required." :
												errorCountCheck++;
											break;
									case "Signatory State Address is required." :
												errorCountCheck++;
											break;
									case "Certificate sequence number is required." :
												errorCountCheck++;
											break;
									case "Vessel flag is required." :
											if(sql_vesselflag.equals(jsonResGetById.vesselFlag.equals(null))&& sql_vesselflag.equals(null))	
												errorCountCheck++;
											break;
									case "Vessel model is required." :
											if(sql_model.equals(jsonResGetById.model.equals(null))&& sql_model.equals(null))	
												errorCountCheck++;
											break;
									case "Vessel type is required." :
											if(sql_vesseltype.equals(jsonResGetById.vesselType.equals(null))&& sql_vesseltype.equals(null))	
												errorCountCheck++;
											break;
									case "Vessel trademark is required." :
											if(sql_trademark.equals(jsonResGetById.trademarkAndEngineModel.equals(null))&& sql_trademark.equals(null))	
												errorCountCheck++;
											break;
									case "Member Address Address name is required." :
									case "Member Address Address city name is required " :
									case "Member Address Address country is required" :
												errorCountCheck++;
											break;
									case "Broker Address Address name is required." :
									case "Broker Address Address city name is required " :
									case "Broker Address Address country is required" :
												errorCountCheck++;
											break;					
								}//switch case
								if(errorList1.length.equals(errorCountCheck))
								{
									log.info "Error count is matching hence test case is passed"
									allAPIErrors=allAPIErrors.replace(",", " ")
									compareWriter.println(sql_TradingCertificatePackId+","+jsonResValidate.tradingCertificateId[k]+","+sql_RiskReference+","+jsonResValidate.riskReference[k]+","+sql_TypeCode+","+jsonResValidate.tradingCertificateType[k]+","+jsonResValidate.isValid[k]+","+allAPIErrors+","+"Test Case is passed")
								}
							}//if rule flag is true
							else
							{
								log.info "Error count is not matching hence test case is failed"
								allAPIErrors=allAPIErrors.replace(",", " ")
								compareWriter.println(sql_TradingCertificatePackId+","+jsonResValidate.tradingCertificateId[k]+","+sql_RiskReference+","+jsonResValidate.riskReference[k]+","+sql_TypeCode+","+jsonResValidate.tradingCertificateType[k]+","+jsonResValidate.isValid[k]+","+allAPIErrors+","+"Test Case is Failed")
							}
						}//for loop end of number if errors into the list
					}
				}		
			}
			else if(httpStatusCode.toString().equals("401"))
			{
				log.info "Failed API response received as :"+response
				//compareWriter.println(sql_id+","+"Failed API response received as :"+response)
				compareWriter.println(sql_id+","+"Failed API response received as :"+response+","+","+","+","+","+","+","+"Test Case is Failed")
			}
			else if (httpStatusCode.toString().equals("200") && jsonResValidate.isValid[tccounter].toString().equals("true"))
			{
				log.info "This is valid Trading certificate"
				compareWriter.println(sql_TradingCertificatePackId+","+jsonResValidate.tradingCertificateId[tccounter]+","+sql_RiskReference+","+jsonResValidate.riskReference[tccounter]+","+sql_TypeCode+","+jsonResValidate.tradingCertificateType[tccounter]+","+jsonResValidate.isValid[tccounter]+","+allAPIErrors+","+"Test Case is passed")
			}
			break;
		}
	}//for loop of number of trading certificates
	counter = 1+counter
	log.info "Total number of verified are =>"+counter
}
public String getFieldName(String fieldName)
{
	if(fieldName.toString().contains("' must not be empty.") && fieldName!=null || fieldName!="")
	{
		fieldName = fieldName.replace("' must not be empty.","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if(fieldName.toString().contains("is required") && fieldName!=null || fieldName!="")
	{
		fieldName = fieldName.replace("is required","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if (fieldName.toString().contains(" set but no ") && fieldName.toString().contains(" address found")&& fieldName!=null || fieldName!="")
	//Member name set but no member address found
	{
		fieldName = fieldName.replace(" set but no ","")
		fieldName = fieldName.replace(" address found","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if(fieldName.toString().contains("At least a Bank is required!") && fieldName!=null || fieldName!="")
	{
		fieldName =  "bankName"
		fieldName = fieldName.toLowerCase()
	}
	else
		fieldName=null
	return fieldName
}
public String removeBracketAndComma(String field)
{
	if(field != null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(",","")
		}
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Trading Certificate By Trading Certificate Id By Validate***********"]]></script></con:config></con:testStep><con:testStep type="restrequest" name="GET_TradCertByTredCertId" id="39bb8bca-4fd8-447f-9bd4-d6b68d21574f"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#tradingCertificateId}" methodName="GET_TradingCertificateByCertificateId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_TradCertByTredCertId" id="325ac480-28f6-4df9-9f1c-06b0aacf1498" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>packId</con:name><con:value>94</con:value></con:property><con:property><con:name>tradingCertificateId</con:name><con:value>134075</con:value></con:property></con:properties></con:testCase><con:testCase id="dd1dfc58-784b-4c91-ada9-b669017feb14" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_TradingCertificateByTradingCertificateIdByValidate" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="TredCertByTradCertIdByValidate" id="ee84daf1-4212-4342-81cd-c792b7a9223a"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#TredCertId}/validate" methodName="TradingCertificateByTradingCertificateIdByValidate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TredCertByTradCertIdByValidate" id="02b0791d-1371-4ba4-b933-641aade1deeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/273695/validate</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="TradingCertificateByTradingCertificateIdByValidate_final" id="b1493dd4-b944-4e75-ab50-241efe03b1bd" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Trading Certificate By Trading Certificate Id By Validate************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

def inputStream = new FileInputStream("C:\\APITesting\\TradingCertificateTesting\\ValidateCertificateRule.xls");
Workbook wb = WorkbookFactory.create(inputStream);
def ws = wb.getSheet("Rules")
def rowCount = ws.getPhysicalNumberOfRows()
//log.info "Number of rows in rule excel are"+rowCount

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_TradingCertificateByTCIdByValidate.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_TradingCertificateByTCIdByValidate.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_TradingCertificateByTCIdByValidate.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_TradingCertificateByTCIdByValidate"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_TradingCertificateByTCIdByValidate"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_TradingCertificateByTCIdByValidate"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()
def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()
def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_id"+","+"SQL_type_Id"+","+"SQL_certificateType"+","+"SQL_reference"+","+"SQL_currentStatus"+","+"SQL_storageId"+","+"SQL_isRenewal"+","+"SQL_isYacht"+","+"SQL_riskId"+","+"SQL_vesselId"+","+"SQL_policyId"+","+"SQL_memberPartyId"+","+"SQL_ownerPartyId"+","+"SQL_brokerPartyId"+","+"SQL_tradingCertificateVersion"+","+"SQL_riskRef"+","+"SQL_vesselReference"+","+"SQL_policyRef"+","+"SQL_memberRef"+","+"SQL_memberType"+","+"SQL_memberName"+","+"SQL_ownerDomicile"+","+"SQL_ownerEmailAddress"+","+"SQL_ownerReference"+","+"SQL_ownerName"+","+"SQL_brokerReference"+","+"SQL_brokerName"+","+"SQL_brokerEmailAddress"+","+"SQL_policyYear"+","+"SQL_certificateIssueDate"+","+"SQL_emailAddress"+","+"SQL_ccEmailAddress"+","+"SQL_cffectiveStartDate"+","+"SQL_effectiveEndDate"+","+"SQL_policyStartDate"+","+"SQL_policyEndDate"+","+"SQL_currencyCode"+","+"SQL_coverLimitAmount"+","+"SQL_dignatoryState_Id"+","+"SQL_nominatedflagstate"+","+"SQL_nominatedFlagStateName"+","+"SQL_vesselName"+","+"SQL_vesselFlag"+","+"SQL_vesselType"+","+"SQL_vesselTypeName"+","+"SQL_passengerCapacity"+","+"SQL_vesselEnteredDate"+","+"SQL_imoNumber"+","+"SQL_engineHorsePower"+","+"SQL_tradeMark"+","+"SQL_model"+","+"SQL_engineNo"+","+"SQL_tenderReferenceList"+","+"SQL_tenderOutboardReferenceList"+","+"SQL_distinctiveNumbersOrLetters"+","+"SQL_grossTonnage"+","+"SQL_yearBuilt"+","+"SQL_portOfRegistry"+","+"SQL_lastModified"+","+"SQL_userPrincipalName_LastModifiedBy"+","+"SQL_addressType_Id"+","+"SQL_jointAssuredName"+","+"SQL_productType"+","+"SQL_sourceSystem"+","+"SQL_isDeleted"+","+"SQL_name"+","+"SQL_active"+","+"SQL_lastModified"+","+"SQL_userPrincipalName_LastModifiedBy"+","+"SQL_group_Id")
apiWriter.println("API_TradingCertificateId"+","+"API_RiskReference"+","+"API_TradingCertificateType"+","+"API_IsValidFlag"+","+"API_ErrorList/s")
compareWriter.println("SQL_id"+","+"API_Id"+","+"SQL_riskref"+","+"API_riskReference"+","+"SQL_certificatetype"+","+"API_tradingCertificateType"+","+"API_isValid"+","+"API_errors"+","+"Test Case Status")

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlStmt = 
"""
SELECT 
Top 100
TC.Id, TC.Type_Id, RT.TypeCode, BS.BankName, *
from TradingCertificate TC 
left join ref_type RT on RT.Id=TC.Type_id
left join ref_addressType RAT on RAT.Id=TC.AddressType_Id
left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id
--where TC.Id=  274138
order by 1 desc
"""

def response= null
def jsonSlurper=null
def jsonResValidate=null
int counter=0, positiveCount=0, negativeCount=0
boolean flag=false;
String columnName=null
boolean ruleFlag = false;

con.eachRow(sqlStmt)
{	
	row ->
	sql_id=row.Id
	sql_addresstypeid=row.AddressType_Id
	sql_type_id=row.Type_Id
	sql_certificatetype=row.TypeCode
	sql_reference=row.Reference
	sql_currentstatus=row.CurrentStatus
	sql_storageid=row.StorageId
	sql_isrenewal=row.IsRenewal
	sql_isyacht=row.IsYacht
	sql_riskid=row.RiskId
	sql_vesselid=row.VesselId
	sql_policyid=row.PolicyId
	sql_memberpartyid=row.MemberPartyId
	sql_ownerpartyid=row.OwnerPartyId
	sql_brokerpartyid=row.BrokerPartyId
	sql_tradingcertificateversion=row.TradingCertificateVersion
	sql_riskref=row.RiskReference
	sql_vesselreference=row.VesselReference
	sql_policyref=row.PolicyReference
	sql_memberref=row.MemberReference
	sql_membertype=row.MemberType
	sql_membername=row.MemberName
	sql_membername = removeBracketAndComma(sql_membername.toString())
	sql_ownerdomicile=row.OwnerDomicile
	sql_ownerdomicile = removeBracketAndComma(sql_ownerdomicile.toString())
	sql_owneremailaddress=row.OwnerEmailAddress
	sql_ownerreference=row.OwnerReference
	sql_ownername=row.OwnerName
	sql_ownername = removeBracketAndComma(sql_ownername.toString())
	sql_brokerreference=row.BrokerReference
	sql_brokername=row.BrokerName
	sql_brokername = removeBracketAndComma(sql_brokername.toString())
	sql_brokeremailaddress=row.BrokerEmailAddress
	sql_policyyear=row.PolicyYear
	sql_certificateissuedate=row.CertificateIssueDate
	sql_emailaddress=row.EmailAddress
	sql_ccemailaddress=row.CCEmailAddress
	sql_effectivestartdate=row.EffectiveStartDate
	sql_effectiveenddate=row.EffectiveEndDate
	sql_policystartdate=row.PolicyStartDate
	sql_policyenddate=row.PolicyEndDate
	sql_currencycode=row.CurrencyCode
	sql_coverlimitamount=row.CoverLimitAmount
	sql_dignatorystate_id=row.SignatoryState_Id
	sql_nominatedstateflag=row.NominatedStateflag
	sql_nominatedflagstatename=row.NominatedStateFlagName
	sql_vesselname=row.VesselName
	sql_vesselname = removeBracketAndComma(sql_vesselname.toString())
	sql_vesselflag=row.VesselFlag
	sql_vesseltype=row.VesselType
	sql_vesseltypename=row.VesselTypeName
	sql_passengercapacity=row.PassengerCapacity
	sql_vesselentereddate=row.VesselEnteredDate
	sql_imonumber=row.IMONumber
	sql_enginehorsepower=row.EngineHorsePower
	sql_trademark=row.TradeMark
	sql_model=row.Model
	sql_engineno=row.EngineNo
	sql_tenderreferencelist=row.TenderReferenceList
	sql_tenderoutboardreferencelist=row.TenderOutboardReferenceList
	sql_distinctivenumbersorletters=row.DistinctiveNumbersOrLetters
	sql_grosstonnage=row.GrossTonnage
	sql_yearbuilt=row.YearBuilt
	sql_portofregistry=row.PortOfRegistry
	sql_portofregistry = removeBracketAndComma(sql_portofregistry.toString())
	sql_lastmodified=row.LastModified
	sql_userprincipalname_lastmodifiedby=row.UserPrincipalName_LastModifiedBy
	sql_addresstype_id=row.AddressType_Id
	sql_jointassuredname=row.JointAssuredName
	sql_producttype=row.ProductType
	sql_sourcesystem=row.SourceSystem
	sql_isdeleted=row.IsDeleted
	sql_name=row.Name
	sql_active=row.Active
	sql_lastmodified=row.LastModified
	sql_userprincipalname_lastmodifiedby=row.UserPrincipalName_LastModifiedBy
	sql_group_id=row.Group_Id
	sql_bankname = row.BankName
	sql_bankname = removeBracketAndComma(sql_bankname.toString())

	sqlWriter.println(sql_id+","+sql_type_id+","+sql_certificatetype+","+sql_reference+","+sql_currentstatus+","+sql_storageid+","+sql_isrenewal+","+sql_isyacht+","+sql_riskid+","+sql_vesselid+","+sql_policyid+","+sql_memberpartyid+","+sql_ownerpartyid+","+sql_brokerpartyid+","+sql_tradingcertificateversion+","+sql_riskref+","+sql_vesselreference+","+sql_policyref+","+sql_memberref+","+sql_membertype+","+sql_membername+","+sql_ownerdomicile+","+sql_owneremailaddress+","+sql_ownerreference+","+sql_ownername+","+sql_brokerreference+","+sql_brokername+","+sql_brokeremailaddress+","+sql_policyyear+","+sql_certificateissuedate+","+sql_emailaddress+","+sql_ccemailaddress+","+sql_effectivestartdate+","+sql_effectiveenddate+","+sql_policystartdate+","+sql_policyenddate+","+sql_currencycode+","+sql_coverlimitamount+","+sql_dignatorystate_id+","+sql_nominatedstateflag+","+sql_nominatedflagstatename+","+sql_vesselname+","+sql_vesselflag+","+sql_vesseltype+","+sql_vesseltypename+","+sql_passengercapacity+","+sql_vesselentereddate+","+sql_imonumber+","+sql_enginehorsepower+","+sql_trademark+","+sql_model+","+sql_engineno+","+sql_tenderreferencelist+","+sql_tenderoutboardreferencelist+","+sql_distinctivenumbersorletters+","+sql_grosstonnage+","+sql_yearbuilt+","+sql_portofregistry+","+sql_lastmodified+","+sql_userprincipalname_lastmodifiedby+","+sql_addresstype_id+","+sql_jointassuredname+","+sql_producttype+","+sql_sourcesystem+","+sql_isdeleted+","+sql_name+","+sql_active+","+sql_lastmodified+","+sql_userprincipalname_lastmodifiedby+","+sql_group_id+","+sql_bankname)
	log.info "SQL query Response is received as "+sql_id+","+sql_type_id+","+sql_certificatetype+","+sql_reference+","+sql_currentstatus+","+sql_storageid+","+sql_isrenewal+","+sql_isyacht+","+sql_riskid+","+sql_vesselid+","+sql_policyid+","+sql_memberpartyid+","+sql_ownerpartyid+","+sql_brokerpartyid+","+sql_tradingcertificateversion+","+sql_riskref+","+sql_vesselreference+","+sql_policyref+","+sql_memberref+","+sql_membertype+","+sql_membername+","+sql_ownerdomicile+","+sql_owneremailaddress+","+sql_ownerreference+","+sql_ownername+","+sql_brokerreference+","+sql_brokername+","+sql_brokeremailaddress+","+sql_policyyear+","+sql_certificateissuedate+","+sql_emailaddress+","+sql_ccemailaddress+","+sql_effectivestartdate+","+sql_effectiveenddate+","+sql_policystartdate+","+sql_policyenddate+","+sql_currencycode+","+sql_coverlimitamount+","+sql_dignatorystate_id+","+sql_nominatedstateflag+","+sql_nominatedflagstatename+","+sql_vesselname+","+sql_vesselflag+","+sql_vesseltype+","+sql_vesseltypename+","+sql_passengercapacity+","+sql_vesselentereddate+","+sql_imonumber+","+sql_enginehorsepower+","+sql_trademark+","+sql_model+","+sql_engineno+","+sql_tenderreferencelist+","+sql_tenderoutboardreferencelist+","+sql_distinctivenumbersorletters+","+sql_grosstonnage+","+sql_yearbuilt+","+sql_portofregistry+","+sql_lastmodified+","+sql_userprincipalname_lastmodifiedby+","+sql_addresstype_id+","+sql_jointassuredname+","+sql_producttype+","+sql_sourcesystem+","+sql_isdeleted+","+sql_name+","+sql_active+","+sql_lastmodified+","+sql_userprincipalname_lastmodifiedby+","+sql_group_id+","+sql_bankname

	String tredCertId=sql_id.toString()
	testRunner.testCase.setPropertyValue("TredCertId", tredCertId)

	testRunner.testCase.testSuite.setPropertyValue("token", token)
	
	testRunner.runTestStepByName("TredCertByTradCertIdByValidate")
	String req = '${TredCertByTradCertIdByValidate#Response}'	
	response=context.expand(req)
	log.info "API response for validate trading certificate is received as : " +response
	jsonSlurper = new JsonSlurper()
	jsonResValidate = jsonSlurper.parseText(response)
	api_tradingCertificateType = jsonResValidate.tradingCertificateType

	testRunner.testCase.setPropertyValue("tradingCertificateId", tredCertId)

	testRunner.runTestStepByName("getTradCertByTredCertId")
	String responseBody = '${getTradCertByTredCertId#Response}'	
	getResponse=context.expand(responseBody)
	log.info "API response for GET Trading certificate by Trading Certificate Id is received as : " +getResponse
	getJsonSlurper = new JsonSlurper()
	jsonResGetById = getJsonSlurper.parseText(getResponse)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["TredCertByTradCertIdByValidate"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	
	//get Number of Columns from Excel
	int numberOfCells = 0;
	Iterator rowIterator = ws.rowIterator();
	if (rowIterator.hasNext())
	{
		Row headerRow = (Row) rowIterator.next();
		numberOfCells = headerRow.getPhysicalNumberOfCells();
	}
	String[] numberOfErrors= jsonResValidate.errors
	String allAPIErrors=""
	for (int errorCounter=0; errorCounter<numberOfErrors.length; errorCounter++)
	{
		//apiWriter.println(jsonResValidate.tradingCertificateId+","+jsonResValidate.riskReference+","+jsonResValidate.tradingCertificateType+","+jsonResValidate.isValid+","+jsonResValidate.errors[errorCounter])
		allAPIErrors=jsonResValidate.errors[errorCounter] +" "+  allAPIErrors
	}
	if(jsonResValidate.tradingCertificateId.toString()!=null)
	{
		api_tradingCertificateId = jsonResValidate.tradingCertificateId
		api_tradingCertificateId = removeBracketAndComma(api_tradingCertificateId.toString())
		api_riskReference = jsonResValidate.riskReference
		api_riskReference = removeBracketAndComma(api_riskReference.toString())
		api_tradingCertificateType = jsonResValidate.tradingCertificateType
		api_tradingCertificateType = removeBracketAndComma(api_tradingCertificateType.toString())
		api_isValid = jsonResValidate.isValid
		api_isValid = removeBracketAndComma(api_isValid.toString())
		api_errors=allAPIErrors
		api_errors = removeBracketAndComma(api_errors.toString())
		apiWriter.println(api_tradingCertificateId+","+api_riskReference+","+api_tradingCertificateType+","+api_isValid+","+api_errors)
	}
	 if(jsonResValidate.isValid.toString().equals("false") && httpStatusCode.toString().equals("200"))
	{
		//log.info "API response is received sucessfully"+response
		for(int i=1; i<rowCount; i++)
		{
			Row rows = ws.getRow(i);
			Cell cell = rows.getCell(0);
			String tradingCertificateType = cell.getStringCellValue().trim();
			//log.info "tradingCertificateType : "+tradingCertificateType
			if(tradingCertificateType.toString().equals(api_tradingCertificateType.toString()))
			{
				tradingCertificateRowNumber = i;
				String[] errorList1 = jsonResValidate.errors
				ArrayList<String> errorList = new ArrayList<String>();
				
				int errorCountCheck=0;
				
				for (int k=0; k<errorList1.length; k++)
				{
					String errorDescription = errorList1[k]
					errorList.add(errorDescription)
					log.info "Reason number "+(k+1)+" : "+errorList1[k]
					String field = getFieldName(errorList[k])
					log.info "Field Name after removing additional text is: "+field
					for (int j=0; j<=95;j++)
					{
						rows = ws.getRow(i);
						cell = rows.getCell(j);
						
						Row headerColumns = ws.getRow(0);
						Cell cols = headerColumns.getCell(j);
						columnName = cols.getStringCellValue().trim();
						
						if (cell.CELL_TYPE_STRING)
						{
							validation = cell.getStringCellValue().trim();
							//log.info "Field : "+field +"==> columnName : "+columnName+"==>Rule : "+validation
						}//if condition ended for cell type is string from validation rule excel
						else if(cell.CELL_TYPE_NUMERIC)
						{
							int numericValue = cell.getNumericCellValue().trim();
							validation = Intger.parseInt(numericValue)
							//log.info "validation in numeric : "+validation
						}
						if(field.toLowerCase().equals(columnName.toLowerCase()))
						{
							if(validation.equals("true"))
								ruleFlag=true
							else 
								ruleFlag=false
							log.info "==>"+field.toLowerCase()+"==>"+columnName.toLowerCase()
							//break;
						}
					}
					if(ruleFlag)
					{
						switch (errorDescription)
						{
							case "'Policy Year' must not be empty.":
									//if(sql_policyyear.equals(jsonResValidate.policyYear))
									if(sql_policyyear.equals(jsonResGetById.policyYear))
									{
										log.info "Rule Flag = "+ruleFlag + "  SQL value for Policy Year is : "+sql_policyyear+" and API value for Policy Year is : "+jsonResGetById.policyYear
										errorCountCheck++;
									}
								break;
							case "'Nominated Flag State' must not be empty.":
									//if(sql_nominatedstateflag.equals(jsonResValidate.nominatedFlagState))
									if(sql_nominatedstateflag.equals(jsonResGetById.nominatedFlagState))
									{
										log.info "Rule Flag = "+ruleFlag + "  SQL value for Nominated State Flag is : "+sql_nominatedstateflag+" and API value for Nominated State Flag is : "+jsonResGetById.nominatedFlagState
										errorCountCheck++;
									}
									break;
							case "Owner name required.":
							case "'Owner Name' must not be empty.":
									//if(sql_ownername.equals(jsonResValidate.ownerName))
									if(sql_ownername.equals(jsonResGetById.ownerName))
									{
										log.info "Rule Flag = "+ruleFlag + "  SQL value for Owner name is : "+sql_ownername+" and API value for Owner name is : "+jsonResGetById.ownername
										errorCountCheck++;
									}
								break;
							case "Vessel name is required.":
							case  "'Vessel Name' must not be empty.":
								//if(sql_vesselname.equals(jsonResValidate.vesselName))
								if(sql_vesselname.equals(jsonResGetById.vesselName))
								{
									log.info "Rule Flag = "+ruleFlag + "  SQL value for Vessel name is : "+sql_vesselname+" and API value for Vessel name is : "+jsonResGetById.vesselName
									errorCountCheck++;
								}
								break;
							case "Member name is required." :
							case "'Member Name' must not be empty.":
								//if(sql_membername.equals(jsonResValidate.memberName))
								if(sql_membername.equals(jsonResGetById.memberName))
								{
									log.info "Rule Flag = "+ruleFlag + "  SQL value for Member name is : "+sql_membername+" and API value for Member name is : "+jsonResGetById.memberName
									errorCountCheck++;
								}
								break;
							case "Disctinctive numbers or letters required.":
							case "'Distinctive Numbers Or Letters' must not be empty.":
								//if(sql_distinctivenumbersorletters.equals(jsonResValidate.distinctiveNumbersOrLetters))
								if(sql_distinctivenumbersorletters.equals(jsonResGetById.distinctiveNumbersOrLetters))
								{
									log.info "Rule Flag = "+ruleFlag + "  SQL value for Distinctive Numbers Or Letters is : "+sql_distinctivenumbersorletters+" and API value for Distinctive Numbers Or Letters is : "+jsonResGetById.distinctiveNumbersOrLetters
									errorCountCheck++;
								}
								break;
							case "'Owner Address' must not be empty.":
								//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.ownerAddress==null)
								if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.ownerAddress==null)
								{
									log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Owner Address is : "+jsonResGetById.ownerAddress
									errorCountCheck++;
								}
								break;
							case "'State Address' must not be empty.":
								//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.stateAddress==null)
								if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.stateAddress==null)
								{
									log.info "SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for State Address is : "+jsonResGetById.stateAddress
									errorCountCheck++;
								}
								break;
							case "'Joint Assured Address' must not be empty.":
								//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.jointAssuredAddress==null)
								if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.jointAssuredAddress==null)
								{
									log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for JA Address is : "+jsonResGetById.jointAssuredAddress
									errorCountCheck++;
								}
								break;
							case "'Joint Assured Name' must not be empty.":
								//if(sql_jointassuredname.equals(jsonResValidate.jointAssuredName))
								if(sql_jointassuredname.equals(jsonResGetById.jointAssuredName))
								{
									log.info "Rule Flag = "+ruleFlag + "  SQL value for Joint Assured name is : "+sql_jointassuredname+" and API value for Joint Assured  name is : "+jsonResGetById.jointAssuredName
									errorCountCheck++;
								}
								break;
							case "Bank Address Bank name is required.":
							if(sql_bankname.equals(null))
									errorCountCheck++;
								break;
							case "'Broker Address' must not be empty.":
								//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.brokerAddress==null)
								if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.brokerAddress==null)
								{
									log.info " SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Broker Address is : "+jsonResGetById.brokerAddress
									errorCountCheck++;
								}
								break;
							case "'Member Address' must not be empty.":
								//if(sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.memberAddress==null)
								if(sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.memberAddress==null)
								{
									log.info "SQL value for Address Id name is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Member Address is : "+jsonResGetById.memberAddress
									errorCountCheck++;
								}
								break;
							case "Member name set but no member address found":
								//if(sql_membername!=null && sql_addresstypeid.equals(jsonResValidate.addressTypeId) && jsonResValidate.memberAddress==null)
								if(sql_membername!=null && sql_addresstypeid.equals(jsonResGetById.addressTypeId) && jsonResGetById.memberAddress==null)
								{
									log.info "SQL value for Member name is : "+sql_membername+" and API Member Name value  is : "+jsonResGetById.memberName+" and SQL value for Address Type Id is : "+sql_addresstypeid+" and API value for Address Id is : "+jsonResGetById.addressTypeId+" and API value for Member Address is : "+jsonResGetById.memberAddress
									errorCountCheck++;
								}
								break;
							case "Policy limit currency code is required.":
							case "'Currency Code' must not be empty.":
								//if(sql_currencycode==null && jsonResValidate.currencyCode==null)
								if(sql_currencycode==null && jsonResGetById.currencyCode==null)
								{
									log.info "Rule Flag = "+ruleFlag + "  SQL value for Currency Code is : "+sql_currencycode+" and API value for Currency Code is : "+jsonResGetById.currencyCode
									errorCountCheck++;
								}
								break;
							case "Policy limit amount is required.":
							case "'Cover Limit Amount' must not be empty.":
								//if(sql_coverlimitamount==null && jsonResValidate.coverLimitAmount==null)
								if(sql_coverlimitamount==null && jsonResGetById.coverLimitAmount==null)
								{
									log.info "Rule Flag = "+ruleFlag + "  SQL value for Cover Limit Amount is : "+sql_coverlimitamount+" and API value for Cover Limit Amount is : "+jsonResGetById.coverLimitAmount
									errorCountCheck++;
								}
								break;
							case "Engine horse power is required.":
							case "'Engine Horse Power' must not be empty.":
								//if(sql_enginehorsepower==null && jsonResValidate.engineHorsePower==null)
								if(sql_enginehorsepower==null && jsonResGetById.engineHorsePower==null)
								{
									log.info "Rule Flag = "+ruleFlag + "  SQL value for Engine Horse Power is : "+sql_enginehorsepower+" and API value for Engine Horse Power is : "+jsonResGetById.engineHorsePower
									errorCountCheck++;
								}
								break;
							case "'Trademark And Engine Model' must not be empty.":
								//if(sql_trademark==null && jsonResValidate.trademarkAndEngineModel==null)
								if(sql_trademark==null && jsonResGetById.trademarkAndEngineModel==null)
								{
									log.info "Rule Flag = "+ruleFlag + "  SQL value for Trade Mark is : "+sql_trademark+" and API value for Trade Mark is : "+jsonResGetById.trademarkAndEngineModel
									errorCountCheck++;
								}
								break;
							case "Gross tonnage is required." :
							case "'Gross Tonnage' must not be empty.":
								//if(sql_grosstonnage==null && jsonResValidate.grossTonnage==null)
								if(sql_grosstonnage==null && jsonResGetById.grossTonnage==null)
								{
									log.info "Rule Flag = "+ruleFlag + "  SQL value for Gross Tonnage is : "+sql_grosstonnage+" and API value for Gross Tonnage is : "+jsonResGetById.grossTonnage
									errorCountCheck++;
								}
								break;
							case "Year built is required.":
							case "'Year Built' must not be empty.":
								//if(sql_grosstonnage==null && jsonResValidate.yearBuilt==null)
								if(sql_yearbuilt==null && jsonResGetById.yearBuilt==null)
								{
									log.info "Rule Flag = "+ruleFlag + "  SQL value for Year Built is : "+sql_yearbuilt+" and API value for Year Built is : "+jsonResGetById.yearBuilt
									errorCountCheck++;	
								}
								break;
							case "Address is required.":
									errorCountCheck++;
								break;
							case "At least a Bank is required!":
								if(jsonResGetById.tradingCertificate.equals(null) || jsonResGetById.tradingCertificate.equals(""))
									errorCountCheck++;
								break;
							case "Address city name is required." :
								errorCountCheck++;
								break;
							case "Address country is require."	:
								errorCountCheck++;
								break;
							case "Address line 1 is required." :
								errorCountCheck++;
								break;
							case "Address line 2 is required.":
								errorCountCheck++;
								break;
							case "Address line 3 is required.":
								errorCountCheck++;
								break;
							case "Address name is required.":
								errorCountCheck++;
								break;
							case "Address poscode is required.":
								errorCountCheck++;
								break;
							case "Address State is required.":				
								errorCountCheck++;
								break;
							case "Bank name is required.":
								if(sql_bankname.equals(jsonResGetById.tradingCertificateBanks.equals(null)) && sql_bankname.equals(null))
									errorCountCheck++;
								break;
							case "Broker name is required.":	
								if(sql_brokername.equals(jsonResGetById.brokerName.equals(null))&& sql_brokername.equals(null))
									errorCountCheck++;
								break;
							case "Email address is required.":	
								if(sql_emailaddress.equals(jsonResGetById.emailAddress.equals(null))&& sql_emailaddress.equals(null))	
									errorCountCheck++;
								break;
							case "Member ref is required."	:				
								if(sql_memberref.equals(jsonResGetById.memberReference.equals(null))&& sql_memberref.equals(null))	
									errorCountCheck++;
								break;
							case "Policy end date is required.":					
								if(sql_policyenddate.equals(jsonResGetById.policyEndDate.equals(null))&& sql_policyenddate.equals(null))	
									errorCountCheck++;
								break;
							case "IMO Number Is Required.":
							case "'IMO Number' must not be empty.":
							case "IMONumberIsRequired.":				
								if(sql_imonumber.equals(jsonResGetById.imoNumber.equals(null))&& sql_imonumber.equals(null))	
									errorCountCheck++;
								break;
							case "Issue Date is required.":				
								if(sql_certificateissuedate.equals(jsonResGetById.certificateIssueDate.equals(null))&& sql_certificateissuedate.equals(null))	
									errorCountCheck++;
								break;
							case "Policy reference number is required." :
								if(sql_policyref.equals(jsonResGetById.policyReference.equals(null))&& sql_policyref.equals(null))	
									errorCountCheck++;
								break;
							case "Policy start date is required." :
								if(sql_policystartdate.equals(jsonResGetById.policyStartDate.equals(null))&& sql_policystartdate.equals(null))	
									errorCountCheck++;
								break;
							case "Port of registry required." :
								if(sql_portofregistry.equals(jsonResGetById.portOfRegistry.equals(null))&& sql_portofregistry.equals(null))	
									errorCountCheck++;
								break;
							case "Risk ref is required." :
								if(sql_riskref.equals(jsonResGetById.riskReference.equals(null))&& sql_riskref.equals(null))	
									errorCountCheck++;
								break;
							case "Signatory state is required." :
								errorCountCheck++;
								break;
							case "Signatory State Address is required." :
								errorCountCheck++;
								break;
							case "Certificate sequence number is required." :
								errorCountCheck++;
								break;
							case "Vessel flag is required." :
								if(sql_vesselflag.equals(jsonResGetById.vesselFlag.equals(null))&& sql_vesselflag.equals(null))	
									errorCountCheck++;
								break;
							case "Vessel model is required." :
								if(sql_model.equals(jsonResGetById.model.equals(null))&& sql_model.equals(null))	
									errorCountCheck++;
								break;
							case "Vessel type is required." :
								if(sql_vesseltype.equals(jsonResGetById.vesselType.equals(null))&& sql_vesseltype.equals(null))	
									errorCountCheck++;
								break;
							case "Vessel trademark is required." :
								if(sql_trademark.equals(jsonResGetById.trademarkAndEngineModel.equals(null))&& sql_trademark.equals(null))	
									errorCountCheck++;
								break;
							case "Member Address Address name is required." :
							case "Member Address Address city name is required " :
							case "Member Address Address country is required" :
										errorCountCheck++;
									break;
							case "Broker Address Address name is required." :
							case "Broker Address Address city name is required " :
							case "Broker Address Address country is required" :
										errorCountCheck++;
									break;
						}//end of switch case
						if(errorList1.length.equals(errorCountCheck))
						{
							log.info "Error count is matching hence test case is passed"
							allAPIErrors=allAPIErrors.replace(",", " ")
							compareWriter.println(sql_id+","+jsonResValidate.tradingCertificateId+","+sql_riskref+","+jsonResValidate.riskReference+","+sql_certificatetype+","+jsonResValidate.tradingCertificateType+","+jsonResValidate.isValid+","+allAPIErrors+","+"Test Case is passed")
						}
					}//if condition for rule is true
					else
					{
						log.info "Error count is not matching hence test case is failed"
						allAPIErrors=allAPIErrors.replace(",", " ")
						compareWriter.println(sql_id+","+jsonResValidate.tradingCertificateId[k]+","+sql_RiskReference+","+jsonResValidate.riskReference[k]+","+sql_TypeCode+","+jsonResValidate.tradingCertificateType[k]+","+jsonResValidate.isValid[k]+","+allAPIErrors+","+"Test Case is Failed")
					}
				}//end of error list for loop
			}//if condition to check the trading certificate types
		}//for loop for checking all rows
	}
	else if(httpStatusCode.toString().equals("401"))
	{
		log.info "Failed API response received as :"+response
		compareWriter.println(sql_id+","+"Failed API response received as :"+response+","+","+","+","+","+","+","+"Test Case is Failed")
	}
	else if (httpStatusCode.toString().equals("200") && jsonResValidate.isValid.toString().equals("true"))
	{
		log.info "This is valid Trading certificate"
		compareWriter.println(sql_id+","+jsonResValidate.tradingCertificateId+","+sql_riskref+","+jsonResValidate.riskReference+","+sql_certificatetype+","+jsonResValidate.tradingCertificateType+","+jsonResValidate.isValid+","+allAPIErrors+","+"Test Case is passed")
	}
	counter++
	log.info "Number of records verified are : "+counter
}

public String getFieldName(String fieldName)
{
	if(fieldName.toString().contains("' must not be empty.") && fieldName!=null || fieldName!="")
	{
		fieldName = fieldName.replace("' must not be empty.","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if(fieldName.toString().contains("is required") && fieldName!=null || fieldName!="")
	{
		fieldName = fieldName.replace("is required","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if (fieldName.toString().contains(" set but no ") && fieldName.toString().contains(" address found")&& fieldName!=null || fieldName!="")
	//Member name set but no member address found
	{
		fieldName = fieldName.replace(" set but no ","")
		fieldName = fieldName.replace(" address found","")
		fieldName = fieldName.replace("'","")
		fieldName = fieldName.replace(" ","").toLowerCase()
	}
	else if(fieldName.toString().contains("At least a Bank is required!") && fieldName!=null || fieldName!="")
	{
		fieldName =  "bankName"
		fieldName = fieldName.toLowerCase()
	}
	else
		fieldName=null
	return fieldName
}
public String removeBracketAndComma(String field)
{
	if(field != null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(",","")
		}
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Trading Certificate By Trading Certificate Id By Validate***********"

/*
 * So far we have checked below errors
 * Joint Assured name set but no joint assured address found
'Joint Assured Address' must not be empty.
Address is required
'Broker Address' must not be empty.
Member name set but no member address found
'Member Address' must not be empty
'Member Name' must not be empty
'Owner Name' must not be empty
Owner Address' must not be empty
'Vessel Name' must not be empty
At least a Bank is required!
Bank Address Bank name is required
'Policy Year' must not be empty
'Distinctive Numbers Or Letters' must not be empty
'Currency Code' must not be empty
'Engine Horse Power' must not be empty
'Gross Tonnage' must not be empty
'Year Built' must not be empty
'Cover Limit Amount' must not be empty
'Trademark And Engine Model' must not be empty
'Nominated Flag State' must not be empty
'State Address' must not be empty
 */]]></script></con:config></con:testStep><con:testStep type="restrequest" name="getTradCertByTredCertId" id="0a5d5342-d084-4af2-9482-2de7011ced97"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#tradingCertificateId}" methodName="GET_TradingCertificateByCertificateId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getTradCertByTredCertId" id="325ac480-28f6-4df9-9f1c-06b0aacf1498" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>TredCertId</con:name><con:value>134013</con:value></con:property><con:property><con:name>tradingCertificateId</con:name><con:value>134013</con:value></con:property></con:properties></con:testCase><con:testCase id="c63dbbb5-91c4-41b9-81d5-1f6ffa266b71" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_TradingCertificatePacksByPacksId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="GET_TradingCertificatePacksByPackId" id="dd64bb28-c9cb-4e66-a6a0-0551d3ec4bd5"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificatePacks/${#TestCase#TCPackId}" methodName="GET_TradingcertificatePacksByPackId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_TradingCertificatePacksByPackId" id="50c13843-d0eb-4c3b-a035-93fd8a637307" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="GET_TradingCertificatePacksByPacksId" id="bc6826a6-e9a5-48a3-b704-95d5ff93b328" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.json.*
import groovy.sql.Sql
import java.io.File 
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST Method for Trading Certificate Packs************"


String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']
String url=prop['DB_URL']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_GETMethodForTradingCertificatePacks.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_GETMethodForTradingCertificatePacks.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_MethodForTradingCertificatePacks.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_GETMethodForTradingCertificatePacks"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_GETMethodForTradingCertificatePacks"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_Response_MethodForTradingCertificatePacks"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificatePackId"+","+"SQL_CreatedByUserEmailAddress"+","+"SQL_CreatedDateTime"+","+"SQL_AddressType_Id"+","+"SQL_SourceSystem"+","+"SQL_Reference"+","+"SQL_CurrentStatus"+","+"SQL_StorageId"+","+"SQL_RiskId"+","+"SQL_PolicyId"+","+"SQL_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"SQL_IsRenewal"+","+"SQL_IsRenewalFlag"+","+"SQL_IsYacht"+","+"SQL_IsYachtFlag"+","+"SQL_Version"+","+"SQL_RiskReference"+","+"SQL_PolicyReference"+","+"SQL_MemberReference"+","+"SQL_MemberType"+","+"SQL_MemberName"+","+"SQL_JointAssuredName"+","+"SQL_OwnerReference"+","+"SQL_OwnerName"+","+"SQL_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"SQL_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"SQL_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"SQL_CcEmailAddress"+","+"SQL_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"SQL_VesselName"+","+"SQL_VesselType"+","+"SQL_VesselTypeName"+","+"SQL_vesselEnteredDate"+","+"SQL_vesselFlag"+","+"SQL_imoNumber"+","+"SQL_distinctiveNumbersOrLetters"+","+"SQL_grossTonnage"+","+"SQL_yearBuilt"+","+"SQL_engineHorsePower"+","+"SQL_model"+","+"SQL_engineNo"+","+"SQL_NominatedStateFlag"+","+"SQL_NominatedStateFlagName"+","+"SQL_portOfRegistry"+","+"SQL_TenderOutboardReferenceList"+","+"SQL_TenderReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"SQL_TradingCertificateTypeCode"+","+"SQL_TradingCertificateTypeName"+","+"SQL_StateAddressTypeName"+","+"SQL_StateAddressTypeId"+","+"SQL_StateTradingCertificateId"+","+"SQL_StateRiskReference"+","+"SQL_StateAddressId"+","+"SQL_StateAddressName"+","+"SQL_StateAddressLine1"+","+"SQL_StateAddressLine2"+","+"SQL_StateAddressName"+","+"SQL_StateStateOrCounty"+","+"SQL_StateCity"+","+"SQL_StateCountry"+","+"SQL_StatePostCode"+","+"SQL_StateIsPrimaryAddress"+","+"SQL_OwnerAddressTypeName"+","+"SQL_OwnerAddressTypeId"+","+"SQL_OwnerTradingCertificateId"+","+"SQL_OwnerRiskReference"+","+"SQL_OwnerAddressId"+","+"SQL_OwnerAddressName"+","+"SQL_OwnerAddressLine1"+","+"SQL_OwnerAddressLine2"+","+"SQL_OwnerAddressName"+","+"SQL_OwnerStateOrCounty"+","+"SQL_OwnerCity"+","+"SQL_OwnerCountry"+","+"SQL_OwnerPostCode"+","+"SQL_OwnerIsPrimaryAddress"+","+"SQL_BrokerAddressTypeName"+","+"SQL_BrokerAddressTypeId"+","+"SQL_BrokerTradingCertificateId"+","+"SQL_BrokerRiskReference"+","+"SQL_BrokerAddressId"+","+"SQL_BrokerAddressName"+","+"SQL_BrokerAddressLine1"+","+"SQL_BrokerAddressLine2"+","+"SQL_BrokerAddressName"+","+"SQL_BrokerStateOrCounty"+","+"SQL_BrokerCity"+","+"SQL_BrokerCountry"+","+"SQL_BrokerPostCode"+","+"SQL_BrokerIsPrimaryAddress"+","+"SQL_MemberAddressTypeName"+","+"SQL_MemberAddressTypeId"+","+"SQL_MemberTradingCertificateId"+","+"SQL_MemberRiskReference"+","+"SQL_MemberAddressId"+","+"SQL_MemberAddressName"+","+"SQL_MemberAddressLine1"+","+"SQL_MemberAddressLine2"+","+"SQL_MemberAddressName"+","+"SQL_MemberStateOrCounty"+","+"SQL_MemberCity"+","+"SQL_MemberCountry"+","+"SQL_MemberPostCode"+","+"SQL_MemberIsPrimaryAddress"+","+"SQL_JointAssuredAddressTypeName"+","+"SQL_JointAssuredAddressTypeId"+","+"SQL_JointAssuredTradingCertificateId"+","+"SQL_JointAssuredRiskReference"+","+"SQL_JointAssuredAddressId"+","+"SQL_JointAssuredAddressName"+","+"SQL_JointAssuredAddressLine1"+","+"SQL_JointAssuredAddressLine2"+","+"SQL_JointAssuredAddressName"+","+"SQL_JointAssuredStateOrCounty"+","+"SQL_JointAssuredCity"+","+"SQL_JointAssuredCountry"+","+"SQL_JointAssuredPostCode"+","+"SQL_JointAssuredIsPrimaryAddress"+","+"SQL_BranchAddressTypeName"+","+"SQL_BranchAddressTypeId"+","+"SQL_BranchTradingCertificateId"+","+"SQL_BranchRiskReference"+","+"SQL_BranchAddressId"+","+"SQL_BranchAddressName"+","+"SQL_BranchAddressLine1"+","+"SQL_BranchAddressLine2"+","+"SQL_BranchAddressName"+","+"SQL_BranchStateOrCounty"+","+"SQL_BranchCity"+","+"SQL_BranchCountry"+","+"SQL_BranchPostCode"+","+"SQL_BranchIsPrimaryAddress")
apiWriter.println("API_TCPackId"+","+"API_CreatedByUserEmailAddress"+","+"API_CreatedDateTime"+","+"API_tradingCertificateId"+","+"API_addressTypeId"+","+"API_sourceSystem"+","+"API_tradingCertificateId"+","+"API_addressTypeId"+","+"API_sourceSystem"+","+"API_reference"+","+"API_currentStatus"+","+"API_storageId"+","+"API_riskId"+","+"API_policyId"+","+"API_memberPartyId"+","+"API_ownerPartyId"+","+"API_brokerPartyId"+","+"API_isRenewal"+","+"API_isYacht"+","+"API_version"+","+"API_riskReference"+","+"API_policyReference"+","+"API_memberReference"+","+"API_memberType"+","+"API_memberName"+","+"API_jointAssuredName"+","+"API_ownerReference"+","+"API_ownerName"+","+"API_ownerDomicile"+","+"API_ownerEmailAddress"+","+"API_brokerReference"+","+"API_brokerName"+","+"API_brokerEmailAddress"+","+"API_policyYear"+","+"API_certificateIssueDate"+","+"API_emailAddress"+","+"API_ccEmailAddress"+","+"API_effectiveStartDate"+","+"API_effectiveEndDate"+","+"API_passengerCapacity"+","+"API_policyStartDate"+","+"API_policyEndDate"+","+"API_currencyCode"+","+"API_coverLimitAmount"+","+"API_signatoryStateId"+","+"API_vesselName"+","+"API_vesselType"+","+"API_vesselTypeName"+","+"API_vesselEnteredDate"+","+"API_vesselFlag"+","+"API_imoNumber"+","+"API_distinctiveNumbersOrLetters"+","+"API_grossTonnage"+","+"API_yearBuilt"+","+"API_engineHorsePower"+","+"API_trademarkAndEngineModel"+","+"API_model"+","+"API_engineNo"+","+"API_nominatedFlagState"+","+"API_nominatedFlagStateName"+","+"API_portOfRegistry"+","+"API_tenderReferenceList"+","+"API_tenderOutboardReferenceList"+","+"API_tradingCertificateTypeId"+","+"API_tradingCertificateGroupId"+","+"API_tradingCertificateGroupName"+","+"API_tradingCertificateGroupCode"+","+"API_tradingCertificateTypeTypeCode"+","+"API_tradingCertificateTypeTypeName"+","+"API_certificateIssueDate"+","+"API_effectiveStartDate"+","+"API_effectiveEndDate"+","+"API_policyStartDate"+","+"API_policyEndDate"+","+"API_vesselEnteredDate"+","+"API_stateAddressId"+","+"API_stateAddressName"+","+"API_stateAddressLine1"+","+"API_stateAddressLine2"+","+"API_stateAddressLine3"+","+"API_stateAddressStateOrCounty"+","+"API_stateAddressCity"+","+"API_stateAddressCountry"+","+"API_stateAddressPostCode"+","+"API_stateAddressPrimaryAddress"+","+"API_ownerAddressId"+","+"API_ownerAddressName"+","+"API_ownerAddressLine1"+","+"API_ownerAddressLine2"+","+"API_ownerAddressLine3"+","+"API_ownerAddressStateOrCounty"+","+"API_ownerAddressCity"+","+"API_ownerAddressCountry"+","+"API_ownerAddressPostCode"+","+"API_ownerAddressPrimaryAddress"+","+"API_brokerAddressId"+","+"API_brokerAddressName"+","+"API_brokerAddressLine1"+","+"API_brokerAddressLine2"+","+"API_brokerAddressLine3"+","+"API_brokerAddressStateOrCounty"+","+"API_brokerAddressCity"+","+"API_brokerAddressCountry"+","+"API_brokerAddressPostCode"+","+"API_brokerAddressPrimaryAddress"+","+"API_memberAddressId"+","+"API_memberAddressName"+","+"API_memberAddressLine1"+","+"API_memberAddressLine2"+","+"API_memberAddressLine3"+","+"API_memberAddressStateOrCounty"+","+"API_memberAddressCity"+","+"API_memberAddressCountry"+","+"API_memberAddressPostCode"+","+"API_memberAddressPrimaryAddress"+","+"API_jointAssuredAddressId"+","+"API_jointAssuredAddressName"+","+"API_jointAssuredAddressLine1"+","+"API_jointAssuredAddressLine2"+","+"API_jointAssuredAddressLine3"+","+"API_jointAssuredAddressStateOrCounty"+","+"API_jointAssuredAddressCity"+","+"API_jointAssuredAddressCountry"+","+"API_jointAssuredAddressPostCode"+","+"API_jointAssuredAddressPrimaryAddress"+","+"API_branchAddressId"+","+"API_branchAddressName"+","+"API_branchAddressLine1"+","+"API_branchAddressLine2"+","+"API_branchAddressLine3"+","+"API_branchAddressStateOrCounty"+","+"API_branchAddressCity"+","+"API_branchAddressCountry"+","+"API_branchAddressPostCode"+","+"API_branchAddressPrimaryAddress")
compareWriter.println("SQL_TradingCertificatePackId"+","+"API_TCPackId"+","+"SQL_CreatedByUserEmailAddress"+","+"API_CreatedByUserEmailAddress"+","+"SQL_CreatedDateTime"+","+"API_CreatedDateTime"+","+"SQL_TradingCertificateId"+","+"API_tradingCertificateId"+","+"SQL_AddressType_Id"+","+"API_addressTypeId"+","+"SQL_SourceSystem"+","+"API_sourceSystem"+","+"SQL_Reference"+","+"API_reference"+","+"SQL_CurrentStatus"+","+"API_currentStatus"+","+"SQL_StorageId"+","+"API_storageId"+","+"SQL_RiskId"+","+"API_riskId"+","+"SQL_PolicyId"+","+"API_policyId"+","+"SQL_MemberPartyId"+","+"API_memberPartyId"+","+"SQL_OwnerPartyId"+","+"API_ownerPartyId"+","+"SQL_BrokerPartyId"+","+"API_brokerPartyId"+","+"SQL_IsRenewalFlag"+","+"API_isRenewal"+","+"SQL_IsYachtFlag"+","+"API_isYacht"+","+"SQL_Version"+","+"API_version"+","+"SQL_RiskReference"+","+"API_riskReference"+","+"SQL_PolicyReference"+","+"API_policyReference"+","+"SQL_MemberReference"+","+"API_memberReference"+","+"SQL_MemberType"+","+"API_memberType"+","+"SQL_MemberName"+","+"API_memberName"+","+"SQL_JointAssuredName"+","+"API_jointAssuredName"+","+"SQL_OwnerReference"+","+"API_ownerReference"+","+"SQL_OwnerName"+","+"API_ownerName"+","+"SQL_OwnerDomicile"+","+"API_ownerDomicile"+","+"SQL_OwnerEmailAddress"+","+"API_ownerEmailAddress"+","+"SQL_BrokerReference"+","+"API_brokerReference"+","+"SQL_BrokerName"+","+"API_brokerName"+","+"SQL_BrokerEmailAddress"+","+"API_brokerEmailAddress"+","+"SQL_PolicyYear"+","+"API_policyYear"+","+"SQL_EmailAddress"+","+"API_emailAddress"+","+"SQL_CcEmailAddress"+","+"API_ccEmailAddress"+","+"SQL_PassengerCapacity"+","+"API_passengerCapacity"+","+"SQL_CurrencyCode"+","+"API_currencyCode"+","+"SQL_CoverLimitAmount"+","+"API_coverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"API_signatoryStateId"+","+"SQL_VesselName"+","+"API_vesselName"+","+"SQL_VesselType"+","+"API_vesselType"+","+"SQL_VesselTypeName"+","+"API_vesselTypeName"+","+"SQL_vesselFlag"+","+"API_vesselFlag"+","+"SQL_imoNumber"+","+"API_imoNumber"+","+"SQL_distinctiveNumbersOrLetters"+","+"API_distinctiveNumbersOrLetters"+","+"SQL_grossTonnage"+","+"API_grossTonnage"+","+"SQL_yearBuilt"+","+"API_yearBuilt"+","+"SQL_engineHorsePower"+","+"API_engineHorsePower"+","+"SQL_model"+","+"API_model"+","+"SQL_engineNo"+","+"API_engineNo"+","+"SQL_NominatedStateFlag"+","+"API_nominatedFlagState"+","+"SQL_NominatedStateFlagName"+","+"API_nominatedFlagStateName"+","+"SQL_portOfRegistry"+","+"API_portOfRegistry"+","+"SQL_TenderReferenceList"+","+"API_tenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"API_tenderOutboardReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"API_tradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"API_tradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"API_tradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"API_tradingCertificateGroupCode"+","+"SQL_TradingCertificateTypeCode"+","+"API_tradingCertificateTypeTypeCode"+","+"SQL_TradingCertificateTypeName"+","+"API_tradingCertificateTypeTypeName"+","+"API_stateAddressId"+","+"SQL_StateAddressId"+","+"API_stateAddressName"+","+"SQL_StateAddressName"+","+"API_stateAddressLine1"+","+"SQL_StateAddressLine1"+","+"API_stateAddressLine2"+","+"SQL_StateAddressLine2"+","+"API_stateAddressLine3"+","+"SQL_StateAddressLine3"+","+"API_stateAddressStateOrCounty"+","+"SQL_StateStateOrCounty"+","+"API_stateAddressCity"+","+"SQL_StateCity"+","+"API_stateAddressCountry"+","+"SQL_StateCountry"+","+"API_stateAddressPostCode"+","+"SQL_StatePostCode"+","+"API_stateAddressPrimaryAddress"+","+"SQL_StateIsPrimaryAddress"+","+"API_ownerAddressId"+","+"SQL_OwnerAddressId"+","+"API_ownerAddressName"+","+"SQL_OwnerAddressName"+","+"API_ownerAddressLine1"+","+"SQL_OwnerAddressLine1"+","+"API_ownerAddressLine2"+","+"SQL_OwnerAddressLine2"+","+"API_ownerAddressLine3"+","+"SQL_OwnerAddressLine3"+","+"API_ownerAddressStateOrCounty"+","+"SQL_OwnerStateOrCounty"+","+"API_ownerAddressCity"+","+"SQL_OwnerCity"+","+"API_ownerAddressCountry"+","+"SQL_OwnerCountry"+","+"API_ownerAddressPostCode"+","+"SQL_OwnerPostCode"+","+"API_ownerAddressPrimaryAddress"+","+"SQL_OwnerIsPrimaryAddress"+","+"API_brokerAddressId"+","+"SQL_BrokerAddressId"+","+"API_brokerAddressName"+","+"SQL_BrokerAddressName"+","+"API_brokerAddressLine1"+","+"SQL_BrokerAddressLine1"+","+"API_brokerAddressLine2"+","+"SQL_BrokerAddressLine2"+","+"API_brokerAddressLine3"+","+"SQL_BrokerAddressLine3"+","+"API_brokerAddressStateOrCounty"+","+"SQL_BrokerStateOrCounty"+","+"API_brokerAddressCity"+","+"SQL_BrokerCity"+","+"API_brokerAddressCountry"+","+"SQL_BrokerCountry"+","+"API_brokerAddressPostCode"+","+"SQL_BrokerPostCode"+","+"API_brokerAddressPrimaryAddress"+","+"SQL_BrokerIsPrimaryAddress"+","+"API_memberAddressId"+","+"SQL_MemberAddressId"+","+"API_memberAddressName"+","+"SQL_MemberAddressName"+","+"API_memberAddressLine1"+","+"SQL_MemberAddressLine1"+","+"API_memberAddressLine2"+","+"SQL_MemberAddressLine2"+","+"API_memberAddressLine3"+","+"SQL_MemberAddressLine3"+","+"API_memberAddressStateOrCounty"+","+"SQL_MemberStateOrCounty"+","+"API_memberAddressCity"+","+"SQL_MemberCity"+","+"API_memberAddressCountry"+","+"SQL_MemberCountry"+","+"API_memberAddressPostCode"+","+"SQL_MemberPostCode"+","+"API_memberAddressPrimaryAddress"+","+"SQL_MemberIsPrimaryAddress"+","+"API_jointAssuredAddressId"+","+"SQL_JointAssuredAddressId"+","+"API_jointAssuredAddressName"+","+"SQL_JointAssuredAddressName"+","+"API_jointAssuredAddressLine1"+","+"SQL_JointAssuredAddressLine1"+","+"API_jointAssuredAddressLine2"+","+"SQL_JointAssuredAddressLine2"+","+"API_jointAssuredAddressLine3"+","+"SQL_JointAssuredAddressLine3"+","+"API_jointAssuredAddressStateOrCounty"+","+"SQL_JointAssuredStateOrCounty"+","+"API_jointAssuredAddressCity"+","+"SQL_JointAssuredCity"+","+"API_jointAssuredAddressCountry"+","+"SQL_JointAssuredCountry"+","+"API_jointAssuredAddressPostCode"+","+"SQL_JointAssuredPostCode"+","+"API_jointAssuredAddressPrimaryAddress"+","+"SQL_JointAssuredIsPrimaryAddress"+","+"API_branchAddressId"+","+"SQL_BranchAddressId"+","+"API_branchAddressName"+","+"SQL_BranchAddressName"+","+"API_branchAddressLine1"+","+"SQL_BranchAddressLine1"+","+"API_branchAddressLine2"+","+"SQL_BranchAddressLine2"+","+"API_branchAddressLine3"+","+"SQL_BranchAddressLine3"+","+"API_branchAddressStateOrCounty"+","+"SQL_BranchStateOrCounty"+","+"API_branchAddressCity"+","+"SQL_BranchCity"+","+"API_branchAddressCountry"+","+"SQL_BranchCountry"+","+"API_branchAddressPostCode"+","+"SQL_BranchPostCode"+","+"API_branchAddressPrimaryAddress"+","+"SQL_BranchIsPrimaryAddress"+","+"Test Case Status")

int counter=0;

log.info "======>CHECKING FOR ONLY TRADING CERTIFICATE PACKS (WITHOUT TRAIDING CERTIFICATES)<======"
String sqlstmt=
"""
USE tradingcertificate 
select
TOP 5 *
from TradingCertificatePack 
order by 1 desc
"""
con.eachRow(sqlstmt)
{
	row->
		sql_TradingCertificatePackId=row.Id
		sql_TCPackCreatedByUserEmail=row.CreatedByUserEmailAddress
		sql_TCPackCreatedDateTime=row.CreatedDateTime
		sql_TCPackCreatedDateTime=sql_TCPackCreatedDateTime.toString().substring(0, 19)
//		sql_IsDeleted=row.IsDeleted
//		sql_UserPrincipalNameLastModifiedBy=row.UserPrincipalName_LastModifiedBy
	
		log.info "SQL Response is received as "+sql_TradingCertificatePackId+","+sql_TCPackCreatedByUserEmail+","+sql_TCPackCreatedDateTime)//+","+sql_IsDeleted+","+sql_UserPrincipalNameLastModifiedBy
		sqlWriter.println(sql_TradingCertificatePackId+","+sql_TCPackCreatedByUserEmail+","+sql_TCPackCreatedDateTime//+","+sql_IsDeleted+","+sql_UserPrincipalNameLastModifiedBy)

		String TCPackId=sql_TradingCertificatePackId.toString()
		testRunner.testCase.setPropertyValue("TCPackId", TCPackId)
		
		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)

		testRunner.runTestStepByName("GET_TradingCertificatePacksByPackId")
		String req = '${GET_TradingCertificatePacksByPackId#Response}'	
		response=context.expand(req)
		//log.info "API response received as : " +response
		jsonSlurper = new JsonSlurper()
		jsonRes = jsonSlurper.parseText(response)
	
		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["GET_TradingCertificatePacksByPackId"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info "HTTP Status is : "+httpStatus
		//log.info("HTTP status code: " + httpStatusCode) 
		
		if(httpStatusCode.toString().equals("200"))
		{		
			api_TCPackId=jsonRes.id
			api_TCPackCreatedByUserEmailAddress=jsonRes.createdByUserEmailAddress
			api_TCPackCreatedDateTime=jsonRes.createdDateTime
			api_TCPackCreatedDateTime=api_TCPackCreatedDateTime.toString().replace("T"," ")
			api_TCPackCreatedDateTime=api_TCPackCreatedDateTime.toString().substring(0, 19)
			api_TCPackTradingCertificates=jsonRes.tradingCertificates
		
			apiWriter.println(api_TCPackId+","+api_TCPackCreatedByUserEmailAddress+","+api_TCPackCreatedDateTime+","+api_TCPackTradingCertificates)
			log.info "API response is received as "+api_TCPackId+","+api_TCPackCreatedByUserEmailAddress+","+api_TCPackCreatedDateTime+","+api_TCPackTradingCertificates
			
			if(	
				sql_TradingCertificatePackId.toString().equals(api_TCPackId.toString()) &&
				sql_TCPackCreatedByUserEmail.toString().equals(api_TCPackCreatedByUserEmailAddress.toString()) && 
				sql_TCPackCreatedDateTime.toString().equals(api_TCPackCreatedDateTime.toString())
			)	
			{
				compareWriter.println(sql_TradingCertificatePackId+","+api_TCPackId+","+sql_TCPackCreatedByUserEmail+","+api_TCPackCreatedByUserEmailAddress+","+sql_TCPackCreatedDateTime+","+api_TCPackCreatedDateTime+","+api_TCPackTradingCertificates+","+sql_IsDeleted+","+sql_UserPrincipalNameLastModifiedBy+","+"Test Case Passed")
				log.info "Details are matching hence test case is passed=>"+sql_TradingCertificatePackId+","+api_TCPackId+","+sql_TCPackCreatedByUserEmail+","+api_TCPackCreatedByUserEmailAddress+","+sql_TCPackCreatedDateTime+","+api_TCPackCreatedDateTime
			}
			else
			{
				compareWriter.println(sql_TradingCertificatePackId+","+api_TCPackId+","+sql_TCPackCreatedByUserEmail+","+api_TCPackCreatedByUserEmailAddress+","+sql_TCPackCreatedDateTime+","+api_TCPackCreatedDateTime+","+api_TCPackTradingCertificates+","+sql_IsDeleted+","+sql_UserPrincipalNameLastModifiedBy+","+"Test Case Failed")
				log.info "Details are not matching hence test case is failed=>"+sql_TradingCertificatePackId+","+api_TCPackId+","+sql_TCPackCreatedByUserEmail+","+api_TCPackCreatedByUserEmailAddress+","+sql_TCPackCreatedDateTime+","+api_TCPackCreatedDateTime
			}	
		}
		else if(httpStatusCode.toString().equals("401"))
		{
			apiWriter.println("API response status code is received as =>"+httpStatusCode+" so because invalid token is provided and error is received as =>"+httpStatus)
			compareWriter.println("API response status code is received as =>"+httpStatusCode+" so because invalid token is provided and error is received as =>"+httpStatus)
			log.info "API response status code is received as =>"+httpStatusCode+" so because invalid token is provided and error is received as =>"+httpStatus
		}
		else
		{
			log.info "Something wrong has happened, need to check the error"
			apiWriter.println("Something wrong has happened, need to check the error")
			compareWriter.println("Something wrong has happened, need to check the error")
		}
		counter=counter+1
		log.info "Number of trading certificatre packing list without linked trading certificate verified are : "+counter
}

log.info "======>CHECKING FOR TRADING CERTIFICATE PACKS WITH LINKED TRAIDING CERTIFICATES<======"
counter=0
String sqlGetLinkedTC=
"""
USE tradingcertificate
select top 10 
TCPA.Id as TradingCertificatePackId, TCPA.CreatedByUserEmailAddress, TCPA.CreatedDateTime, TCPA.Id as TradingCertificatePackId, TC.Type_Id, TC.Id as TradingCertificateId, TC.AddressType_Id, TC.SourceSystem, 
TC.Reference, TC.CurrentStatus, TC.StorageId,  TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
TC.IsRenewal, case when TC.IsRenewal = 1 then 'True'    when TC.IsRenewal = 0 then 'False' else NULL end as IsRenewalFlag, TC.IsYacht,
case when TC.IsYacht = 1 then 'True' when TC.IsYacht = 0 then 'False' else NULL end as IsYachtFlag, 
TC.TradingCertificateVersion as Version, TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,
TC.JointAssuredName, TC.OwnerReference, TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,
TC.PolicyYear, TC.CertificateIssueDate, TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity,
TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,
TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower,
TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList, TC.TenderOutboardReferenceList,
TC.Type_Id as TradingCertificateTypeId, RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode, 
RT.TypeCode, RT.Name as TypeName
from TradingCertificate  Tc
inner join TradingCertificatePack TCPA on TCPA.Id = TC.TradingCertificatePack_Id
inner join ref_Type RT on RT.Id=TC.Type_Id
inner join ref_Group RG on RG.Id = RT.Group_Id
where TC.TradingCertificatePack_Id is not null
--and TC.TradingCertificatePack_Id=82
order by 1 desc
"""
con.eachRow(sqlGetLinkedTC)
{
	rows->
		sql_TradingCertificatePackId=rows.TradingCertificatePackId
		sql_CreatedByUserEmailAddress=rows.CreatedByUserEmailAddress
		sql_CreatedDateTime=rows.CreatedDateTime
		sql_CreatedDateTime=sql_CreatedDateTime.toString().replace("T", " ")
		sql_CreatedDateTime=sql_CreatedDateTime.toString().substring(0, 22)
		sql_TradingCertificateId=rows.TradingCertificateId
		sql_Type_Id=rows.Type_Id
		sql_TradingCertificateId=rows.TradingCertificateId
		sql_AddressType_Id=rows.AddressType_Id
		sql_SourceSystem=rows.SourceSystem
		sql_Reference=rows.Reference
		sql_CurrentStatus=rows.CurrentStatus
		sql_StorageId=rows.StorageId
		sql_RiskId=rows.RiskId
		sql_PolicyId=rows.PolicyId
		sql_MemberPartyId=rows.MemberPartyId
		sql_OwnerPartyId=rows.OwnerPartyId
		sql_BrokerPartyId=rows.BrokerPartyId
		sql_IsRenewal=rows.IsRenewal
		sql_IsRenewalFlag=rows.IsRenewalFlag
		sql_IsYacht=rows.IsYacht
		sql_IsYachtFlag=rows.IsYachtFlag
		sql_Version=rows.Version
		sql_RiskReference=rows.RiskReference
		sql_PolicyReference=rows.PolicyReference
		sql_MemberReference=rows.MemberReference
		sql_MemberType=rows.MemberType
		sql_MemberName=rows.MemberName
		sql_MemberName = removeComma(sql_MemberName.toString())
		sql_JointAssuredName=rows.JointAssuredName
		sql_JointAssuredName = removeComma(sql_JointAssuredName.toString())
		sql_OwnerReference=rows.OwnerReference
		sql_OwnerName=rows.OwnerName
		sql_OwnerName = removeComma(sql_OwnerName.toString())
		sql_OwnerDomicile=rows.OwnerDomicile
		sql_OwnerEmailAddress=rows.OwnerEmailAddress
		sql_BrokerReference=rows.BrokerReference
		sql_BrokerName=rows.BrokerName
		sql_BrokerName = removeComma(sql_BrokerName.toString())
		sql_BrokerEmailAddress=rows.BrokerEmailAddress
		sql_PolicyYear=rows.PolicyYear
		sql_CertificateIssueDate=rows.CertificateIssueDate
		sql_EmailAddress=rows.EmailAddress
		sql_CcEmailAddress=rows.CcEmailAddress
		sql_EffectiveStartDate=rows.EffectiveStartDate
		sql_EffectiveEndDate=rows.EffectiveEndDate
		sql_PassengerCapacity=rows.PassengerCapacity
		sql_PolicyStartDate=rows.PolicyStartDate
		sql_PolicyEndDate=rows.PolicyEndDate
		sql_CurrencyCode=rows.CurrencyCode
		sql_CoverLimitAmount=rows.CoverLimitAmount
		sql_CoverLimitAmount = removeDotFromCurrency(sql_CoverLimitAmount.toString())
		sql_SignatoryState_Id=rows.SignatoryState_Id
		sql_VesselName=rows.VesselName
		sql_VesselName = removeComma(sql_VesselName.toString())
		sql_VesselType=rows.VesselType
		sql_VesselTypeName=rows.VesselTypeName
		sql_vesselEnteredDate=rows.vesselEnteredDate
		sql_vesselFlag=rows.vesselFlag
		sql_imoNumber=rows.imoNumber
		sql_distinctiveNumbersOrLetters=rows.distinctiveNumbersOrLetters
		sql_grossTonnage=rows.grossTonnage
		sql_yearBuilt=rows.yearBuilt
		sql_engineHorsePower=rows.engineHorsePower
		sql_model=rows.model
		sql_engineNo=rows.engineNo
		sql_NominatedStateFlag=rows.NominatedStateFlag
		sql_NominatedStateFlagName=rows.NominatedStateFlagName
		sql_NominatedStateFlagName = removeComma(sql_NominatedStateFlagName.toString())
		sql_portOfRegistry=rows.portOfRegistry
		sql_portOfRegistry = removeComma(sql_portOfRegistry.toString())
		sql_TenderReferenceList=rows.tenderReferenceList
		sql_TenderOutboardReferenceList=rows.TenderOutboardReferenceList
		sql_TradingCertificateTypeId=rows.TradingCertificateTypeId
		sql_TradingCertificateGroupId=rows.TradingCertificateGroupId
		sql_TradingCertificateGroupName=rows.TradingCertificateGroupName
		sql_TradingCertificateGroupCode=rows.TradingCertificateGroupCode
		sql_TradingCertificateTypeCode=rows.TypeCode
		sql_TradingCertificateTypeName=rows.TypeName
	
		int getRiskRef =sql_RiskReference.toInteger()
		int getTradCertId =sql_TradingCertificateId.toInteger()
		
		String getStateAddressSQL =
		"""						
		declare
		@riskRef as int = """+getRiskRef+""",
		@tradCertId as int = """+getTradCertId+"""
		select 
		top 1
		TC.Type_Id, RT.Name,
		RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
		ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
		ASN.PrimaryAddress,
		case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
		from TradingCertificate TC
		inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
		inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
		inner join ref_Type RT on RT.Id = TC.Type_Id
		where ASN.IsDeleted=0 and RAT.Name ='SIGNATORYSTATE'
		 and TC.RiskReference = @riskRef
		 and TC.Id=@tradCertId
		 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
		"""
		con.eachRow(getStateAddressSQL)
		{
			getRows->
			sql_StateAddressTypeName=getRows.AddressTypeName
			sql_StateAddressTypeId=getRows.AddressTypeId
			sql_StateTradingCertificateId=getRows.TradingCertificateId
			sql_StateRiskReference=getRows.RiskReference
			sql_StateAddressId=getRows.AddressId
			sql_StateAddressName=getRows.AddressName
			sql_StateAddressName = removeComma(sql_StateAddressName.toString())
			sql_StateAddressLine1=getRows.AddressLine1
			sql_StateAddressLine1 = removeComma(sql_StateAddressLine1.toString())
			sql_StateAddressLine2=getRows.AddressLine2
			sql_StateAddressLine2 = removeComma(sql_StateAddressLine2.toString())
			sql_StateAddressLine3=getRows.AddressLine3
			sql_StateAddressLine3 = removeComma(sql_StateAddressLine3.toString())
			sql_StateStateOrCounty=getRows.StateOrCounty
			sql_StateStateOrCounty = removeComma(sql_StateStateOrCounty.toString())
			sql_StateCity=getRows.City
			sql_StateCity = removeComma(sql_StateCity.toString())
			sql_StateCountry=getRows.Country
			sql_StateCountry = removeComma(sql_StateCountry.toString())
			sql_StatePostCode=getRows.PostCode
			sql_StatePostCode = removeComma(sql_StatePostCode.toString())
			sql_StateIsPrimaryAddress=getRows.IsPrimaryAddress
			//log.info "State Address is received as ==> "+sql_StateAddressTypeName+","+sql_StateAddressTypeId+","+sql_StateTradingCertificateId+","+sql_StateRiskReference+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress
		}
	
		String getOwnerAddressSQL =
		"""
		declare
		@riskRef as int = """+getRiskRef+""",
		@tradCertId as int = """+getTradCertId+"""
		select 
		top 1
		TC.Type_Id, RT.Name,
		RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
		ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
		ASN.PrimaryAddress,
		case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
		from TradingCertificate TC
		inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
		inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
		inner join ref_Type RT on RT.Id = TC.Type_Id
		where ASN.IsDeleted=0 and RAT.Name ='OWNER'
		 and TC.RiskReference = @riskRef
		 and TC.Id=@tradCertId
		 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
		"""
		con.eachRow(getOwnerAddressSQL)
		{
			getRows->
			sql_OwnerAddressTypeName=getRows.AddressTypeName
			sql_OwnerAddressTypeId=getRows.AddressTypeId
			sql_OwnerTradingCertificateId=getRows.TradingCertificateId
			sql_OwnerRiskReference=getRows.RiskReference
			sql_OwnerAddressId=getRows.AddressId
			sql_OwnerAddressName=getRows.AddressName
			sql_OwnerAddressName = removeComma(sql_OwnerAddressName.toString())
			sql_OwnerAddressLine1=getRows.AddressLine1
			sql_OwnerAddressLine1 = removeComma(sql_OwnerAddressLine1.toString())
			sql_OwnerAddressLine2=getRows.AddressLine2
			sql_OwnerAddressLine2 = removeComma(sql_OwnerAddressLine2.toString())
			sql_OwnerAddressLine3=getRows.AddressLine3
			sql_OwnerAddressLine3 = removeComma(sql_OwnerAddressLine3.toString())
			sql_OwnerStateOrCounty=getRows.StateOrCounty
			sql_OwnerStaterOrCounty = removeComma(sql_OwnerStateOrCounty.toString())
			sql_OwnerCity=getRows.City
			sql_OwnerCity = removeComma(sql_OwnerCity.toString())
			sql_OwnerCountry=getRows.Country
			sql_OwnerCountry = removeComma(sql_OwnerCountry.toString())
			sql_OwnerPostCode=getRows.PostCode
			sql_OwnerPostCode = removeComma(sql_OwnerPostCode.toString())
			sql_OwnerIsPrimaryAddress=getRows.IsPrimaryAddress
			//log.info "Owner Address is received as ==> "+sql_OwnerAddressTypeName+","+sql_OwnerAddressTypeId+","+sql_OwnerTradingCertificateId+","+sql_OwnerRiskReference+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressName+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress	
		}
	
		String getBrokerAddressSQL =
		"""
		declare
		@riskRef as int = """+getRiskRef+""",
		@tradCertId as int = """+getTradCertId+"""
		select 
		top 1
		TC.Type_Id, RT.Name,
		RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
		ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
		ASN.PrimaryAddress,
		case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
		from TradingCertificate TC
		inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
		inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
		inner join ref_Type RT on RT.Id = TC.Type_Id
		where ASN.IsDeleted=0 and RAT.Name ='BROKER'
		 and TC.RiskReference = @riskRef
		 and TC.Id=@tradCertId
		 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
		"""
		con.eachRow(getBrokerAddressSQL)
		{
			getRows->
			sql_BrokerAddressTypeName=getRows.AddressTypeName
			sql_BrokerAddressTypeId=getRows.AddressTypeId
			sql_BrokerTradingCertificateId=getRows.TradingCertificateId
			sql_BrokerRiskReference=getRows.RiskReference
			sql_BrokerAddressId=getRows.AddressId
			sql_BrokerAddressName=getRows.AddressName
			sql_BrokerAddressName = removeComma(sql_BrokerAddressName.toString())
			sql_BrokerAddressLine1=getRows.AddressLine1
			sql_BrokerAddressLine1 = removeComma(sql_BrokerAddressLine1.toString())
			sql_BrokerAddressLine2=getRows.AddressLine2
			sql_BrokerAddressLine2 = removeComma(sql_BrokerAddressLine2.toString())
			sql_BrokerAddressLine3=getRows.AddressLine3
			sql_BrokerAddressLine3 = removeComma(sql_BrokerAddressLine3.toString())
			sql_BrokerStateOrCounty=getRows.StateOrCounty
			sql_BrokerStaterOrCounty = removeComma(sql_BrokerStateOrCounty.toString())
			sql_BrokerCity=getRows.City
			sql_BrokerCity = removeComma(sql_BrokerCity.toString())
			sql_BrokerCountry=getRows.Country
			sql_BrokerCountry = removeComma(sql_BrokerCountry.toString())
			sql_BrokerPostCode=getRows.PostCode
			sql_BrokerPostCode = removeComma(sql_BrokerPostCode.toString())
			sql_BrokerIsPrimaryAddress=getRows.IsPrimaryAddress
			//log.info "Broker Address is received as ==> "+sql_BrokerAddressTypeName+","+sql_BrokerAddressTypeId+","+sql_BrokerTradingCertificateId+","+sql_BrokerRiskReference+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressName+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress	
		}
	
			String getMemberAddressSQL =
		"""
		declare
		@riskRef as int = """+getRiskRef+""",
		@tradCertId as int = """+getTradCertId+"""
		select 
		top 1
		TC.Type_Id, RT.Name,
		RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
		ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
		ASN.PrimaryAddress,
		case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
		from TradingCertificate TC
		inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
		inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
		inner join ref_Type RT on RT.Id = TC.Type_Id
		where ASN.IsDeleted=0 and RAT.Name ='MEMBER'
		 and TC.RiskReference = @riskRef
		 and TC.Id=@tradCertId
		 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
		"""
		con.eachRow(getMemberAddressSQL)
		{
			getRows->
			sql_MemberAddressTypeName=getRows.AddressTypeName
			sql_MemberAddressTypeId=getRows.AddressTypeId
			sql_MemberTradingCertificateId=getRows.TradingCertificateId
			sql_MemberRiskReference=getRows.RiskReference
			sql_MemberAddressId=getRows.AddressId
			sql_MemberAddressName=getRows.AddressName
			sql_MemberAddressName = removeComma(sql_MemberAddressName.toString())
			sql_MemberAddressLine1=getRows.AddressLine1
			sql_MemberAddressLine1 = removeComma(sql_MemberAddressLine1.toString())
			sql_MemberAddressLine2=getRows.AddressLine2
			sql_MemberAddressLine2 = removeComma(sql_MemberAddressLine2.toString())
			sql_MemberAddressLine3=getRows.AddressLine3
			sql_MemberAddressLine3 = removeComma(sql_MemberAddressLine3.toString())
			sql_MemberStateOrCounty=getRows.StateOrCounty
			sql_MemberStateOrCounty = removeComma(sql_MemberStateOrCounty.toString())
			sql_MemberCity=getRows.City
			sql_MemberCity = removeComma(sql_MemberCity.toString())
			sql_MemberCountry=getRows.Country
			sql_MemberCountry = removeComma(sql_MemberCountry.toString())
			sql_MemberPostCode=getRows.PostCode
			sql_MemberPostCode = removeComma(sql_MemberPostCode.toString())
			sql_MemberIsPrimaryAddress=getRows.IsPrimaryAddress
			//log.info "Member Address is received as ==> "+sql_MemberAddressTypeName+","+sql_MemberAddressTypeId+","+sql_MemberTradingCertificateId+","+sql_MemberRiskReference+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressName+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress	
		}
		String getJointAssuredAddressSQL =
		"""
		declare
		@riskRef as int = """+getRiskRef+""",
		@tradCertId as int = """+getTradCertId+"""
		select 
		top 1
		TC.Type_Id, RT.Name,
		RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
		ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
		ASN.PrimaryAddress,
		case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
		from TradingCertificate TC
		inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
		inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
		inner join ref_Type RT on RT.Id = TC.Type_Id
		where ASN.IsDeleted=0 and RAT.Name ='JOINTASSURED'
		and TC.RiskReference = @riskRef
		and TC.Id=@tradCertId
		union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
		"""
		con.eachRow(getJointAssuredAddressSQL)
		{
			getRows->
			sql_JointAssuredAddressTypeName=getRows.AddressTypeName
			sql_JointAssuredAddressTypeId=getRows.AddressTypeId
			sql_JointAssuredTradingCertificateId=getRows.TradingCertificateId
			sql_JointAssuredRiskReference=getRows.RiskReference
			sql_JointAssuredAddressId=getRows.AddressId
			sql_JointAssuredAddressName=getRows.AddressName
			sql_JointAssuredAddressName = removeComma(sql_JointAssuredAddressName.toString())
			sql_JointAssuredAddressLine1=getRows.AddressLine1
			sql_JointAssuredAddressLine1 = removeComma(sql_JointAssuredAddressLine1.toString())
			sql_JointAssuredAddressLine2=getRows.AddressLine2
			sql_JointAssuredAddressLine2 = removeComma(sql_JointAssuredAddressLine2.toString())
			sql_JointAssuredAddressLine3=getRows.AddressLine3
			sql_JointAssuredAddressLine3 = removeComma(sql_JointAssuredAddressLine3.toString())
			sql_JointAssuredStateOrCounty=getRows.StateOrCounty
			sql_JointAssuredStaterOrCounty = removeComma(sql_JointAssuredStateOrCounty.toString())
			sql_JointAssuredCity=getRows.City
			sql_JointAssuredCity = removeComma(sql_JointAssuredCity.toString())
			sql_JointAssuredCountry=getRows.Country
			sql_JointAssuredCountry = removeComma(sql_JointAssuredCountry.toString())
			sql_JointAssuredPostCode=getRows.PostCode
			sql_JointAssuredPostCode = removeComma(sql_JointAssuredPostCode.toString())
			sql_JointAssuredIsPrimaryAddress=getRows.IsPrimaryAddress
			//log.info "JointAssured Address is received as ==> "+sql_JointAssuredAddressTypeName+","+sql_JointAssuredAddressTypeId+","+sql_JointAssuredTradingCertificateId+","+sql_JointAssuredRiskReference+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressName+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress	
		}
	
		String getBranchAddressSQL =
		"""
		declare
		@riskRef as int = """+getRiskRef+""",
		@tradCertId as int = """+getTradCertId+"""
		select 
		top 1
		TC.Type_Id, RT.Name,
		RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
		ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
		ASN.PrimaryAddress,
		case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
		from TradingCertificate TC
		inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
		inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
		inner join ref_Type RT on RT.Id = TC.Type_Id
		where ASN.IsDeleted=0 and RAT.Name ='BRANCH'
		and TC.RiskReference = @riskRef
		and TC.Id=@tradCertId
		union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
		"""
		con.eachRow(getBranchAddressSQL)
		{
			getRows->
			sql_BranchAddressTypeName=getRows.AddressTypeName
			sql_BranchAddressTypeId=getRows.AddressTypeId
			sql_BranchTradingCertificateId=getRows.TradingCertificateId
			sql_BranchRiskReference=getRows.RiskReference
			sql_BranchAddressId=getRows.AddressId
			sql_BranchAddressName=getRows.AddressName
			sql_BranchAddressName = removeComma(sql_BranchAddressName.toString())
			sql_BranchAddressLine1=getRows.AddressLine1
			sql_BranchAddressLine1 = removeComma(sql_BranchAddressLine1.toString())
			sql_BranchAddressLine2=getRows.AddressLine2
			sql_BranchAddressLine2 = removeComma(sql_BranchAddressLine2.toString())
			sql_BranchAddressLine3=getRows.AddressLine3
			sql_BranchAddressLine3 = removeComma(sql_BranchAddressLine3.toString())
			sql_BranchStateOrCounty=getRows.StateOrCounty
			sql_BranchStaterOrCounty = removeComma(sql_BranchStateOrCounty.toString())
			sql_BranchCity=getRows.City
			sql_BranchCity = removeComma(sql_BranchCity.toString())
			sql_BranchCountry=getRows.Country
			sql_BranchCountry = removeComma(sql_BranchCountry.toString())
			sql_BranchPostCode=getRows.PostCode
			sql_BranchPostCode = removeComma(sql_BranchPostCode.toString())
			sql_BranchIsPrimaryAddress=getRows.IsPrimaryAddress
			//log.info "Branch Address is received as ==> "+sql_BranchAddressTypeName+","+sql_BranchAddressTypeId+","+sql_BranchTradingCertificateId+","+sql_BranchRiskReference+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressName+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress	
		}
		//log.info "SQL response is received as =>"+sql_TradingCertificatePackId+","+sql_CreatedByUserEmailAddress+","+sql_CreatedDateTime+","+sql_TradingCertificateId+","+sql_Type_Id+","+sql_TradingCertificateId+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName
		//sqlWriter.println(sql_TradingCertificatePackId+","+sql_CreatedByUserEmailAddress+","+sql_CreatedDateTime+","+sql_TradingCertificateId+","+sql_Type_Id+","+sql_TradingCertificateId+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName)

		String TCPackId=sql_TradingCertificatePackId.toString()
		testRunner.testCase.setPropertyValue("TCPackId", TCPackId)
		
		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)

		testRunner.runTestStepByName("GET_TradingCertificatePacksByPackId")
		String req = '${GET_TradingCertificatePacksByPackId#Response}'	
		response=context.expand(req)
		//log.info "API response received as : " +response
		jsonSlurper = new JsonSlurper()
		jsonRes = jsonSlurper.parseText(response)
	
		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["GET_TradingCertificatePacksByPackId"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info "HTTP Status is : "+httpStatus
		//log.info("HTTP status code: " + httpStatusCode) 
		
		if(httpStatusCode.toString().equals("200"))
		{
			api_TCPackId=jsonRes.id
			api_CreatedByUserEmailAddress=jsonRes.createdByUserEmailAddress
			api_CreatedDateTime=jsonRes.createdDateTime
			api_CreatedDateTime=api_CreatedDateTime.toString().replace("T", " ")
			api_CreatedDateTime=api_CreatedDateTime.toString().substring(0, 22)

			//log.info "SQL="+sql_CreatedDateTime
			//log.info "API ="+api_CreatedDateTime
			
			def json = new JsonSlurper().parseText(response)
			//log.info "TC Size=>"+json.tradingCertificates.size()
			
			for (int i=0; i<json.tradingCertificates.size(); i++)
			{	
				if(json.tradingCertificates[i].id.toString().equals(sql_TradingCertificateId.toString()))
				{
					api_tradingCertificateId = json.tradingCertificates[i].id
					api_addressTypeId = json.tradingCertificates[i].addressTypeId
					api_sourceSystem = json.tradingCertificates[i].sourceSystem
					api_reference = json.tradingCertificates[i].reference
					api_currentStatus = json.tradingCertificates[i].currentStatus
					api_storageId = json.tradingCertificates[i].storageId
					api_riskId = json.tradingCertificates[i].riskId
					api_policyId = json.tradingCertificates[i].policyId
					api_memberPartyId = json.tradingCertificates[i].memberPartyId
					api_ownerPartyId = json.tradingCertificates[i].ownerPartyId
					api_brokerPartyId = json.tradingCertificates[i].brokerPartyId
					api_isRenewal = json.tradingCertificates[i].isRenewal
					api_isYacht = json.tradingCertificates[i].isYacht
					api_version = json.tradingCertificates[i].version
					api_riskReference = json.tradingCertificates[i].riskReference
					api_policyReference = json.tradingCertificates[i].policyReference
					api_memberReference = json.tradingCertificates[i].memberReference
					api_memberType = json.tradingCertificates[i].memberType
					api_memberName = json.tradingCertificates[i].memberName
					api_memberName= removeComma(api_memberName.toString())
					api_jointAssuredName = json.tradingCertificates[i].jointAssuredName
					api_jointAssuredName= removeComma(api_jointAssuredName.toString())
					api_ownerReference = json.tradingCertificates[i].ownerReference
					api_ownerName = json.tradingCertificates[i].ownerName
					api_ownerName= removeComma(api_ownerName.toString())
					api_ownerDomicile = json.tradingCertificates[i].ownerDomicile
					api_ownerEmailAddress = json.tradingCertificates[i].ownerEmailAddress
					api_brokerReference = json.tradingCertificates[i].brokerReference
					api_brokerName = json.tradingCertificates[i].brokerName
					api_brokerName= removeComma(api_brokerName.toString())
					api_brokerEmailAddress = json.tradingCertificates[i].brokerEmailAddress
					api_policyYear = json.tradingCertificates[i].policyYear
					api_certificateIssueDate = json.tradingCertificates[i].certificateIssueDate
					api_emailAddress = json.tradingCertificates[i].emailAddress
					api_ccEmailAddress = json.tradingCertificates[i].ccEmailAddress
					api_effectiveStartDate = json.tradingCertificates[i].effectiveStartDate
					api_effectiveEndDate = json.tradingCertificates[i].effectiveEndDate
					api_passengerCapacity = json.tradingCertificates[i].passengerCapacity
					api_policyStartDate = json.tradingCertificates[i].policyStartDate
					api_policyEndDate = json.tradingCertificates[i].policyEndDate
					api_currencyCode = json.tradingCertificates[i].currencyCode
					api_coverLimitAmount = json.tradingCertificates[i].coverLimitAmount
					api_coverLimitAmount = removeDotFromCurrency(api_coverLimitAmount.toString())
					api_signatoryStateId = json.tradingCertificates[i].signatoryStateId
					api_vesselName = json.tradingCertificates[i].vesselName
					api_vesselName= removeComma(api_vesselName.toString())
					api_vesselType = json.tradingCertificates[i].vesselType
					api_vesselTypeName = json.tradingCertificates[i].vesselTypeName
					api_vesselEnteredDate = json.tradingCertificates[i].vesselEnteredDate
					api_vesselFlag = json.tradingCertificates[i].vesselFlag
					api_imoNumber = json.tradingCertificates[i].imoNumber
					api_distinctiveNumbersOrLetters = json.tradingCertificates[i].distinctiveNumbersOrLetters
					api_grossTonnage = json.tradingCertificates[i].grossTonnage
					api_yearBuilt = json.tradingCertificates[i].yearBuilt
					api_engineHorsePower = json.tradingCertificates[i].engineHorsePower
					api_trademarkAndEngineModel = json.tradingCertificates[i].trademarkAndEngineModel
					api_model = json.tradingCertificates[i].model
					api_engineNo = json.tradingCertificates[i].engineNo
					api_nominatedFlagState = json.tradingCertificates[i].nominatedFlagState
					api_nominatedFlagStateName = json.tradingCertificates[i].nominatedFlagStateName
					api_nominatedFlagStateName = removeComma(api_nominatedFlagStateName.toString())
					api_portOfRegistry = json.tradingCertificates[i].portOfRegistry
					api_portOfRegistry = removeComma(api_portOfRegistry.toString())
					api_tenderReferenceList = json.tradingCertificates[i].tenderReferenceList
					api_tenderOutboardReferenceList = json.tradingCertificates[i].tenderOutboardReferenceList
					api_tradingCertificateTypeId = json.tradingCertificates[i].tradingCertificateType.id
					api_tradingCertificateGroupId = json.tradingCertificates[i].tradingCertificateType.tradingCertificateGroup.id
					api_tradingCertificateGroupName = json.tradingCertificates[i].tradingCertificateType.tradingCertificateGroup.name
					api_tradingCertificateGroupCode = json.tradingCertificates[i].tradingCertificateType.tradingCertificateGroup.groupCode
					api_tradingCertificateTypeTypeCode = json.tradingCertificates[i].tradingCertificateType.typeCode
					api_tradingCertificateTypeTypeName = json.tradingCertificates[i].tradingCertificateType.typeName
	
					//log.info "API Response is received as =>"+api_TCPackId+","+api_CreatedByUserEmailAddress+","+api_CreatedDateTime+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_memberName+","+api_jointAssuredName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_trademarkAndEngineModel+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName
					//apiWriter.println(api_TCPackId+","+api_CreatedByUserEmailAddress+","+api_CreatedDateTime+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_memberName+","+api_jointAssuredName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_trademarkAndEngineModel+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName)

					if(json.tradingCertificates[i].stateAddress!=null)
					{
						api_stateAddressId= json.tradingCertificates[i].stateAddress.id
						api_stateAddressName= json.tradingCertificates[i].stateAddress.addressName
						api_stateAddressName= removeComma(api_stateAddressName.toString())
						api_stateAddressLine1= json.tradingCertificates[i].stateAddress.addressLine1
						api_stateAddressLine1= removeComma(api_stateAddressLine1.toString())
						api_stateAddressLine2= json.tradingCertificates[i].stateAddress.addressLine2
						api_stateAddressLine2= removeComma(api_stateAddressLine2.toString())
						api_stateAddressLine3= json.tradingCertificates[i].stateAddress.addressLine3
						api_stateAddressLine3= removeComma(api_stateAddressLine3.toString())
						api_stateAddressStateOrCounty= json.tradingCertificates[i].stateAddress.stateOrCounty
						api_stateAddressStateOrCounty= removeComma(api_stateAddressStateOrCounty.toString())
						api_stateAddressCity= json.tradingCertificates[i].stateAddress.city
						api_stateAddressCity= removeComma(api_stateAddressCity.toString())
						api_stateAddressCountry= json.tradingCertificates[i].stateAddress.country
						api_stateAddressCountry= removeComma(api_stateAddressCountry.toString())
						api_stateAddressPostCode= json.tradingCertificates[i].stateAddress.postCode
						api_stateAddressPostCode= removeComma(api_stateAddressPostCode.toString())
						api_stateAddressPrimaryAddress= json.tradingCertificates[i].stateAddress.primaryAddress
						//log.info "State Address is :"+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress
					}
					else
					{
						api_stateAddressId= null
						api_stateAddressName= null
						api_stateAddressLine1= null
						api_stateAddressLine2= null
						api_stateAddressLine3= null
						api_stateAddressStateOrCounty= null
						api_stateAddressCity= null
						api_stateAddressCountry= null
						api_stateAddressPostCode= null
						api_stateAddressPrimaryAddress= null
						//log.info "State Address is :"+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress
					}
					if(json.tradingCertificates[i].ownerAddress!=null)
					{
						api_ownerAddressId= json.tradingCertificates[i].ownerAddress.id
						api_ownerAddressName= json.tradingCertificates[i].ownerAddress.addressName
						api_ownerAddressName= removeComma(api_ownerAddressName.toString())
						api_ownerAddressLine1= json.tradingCertificates[i].ownerAddress.addressLine1
						api_ownerAddressLine1= removeComma(api_ownerAddressLine1.toString())
						api_ownerAddressLine2= json.tradingCertificates[i].ownerAddress.addressLine2
						api_ownerAddressLine2= removeComma(api_ownerAddressLine2.toString())
						api_ownerAddressLine3= json.tradingCertificates[i].ownerAddress.addressLine3
						api_ownerAddressLine3= removeComma(api_ownerAddressLine3.toString())
						api_ownerAddressStateOrCounty= json.tradingCertificates[i].ownerAddress.stateOrCounty
						api_ownerAddressStateOrCounty= removeComma(api_ownerAddressStateOrCounty.toString())
						api_ownerAddressCity= json.tradingCertificates[i].ownerAddress.city
						api_ownerAddressCity= removeComma(api_ownerAddressCity.toString())
						api_ownerAddressCountry= json.tradingCertificates[i].ownerAddress.country
						api_ownerAddressCountry= removeComma(api_ownerAddressCountry.toString())
						api_ownerAddressPostCode= json.tradingCertificates[i].ownerAddress.postCode
						api_ownerAddressPostCode= removeComma(api_ownerAddressPostCode.toString())
						api_ownerAddressPrimaryAddress= json.tradingCertificates[i].ownerAddress.primaryAddress
						//log.info "Owner Address is :"+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress
					}
					else
					{
						api_ownerAddressId= null
						api_ownerAddressName= null
						api_ownerAddressLine1= null
						api_ownerAddressLine2= null
						api_ownerAddressLine3= null
						api_ownerAddressStateOrCounty= null
						api_ownerAddressCity= null
						api_ownerAddressCountry= null
						api_ownerAddressPostCode= null
						api_ownerAddressPrimaryAddress= null
					}
					if(json.tradingCertificates[i].brokerAddress!=null)
					{
						api_brokerAddressId= json.tradingCertificates[i].brokerAddress.id
						api_brokerAddressName= json.tradingCertificates[i].brokerAddress.addressName
						api_brokerAddressName= removeComma(api_brokerAddressName.toString())
						api_brokerAddressLine1= json.tradingCertificates[i].brokerAddress.addressLine1
						api_brokerAddressLine1= removeComma(api_brokerAddressLine1.toString())
						api_brokerAddressLine2= json.tradingCertificates[i].brokerAddress.addressLine2
						api_brokerAddressLine2= removeComma(api_brokerAddressLine2.toString())
						api_brokerAddressLine3= json.tradingCertificates[i].brokerAddress.addressLine3
						api_brokerAddressLine3= removeComma(api_brokerAddressLine3.toString())
						api_brokerAddressStateOrCounty= json.tradingCertificates[i].brokerAddress.stateOrCounty
						api_brokerAddressStateOrCounty= removeComma(api_brokerAddressStateOrCounty.toString())
						api_brokerAddressCity= json.tradingCertificates[i].brokerAddress.city
						api_brokerAddressCity= removeComma(api_brokerAddressCity.toString())
						api_brokerAddressCountry= json.tradingCertificates[i].brokerAddress.country
						api_brokerAddressCountry= removeComma(api_brokerAddressCountry.toString())
						api_brokerAddressPostCode= json.tradingCertificates[i].brokerAddress.postCode
						api_brokerAddressPostCode= removeComma(api_brokerAddressPostCode.toString())
						api_brokerAddressPrimaryAddress= json.tradingCertificates[i].brokerAddress.primaryAddress
						//log.info "Broker Address is :"+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress
					}
					else
					{
						api_brokerAddressId= null
						api_brokerAddressName= null
						api_brokerAddressLine1= null
						api_brokerAddressLine2= null
						api_brokerAddressLine3= null
						api_brokerAddressStateOrCounty= null
						api_brokerAddressCity= null
						api_brokerAddressCountry= null
						api_brokerAddressPostCode= null
						api_brokerAddressPrimaryAddress= null
					}
					if(json.tradingCertificates[i].memberAddress!=null)
					{
						api_memberAddressId= json.tradingCertificates[i].memberAddress.id						
						api_memberAddressName= json.tradingCertificates[i].memberAddress.addressName
						api_memberAddressName= removeComma(api_memberAddressName.toString())
						api_memberAddressLine1= json.tradingCertificates[i].memberAddress.addressLine1
						api_memberAddressLine1= removeComma(api_memberAddressLine1.toString())
						api_memberAddressLine2= json.tradingCertificates[i].memberAddress.addressLine2
						api_memberAddressLine2= removeComma(api_memberAddressLine2.toString())
						api_memberAddressLine3= json.tradingCertificates[i].memberAddress.addressLine3
						api_memberAddressLine3= removeComma(api_memberAddressLine3.toString())
						api_memberAddressStateOrCounty= json.tradingCertificates[i].memberAddress.stateOrCounty
						api_memberAddressStateOrCounty= removeComma(api_memberAddressStateOrCounty.toString())
						api_memberAddressCity= json.tradingCertificates[i].memberAddress.city
						api_memberAddressCity= removeComma(api_memberAddressCity.toString())
						api_memberAddressCountry= json.tradingCertificates[i].memberAddress.country
						api_memberAddressCountry= removeComma(api_memberAddressCountry.toString())
						api_memberAddressPostCode= json.tradingCertificates[i].memberAddress.postCode
						api_memberAddressPostCode= removeComma(api_memberAddressPostCode.toString())
						api_memberAddressPrimaryAddress= json.tradingCertificates[i].memberAddress.primaryAddress
						//log.info "Member Address is :"+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress
					}
					else
					{
						api_memberAddressId= null
						api_memberAddressName= null
						api_memberAddressLine1= null
						api_memberAddressLine2= null
						api_memberAddressLine3= null
						api_memberAddressStateOrCounty= null
						api_memberAddressCity= null
						api_memberAddressCountry= null
						api_memberAddressPostCode= null
						api_memberAddressPrimaryAddress= null
					}
					if(json.tradingCertificates[i].jointAssuredAddress!=null)
					{
						api_jointAssuredAddressId= json.tradingCertificates[i].jointAssuredAddress.id
						api_jointAssuredAddressName= json.tradingCertificates[i].jointAssuredAddress.addressName
						api_jointAssuredAddressName= removeComma(api_jointAssuredAddressName.toString())
						api_jointAssuredAddressLine1= json.tradingCertificates[i].jointAssuredAddress.addressLine1
						api_jointAssuredAddressLine1= removeComma(api_jointAssuredAddressLine1.toString())
						api_jointAssuredAddressLine2= json.tradingCertificates[i].jointAssuredAddress.addressLine2
						api_jointAssuredAddressLine2= removeComma(api_jointAssuredAddressLine2.toString())
						api_jointAssuredAddressLine3= json.tradingCertificates[i].jointAssuredAddress.addressLine3
						api_jointAssuredAddressLine3= removeComma(api_jointAssuredAddressLine3.toString())
						api_jointAssuredAddressStateOrCounty= json.tradingCertificates[i].jointAssuredAddress.stateOrCounty
						api_jointAssuredAddressStateOrCounty= removeComma(api_jointAssuredAddressStateOrCounty.toString())
						api_jointAssuredAddressCity= json.tradingCertificates[i].jointAssuredAddress.city
						api_jointAssuredAddressCity= removeComma(api_jointAssuredAddressCity.toString())
						api_jointAssuredAddressCountry= json.tradingCertificates[i].jointAssuredAddress.country
						api_jointAssuredAddressCountry= removeComma(api_jointAssuredAddressCountry.toString())
						api_jointAssuredAddressPostCode= json.tradingCertificates[i].jointAssuredAddress.postCode
						api_jointAssuredAddressPostCode= removeComma(api_jointAssuredAddressPostCode.toString())
						api_jointAssuredAddressPrimaryAddress= json.tradingCertificates[i].jointAssuredAddress.primaryAddress
						//log.info "Joint Assured Address is :"+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress
					}
					else
					{
						api_jointAssuredAddressId= null
						api_jointAssuredAddressName= null
						api_jointAssuredAddressLine1= null
						api_jointAssuredAddressLine2= null
						api_jointAssuredAddressLine3= null
						api_jointAssuredAddressStateOrCounty= null
						api_jointAssuredAddressCity= null
						api_jointAssuredAddressCountry= null
						api_jointAssuredAddressPostCode= null
						api_jointAssuredAddressPrimaryAddress= null
					}
					if(json.tradingCertificates[i].branchAddress!=null)
					{
						api_branchAddressId= json.tradingCertificates[i].branchAddress.id
						api_branchAddressName= json.tradingCertificates[i].branchAddress.addressName
						api_branchAddressName= removeComma(api_branchAddressName.toString())
						api_branchAddressLine1= json.tradingCertificates[i].branchAddress.addressLine1
						api_branchAddressLine1= removeComma(api_branchAddressLine1.toString())
						api_branchAddressLine2= json.tradingCertificates[i].branchAddress.addressLine2
						api_branchAddressLine2= removeComma(api_branchAddressLine2.toString())
						api_branchAddressLine3= json.tradingCertificates[i].branchAddress.addressLine3
						api_branchAddressLine3= removeComma(api_branchAddressLine3.toString())
						api_branchAddressStateOrCounty= json.tradingCertificates[i].branchAddress.stateOrCounty
						api_branchAddressStateOrCounty= removeComma(api_branchAddressStateOrCounty.toString())
						api_branchAddressCity= json.tradingCertificates[i].branchAddress.city
						api_branchAddressCity= removeComma(api_branchAddressCity.toString())
						api_branchAddressCountry= json.tradingCertificates[i].branchAddress.country
						api_branchAddressCountry= removeComma(api_branchAddressCountry.toString())
						api_branchAddressPostCode= json.tradingCertificates[i].branchAddress.postCode
						api_branchAddressPostCode= removeComma(api_branchAddressPostCode.toString())
						api_branchAddressPrimaryAddress= json.tradingCertificates[i].branchAddress.primaryAddress
						//log.info "Branch Address is :"+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress						
					}
					else
					{
						api_branchAddressId= null
						api_branchAddressName= null
						api_branchAddressLine1= null
						api_branchAddressLine2= null
						api_branchAddressLine3= null
						api_branchAddressStateOrCounty= null
						api_branchAddressCity= null
						api_branchAddressCountry= null
						api_branchAddressPostCode= null
						api_branchAddressPrimaryAddress= null
					}

					log.info "SQL response received as===>"+sql_TradingCertificatePackId+","+sql_CreatedByUserEmailAddress+","+sql_CreatedDateTime+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_TenderOutboardReferenceList+","+sql_TenderReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_StateAddressTypeName+","+sql_StateAddressTypeId+","+sql_StateTradingCertificateId+","+sql_StateRiskReference+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress+","+sql_OwnerAddressTypeName+","+sql_OwnerAddressTypeId+","+sql_OwnerTradingCertificateId+","+sql_OwnerRiskReference+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressName+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress+","+sql_BrokerAddressTypeName+","+sql_BrokerAddressTypeId+","+sql_BrokerTradingCertificateId+","+sql_BrokerRiskReference+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressName+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress+","+sql_MemberAddressTypeName+","+sql_MemberAddressTypeId+","+sql_MemberTradingCertificateId+","+sql_MemberRiskReference+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressName+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress+","+sql_JointAssuredAddressTypeName+","+sql_JointAssuredAddressTypeId+","+sql_JointAssuredTradingCertificateId+","+sql_JointAssuredRiskReference+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressName+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress+","+sql_BranchAddressTypeName+","+sql_BranchAddressTypeId+","+sql_BranchTradingCertificateId+","+sql_BranchRiskReference+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressName+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress
					sqlWriter.println(sql_TradingCertificatePackId+","+sql_CreatedByUserEmailAddress+","+sql_CreatedDateTime+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_StateAddressTypeName+","+sql_StateAddressTypeId+","+sql_StateTradingCertificateId+","+sql_StateRiskReference+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress+","+sql_OwnerAddressTypeName+","+sql_OwnerAddressTypeId+","+sql_OwnerTradingCertificateId+","+sql_OwnerRiskReference+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressName+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress+","+sql_BrokerAddressTypeName+","+sql_BrokerAddressTypeId+","+sql_BrokerTradingCertificateId+","+sql_BrokerRiskReference+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressName+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress+","+sql_MemberAddressTypeName+","+sql_MemberAddressTypeId+","+sql_MemberTradingCertificateId+","+sql_MemberRiskReference+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressName+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress+","+sql_JointAssuredAddressTypeName+","+sql_JointAssuredAddressTypeId+","+sql_JointAssuredTradingCertificateId+","+sql_JointAssuredRiskReference+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressName+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress+","+sql_BranchAddressTypeName+","+sql_BranchAddressTypeId+","+sql_BranchTradingCertificateId+","+sql_BranchRiskReference+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressName+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress)
					
					log.info "API response is received as ===>"+api_TCPackId+","+api_CreatedByUserEmailAddress+","+api_CreatedDateTime+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_trademarkAndEngineModel+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName+","+api_certificateIssueDate+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_policyStartDate+","+api_policyEndDate+","+api_vesselEnteredDate+","+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress+","+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress+","+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress+","+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress+","+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress+","+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress
					apiWriter.println(api_TCPackId+","+api_CreatedByUserEmailAddress+","+api_CreatedDateTime+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_trademarkAndEngineModel+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName+","+api_certificateIssueDate+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_policyStartDate+","+api_policyEndDate+","+api_vesselEnteredDate+","+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress+","+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress+","+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress+","+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress+","+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress+","+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress)

					if(
						sql_TradingCertificatePackId.toString().toUpperCase().equals(api_TCPackId.toString().toUpperCase()) &&
						sql_CreatedByUserEmailAddress.toString().toUpperCase().equals(api_CreatedByUserEmailAddress.toString().toUpperCase()) &&
						sql_CreatedDateTime.toString().toUpperCase().equals(api_CreatedDateTime.toString().toUpperCase()) &&
						sql_TradingCertificateId.toString().equals(api_tradingCertificateId.toString()) &&
						sql_AddressType_Id.toString().equals(api_addressTypeId.toString()) &&
						sql_TradingCertificateId.toString().equals(api_tradingCertificateId.toString()) &&
						sql_SourceSystem.toString().toUpperCase().equals(api_sourceSystem.toString().toUpperCase()) &&
						sql_Reference.toString().equals(api_reference.toString()) &&
						sql_CurrentStatus.toString().toUpperCase().equals(api_currentStatus.toString().toUpperCase()) &&
						sql_StorageId.toString().equals(api_storageId.toString()) &&
						sql_RiskId.toString().equals(api_riskId.toString()) &&
						sql_PolicyId.toString().equals(api_policyId.toString()) &&
						sql_MemberPartyId.toString().equals(api_memberPartyId.toString()) &&
						sql_OwnerPartyId.toString().equals(api_ownerPartyId.toString()) &&
						sql_BrokerPartyId.toString().equals(api_brokerPartyId.toString()) &&
						sql_IsRenewalFlag.toString().toUpperCase().equals(api_isRenewal.toString().toUpperCase()) &&
						sql_IsYachtFlag.toString().toUpperCase().equals(api_isYacht.toString().toUpperCase()) &&
						sql_Version.toString().equals(api_version.toString()) &&
						sql_RiskReference.toString().equals(api_riskReference.toString()) &&
						sql_PolicyReference.toString().equals(api_policyReference.toString()) &&
						sql_MemberReference.toString().equals(api_memberReference.toString()) &&
						sql_MemberType.toString().toUpperCase().equals(api_memberType.toString().toUpperCase()) &&
						sql_MemberName.toString().toUpperCase().equals(api_memberName.toString().toUpperCase()) &&
						sql_JointAssuredName.toString().toUpperCase().equals(api_jointAssuredName.toString().toUpperCase()) &&
						sql_OwnerReference.toString().equals(api_ownerReference.toString()) &&
						sql_OwnerName.toString().toUpperCase().equals(api_ownerName.toString().toUpperCase()) &&
						sql_OwnerDomicile.toString().toUpperCase().equals(api_ownerDomicile.toString().toUpperCase()) &&
						sql_OwnerEmailAddress.toString().toUpperCase().equals(api_ownerEmailAddress.toString().toUpperCase()) &&
						sql_BrokerReference.toString().equals(api_brokerReference.toString()) &&
						sql_BrokerName.toString().toUpperCase().equals(api_brokerName.toString().toUpperCase()) &&
						sql_BrokerEmailAddress.toString().toUpperCase().equals(api_brokerEmailAddress.toString().toUpperCase()) &&
						sql_PolicyYear.toString().equals(api_policyYear.toString()) &&
						sql_EmailAddress.toString().toUpperCase().equals(api_emailAddress.toString().toUpperCase()) &&
						sql_CcEmailAddress.toString().toUpperCase().equals(api_ccEmailAddress.toString().toUpperCase()) &&
						sql_PassengerCapacity.toString().equals(api_passengerCapacity.toString()) &&
						sql_CurrencyCode.toString().toUpperCase().equals(api_currencyCode.toString().toUpperCase()) &&
						sql_CoverLimitAmount.toString().equals(api_coverLimitAmount.toString()) &&
						sql_SignatoryState_Id.toString().equals(api_signatoryStateId.toString()) &&
						sql_VesselName.toString().toUpperCase().equals(api_vesselName.toString().toUpperCase()) &&
						sql_VesselType.toString().toUpperCase().equals(api_vesselType.toString().toUpperCase()) &&
						sql_VesselTypeName.toString().toUpperCase().equals(api_vesselTypeName.toString().toUpperCase()) &&
						sql_vesselFlag.toString().toUpperCase().equals(api_vesselFlag.toString().toUpperCase()) &&
						sql_imoNumber.toString().equals(api_imoNumber.toString()) &&
						sql_distinctiveNumbersOrLetters.toString().toUpperCase().equals(api_distinctiveNumbersOrLetters.toString().toUpperCase()) &&
						sql_grossTonnage.toString().equals(api_grossTonnage.toString()) &&
						sql_yearBuilt.toString().equals(api_yearBuilt.toString()) &&
						sql_engineHorsePower.toString().equals(api_engineHorsePower.toString()) &&
						sql_model.toString().toUpperCase().equals(api_model.toString().toUpperCase()) &&
						sql_engineNo.toString().toUpperCase().equals(api_engineNo.toString().toUpperCase()) &&
						sql_NominatedStateFlag.toString().toUpperCase().equals(api_nominatedFlagState.toString().toUpperCase()) &&
						sql_NominatedStateFlagName.toString().toUpperCase().equals(api_nominatedFlagStateName.toString().toUpperCase()) &&
						sql_portOfRegistry.toString().toUpperCase().equals(api_portOfRegistry.toString().toUpperCase()) &&
						sql_TenderReferenceList.toString().equals(api_tenderReferenceList.toString()) &&
						sql_TenderOutboardReferenceList.toString().equals(api_tenderOutboardReferenceList.toString()) && 
						sql_TradingCertificateTypeId.toString().equals(api_tradingCertificateTypeId.toString()) &&
						sql_TradingCertificateGroupId.toString().equals(api_tradingCertificateGroupId.toString()) &&
						sql_TradingCertificateGroupName.toString().toUpperCase().equals(api_tradingCertificateGroupName.toString().toUpperCase()) &&
						sql_TradingCertificateGroupCode.toString().toUpperCase().equals(api_tradingCertificateGroupCode.toString().toUpperCase()) &&
						sql_TradingCertificateTypeCode.toString().toUpperCase().equals(api_tradingCertificateTypeTypeCode.toString().toUpperCase()) &&
						sql_TradingCertificateTypeName.toString().toUpperCase().equals(api_tradingCertificateTypeTypeName.toString().toUpperCase()) &&
						
						api_stateAddressId.toString().equals(sql_StateAddressId.toString()) && 
						api_stateAddressName.toString().toUpperCase().equals(sql_StateAddressName.toString().toUpperCase()) && 
						api_stateAddressLine1.toString().toUpperCase().equals(sql_StateAddressLine1.toString().toUpperCase()) && 
						api_stateAddressLine2.toString().toUpperCase().equals(sql_StateAddressLine2.toString().toUpperCase()) && 
						api_stateAddressLine3.toString().toUpperCase().equals(sql_StateAddressLine3.toString().toUpperCase()) && 
						api_stateAddressStateOrCounty.toString().toUpperCase().equals(sql_StateStateOrCounty.toString().toUpperCase()) && 
						api_stateAddressCity.toString().toUpperCase().equals(sql_StateCity.toString().toUpperCase()) && 
						api_stateAddressCountry.toString().toUpperCase().equals(sql_StateCountry.toString().toUpperCase()) && 
						api_stateAddressPostCode.toString().toUpperCase().equals(sql_StatePostCode.toString().toUpperCase()) && 
						api_stateAddressPrimaryAddress.toString().toUpperCase().equals(sql_StateIsPrimaryAddress.toString().toUpperCase()) && 
						api_ownerAddressId.toString().equals(sql_OwnerAddressId.toString()) && 
						api_ownerAddressName.toString().toUpperCase().equals(sql_OwnerAddressName.toString().toUpperCase()) && 
						api_ownerAddressLine1.toString().toUpperCase().equals(sql_OwnerAddressLine1.toString().toUpperCase()) && 
						api_ownerAddressLine2.toString().toUpperCase().equals(sql_OwnerAddressLine2.toString().toUpperCase()) && 
						api_ownerAddressLine3.toString().toUpperCase().equals(sql_OwnerAddressLine3.toString().toUpperCase()) && 
						api_ownerAddressStateOrCounty.toString().toUpperCase().equals(sql_OwnerStateOrCounty.toString().toUpperCase()) && 
						api_ownerAddressCity.toString().toUpperCase().equals(sql_OwnerCity.toString().toUpperCase()) && 
						api_ownerAddressCountry.toString().toUpperCase().equals(sql_OwnerCountry.toString().toUpperCase()) && 
						api_ownerAddressPostCode.toString().toUpperCase().equals(sql_OwnerPostCode.toString().toUpperCase()) && 
						api_ownerAddressPrimaryAddress.toString().toUpperCase().equals(sql_OwnerIsPrimaryAddress.toString().toUpperCase()) && 
						api_brokerAddressId.toString().equals(sql_BrokerAddressId.toString()) && 
						api_brokerAddressName.toString().toUpperCase().equals(sql_BrokerAddressName.toString().toUpperCase()) && 
						api_brokerAddressLine1.toString().toUpperCase().equals(sql_BrokerAddressLine1.toString().toUpperCase()) && 
						api_brokerAddressLine2.toString().toUpperCase().equals(sql_BrokerAddressLine2.toString().toUpperCase()) && 
						api_brokerAddressLine3.toString().toUpperCase().equals(sql_BrokerAddressLine3.toString().toUpperCase()) && 
						api_brokerAddressStateOrCounty.toString().toUpperCase().equals(sql_BrokerStateOrCounty.toString().toUpperCase()) && 
						api_brokerAddressCity.toString().toUpperCase().equals(sql_BrokerCity.toString().toUpperCase()) && 
						api_brokerAddressCountry.toString().toUpperCase().equals(sql_BrokerCountry.toString().toUpperCase()) && 
						api_brokerAddressPostCode.toString().toUpperCase().equals(sql_BrokerPostCode.toString().toUpperCase()) && 
						api_brokerAddressPrimaryAddress.toString().toUpperCase().equals(sql_BrokerIsPrimaryAddress.toString().toUpperCase()) && 
						api_memberAddressId.toString().equals(sql_MemberAddressId.toString()) && 
						api_memberAddressName.toString().toUpperCase().equals(sql_MemberAddressName.toString().toUpperCase()) && 
						api_memberAddressLine1.toString().toUpperCase().equals(sql_MemberAddressLine1.toString().toUpperCase()) && 
						api_memberAddressLine2.toString().toUpperCase().equals(sql_MemberAddressLine2.toString().toUpperCase()) && 
						api_memberAddressLine3.toString().toUpperCase().equals(sql_MemberAddressLine3.toString().toUpperCase()) && 
						api_memberAddressStateOrCounty.toString().toUpperCase().equals(sql_MemberStateOrCounty.toString().toUpperCase()) && 
						api_memberAddressCity.toString().toUpperCase().equals(sql_MemberCity.toString().toUpperCase()) && 
						api_memberAddressCountry.toString().toUpperCase().equals(sql_MemberCountry.toString().toUpperCase()) && 
						api_memberAddressPostCode.toString().toUpperCase().equals(sql_MemberPostCode.toString().toUpperCase()) && 
						api_memberAddressPrimaryAddress.toString().toUpperCase().equals(sql_MemberIsPrimaryAddress.toString().toUpperCase()) && 
						api_jointAssuredAddressId.toString().equals(sql_JointAssuredAddressId.toString()) && 
						api_jointAssuredAddressName.toString().toUpperCase().equals(sql_JointAssuredAddressName.toString().toUpperCase()) && 
						api_jointAssuredAddressLine1.toString().toUpperCase().equals(sql_JointAssuredAddressLine1.toString().toUpperCase()) && 
						api_jointAssuredAddressLine2.toString().toUpperCase().equals(sql_JointAssuredAddressLine2.toString().toUpperCase()) && 
						api_jointAssuredAddressLine3.toString().toUpperCase().equals(sql_JointAssuredAddressLine3.toString().toUpperCase()) && 
						api_jointAssuredAddressStateOrCounty.toString().toUpperCase().equals(sql_JointAssuredStateOrCounty.toString().toUpperCase()) && 
						api_jointAssuredAddressCity.toString().toUpperCase().equals(sql_JointAssuredCity.toString().toUpperCase()) && 
						api_jointAssuredAddressCountry.toString().toUpperCase().equals(sql_JointAssuredCountry.toString().toUpperCase()) && 
						api_jointAssuredAddressPostCode.toString().toUpperCase().equals(sql_JointAssuredPostCode.toString().toUpperCase()) && 
						api_jointAssuredAddressPrimaryAddress.toString().toUpperCase().equals(sql_JointAssuredIsPrimaryAddress.toString().toUpperCase()) && 
						api_branchAddressId.toString().equals(sql_BranchAddressId.toString()) && 
						api_branchAddressName.toString().toUpperCase().equals(sql_BranchAddressName.toString().toUpperCase()) && 
						api_branchAddressLine1.toString().toUpperCase().equals(sql_BranchAddressLine1.toString().toUpperCase()) && 
						api_branchAddressLine2.toString().toUpperCase().equals(sql_BranchAddressLine2.toString().toUpperCase()) && 
						api_branchAddressLine3.toString().toUpperCase().equals(sql_BranchAddressLine3.toString().toUpperCase()) && 
						api_branchAddressStateOrCounty.toString().toUpperCase().equals(sql_BranchStateOrCounty.toString().toUpperCase()) && 
						api_branchAddressCity.toString().toUpperCase().equals(sql_BranchCity.toString().toUpperCase()) && 
						api_branchAddressCountry.toString().toUpperCase().equals(sql_BranchCountry.toString().toUpperCase()) && 
						api_branchAddressPostCode.toString().toUpperCase().equals(sql_BranchPostCode.toString().toUpperCase()) && 
						api_branchAddressPrimaryAddress.toString().toUpperCase().equals(sql_BranchIsPrimaryAddress.toString().toUpperCase())
						/**/
						)
						{
							compareWriter.println(sql_TradingCertificatePackId+","+api_TCPackId+","+sql_CreatedByUserEmailAddress+","+api_CreatedByUserEmailAddress+","+sql_CreatedDateTime+","+api_CreatedDateTime+","+sql_TradingCertificateId+","+api_tradingCertificateId+","+sql_AddressType_Id+","+api_addressTypeId+","+sql_SourceSystem+","+api_sourceSystem+","+sql_Reference+","+api_reference+","+sql_CurrentStatus+","+api_currentStatus+","+sql_StorageId+","+api_storageId+","+sql_RiskId+","+api_riskId+","+sql_PolicyId+","+api_policyId+","+sql_MemberPartyId+","+api_memberPartyId+","+sql_OwnerPartyId+","+api_ownerPartyId+","+sql_BrokerPartyId+","+api_brokerPartyId+","+sql_IsRenewalFlag+","+api_isRenewal+","+sql_IsYachtFlag+","+api_isYacht+","+sql_Version+","+api_version+","+sql_RiskReference+","+api_riskReference+","+sql_PolicyReference+","+api_policyReference+","+sql_MemberReference+","+api_memberReference+","+sql_MemberType+","+api_memberType+","+sql_MemberName+","+api_memberName+","+sql_JointAssuredName+","+api_jointAssuredName+","+sql_OwnerReference+","+api_ownerReference+","+sql_OwnerName+","+api_ownerName+","+sql_OwnerDomicile+","+api_ownerDomicile+","+sql_OwnerEmailAddress+","+api_ownerEmailAddress+","+sql_BrokerReference+","+api_brokerReference+","+sql_BrokerName+","+api_brokerName+","+sql_BrokerEmailAddress+","+api_brokerEmailAddress+","+sql_PolicyYear+","+api_policyYear+","+sql_EmailAddress+","+api_emailAddress+","+sql_CcEmailAddress+","+api_ccEmailAddress+","+sql_PassengerCapacity+","+api_passengerCapacity+","+sql_CurrencyCode+","+api_currencyCode+","+sql_CoverLimitAmount+","+api_coverLimitAmount+","+sql_SignatoryState_Id+","+api_signatoryStateId+","+sql_VesselName+","+api_vesselName+","+sql_VesselType+","+api_vesselType+","+sql_VesselTypeName+","+api_vesselTypeName+","+sql_vesselFlag+","+api_vesselFlag+","+sql_imoNumber+","+api_imoNumber+","+sql_distinctiveNumbersOrLetters+","+api_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+api_grossTonnage+","+sql_yearBuilt+","+api_yearBuilt+","+sql_engineHorsePower+","+api_engineHorsePower+","+sql_model+","+api_model+","+sql_engineNo+","+api_engineNo+","+sql_NominatedStateFlag+","+api_nominatedFlagState+","+sql_NominatedStateFlagName+","+api_nominatedFlagStateName+","+sql_portOfRegistry+","+api_portOfRegistry+","+sql_TenderReferenceList+","+api_tenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_tenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_tradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_tradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_tradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_tradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_tradingCertificateTypeTypeCode+","+sql_TradingCertificateTypeName+","+api_tradingCertificateTypeTypeName+","+api_stateAddressId+","+sql_StateAddressId+","+api_stateAddressName+","+sql_StateAddressName+","+api_stateAddressLine1+","+sql_StateAddressLine1+","+api_stateAddressLine2+","+sql_StateAddressLine2+","+api_stateAddressLine3+","+sql_StateAddressLine3+","+api_stateAddressStateOrCounty+","+sql_StateStateOrCounty+","+api_stateAddressCity+","+sql_StateCity+","+api_stateAddressCountry+","+sql_StateCountry+","+api_stateAddressPostCode+","+sql_StatePostCode+","+api_stateAddressPrimaryAddress+","+sql_StateIsPrimaryAddress+","+api_ownerAddressId+","+sql_OwnerAddressId+","+api_ownerAddressName+","+sql_OwnerAddressName+","+api_ownerAddressLine1+","+sql_OwnerAddressLine1+","+api_ownerAddressLine2+","+sql_OwnerAddressLine2+","+api_ownerAddressLine3+","+sql_OwnerAddressLine3+","+api_ownerAddressStateOrCounty+","+sql_OwnerStateOrCounty+","+api_ownerAddressCity+","+sql_OwnerCity+","+api_ownerAddressCountry+","+sql_OwnerCountry+","+api_ownerAddressPostCode+","+sql_OwnerPostCode+","+api_ownerAddressPrimaryAddress+","+sql_OwnerIsPrimaryAddress+","+api_brokerAddressId+","+sql_BrokerAddressId+","+api_brokerAddressName+","+sql_BrokerAddressName+","+api_brokerAddressLine1+","+sql_BrokerAddressLine1+","+api_brokerAddressLine2+","+sql_BrokerAddressLine2+","+api_brokerAddressLine3+","+sql_BrokerAddressLine3+","+api_brokerAddressStateOrCounty+","+sql_BrokerStateOrCounty+","+api_brokerAddressCity+","+sql_BrokerCity+","+api_brokerAddressCountry+","+sql_BrokerCountry+","+api_brokerAddressPostCode+","+sql_BrokerPostCode+","+api_brokerAddressPrimaryAddress+","+sql_BrokerIsPrimaryAddress+","+api_memberAddressId+","+sql_MemberAddressId+","+api_memberAddressName+","+sql_MemberAddressName+","+api_memberAddressLine1+","+sql_MemberAddressLine1+","+api_memberAddressLine2+","+sql_MemberAddressLine2+","+api_memberAddressLine3+","+sql_MemberAddressLine3+","+api_memberAddressStateOrCounty+","+sql_MemberStateOrCounty+","+api_memberAddressCity+","+sql_MemberCity+","+api_memberAddressCountry+","+sql_MemberCountry+","+api_memberAddressPostCode+","+sql_MemberPostCode+","+api_memberAddressPrimaryAddress+","+sql_MemberIsPrimaryAddress+","+api_jointAssuredAddressId+","+sql_JointAssuredAddressId+","+api_jointAssuredAddressName+","+sql_JointAssuredAddressName+","+api_jointAssuredAddressLine1+","+sql_JointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+sql_JointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+sql_JointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+sql_JointAssuredStateOrCounty+","+api_jointAssuredAddressCity+","+sql_JointAssuredCity+","+api_jointAssuredAddressCountry+","+sql_JointAssuredCountry+","+api_jointAssuredAddressPostCode+","+sql_JointAssuredPostCode+","+api_jointAssuredAddressPrimaryAddress+","+sql_JointAssuredIsPrimaryAddress+","+api_branchAddressId+","+sql_BranchAddressId+","+api_branchAddressName+","+sql_BranchAddressName+","+api_branchAddressLine1+","+sql_BranchAddressLine1+","+api_branchAddressLine2+","+sql_BranchAddressLine2+","+api_branchAddressLine3+","+sql_BranchAddressLine3+","+api_branchAddressStateOrCounty+","+sql_BranchStateOrCounty+","+api_branchAddressCity+","+sql_BranchCity+","+api_branchAddressCountry+","+sql_BranchCountry+","+api_branchAddressPostCode+","+sql_BranchPostCode+","+api_branchAddressPrimaryAddress+","+sql_BranchIsPrimaryAddress+","+"Test Case is Passed")
							log.info "Details are matching hence Test Case Passed"
						}
						else
						{
							compareWriter.println(sql_TradingCertificatePackId+","+api_TCPackId+","+sql_CreatedByUserEmailAddress+","+api_CreatedByUserEmailAddress+","+sql_CreatedDateTime+","+api_CreatedDateTime+","+sql_TradingCertificateId+","+api_tradingCertificateId+","+sql_AddressType_Id+","+api_addressTypeId+","+sql_SourceSystem+","+api_sourceSystem+","+sql_Reference+","+api_reference+","+sql_CurrentStatus+","+api_currentStatus+","+sql_StorageId+","+api_storageId+","+sql_RiskId+","+api_riskId+","+sql_PolicyId+","+api_policyId+","+sql_MemberPartyId+","+api_memberPartyId+","+sql_OwnerPartyId+","+api_ownerPartyId+","+sql_BrokerPartyId+","+api_brokerPartyId+","+sql_IsRenewalFlag+","+api_isRenewal+","+sql_IsYachtFlag+","+api_isYacht+","+sql_Version+","+api_version+","+sql_RiskReference+","+api_riskReference+","+sql_PolicyReference+","+api_policyReference+","+sql_MemberReference+","+api_memberReference+","+sql_MemberType+","+api_memberType+","+sql_MemberName+","+api_memberName+","+sql_JointAssuredName+","+api_jointAssuredName+","+sql_OwnerReference+","+api_ownerReference+","+sql_OwnerName+","+api_ownerName+","+sql_OwnerDomicile+","+api_ownerDomicile+","+sql_OwnerEmailAddress+","+api_ownerEmailAddress+","+sql_BrokerReference+","+api_brokerReference+","+sql_BrokerName+","+api_brokerName+","+sql_BrokerEmailAddress+","+api_brokerEmailAddress+","+sql_PolicyYear+","+api_policyYear+","+sql_EmailAddress+","+api_emailAddress+","+sql_CcEmailAddress+","+api_ccEmailAddress+","+sql_PassengerCapacity+","+api_passengerCapacity+","+sql_CurrencyCode+","+api_currencyCode+","+sql_CoverLimitAmount+","+api_coverLimitAmount+","+sql_SignatoryState_Id+","+api_signatoryStateId+","+sql_VesselName+","+api_vesselName+","+sql_VesselType+","+api_vesselType+","+sql_VesselTypeName+","+api_vesselTypeName+","+sql_vesselFlag+","+api_vesselFlag+","+sql_imoNumber+","+api_imoNumber+","+sql_distinctiveNumbersOrLetters+","+api_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+api_grossTonnage+","+sql_yearBuilt+","+api_yearBuilt+","+sql_engineHorsePower+","+api_engineHorsePower+","+sql_model+","+api_model+","+sql_engineNo+","+api_engineNo+","+sql_NominatedStateFlag+","+api_nominatedFlagState+","+sql_NominatedStateFlagName+","+api_nominatedFlagStateName+","+sql_portOfRegistry+","+api_portOfRegistry+","+sql_TenderReferenceList+","+api_tenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_tenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_tradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_tradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_tradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_tradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_tradingCertificateTypeTypeCode+","+sql_TradingCertificateTypeName+","+api_tradingCertificateTypeTypeName+","+api_stateAddressId+","+sql_StateAddressId+","+api_stateAddressName+","+sql_StateAddressName+","+api_stateAddressLine1+","+sql_StateAddressLine1+","+api_stateAddressLine2+","+sql_StateAddressLine2+","+api_stateAddressLine3+","+sql_StateAddressLine3+","+api_stateAddressStateOrCounty+","+sql_StateStateOrCounty+","+api_stateAddressCity+","+sql_StateCity+","+api_stateAddressCountry+","+sql_StateCountry+","+api_stateAddressPostCode+","+sql_StatePostCode+","+api_stateAddressPrimaryAddress+","+sql_StateIsPrimaryAddress+","+api_ownerAddressId+","+sql_OwnerAddressId+","+api_ownerAddressName+","+sql_OwnerAddressName+","+api_ownerAddressLine1+","+sql_OwnerAddressLine1+","+api_ownerAddressLine2+","+sql_OwnerAddressLine2+","+api_ownerAddressLine3+","+sql_OwnerAddressLine3+","+api_ownerAddressStateOrCounty+","+sql_OwnerStateOrCounty+","+api_ownerAddressCity+","+sql_OwnerCity+","+api_ownerAddressCountry+","+sql_OwnerCountry+","+api_ownerAddressPostCode+","+sql_OwnerPostCode+","+api_ownerAddressPrimaryAddress+","+sql_OwnerIsPrimaryAddress+","+api_brokerAddressId+","+sql_BrokerAddressId+","+api_brokerAddressName+","+sql_BrokerAddressName+","+api_brokerAddressLine1+","+sql_BrokerAddressLine1+","+api_brokerAddressLine2+","+sql_BrokerAddressLine2+","+api_brokerAddressLine3+","+sql_BrokerAddressLine3+","+api_brokerAddressStateOrCounty+","+sql_BrokerStateOrCounty+","+api_brokerAddressCity+","+sql_BrokerCity+","+api_brokerAddressCountry+","+sql_BrokerCountry+","+api_brokerAddressPostCode+","+sql_BrokerPostCode+","+api_brokerAddressPrimaryAddress+","+sql_BrokerIsPrimaryAddress+","+api_memberAddressId+","+sql_MemberAddressId+","+api_memberAddressName+","+sql_MemberAddressName+","+api_memberAddressLine1+","+sql_MemberAddressLine1+","+api_memberAddressLine2+","+sql_MemberAddressLine2+","+api_memberAddressLine3+","+sql_MemberAddressLine3+","+api_memberAddressStateOrCounty+","+sql_MemberStateOrCounty+","+api_memberAddressCity+","+sql_MemberCity+","+api_memberAddressCountry+","+sql_MemberCountry+","+api_memberAddressPostCode+","+sql_MemberPostCode+","+api_memberAddressPrimaryAddress+","+sql_MemberIsPrimaryAddress+","+api_jointAssuredAddressId+","+sql_JointAssuredAddressId+","+api_jointAssuredAddressName+","+sql_JointAssuredAddressName+","+api_jointAssuredAddressLine1+","+sql_JointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+sql_JointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+sql_JointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+sql_JointAssuredStateOrCounty+","+api_jointAssuredAddressCity+","+sql_JointAssuredCity+","+api_jointAssuredAddressCountry+","+sql_JointAssuredCountry+","+api_jointAssuredAddressPostCode+","+sql_JointAssuredPostCode+","+api_jointAssuredAddressPrimaryAddress+","+sql_JointAssuredIsPrimaryAddress+","+api_branchAddressId+","+sql_BranchAddressId+","+api_branchAddressName+","+sql_BranchAddressName+","+api_branchAddressLine1+","+sql_BranchAddressLine1+","+api_branchAddressLine2+","+sql_BranchAddressLine2+","+api_branchAddressLine3+","+sql_BranchAddressLine3+","+api_branchAddressStateOrCounty+","+sql_BranchStateOrCounty+","+api_branchAddressCity+","+sql_BranchCity+","+api_branchAddressCountry+","+sql_BranchCountry+","+api_branchAddressPostCode+","+sql_BranchPostCode+","+api_branchAddressPrimaryAddress+","+sql_BranchIsPrimaryAddress+","+"Test Case is Failed")
							log.info "Details are not matching hence Test Case Failed"
						}
					break;
	
				}
				else
				{
					
				}
			}//for i end
		}//if status =200 end
		else if(httpStatusCode.toString().equals("401"))
		{
			apiWriter.println("API response status code is received as =>"+httpStatusCode+" so because invalid token is provided and error is received as =>"+httpStatus)
			compareWriter.println("API response status code is received as =>"+httpStatusCode+" so because invalid token is provided and error is received as =>"+httpStatus)
			log.info "API response status code is received as =>"+httpStatusCode+" so because invalid token is provided and error is received as =>"+httpStatus
		}
		else
		{
			log.info "Something wrong has happened, need to check the error"
			apiWriter.println("Something wrong has happened, need to check the error")
			compareWriter.println("Something wrong has happened, need to check the error")
		}
		counter = counter+1
		log.info "Number of trading certificatre packing list with linked trading certificate verified are : "+counter
}//sql end

public String removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("[") || field.contains("]"))
	{
		field=field.replace("[", " ")
		field=field.replace("]", " ")
	}
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for POST Method for Trading Certificate Packs***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>TCPackId</con:name><con:value>65</con:value></con:property></con:properties></con:testCase><con:testCase id="db54e4cb-efb1-4ccd-8d18-c49cceed5a77" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_TradingcertificatePacks" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Post_TradingcertificatePacks" id="a0e0c827-7637-4247-a87d-3e25f7afae4d"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificatePacks" methodName="Post_TradingcertificatePacks" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Post_TradingcertificatePacks" id="ef0a3539-ce3f-427e-8ca8-5ffc00ee9bc1" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>{
	"createdByUserEmailAddress": "Test@testmail.com",
	"tradingCertificates": [
	]
}</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificatePacks</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Post_TradingcertificatePack" id="b68346a3-3938-463f-826a-dbe779886189" disabled="true"><con:settings/><con:config><script>import groovy.json.JsonSlurper  
import groovy.json.*
import groovy.sql.Sql
import java.io.File 
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST Method for Trading Certificate Packs************"

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_POSTMethodForTradingCertificatePacks.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_POSTMethodForTradingCertificatePacks.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POST_POSTMethodForTradingCertificatePacks.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_POSTMethodForTradingCertificatePacks"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_POSTMethodForTradingCertificatePacks"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POST_Response_POSTMethodForTradingCertificatePacks"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificatePackId"+","+"SQL_TCPackCreatedByUserEmail"+","+"SQL_TCPackCreatedDateTime"+","+"SQL_IsDeleted"+","+"SQL_UserPrincipalNameLastModifiedBy")
apiWriter.println("API_TradingCertificatePackId"+","+"API_TCPackCreatedByUserEmail"+","+"API_TCPackCreatedDateTime"+","+"API_TradingCertificates")
compareWriter.println("SQL_TradingCertificatePackId"+","+"API_TCPackId"+","+"SQL_TCPackCreatedByUserEmail"+","+"API_TCPackCreatedByUserEmailAddress"+","+"SQL_TCPackCreatedDateTime"+","+"API_TCPackCreatedDateTime"+","+"API_TCPackTradingCertificates"+","+"SQL_IsDeleted"+","+"SQL_UserPrincipalNameLastModifiedBy"+","+"Test Case Status")


for (int i=0; i&lt;5; i++)
{
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('Post_TradingcertificatePacks')
	String req='${Post_TradingcertificatePacks#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	
	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["Post_TradingcertificatePacks"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 
	//log.info ("HTTP status : " + httpStatus) 

	if(httpStatusCode.toString().equals("200"))
	{
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)
	
		api_TCPackId=jsonRes.id
		api_TCPackCreatedByUserEmailAddress=jsonRes.createdByUserEmailAddress
		api_TCPackCreatedDateTime=jsonRes.createdDateTime
		api_TCPackCreatedDateTime=api_TCPackCreatedDateTime.toString().replace("T"," ")
		api_TCPackCreatedDateTime=api_TCPackCreatedDateTime.toString().substring(0, 19)
		log.info "API="+api_TCPackCreatedDateTime
		api_TCPackTradingCertificates=jsonRes.tradingCertificates
	
		apiWriter.println(api_TCPackId+","+api_TCPackCreatedByUserEmailAddress+","+api_TCPackCreatedDateTime+","+api_TCPackTradingCertificates)
		log.info "API response is received as "+api_TCPackId+","+api_TCPackCreatedByUserEmailAddress+","+api_TCPackCreatedDateTime+","+api_TCPackTradingCertificates
	
		int TCPackId=api_TCPackId.toInteger()
		
		String sqlstmt=
		"""
		USE tradingcertificate 
		select * 
		from TradingCertificatePack 
		where Id="""+TCPackId+"""
		"""
		con.eachRow(sqlstmt)
		{
			row->
				sql_TradingCertificatePackId=row.Id
				sql_TCPackCreatedByUserEmail=row.CreatedByUserEmailAddress
				sql_TCPackCreatedDateTime=row.CreatedDateTime
				sql_TCPackCreatedDateTime=sql_TCPackCreatedDateTime.toString().substring(0, 19)
				log.info "SQL="+sql_TCPackCreatedDateTime
				sql_IsDeleted=row.IsDeleted
				sql_UserPrincipalNameLastModifiedBy=row.UserPrincipalName_LastModifiedBy
		
			log.info "SQL Response is received as "+sql_TradingCertificatePackId+","+sql_TCPackCreatedByUserEmail+","+sql_TCPackCreatedDateTime+","+sql_IsDeleted+","+sql_UserPrincipalNameLastModifiedBy
			sqlWriter.println(sql_TradingCertificatePackId+","+sql_TCPackCreatedByUserEmail+","+sql_TCPackCreatedDateTime+","+sql_IsDeleted+","+sql_UserPrincipalNameLastModifiedBy)
		}
		if(	sql_TradingCertificatePackId.toString().equals(api_TCPackId.toString()) &amp;&amp;
			sql_TCPackCreatedByUserEmail.toString().equals(api_TCPackCreatedByUserEmailAddress.toString()) &amp;&amp; 
			sql_TCPackCreatedDateTime.toString().equals(api_TCPackCreatedDateTime.toString())
		)	
		{
			compareWriter.println(sql_TradingCertificatePackId+","+api_TCPackId+","+sql_TCPackCreatedByUserEmail+","+api_TCPackCreatedByUserEmailAddress+","+sql_TCPackCreatedDateTime+","+api_TCPackCreatedDateTime+","+api_TCPackTradingCertificates+","+sql_IsDeleted+","+sql_UserPrincipalNameLastModifiedBy+","+"Test Case Passed")
			log.info "Details are matching hence test case is passed=>"+sql_TradingCertificatePackId+","+api_TCPackId+","+sql_TCPackCreatedByUserEmail+","+api_TCPackCreatedByUserEmailAddress+","+sql_TCPackCreatedDateTime+","+api_TCPackCreatedDateTime
		}
		else
		{
			compareWriter.println(sql_TradingCertificatePackId+","+api_TCPackId+","+sql_TCPackCreatedByUserEmail+","+api_TCPackCreatedByUserEmailAddress+","+sql_TCPackCreatedDateTime+","+api_TCPackCreatedDateTime+","+api_TCPackTradingCertificates+","+sql_IsDeleted+","+sql_UserPrincipalNameLastModifiedBy+","+"Test Case Failed")
			log.info "Details are not matching hence test case is failed=>"+sql_TradingCertificatePackId+","+api_TCPackId+","+sql_TCPackCreatedByUserEmail+","+api_TCPackCreatedByUserEmailAddress+","+sql_TCPackCreatedDateTime+","+api_TCPackCreatedDateTime
		}	
	}
	else if(httpStatusCode.toString().equals("401"))
	{
		apiWriter.println("API response status code is received as =>"+httpStatusCode+" so because invalid token is provided and error is received as =>"+httpStatus)
		compareWriter.println("API response status code is received as =>"+httpStatusCode+" so because invalid token is provided and error is received as =>"+httpStatus)
		log.info "API response status code is received as =>"+httpStatusCode+" so because invalid token is provided and error is received as =>"+httpStatus
	}
	else
	{
		log.info "Something wrong has happened, need to check the error"
		apiWriter.println("Something wrong has happened, need to check the error")
		compareWriter.println("Something wrong has happened, need to check the error")
	}
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for POST Method for Trading Certificate Packs***********"</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="216848ba-7dc2-4608-adb8-82b44abd75b4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_ReferenceByTradingCertificateTypesByInvalidCertificate" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="POST_RefByTradCertByInvalidCert" id="bd54c3a0-cf3f-44d2-b48b-d57b4696f894"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/tradingcertificateTypes/invalidcert" methodName="ReferenceByTradingCertificateByInvalidCertificates" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST_RefByTradCertByInvalidCert" id="45774e96-1ca2-47f5-953c-37023d5b3901" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>		[
		  {
		    "id": 130179,
		    "name": "Newstring",
		    "reference": 682637,
		    "vesselTypeShortCode": "AU",
		    "vesselType": "AUTONOMOUS UNDERWATER",
		    "grossTonnage": 1000,
		    "passengerCarryingCapacity": 12,
		    "policyReference": 1044648,
		    "policyStart": "2021-04-01T12:00:00.0",
		    "policyEnd": "2022-04-01T12:00:00.0",
		    "coverLimits": [
		      {
		        "id": 77,
		        "coverShortName": "Passenger Vess Liab",
		        "limitName": "TestLimit",
		        "currencyCode": "USD",
		        "amount": 50000000.00,
		        "isThePrimaryCoverLimit": true
		      }
		    ]
		  }
		]
		</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/invalidCert</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="POST_ReferenceByTradingCertificateByInvalidCertificates_Final" id="3b43cf9a-0c91-4541-9315-762c38a51b64" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST method of Reference By Trading Certificate by Invalid Certificate************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

//Reading the Business Rules Sheet
def inputStream = new FileInputStream("C:\\APITesting\\TradingCertificateTesting\\TC_BusinessRules_AutomationTesting.xls");
Workbook wb = WorkbookFactory.create(inputStream);
//HSSFWorkbook workbook1 = new HSSFWorkbook (inputStream)
  //  Workbook workbook1 = WorkbookFactory.create( inputStream );
//Workbook workbook1 = Workbook.getWorkbook(config) //file containing the data

def ws = wb.getSheet("VesselType_Validation")
def rowCount = ws.getPhysicalNumberOfRows()

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt =
"""
	Use tradingcertificate
	Select Top 5
	RiskId, RiskReference, VesselName, VesselTypeName, GrossTonnage, PassengerCapacity, PolicyReference, 
	PolicyStartDate, PolicyEndDate, CurrencyCode, CoverLimitAmount
	from TradingCertificate TC
	order by TC.PolicyEndDate desc
"""

//	sql_vesselTypeShortCode ="YC"// "PCV"
//	sql_vesselType = "YACHT COMPANY OWNED NO CHARTER"//"PASSENGER CRUISE VESSEL"
//	String gross = 10
//	sql_passengerCarryingCapacity = 11
//	String sql_amount = 50000000.00

vesselTypeShortCode ="BA"//"YC"// "PCV"
vesselType = "ACCOMMODATION BARGE"//"YACHT COMPANY OWNED NO CHARTER"//"PASSENGER CRUISE VESSEL"


def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]
def businessRulesFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\BusinessRulesResponse_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POST_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]
//def businessRulesFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\BusinessRulesForReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POST_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]


def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def rulesFile = new File(businessRulesFile[0])
def rulesWriter = rulesFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_applicationRiskId"+","+"SQL_reference"+","+"SQL_vesselTypeShortCode"+","+"SQL_vesselType"+","+"SQL_grossTonnage"+","+"SQL_passengerCarryingCapacity"+","+"SQL_policyReference"+","+"SQL_policyStart"+","+"SQL_policyEnd"+","+"SQL_currencyCode"+","+"SQL_amount")
apiWriter.println("ApplicationRiskId"+","+"Reference"+","+"API_tradingCertificateTypeCode"+","+"API_isInvalid"+","+"API_isVesselTypeInvalid"+","+"API_isGrossTonnageInvalid"+","+"API_isPassengerCapacityInvalid"+","+"API_isPolicyDateInvalid"+","+"API_isCoverLimitInvalid"+","+"API_coverLimitName"+","+"API_disabledReasonText")
rulesWriter.println("ApplicationRiskId"+","+"Reference"+","+"RULES_tradingCertificateTypeCode"+","+"RULES_isInvalid"+","+"RULES_isVesselTypeInvalid"+","+"RULES_isGrossTonnageInvalid"+","+"RULES_isPassengerCapacityInvalid"+","+"RULES_isPolicyDateInvalid"+","+"RULES_isCoverLimitInvalid"+","+"RULES_coverLimitName"+","+"RULES_disabledReasonText")
compareWriter.println("ApplicationRiskId"+","+"API_tradingCertificateTypeCode"+","+"RULES_tradingCertificateTypeCode"+","+"API_isInvalid"+","+"RULES_isInvalid"+","+"API_isVesselTypeInvalid"+","+"RULES_isVesselTypeInvalid"+","+"API_isGrossTonnageInvalid"+","+"RULES_isGrossTonnageInvalid"+","+"API_isPassengerCapacityInvalid"+","+"RULES_isPassengerCapacityInvalid"+","+"API_isPolicyDateInvalid"+","+"RULES_isPolicyDateInvalid"+","+"API_isCoverLimitInvalid"+","+"RULES_isCoverLimitInvalid"+","+"API_coverLimitName"+","+"RULES_coverLimitName"+","+"API_disabledReasonText"+","+"RULES_disabledReasonText"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
	sql_applicationRiskId = row.RiskId
	sql_reference = row.RiskReference
	
	//sql_vesselTypeShortCode = row.VesselName
	//sql_vesselType = row.VesselTypeName
	//String gross = row.GrossTonnage
	//sql_passengerCarryingCapacity = row.PassengerCapacity
	//String sql_amount = row.CoverLimitAmount

	sql_vesselTypeShortCode =vesselTypeShortCode
	sql_vesselType = vesselType
	String gross = 1000
	sql_passengerCarryingCapacity = 12
	String sql_amount = 50000000.00
	
	sql_policyReference = row.PolicyReference
	String sql_policyStart = row.PolicyStartDate
	String sql_policyEnd = row.PolicyEndDate
	sql_currencyCode = row.CurrencyCode

	String sql_limitName = "limitName"

	//Converting gross(Object) to Int
	sql_grossTonnage_double = Double.parseDouble(gross);
	int sql_grossTonnage = (Integer) sql_grossTonnage_double;

	//Converting dates to required format
	sql_policyStart=sql_policyStart.replaceAll("\\s", "T");
	sql_policyEnd=sql_policyEnd.replaceAll("\\s", "T");

	//Removing null value of sql_amount
	if(sql_amount == null) {
		sql_amount = 0.00;
	}

	sqlWriter.println(sql_applicationRiskId+","+sql_reference+","+sql_vesselTypeShortCode+","+sql_vesselType+","+sql_grossTonnage+","+sql_passengerCarryingCapacity+","+sql_policyReference+","+sql_policyStart+","+sql_policyEnd+","+sql_currencyCode+","+sql_amount)
	log.info "SQL Response received as : "+sql_applicationRiskId+","+sql_reference+","+sql_vesselTypeShortCode+","+sql_vesselType+","+sql_grossTonnage+","+sql_passengerCarryingCapacity+","+sql_policyReference+","+sql_policyStart+","+sql_policyEnd+","+sql_currencyCode+","+sql_amount

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	def newRequest = """
	[
	  {
	    "id": $sql_applicationRiskId,
	    "name": "Newstring",
	    "reference": $sql_reference,
	    "vesselTypeShortCode": "$sql_vesselTypeShortCode",
	    "vesselType": "$sql_vesselType",
	    "grossTonnage": $sql_grossTonnage,
	    "passengerCarryingCapacity": $sql_passengerCarryingCapacity,
	    "policyReference": $sql_policyReference,
	    "policyStart": "$sql_policyStart",
	    "policyEnd": "$sql_policyEnd",
	    "coverLimits": [
	      {
	        "id": 77,
	        "coverShortName": "Passenger Vess Liab",
	        "limitName": "$sql_limitName",
	        "currencyCode": "$sql_currencyCode",
	        "amount": $sql_amount,
	        "isThePrimaryCoverLimit": true
	      }
	    ]
	  }
	]
	"""

	log.info "Request body for post trading certificate is : "+newRequest

	//Run the test Step with name
	testRunner.testCase.testSteps["POST_RefByTradCertByInvalidCert"].setPropertyValue( "Request", newRequest)
	
	testRunner.runTestStepByName('POST_RefByTradCertByInvalidCert')
	String req='${POST_RefByTradCertByInvalidCert#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["POST_RefByTradCertByInvalidCert"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
			for(int i=0; i<26; i++)
			{ 
				postApi_applicationRiskId = jsonRes.invalidCerts.applicationRiskId[0][i]
				postApi_reference = jsonRes.invalidCerts.reference[0][i]
				postApi_tradingCertificateTypeCode = jsonRes.invalidCerts.tradingCertificateTypeCode[0][i]
				postApi_isInvalid = jsonRes.invalidCerts.isInvalid[0][i]
				postApi_isVesselTypeInvalid = jsonRes.invalidCerts.isVesselTypeInvalid[0][i]
				postApi_isGrossTonnageInvalid = jsonRes.invalidCerts.isGrossTonnageInvalid[0][i]
				postApi_isPassengerCapacityInvalid = jsonRes.invalidCerts.isPassengerCapacityInvalid[0][i]
				postApi_isPolicyDateInvalid = jsonRes.invalidCerts.isPolicyDateInvalid[0][i]
				postApi_isCoverLimitInvalid = jsonRes.invalidCerts.isCoverLimitInvalid[0][i]
				postApi_coverLimitName = jsonRes.invalidCerts.coverLimitName[0][i]
				postApi_disabledReasonText=jsonRes.invalidCerts.disabledReasonText[0][i]

				if(postApi_applicationRiskId == null)
				{
					break;
				}
				
				apiWriter.println(postApi_applicationRiskId+","+postApi_reference+","+postApi_tradingCertificateTypeCode+","+postApi_isInvalid+","+postApi_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+postApi_coverLimitName+","+postApi_disabledReasonText)
				log.info "API response recieved is: "+postApi_applicationRiskId+","+postApi_reference+","+postApi_tradingCertificateTypeCode+","+postApi_isInvalid+","+postApi_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+postApi_coverLimitName+","+postApi_disabledReasonText
				
				rules_applicationRiskId = postApi_applicationRiskId
				rules_tradingCertificateTypeCode = postApi_tradingCertificateTypeCode
				String rules_isInvalid
				String rules_isVesselTypeInvalid
				String rules_isGrossTonnageInvalid
				String rules_isPassengerCapacityInvalid
				String rules_isPolicyDateInvalid
				String rules_isCoverLimitInvalid
				String rules_coverLimitName
				String rules_disabledReasonText

				rules_vesselTypeShortCode = sql_vesselTypeShortCode
				rules_vesselType = sql_vesselType
				
				int vesselTypeRowNo = 0;
				
				for(int j=1; j<rowCount; j++)
				{
					Row vesselRow = ws.getRow(j);
					Cell vesselCell = vesselRow.getCell(2);
					Cell vesselCellCode = vesselRow.getCell(3);
					String vesselType = vesselCell.getStringCellValue().trim();
					String vesselCode = vesselCellCode.getStringCellValue().trim();
					//log.info vesselType
					//log.info vesselCode
					if(vesselType.toString().equals(rules_vesselType.toString()) && vesselCode.toString().equals(rules_vesselTypeShortCode.toString()) )
					{
						vesselTypeRowNo = j;
						break;
					}
				}
				
				Row rowCertType = ws.getRow(0);
				Row vesselRow = ws.getRow(vesselTypeRowNo);
				
				
				for(int m=4; m<30; m++)
				{
					Cell certTypeCell = rowCertType.getCell(m);
					String certTypeCode = certTypeCell.getStringCellValue().trim();
						if(certTypeCode == rules_tradingCertificateTypeCode && rules_tradingCertificateTypeCode == "BBC")
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_grossTonnage <1000)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "true";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_grossTonnage >= 1000)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}						
						else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "PLRIn" || rules_tradingCertificateTypeCode == "PLREx"))
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_passengerCarryingCapacity <12)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "true";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Passenger Capacity "+sql_passengerCarryingCapacity+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_passengerCarryingCapacity >= 12)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Passenger Capacity "+sql_passengerCarryingCapacity+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}
						else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "NWRC"))
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_grossTonnage <300)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "true";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_grossTonnage >= 300)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}

						else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "COE500M" || rules_tradingCertificateTypeCode == "COE500MSPANISH" || rules_tradingCertificateTypeCode == "COEYACHTESPENGLISH" || rules_tradingCertificateTypeCode == "COEYACHTESPSPANISH"))
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_amount != 500000000.00)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "true"
									rules_coverLimitName = sql_limitName
									rules_disabledReasonText = "Cover Limit "+"'"+sql_limitName+"'"+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_amount == 500000000.00)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = sql_limitName
									rules_disabledReasonText = "Cover Limit "+"'"+sql_limitName+"'"+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}

						else if(certTypeCode == rules_tradingCertificateTypeCode)
						{
							Cell vesselValidation = vesselRow.getCell(m);
						
							if(vesselValidation.getStringCellValue().trim() == "N")
							{
								rules_isInvalid = "true";
								rules_isVesselTypeInvalid = "true";
								rules_isGrossTonnageInvalid = "false";
								rules_isPassengerCapacityInvalid = "false";
								rules_isPolicyDateInvalid = "false"
								rules_isCoverLimitInvalid = "false"
								rules_coverLimitName = null
								rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}

							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
								rules_isInvalid = "false";
								rules_isVesselTypeInvalid = "false";
								rules_isGrossTonnageInvalid = "false";
								rules_isPassengerCapacityInvalid = "false";
								rules_isPolicyDateInvalid = "false"
								rules_isCoverLimitInvalid = "false"
								rules_coverLimitName = null
								rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is valid for "+rules_tradingCertificateTypeCode
							}
						}
				}

				rulesWriter.println(rules_applicationRiskId+","+rules_tradingCertificateTypeCode+","+rules_isInvalid+","+rules_isVesselTypeInvalid+","+rules_isGrossTonnageInvalid+","+rules_isPassengerCapacityInvalid+","+rules_isPolicyDateInvalid+","+rules_isCoverLimitInvalid+","+rules_coverLimitName+","+rules_disabledReasonText)
				log.info "Response according to business rules: "+rules_applicationRiskId+","+rules_tradingCertificateTypeCode+","+rules_isInvalid+","+rules_isVesselTypeInvalid+","+rules_isGrossTonnageInvalid+","+rules_isPassengerCapacityInvalid+","+rules_isPolicyDateInvalid+","+rules_isCoverLimitInvalid+","+rules_coverLimitName+","+rules_disabledReasonText

				if(postApi_applicationRiskId.toString().equals(rules_applicationRiskId.toString()) && postApi_tradingCertificateTypeCode.toString().toUpperCase().equals(rules_tradingCertificateTypeCode.toString().toUpperCase()) && postApi_isInvalid.toString().toUpperCase().equals(rules_isInvalid.toString().toUpperCase()) && postApi_isVesselTypeInvalid.toString().toUpperCase().equals(rules_isVesselTypeInvalid.toString().toUpperCase()) && postApi_isGrossTonnageInvalid.toString().toUpperCase().equals(rules_isGrossTonnageInvalid.toString().toUpperCase()) && postApi_isPassengerCapacityInvalid.toString().toUpperCase().equals(rules_isPassengerCapacityInvalid.toString().toUpperCase()) && postApi_isPolicyDateInvalid.toString().toUpperCase().equals(rules_isPolicyDateInvalid.toString().toUpperCase()) && postApi_isCoverLimitInvalid.toString().toUpperCase().equals(rules_isCoverLimitInvalid.toString().toUpperCase()) && postApi_coverLimitName.toString().equals(rules_coverLimitName.toString()) )
				{
					compareWriter.println(postApi_applicationRiskId+","+rules_applicationRiskId+","+postApi_tradingCertificateTypeCode+","+rules_tradingCertificateTypeCode+","+postApi_isInvalid+","+rules_isInvalid+","+postApi_isVesselTypeInvalid+","+rules_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+rules_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+rules_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+rules_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+rules_isCoverLimitInvalid+","+postApi_coverLimitName+","+rules_coverLimitName+","+postApi_disabledReasonText+","+rules_disabledReasonText+","+"Test Case Passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(postApi_applicationRiskId+","+rules_applicationRiskId+","+postApi_tradingCertificateTypeCode+","+rules_tradingCertificateTypeCode+","+postApi_isInvalid+","+rules_isInvalid+","+postApi_isVesselTypeInvalid+","+rules_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+rules_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+rules_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+rules_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+rules_isCoverLimitInvalid+","+postApi_coverLimitName+","+rules_coverLimitName+","+postApi_disabledReasonText+","+rules_disabledReasonText+","+"Test Case Passed")
					log.info "Details are not matching hence test case is failed"
				}		
			}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
	counter = counter+1
	log.info "Number of records vertified are : "+counter
}
sqlWriter.flush()
apiWriter.flush()
rulesWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
rulesWriter.flush()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for POST method of Reference By Trading Certificate by Invalid Certificate***********"]]></script></con:config></con:testStep><con:testStep type="groovy" name="POST_HardCodedVesselTypeTest_InvalidTradCerts" id="34486211-e238-4216-a82b-0431f4966e57" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST method of Reference By Trading Certificate by Invalid Certificate************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

//Reading the Business Rules Sheet
def inputStream = new FileInputStream("C:\\APITesting\\TradingCertificateTesting\\TC_BusinessRules_AutomationTesting.xls");
Workbook wb = WorkbookFactory.create(inputStream);
//HSSFWorkbook workbook1 = new HSSFWorkbook (inputStream)
//  Workbook workbook1 = WorkbookFactory.create( inputStream );
//Workbook workbook1 = Workbook.getWorkbook(config) //file containing the data

def ws = wb.getSheet("VesselType_Validation")
def rowCount = ws.getPhysicalNumberOfRows()

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt =
"""
	Use tradingcertificate
	Select Top 5
	RiskId, RiskReference, VesselName, VesselTypeName, GrossTonnage, PassengerCapacity, PolicyReference, 
	PolicyStartDate, PolicyEndDate, CurrencyCode, CoverLimitAmount
	from TradingCertificate TC
	order by TC.PolicyEndDate desc
"""

//	sql_vesselTypeShortCode ="YC"// "PCV"
//	sql_vesselType = "YACHT COMPANY OWNED NO CHARTER"//"PASSENGER CRUISE VESSEL"
//	String gross = 10
//	sql_passengerCarryingCapacity = 11
//	String sql_amount = 50000000.00

vesselTypeShortCode ="BA"//"YC"// "PCV"
vesselType = "ACCOMMODATION BARGE"//"YACHT COMPANY OWNED NO CHARTER"//"PASSENGER CRUISE VESSEL"


def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]
def businessRulesFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\BusinessRulesResponse_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POST_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+".csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]
//def businessRulesFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\BusinessRulesForReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POST_Response_ReferenceByInvalidTradingCertificate_"+vesselTypeShortCode+"_"+vesselType+"_"+newDateTimeString+".csv"]


def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def rulesFile = new File(businessRulesFile[0])
def rulesWriter = rulesFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_applicationRiskId"+","+"SQL_reference"+","+"SQL_vesselTypeShortCode"+","+"SQL_vesselType"+","+"SQL_grossTonnage"+","+"SQL_passengerCarryingCapacity"+","+"SQL_policyReference"+","+"SQL_policyStart"+","+"SQL_policyEnd"+","+"SQL_currencyCode"+","+"SQL_amount")
apiWriter.println("ApplicationRiskId"+","+"Reference"+","+"API_tradingCertificateTypeCode"+","+"API_isInvalid"+","+"API_isVesselTypeInvalid"+","+"API_isGrossTonnageInvalid"+","+"API_isPassengerCapacityInvalid"+","+"API_isPolicyDateInvalid"+","+"API_isCoverLimitInvalid"+","+"API_coverLimitName"+","+"API_disabledReasonText")
rulesWriter.println("ApplicationRiskId"+","+"Reference"+","+"RULES_tradingCertificateTypeCode"+","+"RULES_isInvalid"+","+"RULES_isVesselTypeInvalid"+","+"RULES_isGrossTonnageInvalid"+","+"RULES_isPassengerCapacityInvalid"+","+"RULES_isPolicyDateInvalid"+","+"RULES_isCoverLimitInvalid"+","+"RULES_coverLimitName"+","+"RULES_disabledReasonText")
compareWriter.println("ApplicationRiskId"+","+"API_tradingCertificateTypeCode"+","+"RULES_tradingCertificateTypeCode"+","+"API_isInvalid"+","+"RULES_isInvalid"+","+"API_isVesselTypeInvalid"+","+"RULES_isVesselTypeInvalid"+","+"API_isGrossTonnageInvalid"+","+"RULES_isGrossTonnageInvalid"+","+"API_isPassengerCapacityInvalid"+","+"RULES_isPassengerCapacityInvalid"+","+"API_isPolicyDateInvalid"+","+"RULES_isPolicyDateInvalid"+","+"API_isCoverLimitInvalid"+","+"RULES_isCoverLimitInvalid"+","+"API_coverLimitName"+","+"RULES_coverLimitName"+","+"API_disabledReasonText"+","+"RULES_disabledReasonText"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
	sql_applicationRiskId = row.RiskId
	sql_reference = row.RiskReference
	
	//sql_vesselTypeShortCode = row.VesselName
	//sql_vesselType = row.VesselTypeName
	//String gross = row.GrossTonnage
	//sql_passengerCarryingCapacity = row.PassengerCapacity
	//String sql_amount = row.CoverLimitAmount

	sql_vesselTypeShortCode =vesselTypeShortCode
	sql_vesselType = vesselType
	String gross = 1000
	sql_passengerCarryingCapacity = 12
	String sql_amount = 50000000.00
	
	sql_policyReference = row.PolicyReference
	String sql_policyStart = row.PolicyStartDate
	String sql_policyEnd = row.PolicyEndDate
	sql_currencyCode = row.CurrencyCode

	String sql_limitName = "TestLimit"

	//Converting gross(Object) to Int
	sql_grossTonnage_double = Double.parseDouble(gross);
	int sql_grossTonnage = (Integer) sql_grossTonnage_double;

	//Converting dates to required format
	sql_policyStart=sql_policyStart.replaceAll("\\s", "T");
	sql_policyEnd=sql_policyEnd.replaceAll("\\s", "T");

	//Removing null value of sql_amount
	if(sql_amount == null) {
		sql_amount = 0.00;
	}

	sqlWriter.println(sql_applicationRiskId+","+sql_reference+","+sql_vesselTypeShortCode+","+sql_vesselType+","+sql_grossTonnage+","+sql_passengerCarryingCapacity+","+sql_policyReference+","+sql_policyStart+","+sql_policyEnd+","+sql_currencyCode+","+sql_amount)
	log.info "SQL Response received as : "+sql_applicationRiskId+","+sql_reference+","+sql_vesselTypeShortCode+","+sql_vesselType+","+sql_grossTonnage+","+sql_passengerCarryingCapacity+","+sql_policyReference+","+sql_policyStart+","+sql_policyEnd+","+sql_currencyCode+","+sql_amount

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	def newRequest = """
	[
	  {
	    "id": $sql_applicationRiskId,
	    "name": "Newstring",
	    "reference": $sql_reference,
	    "vesselTypeShortCode": "$sql_vesselTypeShortCode",
	    "vesselType": "$sql_vesselType",
	    "grossTonnage": $sql_grossTonnage,
	    "passengerCarryingCapacity": $sql_passengerCarryingCapacity,
	    "policyReference": $sql_policyReference,
	    "policyStart": "$sql_policyStart",
	    "policyEnd": "$sql_policyEnd",
	    "coverLimits": [
	      {
	        "id": 77,
	        "coverShortName": "Passenger Vess Liab",
	        "limitName": "$sql_limitName",
	        "currencyCode": "$sql_currencyCode",
	        "amount": $sql_amount,
	        "isThePrimaryCoverLimit": true
	      }
	    ]
	  }
	]
	"""

	log.info "Request body for post trading certificate is : "+newRequest

	//Run the test Step with name
	testRunner.testCase.testSteps["POST_RefByTradCertByInvalidCert"].setPropertyValue( "Request", newRequest)
	
	testRunner.runTestStepByName('POST_RefByTradCertByInvalidCert')
	String req='${POST_RefByTradCertByInvalidCert#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["POST_RefByTradCertByInvalidCert"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
			for(int i=0; i<26; i++)
			{ 
				postApi_applicationRiskId = jsonRes.invalidCerts.applicationRiskId[0][i]
				postApi_reference = jsonRes.invalidCerts.reference[0][i]
				postApi_tradingCertificateTypeCode = jsonRes.invalidCerts.tradingCertificateTypeCode[0][i]
				postApi_isInvalid = jsonRes.invalidCerts.isInvalid[0][i]
				postApi_isVesselTypeInvalid = jsonRes.invalidCerts.isVesselTypeInvalid[0][i]
				postApi_isGrossTonnageInvalid = jsonRes.invalidCerts.isGrossTonnageInvalid[0][i]
				postApi_isPassengerCapacityInvalid = jsonRes.invalidCerts.isPassengerCapacityInvalid[0][i]
				postApi_isPolicyDateInvalid = jsonRes.invalidCerts.isPolicyDateInvalid[0][i]
				postApi_isCoverLimitInvalid = jsonRes.invalidCerts.isCoverLimitInvalid[0][i]
				postApi_coverLimitName = jsonRes.invalidCerts.coverLimitName[0][i]
				postApi_disabledReasonText=jsonRes.invalidCerts.disabledReasonText[0][i]

				if(postApi_applicationRiskId == null)
				{
					break;
				}
				
				apiWriter.println(postApi_applicationRiskId+","+postApi_reference+","+postApi_tradingCertificateTypeCode+","+postApi_isInvalid+","+postApi_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+postApi_coverLimitName+","+postApi_disabledReasonText)
				log.info "API response recieved is: "+postApi_applicationRiskId+","+postApi_reference+","+postApi_tradingCertificateTypeCode+","+postApi_isInvalid+","+postApi_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+postApi_coverLimitName+","+postApi_disabledReasonText
				
				rules_applicationRiskId = postApi_applicationRiskId
				rules_tradingCertificateTypeCode = postApi_tradingCertificateTypeCode
				String rules_isInvalid
				String rules_isVesselTypeInvalid
				String rules_isGrossTonnageInvalid
				String rules_isPassengerCapacityInvalid
				String rules_isPolicyDateInvalid
				String rules_isCoverLimitInvalid
				String rules_coverLimitName
				String rules_disabledReasonText

				rules_vesselTypeShortCode = sql_vesselTypeShortCode
				rules_vesselType = sql_vesselType
				
				int vesselTypeRowNo = 0;
				
				for(int j=1; j<rowCount; j++)
				{
					Row vesselRow = ws.getRow(j);
					Cell vesselCell = vesselRow.getCell(2);
					Cell vesselCellCode = vesselRow.getCell(3);
					String vesselType = vesselCell.getStringCellValue().trim();
					String vesselCode = vesselCellCode.getStringCellValue().trim();
					//log.info vesselType
					//log.info vesselCode
					if(vesselType.toString().equals(rules_vesselType.toString()) && vesselCode.toString().equals(rules_vesselTypeShortCode.toString()) )
					{
						vesselTypeRowNo = j;
						break;
					}
				}
				
				Row rowCertType = ws.getRow(0);
				Row vesselRow = ws.getRow(vesselTypeRowNo);
				
				
				for(int m=4; m<30; m++)
				{
					Cell certTypeCell = rowCertType.getCell(m);
					String certTypeCode = certTypeCell.getStringCellValue().trim();
						if(certTypeCode == rules_tradingCertificateTypeCode && rules_tradingCertificateTypeCode == "BBC")
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_grossTonnage <1000)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "true";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_grossTonnage >= 1000)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}						
						else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "PLRIn" || rules_tradingCertificateTypeCode == "PLREx"))
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_passengerCarryingCapacity <12)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "true";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Passenger Capacity "+sql_passengerCarryingCapacity+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_passengerCarryingCapacity >= 12)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Passenger Capacity "+sql_passengerCarryingCapacity+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}
						else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "NWRC"))
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_grossTonnage <300)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "true";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_grossTonnage >= 300)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}

						else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "COE500M" || rules_tradingCertificateTypeCode == "COE500MSPANISH" || rules_tradingCertificateTypeCode == "COEYACHTESPENGLISH" || rules_tradingCertificateTypeCode == "COEYACHTESPSPANISH"))
						{
							Cell vesselValidation = vesselRow.getCell(m);
							if(vesselValidation.getStringCellValue().trim() == "Y")
							{
								if(sql_amount != 500000000.00)
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "true"
									rules_coverLimitName = sql_limitName
									rules_disabledReasonText = "Cover Limit "+"'"+sql_limitName+"'"+" is invalid for "+rules_tradingCertificateTypeCode
								}
								else if(sql_amount == 500000000.00)
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = sql_limitName
									rules_disabledReasonText = "Cover Limit "+"'"+sql_limitName+"'"+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}
							break;
						}

						else if(certTypeCode == rules_tradingCertificateTypeCode)
						{
							Cell vesselValidation = vesselRow.getCell(m);
						
							if(vesselValidation.getStringCellValue().trim() == "N")
							{
								rules_isInvalid = "true";
								rules_isVesselTypeInvalid = "true";
								rules_isGrossTonnageInvalid = "false";
								rules_isPassengerCapacityInvalid = "false";
								rules_isPolicyDateInvalid = "false"
								rules_isCoverLimitInvalid = "false"
								rules_coverLimitName = null
								rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
							}

							else if(vesselValidation.getStringCellValue().trim() == "N")
							{
								rules_isInvalid = "false";
								rules_isVesselTypeInvalid = "false";
								rules_isGrossTonnageInvalid = "false";
								rules_isPassengerCapacityInvalid = "false";
								rules_isPolicyDateInvalid = "false"
								rules_isCoverLimitInvalid = "false"
								rules_coverLimitName = null
								rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is valid for "+rules_tradingCertificateTypeCode
							}
						}
				}

				rulesWriter.println(rules_applicationRiskId+","+rules_tradingCertificateTypeCode+","+rules_isInvalid+","+rules_isVesselTypeInvalid+","+rules_isGrossTonnageInvalid+","+rules_isPassengerCapacityInvalid+","+rules_isPolicyDateInvalid+","+rules_isCoverLimitInvalid+","+rules_coverLimitName+","+rules_disabledReasonText)
				log.info "Response according to business rules: "+rules_applicationRiskId+","+rules_tradingCertificateTypeCode+","+rules_isInvalid+","+rules_isVesselTypeInvalid+","+rules_isGrossTonnageInvalid+","+rules_isPassengerCapacityInvalid+","+rules_isPolicyDateInvalid+","+rules_isCoverLimitInvalid+","+rules_coverLimitName+","+rules_disabledReasonText

				if(postApi_applicationRiskId.toString().equals(rules_applicationRiskId.toString()) && postApi_tradingCertificateTypeCode.toString().toUpperCase().equals(rules_tradingCertificateTypeCode.toString().toUpperCase()) && postApi_isInvalid.toString().toUpperCase().equals(rules_isInvalid.toString().toUpperCase()) && postApi_isVesselTypeInvalid.toString().toUpperCase().equals(rules_isVesselTypeInvalid.toString().toUpperCase()) && postApi_isGrossTonnageInvalid.toString().toUpperCase().equals(rules_isGrossTonnageInvalid.toString().toUpperCase()) && postApi_isPassengerCapacityInvalid.toString().toUpperCase().equals(rules_isPassengerCapacityInvalid.toString().toUpperCase()) && postApi_isPolicyDateInvalid.toString().toUpperCase().equals(rules_isPolicyDateInvalid.toString().toUpperCase()) && postApi_isCoverLimitInvalid.toString().toUpperCase().equals(rules_isCoverLimitInvalid.toString().toUpperCase()) && postApi_coverLimitName.toString().equals(rules_coverLimitName.toString()) )
				{
					compareWriter.println(postApi_applicationRiskId+","+rules_applicationRiskId+","+postApi_tradingCertificateTypeCode+","+rules_tradingCertificateTypeCode+","+postApi_isInvalid+","+rules_isInvalid+","+postApi_isVesselTypeInvalid+","+rules_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+rules_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+rules_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+rules_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+rules_isCoverLimitInvalid+","+postApi_coverLimitName+","+rules_coverLimitName+","+postApi_disabledReasonText+","+rules_disabledReasonText+","+"Test Case Passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(postApi_applicationRiskId+","+rules_applicationRiskId+","+postApi_tradingCertificateTypeCode+","+rules_tradingCertificateTypeCode+","+postApi_isInvalid+","+rules_isInvalid+","+postApi_isVesselTypeInvalid+","+rules_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+rules_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+rules_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+rules_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+rules_isCoverLimitInvalid+","+postApi_coverLimitName+","+rules_coverLimitName+","+postApi_disabledReasonText+","+rules_disabledReasonText+","+"Test Case Passed")
					log.info "Details are not matching hence test case is failed"
				}		
			}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
	counter = counter+1
	log.info "Number of records vertified are : "+counter
}

sqlWriter.flush()
apiWriter.flush()
rulesWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
rulesWriter.flush()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for POST method of Reference By Trading Certificate by Invalid Certificate***********"]]></script></con:config></con:testStep><con:testStep type="groovy" name="POST_AllVesselType_InvalidTradCerts" id="b1e4d3ac-51a3-47f3-b642-ea19e109083d" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST method of Reference By Trading Certificate by Invalid Certificate************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver)

//Reading the Business Rules Sheet
def inputStream = new FileInputStream("C:\\APITesting\\TradingCertificateTesting\\TC_BusinessRules_AutomationTesting.xls");
Workbook wb = WorkbookFactory.create(inputStream);

def ws = wb.getSheet("VesselType_Validation")
def rowCount = ws.getPhysicalNumberOfRows()

for(int k=1; k<rowCount; k++)
{
	Row vesselRow1 = ws.getRow(k);
	Cell vesselCell1 = vesselRow1.getCell(2);
	Cell vesselCellCode1 = vesselRow1.getCell(3);
	String vesselType1 = vesselCell1.getStringCellValue().trim();
	String vesselCode1 = vesselCellCode1.getStringCellValue().trim();
	//log.info vesselRow+" : "+vesselCell+" : "+vesselCellCode+" : "+vesselType+" : "+vesselCode
	log.info "vesselType: "+vesselType1+" vesselCode : "+vesselCode1

	String vesselTypeForFileName=vesselType1.replace("/","_")
	String vesselCodeForFileName=vesselCode1.replace("/","_")
	String sqlstmt =
	"""
	Use tradingcertificate
	Select Top 5
	RiskId, RiskReference, VesselName, VesselTypeName, GrossTonnage, PassengerCapacity, PolicyReference, 
	PolicyStartDate, PolicyEndDate, CurrencyCode, CoverLimitAmount
	from TradingCertificate TC
	order by TC.PolicyEndDate desc
	"""
	def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\InvalidCertificate\\SQL_Response_ReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+".csv"]
	def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\InvalidCertificate\\API_Response_ReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+".csv"]
	def businessRulesFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\InvalidCertificate\\BusinessRulesResponse_ReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+".csv"]
	def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\InvalidCertificate\\Comparision_POST_ReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+".csv"]
	
	//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\InvalidCertificate\\SQL_Response_ReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+"_"+newDateTimeString+".csv"]
	//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\InvalidCertificate\\API_Response_ReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+"_"+newDateTimeString+".csv"]
	//def businessRulesFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\InvalidCertificate\\BusinessRulesForReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+"_"+newDateTimeString+".csv"]
	//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\InvalidCertificate\\Comparision_POST_Response_ReferenceByInvalidTradingCertificate_"+vesselCodeForFileName+"_"+vesselTypeForFileName+"_"+newDateTimeString+".csv"]
	
	def sqlFile = new File(sqlResponseFile[0])
	def sqlWriter = sqlFile.newPrintWriter()
	
	def apiFile = new File(apiResponseFile[0])
	def apiWriter = apiFile.newPrintWriter()
	
	def rulesFile = new File(businessRulesFile[0])
	def rulesWriter = rulesFile.newPrintWriter()
	
	def compareFile = new File(compareReportFile[0])
	def compareWriter = compareFile.newPrintWriter()
	
	sqlWriter.println("SQL_applicationRiskId"+","+"SQL_reference"+","+"SQL_vesselTypeShortCode"+","+"SQL_vesselType"+","+"SQL_grossTonnage"+","+"SQL_passengerCarryingCapacity"+","+"SQL_policyReference"+","+"SQL_policyStart"+","+"SQL_policyEnd"+","+"SQL_currencyCode"+","+"SQL_amount")
	apiWriter.println("ApplicationRiskId"+","+"Reference"+","+"API_tradingCertificateTypeCode"+","+"API_isInvalid"+","+"API_isVesselTypeInvalid"+","+"API_isGrossTonnageInvalid"+","+"API_isPassengerCapacityInvalid"+","+"API_isPolicyDateInvalid"+","+"API_isCoverLimitInvalid"+","+"API_coverLimitName"+","+"API_disabledReasonText")
	rulesWriter.println("ApplicationRiskId"+","+"Reference"+","+"RULES_tradingCertificateTypeCode"+","+"RULES_isInvalid"+","+"RULES_isVesselTypeInvalid"+","+"RULES_isGrossTonnageInvalid"+","+"RULES_isPassengerCapacityInvalid"+","+"RULES_isPolicyDateInvalid"+","+"RULES_isCoverLimitInvalid"+","+"RULES_coverLimitName"+","+"RULES_disabledReasonText")
	compareWriter.println("ApplicationRiskId"+","+"API_tradingCertificateTypeCode"+","+"RULES_tradingCertificateTypeCode"+","+"API_isInvalid"+","+"RULES_isInvalid"+","+"API_isVesselTypeInvalid"+","+"RULES_isVesselTypeInvalid"+","+"API_isGrossTonnageInvalid"+","+"RULES_isGrossTonnageInvalid"+","+"API_isPassengerCapacityInvalid"+","+"RULES_isPassengerCapacityInvalid"+","+"API_isPolicyDateInvalid"+","+"RULES_isPolicyDateInvalid"+","+"API_isCoverLimitInvalid"+","+"RULES_isCoverLimitInvalid"+","+"API_coverLimitName"+","+"RULES_coverLimitName"+","+"API_disabledReasonText"+","+"RULES_disabledReasonText"+","+"Status")
	
	def response= null
	def jsonSlurper=null
	def jsonRes=null
	
	int counter=0;
	
	con.eachRow(sqlstmt)
	{	
		row -> 
		sql_applicationRiskId = row.RiskId
		sql_reference = row.RiskReference
		
		//sql_vesselTypeShortCode = row.VesselName
		//sql_vesselType = row.VesselTypeName
		//String gross = row.GrossTonnage
		//sql_passengerCarryingCapacity = row.PassengerCapacity
		//String sql_amount = row.CoverLimitAmount
	
		sql_vesselTypeShortCode =vesselCode1
		sql_vesselType = vesselType1
		String gross = 1000
		sql_passengerCarryingCapacity = 12
		String sql_amount = 50000000.00
		
		sql_policyReference = row.PolicyReference
		String sql_policyStart = row.PolicyStartDate
		String sql_policyEnd = row.PolicyEndDate
		sql_currencyCode = row.CurrencyCode
	
		String sql_limitName = "TestLimit"
	
		//Converting gross(Object) to Int
		sql_grossTonnage_double = Double.parseDouble(gross);
		int sql_grossTonnage = (Integer) sql_grossTonnage_double;
	
		//Converting dates to required format
		sql_policyStart=sql_policyStart.replaceAll("\\s", "T");
		sql_policyEnd=sql_policyEnd.replaceAll("\\s", "T");
	
		//Removing null value of sql_amount
		if(sql_amount == null) {
			sql_amount = 0.00;
		}
	
		sqlWriter.println(sql_applicationRiskId+","+sql_reference+","+sql_vesselTypeShortCode+","+sql_vesselType+","+sql_grossTonnage+","+sql_passengerCarryingCapacity+","+sql_policyReference+","+sql_policyStart+","+sql_policyEnd+","+sql_currencyCode+","+sql_amount)
		log.info "SQL Response received as : "+sql_applicationRiskId+","+sql_reference+","+sql_vesselTypeShortCode+","+sql_vesselType+","+sql_grossTonnage+","+sql_passengerCarryingCapacity+","+sql_policyReference+","+sql_policyStart+","+sql_policyEnd+","+sql_currencyCode+","+sql_amount
	
		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
	
		def newRequest = """
		[
		  {
		    "id": $sql_applicationRiskId,
		    "name": "Newstring",
		    "reference": $sql_reference,
		    "vesselTypeShortCode": "$sql_vesselTypeShortCode",
		    "vesselType": "$sql_vesselType",
		    "grossTonnage": $sql_grossTonnage,
		    "passengerCarryingCapacity": $sql_passengerCarryingCapacity,
		    "policyReference": $sql_policyReference,
		    "policyStart": "$sql_policyStart",
		    "policyEnd": "$sql_policyEnd",
		    "coverLimits": [
		      {
		        "id": 77,
		        "coverShortName": "Passenger Vess Liab",
		        "limitName": "$sql_limitName",
		        "currencyCode": "$sql_currencyCode",
		        "amount": $sql_amount,
		        "isThePrimaryCoverLimit": true
		      }
		    ]
		  }
		]
		"""
	
		log.info "Request body for post trading certificate is : "+newRequest
	
		//Run the test Step with name
		testRunner.testCase.testSteps["POST_RefByTradCertByInvalidCert"].setPropertyValue( "Request", newRequest)
		
		testRunner.runTestStepByName('POST_RefByTradCertByInvalidCert')
		String req='${POST_RefByTradCertByInvalidCert#Response}'
		response=context.expand(req)
		//log.info "API Response is :"+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)
	
		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["POST_RefByTradCertByInvalidCert"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info("HTTP status code: " + httpStatusCode) 
	
		String error = response
		if(httpStatusCode.equals("200"))
		{	
				for(int i=0; i<26; i++)
				{ 
					postApi_applicationRiskId = jsonRes.invalidCerts.applicationRiskId[0][i]
					postApi_reference = jsonRes.invalidCerts.reference[0][i]
					postApi_tradingCertificateTypeCode = jsonRes.invalidCerts.tradingCertificateTypeCode[0][i]
					postApi_isInvalid = jsonRes.invalidCerts.isInvalid[0][i]
					postApi_isVesselTypeInvalid = jsonRes.invalidCerts.isVesselTypeInvalid[0][i]
					postApi_isGrossTonnageInvalid = jsonRes.invalidCerts.isGrossTonnageInvalid[0][i]
					postApi_isPassengerCapacityInvalid = jsonRes.invalidCerts.isPassengerCapacityInvalid[0][i]
					postApi_isPolicyDateInvalid = jsonRes.invalidCerts.isPolicyDateInvalid[0][i]
					postApi_isCoverLimitInvalid = jsonRes.invalidCerts.isCoverLimitInvalid[0][i]
					postApi_coverLimitName = jsonRes.invalidCerts.coverLimitName[0][i]
					postApi_disabledReasonText=jsonRes.invalidCerts.disabledReasonText[0][i]
	
					if(postApi_applicationRiskId == null)
					{
						break;
					}
					
					apiWriter.println(postApi_applicationRiskId+","+postApi_reference+","+postApi_tradingCertificateTypeCode+","+postApi_isInvalid+","+postApi_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+postApi_coverLimitName+","+postApi_disabledReasonText)
					log.info "API response recieved is: "+postApi_applicationRiskId+","+postApi_reference+","+postApi_tradingCertificateTypeCode+","+postApi_isInvalid+","+postApi_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+postApi_coverLimitName+","+postApi_disabledReasonText
					
					rules_applicationRiskId = postApi_applicationRiskId
					rules_tradingCertificateTypeCode = postApi_tradingCertificateTypeCode
					String rules_isInvalid
					String rules_isVesselTypeInvalid
					String rules_isGrossTonnageInvalid
					String rules_isPassengerCapacityInvalid
					String rules_isPolicyDateInvalid
					String rules_isCoverLimitInvalid
					String rules_coverLimitName
					String rules_disabledReasonText
	
					rules_vesselTypeShortCode = sql_vesselTypeShortCode
					rules_vesselType = sql_vesselType
					
					int vesselTypeRowNo = 0;
					
					for(int j=1; j<rowCount; j++)
					{
						Row vesselRow = ws.getRow(j);
						Cell vesselCell = vesselRow.getCell(2);
						Cell vesselCellCode = vesselRow.getCell(3);
						String vesselType = vesselCell.getStringCellValue().trim();
						String vesselCode = vesselCellCode.getStringCellValue().trim();
						//log.info vesselType
						//log.info vesselCode
						if(vesselType.toString().equals(rules_vesselType.toString()) && vesselCode.toString().equals(rules_vesselTypeShortCode.toString()) )
						{
							vesselTypeRowNo = j;
							break;
						}
					}
					
					Row rowCertType = ws.getRow(0);
					Row vesselRow = ws.getRow(vesselTypeRowNo);
					
					
					for(int m=4; m<30; m++)
					{
						Cell certTypeCell = rowCertType.getCell(m);
						String certTypeCode = certTypeCell.getStringCellValue().trim();
							if(certTypeCode == rules_tradingCertificateTypeCode && rules_tradingCertificateTypeCode == "BBC")
							{
								Cell vesselValidation = vesselRow.getCell(m);
								if(vesselValidation.getStringCellValue().trim() == "Y")
								{
									if(sql_grossTonnage <1000)
									{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "true";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is invalid for "+rules_tradingCertificateTypeCode
									}
									else if(sql_grossTonnage >= 1000)
									{
										rules_isInvalid = "false";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is valid for "+rules_tradingCertificateTypeCode
									}
								}
								else if(vesselValidation.getStringCellValue().trim() == "N")
								{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "true";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
								}
								break;
							}						
							else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "PLRIn" || rules_tradingCertificateTypeCode == "PLREx"))
							{
								Cell vesselValidation = vesselRow.getCell(m);
								if(vesselValidation.getStringCellValue().trim() == "Y")
								{
									if(sql_passengerCarryingCapacity <12)
									{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "true";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Passenger Capacity "+sql_passengerCarryingCapacity+" is invalid for "+rules_tradingCertificateTypeCode
									}
									else if(sql_passengerCarryingCapacity >= 12)
									{
										rules_isInvalid = "false";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Passenger Capacity "+sql_passengerCarryingCapacity+" is valid for "+rules_tradingCertificateTypeCode
									}
								}
								else if(vesselValidation.getStringCellValue().trim() == "N")
								{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "true";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
								}
								break;
							}
							else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "NWRC"))
							{
								Cell vesselValidation = vesselRow.getCell(m);
								if(vesselValidation.getStringCellValue().trim() == "Y")
								{
									if(sql_grossTonnage <300)
									{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "true";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is invalid for "+rules_tradingCertificateTypeCode
									}
									else if(sql_grossTonnage >= 300)
									{
										rules_isInvalid = "false";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Gross Tonnage "+sql_grossTonnage+" is valid for "+rules_tradingCertificateTypeCode
									}
								}
								else if(vesselValidation.getStringCellValue().trim() == "N")
								{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "true";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
								}
								break;
							}
	
							else if(certTypeCode == rules_tradingCertificateTypeCode && (rules_tradingCertificateTypeCode == "COE500M" || rules_tradingCertificateTypeCode == "COE500MSPANISH" || rules_tradingCertificateTypeCode == "COEYACHTESPENGLISH" || rules_tradingCertificateTypeCode == "COEYACHTESPSPANISH"))
							{
								Cell vesselValidation = vesselRow.getCell(m);
								if(vesselValidation.getStringCellValue().trim() == "Y")
								{
									if(sql_amount != 500000000.00)
									{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "true"
										rules_coverLimitName = sql_limitName
										rules_disabledReasonText = "Cover Limit "+"'"+sql_limitName+"'"+" is invalid for "+rules_tradingCertificateTypeCode
									}
									else if(sql_amount == 500000000.00)
									{
										rules_isInvalid = "false";
										rules_isVesselTypeInvalid = "false";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = sql_limitName
										rules_disabledReasonText = "Cover Limit "+"'"+sql_limitName+"'"+" is valid for "+rules_tradingCertificateTypeCode
									}
								}
								else if(vesselValidation.getStringCellValue().trim() == "N")
								{
										rules_isInvalid = "true";
										rules_isVesselTypeInvalid = "true";
										rules_isGrossTonnageInvalid = "false";
										rules_isPassengerCapacityInvalid = "false";
										rules_isPolicyDateInvalid = "false"
										rules_isCoverLimitInvalid = "false"
										rules_coverLimitName = null
										rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
								}
								break;
							}
	
							else if(certTypeCode == rules_tradingCertificateTypeCode)
							{
								Cell vesselValidation = vesselRow.getCell(m);
							
								if(vesselValidation.getStringCellValue().trim() == "N")
								{
									rules_isInvalid = "true";
									rules_isVesselTypeInvalid = "true";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is invalid for "+rules_tradingCertificateTypeCode
								}
	
								else if(vesselValidation.getStringCellValue().trim() == "N")
								{
									rules_isInvalid = "false";
									rules_isVesselTypeInvalid = "false";
									rules_isGrossTonnageInvalid = "false";
									rules_isPassengerCapacityInvalid = "false";
									rules_isPolicyDateInvalid = "false"
									rules_isCoverLimitInvalid = "false"
									rules_coverLimitName = null
									rules_disabledReasonText = "Vessel Type "+"'"+rules_vesselType+"'"+" is valid for "+rules_tradingCertificateTypeCode
								}
							}
					}
	
					rulesWriter.println(rules_applicationRiskId+","+rules_tradingCertificateTypeCode+","+rules_isInvalid+","+rules_isVesselTypeInvalid+","+rules_isGrossTonnageInvalid+","+rules_isPassengerCapacityInvalid+","+rules_isPolicyDateInvalid+","+rules_isCoverLimitInvalid+","+rules_coverLimitName+","+rules_disabledReasonText)
					log.info "Response according to business rules: "+rules_applicationRiskId+","+rules_tradingCertificateTypeCode+","+rules_isInvalid+","+rules_isVesselTypeInvalid+","+rules_isGrossTonnageInvalid+","+rules_isPassengerCapacityInvalid+","+rules_isPolicyDateInvalid+","+rules_isCoverLimitInvalid+","+rules_coverLimitName+","+rules_disabledReasonText
	
					if(postApi_applicationRiskId.toString().equals(rules_applicationRiskId.toString()) && postApi_tradingCertificateTypeCode.toString().toUpperCase().equals(rules_tradingCertificateTypeCode.toString().toUpperCase()) && postApi_isInvalid.toString().toUpperCase().equals(rules_isInvalid.toString().toUpperCase()) && postApi_isVesselTypeInvalid.toString().toUpperCase().equals(rules_isVesselTypeInvalid.toString().toUpperCase()) && postApi_isGrossTonnageInvalid.toString().toUpperCase().equals(rules_isGrossTonnageInvalid.toString().toUpperCase()) && postApi_isPassengerCapacityInvalid.toString().toUpperCase().equals(rules_isPassengerCapacityInvalid.toString().toUpperCase()) && postApi_isPolicyDateInvalid.toString().toUpperCase().equals(rules_isPolicyDateInvalid.toString().toUpperCase()) && postApi_isCoverLimitInvalid.toString().toUpperCase().equals(rules_isCoverLimitInvalid.toString().toUpperCase()) && postApi_coverLimitName.toString().equals(rules_coverLimitName.toString()) )
					{
						compareWriter.println(postApi_applicationRiskId+","+rules_applicationRiskId+","+postApi_tradingCertificateTypeCode+","+rules_tradingCertificateTypeCode+","+postApi_isInvalid+","+rules_isInvalid+","+postApi_isVesselTypeInvalid+","+rules_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+rules_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+rules_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+rules_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+rules_isCoverLimitInvalid+","+postApi_coverLimitName+","+rules_coverLimitName+","+postApi_disabledReasonText+","+rules_disabledReasonText+","+"Test Case Passed")
						log.info "Details are matching hence test case is passed"
					}
					else
					{
						compareWriter.println(postApi_applicationRiskId+","+rules_applicationRiskId+","+postApi_tradingCertificateTypeCode+","+rules_tradingCertificateTypeCode+","+postApi_isInvalid+","+rules_isInvalid+","+postApi_isVesselTypeInvalid+","+rules_isVesselTypeInvalid+","+postApi_isGrossTonnageInvalid+","+rules_isGrossTonnageInvalid+","+postApi_isPassengerCapacityInvalid+","+rules_isPassengerCapacityInvalid+","+postApi_isPolicyDateInvalid+","+rules_isPolicyDateInvalid+","+postApi_isCoverLimitInvalid+","+rules_isCoverLimitInvalid+","+postApi_coverLimitName+","+rules_coverLimitName+","+postApi_disabledReasonText+","+rules_disabledReasonText+","+"Test Case Passed")
						log.info "Details are not matching hence test case is failed"
					}		
				}
		}
		else
		{
			log.info "Failed API response is received : "+response
		}
		counter = counter+1
		log.info "Number of records vertified are : "+counter
	}

	sqlWriter.flush()
	apiWriter.flush()
	rulesWriter.flush()
	compareWriter.flush()
	
	sqlWriter.close()
	apiWriter.close()
	rulesWriter.flush()
	compareWriter.close()
}

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for POST method of Reference By Trading Certificate by Invalid Certificate***********"]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6593104d-025e-45f9-a54a-a8dffa6f1885" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_RiskSelectionTradingCertificatesByRiskReference" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RiskSelectionTradCertsByRiskRef" id="05c1c64a-6a6a-46bd-a295-58bc8b19a7a0"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/riskSelection/tradingCertificates/${#TestCase#riskReference}" methodName="RiskSelectionTradingCertificatesByRiskReference" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RiskSelectionTradCertsByRiskRef" id="e390b377-cb36-4aad-b9b6-d11439f03da2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/riskSelection/tradingCertificates/99999</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="RiskSelectionTradingCertificatesByRiskReference" id="95db9630-5f2b-48be-97d9-b04dfbbfcc63" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.json.*
import groovy.sql.Sql
import java.util.HashMap
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Risk Selection By Trading Certificates By Risk Reference***********"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
"""
use tradingCertificate
--declare
--@RiskRef as int = 684956
SELECT
TOP 200
TC.Type_Id, TC.Id as TradingCertificateId, tc.RiskReference, RT.Name, RT.TypeCode as GroupCode, TC.AddressType_Id, TC.SourceSystem, 
TC.Reference, TC.CurrentStatus, TC.StorageId,  TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
TC.IsRenewal, case when TC.IsRenewal = 1 then 'True'    when TC.IsRenewal = 0 then 'False' else NULL end as IsRenewalFlag, TC.IsYacht,
case when TC.IsYacht = 1 then 'True' when TC.IsYacht = 0 then 'False' else NULL end as IsYachtFlag, 
TC.TradingCertificateVersion as Version, TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,
TC.JointAssuredName, TC.OwnerReference, TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,
TC.PolicyYear, TC.CertificateIssueDate, TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity,
TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,
TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower,
TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList,
TC.Type_Id as TradingCertificateTypeId, RG.Id as TradingCertificateGroupId,
RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode, RT.TypeCode, RT.Name as TypeName,
TC.CertificateIssueDate
from TradingCertificate TC
inner join ref_Type RT on RT.Id=TC.Type_Id
inner join ref_Group RG on RG.Id = RT.Group_Id
inner join 
(SELECT riskreference, type_id, max(tradingcertificateversion) as VersionRef
  FROM [dbo].[TradingCertificate]
--where riskreference = @RiskRef
group by  riskreference, type_id) Cvers
on TC.RiskReference = Cvers.RiskReference and TC.Type_Id = Cvers.Type_Id and TC.TradingCertificateVersion  = Cvers.VersionRef
left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id and BS.IsDeleted = 0
where TC.CurrentStatus='Issued'
--and TC.RiskReference=@RiskRef
order by TC.Id asc, TC.CertificateIssueDate desc
"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_RiskSelectionByTradingCertificatesByRiskReference.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_RiskSelectionByTradingCertificatesByRiskReference.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_RiskSelectionByTradingCertificatesByRiskReference.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_RiskSelectionByTradingCertificatesByRiskReference"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_RiskSelectionByTradingCertificatesByRiskReference"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_Response_RiskSelectionByTradingCertificatesByRiskReference"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_Type_Id"+","+"SQL_TradingCertificateId"+","+"SQL_RiskReference"+","+"SQL_Name"+","+"SQL_GroupCode"+","+"SQL_AddressType_Id"+","+"SQL_SourceSystem"+","+"SQL_Reference"+","+"SQL_CurrentStatus"+","+"SQL_StorageId"+","+"SQL_RiskId"+","+"SQL_PolicyId"+","+"SQL_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"SQL_IsRenewal"+","+"SQL_IsRenewalFlag"+","+"SQL_IsYacht"+","+"SQL_IsYachtFlag"+","+"SQL_Version"+","+"SQL_RiskReference"+","+"SQL_PolicyReference"+","+"SQL_MemberReference"+","+"SQL_MemberType"+","+"SQL_MemberName"+","+"SQL_JointAssuredName"+","+"SQL_OwnerReference"+","+"SQL_OwnerName"+","+"SQL_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"SQL_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"SQL_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"SQL_CcEmailAddress"+","+"SQL_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"SQL_VesselName"+","+"SQL_VesselType"+","+"SQL_VesselTypeName"+","+"SQL_vesselEnteredDate"+","+"SQL_vesselFlag"+","+"SQL_imoNumber"+","+"SQL_distinctiveNumbersOrLetters"+","+"SQL_grossTonnage"+","+"SQL_yearBuilt"+","+"SQL_engineHorsePower"+","+"SQL_model"+","+"SQL_engineNo"+","+"SQL_NominatedStateFlag"+","+"SQL_NominatedStateFlagName"+","+"SQL_portOfRegistry"+","+"SQL_tenderReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"SQL_TypeCode"+","+"SQL_TypeName"+","+"SQL_CertificateIssueDate"+","+"SQL_StateAddressTypeName"+","+"SQL_StateAddressTypeId"+","+"SQL_StateTradingCertificateId"+","+"SQL_StateRiskReference"+","+"SQL_StateAddressId"+","+"SQL_StateAddressName"+","+"SQL_StateAddressLine1"+","+"SQL_StateAddressLine2"+","+"SQL_StateAddressName"+","+"SQL_StateStateOrCounty"+","+"SQL_StateCity"+","+"SQL_StateCountry"+","+"SQL_StatePostCode"+","+"SQL_StateIsPrimaryAddress"+","+"SQL_OwnerAddressTypeName"+","+"SQL_OwnerAddressTypeId"+","+"SQL_OwnerTradingCertificateId"+","+"SQL_OwnerRiskReference"+","+"SQL_OwnerAddressId"+","+"SQL_OwnerAddressName"+","+"SQL_OwnerAddressLine1"+","+"SQL_OwnerAddressLine2"+","+"SQL_OwnerAddressName"+","+"SQL_OwnerStateOrCounty"+","+"SQL_OwnerCity"+","+"SQL_OwnerCountry"+","+"SQL_OwnerPostCode"+","+"SQL_OwnerIsPrimaryAddress"+","+"SQL_BrokerAddressTypeName"+","+"SQL_BrokerAddressTypeId"+","+"SQL_BrokerTradingCertificateId"+","+"SQL_BrokerRiskReference"+","+"SQL_BrokerAddressId"+","+"SQL_BrokerAddressName"+","+"SQL_BrokerAddressLine1"+","+"SQL_BrokerAddressLine2"+","+"SQL_BrokerAddressName"+","+"SQL_BrokerStateOrCounty"+","+"SQL_BrokerCity"+","+"SQL_BrokerCountry"+","+"SQL_BrokerPostCode"+","+"SQL_BrokerIsPrimaryAddress"+","+"SQL_MemberAddressTypeName"+","+"SQL_MemberAddressTypeId"+","+"SQL_MemberTradingCertificateId"+","+"SQL_MemberRiskReference"+","+"SQL_MemberAddressId"+","+"SQL_MemberAddressName"+","+"SQL_MemberAddressLine1"+","+"SQL_MemberAddressLine2"+","+"SQL_MemberAddressName"+","+"SQL_MemberStateOrCounty"+","+"SQL_MemberCity"+","+"SQL_MemberCountry"+","+"SQL_MemberPostCode"+","+"SQL_MemberIsPrimaryAddress"+","+"SQL_JointAssuredAddressTypeName"+","+"SQL_JointAssuredAddressTypeId"+","+"SQL_JointAssuredTradingCertificateId"+","+"SQL_JointAssuredRiskReference"+","+"SQL_JointAssuredAddressId"+","+"SQL_JointAssuredAddressName"+","+"SQL_JointAssuredAddressLine1"+","+"SQL_JointAssuredAddressLine2"+","+"SQL_JointAssuredAddressName"+","+"SQL_JointAssuredStateOrCounty"+","+"SQL_JointAssuredCity"+","+"SQL_JointAssuredCountry"+","+"SQL_JointAssuredPostCode"+","+"SQL_JointAssuredIsPrimaryAddress"+","+"SQL_BranchAddressTypeName"+","+"SQL_BranchAddressTypeId"+","+"SQL_BranchTradingCertificateId"+","+"SQL_BranchRiskReference"+","+"SQL_BranchAddressId"+","+"SQL_BranchAddressName"+","+"SQL_BranchAddressLine1"+","+"SQL_BranchAddressLine2"+","+"SQL_BranchAddressName"+","+"SQL_BranchStateOrCounty"+","+"SQL_BranchCity"+","+"SQL_BranchCountry"+","+"SQL_BranchPostCode"+","+"SQL_BranchIsPrimaryAddress")
apiWriter.println("API_id"+","+"API_addressTypeId"+","+"API_sourceSystem"+","+"API_tradingCertificateId"+","+"API_addressTypeId"+","+"API_sourceSystem"+","+"API_reference"+","+"API_currentStatus"+","+"API_storageId"+","+"API_riskId"+","+"API_policyId"+","+"API_memberPartyId"+","+"API_ownerPartyId"+","+"API_brokerPartyId"+","+"API_isRenewal"+","+"API_isYacht"+","+"API_version"+","+"API_riskReference"+","+"API_policyReference"+","+"API_memberReference"+","+"API_memberType"+","+"API_memberName"+","+"API_jointAssuredName"+","+"API_ownerReference"+","+"API_ownerName"+","+"API_ownerDomicile"+","+"API_ownerEmailAddress"+","+"API_brokerReference"+","+"API_brokerName"+","+"API_brokerEmailAddress"+","+"API_policyYear"+","+"API_certificateIssueDate"+","+"API_emailAddress"+","+"API_ccEmailAddress"+","+"API_effectiveStartDate"+","+"API_effectiveEndDate"+","+"API_passengerCapacity"+","+"API_policyStartDate"+","+"API_policyEndDate"+","+"API_currencyCode"+","+"API_coverLimitAmount"+","+"API_signatoryStateId"+","+"API_vesselName"+","+"API_vesselType"+","+"API_vesselTypeName"+","+"API_vesselEnteredDate"+","+"API_vesselFlag"+","+"API_imoNumber"+","+"API_distinctiveNumbersOrLetters"+","+"API_grossTonnage"+","+"API_yearBuilt"+","+"API_engineHorsePower"+","+"API_trademarkAndEngineModel"+","+"API_model"+","+"API_engineNo"+","+"API_nominatedFlagState"+","+"API_nominatedFlagStateName"+","+"API_portOfRegistry"+","+"API_tenderReferenceList"+","+"API_tenderOutboardReferenceList"+","+"API_tradingCertificateTypeId"+","+"API_tradingCertificateGroupId"+","+"API_tradingCertificateGroupName"+","+"API_tradingCertificateGroupCode"+","+"API_tradingCertificateTypeTypeCode"+","+"API_tradingCertificateTypeTypeName"+","+"API_certificateIssueDate"+","+"API_effectiveStartDate"+","+"API_effectiveEndDate"+","+"API_policyStartDate"+","+"API_policyEndDate"+","+"API_vesselEnteredDate"+","+"API_stateAddressId"+","+"API_stateAddressName"+","+"API_stateAddressLine1"+","+"API_stateAddressLine2"+","+"API_stateAddressLine3"+","+"API_stateAddressStateOrCounty"+","+"API_stateAddressCity"+","+"API_stateAddressCountry"+","+"API_stateAddressPostCode"+","+"API_stateAddressPrimaryAddress"+","+"API_ownerAddressId"+","+"API_ownerAddressName"+","+"API_ownerAddressLine1"+","+"API_ownerAddressLine2"+","+"API_ownerAddressLine3"+","+"API_ownerAddressStateOrCounty"+","+"API_ownerAddressCity"+","+"API_ownerAddressCountry"+","+"API_ownerAddressPostCode"+","+"API_ownerAddressPrimaryAddress"+","+"API_brokerAddressId"+","+"API_brokerAddressName"+","+"API_brokerAddressLine1"+","+"API_brokerAddressLine2"+","+"API_brokerAddressLine3"+","+"API_brokerAddressStateOrCounty"+","+"API_brokerAddressCity"+","+"API_brokerAddressCountry"+","+"API_brokerAddressPostCode"+","+"API_brokerAddressPrimaryAddress"+","+"API_memberAddressId"+","+"API_memberAddressName"+","+"API_memberAddressLine1"+","+"API_memberAddressLine2"+","+"API_memberAddressLine3"+","+"API_memberAddressStateOrCounty"+","+"API_memberAddressCity"+","+"API_memberAddressCountry"+","+"API_memberAddressPostCode"+","+"API_memberAddressPrimaryAddress"+","+"API_jointAssuredAddressId"+","+"API_jointAssuredAddressName"+","+"API_jointAssuredAddressLine1"+","+"API_jointAssuredAddressLine2"+","+"API_jointAssuredAddressLine3"+","+"API_jointAssuredAddressStateOrCounty"+","+"API_jointAssuredAddressCity"+","+"API_jointAssuredAddressCountry"+","+"API_jointAssuredAddressPostCode"+","+"API_jointAssuredAddressPrimaryAddress"+","+"API_branchAddressId"+","+"API_branchAddressName"+","+"API_branchAddressLine1"+","+"API_branchAddressLine2"+","+"API_branchAddressLine3"+","+"API_branchAddressStateOrCounty"+","+"API_branchAddressCity"+","+"API_branchAddressCountry"+","+"API_branchAddressPostCode"+","+"API_branchAddressPrimaryAddress")
compareWriter.println("SQL_TradingCertificateGroupId"+","+"API_id"+","+"SQL_TradingCertificateGroupName"+","+"API_name"+","+"SQL_TradingCertificateGroupCode"+","+"API_groupCode"+","+"SQL_AddressType_Id"+","+"API_addressTypeId"+","+"SQL_TradingCertificateId"+","+"API_tradingCertificateId"+","+"SQL_SourceSystem"+","+"API_sourceSystem"+","+"SQL_Reference"+","+"API_reference"+","+"SQL_CurrentStatus"+","+"API_currentStatus"+","+"SQL_StorageId"+","+"API_storageId"+","+"SQL_RiskId"+","+"API_riskId"+","+"SQL_PolicyId"+","+"API_policyId"+","+"SQL_MemberPartyId"+","+"API_memberPartyId"+","+"SQL_OwnerPartyId"+","+"API_ownerPartyId"+","+"SQL_BrokerPartyId"+","+"API_brokerPartyId"+","+"SQL_IsRenewalFlag"+","+"API_isRenewal"+","+"SQL_IsYachtFlag"+","+"API_isYacht"+","+"SQL_Version"+","+"API_version"+","+"SQL_RiskReference"+","+"API_riskReference"+","+"SQL_PolicyReference"+","+"API_policyReference"+","+"SQL_MemberReference"+","+"API_memberReference"+","+"SQL_MemberType"+","+"API_memberType"+","+"SQL_MemberName"+","+"API_memberName"+","+"SQL_JointAssuredName"+","+"API_jointAssuredName"+","+"SQL_OwnerReference"+","+"API_ownerReference"+","+"SQL_OwnerName"+","+"API_ownerName"+","+"SQL_OwnerDomicile"+","+"API_ownerDomicile"+","+"SQL_OwnerEmailAddress"+","+"API_ownerEmailAddress"+","+"SQL_BrokerReference"+","+"API_brokerReference"+","+"SQL_BrokerName"+","+"API_brokerName"+","+"SQL_BrokerEmailAddress"+","+"API_brokerEmailAddress"+","+"SQL_PolicyYear"+","+"API_policyYear"+","+"SQL_EmailAddress"+","+"API_emailAddress"+","+"SQL_CcEmailAddress"+","+"API_ccEmailAddress"+","+"SQL_PassengerCapacity"+","+"API_passengerCapacity"+","+"SQL_CurrencyCode"+","+"API_currencyCode"+","+"SQL_CoverLimitAmount"+","+"API_coverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"API_signatoryStateId"+","+"SQL_VesselName"+","+"API_vesselName"+","+"SQL_VesselType"+","+"API_vesselType"+","+"SQL_VesselTypeName"+","+"API_vesselTypeName"+","+"SQL_vesselFlag"+","+"API_vesselFlag"+","+"SQL_imoNumber"+","+"API_imoNumber"+","+"SQL_distinctiveNumbersOrLetters"+","+"API_distinctiveNumbersOrLetters"+","+"SQL_grossTonnage"+","+"API_grossTonnage"+","+"SQL_yearBuilt"+","+"API_yearBuilt"+","+"SQL_engineHorsePower"+","+"API_engineHorsePower"+","+"SQL_model"+","+"API_model"+","+"SQL_engineNo"+","+"API_engineNo"+","+"SQL_NominatedStateFlag"+","+"API_nominatedFlagState"+","+"SQL_NominatedStateFlagName"+","+"API_nominatedFlagStateName"+","+"SQL_portOfRegistry"+","+"API_portOfRegistry"+","+"SQL_tenderReferenceList"+","+"API_tenderReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"API_tradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"API_tradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"API_tradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"API_tradingCertificateGroupCode"+","+"SQL_TypeCode"+","+"API_tradingCertificateTypeTypeCode"+","+"SQL_TypeName"+","+"API_tradingCertificateTypeTypeName"+","+"API_stateAddressId"+","+"SQL_StateAddressId"+","+"API_stateAddressName"+","+"SQL_StateAddressName"+","+"API_stateAddressLine1"+","+"SQL_StateAddressLine1"+","+"API_stateAddressLine2"+","+"SQL_StateAddressLine2"+","+"API_stateAddressLine3"+","+"SQL_StateAddressLine3"+","+"API_stateAddressStateOrCounty"+","+"SQL_StateStateOrCounty"+","+"API_stateAddressCity"+","+"SQL_StateCity"+","+"API_stateAddressCountry"+","+"SQL_StateCountry"+","+"API_stateAddressPostCode"+","+"SQL_StatePostCode"+","+"API_stateAddressPrimaryAddress"+","+"SQL_StateIsPrimaryAddress"+","+"API_ownerAddressId"+","+"SQL_OwnerAddressId"+","+"API_ownerAddressName"+","+"SQL_OwnerAddressName"+","+"API_ownerAddressLine1"+","+"SQL_OwnerAddressLine1"+","+"API_ownerAddressLine2"+","+"SQL_OwnerAddressLine2"+","+"API_ownerAddressLine3"+","+"SQL_OwnerAddressLine3"+","+"API_ownerAddressStateOrCounty"+","+"SQL_OwnerStateOrCounty"+","+"API_ownerAddressCity"+","+"SQL_OwnerCity"+","+"API_ownerAddressCountry"+","+"SQL_OwnerCountry"+","+"API_ownerAddressPostCode"+","+"SQL_OwnerPostCode"+","+"API_ownerAddressPrimaryAddress"+","+"SQL_OwnerIsPrimaryAddress"+","+"API_brokerAddressId"+","+"SQL_BrokerAddressId"+","+"API_brokerAddressName"+","+"SQL_BrokerAddressName"+","+"API_brokerAddressLine1"+","+"SQL_BrokerAddressLine1"+","+"API_brokerAddressLine2"+","+"SQL_BrokerAddressLine2"+","+"API_brokerAddressLine3"+","+"SQL_BrokerAddressLine3"+","+"API_brokerAddressStateOrCounty"+","+"SQL_BrokerStateOrCounty"+","+"API_brokerAddressCity"+","+"SQL_BrokerCity"+","+"API_brokerAddressCountry"+","+"SQL_BrokerCountry"+","+"API_brokerAddressPostCode"+","+"SQL_BrokerPostCode"+","+"API_brokerAddressPrimaryAddress"+","+"SQL_BrokerIsPrimaryAddress"+","+"API_memberAddressId"+","+"SQL_MemberAddressId"+","+"API_memberAddressName"+","+"SQL_MemberAddressName"+","+"API_memberAddressLine1"+","+"SQL_MemberAddressLine1"+","+"API_memberAddressLine2"+","+"SQL_MemberAddressLine2"+","+"API_memberAddressLine3"+","+"SQL_MemberAddressLine3"+","+"API_memberAddressStateOrCounty"+","+"SQL_MemberStateOrCounty"+","+"API_memberAddressCity"+","+"SQL_MemberCity"+","+"API_memberAddressCountry"+","+"SQL_MemberCountry"+","+"API_memberAddressPostCode"+","+"SQL_MemberPostCode"+","+"API_memberAddressPrimaryAddress"+","+"SQL_MemberIsPrimaryAddress"+","+"API_jointAssuredAddressId"+","+"SQL_JointAssuredAddressId"+","+"API_jointAssuredAddressName"+","+"SQL_JointAssuredAddressName"+","+"API_jointAssuredAddressLine1"+","+"SQL_JointAssuredAddressLine1"+","+"API_jointAssuredAddressLine2"+","+"SQL_JointAssuredAddressLine2"+","+"API_jointAssuredAddressLine3"+","+"SQL_JointAssuredAddressLine3"+","+"API_jointAssuredAddressStateOrCounty"+","+"SQL_JointAssuredStateOrCounty"+","+"API_jointAssuredAddressCity"+","+"SQL_JointAssuredCity"+","+"API_jointAssuredAddressCountry"+","+"SQL_JointAssuredCountry"+","+"API_jointAssuredAddressPostCode"+","+"SQL_JointAssuredPostCode"+","+"API_jointAssuredAddressPrimaryAddress"+","+"SQL_JointAssuredIsPrimaryAddress"+","+"API_branchAddressId"+","+"SQL_BranchAddressId"+","+"API_branchAddressName"+","+"SQL_BranchAddressName"+","+"API_branchAddressLine1"+","+"SQL_BranchAddressLine1"+","+"API_branchAddressLine2"+","+"SQL_BranchAddressLine2"+","+"API_branchAddressLine3"+","+"SQL_BranchAddressLine3"+","+"API_branchAddressStateOrCounty"+","+"SQL_BranchStateOrCounty"+","+"API_branchAddressCity"+","+"SQL_BranchCity"+","+"API_branchAddressCountry"+","+"SQL_BranchCountry"+","+"API_branchAddressPostCode"+","+"SQL_BranchPostCode"+","+"API_branchAddressPrimaryAddress"+","+"SQL_BranchIsPrimaryAddress"+","+"Test Case is Status")

def response= null
def jsonSlurper=null
def jsonRes=null
String field=null
int counter=0

def rows=con.rows(sqlstmt)  
int db_size=rows.size

con.eachRow(sqlstmt)
{	
	row ->
	sql_Type_Id=row.Type_Id
	sql_TradingCertificateId=row.TradingCertificateId
	sql_RiskReference=row.RiskReference
	sql_Name=row.Name
	sql_GroupCode=row.GroupCode
	sql_AddressType_Id=row.AddressType_Id
	sql_SourceSystem=row.SourceSystem
	sql_Reference=row.Reference
	sql_CurrentStatus=row.CurrentStatus
	sql_StorageId=row.StorageId
	sql_RiskId=row.RiskId
	sql_PolicyId=row.PolicyId
	sql_MemberPartyId=row.MemberPartyId
	sql_OwnerPartyId=row.OwnerPartyId
	sql_BrokerPartyId=row.BrokerPartyId
	sql_IsRenewal=row.IsRenewal
	sql_IsRenewalFlag=row.IsRenewalFlag
	sql_IsYacht=row.IsYacht
	sql_IsYachtFlag=row.IsYachtFlag
	sql_Version=row.Version
	sql_RiskReference=row.RiskReference
	sql_PolicyReference=row.PolicyReference
	sql_MemberReference=row.MemberReference
	sql_MemberType=row.MemberType
	sql_MemberName=row.MemberName
	sql_MemberName = removeComma(sql_MemberName.toString())
	sql_JointAssuredName=row.JointAssuredName
	sql_JointAssuredName = removeComma(sql_JointAssuredName.toString())
	sql_OwnerReference=row.OwnerReference
	sql_OwnerName=row.OwnerName
	sql_OwnerName = removeComma(sql_OwnerName.toString())
	sql_OwnerDomicile=row.OwnerDomicile
	sql_OwnerEmailAddress=row.OwnerEmailAddress
	sql_BrokerReference=row.BrokerReference
	sql_BrokerName=row.BrokerName
	sql_BrokerName = removeComma(sql_BrokerName.toString())
	sql_BrokerEmailAddress=row.BrokerEmailAddress
	sql_PolicyYear=row.PolicyYear
	sql_CertificateIssueDate=row.CertificateIssueDate
	sql_EmailAddress=row.EmailAddress
	sql_CcEmailAddress=row.CcEmailAddress
	sql_EffectiveStartDate=row.EffectiveStartDate
	sql_EffectiveEndDate=row.EffectiveEndDate
	sql_PassengerCapacity=row.PassengerCapacity
	sql_PolicyStartDate=row.PolicyStartDate
	sql_PolicyEndDate=row.PolicyEndDate
	sql_CurrencyCode=row.CurrencyCode
	sql_CoverLimitAmount=row.CoverLimitAmount
	sql_CoverLimitAmount = removeDotFromCurrency(sql_CoverLimitAmount.toString())
	sql_SignatoryState_Id=row.SignatoryState_Id
	sql_VesselName=row.VesselName
	sql_VesselName = removeComma(sql_VesselName.toString())
	sql_VesselType=row.VesselType
	sql_VesselTypeName=row.VesselTypeName
	sql_vesselEnteredDate=row.vesselEnteredDate
	sql_vesselFlag=row.vesselFlag
	sql_imoNumber=row.imoNumber
	sql_distinctiveNumbersOrLetters=row.distinctiveNumbersOrLetters
	sql_grossTonnage=row.grossTonnage
	sql_yearBuilt=row.yearBuilt
	sql_engineHorsePower=row.engineHorsePower
	sql_model=row.model
	sql_engineNo=row.engineNo
	sql_NominatedStateFlag=row.NominatedStateFlag
	sql_NominatedStateFlagName=row.NominatedStateFlagName
	sql_NominatedStateFlagName = removeComma(sql_NominatedStateFlagName.toString())
	sql_portOfRegistry=row.portOfRegistry
	sql_portOfRegistry = removeComma(sql_portOfRegistry.toString())
	sql_tenderReferenceList=row.tenderReferenceList
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateGroupId=row.TradingCertificateGroupId
	sql_TradingCertificateGroupName=row.TradingCertificateGroupName
	sql_TradingCertificateGroupCode=row.TradingCertificateGroupCode
	sql_TypeCode=row.TypeCode
	sql_TypeName=row.TypeName
	sql_CertificateIssueDate=row.CertificateIssueDate

	int getRiskRef =sql_RiskReference.toInteger()
	int getTradCertId =sql_TradingCertificateId.toInteger()
	
	String getStateAddressSQL =
	"""						
	declare
	@riskRef as int = """+getRiskRef+""",
	@tradCertId as int = """+getTradCertId+"""
	select 
	top 1
	TC.Type_Id, RT.Name,
	RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
	ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
	ASN.PrimaryAddress,
	case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
	from TradingCertificate TC
	inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
	inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
	inner join ref_Type RT on RT.Id = TC.Type_Id
	where ASN.IsDeleted=0 and RAT.Name ='SIGNATORYSTATE'
	 and TC.RiskReference = @riskRef
	 and TC.Id=@tradCertId
	 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
	"""
	con.eachRow(getStateAddressSQL)
	{
		getRows->
		sql_StateAddressTypeName=getRows.AddressTypeName
		sql_StateAddressTypeId=getRows.AddressTypeId
		sql_StateTradingCertificateId=getRows.TradingCertificateId
		sql_StateRiskReference=getRows.RiskReference
		sql_StateAddressId=getRows.AddressId
		sql_StateAddressName=getRows.AddressName
		sql_StateAddressName = removeComma(sql_StateAddressName.toString())
		sql_StateAddressLine1=getRows.AddressLine1
		sql_StateAddressLine1 = removeComma(sql_StateAddressLine1.toString())
		sql_StateAddressLine2=getRows.AddressLine2
		sql_StateAddressLine2 = removeComma(sql_StateAddressLine2.toString())
		sql_StateAddressLine3=getRows.AddressLine3
		sql_StateAddressLine3 = removeComma(sql_StateAddressLine3.toString())
		sql_StateStateOrCounty=getRows.StateOrCounty
		sql_StateStateOrCounty = removeComma(sql_StateStateOrCounty.toString())
		sql_StateCity=getRows.City
		sql_StateCity = removeComma(sql_StateCity.toString())
		sql_StateCountry=getRows.Country
		sql_StateCountry = removeComma(sql_StateCountry.toString())
		sql_StatePostCode=getRows.PostCode
		sql_StatePostCode = removeComma(sql_StatePostCode.toString())
		sql_StateIsPrimaryAddress=getRows.IsPrimaryAddress
		//log.info "State Address is received as ==> "+sql_StateAddressTypeName+","+sql_StateAddressTypeId+","+sql_StateTradingCertificateId+","+sql_StateRiskReference+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress
	}

	String getOwnerAddressSQL =
	"""
	declare
	@riskRef as int = """+getRiskRef+""",
	@tradCertId as int = """+getTradCertId+"""
	select 
	top 1
	TC.Type_Id, RT.Name,
	RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
	ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
	ASN.PrimaryAddress,
	case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
	from TradingCertificate TC
	inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
	inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
	inner join ref_Type RT on RT.Id = TC.Type_Id
	where ASN.IsDeleted=0 and RAT.Name ='OWNER'
	 and TC.RiskReference = @riskRef
	 and TC.Id=@tradCertId
	 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
	"""
	con.eachRow(getOwnerAddressSQL)
	{
		getRows->
		sql_OwnerAddressTypeName=getRows.AddressTypeName
		sql_OwnerAddressTypeId=getRows.AddressTypeId
		sql_OwnerTradingCertificateId=getRows.TradingCertificateId
		sql_OwnerRiskReference=getRows.RiskReference
		sql_OwnerAddressId=getRows.AddressId
		sql_OwnerAddressName=getRows.AddressName
		sql_OwnerAddressName = removeComma(sql_OwnerAddressName.toString())
		sql_OwnerAddressLine1=getRows.AddressLine1
		sql_OwnerAddressLine1 = removeComma(sql_OwnerAddressLine1.toString())
		sql_OwnerAddressLine2=getRows.AddressLine2
		sql_OwnerAddressLine2 = removeComma(sql_OwnerAddressLine2.toString())
		sql_OwnerAddressLine3=getRows.AddressLine3
		sql_OwnerAddressLine3 = removeComma(sql_OwnerAddressLine3.toString())
		sql_OwnerStateOrCounty=getRows.StateOrCounty
		sql_OwnerStaterOrCounty = removeComma(sql_OwnerStateOrCounty.toString())
		sql_OwnerCity=getRows.City
		sql_OwnerCity = removeComma(sql_OwnerCity.toString())
		sql_OwnerCountry=getRows.Country
		sql_OwnerCountry = removeComma(sql_OwnerCountry.toString())
		sql_OwnerPostCode=getRows.PostCode
		sql_OwnerPostCode = removeComma(sql_OwnerPostCode.toString())
		sql_OwnerIsPrimaryAddress=getRows.IsPrimaryAddress
		//log.info "Owner Address is received as ==> "+sql_OwnerAddressTypeName+","+sql_OwnerAddressTypeId+","+sql_OwnerTradingCertificateId+","+sql_OwnerRiskReference+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressName+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress	
	}

	String getBrokerAddressSQL =
	"""
	declare
	@riskRef as int = """+getRiskRef+""",
	@tradCertId as int = """+getTradCertId+"""
	select 
	top 1
	TC.Type_Id, RT.Name,
	RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
	ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
	ASN.PrimaryAddress,
	case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
	from TradingCertificate TC
	inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
	inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
	inner join ref_Type RT on RT.Id = TC.Type_Id
	where ASN.IsDeleted=0 and RAT.Name ='BROKER'
	 and TC.RiskReference = @riskRef
	 and TC.Id=@tradCertId
	 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
	"""
	con.eachRow(getBrokerAddressSQL)
	{
		getRows->
		sql_BrokerAddressTypeName=getRows.AddressTypeName
		sql_BrokerAddressTypeId=getRows.AddressTypeId
		sql_BrokerTradingCertificateId=getRows.TradingCertificateId
		sql_BrokerRiskReference=getRows.RiskReference
		sql_BrokerAddressId=getRows.AddressId
		sql_BrokerAddressName=getRows.AddressName
		sql_BrokerAddressName = removeComma(sql_BrokerAddressName.toString())
		sql_BrokerAddressLine1=getRows.AddressLine1
		sql_BrokerAddressLine1 = removeComma(sql_BrokerAddressLine1.toString())
		sql_BrokerAddressLine2=getRows.AddressLine2
		sql_BrokerAddressLine2 = removeComma(sql_BrokerAddressLine2.toString())
		sql_BrokerAddressLine3=getRows.AddressLine3
		sql_BrokerAddressLine3 = removeComma(sql_BrokerAddressLine3.toString())
		sql_BrokerStateOrCounty=getRows.StateOrCounty
		sql_BrokerStaterOrCounty = removeComma(sql_BrokerStateOrCounty.toString())
		sql_BrokerCity=getRows.City
		sql_BrokerCity = removeComma(sql_BrokerCity.toString())
		sql_BrokerCountry=getRows.Country
		sql_BrokerCountry = removeComma(sql_BrokerCountry.toString())
		sql_BrokerPostCode=getRows.PostCode
		sql_BrokerPostCode = removeComma(sql_BrokerPostCode.toString())
		sql_BrokerIsPrimaryAddress=getRows.IsPrimaryAddress
		//log.info "Broker Address is received as ==> "+sql_BrokerAddressTypeName+","+sql_BrokerAddressTypeId+","+sql_BrokerTradingCertificateId+","+sql_BrokerRiskReference+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressName+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress	
	}

		String getMemberAddressSQL =
	"""
	declare
	@riskRef as int = """+getRiskRef+""",
	@tradCertId as int = """+getTradCertId+"""
	select 
	top 1
	TC.Type_Id, RT.Name,
	RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
	ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
	ASN.PrimaryAddress,
	case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
	from TradingCertificate TC
	inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
	inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
	inner join ref_Type RT on RT.Id = TC.Type_Id
	where ASN.IsDeleted=0 and RAT.Name ='MEMBER'
	 and TC.RiskReference = @riskRef
	 and TC.Id=@tradCertId
	 union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
	"""
	con.eachRow(getMemberAddressSQL)
	{
		getRows->
		sql_MemberAddressTypeName=getRows.AddressTypeName
		sql_MemberAddressTypeId=getRows.AddressTypeId
		sql_MemberTradingCertificateId=getRows.TradingCertificateId
		sql_MemberRiskReference=getRows.RiskReference
		sql_MemberAddressId=getRows.AddressId
		sql_MemberAddressName=getRows.AddressName
		sql_MemberAddressName = removeComma(sql_MemberAddressName.toString())
		sql_MemberAddressLine1=getRows.AddressLine1
		sql_MemberAddressLine1 = removeComma(sql_MemberAddressLine1.toString())
		sql_MemberAddressLine2=getRows.AddressLine2
		sql_MemberAddressLine2 = removeComma(sql_MemberAddressLine2.toString())
		sql_MemberAddressLine3=getRows.AddressLine3
		sql_MemberAddressLine3 = removeComma(sql_MemberAddressLine3.toString())
		sql_MemberStateOrCounty=getRows.StateOrCounty
		sql_MemberStateOrCounty = removeComma(sql_MemberStateOrCounty.toString())
		sql_MemberCity=getRows.City
		sql_MemberCity = removeComma(sql_MemberCity.toString())
		sql_MemberCountry=getRows.Country
		sql_MemberCountry = removeComma(sql_MemberCountry.toString())
		sql_MemberPostCode=getRows.PostCode
		sql_MemberPostCode = removeComma(sql_MemberPostCode.toString())
		sql_MemberIsPrimaryAddress=getRows.IsPrimaryAddress
		//log.info "Member Address is received as ==> "+sql_MemberAddressTypeName+","+sql_MemberAddressTypeId+","+sql_MemberTradingCertificateId+","+sql_MemberRiskReference+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressName+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress	
	}
	String getJointAssuredAddressSQL =
	"""
	declare
	@riskRef as int = """+getRiskRef+""",
	@tradCertId as int = """+getTradCertId+"""
	select 
	top 1
	TC.Type_Id, RT.Name,
	RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
	ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
	ASN.PrimaryAddress,
	case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
	from TradingCertificate TC
	inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
	inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
	inner join ref_Type RT on RT.Id = TC.Type_Id
	where ASN.IsDeleted=0 and RAT.Name ='JOINTASSURED'
	and TC.RiskReference = @riskRef
	and TC.Id=@tradCertId
	union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
	"""
	con.eachRow(getJointAssuredAddressSQL)
	{
		getRows->
		sql_JointAssuredAddressTypeName=getRows.AddressTypeName
		sql_JointAssuredAddressTypeId=getRows.AddressTypeId
		sql_JointAssuredTradingCertificateId=getRows.TradingCertificateId
		sql_JointAssuredRiskReference=getRows.RiskReference
		sql_JointAssuredAddressId=getRows.AddressId
		sql_JointAssuredAddressName=getRows.AddressName
		sql_JointAssuredAddressName = removeComma(sql_JointAssuredAddressName.toString())
		sql_JointAssuredAddressLine1=getRows.AddressLine1
		sql_JointAssuredAddressLine1 = removeComma(sql_JointAssuredAddressLine1.toString())
		sql_JointAssuredAddressLine2=getRows.AddressLine2
		sql_JointAssuredAddressLine2 = removeComma(sql_JointAssuredAddressLine2.toString())
		sql_JointAssuredAddressLine3=getRows.AddressLine3
		sql_JointAssuredAddressLine3 = removeComma(sql_JointAssuredAddressLine3.toString())
		sql_JointAssuredStateOrCounty=getRows.StateOrCounty
		sql_JointAssuredStaterOrCounty = removeComma(sql_JointAssuredStateOrCounty.toString())
		sql_JointAssuredCity=getRows.City
		sql_JointAssuredCity = removeComma(sql_JointAssuredCity.toString())
		sql_JointAssuredCountry=getRows.Country
		sql_JointAssuredCountry = removeComma(sql_JointAssuredCountry.toString())
		sql_JointAssuredPostCode=getRows.PostCode
		sql_JointAssuredPostCode = removeComma(sql_JointAssuredPostCode.toString())
		sql_JointAssuredIsPrimaryAddress=getRows.IsPrimaryAddress
		//log.info "JointAssured Address is received as ==> "+sql_JointAssuredAddressTypeName+","+sql_JointAssuredAddressTypeId+","+sql_JointAssuredTradingCertificateId+","+sql_JointAssuredRiskReference+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressName+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress	
	}

	String getBranchAddressSQL =
	"""
	declare
	@riskRef as int = """+getRiskRef+""",
	@tradCertId as int = """+getTradCertId+"""
	select 
	top 1
	TC.Type_Id, RT.Name,
	RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
	ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
	ASN.PrimaryAddress,
	case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
	from TradingCertificate TC
	inner join AddressSnapshot ASN on TC.Id = ASN.TradingCertificate_Id
	inner join ref_AddressType RAT on ASN.AddressType_Id =RAT.Id
	inner join ref_Type RT on RT.Id = TC.Type_Id
	where ASN.IsDeleted=0 and RAT.Name ='BRANCH'
	and TC.RiskReference = @riskRef
	and TC.Id=@tradCertId
	union select all null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
	"""
	con.eachRow(getBranchAddressSQL)
	{
		getRows->
		sql_BranchAddressTypeName=getRows.AddressTypeName
		sql_BranchAddressTypeId=getRows.AddressTypeId
		sql_BranchTradingCertificateId=getRows.TradingCertificateId
		sql_BranchRiskReference=getRows.RiskReference
		sql_BranchAddressId=getRows.AddressId
		sql_BranchAddressName=getRows.AddressName
		sql_BranchAddressName = removeComma(sql_BranchAddressName.toString())
		sql_BranchAddressLine1=getRows.AddressLine1
		sql_BranchAddressLine1 = removeComma(sql_BranchAddressLine1.toString())
		sql_BranchAddressLine2=getRows.AddressLine2
		sql_BranchAddressLine2 = removeComma(sql_BranchAddressLine2.toString())
		sql_BranchAddressLine3=getRows.AddressLine3
		sql_BranchAddressLine3 = removeComma(sql_BranchAddressLine3.toString())
		sql_BranchStateOrCounty=getRows.StateOrCounty
		sql_BranchStaterOrCounty = removeComma(sql_BranchStateOrCounty.toString())
		sql_BranchCity=getRows.City
		sql_BranchCity = removeComma(sql_BranchCity.toString())
		sql_BranchCountry=getRows.Country
		sql_BranchCountry = removeComma(sql_BranchCountry.toString())
		sql_BranchPostCode=getRows.PostCode
		sql_BranchPostCode = removeComma(sql_BranchPostCode.toString())
		sql_BranchIsPrimaryAddress=getRows.IsPrimaryAddress
		//log.info "Branch Address is received as ==> "+sql_BranchAddressTypeName+","+sql_BranchAddressTypeId+","+sql_BranchTradingCertificateId+","+sql_BranchRiskReference+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressName+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress	
	}

	//sqlWriter.println(sql_Type_Id+","+sql_TradingCertificateId+","+sql_RiskReference+","+sql_Name+","+sql_GroupCode+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TypeCode+","+sql_TypeName+","+sql_CertificateIssueDate)
	//log.info "SQL Response received as ==>"+sql_Type_Id+","+sql_TradingCertificateId+","+sql_RiskReference+","+sql_Name+","+sql_GroupCode+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TypeCode+","+sql_TypeName+","+sql_CertificateIssueDate

	//Set Id as parameter to test case level
	String riskReference = sql_RiskReference
	testRunner.testCase.setPropertyValue("riskReference", riskReference)
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('RiskSelectionTradCertsByRiskRef')
	String req='${RiskSelectionTradCertsByRiskRef#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)	

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RiskSelectionTradCertsByRiskRef"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	
	String error = response
	if(httpStatusCode.equals("200"))
	{
		def json = new JsonSlurper().parseText(response)
		//log.info "Json TC length---------->"+json.tradingCertificates.size()
		//log.info "Json Id length---------->"+json.id.size()
		//log.info "Json tradingCertificates length---------->"+json.tradingCertificates.size()

		int myCount=0;
		for (int i=0; i<json.tradingCertificates.size(); i++)
		{
			int tcIdCount = json.tradingCertificates[i].id.size().toInteger()
			for (int j=0; j<json.tradingCertificates[i].id.size(); j++)
			{
				if(json.tradingCertificates[i].id[j].toString().equals(sql_TradingCertificateId.toString()))
				{
					api_id = json.id[i]
					api_name = json.name[i]
					api_groupCode = json.groupCode[i]
					api_tradingCertificateId = json.tradingCertificates[i].id[j]
					api_addressTypeId = json.tradingCertificates[i].addressTypeId[j]
					api_sourceSystem = json.tradingCertificates[i].sourceSystem[j]
					api_reference = json.tradingCertificates[i].reference[j]
					api_currentStatus = json.tradingCertificates[i].currentStatus[j]
					api_storageId = json.tradingCertificates[i].storageId[j]
					api_riskId = json.tradingCertificates[i].riskId[j]
					api_policyId = json.tradingCertificates[i].policyId[j]
					api_memberPartyId = json.tradingCertificates[i].memberPartyId[j]
					api_ownerPartyId = json.tradingCertificates[i].ownerPartyId[j]
					api_brokerPartyId = json.tradingCertificates[i].brokerPartyId[j]
					api_isRenewal = json.tradingCertificates[i].isRenewal[j]
					api_isYacht = json.tradingCertificates[i].isYacht[j]
					api_version = json.tradingCertificates[i].version[j]
					api_riskReference = json.tradingCertificates[i].riskReference[j]
					api_policyReference = json.tradingCertificates[i].policyReference[j]
					api_memberReference = json.tradingCertificates[i].memberReference[j]
					api_memberType = json.tradingCertificates[i].memberType[j]
					api_memberName = json.tradingCertificates[i].memberName[j]
					api_memberName= removeComma(api_memberName.toString())
					api_jointAssuredName = json.tradingCertificates[i].jointAssuredName[j]
					api_jointAssuredName= removeComma(api_jointAssuredName.toString())
					api_ownerReference = json.tradingCertificates[i].ownerReference[j]
					api_ownerName = json.tradingCertificates[i].ownerName[j]
					api_ownerName= removeComma(api_ownerName.toString())
					api_ownerDomicile = json.tradingCertificates[i].ownerDomicile[j]
					api_ownerEmailAddress = json.tradingCertificates[i].ownerEmailAddress[j]
					api_brokerReference = json.tradingCertificates[i].brokerReference[j]
					api_brokerName = json.tradingCertificates[i].brokerName[j]
					api_brokerName= removeComma(api_brokerName.toString())
					api_brokerEmailAddress = json.tradingCertificates[i].brokerEmailAddress[j]
					api_policyYear = json.tradingCertificates[i].policyYear[j]
					api_certificateIssueDate = json.tradingCertificates[i].certificateIssueDate[j]
					api_emailAddress = json.tradingCertificates[i].emailAddress[j]
					api_ccEmailAddress = json.tradingCertificates[i].ccEmailAddress[j]
					api_effectiveStartDate = json.tradingCertificates[i].effectiveStartDate[j]
					api_effectiveEndDate = json.tradingCertificates[i].effectiveEndDate[j]
					api_passengerCapacity = json.tradingCertificates[i].passengerCapacity[j]
					api_policyStartDate = json.tradingCertificates[i].policyStartDate[j]
					api_policyEndDate = json.tradingCertificates[i].policyEndDate[j]
					api_currencyCode = json.tradingCertificates[i].currencyCode[j]
					api_coverLimitAmount = json.tradingCertificates[i].coverLimitAmount[j]
					api_coverLimitAmount = removeDotFromCurrency(api_coverLimitAmount.toString())
					api_signatoryStateId = json.tradingCertificates[i].signatoryStateId[j]
					api_vesselName = json.tradingCertificates[i].vesselName[j]
					api_vesselName= removeComma(api_vesselName.toString())
					api_vesselType = json.tradingCertificates[i].vesselType[j]
					api_vesselTypeName = json.tradingCertificates[i].vesselTypeName[j]
					api_vesselEnteredDate = json.tradingCertificates[i].vesselEnteredDate[j]
					api_vesselFlag = json.tradingCertificates[i].vesselFlag[j]
					api_imoNumber = json.tradingCertificates[i].imoNumber[j]
					api_distinctiveNumbersOrLetters = json.tradingCertificates[i].distinctiveNumbersOrLetters[j]
					api_grossTonnage = json.tradingCertificates[i].grossTonnage[j]
					api_yearBuilt = json.tradingCertificates[i].yearBuilt[j]
					api_engineHorsePower = json.tradingCertificates[i].engineHorsePower[j]
					api_trademarkAndEngineModel = json.tradingCertificates[i].trademarkAndEngineModel[j]
					api_model = json.tradingCertificates[i].model[j]
					api_engineNo = json.tradingCertificates[i].engineNo[j]
					api_nominatedFlagState = json.tradingCertificates[i].nominatedFlagState[j]
					api_nominatedFlagStateName = json.tradingCertificates[i].nominatedFlagStateName[j]
					api_nominatedFlagStateName = removeComma(api_nominatedFlagStateName.toString())
					api_portOfRegistry = json.tradingCertificates[i].portOfRegistry[j]
					api_portOfRegistry = removeComma(api_portOfRegistry.toString())
					api_tenderReferenceList = json.tradingCertificates[i].tenderReferenceList[j]
					api_tenderOutboardReferenceList = json.tradingCertificates[i].tenderOutboardReferenceList[j]
					api_tradingCertificateTypeId = json.tradingCertificates[i].tradingCertificateType.id[j]
					api_tradingCertificateGroupId = json.tradingCertificates[i].tradingCertificateType.tradingCertificateGroup.id[j]
					api_tradingCertificateGroupName = json.tradingCertificates[i].tradingCertificateType.tradingCertificateGroup.name[j]
					api_tradingCertificateGroupCode = json.tradingCertificates[i].tradingCertificateType.tradingCertificateGroup.groupCode[j]
					api_tradingCertificateTypeTypeCode = json.tradingCertificates[i].tradingCertificateType.typeCode[j]
					api_tradingCertificateTypeTypeName = json.tradingCertificates[i].tradingCertificateType.typeName[j]
					
					//log.info "API response is received as ==>"+api_id+","+api_addressTypeId+","+api_sourceSystem+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_trademarkAndEngineModel+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName+","+api_certificateIssueDate+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_policyStartDate+","+api_policyEndDate+","+api_vesselEnteredDate
					//apiWriter.println(api_id+","+api_addressTypeId+","+api_sourceSystem+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_trademarkAndEngineModel+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName+","+api_certificateIssueDate+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_policyStartDate+","+api_policyEndDate+","+api_vesselEnteredDate)

					//log.info "Address is :"+json.tradingCertificates[i].stateAddress
					if(json.tradingCertificates[i].stateAddress[j]!=null)
					{
						api_stateAddressId= json.tradingCertificates[i].stateAddress[j].id
						api_stateAddressName= json.tradingCertificates[i].stateAddress[j].addressName
						api_stateAddressName= removeComma(api_stateAddressName.toString())
						api_stateAddressLine1= json.tradingCertificates[i].stateAddress[j].addressLine1
						api_stateAddressLine1= removeComma(api_stateAddressLine1.toString())
						api_stateAddressLine2= json.tradingCertificates[i].stateAddress[j].addressLine2
						api_stateAddressLine2= removeComma(api_stateAddressLine2.toString())
						api_stateAddressLine3= json.tradingCertificates[i].stateAddress[j].addressLine3
						api_stateAddressLine3= removeComma(api_stateAddressLine3.toString())
						api_stateAddressStateOrCounty= json.tradingCertificates[i].stateAddress[j].stateOrCounty
						api_stateAddressStateOrCounty= removeComma(api_stateAddressStateOrCounty.toString())
						api_stateAddressCity= json.tradingCertificates[i].stateAddress[j].city
						api_stateAddressCity= removeComma(api_stateAddressCity.toString())
						api_stateAddressCountry= json.tradingCertificates[i].stateAddress[j].country
						api_stateAddressCountry= removeComma(api_stateAddressCountry.toString())
						api_stateAddressPostCode= json.tradingCertificates[i].stateAddress[j].postCode
						api_stateAddressPostCode= removeComma(api_stateAddressPostCode.toString())
						api_stateAddressPrimaryAddress= json.tradingCertificates[i].stateAddress[j].primaryAddress
						//log.info "state Address is :"+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress
					}
					else
					{
						api_stateAddressId= null
						api_stateAddressName= null
						api_stateAddressLine1= null
						api_stateAddressLine2= null
						api_stateAddressLine3= null
						api_stateAddressStateOrCounty= null
						api_stateAddressCity= null
						api_stateAddressCountry= null
						api_stateAddressPostCode= null
						api_stateAddressPrimaryAddress= null
					}
					if(json.tradingCertificates[i].ownerAddress[j]!=null)
					{
						api_ownerAddressId= json.tradingCertificates[i].ownerAddress[j].id
						api_ownerAddressName= json.tradingCertificates[i].ownerAddress[j].addressName
						api_ownerAddressName= removeComma(api_ownerAddressName.toString())
						api_ownerAddressLine1= json.tradingCertificates[i].ownerAddress[j].addressLine1
						api_ownerAddressLine1= removeComma(api_ownerAddressLine1.toString())
						api_ownerAddressLine2= json.tradingCertificates[i].ownerAddress[j].addressLine2
						api_ownerAddressLine2= removeComma(api_ownerAddressLine2.toString())
						api_ownerAddressLine3= json.tradingCertificates[i].ownerAddress[j].addressLine3
						api_ownerAddressLine3= removeComma(api_ownerAddressLine3.toString())
						api_ownerAddressStateOrCounty= json.tradingCertificates[i].ownerAddress[j].stateOrCounty
						api_ownerAddressStateOrCounty= removeComma(api_ownerAddressStateOrCounty.toString())
						api_ownerAddressCity= json.tradingCertificates[i].ownerAddress[j].city
						api_ownerAddressCity= removeComma(api_ownerAddressCity.toString())
						api_ownerAddressCountry= json.tradingCertificates[i].ownerAddress[j].country
						api_ownerAddressCountry= removeComma(api_ownerAddressCountry.toString())
						api_ownerAddressPostCode= json.tradingCertificates[i].ownerAddress[j].postCode
						api_ownerAddressPostCode= removeComma(api_ownerAddressPostCode.toString())
						api_ownerAddressPrimaryAddress= json.tradingCertificates[i].ownerAddress[j].primaryAddress
						//log.info "Owner Address is :"+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress
					}
					else
					{
						api_ownerAddressId= null
						api_ownerAddressName= null
						api_ownerAddressLine1= null
						api_ownerAddressLine2= null
						api_ownerAddressLine3= null
						api_ownerAddressStateOrCounty= null
						api_ownerAddressCity= null
						api_ownerAddressCountry= null
						api_ownerAddressPostCode= null
						api_ownerAddressPrimaryAddress= null
					}
					if(json.tradingCertificates[i].brokerAddress[j]!=null)
					{
						api_brokerAddressId= json.tradingCertificates[i].brokerAddress[j].id
						api_brokerAddressName= json.tradingCertificates[i].brokerAddress[j].addressName
						api_brokerAddressName= removeComma(api_brokerAddressName.toString())
						api_brokerAddressLine1= json.tradingCertificates[i].brokerAddress[j].addressLine1
						api_brokerAddressLine1= removeComma(api_brokerAddressLine1.toString())
						api_brokerAddressLine2= json.tradingCertificates[i].brokerAddress[j].addressLine2
						api_brokerAddressLine2= removeComma(api_brokerAddressLine2.toString())
						api_brokerAddressLine3= json.tradingCertificates[i].brokerAddress[j].addressLine3
						api_brokerAddressLine3= removeComma(api_brokerAddressLine3.toString())
						api_brokerAddressStateOrCounty= json.tradingCertificates[i].brokerAddress[j].stateOrCounty
						api_brokerAddressStateOrCounty= removeComma(api_brokerAddressStateOrCounty.toString())
						api_brokerAddressCity= json.tradingCertificates[i].brokerAddress[j].city
						api_brokerAddressCity= removeComma(api_brokerAddressCity.toString())
						api_brokerAddressCountry= json.tradingCertificates[i].brokerAddress[j].country
						api_brokerAddressCountry= removeComma(api_brokerAddressCountry.toString())
						api_brokerAddressPostCode= json.tradingCertificates[i].brokerAddress[j].postCode
						api_brokerAddressPostCode= removeComma(api_brokerAddressPostCode.toString())
						api_brokerAddressPrimaryAddress= json.tradingCertificates[i].brokerAddress[j].primaryAddress
						//log.info "Broker Address is :"+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress
					}
					else
					{
						api_brokerAddressId= null
						api_brokerAddressName= null
						api_brokerAddressLine1= null
						api_brokerAddressLine2= null
						api_brokerAddressLine3= null
						api_brokerAddressStateOrCounty= null
						api_brokerAddressCity= null
						api_brokerAddressCountry= null
						api_brokerAddressPostCode= null
						api_brokerAddressPrimaryAddress= null
					}
					if(json.tradingCertificates[i].memberAddress[j]!=null)
					{
						api_memberAddressId= json.tradingCertificates[i].memberAddress[j].id						
						api_memberAddressName= json.tradingCertificates[i].memberAddress[j].addressName
						api_memberAddressName= removeComma(api_memberAddressName.toString())
						api_memberAddressLine1= json.tradingCertificates[i].memberAddress[j].addressLine1
						api_memberAddressLine1= removeComma(api_memberAddressLine1.toString())
						api_memberAddressLine2= json.tradingCertificates[i].memberAddress[j].addressLine2
						api_memberAddressLine2= removeComma(api_memberAddressLine2.toString())
						api_memberAddressLine3= json.tradingCertificates[i].memberAddress[j].addressLine3
						api_memberAddressLine3= removeComma(api_memberAddressLine3.toString())
						api_memberAddressStateOrCounty= json.tradingCertificates[i].memberAddress[j].stateOrCounty
						api_memberAddressStateOrCounty= removeComma(api_memberAddressStateOrCounty.toString())
						api_memberAddressCity= json.tradingCertificates[i].memberAddress[j].city
						api_memberAddressCity= removeComma(api_memberAddressCity.toString())
						api_memberAddressCountry= json.tradingCertificates[i].memberAddress[j].country
						api_memberAddressCountry= removeComma(api_memberAddressCountry.toString())
						api_memberAddressPostCode= json.tradingCertificates[i].memberAddress[j].postCode
						api_memberAddressPostCode= removeComma(api_memberAddressPostCode.toString())
						api_memberAddressPrimaryAddress= json.tradingCertificates[i].memberAddress[j].primaryAddress
						//log.info "Member Address is :"+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress
					}
					else
					{
						api_memberAddressId= null
						api_memberAddressName= null
						api_memberAddressLine1= null
						api_memberAddressLine2= null
						api_memberAddressLine3= null
						api_memberAddressStateOrCounty= null
						api_memberAddressCity= null
						api_memberAddressCountry= null
						api_memberAddressPostCode= null
						api_memberAddressPrimaryAddress= null
					}
					if(json.tradingCertificates[i].jointAssuredAddress[j]!=null)
					{
						api_jointAssuredAddressId= json.tradingCertificates[i].jointAssuredAddress[j].id
						api_jointAssuredAddressName= json.tradingCertificates[i].jointAssuredAddress[j].addressName
						api_jointAssuredAddressName= removeComma(api_jointAssuredAddressName.toString())
						api_jointAssuredAddressLine1= json.tradingCertificates[i].jointAssuredAddress[j].addressLine1
						api_jointAssuredAddressLine1= removeComma(api_jointAssuredAddressLine1.toString())
						api_jointAssuredAddressLine2= json.tradingCertificates[i].jointAssuredAddress[j].addressLine2
						api_jointAssuredAddressLine2= removeComma(api_jointAssuredAddressLine2.toString())
						api_jointAssuredAddressLine3= json.tradingCertificates[i].jointAssuredAddress[j].addressLine3
						api_jointAssuredAddressLine3= removeComma(api_jointAssuredAddressLine3.toString())
						api_jointAssuredAddressStateOrCounty= json.tradingCertificates[i].jointAssuredAddress[j].stateOrCounty
						api_jointAssuredAddressStateOrCounty= removeComma(api_jointAssuredAddressStateOrCounty.toString())
						api_jointAssuredAddressCity= json.tradingCertificates[i].jointAssuredAddress[j].city
						api_jointAssuredAddressCity= removeComma(api_jointAssuredAddressCity.toString())
						api_jointAssuredAddressCountry= json.tradingCertificates[i].jointAssuredAddress[j].country
						api_jointAssuredAddressCountry= removeComma(api_jointAssuredAddressCountry.toString())
						api_jointAssuredAddressPostCode= json.tradingCertificates[i].jointAssuredAddress[j].postCode
						api_jointAssuredAddressPostCode= removeComma(api_jointAssuredAddressPostCode.toString())
						api_jointAssuredAddressPrimaryAddress= json.tradingCertificates[i].jointAssuredAddress[j].primaryAddress
						//log.info "Joint Assured Address is :"+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress
					}
					else
					{
						api_jointAssuredAddressId= null
						api_jointAssuredAddressName= null
						api_jointAssuredAddressLine1= null
						api_jointAssuredAddressLine2= null
						api_jointAssuredAddressLine3= null
						api_jointAssuredAddressStateOrCounty= null
						api_jointAssuredAddressCity= null
						api_jointAssuredAddressCountry= null
						api_jointAssuredAddressPostCode= null
						api_jointAssuredAddressPrimaryAddress= null
					}
					if(json.tradingCertificates[i].branchAddress[j]!=null)
					{
						api_branchAddressId= json.tradingCertificates[i].branchAddress[j].id
						api_branchAddressName= json.tradingCertificates[i].branchAddress[j].addressName
						api_branchAddressName= removeComma(api_branchAddressName.toString())
						api_branchAddressLine1= json.tradingCertificates[i].branchAddress[j].addressLine1
						api_branchAddressLine1= removeComma(api_branchAddressLine1.toString())
						api_branchAddressLine2= json.tradingCertificates[i].branchAddress[j].addressLine2
						api_branchAddressLine2= removeComma(api_branchAddressLine2.toString())
						api_branchAddressLine3= json.tradingCertificates[i].branchAddress[j].addressLine3
						api_branchAddressLine3= removeComma(api_branchAddressLine3.toString())
						api_branchAddressStateOrCounty= json.tradingCertificates[i].branchAddress[j].stateOrCounty
						api_branchAddressStateOrCounty= removeComma(api_branchAddressStateOrCounty.toString())
						api_branchAddressCity= json.tradingCertificates[i].branchAddress[j].city
						api_branchAddressCity= removeComma(api_branchAddressCity.toString())
						api_branchAddressCountry= json.tradingCertificates[i].branchAddress[j].country
						api_branchAddressCountry= removeComma(api_branchAddressCountry.toString())
						api_branchAddressPostCode= json.tradingCertificates[i].branchAddress[j].postCode
						api_branchAddressPostCode= removeComma(api_branchAddressPostCode.toString())
						api_branchAddressPrimaryAddress= json.tradingCertificates[i].branchAddress[j].primaryAddress
						//log.info "Branch Address is :"+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress						
					}
					else
					{
						api_branchAddressId= null
						api_branchAddressName= null
						api_branchAddressLine1= null
						api_branchAddressLine2= null
						api_branchAddressLine3= null
						api_branchAddressStateOrCounty= null
						api_branchAddressCity= null
						api_branchAddressCountry= null
						api_branchAddressPostCode= null
						api_branchAddressPrimaryAddress= null
					}

					log.info "SQL response received as==>"+sql_Type_Id+","+sql_TradingCertificateId+","+sql_RiskReference+","+sql_Name+","+sql_GroupCode+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TypeCode+","+sql_TypeName+","+sql_CertificateIssueDate+","+sql_StateAddressTypeName+","+sql_StateAddressTypeId+","+sql_StateTradingCertificateId+","+sql_StateRiskReference+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress+","+sql_OwnerAddressTypeName+","+sql_OwnerAddressTypeId+","+sql_OwnerTradingCertificateId+","+sql_OwnerRiskReference+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressName+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress+","+sql_BrokerAddressTypeName+","+sql_BrokerAddressTypeId+","+sql_BrokerTradingCertificateId+","+sql_BrokerRiskReference+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressName+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress+","+sql_MemberAddressTypeName+","+sql_MemberAddressTypeId+","+sql_MemberTradingCertificateId+","+sql_MemberRiskReference+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressName+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress+","+sql_JointAssuredAddressTypeName+","+sql_JointAssuredAddressTypeId+","+sql_JointAssuredTradingCertificateId+","+sql_JointAssuredRiskReference+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressName+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress+","+sql_BranchAddressTypeName+","+sql_BranchAddressTypeId+","+sql_BranchTradingCertificateId+","+sql_BranchRiskReference+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressName+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress
					sqlWriter.println(sql_Type_Id+","+sql_TradingCertificateId+","+sql_RiskReference+","+sql_Name+","+sql_GroupCode+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TypeCode+","+sql_TypeName+","+sql_CertificateIssueDate+","+sql_StateAddressTypeName+","+sql_StateAddressTypeId+","+sql_StateTradingCertificateId+","+sql_StateRiskReference+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress+","+sql_OwnerAddressTypeName+","+sql_OwnerAddressTypeId+","+sql_OwnerTradingCertificateId+","+sql_OwnerRiskReference+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressName+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress+","+sql_BrokerAddressTypeName+","+sql_BrokerAddressTypeId+","+sql_BrokerTradingCertificateId+","+sql_BrokerRiskReference+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressName+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress+","+sql_MemberAddressTypeName+","+sql_MemberAddressTypeId+","+sql_MemberTradingCertificateId+","+sql_MemberRiskReference+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressName+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress+","+sql_JointAssuredAddressTypeName+","+sql_JointAssuredAddressTypeId+","+sql_JointAssuredTradingCertificateId+","+sql_JointAssuredRiskReference+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressName+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress+","+sql_BranchAddressTypeName+","+sql_BranchAddressTypeId+","+sql_BranchTradingCertificateId+","+sql_BranchRiskReference+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressName+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress)

					log.info "API response is received as ==>"+api_id+","+api_addressTypeId+","+api_sourceSystem+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_trademarkAndEngineModel+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName+","+api_certificateIssueDate+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_policyStartDate+","+api_policyEndDate+","+api_vesselEnteredDate+","+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress+","+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress+","+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress+","+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress+","+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress+","+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress
					apiWriter.println(api_id+","+api_addressTypeId+","+api_sourceSystem+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_trademarkAndEngineModel+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName+","+api_certificateIssueDate+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_policyStartDate+","+api_policyEndDate+","+api_vesselEnteredDate+","+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress+","+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress+","+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress+","+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress+","+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress+","+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress)

					if(
						sql_TradingCertificateGroupId.toString().equals(api_id.toString()) &&
						sql_TradingCertificateGroupName.toString().toUpperCase().equals(api_name.toString().toUpperCase()) &&
						sql_TradingCertificateGroupCode.toString().toUpperCase().equals(api_groupCode.toString().toUpperCase()) &&
						sql_AddressType_Id.toString().equals(api_addressTypeId.toString()) &&
						sql_TradingCertificateId.toString().equals(api_tradingCertificateId.toString()) &&
						sql_SourceSystem.toString().toUpperCase().equals(api_sourceSystem.toString().toUpperCase()) &&
						sql_Reference.toString().equals(api_reference.toString()) &&
						sql_CurrentStatus.toString().toUpperCase().equals(api_currentStatus.toString().toUpperCase()) &&
						sql_StorageId.toString().equals(api_storageId.toString()) &&
						sql_RiskId.toString().equals(api_riskId.toString()) &&
						sql_PolicyId.toString().equals(api_policyId.toString()) &&
						sql_MemberPartyId.toString().equals(api_memberPartyId.toString()) &&
						sql_OwnerPartyId.toString().equals(api_ownerPartyId.toString()) &&
						sql_BrokerPartyId.toString().equals(api_brokerPartyId.toString()) &&
						sql_IsRenewalFlag.toString().toUpperCase().equals(api_isRenewal.toString().toUpperCase()) &&
						sql_IsYachtFlag.toString().toUpperCase().equals(api_isYacht.toString().toUpperCase()) &&
						sql_Version.toString().equals(api_version.toString()) &&
						sql_RiskReference.toString().equals(api_riskReference.toString()) &&
						sql_PolicyReference.toString().equals(api_policyReference.toString()) &&
						sql_MemberReference.toString().equals(api_memberReference.toString()) &&
						sql_MemberType.toString().toUpperCase().equals(api_memberType.toString().toUpperCase()) &&
						sql_MemberName.toString().toUpperCase().equals(api_memberName.toString().toUpperCase()) &&
						sql_JointAssuredName.toString().toUpperCase().equals(api_jointAssuredName.toString().toUpperCase()) &&
						sql_OwnerReference.toString().equals(api_ownerReference.toString()) &&
						sql_OwnerName.toString().toUpperCase().equals(api_ownerName.toString().toUpperCase()) &&
						sql_OwnerDomicile.toString().toUpperCase().equals(api_ownerDomicile.toString().toUpperCase()) &&
						sql_OwnerEmailAddress.toString().toUpperCase().equals(api_ownerEmailAddress.toString().toUpperCase()) &&
						sql_BrokerReference.toString().equals(api_brokerReference.toString()) &&
						sql_BrokerName.toString().toUpperCase().equals(api_brokerName.toString().toUpperCase()) &&
						sql_BrokerEmailAddress.toString().toUpperCase().equals(api_brokerEmailAddress.toString().toUpperCase()) &&
						sql_PolicyYear.toString().equals(api_policyYear.toString()) &&
						sql_EmailAddress.toString().toUpperCase().equals(api_emailAddress.toString().toUpperCase()) &&
						sql_CcEmailAddress.toString().toUpperCase().equals(api_ccEmailAddress.toString().toUpperCase()) &&
						sql_PassengerCapacity.toString().equals(api_passengerCapacity.toString()) &&
						sql_CurrencyCode.toString().toUpperCase().equals(api_currencyCode.toString().toUpperCase()) &&
						sql_CoverLimitAmount.toString().equals(api_coverLimitAmount.toString()) &&
						sql_SignatoryState_Id.toString().equals(api_signatoryStateId.toString()) &&
						sql_VesselName.toString().toUpperCase().equals(api_vesselName.toString().toUpperCase()) &&
						sql_VesselType.toString().toUpperCase().equals(api_vesselType.toString().toUpperCase()) &&
						sql_VesselTypeName.toString().toUpperCase().equals(api_vesselTypeName.toString().toUpperCase()) &&
						sql_vesselFlag.toString().toUpperCase().equals(api_vesselFlag.toString().toUpperCase()) &&
						sql_imoNumber.toString().equals(api_imoNumber.toString()) &&
						sql_distinctiveNumbersOrLetters.toString().toUpperCase().equals(api_distinctiveNumbersOrLetters.toString().toUpperCase()) &&
						sql_grossTonnage.toString().equals(api_grossTonnage.toString()) &&
						sql_yearBuilt.toString().equals(api_yearBuilt.toString()) &&
						sql_engineHorsePower.toString().equals(api_engineHorsePower.toString()) &&
						sql_model.toString().toUpperCase().equals(api_model.toString().toUpperCase()) &&
						sql_engineNo.toString().toUpperCase().equals(api_engineNo.toString().toUpperCase()) &&
						sql_NominatedStateFlag.toString().toUpperCase().equals(api_nominatedFlagState.toString().toUpperCase()) &&
						sql_NominatedStateFlagName.toString().toUpperCase().equals(api_nominatedFlagStateName.toString().toUpperCase()) &&
						sql_portOfRegistry.toString().toUpperCase().equals(api_portOfRegistry.toString().toUpperCase()) &&
						sql_tenderReferenceList.toString().equals(api_tenderReferenceList.toString()) &&
						sql_TradingCertificateTypeId.toString().equals(api_tradingCertificateTypeId.toString()) &&
						sql_TradingCertificateGroupId.toString().equals(api_tradingCertificateGroupId.toString()) &&
						sql_TradingCertificateGroupName.toString().toUpperCase().equals(api_tradingCertificateGroupName.toString().toUpperCase()) &&
						sql_TradingCertificateGroupCode.toString().toUpperCase().equals(api_tradingCertificateGroupCode.toString().toUpperCase()) &&
						sql_TypeCode.toString().toUpperCase().equals(api_tradingCertificateTypeTypeCode.toString().toUpperCase()) &&
						sql_TypeName.toString().toUpperCase().equals(api_tradingCertificateTypeTypeName.toString().toUpperCase()) &&

						api_stateAddressId.toString().equals(sql_StateAddressId.toString()) && 
						api_stateAddressName.toString().toUpperCase().equals(sql_StateAddressName.toString().toUpperCase()) && 
						api_stateAddressLine1.toString().toUpperCase().equals(sql_StateAddressLine1.toString().toUpperCase()) && 
						api_stateAddressLine2.toString().toUpperCase().equals(sql_StateAddressLine2.toString().toUpperCase()) && 
						api_stateAddressLine3.toString().toUpperCase().equals(sql_StateAddressLine3.toString().toUpperCase()) && 
						api_stateAddressStateOrCounty.toString().toUpperCase().equals(sql_StateStateOrCounty.toString().toUpperCase()) && 
						api_stateAddressCity.toString().toUpperCase().equals(sql_StateCity.toString().toUpperCase()) && 
						api_stateAddressCountry.toString().toUpperCase().equals(sql_StateCountry.toString().toUpperCase()) && 
						api_stateAddressPostCode.toString().toUpperCase().equals(sql_StatePostCode.toString().toUpperCase()) && 
						api_stateAddressPrimaryAddress.toString().toUpperCase().equals(sql_StateIsPrimaryAddress.toString().toUpperCase()) && 
						api_ownerAddressId.toString().equals(sql_OwnerAddressId.toString()) && 
						api_ownerAddressName.toString().toUpperCase().equals(sql_OwnerAddressName.toString().toUpperCase()) && 
						api_ownerAddressLine1.toString().toUpperCase().equals(sql_OwnerAddressLine1.toString().toUpperCase()) && 
						api_ownerAddressLine2.toString().toUpperCase().equals(sql_OwnerAddressLine2.toString().toUpperCase()) && 
						api_ownerAddressLine3.toString().toUpperCase().equals(sql_OwnerAddressLine3.toString().toUpperCase()) && 
						api_ownerAddressStateOrCounty.toString().toUpperCase().equals(sql_OwnerStateOrCounty.toString().toUpperCase()) && 
						api_ownerAddressCity.toString().toUpperCase().equals(sql_OwnerCity.toString().toUpperCase()) && 
						api_ownerAddressCountry.toString().toUpperCase().equals(sql_OwnerCountry.toString().toUpperCase()) && 
						api_ownerAddressPostCode.toString().toUpperCase().equals(sql_OwnerPostCode.toString().toUpperCase()) && 
						api_ownerAddressPrimaryAddress.toString().toUpperCase().equals(sql_OwnerIsPrimaryAddress.toString().toUpperCase()) && 
						api_brokerAddressId.toString().equals(sql_BrokerAddressId.toString()) && 
						api_brokerAddressName.toString().toUpperCase().equals(sql_BrokerAddressName.toString().toUpperCase()) && 
						api_brokerAddressLine1.toString().toUpperCase().equals(sql_BrokerAddressLine1.toString().toUpperCase()) && 
						api_brokerAddressLine2.toString().toUpperCase().equals(sql_BrokerAddressLine2.toString().toUpperCase()) && 
						api_brokerAddressLine3.toString().toUpperCase().equals(sql_BrokerAddressLine3.toString().toUpperCase()) && 
						api_brokerAddressStateOrCounty.toString().toUpperCase().equals(sql_BrokerStateOrCounty.toString().toUpperCase()) && 
						api_brokerAddressCity.toString().toUpperCase().equals(sql_BrokerCity.toString().toUpperCase()) && 
						api_brokerAddressCountry.toString().toUpperCase().equals(sql_BrokerCountry.toString().toUpperCase()) && 
						api_brokerAddressPostCode.toString().toUpperCase().equals(sql_BrokerPostCode.toString().toUpperCase()) && 
						api_brokerAddressPrimaryAddress.toString().toUpperCase().equals(sql_BrokerIsPrimaryAddress.toString().toUpperCase()) && 
						api_memberAddressId.toString().equals(sql_MemberAddressId.toString()) && 
						api_memberAddressName.toString().toUpperCase().equals(sql_MemberAddressName.toString().toUpperCase()) && 
						api_memberAddressLine1.toString().toUpperCase().equals(sql_MemberAddressLine1.toString().toUpperCase()) && 
						api_memberAddressLine2.toString().toUpperCase().equals(sql_MemberAddressLine2.toString().toUpperCase()) && 
						api_memberAddressLine3.toString().toUpperCase().equals(sql_MemberAddressLine3.toString().toUpperCase()) && 
						api_memberAddressStateOrCounty.toString().toUpperCase().equals(sql_MemberStateOrCounty.toString().toUpperCase()) && 
						api_memberAddressCity.toString().toUpperCase().equals(sql_MemberCity.toString().toUpperCase()) && 
						api_memberAddressCountry.toString().toUpperCase().equals(sql_MemberCountry.toString().toUpperCase()) && 
						api_memberAddressPostCode.toString().toUpperCase().equals(sql_MemberPostCode.toString().toUpperCase()) && 
						api_memberAddressPrimaryAddress.toString().toUpperCase().equals(sql_MemberIsPrimaryAddress.toString().toUpperCase()) && 
						api_jointAssuredAddressId.toString().equals(sql_JointAssuredAddressId.toString()) && 
						api_jointAssuredAddressName.toString().toUpperCase().equals(sql_JointAssuredAddressName.toString().toUpperCase()) && 
						api_jointAssuredAddressLine1.toString().toUpperCase().equals(sql_JointAssuredAddressLine1.toString().toUpperCase()) && 
						api_jointAssuredAddressLine2.toString().toUpperCase().equals(sql_JointAssuredAddressLine2.toString().toUpperCase()) && 
						api_jointAssuredAddressLine3.toString().toUpperCase().equals(sql_JointAssuredAddressLine3.toString().toUpperCase()) && 
						api_jointAssuredAddressStateOrCounty.toString().toUpperCase().equals(sql_JointAssuredStateOrCounty.toString().toUpperCase()) && 
						api_jointAssuredAddressCity.toString().toUpperCase().equals(sql_JointAssuredCity.toString().toUpperCase()) && 
						api_jointAssuredAddressCountry.toString().toUpperCase().equals(sql_JointAssuredCountry.toString().toUpperCase()) && 
						api_jointAssuredAddressPostCode.toString().toUpperCase().equals(sql_JointAssuredPostCode.toString().toUpperCase()) && 
						api_jointAssuredAddressPrimaryAddress.toString().toUpperCase().equals(sql_JointAssuredIsPrimaryAddress.toString().toUpperCase()) && 
						api_branchAddressId.toString().equals(sql_BranchAddressId.toString()) && 
						api_branchAddressName.toString().toUpperCase().equals(sql_BranchAddressName.toString().toUpperCase()) && 
						api_branchAddressLine1.toString().toUpperCase().equals(sql_BranchAddressLine1.toString().toUpperCase()) && 
						api_branchAddressLine2.toString().toUpperCase().equals(sql_BranchAddressLine2.toString().toUpperCase()) && 
						api_branchAddressLine3.toString().toUpperCase().equals(sql_BranchAddressLine3.toString().toUpperCase()) && 
						api_branchAddressStateOrCounty.toString().toUpperCase().equals(sql_BranchStateOrCounty.toString().toUpperCase()) && 
						api_branchAddressCity.toString().toUpperCase().equals(sql_BranchCity.toString().toUpperCase()) && 
						api_branchAddressCountry.toString().toUpperCase().equals(sql_BranchCountry.toString().toUpperCase()) && 
						api_branchAddressPostCode.toString().toUpperCase().equals(sql_BranchPostCode.toString().toUpperCase()) && 
						api_branchAddressPrimaryAddress.toString().toUpperCase().equals(sql_BranchIsPrimaryAddress.toString().toUpperCase())

						)
						{
							//compareWriter.println(sql_TradingCertificateGroupId+","+api_id+","+sql_TradingCertificateGroupName+","+api_name+","+sql_TradingCertificateGroupCode+","+api_groupCode+","+sql_AddressType_Id+","+api_addressTypeId+","+sql_TradingCertificateId+","+api_tradingCertificateId+","+sql_SourceSystem+","+api_sourceSystem+","+sql_Reference+","+api_reference+","+sql_CurrentStatus+","+api_currentStatus+","+sql_StorageId+","+api_storageId+","+sql_RiskId+","+api_riskId+","+sql_PolicyId+","+api_policyId+","+sql_MemberPartyId+","+api_memberPartyId+","+sql_OwnerPartyId+","+api_ownerPartyId+","+sql_BrokerPartyId+","+api_brokerPartyId+","+sql_IsRenewalFlag+","+api_isRenewal+","+sql_IsYachtFlag+","+api_isYacht+","+sql_Version+","+api_version+","+sql_RiskReference+","+api_riskReference+","+sql_PolicyReference+","+api_policyReference+","+sql_MemberReference+","+api_memberReference+","+sql_MemberType+","+api_memberType+","+sql_MemberName+","+api_memberName+","+sql_JointAssuredName+","+api_jointAssuredName+","+sql_OwnerReference+","+api_ownerReference+","+sql_OwnerName+","+api_ownerName+","+sql_OwnerDomicile+","+api_ownerDomicile+","+sql_OwnerEmailAddress+","+api_ownerEmailAddress+","+sql_BrokerReference+","+api_brokerReference+","+sql_BrokerName+","+api_brokerName+","+sql_BrokerEmailAddress+","+api_brokerEmailAddress+","+sql_PolicyYear+","+api_policyYear+","+sql_EmailAddress+","+api_emailAddress+","+sql_CcEmailAddress+","+api_ccEmailAddress+","+sql_PassengerCapacity+","+api_passengerCapacity+","+sql_CurrencyCode+","+api_currencyCode+","+sql_CoverLimitAmount+","+api_coverLimitAmount+","+sql_SignatoryState_Id+","+api_signatoryStateId+","+sql_VesselName+","+api_vesselName+","+sql_VesselType+","+api_vesselType+","+sql_VesselTypeName+","+api_vesselTypeName+","+sql_vesselFlag+","+api_vesselFlag+","+sql_imoNumber+","+api_imoNumber+","+sql_distinctiveNumbersOrLetters+","+api_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+api_grossTonnage+","+sql_yearBuilt+","+api_yearBuilt+","+sql_engineHorsePower+","+api_engineHorsePower+","+sql_model+","+api_model+","+sql_engineNo+","+api_engineNo+","+sql_NominatedStateFlag+","+api_nominatedFlagState+","+sql_NominatedStateFlagName+","+api_nominatedFlagStateName+","+sql_portOfRegistry+","+api_portOfRegistry+","+sql_tenderReferenceList+","+api_tenderReferenceList+","+sql_TradingCertificateTypeId+","+api_tradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_tradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_tradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_tradingCertificateGroupCode+","+sql_TypeCode+","+api_tradingCertificateTypeTypeCode+","+sql_TypeName+","+api_tradingCertificateTypeTypeName+","+"Test Case is Passed")
							compareWriter.println(sql_TradingCertificateGroupId+","+api_id+","+sql_TradingCertificateGroupName+","+api_name+","+sql_TradingCertificateGroupCode+","+api_groupCode+","+sql_AddressType_Id+","+api_addressTypeId+","+sql_TradingCertificateId+","+api_tradingCertificateId+","+sql_SourceSystem+","+api_sourceSystem+","+sql_Reference+","+api_reference+","+sql_CurrentStatus+","+api_currentStatus+","+sql_StorageId+","+api_storageId+","+sql_RiskId+","+api_riskId+","+sql_PolicyId+","+api_policyId+","+sql_MemberPartyId+","+api_memberPartyId+","+sql_OwnerPartyId+","+api_ownerPartyId+","+sql_BrokerPartyId+","+api_brokerPartyId+","+sql_IsRenewalFlag+","+api_isRenewal+","+sql_IsYachtFlag+","+api_isYacht+","+sql_Version+","+api_version+","+sql_RiskReference+","+api_riskReference+","+sql_PolicyReference+","+api_policyReference+","+sql_MemberReference+","+api_memberReference+","+sql_MemberType+","+api_memberType+","+sql_MemberName+","+api_memberName+","+sql_JointAssuredName+","+api_jointAssuredName+","+sql_OwnerReference+","+api_ownerReference+","+sql_OwnerName+","+api_ownerName+","+sql_OwnerDomicile+","+api_ownerDomicile+","+sql_OwnerEmailAddress+","+api_ownerEmailAddress+","+sql_BrokerReference+","+api_brokerReference+","+sql_BrokerName+","+api_brokerName+","+sql_BrokerEmailAddress+","+api_brokerEmailAddress+","+sql_PolicyYear+","+api_policyYear+","+sql_EmailAddress+","+api_emailAddress+","+sql_CcEmailAddress+","+api_ccEmailAddress+","+sql_PassengerCapacity+","+api_passengerCapacity+","+sql_CurrencyCode+","+api_currencyCode+","+sql_CoverLimitAmount+","+api_coverLimitAmount+","+sql_SignatoryState_Id+","+api_signatoryStateId+","+sql_VesselName+","+api_vesselName+","+sql_VesselType+","+api_vesselType+","+sql_VesselTypeName+","+api_vesselTypeName+","+sql_vesselFlag+","+api_vesselFlag+","+sql_imoNumber+","+api_imoNumber+","+sql_distinctiveNumbersOrLetters+","+api_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+api_grossTonnage+","+sql_yearBuilt+","+api_yearBuilt+","+sql_engineHorsePower+","+api_engineHorsePower+","+sql_model+","+api_model+","+sql_engineNo+","+api_engineNo+","+sql_NominatedStateFlag+","+api_nominatedFlagState+","+sql_NominatedStateFlagName+","+api_nominatedFlagStateName+","+sql_portOfRegistry+","+api_portOfRegistry+","+sql_tenderReferenceList+","+api_tenderReferenceList+","+sql_TradingCertificateTypeId+","+api_tradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_tradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_tradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_tradingCertificateGroupCode+","+sql_TypeCode+","+api_tradingCertificateTypeTypeCode+","+sql_TypeName+","+api_tradingCertificateTypeTypeName+","+api_stateAddressId+","+sql_StateAddressId+","+api_stateAddressName+","+sql_StateAddressName+","+api_stateAddressLine1+","+sql_StateAddressLine1+","+api_stateAddressLine2+","+sql_StateAddressLine2+","+api_stateAddressLine3+","+sql_StateAddressLine3+","+api_stateAddressStateOrCounty+","+sql_StateStateOrCounty+","+api_stateAddressCity+","+sql_StateCity+","+api_stateAddressCountry+","+sql_StateCountry+","+api_stateAddressPostCode+","+sql_StatePostCode+","+api_stateAddressPrimaryAddress+","+sql_StateIsPrimaryAddress+","+api_ownerAddressId+","+sql_OwnerAddressId+","+api_ownerAddressName+","+sql_OwnerAddressName+","+api_ownerAddressLine1+","+sql_OwnerAddressLine1+","+api_ownerAddressLine2+","+sql_OwnerAddressLine2+","+api_ownerAddressLine3+","+sql_OwnerAddressLine3+","+api_ownerAddressStateOrCounty+","+sql_OwnerStateOrCounty+","+api_ownerAddressCity+","+sql_OwnerCity+","+api_ownerAddressCountry+","+sql_OwnerCountry+","+api_ownerAddressPostCode+","+sql_OwnerPostCode+","+api_ownerAddressPrimaryAddress+","+sql_OwnerIsPrimaryAddress+","+api_brokerAddressId+","+sql_BrokerAddressId+","+api_brokerAddressName+","+sql_BrokerAddressName+","+api_brokerAddressLine1+","+sql_BrokerAddressLine1+","+api_brokerAddressLine2+","+sql_BrokerAddressLine2+","+api_brokerAddressLine3+","+sql_BrokerAddressLine3+","+api_brokerAddressStateOrCounty+","+sql_BrokerStateOrCounty+","+api_brokerAddressCity+","+sql_BrokerCity+","+api_brokerAddressCountry+","+sql_BrokerCountry+","+api_brokerAddressPostCode+","+sql_BrokerPostCode+","+api_brokerAddressPrimaryAddress+","+sql_BrokerIsPrimaryAddress+","+api_memberAddressId+","+sql_MemberAddressId+","+api_memberAddressName+","+sql_MemberAddressName+","+api_memberAddressLine1+","+sql_MemberAddressLine1+","+api_memberAddressLine2+","+sql_MemberAddressLine2+","+api_memberAddressLine3+","+sql_MemberAddressLine3+","+api_memberAddressStateOrCounty+","+sql_MemberStateOrCounty+","+api_memberAddressCity+","+sql_MemberCity+","+api_memberAddressCountry+","+sql_MemberCountry+","+api_memberAddressPostCode+","+sql_MemberPostCode+","+api_memberAddressPrimaryAddress+","+sql_MemberIsPrimaryAddress+","+api_jointAssuredAddressId+","+sql_JointAssuredAddressId+","+api_jointAssuredAddressName+","+sql_JointAssuredAddressName+","+api_jointAssuredAddressLine1+","+sql_JointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+sql_JointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+sql_JointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+sql_JointAssuredStateOrCounty+","+api_jointAssuredAddressCity+","+sql_JointAssuredCity+","+api_jointAssuredAddressCountry+","+sql_JointAssuredCountry+","+api_jointAssuredAddressPostCode+","+sql_JointAssuredPostCode+","+api_jointAssuredAddressPrimaryAddress+","+sql_JointAssuredIsPrimaryAddress+","+api_branchAddressId+","+sql_BranchAddressId+","+api_branchAddressName+","+sql_BranchAddressName+","+api_branchAddressLine1+","+sql_BranchAddressLine1+","+api_branchAddressLine2+","+sql_BranchAddressLine2+","+api_branchAddressLine3+","+sql_BranchAddressLine3+","+api_branchAddressStateOrCounty+","+sql_BranchStateOrCounty+","+api_branchAddressCity+","+sql_BranchCity+","+api_branchAddressCountry+","+sql_BranchCountry+","+api_branchAddressPostCode+","+sql_BranchPostCode+","+api_branchAddressPrimaryAddress+","+sql_BranchIsPrimaryAddress+","+"Test Case is Passed")
							log.info "Details are matching hence Test Case Passed"
						}
						else
						{
							//compareWriter.println(sql_TradingCertificateGroupId+","+api_id+","+sql_TradingCertificateGroupName+","+api_name+","+sql_TradingCertificateGroupCode+","+api_groupCode+","+sql_AddressType_Id+","+api_addressTypeId+","+sql_TradingCertificateId+","+api_tradingCertificateId+","+sql_SourceSystem+","+api_sourceSystem+","+sql_Reference+","+api_reference+","+sql_CurrentStatus+","+api_currentStatus+","+sql_StorageId+","+api_storageId+","+sql_RiskId+","+api_riskId+","+sql_PolicyId+","+api_policyId+","+sql_MemberPartyId+","+api_memberPartyId+","+sql_OwnerPartyId+","+api_ownerPartyId+","+sql_BrokerPartyId+","+api_brokerPartyId+","+sql_IsRenewalFlag+","+api_isRenewal+","+sql_IsYachtFlag+","+api_isYacht+","+sql_Version+","+api_version+","+sql_RiskReference+","+api_riskReference+","+sql_PolicyReference+","+api_policyReference+","+sql_MemberReference+","+api_memberReference+","+sql_MemberType+","+api_memberType+","+sql_MemberName+","+api_memberName+","+sql_JointAssuredName+","+api_jointAssuredName+","+sql_OwnerReference+","+api_ownerReference+","+sql_OwnerName+","+api_ownerName+","+sql_OwnerDomicile+","+api_ownerDomicile+","+sql_OwnerEmailAddress+","+api_ownerEmailAddress+","+sql_BrokerReference+","+api_brokerReference+","+sql_BrokerName+","+api_brokerName+","+sql_BrokerEmailAddress+","+api_brokerEmailAddress+","+sql_PolicyYear+","+api_policyYear+","+sql_EmailAddress+","+api_emailAddress+","+sql_CcEmailAddress+","+api_ccEmailAddress+","+sql_PassengerCapacity+","+api_passengerCapacity+","+sql_CurrencyCode+","+api_currencyCode+","+sql_CoverLimitAmount+","+api_coverLimitAmount+","+sql_SignatoryState_Id+","+api_signatoryStateId+","+sql_VesselName+","+api_vesselName+","+sql_VesselType+","+api_vesselType+","+sql_VesselTypeName+","+api_vesselTypeName+","+sql_vesselFlag+","+api_vesselFlag+","+sql_imoNumber+","+api_imoNumber+","+sql_distinctiveNumbersOrLetters+","+api_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+api_grossTonnage+","+sql_yearBuilt+","+api_yearBuilt+","+sql_engineHorsePower+","+api_engineHorsePower+","+sql_model+","+api_model+","+sql_engineNo+","+api_engineNo+","+sql_NominatedStateFlag+","+api_nominatedFlagState+","+sql_NominatedStateFlagName+","+api_nominatedFlagStateName+","+sql_portOfRegistry+","+api_portOfRegistry+","+sql_tenderReferenceList+","+api_tenderReferenceList+","+sql_TradingCertificateTypeId+","+api_tradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_tradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_tradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_tradingCertificateGroupCode+","+sql_TypeCode+","+api_tradingCertificateTypeTypeCode+","+sql_TypeName+","+api_tradingCertificateTypeTypeName+","+"Test Case is Failed")
							compareWriter.println(sql_TradingCertificateGroupId+","+api_id+","+sql_TradingCertificateGroupName+","+api_name+","+sql_TradingCertificateGroupCode+","+api_groupCode+","+sql_AddressType_Id+","+api_addressTypeId+","+sql_TradingCertificateId+","+api_tradingCertificateId+","+sql_SourceSystem+","+api_sourceSystem+","+sql_Reference+","+api_reference+","+sql_CurrentStatus+","+api_currentStatus+","+sql_StorageId+","+api_storageId+","+sql_RiskId+","+api_riskId+","+sql_PolicyId+","+api_policyId+","+sql_MemberPartyId+","+api_memberPartyId+","+sql_OwnerPartyId+","+api_ownerPartyId+","+sql_BrokerPartyId+","+api_brokerPartyId+","+sql_IsRenewalFlag+","+api_isRenewal+","+sql_IsYachtFlag+","+api_isYacht+","+sql_Version+","+api_version+","+sql_RiskReference+","+api_riskReference+","+sql_PolicyReference+","+api_policyReference+","+sql_MemberReference+","+api_memberReference+","+sql_MemberType+","+api_memberType+","+sql_MemberName+","+api_memberName+","+sql_JointAssuredName+","+api_jointAssuredName+","+sql_OwnerReference+","+api_ownerReference+","+sql_OwnerName+","+api_ownerName+","+sql_OwnerDomicile+","+api_ownerDomicile+","+sql_OwnerEmailAddress+","+api_ownerEmailAddress+","+sql_BrokerReference+","+api_brokerReference+","+sql_BrokerName+","+api_brokerName+","+sql_BrokerEmailAddress+","+api_brokerEmailAddress+","+sql_PolicyYear+","+api_policyYear+","+sql_EmailAddress+","+api_emailAddress+","+sql_CcEmailAddress+","+api_ccEmailAddress+","+sql_PassengerCapacity+","+api_passengerCapacity+","+sql_CurrencyCode+","+api_currencyCode+","+sql_CoverLimitAmount+","+api_coverLimitAmount+","+sql_SignatoryState_Id+","+api_signatoryStateId+","+sql_VesselName+","+api_vesselName+","+sql_VesselType+","+api_vesselType+","+sql_VesselTypeName+","+api_vesselTypeName+","+sql_vesselFlag+","+api_vesselFlag+","+sql_imoNumber+","+api_imoNumber+","+sql_distinctiveNumbersOrLetters+","+api_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+api_grossTonnage+","+sql_yearBuilt+","+api_yearBuilt+","+sql_engineHorsePower+","+api_engineHorsePower+","+sql_model+","+api_model+","+sql_engineNo+","+api_engineNo+","+sql_NominatedStateFlag+","+api_nominatedFlagState+","+sql_NominatedStateFlagName+","+api_nominatedFlagStateName+","+sql_portOfRegistry+","+api_portOfRegistry+","+sql_tenderReferenceList+","+api_tenderReferenceList+","+sql_TradingCertificateTypeId+","+api_tradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_tradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_tradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_tradingCertificateGroupCode+","+sql_TypeCode+","+api_tradingCertificateTypeTypeCode+","+sql_TypeName+","+api_tradingCertificateTypeTypeName+","+api_stateAddressId+","+sql_StateAddressId+","+api_stateAddressName+","+sql_StateAddressName+","+api_stateAddressLine1+","+sql_StateAddressLine1+","+api_stateAddressLine2+","+sql_StateAddressLine2+","+api_stateAddressLine3+","+sql_StateAddressLine3+","+api_stateAddressStateOrCounty+","+sql_StateStateOrCounty+","+api_stateAddressCity+","+sql_StateCity+","+api_stateAddressCountry+","+sql_StateCountry+","+api_stateAddressPostCode+","+sql_StatePostCode+","+api_stateAddressPrimaryAddress+","+sql_StateIsPrimaryAddress+","+api_ownerAddressId+","+sql_OwnerAddressId+","+api_ownerAddressName+","+sql_OwnerAddressName+","+api_ownerAddressLine1+","+sql_OwnerAddressLine1+","+api_ownerAddressLine2+","+sql_OwnerAddressLine2+","+api_ownerAddressLine3+","+sql_OwnerAddressLine3+","+api_ownerAddressStateOrCounty+","+sql_OwnerStateOrCounty+","+api_ownerAddressCity+","+sql_OwnerCity+","+api_ownerAddressCountry+","+sql_OwnerCountry+","+api_ownerAddressPostCode+","+sql_OwnerPostCode+","+api_ownerAddressPrimaryAddress+","+sql_OwnerIsPrimaryAddress+","+api_brokerAddressId+","+sql_BrokerAddressId+","+api_brokerAddressName+","+sql_BrokerAddressName+","+api_brokerAddressLine1+","+sql_BrokerAddressLine1+","+api_brokerAddressLine2+","+sql_BrokerAddressLine2+","+api_brokerAddressLine3+","+sql_BrokerAddressLine3+","+api_brokerAddressStateOrCounty+","+sql_BrokerStateOrCounty+","+api_brokerAddressCity+","+sql_BrokerCity+","+api_brokerAddressCountry+","+sql_BrokerCountry+","+api_brokerAddressPostCode+","+sql_BrokerPostCode+","+api_brokerAddressPrimaryAddress+","+sql_BrokerIsPrimaryAddress+","+api_memberAddressId+","+sql_MemberAddressId+","+api_memberAddressName+","+sql_MemberAddressName+","+api_memberAddressLine1+","+sql_MemberAddressLine1+","+api_memberAddressLine2+","+sql_MemberAddressLine2+","+api_memberAddressLine3+","+sql_MemberAddressLine3+","+api_memberAddressStateOrCounty+","+sql_MemberStateOrCounty+","+api_memberAddressCity+","+sql_MemberCity+","+api_memberAddressCountry+","+sql_MemberCountry+","+api_memberAddressPostCode+","+sql_MemberPostCode+","+api_memberAddressPrimaryAddress+","+sql_MemberIsPrimaryAddress+","+api_jointAssuredAddressId+","+sql_JointAssuredAddressId+","+api_jointAssuredAddressName+","+sql_JointAssuredAddressName+","+api_jointAssuredAddressLine1+","+sql_JointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+sql_JointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+sql_JointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+sql_JointAssuredStateOrCounty+","+api_jointAssuredAddressCity+","+sql_JointAssuredCity+","+api_jointAssuredAddressCountry+","+sql_JointAssuredCountry+","+api_jointAssuredAddressPostCode+","+sql_JointAssuredPostCode+","+api_jointAssuredAddressPrimaryAddress+","+sql_JointAssuredIsPrimaryAddress+","+api_branchAddressId+","+sql_BranchAddressId+","+api_branchAddressName+","+sql_BranchAddressName+","+api_branchAddressLine1+","+sql_BranchAddressLine1+","+api_branchAddressLine2+","+sql_BranchAddressLine2+","+api_branchAddressLine3+","+sql_BranchAddressLine3+","+api_branchAddressStateOrCounty+","+sql_BranchStateOrCounty+","+api_branchAddressCity+","+sql_BranchCity+","+api_branchAddressCountry+","+sql_BranchCountry+","+api_branchAddressPostCode+","+sql_BranchPostCode+","+api_branchAddressPrimaryAddress+","+sql_BranchIsPrimaryAddress+","+"Test Case is Failed")
							log.info "Details are not matching hence Test Case Failed"
						}
					
					break;		
				}//if condition ends here
			}// j for loop
		}// i for loop
	}
	else if(httpStatusCode.equals("401"))
	{
		log.info "API response is not received because : "+response
	}
	else if(httpStatusCode.equals("503"))
	{
		log.info "API response is not received because Service Temporarily Unavailable : "+response 
	}
	counter = 1+counter
	log.info "Total records tested are : "+counter
}

public String removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("[") || field.contains("]"))
	{
		field=field.replace("[", " ")
		field=field.replace("]", " ")
	}
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Risk Selection By Trading Certificates By Risk Reference***********"]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script (with Address Id from API resp)" id="60b72660-a8e4-480c-8894-205035ffd067" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Risk Selection By Trading Certificates By Risk Reference***********"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
"""
use tradingCertificate
SELECT
TOP 200
TC.Type_Id, TC.Id as TradingCertificateId, tc.RiskReference, RT.Name, RT.TypeCode as GroupCode, TC.AddressType_Id, TC.SourceSystem, 
TC.Reference, TC.CurrentStatus, TC.StorageId,  TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
TC.IsRenewal, case when TC.IsRenewal = 1 then 'True'    when TC.IsRenewal = 0 then 'False' else NULL end as IsRenewalFlag, TC.IsYacht,
case when TC.IsYacht = 1 then 'True' when TC.IsYacht = 0 then 'False' else NULL end as IsYachtFlag, 
TC.TradingCertificateVersion as Version, TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,
TC.JointAssuredName, TC.OwnerReference, TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,
TC.PolicyYear, TC.CertificateIssueDate, TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity,
TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,
TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower,
TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList,
TC.Type_Id as TradingCertificateTypeId, RG.Id as TradingCertificateGroupId,
RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode, RT.TypeCode, RT.Name as TypeName,
TC.CertificateIssueDate
from TradingCertificate TC
inner join ref_Type RT on RT.Id=TC.Type_Id
inner join ref_Group RG on RG.Id = RT.Group_Id
inner join 
(SELECT riskreference, type_id, max(tradingcertificateversion) as VersionRef
  FROM [dbo].[TradingCertificate]
--where riskreference = 684956
group by  riskreference, type_id) Cvers
on TC.RiskReference = Cvers.RiskReference and TC.Type_Id = Cvers.Type_Id and TC.TradingCertificateVersion  = Cvers.VersionRef
left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id and BS.IsDeleted = 0
where TC.CurrentStatus='Issued'
--and TC.RiskReference=684956
order by TC.Id asc, TC.CertificateIssueDate desc
"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_RiskSelectionByTradingCertificatesByRiskReference.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_RiskSelectionByTradingCertificatesByRiskReference.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_RiskSelectionByTradingCertificatesByRiskReference.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_RiskSelectionByTradingCertificatesByRiskReference"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_RiskSelectionByTradingCertificatesByRiskReference"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_Response_RiskSelectionByTradingCertificatesByRiskReference"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_Type_Id"+","+"SQL_TradingCertificateId"+","+"SQL_RiskReference"+","+"SQL_Name"+","+"SQL_GroupCode"+","+"SQL_AddressType_Id"+","+"SQL_SourceSystem"+","+"SQL_Reference"+","+"SQL_CurrentStatus"+","+"SQL_StorageId"+","+"SQL_RiskId"+","+"SQL_PolicyId"+","+"SQL_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"SQL_IsRenewal"+","+"SQL_IsRenewalFlag"+","+"SQL_IsYacht"+","+"SQL_IsYachtFlag"+","+"SQL_Version"+","+"SQL_RiskReference"+","+"SQL_PolicyReference"+","+"SQL_MemberReference"+","+"SQL_MemberType"+","+"SQL_MemberName"+","+"SQL_JointAssuredName"+","+"SQL_OwnerReference"+","+"SQL_OwnerName"+","+"SQL_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"SQL_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"SQL_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"SQL_CcEmailAddress"+","+"SQL_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"SQL_VesselName"+","+"SQL_VesselType"+","+"SQL_VesselTypeName"+","+"SQL_vesselEnteredDate"+","+"SQL_vesselFlag"+","+"SQL_imoNumber"+","+"SQL_distinctiveNumbersOrLetters"+","+"SQL_grossTonnage"+","+"SQL_yearBuilt"+","+"SQL_engineHorsePower"+","+"SQL_model"+","+"SQL_engineNo"+","+"SQL_NominatedStateFlag"+","+"SQL_NominatedStateFlagName"+","+"SQL_portOfRegistry"+","+"SQL_tenderReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"SQL_TypeCode"+","+"SQL_TypeName"+","+"SQL_CertificateIssueDate"+","+"SQL_StateAddressTypeName"+","+"SQL_StateAddressTypeId"+","+"SQL_StateTradingCertificateId"+","+"SQL_StateRiskReference"+","+"SQL_StateAddressId"+","+"SQL_StateAddressName"+","+"SQL_StateAddressLine1"+","+"SQL_StateAddressLine2"+","+"SQL_StateAddressName"+","+"SQL_StateStateOrCounty"+","+"SQL_StateCity"+","+"SQL_StateCountry"+","+"SQL_StatePostCode"+","+"SQL_StateIsPrimaryAddress"+","+"SQL_OwnerAddressTypeName"+","+"SQL_OwnerAddressTypeId"+","+"SQL_OwnerTradingCertificateId"+","+"SQL_OwnerRiskReference"+","+"SQL_OwnerAddressId"+","+"SQL_OwnerAddressName"+","+"SQL_OwnerAddressLine1"+","+"SQL_OwnerAddressLine2"+","+"SQL_OwnerAddressName"+","+"SQL_OwnerStateOrCounty"+","+"SQL_OwnerCity"+","+"SQL_OwnerCountry"+","+"SQL_OwnerPostCode"+","+"SQL_OwnerIsPrimaryAddress"+","+"SQL_BrokerAddressTypeName"+","+"SQL_BrokerAddressTypeId"+","+"SQL_BrokerTradingCertificateId"+","+"SQL_BrokerRiskReference"+","+"SQL_BrokerAddressId"+","+"SQL_BrokerAddressName"+","+"SQL_BrokerAddressLine1"+","+"SQL_BrokerAddressLine2"+","+"SQL_BrokerAddressName"+","+"SQL_BrokerStateOrCounty"+","+"SQL_BrokerCity"+","+"SQL_BrokerCountry"+","+"SQL_BrokerPostCode"+","+"SQL_BrokerIsPrimaryAddress"+","+"SQL_MemberAddressTypeName"+","+"SQL_MemberAddressTypeId"+","+"SQL_MemberTradingCertificateId"+","+"SQL_MemberRiskReference"+","+"SQL_MemberAddressId"+","+"SQL_MemberAddressName"+","+"SQL_MemberAddressLine1"+","+"SQL_MemberAddressLine2"+","+"SQL_MemberAddressName"+","+"SQL_MemberStateOrCounty"+","+"SQL_MemberCity"+","+"SQL_MemberCountry"+","+"SQL_MemberPostCode"+","+"SQL_MemberIsPrimaryAddress"+","+"SQL_JointAssuredAddressTypeName"+","+"SQL_JointAssuredAddressTypeId"+","+"SQL_JointAssuredTradingCertificateId"+","+"SQL_JointAssuredRiskReference"+","+"SQL_JointAssuredAddressId"+","+"SQL_JointAssuredAddressName"+","+"SQL_JointAssuredAddressLine1"+","+"SQL_JointAssuredAddressLine2"+","+"SQL_JointAssuredAddressName"+","+"SQL_JointAssuredStateOrCounty"+","+"SQL_JointAssuredCity"+","+"SQL_JointAssuredCountry"+","+"SQL_JointAssuredPostCode"+","+"SQL_JointAssuredIsPrimaryAddress"+","+"SQL_BranchAddressTypeName"+","+"SQL_BranchAddressTypeId"+","+"SQL_BranchTradingCertificateId"+","+"SQL_BranchRiskReference"+","+"SQL_BranchAddressId"+","+"SQL_BranchAddressName"+","+"SQL_BranchAddressLine1"+","+"SQL_BranchAddressLine2"+","+"SQL_BranchAddressName"+","+"SQL_BranchStateOrCounty"+","+"SQL_BranchCity"+","+"SQL_BranchCountry"+","+"SQL_BranchPostCode"+","+"SQL_BranchIsPrimaryAddress")
apiWriter.println("API_id"+","+"API_addressTypeId"+","+"API_sourceSystem"+","+"API_tradingCertificateId"+","+"API_addressTypeId"+","+"API_sourceSystem"+","+"API_reference"+","+"API_currentStatus"+","+"API_storageId"+","+"API_riskId"+","+"API_policyId"+","+"API_memberPartyId"+","+"API_ownerPartyId"+","+"API_brokerPartyId"+","+"API_isRenewal"+","+"API_isYacht"+","+"API_version"+","+"API_riskReference"+","+"API_policyReference"+","+"API_memberReference"+","+"API_memberType"+","+"API_memberName"+","+"API_jointAssuredName"+","+"API_ownerReference"+","+"API_ownerName"+","+"API_ownerDomicile"+","+"API_ownerEmailAddress"+","+"API_brokerReference"+","+"API_brokerName"+","+"API_brokerEmailAddress"+","+"API_policyYear"+","+"API_certificateIssueDate"+","+"API_emailAddress"+","+"API_ccEmailAddress"+","+"API_effectiveStartDate"+","+"API_effectiveEndDate"+","+"API_passengerCapacity"+","+"API_policyStartDate"+","+"API_policyEndDate"+","+"API_currencyCode"+","+"API_coverLimitAmount"+","+"API_signatoryStateId"+","+"API_vesselName"+","+"API_vesselType"+","+"API_vesselTypeName"+","+"API_vesselEnteredDate"+","+"API_vesselFlag"+","+"API_imoNumber"+","+"API_distinctiveNumbersOrLetters"+","+"API_grossTonnage"+","+"API_yearBuilt"+","+"API_engineHorsePower"+","+"API_trademarkAndEngineModel"+","+"API_model"+","+"API_engineNo"+","+"API_nominatedFlagState"+","+"API_nominatedFlagStateName"+","+"API_portOfRegistry"+","+"API_tenderReferenceList"+","+"API_tenderOutboardReferenceList"+","+"API_tradingCertificateTypeId"+","+"API_tradingCertificateGroupId"+","+"API_tradingCertificateGroupName"+","+"API_tradingCertificateGroupCode"+","+"API_tradingCertificateTypeTypeCode"+","+"API_tradingCertificateTypeTypeName"+","+"API_certificateIssueDate"+","+"API_effectiveStartDate"+","+"API_effectiveEndDate"+","+"API_policyStartDate"+","+"API_policyEndDate"+","+"API_vesselEnteredDate"+","+"API_stateAddressId"+","+"API_stateAddressName"+","+"API_stateAddressLine1"+","+"API_stateAddressLine2"+","+"API_stateAddressLine3"+","+"API_stateAddressStateOrCounty"+","+"API_stateAddressCity"+","+"API_stateAddressCountry"+","+"API_stateAddressPostCode"+","+"API_stateAddressPrimaryAddress"+","+"API_ownerAddressId"+","+"API_ownerAddressName"+","+"API_ownerAddressLine1"+","+"API_ownerAddressLine2"+","+"API_ownerAddressLine3"+","+"API_ownerAddressStateOrCounty"+","+"API_ownerAddressCity"+","+"API_ownerAddressCountry"+","+"API_ownerAddressPostCode"+","+"API_ownerAddressPrimaryAddress"+","+"API_brokerAddressId"+","+"API_brokerAddressName"+","+"API_brokerAddressLine1"+","+"API_brokerAddressLine2"+","+"API_brokerAddressLine3"+","+"API_brokerAddressStateOrCounty"+","+"API_brokerAddressCity"+","+"API_brokerAddressCountry"+","+"API_brokerAddressPostCode"+","+"API_brokerAddressPrimaryAddress"+","+"API_memberAddressId"+","+"API_memberAddressName"+","+"API_memberAddressLine1"+","+"API_memberAddressLine2"+","+"API_memberAddressLine3"+","+"API_memberAddressStateOrCounty"+","+"API_memberAddressCity"+","+"API_memberAddressCountry"+","+"API_memberAddressPostCode"+","+"API_memberAddressPrimaryAddress"+","+"API_jointAssuredAddressId"+","+"API_jointAssuredAddressName"+","+"API_jointAssuredAddressLine1"+","+"API_jointAssuredAddressLine2"+","+"API_jointAssuredAddressLine3"+","+"API_jointAssuredAddressStateOrCounty"+","+"API_jointAssuredAddressCity"+","+"API_jointAssuredAddressCountry"+","+"API_jointAssuredAddressPostCode"+","+"API_jointAssuredAddressPrimaryAddress"+","+"API_branchAddressId"+","+"API_branchAddressName"+","+"API_branchAddressLine1"+","+"API_branchAddressLine2"+","+"API_branchAddressLine3"+","+"API_branchAddressStateOrCounty"+","+"API_branchAddressCity"+","+"API_branchAddressCountry"+","+"API_branchAddressPostCode"+","+"API_branchAddressPrimaryAddress")
compareWriter.println("SQL_TradingCertificateGroupId"+","+"API_id"+","+"SQL_TradingCertificateGroupName"+","+"API_name"+","+"SQL_TradingCertificateGroupCode"+","+"API_groupCode"+","+"SQL_AddressType_Id"+","+"API_addressTypeId"+","+"SQL_TradingCertificateId"+","+"API_tradingCertificateId"+","+"SQL_SourceSystem"+","+"API_sourceSystem"+","+"SQL_Reference"+","+"API_reference"+","+"SQL_CurrentStatus"+","+"API_currentStatus"+","+"SQL_StorageId"+","+"API_storageId"+","+"SQL_RiskId"+","+"API_riskId"+","+"SQL_PolicyId"+","+"API_policyId"+","+"SQL_MemberPartyId"+","+"API_memberPartyId"+","+"SQL_OwnerPartyId"+","+"API_ownerPartyId"+","+"SQL_BrokerPartyId"+","+"API_brokerPartyId"+","+"SQL_IsRenewalFlag"+","+"API_isRenewal"+","+"SQL_IsYachtFlag"+","+"API_isYacht"+","+"SQL_Version"+","+"API_version"+","+"SQL_RiskReference"+","+"API_riskReference"+","+"SQL_PolicyReference"+","+"API_policyReference"+","+"SQL_MemberReference"+","+"API_memberReference"+","+"SQL_MemberType"+","+"API_memberType"+","+"SQL_MemberName"+","+"API_memberName"+","+"SQL_JointAssuredName"+","+"API_jointAssuredName"+","+"SQL_OwnerReference"+","+"API_ownerReference"+","+"SQL_OwnerName"+","+"API_ownerName"+","+"SQL_OwnerDomicile"+","+"API_ownerDomicile"+","+"SQL_OwnerEmailAddress"+","+"API_ownerEmailAddress"+","+"SQL_BrokerReference"+","+"API_brokerReference"+","+"SQL_BrokerName"+","+"API_brokerName"+","+"SQL_BrokerEmailAddress"+","+"API_brokerEmailAddress"+","+"SQL_PolicyYear"+","+"API_policyYear"+","+"SQL_EmailAddress"+","+"API_emailAddress"+","+"SQL_CcEmailAddress"+","+"API_ccEmailAddress"+","+"SQL_PassengerCapacity"+","+"API_passengerCapacity"+","+"SQL_CurrencyCode"+","+"API_currencyCode"+","+"SQL_CoverLimitAmount"+","+"API_coverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"API_signatoryStateId"+","+"SQL_VesselName"+","+"API_vesselName"+","+"SQL_VesselType"+","+"API_vesselType"+","+"SQL_VesselTypeName"+","+"API_vesselTypeName"+","+"SQL_vesselFlag"+","+"API_vesselFlag"+","+"SQL_imoNumber"+","+"API_imoNumber"+","+"SQL_distinctiveNumbersOrLetters"+","+"API_distinctiveNumbersOrLetters"+","+"SQL_grossTonnage"+","+"API_grossTonnage"+","+"SQL_yearBuilt"+","+"API_yearBuilt"+","+"SQL_engineHorsePower"+","+"API_engineHorsePower"+","+"SQL_model"+","+"API_model"+","+"SQL_engineNo"+","+"API_engineNo"+","+"SQL_NominatedStateFlag"+","+"API_nominatedFlagState"+","+"SQL_NominatedStateFlagName"+","+"API_nominatedFlagStateName"+","+"SQL_portOfRegistry"+","+"API_portOfRegistry"+","+"SQL_tenderReferenceList"+","+"API_tenderReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"API_tradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"API_tradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"API_tradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"API_tradingCertificateGroupCode"+","+"SQL_TypeCode"+","+"API_tradingCertificateTypeTypeCode"+","+"SQL_TypeName"+","+"API_tradingCertificateTypeTypeName"+","+"API_stateAddressId"+","+"SQL_StateAddressId"+","+"API_stateAddressName"+","+"SQL_StateAddressName"+","+"API_stateAddressLine1"+","+"SQL_StateAddressLine1"+","+"API_stateAddressLine2"+","+"SQL_StateAddressLine2"+","+"API_stateAddressLine3"+","+"SQL_StateAddressLine3"+","+"API_stateAddressStateOrCounty"+","+"SQL_StateStateOrCounty"+","+"API_stateAddressCity"+","+"SQL_StateCity"+","+"API_stateAddressCountry"+","+"SQL_StateCountry"+","+"API_stateAddressPostCode"+","+"SQL_StatePostCode"+","+"API_stateAddressPrimaryAddress"+","+"SQL_StateIsPrimaryAddress"+","+"API_ownerAddressId"+","+"SQL_OwnerAddressId"+","+"API_ownerAddressName"+","+"SQL_OwnerAddressName"+","+"API_ownerAddressLine1"+","+"SQL_OwnerAddressLine1"+","+"API_ownerAddressLine2"+","+"SQL_OwnerAddressLine2"+","+"API_ownerAddressLine3"+","+"SQL_OwnerAddressLine3"+","+"API_ownerAddressStateOrCounty"+","+"SQL_OwnerStateOrCounty"+","+"API_ownerAddressCity"+","+"SQL_OwnerCity"+","+"API_ownerAddressCountry"+","+"SQL_OwnerCountry"+","+"API_ownerAddressPostCode"+","+"SQL_OwnerPostCode"+","+"API_ownerAddressPrimaryAddress"+","+"SQL_OwnerIsPrimaryAddress"+","+"API_brokerAddressId"+","+"SQL_BrokerAddressId"+","+"API_brokerAddressName"+","+"SQL_BrokerAddressName"+","+"API_brokerAddressLine1"+","+"SQL_BrokerAddressLine1"+","+"API_brokerAddressLine2"+","+"SQL_BrokerAddressLine2"+","+"API_brokerAddressLine3"+","+"SQL_BrokerAddressLine3"+","+"API_brokerAddressStateOrCounty"+","+"SQL_BrokerStateOrCounty"+","+"API_brokerAddressCity"+","+"SQL_BrokerCity"+","+"API_brokerAddressCountry"+","+"SQL_BrokerCountry"+","+"API_brokerAddressPostCode"+","+"SQL_BrokerPostCode"+","+"API_brokerAddressPrimaryAddress"+","+"SQL_BrokerIsPrimaryAddress"+","+"API_memberAddressId"+","+"SQL_MemberAddressId"+","+"API_memberAddressName"+","+"SQL_MemberAddressName"+","+"API_memberAddressLine1"+","+"SQL_MemberAddressLine1"+","+"API_memberAddressLine2"+","+"SQL_MemberAddressLine2"+","+"API_memberAddressLine3"+","+"SQL_MemberAddressLine3"+","+"API_memberAddressStateOrCounty"+","+"SQL_MemberStateOrCounty"+","+"API_memberAddressCity"+","+"SQL_MemberCity"+","+"API_memberAddressCountry"+","+"SQL_MemberCountry"+","+"API_memberAddressPostCode"+","+"SQL_MemberPostCode"+","+"API_memberAddressPrimaryAddress"+","+"SQL_MemberIsPrimaryAddress"+","+"API_jointAssuredAddressId"+","+"SQL_JointAssuredAddressId"+","+"API_jointAssuredAddressName"+","+"SQL_JointAssuredAddressName"+","+"API_jointAssuredAddressLine1"+","+"SQL_JointAssuredAddressLine1"+","+"API_jointAssuredAddressLine2"+","+"SQL_JointAssuredAddressLine2"+","+"API_jointAssuredAddressLine3"+","+"SQL_JointAssuredAddressLine3"+","+"API_jointAssuredAddressStateOrCounty"+","+"SQL_JointAssuredStateOrCounty"+","+"API_jointAssuredAddressCity"+","+"SQL_JointAssuredCity"+","+"API_jointAssuredAddressCountry"+","+"SQL_JointAssuredCountry"+","+"API_jointAssuredAddressPostCode"+","+"SQL_JointAssuredPostCode"+","+"API_jointAssuredAddressPrimaryAddress"+","+"SQL_JointAssuredIsPrimaryAddress"+","+"API_branchAddressId"+","+"SQL_BranchAddressId"+","+"API_branchAddressName"+","+"SQL_BranchAddressName"+","+"API_branchAddressLine1"+","+"SQL_BranchAddressLine1"+","+"API_branchAddressLine2"+","+"SQL_BranchAddressLine2"+","+"API_branchAddressLine3"+","+"SQL_BranchAddressLine3"+","+"API_branchAddressStateOrCounty"+","+"SQL_BranchStateOrCounty"+","+"API_branchAddressCity"+","+"SQL_BranchCity"+","+"API_branchAddressCountry"+","+"SQL_BranchCountry"+","+"API_branchAddressPostCode"+","+"SQL_BranchPostCode"+","+"API_branchAddressPrimaryAddress"+","+"SQL_BranchIsPrimaryAddress"+","+"Test Case is Status")

def response= null
def jsonSlurper=null
def jsonRes=null
String field=null
int counter=0

def rows=con.rows(sqlstmt)  
int db_size=rows.size

con.eachRow(sqlstmt)
{	
	row ->
	sql_Type_Id=row.Type_Id
	sql_TradingCertificateId=row.TradingCertificateId
	sql_RiskReference=row.RiskReference
	sql_Name=row.Name
	sql_GroupCode=row.GroupCode
	sql_AddressType_Id=row.AddressType_Id
	sql_SourceSystem=row.SourceSystem
	sql_Reference=row.Reference
	sql_CurrentStatus=row.CurrentStatus
	sql_StorageId=row.StorageId
	sql_RiskId=row.RiskId
	sql_PolicyId=row.PolicyId
	sql_MemberPartyId=row.MemberPartyId
	sql_OwnerPartyId=row.OwnerPartyId
	sql_BrokerPartyId=row.BrokerPartyId
	sql_IsRenewal=row.IsRenewal
	sql_IsRenewalFlag=row.IsRenewalFlag
	sql_IsYacht=row.IsYacht
	sql_IsYachtFlag=row.IsYachtFlag
	sql_Version=row.Version
	sql_RiskReference=row.RiskReference
	sql_PolicyReference=row.PolicyReference
	sql_MemberReference=row.MemberReference
	sql_MemberType=row.MemberType
	sql_MemberName=row.MemberName
	sql_MemberName = removeComma(sql_MemberName.toString())
	sql_JointAssuredName=row.JointAssuredName
	sql_JointAssuredName = removeComma(sql_JointAssuredName.toString())
	sql_OwnerReference=row.OwnerReference
	sql_OwnerName=row.OwnerName
	sql_OwnerName = removeComma(sql_OwnerName.toString())
	sql_OwnerDomicile=row.OwnerDomicile
	sql_OwnerEmailAddress=row.OwnerEmailAddress
	sql_BrokerReference=row.BrokerReference
	sql_BrokerName=row.BrokerName
	sql_BrokerName = removeComma(sql_BrokerName.toString())
	sql_BrokerEmailAddress=row.BrokerEmailAddress
	sql_PolicyYear=row.PolicyYear
	sql_CertificateIssueDate=row.CertificateIssueDate
	sql_EmailAddress=row.EmailAddress
	sql_CcEmailAddress=row.CcEmailAddress
	sql_EffectiveStartDate=row.EffectiveStartDate
	sql_EffectiveEndDate=row.EffectiveEndDate
	sql_PassengerCapacity=row.PassengerCapacity
	sql_PolicyStartDate=row.PolicyStartDate
	sql_PolicyEndDate=row.PolicyEndDate
	sql_CurrencyCode=row.CurrencyCode
	sql_CoverLimitAmount=row.CoverLimitAmount
	sql_CoverLimitAmount = removeDotFromCurrency(sql_CoverLimitAmount.toString())
	sql_SignatoryState_Id=row.SignatoryState_Id
	sql_VesselName=row.VesselName
	sql_VesselName = removeComma(sql_VesselName.toString())
	sql_VesselType=row.VesselType
	sql_VesselTypeName=row.VesselTypeName
	sql_vesselEnteredDate=row.vesselEnteredDate
	sql_vesselFlag=row.vesselFlag
	sql_imoNumber=row.imoNumber
	sql_distinctiveNumbersOrLetters=row.distinctiveNumbersOrLetters
	sql_grossTonnage=row.grossTonnage
	sql_yearBuilt=row.yearBuilt
	sql_engineHorsePower=row.engineHorsePower
	sql_model=row.model
	sql_engineNo=row.engineNo
	sql_NominatedStateFlag=row.NominatedStateFlag
	sql_NominatedStateFlagName=row.NominatedStateFlagName
	sql_NominatedStateFlagName = removeComma(sql_NominatedStateFlagName.toString())
	sql_portOfRegistry=row.portOfRegistry
	sql_portOfRegistry = removeComma(sql_portOfRegistry.toString())
	sql_tenderReferenceList=row.tenderReferenceList
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateGroupId=row.TradingCertificateGroupId
	sql_TradingCertificateGroupName=row.TradingCertificateGroupName
	sql_TradingCertificateGroupCode=row.TradingCertificateGroupCode
	sql_TypeCode=row.TypeCode
	sql_TypeName=row.TypeName
	sql_CertificateIssueDate=row.CertificateIssueDate
	
	//sqlWriter.println(sql_Type_Id+","+sql_TradingCertificateId+","+sql_RiskReference+","+sql_Name+","+sql_GroupCode+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TypeCode+","+sql_TypeName+","+sql_CertificateIssueDate)
	//log.info "SQL Response received as ==>"+sql_Type_Id+","+sql_TradingCertificateId+","+sql_RiskReference+","+sql_Name+","+sql_GroupCode+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TypeCode+","+sql_TypeName+","+sql_CertificateIssueDate

	//Set Id as parameter to test case level
	String riskReference = sql_RiskReference
	testRunner.testCase.setPropertyValue("riskReference", riskReference)
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('RiskSelectionTradCertsByRiskRef')
	String req='${RiskSelectionTradCertsByRiskRef#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)	

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RiskSelectionTradCertsByRiskRef"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	
	String error = response
	if(httpStatusCode.equals("200"))
	{
		def json = new JsonSlurper().parseText(response)
		//log.info "Json TC length---------->"+json.tradingCertificates.size()
		//log.info "Json Id length---------->"+json.id.size()
		//log.info "Json tradingCertificates length---------->"+json.tradingCertificates.size()

		int myCount=0;
		for (int i=0; i<json.tradingCertificates.size(); i++)
		{
			int tcIdCount = json.tradingCertificates[i].id.size().toInteger()
			for (int j=0; j<json.tradingCertificates[i].id.size(); j++)
			{
				if(json.tradingCertificates[i].id[j].toString().equals(sql_TradingCertificateId.toString()))
				{
					api_id = json.id[i]
					api_name = json.name[i]
					api_groupCode = json.groupCode[i]
					api_tradingCertificateId = json.tradingCertificates[i].id[j]
					api_addressTypeId = json.tradingCertificates[i].addressTypeId[j]
					api_sourceSystem = json.tradingCertificates[i].sourceSystem[j]
					api_reference = json.tradingCertificates[i].reference[j]
					api_currentStatus = json.tradingCertificates[i].currentStatus[j]
					api_storageId = json.tradingCertificates[i].storageId[j]
					api_riskId = json.tradingCertificates[i].riskId[j]
					api_policyId = json.tradingCertificates[i].policyId[j]
					api_memberPartyId = json.tradingCertificates[i].memberPartyId[j]
					api_ownerPartyId = json.tradingCertificates[i].ownerPartyId[j]
					api_brokerPartyId = json.tradingCertificates[i].brokerPartyId[j]
					api_isRenewal = json.tradingCertificates[i].isRenewal[j]
					api_isYacht = json.tradingCertificates[i].isYacht[j]
					api_version = json.tradingCertificates[i].version[j]
					api_riskReference = json.tradingCertificates[i].riskReference[j]
					api_policyReference = json.tradingCertificates[i].policyReference[j]
					api_memberReference = json.tradingCertificates[i].memberReference[j]
					api_memberType = json.tradingCertificates[i].memberType[j]
					api_memberName = json.tradingCertificates[i].memberName[j]
					api_memberName= removeComma(api_memberName.toString())
					api_jointAssuredName = json.tradingCertificates[i].jointAssuredName[j]
					api_jointAssuredName= removeComma(api_jointAssuredName.toString())
					api_ownerReference = json.tradingCertificates[i].ownerReference[j]
					api_ownerName = json.tradingCertificates[i].ownerName[j]
					api_ownerName= removeComma(api_ownerName.toString())
					api_ownerDomicile = json.tradingCertificates[i].ownerDomicile[j]
					api_ownerEmailAddress = json.tradingCertificates[i].ownerEmailAddress[j]
					api_brokerReference = json.tradingCertificates[i].brokerReference[j]
					api_brokerName = json.tradingCertificates[i].brokerName[j]
					api_brokerName= removeComma(api_brokerName.toString())
					api_brokerEmailAddress = json.tradingCertificates[i].brokerEmailAddress[j]
					api_policyYear = json.tradingCertificates[i].policyYear[j]
					api_certificateIssueDate = json.tradingCertificates[i].certificateIssueDate[j]
					api_emailAddress = json.tradingCertificates[i].emailAddress[j]
					api_ccEmailAddress = json.tradingCertificates[i].ccEmailAddress[j]
					api_effectiveStartDate = json.tradingCertificates[i].effectiveStartDate[j]
					api_effectiveEndDate = json.tradingCertificates[i].effectiveEndDate[j]
					api_passengerCapacity = json.tradingCertificates[i].passengerCapacity[j]
					api_policyStartDate = json.tradingCertificates[i].policyStartDate[j]
					api_policyEndDate = json.tradingCertificates[i].policyEndDate[j]
					api_currencyCode = json.tradingCertificates[i].currencyCode[j]
					api_coverLimitAmount = json.tradingCertificates[i].coverLimitAmount[j]
					api_coverLimitAmount = removeDotFromCurrency(api_coverLimitAmount.toString())
					api_signatoryStateId = json.tradingCertificates[i].signatoryStateId[j]
					api_vesselName = json.tradingCertificates[i].vesselName[j]
					api_vesselName= removeComma(api_vesselName.toString())
					api_vesselType = json.tradingCertificates[i].vesselType[j]
					api_vesselTypeName = json.tradingCertificates[i].vesselTypeName[j]
					api_vesselEnteredDate = json.tradingCertificates[i].vesselEnteredDate[j]
					api_vesselFlag = json.tradingCertificates[i].vesselFlag[j]
					api_imoNumber = json.tradingCertificates[i].imoNumber[j]
					api_distinctiveNumbersOrLetters = json.tradingCertificates[i].distinctiveNumbersOrLetters[j]
					api_grossTonnage = json.tradingCertificates[i].grossTonnage[j]
					api_yearBuilt = json.tradingCertificates[i].yearBuilt[j]
					api_engineHorsePower = json.tradingCertificates[i].engineHorsePower[j]
					api_trademarkAndEngineModel = json.tradingCertificates[i].trademarkAndEngineModel[j]
					api_model = json.tradingCertificates[i].model[j]
					api_engineNo = json.tradingCertificates[i].engineNo[j]
					api_nominatedFlagState = json.tradingCertificates[i].nominatedFlagState[j]
					api_nominatedFlagStateName = json.tradingCertificates[i].nominatedFlagStateName[j]
					api_nominatedFlagStateName = removeComma(api_nominatedFlagStateName.toString())
					api_portOfRegistry = json.tradingCertificates[i].portOfRegistry[j]
					api_portOfRegistry = removeComma(api_portOfRegistry.toString())
					api_tenderReferenceList = json.tradingCertificates[i].tenderReferenceList[j]
					api_tenderOutboardReferenceList = json.tradingCertificates[i].tenderOutboardReferenceList[j]
					api_tradingCertificateTypeId = json.tradingCertificates[i].tradingCertificateType.id[j]
					api_tradingCertificateGroupId = json.tradingCertificates[i].tradingCertificateType.tradingCertificateGroup.id[j]
					api_tradingCertificateGroupName = json.tradingCertificates[i].tradingCertificateType.tradingCertificateGroup.name[j]
					api_tradingCertificateGroupCode = json.tradingCertificates[i].tradingCertificateType.tradingCertificateGroup.groupCode[j]
					api_tradingCertificateTypeTypeCode = json.tradingCertificates[i].tradingCertificateType.typeCode[j]
					api_tradingCertificateTypeTypeName = json.tradingCertificates[i].tradingCertificateType.typeName[j]
					
					//log.info "API response is received as ==>"+api_id+","+api_addressTypeId+","+api_sourceSystem+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_trademarkAndEngineModel+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName+","+api_certificateIssueDate+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_policyStartDate+","+api_policyEndDate+","+api_vesselEnteredDate
					//apiWriter.println(api_id+","+api_addressTypeId+","+api_sourceSystem+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_trademarkAndEngineModel+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName+","+api_certificateIssueDate+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_policyStartDate+","+api_policyEndDate+","+api_vesselEnteredDate)

					//log.info "Address is :"+json.tradingCertificates[i].stateAddress
					if(json.tradingCertificates[i].stateAddress[j]!=null)
					{
						api_stateAddressId= json.tradingCertificates[i].stateAddress[j].id
						api_stateAddressName= json.tradingCertificates[i].stateAddress[j].addressName
						api_stateAddressName= removeComma(api_stateAddressName.toString())
						api_stateAddressLine1= json.tradingCertificates[i].stateAddress[j].addressLine1
						api_stateAddressLine1= removeComma(api_stateAddressLine1.toString())
						api_stateAddressLine2= json.tradingCertificates[i].stateAddress[j].addressLine2
						api_stateAddressLine2= removeComma(api_stateAddressLine2.toString())
						api_stateAddressLine3= json.tradingCertificates[i].stateAddress[j].addressLine3
						api_stateAddressLine3= removeComma(api_stateAddressLine3.toString())
						api_stateAddressStateOrCounty= json.tradingCertificates[i].stateAddress[j].stateOrCounty
						api_stateAddressStateOrCounty= removeComma(api_stateAddressStateOrCounty.toString())
						api_stateAddressCity= json.tradingCertificates[i].stateAddress[j].city
						api_stateAddressCity= removeComma(api_stateAddressCity.toString())
						api_stateAddressCountry= json.tradingCertificates[i].stateAddress[j].country
						api_stateAddressCountry= removeComma(api_stateAddressCountry.toString())
						api_stateAddressPostCode= json.tradingCertificates[i].stateAddress[j].postCode
						api_stateAddressPrimaryAddress= json.tradingCertificates[i].stateAddress[j].primaryAddress
						//log.info "state Address is :"+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress
						
						int id =api_stateAddressId.toInteger()
						String getAddressSQL =
						"""
						declare
						@addressid as int = """+id+"""
						select RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
						ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
						ASN.PrimaryAddress,
						case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
						from AddressSnapshot ASN 
						inner join TradingCertificate TC on TC.Id = ASN.TradingCertificate_Id
						inner join ref_AddressType RAT on RAT.Id = ASN.AddressType_Id
						where ASN.IsDeleted=0 and
						ASN.Id=@addressid
						"""
						con.eachRow(getAddressSQL)
						{
							getRows->
							sql_StateAddressTypeName=getRows.AddressTypeName
							sql_StateAddressTypeId=getRows.AddressTypeId
							sql_StateTradingCertificateId=getRows.TradingCertificateId
							sql_StateRiskReference=getRows.RiskReference
							sql_StateAddressId=getRows.AddressId
							sql_StateAddressName=getRows.AddressName
							sql_StateAddressName = removeComma(sql_StateAddressName.toString())
							sql_StateAddressLine1=getRows.AddressLine1
							sql_StateAddressLine1 = removeComma(sql_StateAddressLine1.toString())
							sql_StateAddressLine2=getRows.AddressLine2
							sql_StateAddressLine2 = removeComma(sql_StateAddressLine2.toString())
							sql_StateAddressLine3=getRows.AddressLine3
							sql_StateAddressLine3 = removeComma(sql_StateAddressLine3.toString())
							sql_StateStateOrCounty=getRows.StateOrCounty
							sql_StateStateOrCounty = removeComma(sql_StateStateOrCounty.toString())
							sql_StateCity=getRows.City
							sql_StateCity = removeComma(sql_StateCity.toString())
							sql_StateCountry=getRows.Country
							sql_StateCountry = removeComma(sql_StateCountry.toString())
							sql_StatePostCode=getRows.PostCode
							sql_StateIsPrimaryAddress=getRows.IsPrimaryAddress
							log.info "State Address is received as ==> "+sql_StateAddressTypeName+","+sql_StateAddressTypeId+","+sql_StateTradingCertificateId+","+sql_StateRiskReference+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress
						}
					}
					else
					{
						api_stateAddressId= null
						api_stateAddressName= null
						api_stateAddressLine1= null
						api_stateAddressLine2= null
						api_stateAddressLine3= null
						api_stateAddressStateOrCounty= null
						api_stateAddressCity= null
						api_stateAddressCountry= null
						api_stateAddressPostCode= null
						api_stateAddressPrimaryAddress= null
						
						sql_StateAddressTypeName=null
						sql_StateAddressTypeId=null
						sql_StateTradingCertificateId=null
						sql_StateRiskReference=null
						sql_StateAddressId=null
						sql_StateAddressName=null
						sql_StateAddressLine1=null
						sql_StateAddressLine2=null
						sql_StateAddressLine3=null
						sql_StateStateOrCounty=null
						sql_StateCity=null
						sql_StateCountry=null
						sql_StatePostCode=null
						sql_StateIsPrimaryAddress=null

					}
					if(json.tradingCertificates[i].ownerAddress[j]!=null)
					{
						api_ownerAddressId= json.tradingCertificates[i].ownerAddress[j].id
						api_ownerAddressName= json.tradingCertificates[i].ownerAddress[j].addressName
						api_ownerAddressName= removeComma(api_ownerAddressName.toString())
						api_ownerAddressLine1= json.tradingCertificates[i].ownerAddress[j].addressLine1
						api_ownerAddressLine1= removeComma(api_ownerAddressLine1.toString())
						api_ownerAddressLine2= json.tradingCertificates[i].ownerAddress[j].addressLine2
						api_ownerAddressLine2= removeComma(api_ownerAddressLine2.toString())
						api_ownerAddressLine3= json.tradingCertificates[i].ownerAddress[j].addressLine3
						api_ownerAddressLine3= removeComma(api_ownerAddressLine3.toString())
						api_ownerAddressStateOrCounty= json.tradingCertificates[i].ownerAddress[j].stateOrCounty
						api_ownerAddressStateOrCounty= removeComma(api_ownerAddressStateOrCounty.toString())
						api_ownerAddressCity= json.tradingCertificates[i].ownerAddress[j].city
						api_ownerAddressCity= removeComma(api_ownerAddressCity.toString())
						api_ownerAddressCountry= json.tradingCertificates[i].ownerAddress[j].country
						api_ownerAddressCountry= removeComma(api_ownerAddressCountry.toString())
						api_ownerAddressPostCode= json.tradingCertificates[i].ownerAddress[j].postCode
						api_ownerAddressPrimaryAddress= json.tradingCertificates[i].ownerAddress[j].primaryAddress
						//log.info "Owner Address is :"+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress

						int id = api_ownerAddressId.toInteger()
						String getAddressSQL =
						"""
						declare
						@addressid as int = """+id+"""
						select RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
						ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
						ASN.PrimaryAddress,
						case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
						from AddressSnapshot ASN 
						inner join TradingCertificate TC on TC.Id = ASN.TradingCertificate_Id
						inner join ref_AddressType RAT on RAT.Id = ASN.AddressType_Id
						where ASN.IsDeleted=0 and
						ASN.Id=@addressid
						"""
						con.eachRow(getAddressSQL)
						{
							getRows->
							sql_OwnerAddressTypeName=getRows.AddressTypeName
							sql_OwnerAddressTypeId=getRows.AddressTypeId
							sql_OwnerTradingCertificateId=getRows.TradingCertificateId
							sql_OwnerRiskReference=getRows.RiskReference
							sql_OwnerAddressId=getRows.AddressId
							sql_OwnerAddressName=getRows.AddressName
							sql_OwnerAddressName = removeComma(sql_OwnerAddressName.toString())
							sql_OwnerAddressLine1=getRows.AddressLine1
							sql_OwnerAddressLine1 = removeComma(sql_OwnerAddressLine1.toString())
							sql_OwnerAddressLine2=getRows.AddressLine2
							sql_OwnerAddressLine2 = removeComma(sql_OwnerAddressLine2.toString())
							sql_OwnerAddressLine3=getRows.AddressLine3
							sql_OwnerAddressLine3 = removeComma(sql_OwnerAddressLine3.toString())
							sql_OwnerStateOrCounty=getRows.StateOrCounty
							sql_OwnerStaterOrCounty = removeComma(sql_OwnerStateOrCounty.toString())
							sql_OwnerCity=getRows.City
							sql_OwnerCity = removeComma(sql_OwnerCity.toString())
							sql_OwnerCountry=getRows.Country
							sql_OwnerCountry = removeComma(sql_OwnerCountry.toString())
							sql_OwnerPostCode=getRows.PostCode
							sql_OwnerIsPrimaryAddress=getRows.IsPrimaryAddress
							log.info "Owner Address is received as ==> "+sql_OwnerAddressTypeName+","+sql_OwnerAddressTypeId+","+sql_OwnerTradingCertificateId+","+sql_OwnerRiskReference+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressName+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress	
						}
					}
					else
					{
						api_ownerAddressId= null
						api_ownerAddressName= null
						api_ownerAddressLine1= null
						api_ownerAddressLine2= null
						api_ownerAddressLine3= null
						api_ownerAddressStateOrCounty= null
						api_ownerAddressCity= null
						api_ownerAddressCountry= null
						api_ownerAddressPostCode= null
						api_ownerAddressPrimaryAddress= null

						sql_OwnerAddressTypeName=null
						sql_OwnerAddressTypeId=null
						sql_OwnerTradingCertificateId=null
						sql_OwnerRiskReference=null
						sql_OwnerAddressId=null
						sql_OwnerAddressName=null
						sql_OwnerAddressLine1=null
						sql_OwnerAddressLine2=null
						sql_OwnerAddressLine3=null
						sql_OwnerStateOrCounty=null
						sql_OwnerCity=null
						sql_OwnerCountry=null
						sql_OwnerPostCode=null
						sql_OwnerIsPrimaryAddress=null
					}
					if(json.tradingCertificates[i].brokerAddress[j]!=null)
					{
						api_brokerAddressId= json.tradingCertificates[i].brokerAddress[j].id
						api_brokerAddressName= json.tradingCertificates[i].brokerAddress[j].addressName
						api_brokerAddressName= removeComma(api_brokerAddressName.toString())
						api_brokerAddressLine1= json.tradingCertificates[i].brokerAddress[j].addressLine1
						api_brokerAddressLine1= removeComma(api_brokerAddressLine1.toString())
						api_brokerAddressLine2= json.tradingCertificates[i].brokerAddress[j].addressLine2
						api_brokerAddressLine2= removeComma(api_brokerAddressLine2.toString())
						api_brokerAddressLine3= json.tradingCertificates[i].brokerAddress[j].addressLine3
						api_brokerAddressLine3= removeComma(api_brokerAddressLine3.toString())
						api_brokerAddressStateOrCounty= json.tradingCertificates[i].brokerAddress[j].stateOrCounty
						api_brokerAddressStateOrCounty= removeComma(api_brokerAddressStateOrCounty.toString())
						api_brokerAddressCity= json.tradingCertificates[i].brokerAddress[j].city
						api_brokerAddressCity= removeComma(api_brokerAddressCity.toString())
						api_brokerAddressCountry= json.tradingCertificates[i].brokerAddress[j].country
						api_brokerAddressCountry= removeComma(api_brokerAddressCountry.toString())
						api_brokerAddressPostCode= json.tradingCertificates[i].brokerAddress[j].postCode
						api_brokerAddressPrimaryAddress= json.tradingCertificates[i].brokerAddress[j].primaryAddress
						//log.info "Broker Address is :"+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress

						int id = api_brokerAddressId.toInteger()
						String getAddressSQL =
						"""
						declare
						@addressid as int = """+id+"""
						select RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
						ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
						ASN.PrimaryAddress,
						case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
						from AddressSnapshot ASN 
						inner join TradingCertificate TC on TC.Id = ASN.TradingCertificate_Id
						inner join ref_AddressType RAT on RAT.Id = ASN.AddressType_Id
						where ASN.IsDeleted=0 and
						ASN.Id=@addressid
						"""
						con.eachRow(getAddressSQL)
						{
							getRows->
							sql_BrokerAddressTypeName=getRows.AddressTypeName
							sql_BrokerAddressTypeId=getRows.AddressTypeId
							sql_BrokerTradingCertificateId=getRows.TradingCertificateId
							sql_BrokerRiskReference=getRows.RiskReference
							sql_BrokerAddressId=getRows.AddressId
							sql_BrokerAddressName=getRows.AddressName
							sql_BrokerAddressName = removeComma(sql_BrokerAddressName.toString())
							sql_BrokerAddressLine1=getRows.AddressLine1
							sql_BrokerAddressLine1 = removeComma(sql_BrokerAddressLine1.toString())
							sql_BrokerAddressLine2=getRows.AddressLine2
							sql_BrokerAddressLine2 = removeComma(sql_BrokerAddressLine2.toString())
							sql_BrokerAddressLine3=getRows.AddressLine3
							sql_BrokerAddressLine3 = removeComma(sql_BrokerAddressLine3.toString())
							sql_BrokerStateOrCounty=getRows.StateOrCounty
							sql_BrokerStaterOrCounty = removeComma(sql_BrokerStateOrCounty.toString())
							sql_BrokerCity=getRows.City
							sql_BrokerCity = removeComma(sql_BrokerCity.toString())
							sql_BrokerCountry=getRows.Country
							sql_BrokerCountry = removeComma(sql_BrokerCountry.toString())
							sql_BrokerPostCode=getRows.PostCode
							sql_BrokerIsPrimaryAddress=getRows.IsPrimaryAddress
							log.info "Broker Address is received as ==> "+sql_BrokerAddressTypeName+","+sql_BrokerAddressTypeId+","+sql_BrokerTradingCertificateId+","+sql_BrokerRiskReference+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressName+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress	
						}
					}
					else
					{
						api_brokerAddressId= null
						api_brokerAddressName= null
						api_brokerAddressLine1= null
						api_brokerAddressLine2= null
						api_brokerAddressLine3= null
						api_brokerAddressStateOrCounty= null
						api_brokerAddressCity= null
						api_brokerAddressCountry= null
						api_brokerAddressPostCode= null
						api_brokerAddressPrimaryAddress= null

						sql_BrokerAddressTypeName=null
						sql_BrokerAddressTypeId=null
						sql_BrokerTradingCertificateId=null
						sql_BrokerRiskReference=null
						sql_BrokerAddressId=null
						sql_BrokerAddressName=null
						sql_BrokerAddressLine1=null
						sql_BrokerAddressLine2=null
						sql_BrokerAddressLine3=null
						sql_BrokerStateOrCounty=null
						sql_BrokerCity=null
						sql_BrokerCountry=null
						sql_BrokerPostCode=null
						sql_BrokerIsPrimaryAddress=null
					}
					if(json.tradingCertificates[i].memberAddress[j]!=null)
					{
						api_memberAddressId= json.tradingCertificates[i].memberAddress[j].id						
						api_memberAddressName= json.tradingCertificates[i].memberAddress[j].addressName
						api_memberAddressName= removeComma(api_memberAddressName.toString())
						api_memberAddressLine1= json.tradingCertificates[i].memberAddress[j].addressLine1
						api_memberAddressLine1= removeComma(api_memberAddressLine1.toString())
						api_memberAddressLine2= json.tradingCertificates[i].memberAddress[j].addressLine2
						api_memberAddressLine2= removeComma(api_memberAddressLine2.toString())
						api_memberAddressLine3= json.tradingCertificates[i].memberAddress[j].addressLine3
						api_memberAddressLine3= removeComma(api_memberAddressLine3.toString())
						api_memberAddressStateOrCounty= json.tradingCertificates[i].memberAddress[j].stateOrCounty
						api_memberAddressStateOrCounty= removeComma(api_memberAddressStateOrCounty.toString())
						api_memberAddressCity= json.tradingCertificates[i].memberAddress[j].city
						api_memberAddressCity= removeComma(api_memberAddressCity.toString())
						api_memberAddressCountry= json.tradingCertificates[i].memberAddress[j].country
						api_memberAddressCountry= removeComma(api_memberAddressCountry.toString())
						api_memberAddressPostCode= json.tradingCertificates[i].memberAddress[j].postCode
						api_memberAddressPrimaryAddress= json.tradingCertificates[i].memberAddress[j].primaryAddress
						//log.info "Member Address is :"+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress

						int id = api_memberAddressId.toInteger()
						String getAddressSQL =
						"""
						declare
						@addressid as int = """+id+"""
						select RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
						ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
						ASN.PrimaryAddress,
						case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
						from AddressSnapshot ASN 
						inner join TradingCertificate TC on TC.Id = ASN.TradingCertificate_Id
						inner join ref_AddressType RAT on RAT.Id = ASN.AddressType_Id
						where ASN.IsDeleted=0 and
						ASN.Id=@addressid
						"""
						con.eachRow(getAddressSQL)
						{
							getRows->
							sql_MemberAddressTypeName=getRows.AddressTypeName
							sql_MemberAddressTypeId=getRows.AddressTypeId
							sql_MemberTradingCertificateId=getRows.TradingCertificateId
							sql_MemberRiskReference=getRows.RiskReference
							sql_MemberAddressId=getRows.AddressId
							sql_MemberAddressName=getRows.AddressName
							sql_MemberAddressName = removeComma(sql_MemberAddressName.toString())
							sql_MemberAddressLine1=getRows.AddressLine1
							sql_MemberAddressLine1 = removeComma(sql_MemberAddressLine1.toString())
							sql_MemberAddressLine2=getRows.AddressLine2
							sql_MemberAddressLine2 = removeComma(sql_MemberAddressLine2.toString())
							sql_MemberAddressLine3=getRows.AddressLine3
							sql_MemberAddressLine3 = removeComma(sql_MemberAddressLine3.toString())
							sql_MemberStateOrCounty=getRows.StateOrCounty
							sql_MemberStateOrCounty = removeComma(sql_MemberStateOrCounty.toString())
							sql_MemberCity=getRows.City
							sql_MemberCity = removeComma(sql_MemberCity.toString())
							sql_MemberCountry=getRows.Country
							sql_MemberCountry = removeComma(sql_MemberCountry.toString())
							sql_MemberPostCode=getRows.PostCode
							sql_MemberIsPrimaryAddress=getRows.IsPrimaryAddress
							log.info "Member Address is received as ==> "+sql_MemberAddressTypeName+","+sql_MemberAddressTypeId+","+sql_MemberTradingCertificateId+","+sql_MemberRiskReference+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressName+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress	
						}
					}
					else
					{
						api_memberAddressId= null
						api_memberAddressName= null
						api_memberAddressLine1= null
						api_memberAddressLine2= null
						api_memberAddressLine3= null
						api_memberAddressStateOrCounty= null
						api_memberAddressCity= null
						api_memberAddressCountry= null
						api_memberAddressPostCode= null
						api_memberAddressPrimaryAddress= null

						sql_MemberAddressTypeName=null
						sql_MemberAddressTypeId=null
						sql_MemberTradingCertificateId=null
						sql_MemberRiskReference=null
						sql_MemberAddressId=null
						sql_MemberAddressName=null
						sql_MemberAddressLine1=null
						sql_MemberAddressLine2=null
						sql_MemberAddressLine3=null
						sql_MemberStateOrCounty=null
						sql_MemberCity=null
						sql_MemberCountry=null
						sql_MemberPostCode=null
						sql_MemberIsPrimaryAddress=null
					}
					if(json.tradingCertificates[i].jointAssuredAddress[j]!=null)
					{
						api_jointAssuredAddressId= json.tradingCertificates[i].jointAssuredAddress[j].id
						api_jointAssuredAddressName= json.tradingCertificates[i].jointAssuredAddress[j].addressName
						api_jointAssuredAddressName= removeComma(api_jointAssuredAddressName.toString())
						api_jointAssuredAddressLine1= json.tradingCertificates[i].jointAssuredAddress[j].addressLine1
						api_jointAssuredAddressLine1= removeComma(api_jointAssuredAddressLine1.toString())
						api_jointAssuredAddressLine2= json.tradingCertificates[i].jointAssuredAddress[j].addressLine2
						api_jointAssuredAddressLine2= removeComma(api_jointAssuredAddressLine2.toString())
						api_jointAssuredAddressLine3= json.tradingCertificates[i].jointAssuredAddress[j].addressLine3
						api_jointAssuredAddressLine3= removeComma(api_jointAssuredAddressLine3.toString())
						api_jointAssuredAddressStateOrCounty= json.tradingCertificates[i].jointAssuredAddress[j].stateOrCounty
						api_jointAssuredAddressStateOrCounty= removeComma(api_jointAssuredAddressStateOrCounty.toString())
						api_jointAssuredAddressCity= json.tradingCertificates[i].jointAssuredAddress[j].city
						api_jointAssuredAddressCity= removeComma(api_jointAssuredAddressCity.toString())
						api_jointAssuredAddressCountry= json.tradingCertificates[i].jointAssuredAddress[j].country
						api_jointAssuredAddressCountry= removeComma(api_jointAssuredAddressCountry.toString())
						api_jointAssuredAddressPostCode= json.tradingCertificates[i].jointAssuredAddress[j].postCode
						api_jointAssuredAddressPrimaryAddress= json.tradingCertificates[i].jointAssuredAddress[j].primaryAddress
						//log.info "Joint Assured Address is :"+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress
						
						int id = api_jointAssuredAddressId.toInteger()
						String getAddressSQL =
						"""
						declare
						@addressid as int = """+id+"""
						select RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
						ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
						ASN.PrimaryAddress,
						case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
						from AddressSnapshot ASN 
						inner join TradingCertificate TC on TC.Id = ASN.TradingCertificate_Id
						inner join ref_AddressType RAT on RAT.Id = ASN.AddressType_Id
						where ASN.IsDeleted=0 and
						ASN.Id=@addressid
						"""
						con.eachRow(getAddressSQL)
						{
							getRows->
							sql_JointAssuredAddressTypeName=getRows.AddressTypeName
							sql_JointAssuredAddressTypeId=getRows.AddressTypeId
							sql_JointAssuredTradingCertificateId=getRows.TradingCertificateId
							sql_JointAssuredRiskReference=getRows.RiskReference
							sql_JointAssuredAddressId=getRows.AddressId
							sql_JointAssuredAddressName=getRows.AddressName
							sql_JointAssuredAddressName = removeComma(sql_JointAssuredAddressName.toString())
							sql_JointAssuredAddressLine1=getRows.AddressLine1
							sql_JointAssuredAddressLine1 = removeComma(sql_JointAssuredAddressLine1.toString())
							sql_JointAssuredAddressLine2=getRows.AddressLine2
							sql_JointAssuredAddressLine2 = removeComma(sql_JointAssuredAddressLine2.toString())
							sql_JointAssuredAddressLine3=getRows.AddressLine3
							sql_JointAssuredAddressLine3 = removeComma(sql_JointAssuredAddressLine3.toString())
							sql_JointAssuredStateOrCounty=getRows.StateOrCounty
							sql_JointAssuredStaterOrCounty = removeComma(sql_JointAssuredStateOrCounty.toString())
							sql_JointAssuredCity=getRows.City
							sql_JointAssuredCity = removeComma(sql_JointAssuredCity.toString())
							sql_JointAssuredCountry=getRows.Country
							sql_JointAssuredCountry = removeComma(sql_JointAssuredCountry.toString())
							sql_JointAssuredPostCode=getRows.PostCode
							sql_JointAssuredIsPrimaryAddress=getRows.IsPrimaryAddress
							log.info "JointAssured Address is received as ==> "+sql_JointAssuredAddressTypeName+","+sql_JointAssuredAddressTypeId+","+sql_JointAssuredTradingCertificateId+","+sql_JointAssuredRiskReference+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressName+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress	
						}
					}
					else
					{
						api_jointAssuredAddressId= null
						api_jointAssuredAddressName= null
						api_jointAssuredAddressLine1= null
						api_jointAssuredAddressLine2= null
						api_jointAssuredAddressLine3= null
						api_jointAssuredAddressStateOrCounty= null
						api_jointAssuredAddressCity= null
						api_jointAssuredAddressCountry= null
						api_jointAssuredAddressPostCode= null
						api_jointAssuredAddressPrimaryAddress= null

						sql_JointAssuredAddressTypeName=null
						sql_JointAssuredAddressTypeId=null
						sql_JointAssuredTradingCertificateId=null
						sql_JointAssuredRiskReference=null
						sql_JointAssuredAddressId=null
						sql_JointAssuredAddressName=null
						sql_JointAssuredAddressLine1=null
						sql_JointAssuredAddressLine2=null
						sql_JointAssuredAddressLine3=null
						sql_JointAssuredStateOrCounty=null
						sql_JointAssuredCity=null
						sql_JointAssuredCountry=null
						sql_JointAssuredPostCode=null
						sql_JointAssuredIsPrimaryAddress=null
					}
					if(json.tradingCertificates[i].branchAddress[j]!=null)
					{
						api_branchAddressId= json.tradingCertificates[i].branchAddress[j].id
						api_branchAddressName= json.tradingCertificates[i].branchAddress[j].addressName
						api_branchAddressName= removeComma(api_branchAddressName.toString())
						api_branchAddressLine1= json.tradingCertificates[i].branchAddress[j].addressLine1
						api_branchAddressLine1= removeComma(api_branchAddressLine1.toString())
						api_branchAddressLine2= json.tradingCertificates[i].branchAddress[j].addressLine2
						api_branchAddressLine2= removeComma(api_branchAddressLine2.toString())
						api_branchAddressLine3= json.tradingCertificates[i].branchAddress[j].addressLine3
						api_branchAddressLine3= removeComma(api_branchAddressLine3.toString())
						api_branchAddressStateOrCounty= json.tradingCertificates[i].branchAddress[j].stateOrCounty
						api_branchAddressStateOrCounty= removeComma(api_branchAddressStateOrCounty.toString())
						api_branchAddressCity= json.tradingCertificates[i].branchAddress[j].city
						api_branchAddressCity= removeComma(api_branchAddressCity.toString())
						api_branchAddressCountry= json.tradingCertificates[i].branchAddress[j].country
						api_branchAddressCountry= removeComma(api_branchAddressCountry.toString())
						api_branchAddressPostCode= json.tradingCertificates[i].branchAddress[j].postCode
						api_branchAddressPrimaryAddress= json.tradingCertificates[i].branchAddress[j].primaryAddress
						//log.info "Branch Address is :"+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress
						
						int id = api_branchAddressId.toInteger()
						String getAddressSQL =
						"""
						declare
						@addressid as int = """+id+"""
						select RAT.Name as AddressTypeName, RAT.Id as AddressTypeId, TC.Id as TradingCertificateId, TC.RiskReference,
						ASN.Id as AddressId, ASN.AddressName, ASN.AddressLine1, ASN.AddressLine2, ASN.AddressLine3, ASN.StateOrCounty, ASN.City, ASN.Country, ASN.PostCode,
						ASN.PrimaryAddress,
						case when ASN.PrimaryAddress=0 then 'False' when ASN.PrimaryAddress=1 then 'True' end as IsPrimaryAddress
						from AddressSnapshot ASN 
						inner join TradingCertificate TC on TC.Id = ASN.TradingCertificate_Id
						inner join ref_AddressType RAT on RAT.Id = ASN.AddressType_Id
						where ASN.IsDeleted=0 and
						ASN.Id=@addressid
						"""
						con.eachRow(getAddressSQL)
						{
							getRows->
							sql_BranchAddressTypeName=getRows.AddressTypeName
							sql_BranchAddressTypeId=getRows.AddressTypeId
							sql_BranchTradingCertificateId=getRows.TradingCertificateId
							sql_BranchRiskReference=getRows.RiskReference
							sql_BranchAddressId=getRows.AddressId
							sql_BranchAddressName=getRows.AddressName
							sql_BranchAddressName = removeComma(sql_BranchAddressName.toString())
							sql_BranchAddressLine1=getRows.AddressLine1
							sql_BranchAddressLine1 = removeComma(sql_BranchAddressLine1.toString())
							sql_BranchAddressLine2=getRows.AddressLine2
							sql_BranchAddressLine2 = removeComma(sql_BranchAddressLine2.toString())
							sql_BranchAddressLine3=getRows.AddressLine3
							sql_BranchAddressLine3 = removeComma(sql_BranchAddressLine3.toString())
							sql_BranchStateOrCounty=getRows.StateOrCounty
							sql_BranchStaterOrCounty = removeComma(sql_BranchStateOrCounty.toString())
							sql_BranchCity=getRows.City
							sql_BranchCity = removeComma(sql_BranchCity.toString())
							sql_BranchCountry=getRows.Country
							sql_BranchCountry = removeComma(sql_BranchCountry.toString())
							sql_BranchPostCode=getRows.PostCode
							sql_BranchIsPrimaryAddress=getRows.IsPrimaryAddress
							log.info "Branch Address is received as ==> "+sql_BranchAddressTypeName+","+sql_BranchAddressTypeId+","+sql_BranchTradingCertificateId+","+sql_BranchRiskReference+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressName+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress	
						}						
					}
					else
					{
						api_branchAddressId= null
						api_branchAddressName= null
						api_branchAddressLine1= null
						api_branchAddressLine2= null
						api_branchAddressLine3= null
						api_branchAddressStateOrCounty= null
						api_branchAddressCity= null
						api_branchAddressCountry= null
						api_branchAddressPostCode= null
						api_branchAddressPrimaryAddress= null

						sql_BranchAddressTypeName=null
						sql_BranchAddressTypeId=null
						sql_BranchTradingCertificateId=null
						sql_BranchRiskReference=null
						sql_BranchAddressId=null
						sql_BranchAddressName=null
						sql_BranchAddressLine1=null
						sql_BranchAddressLine2=null
						sql_BranchAddressLine3=null
						sql_BranchStateOrCounty=null
						sql_BranchCity=null
						sql_BranchCountry=null
						sql_BranchPostCode=null
						sql_BranchIsPrimaryAddress=null
					}

					log.info "SQL response received as==>"+sql_Type_Id+","+sql_TradingCertificateId+","+sql_RiskReference+","+sql_Name+","+sql_GroupCode+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TypeCode+","+sql_TypeName+","+sql_CertificateIssueDate+","+sql_StateAddressTypeName+","+sql_StateAddressTypeId+","+sql_StateTradingCertificateId+","+sql_StateRiskReference+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress+","+sql_OwnerAddressTypeName+","+sql_OwnerAddressTypeId+","+sql_OwnerTradingCertificateId+","+sql_OwnerRiskReference+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressName+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress+","+sql_BrokerAddressTypeName+","+sql_BrokerAddressTypeId+","+sql_BrokerTradingCertificateId+","+sql_BrokerRiskReference+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressName+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress+","+sql_MemberAddressTypeName+","+sql_MemberAddressTypeId+","+sql_MemberTradingCertificateId+","+sql_MemberRiskReference+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressName+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress+","+sql_JointAssuredAddressTypeName+","+sql_JointAssuredAddressTypeId+","+sql_JointAssuredTradingCertificateId+","+sql_JointAssuredRiskReference+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressName+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress+","+sql_BranchAddressTypeName+","+sql_BranchAddressTypeId+","+sql_BranchTradingCertificateId+","+sql_BranchRiskReference+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressName+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress
					sqlWriter.println(sql_Type_Id+","+sql_TradingCertificateId+","+sql_RiskReference+","+sql_Name+","+sql_GroupCode+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_IsRenewal+","+sql_IsRenewalFlag+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TypeCode+","+sql_TypeName+","+sql_CertificateIssueDate+","+sql_StateAddressTypeName+","+sql_StateAddressTypeId+","+sql_StateTradingCertificateId+","+sql_StateRiskReference+","+sql_StateAddressId+","+sql_StateAddressName+","+sql_StateAddressLine1+","+sql_StateAddressLine2+","+sql_StateAddressName+","+sql_StateStateOrCounty+","+sql_StateCity+","+sql_StateCountry+","+sql_StatePostCode+","+sql_StateIsPrimaryAddress+","+sql_OwnerAddressTypeName+","+sql_OwnerAddressTypeId+","+sql_OwnerTradingCertificateId+","+sql_OwnerRiskReference+","+sql_OwnerAddressId+","+sql_OwnerAddressName+","+sql_OwnerAddressLine1+","+sql_OwnerAddressLine2+","+sql_OwnerAddressName+","+sql_OwnerStateOrCounty+","+sql_OwnerCity+","+sql_OwnerCountry+","+sql_OwnerPostCode+","+sql_OwnerIsPrimaryAddress+","+sql_BrokerAddressTypeName+","+sql_BrokerAddressTypeId+","+sql_BrokerTradingCertificateId+","+sql_BrokerRiskReference+","+sql_BrokerAddressId+","+sql_BrokerAddressName+","+sql_BrokerAddressLine1+","+sql_BrokerAddressLine2+","+sql_BrokerAddressName+","+sql_BrokerStateOrCounty+","+sql_BrokerCity+","+sql_BrokerCountry+","+sql_BrokerPostCode+","+sql_BrokerIsPrimaryAddress+","+sql_MemberAddressTypeName+","+sql_MemberAddressTypeId+","+sql_MemberTradingCertificateId+","+sql_MemberRiskReference+","+sql_MemberAddressId+","+sql_MemberAddressName+","+sql_MemberAddressLine1+","+sql_MemberAddressLine2+","+sql_MemberAddressName+","+sql_MemberStateOrCounty+","+sql_MemberCity+","+sql_MemberCountry+","+sql_MemberPostCode+","+sql_MemberIsPrimaryAddress+","+sql_JointAssuredAddressTypeName+","+sql_JointAssuredAddressTypeId+","+sql_JointAssuredTradingCertificateId+","+sql_JointAssuredRiskReference+","+sql_JointAssuredAddressId+","+sql_JointAssuredAddressName+","+sql_JointAssuredAddressLine1+","+sql_JointAssuredAddressLine2+","+sql_JointAssuredAddressName+","+sql_JointAssuredStateOrCounty+","+sql_JointAssuredCity+","+sql_JointAssuredCountry+","+sql_JointAssuredPostCode+","+sql_JointAssuredIsPrimaryAddress+","+sql_BranchAddressTypeName+","+sql_BranchAddressTypeId+","+sql_BranchTradingCertificateId+","+sql_BranchRiskReference+","+sql_BranchAddressId+","+sql_BranchAddressName+","+sql_BranchAddressLine1+","+sql_BranchAddressLine2+","+sql_BranchAddressName+","+sql_BranchStateOrCounty+","+sql_BranchCity+","+sql_BranchCountry+","+sql_BranchPostCode+","+sql_BranchIsPrimaryAddress)

					log.info "API response is received as ==>"+api_id+","+api_addressTypeId+","+api_sourceSystem+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_trademarkAndEngineModel+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName+","+api_certificateIssueDate+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_policyStartDate+","+api_policyEndDate+","+api_vesselEnteredDate+","+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress+","+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress+","+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress+","+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress+","+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress+","+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress
					apiWriter.println(api_id+","+api_addressTypeId+","+api_sourceSystem+","+api_tradingCertificateId+","+api_addressTypeId+","+api_sourceSystem+","+api_reference+","+api_currentStatus+","+api_storageId+","+api_riskId+","+api_policyId+","+api_memberPartyId+","+api_ownerPartyId+","+api_brokerPartyId+","+api_isRenewal+","+api_isYacht+","+api_version+","+api_riskReference+","+api_policyReference+","+api_memberReference+","+api_memberType+","+api_memberName+","+api_jointAssuredName+","+api_ownerReference+","+api_ownerName+","+api_ownerDomicile+","+api_ownerEmailAddress+","+api_brokerReference+","+api_brokerName+","+api_brokerEmailAddress+","+api_policyYear+","+api_certificateIssueDate+","+api_emailAddress+","+api_ccEmailAddress+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_passengerCapacity+","+api_policyStartDate+","+api_policyEndDate+","+api_currencyCode+","+api_coverLimitAmount+","+api_signatoryStateId+","+api_vesselName+","+api_vesselType+","+api_vesselTypeName+","+api_vesselEnteredDate+","+api_vesselFlag+","+api_imoNumber+","+api_distinctiveNumbersOrLetters+","+api_grossTonnage+","+api_yearBuilt+","+api_engineHorsePower+","+api_trademarkAndEngineModel+","+api_model+","+api_engineNo+","+api_nominatedFlagState+","+api_nominatedFlagStateName+","+api_portOfRegistry+","+api_tenderReferenceList+","+api_tenderOutboardReferenceList+","+api_tradingCertificateTypeId+","+api_tradingCertificateGroupId+","+api_tradingCertificateGroupName+","+api_tradingCertificateGroupCode+","+api_tradingCertificateTypeTypeCode+","+api_tradingCertificateTypeTypeName+","+api_certificateIssueDate+","+api_effectiveStartDate+","+api_effectiveEndDate+","+api_policyStartDate+","+api_policyEndDate+","+api_vesselEnteredDate+","+api_stateAddressId+","+api_stateAddressName+","+api_stateAddressLine1+","+api_stateAddressLine2+","+api_stateAddressLine3+","+api_stateAddressStateOrCounty+","+api_stateAddressCity+","+api_stateAddressCountry+","+api_stateAddressPostCode+","+api_stateAddressPrimaryAddress+","+api_ownerAddressId+","+api_ownerAddressName+","+api_ownerAddressLine1+","+api_ownerAddressLine2+","+api_ownerAddressLine3+","+api_ownerAddressStateOrCounty+","+api_ownerAddressCity+","+api_ownerAddressCountry+","+api_ownerAddressPostCode+","+api_ownerAddressPrimaryAddress+","+api_brokerAddressId+","+api_brokerAddressName+","+api_brokerAddressLine1+","+api_brokerAddressLine2+","+api_brokerAddressLine3+","+api_brokerAddressStateOrCounty+","+api_brokerAddressCity+","+api_brokerAddressCountry+","+api_brokerAddressPostCode+","+api_brokerAddressPrimaryAddress+","+api_memberAddressId+","+api_memberAddressName+","+api_memberAddressLine1+","+api_memberAddressLine2+","+api_memberAddressLine3+","+api_memberAddressStateOrCounty+","+api_memberAddressCity+","+api_memberAddressCountry+","+api_memberAddressPostCode+","+api_memberAddressPrimaryAddress+","+api_jointAssuredAddressId+","+api_jointAssuredAddressName+","+api_jointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+api_jointAssuredAddressCity+","+api_jointAssuredAddressCountry+","+api_jointAssuredAddressPostCode+","+api_jointAssuredAddressPrimaryAddress+","+api_branchAddressId+","+api_branchAddressName+","+api_branchAddressLine1+","+api_branchAddressLine2+","+api_branchAddressLine3+","+api_branchAddressStateOrCounty+","+api_branchAddressCity+","+api_branchAddressCountry+","+api_branchAddressPostCode+","+api_branchAddressPrimaryAddress)

					if(
						sql_TradingCertificateGroupId.toString().equals(api_id.toString()) &&
						sql_TradingCertificateGroupName.toString().toUpperCase().equals(api_name.toString().toUpperCase()) &&
						sql_TradingCertificateGroupCode.toString().toUpperCase().equals(api_groupCode.toString().toUpperCase()) &&
						sql_AddressType_Id.toString().equals(api_addressTypeId.toString()) &&
						sql_TradingCertificateId.toString().equals(api_tradingCertificateId.toString()) &&
						sql_SourceSystem.toString().toUpperCase().equals(api_sourceSystem.toString().toUpperCase()) &&
						sql_Reference.toString().equals(api_reference.toString()) &&
						sql_CurrentStatus.toString().toUpperCase().equals(api_currentStatus.toString().toUpperCase()) &&
						sql_StorageId.toString().equals(api_storageId.toString()) &&
						sql_RiskId.toString().equals(api_riskId.toString()) &&
						sql_PolicyId.toString().equals(api_policyId.toString()) &&
						sql_MemberPartyId.toString().equals(api_memberPartyId.toString()) &&
						sql_OwnerPartyId.toString().equals(api_ownerPartyId.toString()) &&
						sql_BrokerPartyId.toString().equals(api_brokerPartyId.toString()) &&
						sql_IsRenewalFlag.toString().toUpperCase().equals(api_isRenewal.toString().toUpperCase()) &&
						sql_IsYachtFlag.toString().toUpperCase().equals(api_isYacht.toString().toUpperCase()) &&
						sql_Version.toString().equals(api_version.toString()) &&
						sql_RiskReference.toString().equals(api_riskReference.toString()) &&
						sql_PolicyReference.toString().equals(api_policyReference.toString()) &&
						sql_MemberReference.toString().equals(api_memberReference.toString()) &&
						sql_MemberType.toString().toUpperCase().equals(api_memberType.toString().toUpperCase()) &&
						sql_MemberName.toString().toUpperCase().equals(api_memberName.toString().toUpperCase()) &&
						sql_JointAssuredName.toString().toUpperCase().equals(api_jointAssuredName.toString().toUpperCase()) &&
						sql_OwnerReference.toString().equals(api_ownerReference.toString()) &&
						sql_OwnerName.toString().toUpperCase().equals(api_ownerName.toString().toUpperCase()) &&
						sql_OwnerDomicile.toString().toUpperCase().equals(api_ownerDomicile.toString().toUpperCase()) &&
						sql_OwnerEmailAddress.toString().toUpperCase().equals(api_ownerEmailAddress.toString().toUpperCase()) &&
						sql_BrokerReference.toString().equals(api_brokerReference.toString()) &&
						sql_BrokerName.toString().toUpperCase().equals(api_brokerName.toString().toUpperCase()) &&
						sql_BrokerEmailAddress.toString().toUpperCase().equals(api_brokerEmailAddress.toString().toUpperCase()) &&
						sql_PolicyYear.toString().equals(api_policyYear.toString()) &&
						sql_EmailAddress.toString().toUpperCase().equals(api_emailAddress.toString().toUpperCase()) &&
						sql_CcEmailAddress.toString().toUpperCase().equals(api_ccEmailAddress.toString().toUpperCase()) &&
						sql_PassengerCapacity.toString().equals(api_passengerCapacity.toString()) &&
						sql_CurrencyCode.toString().toUpperCase().equals(api_currencyCode.toString().toUpperCase()) &&
						sql_CoverLimitAmount.toString().equals(api_coverLimitAmount.toString()) &&
						sql_SignatoryState_Id.toString().equals(api_signatoryStateId.toString()) &&
						sql_VesselName.toString().toUpperCase().equals(api_vesselName.toString().toUpperCase()) &&
						sql_VesselType.toString().toUpperCase().equals(api_vesselType.toString().toUpperCase()) &&
						sql_VesselTypeName.toString().toUpperCase().equals(api_vesselTypeName.toString().toUpperCase()) &&
						sql_vesselFlag.toString().toUpperCase().equals(api_vesselFlag.toString().toUpperCase()) &&
						sql_imoNumber.toString().equals(api_imoNumber.toString()) &&
						sql_distinctiveNumbersOrLetters.toString().toUpperCase().equals(api_distinctiveNumbersOrLetters.toString().toUpperCase()) &&
						sql_grossTonnage.toString().equals(api_grossTonnage.toString()) &&
						sql_yearBuilt.toString().equals(api_yearBuilt.toString()) &&
						sql_engineHorsePower.toString().equals(api_engineHorsePower.toString()) &&
						sql_model.toString().toUpperCase().equals(api_model.toString().toUpperCase()) &&
						sql_engineNo.toString().toUpperCase().equals(api_engineNo.toString().toUpperCase()) &&
						sql_NominatedStateFlag.toString().toUpperCase().equals(api_nominatedFlagState.toString().toUpperCase()) &&
						sql_NominatedStateFlagName.toString().toUpperCase().equals(api_nominatedFlagStateName.toString().toUpperCase()) &&
						sql_portOfRegistry.toString().toUpperCase().equals(api_portOfRegistry.toString().toUpperCase()) &&
						sql_tenderReferenceList.toString().equals(api_tenderReferenceList.toString()) &&
						sql_TradingCertificateTypeId.toString().equals(api_tradingCertificateTypeId.toString()) &&
						sql_TradingCertificateGroupId.toString().equals(api_tradingCertificateGroupId.toString()) &&
						sql_TradingCertificateGroupName.toString().toUpperCase().equals(api_tradingCertificateGroupName.toString().toUpperCase()) &&
						sql_TradingCertificateGroupCode.toString().toUpperCase().equals(api_tradingCertificateGroupCode.toString().toUpperCase()) &&
						sql_TypeCode.toString().toUpperCase().equals(api_tradingCertificateTypeTypeCode.toString().toUpperCase()) &&
						sql_TypeName.toString().toUpperCase().equals(api_tradingCertificateTypeTypeName.toString().toUpperCase()) &&

						api_stateAddressId.toString().equals(sql_StateAddressId.toString()) && 
						api_stateAddressName.toString().toUpperCase().equals(sql_StateAddressName.toString().toUpperCase()) && 
						api_stateAddressLine1.toString().toUpperCase().equals(sql_StateAddressLine1.toString().toUpperCase()) && 
						api_stateAddressLine2.toString().toUpperCase().equals(sql_StateAddressLine2.toString().toUpperCase()) && 
						api_stateAddressLine3.toString().toUpperCase().equals(sql_StateAddressLine3.toString().toUpperCase()) && 
						api_stateAddressStateOrCounty.toString().toUpperCase().equals(sql_StateStateOrCounty.toString().toUpperCase()) && 
						api_stateAddressCity.toString().toUpperCase().equals(sql_StateCity.toString().toUpperCase()) && 
						api_stateAddressCountry.toString().toUpperCase().equals(sql_StateCountry.toString().toUpperCase()) && 
						api_stateAddressPostCode.toString().toUpperCase().equals(sql_StatePostCode.toString().toUpperCase()) && 
						api_stateAddressPrimaryAddress.toString().toUpperCase().equals(sql_StateIsPrimaryAddress.toString().toUpperCase()) && 
						api_ownerAddressId.toString().equals(sql_OwnerAddressId.toString()) && 
						api_ownerAddressName.toString().toUpperCase().equals(sql_OwnerAddressName.toString().toUpperCase()) && 
						api_ownerAddressLine1.toString().toUpperCase().equals(sql_OwnerAddressLine1.toString().toUpperCase()) && 
						api_ownerAddressLine2.toString().toUpperCase().equals(sql_OwnerAddressLine2.toString().toUpperCase()) && 
						api_ownerAddressLine3.toString().toUpperCase().equals(sql_OwnerAddressLine3.toString().toUpperCase()) && 
						api_ownerAddressStateOrCounty.toString().toUpperCase().equals(sql_OwnerStateOrCounty.toString().toUpperCase()) && 
						api_ownerAddressCity.toString().toUpperCase().equals(sql_OwnerCity.toString().toUpperCase()) && 
						api_ownerAddressCountry.toString().toUpperCase().equals(sql_OwnerCountry.toString().toUpperCase()) && 
						api_ownerAddressPostCode.toString().toUpperCase().equals(sql_OwnerPostCode.toString().toUpperCase()) && 
						api_ownerAddressPrimaryAddress.toString().toUpperCase().equals(sql_OwnerIsPrimaryAddress.toString().toUpperCase()) && 
						api_brokerAddressId.toString().equals(sql_BrokerAddressId.toString()) && 
						api_brokerAddressName.toString().toUpperCase().equals(sql_BrokerAddressName.toString().toUpperCase()) && 
						api_brokerAddressLine1.toString().toUpperCase().equals(sql_BrokerAddressLine1.toString().toUpperCase()) && 
						api_brokerAddressLine2.toString().toUpperCase().equals(sql_BrokerAddressLine2.toString().toUpperCase()) && 
						api_brokerAddressLine3.toString().toUpperCase().equals(sql_BrokerAddressLine3.toString().toUpperCase()) && 
						api_brokerAddressStateOrCounty.toString().toUpperCase().equals(sql_BrokerStateOrCounty.toString().toUpperCase()) && 
						api_brokerAddressCity.toString().toUpperCase().equals(sql_BrokerCity.toString().toUpperCase()) && 
						api_brokerAddressCountry.toString().toUpperCase().equals(sql_BrokerCountry.toString().toUpperCase()) && 
						api_brokerAddressPostCode.toString().toUpperCase().equals(sql_BrokerPostCode.toString().toUpperCase()) && 
						api_brokerAddressPrimaryAddress.toString().toUpperCase().equals(sql_BrokerIsPrimaryAddress.toString().toUpperCase()) && 
						api_memberAddressId.toString().equals(sql_MemberAddressId.toString()) && 
						api_memberAddressName.toString().toUpperCase().equals(sql_MemberAddressName.toString().toUpperCase()) && 
						api_memberAddressLine1.toString().toUpperCase().equals(sql_MemberAddressLine1.toString().toUpperCase()) && 
						api_memberAddressLine2.toString().toUpperCase().equals(sql_MemberAddressLine2.toString().toUpperCase()) && 
						api_memberAddressLine3.toString().toUpperCase().equals(sql_MemberAddressLine3.toString().toUpperCase()) && 
						api_memberAddressStateOrCounty.toString().toUpperCase().equals(sql_MemberStateOrCounty.toString().toUpperCase()) && 
						api_memberAddressCity.toString().toUpperCase().equals(sql_MemberCity.toString().toUpperCase()) && 
						api_memberAddressCountry.toString().toUpperCase().equals(sql_MemberCountry.toString().toUpperCase()) && 
						api_memberAddressPostCode.toString().toUpperCase().equals(sql_MemberPostCode.toString().toUpperCase()) && 
						api_memberAddressPrimaryAddress.toString().toUpperCase().equals(sql_MemberIsPrimaryAddress.toString().toUpperCase()) && 
						api_jointAssuredAddressId.toString().equals(sql_JointAssuredAddressId.toString()) && 
						api_jointAssuredAddressName.toString().toUpperCase().equals(sql_JointAssuredAddressName.toString().toUpperCase()) && 
						api_jointAssuredAddressLine1.toString().toUpperCase().equals(sql_JointAssuredAddressLine1.toString().toUpperCase()) && 
						api_jointAssuredAddressLine2.toString().toUpperCase().equals(sql_JointAssuredAddressLine2.toString().toUpperCase()) && 
						api_jointAssuredAddressLine3.toString().toUpperCase().equals(sql_JointAssuredAddressLine3.toString().toUpperCase()) && 
						api_jointAssuredAddressStateOrCounty.toString().toUpperCase().equals(sql_JointAssuredStateOrCounty.toString().toUpperCase()) && 
						api_jointAssuredAddressCity.toString().toUpperCase().equals(sql_JointAssuredCity.toString().toUpperCase()) && 
						api_jointAssuredAddressCountry.toString().toUpperCase().equals(sql_JointAssuredCountry.toString().toUpperCase()) && 
						api_jointAssuredAddressPostCode.toString().toUpperCase().equals(sql_JointAssuredPostCode.toString().toUpperCase()) && 
						api_jointAssuredAddressPrimaryAddress.toString().toUpperCase().equals(sql_JointAssuredIsPrimaryAddress.toString().toUpperCase()) && 
						api_branchAddressId.toString().equals(sql_BranchAddressId.toString()) && 
						api_branchAddressName.toString().toUpperCase().equals(sql_BranchAddressName.toString().toUpperCase()) && 
						api_branchAddressLine1.toString().toUpperCase().equals(sql_BranchAddressLine1.toString().toUpperCase()) && 
						api_branchAddressLine2.toString().toUpperCase().equals(sql_BranchAddressLine2.toString().toUpperCase()) && 
						api_branchAddressLine3.toString().toUpperCase().equals(sql_BranchAddressLine3.toString().toUpperCase()) && 
						api_branchAddressStateOrCounty.toString().toUpperCase().equals(sql_BranchStateOrCounty.toString().toUpperCase()) && 
						api_branchAddressCity.toString().toUpperCase().equals(sql_BranchCity.toString().toUpperCase()) && 
						api_branchAddressCountry.toString().toUpperCase().equals(sql_BranchCountry.toString().toUpperCase()) && 
						api_branchAddressPostCode.toString().toUpperCase().equals(sql_BranchPostCode.toString().toUpperCase()) && 
						api_branchAddressPrimaryAddress.toString().toUpperCase().equals(sql_BranchIsPrimaryAddress.toString().toUpperCase())

						)
						{
							//compareWriter.println(sql_TradingCertificateGroupId+","+api_id+","+sql_TradingCertificateGroupName+","+api_name+","+sql_TradingCertificateGroupCode+","+api_groupCode+","+sql_AddressType_Id+","+api_addressTypeId+","+sql_TradingCertificateId+","+api_tradingCertificateId+","+sql_SourceSystem+","+api_sourceSystem+","+sql_Reference+","+api_reference+","+sql_CurrentStatus+","+api_currentStatus+","+sql_StorageId+","+api_storageId+","+sql_RiskId+","+api_riskId+","+sql_PolicyId+","+api_policyId+","+sql_MemberPartyId+","+api_memberPartyId+","+sql_OwnerPartyId+","+api_ownerPartyId+","+sql_BrokerPartyId+","+api_brokerPartyId+","+sql_IsRenewalFlag+","+api_isRenewal+","+sql_IsYachtFlag+","+api_isYacht+","+sql_Version+","+api_version+","+sql_RiskReference+","+api_riskReference+","+sql_PolicyReference+","+api_policyReference+","+sql_MemberReference+","+api_memberReference+","+sql_MemberType+","+api_memberType+","+sql_MemberName+","+api_memberName+","+sql_JointAssuredName+","+api_jointAssuredName+","+sql_OwnerReference+","+api_ownerReference+","+sql_OwnerName+","+api_ownerName+","+sql_OwnerDomicile+","+api_ownerDomicile+","+sql_OwnerEmailAddress+","+api_ownerEmailAddress+","+sql_BrokerReference+","+api_brokerReference+","+sql_BrokerName+","+api_brokerName+","+sql_BrokerEmailAddress+","+api_brokerEmailAddress+","+sql_PolicyYear+","+api_policyYear+","+sql_EmailAddress+","+api_emailAddress+","+sql_CcEmailAddress+","+api_ccEmailAddress+","+sql_PassengerCapacity+","+api_passengerCapacity+","+sql_CurrencyCode+","+api_currencyCode+","+sql_CoverLimitAmount+","+api_coverLimitAmount+","+sql_SignatoryState_Id+","+api_signatoryStateId+","+sql_VesselName+","+api_vesselName+","+sql_VesselType+","+api_vesselType+","+sql_VesselTypeName+","+api_vesselTypeName+","+sql_vesselFlag+","+api_vesselFlag+","+sql_imoNumber+","+api_imoNumber+","+sql_distinctiveNumbersOrLetters+","+api_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+api_grossTonnage+","+sql_yearBuilt+","+api_yearBuilt+","+sql_engineHorsePower+","+api_engineHorsePower+","+sql_model+","+api_model+","+sql_engineNo+","+api_engineNo+","+sql_NominatedStateFlag+","+api_nominatedFlagState+","+sql_NominatedStateFlagName+","+api_nominatedFlagStateName+","+sql_portOfRegistry+","+api_portOfRegistry+","+sql_tenderReferenceList+","+api_tenderReferenceList+","+sql_TradingCertificateTypeId+","+api_tradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_tradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_tradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_tradingCertificateGroupCode+","+sql_TypeCode+","+api_tradingCertificateTypeTypeCode+","+sql_TypeName+","+api_tradingCertificateTypeTypeName+","+"Test Case is Passed")
							compareWriter.println(sql_TradingCertificateGroupId+","+api_id+","+sql_TradingCertificateGroupName+","+api_name+","+sql_TradingCertificateGroupCode+","+api_groupCode+","+sql_AddressType_Id+","+api_addressTypeId+","+sql_TradingCertificateId+","+api_tradingCertificateId+","+sql_SourceSystem+","+api_sourceSystem+","+sql_Reference+","+api_reference+","+sql_CurrentStatus+","+api_currentStatus+","+sql_StorageId+","+api_storageId+","+sql_RiskId+","+api_riskId+","+sql_PolicyId+","+api_policyId+","+sql_MemberPartyId+","+api_memberPartyId+","+sql_OwnerPartyId+","+api_ownerPartyId+","+sql_BrokerPartyId+","+api_brokerPartyId+","+sql_IsRenewalFlag+","+api_isRenewal+","+sql_IsYachtFlag+","+api_isYacht+","+sql_Version+","+api_version+","+sql_RiskReference+","+api_riskReference+","+sql_PolicyReference+","+api_policyReference+","+sql_MemberReference+","+api_memberReference+","+sql_MemberType+","+api_memberType+","+sql_MemberName+","+api_memberName+","+sql_JointAssuredName+","+api_jointAssuredName+","+sql_OwnerReference+","+api_ownerReference+","+sql_OwnerName+","+api_ownerName+","+sql_OwnerDomicile+","+api_ownerDomicile+","+sql_OwnerEmailAddress+","+api_ownerEmailAddress+","+sql_BrokerReference+","+api_brokerReference+","+sql_BrokerName+","+api_brokerName+","+sql_BrokerEmailAddress+","+api_brokerEmailAddress+","+sql_PolicyYear+","+api_policyYear+","+sql_EmailAddress+","+api_emailAddress+","+sql_CcEmailAddress+","+api_ccEmailAddress+","+sql_PassengerCapacity+","+api_passengerCapacity+","+sql_CurrencyCode+","+api_currencyCode+","+sql_CoverLimitAmount+","+api_coverLimitAmount+","+sql_SignatoryState_Id+","+api_signatoryStateId+","+sql_VesselName+","+api_vesselName+","+sql_VesselType+","+api_vesselType+","+sql_VesselTypeName+","+api_vesselTypeName+","+sql_vesselFlag+","+api_vesselFlag+","+sql_imoNumber+","+api_imoNumber+","+sql_distinctiveNumbersOrLetters+","+api_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+api_grossTonnage+","+sql_yearBuilt+","+api_yearBuilt+","+sql_engineHorsePower+","+api_engineHorsePower+","+sql_model+","+api_model+","+sql_engineNo+","+api_engineNo+","+sql_NominatedStateFlag+","+api_nominatedFlagState+","+sql_NominatedStateFlagName+","+api_nominatedFlagStateName+","+sql_portOfRegistry+","+api_portOfRegistry+","+sql_tenderReferenceList+","+api_tenderReferenceList+","+sql_TradingCertificateTypeId+","+api_tradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_tradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_tradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_tradingCertificateGroupCode+","+sql_TypeCode+","+api_tradingCertificateTypeTypeCode+","+sql_TypeName+","+api_tradingCertificateTypeTypeName+","+api_stateAddressId+","+sql_StateAddressId+","+api_stateAddressName+","+sql_StateAddressName+","+api_stateAddressLine1+","+sql_StateAddressLine1+","+api_stateAddressLine2+","+sql_StateAddressLine2+","+api_stateAddressLine3+","+sql_StateAddressLine3+","+api_stateAddressStateOrCounty+","+sql_StateStateOrCounty+","+api_stateAddressCity+","+sql_StateCity+","+api_stateAddressCountry+","+sql_StateCountry+","+api_stateAddressPostCode+","+sql_StatePostCode+","+api_stateAddressPrimaryAddress+","+sql_StateIsPrimaryAddress+","+api_ownerAddressId+","+sql_OwnerAddressId+","+api_ownerAddressName+","+sql_OwnerAddressName+","+api_ownerAddressLine1+","+sql_OwnerAddressLine1+","+api_ownerAddressLine2+","+sql_OwnerAddressLine2+","+api_ownerAddressLine3+","+sql_OwnerAddressLine3+","+api_ownerAddressStateOrCounty+","+sql_OwnerStateOrCounty+","+api_ownerAddressCity+","+sql_OwnerCity+","+api_ownerAddressCountry+","+sql_OwnerCountry+","+api_ownerAddressPostCode+","+sql_OwnerPostCode+","+api_ownerAddressPrimaryAddress+","+sql_OwnerIsPrimaryAddress+","+api_brokerAddressId+","+sql_BrokerAddressId+","+api_brokerAddressName+","+sql_BrokerAddressName+","+api_brokerAddressLine1+","+sql_BrokerAddressLine1+","+api_brokerAddressLine2+","+sql_BrokerAddressLine2+","+api_brokerAddressLine3+","+sql_BrokerAddressLine3+","+api_brokerAddressStateOrCounty+","+sql_BrokerStateOrCounty+","+api_brokerAddressCity+","+sql_BrokerCity+","+api_brokerAddressCountry+","+sql_BrokerCountry+","+api_brokerAddressPostCode+","+sql_BrokerPostCode+","+api_brokerAddressPrimaryAddress+","+sql_BrokerIsPrimaryAddress+","+api_memberAddressId+","+sql_MemberAddressId+","+api_memberAddressName+","+sql_MemberAddressName+","+api_memberAddressLine1+","+sql_MemberAddressLine1+","+api_memberAddressLine2+","+sql_MemberAddressLine2+","+api_memberAddressLine3+","+sql_MemberAddressLine3+","+api_memberAddressStateOrCounty+","+sql_MemberStateOrCounty+","+api_memberAddressCity+","+sql_MemberCity+","+api_memberAddressCountry+","+sql_MemberCountry+","+api_memberAddressPostCode+","+sql_MemberPostCode+","+api_memberAddressPrimaryAddress+","+sql_MemberIsPrimaryAddress+","+api_jointAssuredAddressId+","+sql_JointAssuredAddressId+","+api_jointAssuredAddressName+","+sql_JointAssuredAddressName+","+api_jointAssuredAddressLine1+","+sql_JointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+sql_JointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+sql_JointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+sql_JointAssuredStateOrCounty+","+api_jointAssuredAddressCity+","+sql_JointAssuredCity+","+api_jointAssuredAddressCountry+","+sql_JointAssuredCountry+","+api_jointAssuredAddressPostCode+","+sql_JointAssuredPostCode+","+api_jointAssuredAddressPrimaryAddress+","+sql_JointAssuredIsPrimaryAddress+","+api_branchAddressId+","+sql_BranchAddressId+","+api_branchAddressName+","+sql_BranchAddressName+","+api_branchAddressLine1+","+sql_BranchAddressLine1+","+api_branchAddressLine2+","+sql_BranchAddressLine2+","+api_branchAddressLine3+","+sql_BranchAddressLine3+","+api_branchAddressStateOrCounty+","+sql_BranchStateOrCounty+","+api_branchAddressCity+","+sql_BranchCity+","+api_branchAddressCountry+","+sql_BranchCountry+","+api_branchAddressPostCode+","+sql_BranchPostCode+","+api_branchAddressPrimaryAddress+","+sql_BranchIsPrimaryAddress+","+"Test Case is Passed")
							log.info "Details are matching hence Test Case Passed"
						}
						else
						{
							//compareWriter.println(sql_TradingCertificateGroupId+","+api_id+","+sql_TradingCertificateGroupName+","+api_name+","+sql_TradingCertificateGroupCode+","+api_groupCode+","+sql_AddressType_Id+","+api_addressTypeId+","+sql_TradingCertificateId+","+api_tradingCertificateId+","+sql_SourceSystem+","+api_sourceSystem+","+sql_Reference+","+api_reference+","+sql_CurrentStatus+","+api_currentStatus+","+sql_StorageId+","+api_storageId+","+sql_RiskId+","+api_riskId+","+sql_PolicyId+","+api_policyId+","+sql_MemberPartyId+","+api_memberPartyId+","+sql_OwnerPartyId+","+api_ownerPartyId+","+sql_BrokerPartyId+","+api_brokerPartyId+","+sql_IsRenewalFlag+","+api_isRenewal+","+sql_IsYachtFlag+","+api_isYacht+","+sql_Version+","+api_version+","+sql_RiskReference+","+api_riskReference+","+sql_PolicyReference+","+api_policyReference+","+sql_MemberReference+","+api_memberReference+","+sql_MemberType+","+api_memberType+","+sql_MemberName+","+api_memberName+","+sql_JointAssuredName+","+api_jointAssuredName+","+sql_OwnerReference+","+api_ownerReference+","+sql_OwnerName+","+api_ownerName+","+sql_OwnerDomicile+","+api_ownerDomicile+","+sql_OwnerEmailAddress+","+api_ownerEmailAddress+","+sql_BrokerReference+","+api_brokerReference+","+sql_BrokerName+","+api_brokerName+","+sql_BrokerEmailAddress+","+api_brokerEmailAddress+","+sql_PolicyYear+","+api_policyYear+","+sql_EmailAddress+","+api_emailAddress+","+sql_CcEmailAddress+","+api_ccEmailAddress+","+sql_PassengerCapacity+","+api_passengerCapacity+","+sql_CurrencyCode+","+api_currencyCode+","+sql_CoverLimitAmount+","+api_coverLimitAmount+","+sql_SignatoryState_Id+","+api_signatoryStateId+","+sql_VesselName+","+api_vesselName+","+sql_VesselType+","+api_vesselType+","+sql_VesselTypeName+","+api_vesselTypeName+","+sql_vesselFlag+","+api_vesselFlag+","+sql_imoNumber+","+api_imoNumber+","+sql_distinctiveNumbersOrLetters+","+api_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+api_grossTonnage+","+sql_yearBuilt+","+api_yearBuilt+","+sql_engineHorsePower+","+api_engineHorsePower+","+sql_model+","+api_model+","+sql_engineNo+","+api_engineNo+","+sql_NominatedStateFlag+","+api_nominatedFlagState+","+sql_NominatedStateFlagName+","+api_nominatedFlagStateName+","+sql_portOfRegistry+","+api_portOfRegistry+","+sql_tenderReferenceList+","+api_tenderReferenceList+","+sql_TradingCertificateTypeId+","+api_tradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_tradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_tradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_tradingCertificateGroupCode+","+sql_TypeCode+","+api_tradingCertificateTypeTypeCode+","+sql_TypeName+","+api_tradingCertificateTypeTypeName+","+"Test Case is Failed")
							compareWriter.println(sql_TradingCertificateGroupId+","+api_id+","+sql_TradingCertificateGroupName+","+api_name+","+sql_TradingCertificateGroupCode+","+api_groupCode+","+sql_AddressType_Id+","+api_addressTypeId+","+sql_TradingCertificateId+","+api_tradingCertificateId+","+sql_SourceSystem+","+api_sourceSystem+","+sql_Reference+","+api_reference+","+sql_CurrentStatus+","+api_currentStatus+","+sql_StorageId+","+api_storageId+","+sql_RiskId+","+api_riskId+","+sql_PolicyId+","+api_policyId+","+sql_MemberPartyId+","+api_memberPartyId+","+sql_OwnerPartyId+","+api_ownerPartyId+","+sql_BrokerPartyId+","+api_brokerPartyId+","+sql_IsRenewalFlag+","+api_isRenewal+","+sql_IsYachtFlag+","+api_isYacht+","+sql_Version+","+api_version+","+sql_RiskReference+","+api_riskReference+","+sql_PolicyReference+","+api_policyReference+","+sql_MemberReference+","+api_memberReference+","+sql_MemberType+","+api_memberType+","+sql_MemberName+","+api_memberName+","+sql_JointAssuredName+","+api_jointAssuredName+","+sql_OwnerReference+","+api_ownerReference+","+sql_OwnerName+","+api_ownerName+","+sql_OwnerDomicile+","+api_ownerDomicile+","+sql_OwnerEmailAddress+","+api_ownerEmailAddress+","+sql_BrokerReference+","+api_brokerReference+","+sql_BrokerName+","+api_brokerName+","+sql_BrokerEmailAddress+","+api_brokerEmailAddress+","+sql_PolicyYear+","+api_policyYear+","+sql_EmailAddress+","+api_emailAddress+","+sql_CcEmailAddress+","+api_ccEmailAddress+","+sql_PassengerCapacity+","+api_passengerCapacity+","+sql_CurrencyCode+","+api_currencyCode+","+sql_CoverLimitAmount+","+api_coverLimitAmount+","+sql_SignatoryState_Id+","+api_signatoryStateId+","+sql_VesselName+","+api_vesselName+","+sql_VesselType+","+api_vesselType+","+sql_VesselTypeName+","+api_vesselTypeName+","+sql_vesselFlag+","+api_vesselFlag+","+sql_imoNumber+","+api_imoNumber+","+sql_distinctiveNumbersOrLetters+","+api_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+api_grossTonnage+","+sql_yearBuilt+","+api_yearBuilt+","+sql_engineHorsePower+","+api_engineHorsePower+","+sql_model+","+api_model+","+sql_engineNo+","+api_engineNo+","+sql_NominatedStateFlag+","+api_nominatedFlagState+","+sql_NominatedStateFlagName+","+api_nominatedFlagStateName+","+sql_portOfRegistry+","+api_portOfRegistry+","+sql_tenderReferenceList+","+api_tenderReferenceList+","+sql_TradingCertificateTypeId+","+api_tradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_tradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_tradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_tradingCertificateGroupCode+","+sql_TypeCode+","+api_tradingCertificateTypeTypeCode+","+sql_TypeName+","+api_tradingCertificateTypeTypeName+","+api_stateAddressId+","+sql_StateAddressId+","+api_stateAddressName+","+sql_StateAddressName+","+api_stateAddressLine1+","+sql_StateAddressLine1+","+api_stateAddressLine2+","+sql_StateAddressLine2+","+api_stateAddressLine3+","+sql_StateAddressLine3+","+api_stateAddressStateOrCounty+","+sql_StateStateOrCounty+","+api_stateAddressCity+","+sql_StateCity+","+api_stateAddressCountry+","+sql_StateCountry+","+api_stateAddressPostCode+","+sql_StatePostCode+","+api_stateAddressPrimaryAddress+","+sql_StateIsPrimaryAddress+","+api_ownerAddressId+","+sql_OwnerAddressId+","+api_ownerAddressName+","+sql_OwnerAddressName+","+api_ownerAddressLine1+","+sql_OwnerAddressLine1+","+api_ownerAddressLine2+","+sql_OwnerAddressLine2+","+api_ownerAddressLine3+","+sql_OwnerAddressLine3+","+api_ownerAddressStateOrCounty+","+sql_OwnerStateOrCounty+","+api_ownerAddressCity+","+sql_OwnerCity+","+api_ownerAddressCountry+","+sql_OwnerCountry+","+api_ownerAddressPostCode+","+sql_OwnerPostCode+","+api_ownerAddressPrimaryAddress+","+sql_OwnerIsPrimaryAddress+","+api_brokerAddressId+","+sql_BrokerAddressId+","+api_brokerAddressName+","+sql_BrokerAddressName+","+api_brokerAddressLine1+","+sql_BrokerAddressLine1+","+api_brokerAddressLine2+","+sql_BrokerAddressLine2+","+api_brokerAddressLine3+","+sql_BrokerAddressLine3+","+api_brokerAddressStateOrCounty+","+sql_BrokerStateOrCounty+","+api_brokerAddressCity+","+sql_BrokerCity+","+api_brokerAddressCountry+","+sql_BrokerCountry+","+api_brokerAddressPostCode+","+sql_BrokerPostCode+","+api_brokerAddressPrimaryAddress+","+sql_BrokerIsPrimaryAddress+","+api_memberAddressId+","+sql_MemberAddressId+","+api_memberAddressName+","+sql_MemberAddressName+","+api_memberAddressLine1+","+sql_MemberAddressLine1+","+api_memberAddressLine2+","+sql_MemberAddressLine2+","+api_memberAddressLine3+","+sql_MemberAddressLine3+","+api_memberAddressStateOrCounty+","+sql_MemberStateOrCounty+","+api_memberAddressCity+","+sql_MemberCity+","+api_memberAddressCountry+","+sql_MemberCountry+","+api_memberAddressPostCode+","+sql_MemberPostCode+","+api_memberAddressPrimaryAddress+","+sql_MemberIsPrimaryAddress+","+api_jointAssuredAddressId+","+sql_JointAssuredAddressId+","+api_jointAssuredAddressName+","+sql_JointAssuredAddressName+","+api_jointAssuredAddressLine1+","+sql_JointAssuredAddressLine1+","+api_jointAssuredAddressLine2+","+sql_JointAssuredAddressLine2+","+api_jointAssuredAddressLine3+","+sql_JointAssuredAddressLine3+","+api_jointAssuredAddressStateOrCounty+","+sql_JointAssuredStateOrCounty+","+api_jointAssuredAddressCity+","+sql_JointAssuredCity+","+api_jointAssuredAddressCountry+","+sql_JointAssuredCountry+","+api_jointAssuredAddressPostCode+","+sql_JointAssuredPostCode+","+api_jointAssuredAddressPrimaryAddress+","+sql_JointAssuredIsPrimaryAddress+","+api_branchAddressId+","+sql_BranchAddressId+","+api_branchAddressName+","+sql_BranchAddressName+","+api_branchAddressLine1+","+sql_BranchAddressLine1+","+api_branchAddressLine2+","+sql_BranchAddressLine2+","+api_branchAddressLine3+","+sql_BranchAddressLine3+","+api_branchAddressStateOrCounty+","+sql_BranchStateOrCounty+","+api_branchAddressCity+","+sql_BranchCity+","+api_branchAddressCountry+","+sql_BranchCountry+","+api_branchAddressPostCode+","+sql_BranchPostCode+","+api_branchAddressPrimaryAddress+","+sql_BranchIsPrimaryAddress+","+"Test Case is Failed")
							log.info "Details are not matching hence Test Case Failed"
						}
					
					break;		
				}//if condition ends here
			}// j for loop
		}// i for loop
	}
	else if(httpStatusCode.equals("401"))
	{
		log.info "API response is not received because : "+response
	}
	else if(httpStatusCode.equals("503"))
	{
		log.info "API response is not received because Service Temporarily Unavailable : "+response 
	}
	counter = 1+counter
	log.info "Total records tested are : "+counter
}

public String removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("[") || field.contains("]"))
	{
		field=field.replace("[", " ")
		field=field.replace("]", " ")
	}
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Risk Selection By Trading Certificates By Risk Reference***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>riskReference</con:name><con:value>684956</con:value></con:property></con:properties></con:testCase><con:testCase id="69d93cd4-22dd-49a6-86de-bc5a57468a96" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_PATCH_ TradingCertificates" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="POST_TradingCertSave" id="e9eecd03-cd42-49ac-9d68-e588d995442c"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/" methodName="POST_TradingCertificateSave" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST_TradingCertSave" id="f0efb725-78f1-47c2-a486-172c93cb9440" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>
	{
    "addressTypeId":8,
    "tradingCertificateTypeId": 26,
    "sourceSystem": "SIGMA",
    "reference": null,
    "riskId": 654321,
    "policyId": 91827,
    "memberPartyId": 56789,
    "riskReference": "602345",
    "policyReference": "1045678",
    "memberReference": "76567",
    "policyStartDate": "2021-02-28T12:00:00.000Z",
    "policyEndDate": "2021-02-28T12:00:00.000Z",
    "portOfRegistry": "TRIESTE"
	}
	</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Patch_TradingCertificate" id="89b92c7a-0fd6-4c8a-a2a2-e28007393459"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates" methodName="Patch_Tradingcertificates" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Patch_TradingCertificate" id="29763329-86fc-4dc9-8273-28e9bfd5be0d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>{"id":274140,"addressTypeId":8,"sourceSystem":"UTOM","reference":"76567/602345/ 2021/17","currentStatus":"CREATED","storageId":null,"riskId":654321,"policyId":91827,"memberPartyId":56789,"ownerPartyId":null,"brokerPartyId":null,"isRenewal":false,"isYacht":false,"version":17,"riskReference":"602345","policyReference":"1045678","memberReference":"76567","memberType":null,"memberName":null,"jointAssuredName":null,"ownerReference":null,"ownerName":null,"ownerDomicile":null,"ownerEmailAddress":null,"brokerReference":null,"brokerName":null,"brokerEmailAddress":null,"policyYear":null,"certificateIssueDate":null,"emailAddress":null,"ccEmailAddress":null,"effectiveStartDate":null,"effectiveEndDate":null,"passengerCapacity":null,"policyStartDate":"2021-02-28T12:00:00Z","policyEndDate":"2021-02-28T12:00:00Z","currencyCode":null,"coverLimitAmount":null,"signatoryStateId":null,"vesselName":null,"vesselType":null,"vesselTypeName":null,"vesselEnteredDate":null,"vesselFlag":null,"imoNumber":null,"distinctiveNumbersOrLetters":null,"grossTonnage":null,"yearBuilt":null,"engineHorsePower":null,"trademarkAndEngineModel":null,"model":null,"engineNo":null,"nominatedFlagState":null,"nominatedFlagStateName":null,"portOfRegistry":"TRIESTE","tenderReferenceList":null,"tenderOutboardReferenceList":null,"tradingCertificateTypeId":26,"tradingCertificateType":{"id":26,"tradingCertificateGroup":{"id":1,"name":"Trading Certificates","groupCode":"TRADECERT"},"typeCode":"MLCA421","typeName":"MLCA421"},"stateAddress":null,"ownerAddress":null,"brokerAddress":null,"memberAddress":null,"jointAssuredAddress":null,"branchAddress":null,"signatureName":null,"tradingCertificateBanks":[]}</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Test_Patch_TradingCertificate" id="0521c528-a828-432e-8411-d40077103c1e"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates" methodName="Test_Patch_Tradingcertificates" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Test_Patch_TradingCertificate" id="5e2213b2-74f8-4241-a73e-602434379a89" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>
		{
		"id": 274140,
		"addressTypeId": 8,
		"sourceSystem": "UTOM",
		"reference": "76567/602345/ 2021/17",
		"currentStatus": "CREATED",
		"storageId": null,
		"riskId": 654321,
		"policyId": 91827,
		"memberPartyId": 56789,
		"ownerPartyId": null,
		"brokerPartyId": null,
		"isRenewal": false,
		"isYacht": false,
		"version": "17",
		"riskReference": "602345",
		"policyReference": "1045678",
		"memberReference": "76567",
		"memberType": "Member",
		"memberName": "SIGMA TEST",
		"jointAssuredName": null,
		"ownerReference": "23407",
		"ownerName": "SD Marine Services Limited",
		"ownerDomicile": "India",
		"ownerEmailAddress": "subicbunker@hoyamarine.com",
		"brokerReference": "104",
		"brokerName": "Voyager Risk Solutions Limited",
		"brokerEmailAddress": "kevinkwan@voyfg.com",
		"policyYear": null,
		"certificateIssueDate": null,
		"emailAddress": "test@test.com",
		"ccEmailAddress": "ccTest@test.com",
		"effectiveStartDate": "2021-01-01T11:00:00.00Z",
		"effectiveEndDate": "2023-12-01T11:00:00.00Z",
		"passengerCapacity": "200",
		"policyStartDate": "2021-02-28T12:00:00Z",
		"policyEndDate": "2021-02-28T12:00:00Z",
		"currencyCode": "USD",
		"coverLimitAmount": "500000000.00",
		"signatoryStateId": 263,
		"vesselName": "Test3Policy Risk",
		"vesselType": "YA",
		"vesselTypeName": "YACHT CHARTER 13+ PAX",
		"vesselEnteredDate": "2020-11-08T12:00:00.00Z",
		"vesselFlag": "India",
		"imoNumber": "3453466",
		"distinctiveNumbersOrLetters": "f56",
		"grossTonnage": "1100",
		"yearBuilt": "2021",
		"engineHorsePower": "2000",
		"trademarkAndEngineModel": "EMN005",
		"model": "M",
		"engineNo": "007",
		"nominatedFlagState": "IND",
		"nominatedFlagStateName": "INDIA",
		"portOfRegistry": "Mumbai",
		"tenderReferenceList": "TNS-0001",
		"tenderOutboardReferenceList": "OMSN-01",
		"tradingCertificateTypeId": 26,
		"tradingCertificateType": {
		"id": 26,
		"tradingCertificateGroup": {
		"id": 1,
		"name": "Trading Certificates",
		"groupCode": "TRADECERT"
		},
		"typeCode": "MLCA421",
		"typeName": "MLCA421"
		},
		"stateAddress": {
		"id": 1,
		"addressName": "StAdrName",
		"addressLine1": "StAdrLine1",
		"addressLine2": "StAdrLine2",
		"addressLine3": "StAdrLine3",
		"stateOrCounty": "StAdrState",
		"city": "StCity",
		"country": "StCountry",
		"postCode": "100001",
		"primaryAddress": true
		  },
		"ownerAddress": {
		"id": 2,
		"addressName": "OwAdrName",
		"addressLine1": "OwAdrLine1",
		"addressLine2": "OwAdrLine2",
		"addressLine3": "OwAdrLine3",
		"stateOrCounty": "OwAdrState",
		"city": "OwCity",
		"country": "OwCountry",
		"postCode": "100001",
		"primaryAddress": true
		  },
		  "brokerAddress": {
		"id": 3,
		"addressName": "BrAdrName",
		"addressLine1": "BrAdrLine1",
		"addressLine2": "BrAdrLine2",
		"addressLine3": "BrAdrLine3",
		"stateOrCounty": "BrAdrState",
		"city": "BrCity",
		"country": "BrCountry",
		"postCode": "100001",
		"primaryAddress": true
		  },
		"memberAddress": null,
		"jointAssuredAddress": {
		"id": 3,
		"addressName": "JasAdrName",
		"addressLine1": "JasMemAdrLine1",
		"addressLine2": "JasMemAdrLine2",
		"addressLine3": "JasMemAdrLine3",
		"stateOrCounty": "JasMemAdrState",
		"city": "JasCity",
		"country": "JasCountry",
		"postCode": "100001",
		"primaryAddress": true
		  },
		  "tradingCertificateBanks": []
		}
		</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="PATCH_TradingCertificateWithSQLAsInput" id="745c663c-8efa-43b8-b813-4fab280ef255" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for PATCH method of  Trading Certificate************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

String sqlstmt="""
		USE tradingcertificate
		Select 
		top 5
		TC.Id, TC.AddressType_Id, TC.SourceSystem, TC.Reference, TC.CurrentStatus, TC.StorageId, TC.IsYacht, case when TC.IsYacht=0 then 'False' when TC.IsYacht=1 then 'True' else null end as IsYachtFlag,
		TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
		TC.isRenewal, case when TC.isRenewal = 1 then 'True' when TC.isRenewal = 0  then 'False' else NULL end as IsRenewalFlag, TC.TradingCertificateVersion as version,
		TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName, TC.JointAssuredName, TC.OwnerReference,
		TC.OwnerName,TC.OwnerDomicile,TC.OwnerEmailAddress,TC.BrokerReference,TC.BrokerName,TC.BrokerEmailAddress,TC.PolicyYear,TC.CertificateIssueDate,
		TC.EmailAddress,TC.CCEmailAddress,TC.EffectiveStartDate,TC.EffectiveEndDate,TC.PassengerCapacity,TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,
		TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,TC.VesselEnteredDate,TC.VesselFlag,TC.ImoNumber,TC.DistinctiveNumbersOrLetters,
		TC.GrossTonnage,TC.YearBuilt,TC.EngineHorsePower,TC.TradeMark,TC.Model,TC.EngineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.PortOfRegistry,
		TC.TenderReferenceList,TC.TenderOutboardReferenceList,TC.Type_Id as TradingCertificateTypeId,RT.Id as TradingCertificateTypeId, RT.Group_Id as GroupId, 
		RG.Name as TradingCertificateGroupName,RG.GroupCode as TradingCertificateGroupCode, RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName,
		ADRS.Id as AddressId, ADRS.AddressName, ADRS.AddressLine1, ADRS.AddressLine2, ADRS.AddressLine3, ADRS.StateOrCounty, ADRS.City, ADRS.Country, ADRS.PostCode, ADRS.PrimaryAddress,
		case when ADRS.PrimaryAddress=1 then 'true' when ADRS.PrimaryAddress=0 then 'false' else NULL end as PrimaryAddressFlag
		from TradingCertificate TC
		inner join ref_Type RT on RT.Id=TC.Type_Id
		inner join ref_Group RG on RG.Id=RT.Group_Id
		left join AddressSnapshot ADRS on ADRS.TradingCertificate_Id=TC.Id
		where TC.EffectiveStartDate is not null AND TC.PassengerCapacity is not null and TC.CoverLimitAmount is not null
		order by 1 desc
		
"""		
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_SQLtoPATCH_MethodOfTradingCertificate.csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_SQLtoPATCH_MethodOfTradingCertificate.csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_SQLtoPATCH_MethodOfTradingCertificate.csv"]

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_SQLtoPATCH_MethodOfTradingCertificate"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_SQLtoPATCH_MethodOfTradingCertificate"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_SQLtoPATCH_MethodOfTradingCertificate"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_Id"+","+"SQL_AddressType_Id"+","+"SQL_SourceSystem"+","+"SQL_Reference"+","+"SQL_CurrentStatus"+","+"SQL_StorageId"+","+"SQL_IsYacht"+","+"SQL_IsYachtFlag"+","+"SQL_RiskId"+","+"SQL_PolicyId"+","+"SQL_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"SQL_isRenewal"+","+"SQL_IsRenewalFlag"+","+"SQL_version"+","+"SQL_RiskReference"+","+"SQL_PolicyReference"+","+"SQL_MemberReference"+","+"SQL_MemberType"+","+"SQL_MemberName"+","+"SQL_JointAssuredName"+","+"SQL_OwnerReference"+","+"SQL_OwnerName"+","+"SQL_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"SQL_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"SQL_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"SQL_CCEmailAddress"+","+"SQL_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"SQL_VesselName"+","+"SQL_VesselType"+","+"SQL_VesselTypeName"+","+"SQL_VesselEnteredDate"+","+"SQL_VesselFlag"+","+"SQL_ImoNumber"+","+"SQL_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"SQL_YearBuilt"+","+"SQL_EngineHorsePower"+","+"SQL_TradeMark"+","+"SQL_Model"+","+"SQL_EngineNo"+","+"SQL_NominatedStateFlag"+","+"SQL_NominatedStateFlagName"+","+"SQL_PortOfRegistry"+","+"SQL_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateTypeId"+","+"SQL_GroupId"+","+"SQL_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"SQL_TradingCertificateTypeCode"+","+"SQL_TradingCertificateTypeName"+","+"SQL_AddressId"+","+"SQL_AddressName"+","+"SQL_AddressLine1"+","+"SQL_AddressLine2"+","+"SQL_AddressLine3"+","+"SQL_StateOrCounty"+","+"SQL_City"+","+"SQL_Country"+","+"SQL_PostCode"+","+"SQL_PrimaryAddress"+","+"SQL_PrimaryAddressFlag")
apiWriter.println("API_Id"+","+"API_AddressType_Id"+","+"API_SourceSystem"+","+"API_Reference"+","+"API_CurrentStatus"+","+"API_StorageId"+","+"API_IsYachtFlag"+","+"API_RiskId"+","+"API_PolicyId"+","+"API_MemberPartyId"+","+"API_OwnerPartyId"+","+"API_IsRenewalFlag"+","+"API_version"+","+"API_RiskReference"+","+"API_PolicyReference"+","+"API_MemberReference"+","+"API_MemberType"+","+"API_MemberName"+","+"API_JointAssuredName"+","+"API_OwnerReference"+","+"API_OwnerName"+","+"API_OwnerDomicile"+","+"API_OwnerEmailAddress"+","+"API_BrokerReference"+","+"API_BrokerName"+","+"API_BrokerEmailAddress"+","+"API_PolicyYear"+","+"API_CertificateIssueDate"+","+"API_EmailAddress"+","+"API_CCEmailAddress"+","+"API_EffectiveStartDate"+","+"API_EffectiveEndDate"+","+"API_PassengerCapacity"+","+"API_PolicyStartDate"+","+"API_PolicyEndDate"+","+"API_CurrencyCode"+","+"API_CoverLimitAmount"+","+"API_SignatoryState_Id"+","+"API_VesselName"+","+"API_VesselType"+","+"API_VesselTypeName"+","+"API_VesselEnteredDate"+","+"API_VesselFlag"+","+"API_ImoNumber"+","+"API_DistinctiveNumbersOrLetters"+","+"API_GrossTonnage"+","+"API_YearBuilt"+","+"API_EngineHorsePower"+","+"API_TradeMark"+","+"API_Model"+","+"API_EngineNo"+","+"API_NominatedStateFlag"+","+"API_NominatedStateFlagName"+","+"API_PortOfRegistry"+","+"API_TenderReferenceList"+","+"API_TenderOutboardReferenceList"+","+"API_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"API_GroupId"+","+"API_TradingCertificateGroupName"+","+"API_TradingCertificateGroupCode"+","+"API_TradingCertificateTypeCode"+","+"API_TradingCertificateTypeName")
compareWriter.println("SQL_Id"+","+"API_Id"+","+"SQL_AddressType_Id"+","+"API_AddressType_Id"+","+"SQL_SourceSystem"+","+"API_SourceSystem"+","+"SQL_Reference"+","+"API_Reference"+","+"SQL_CurrentStatus"+","+"API_CurrentStatus"+","+"SQL_StorageId"+","+"API_StorageId"+","+"SQL_RiskId"+","+"API_RiskId"+","+"SQL_PolicyId"+","+"API_PolicyId"+","+"SQL_MemberPartyId"+","+"API_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"API_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"API_BrokerPartyId"+","+"SQL_IsRenewalFlag"+","+"API_IsRenewalFlag"+","+"SQL_IsYachtFlag"+","+"API_IsYachtFlag"+","+"SQL_version"+","+"API_version"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_PolicyReference"+","+"API_PolicyReference"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberType"+","+"API_MemberType"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_JointAssuredName"+","+"API_JointAssuredName"+","+"SQL_OwnerReference"+","+"API_OwnerReference"+","+"SQL_OwnerName"+","+"API_OwnerName"+","+"SQL_OwnerDomicile"+","+"API_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"API_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"API_BrokerReference"+","+"SQL_BrokerName"+","+"API_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"API_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"API_PolicyYear"+","+"SQL_CertificateIssueDate"+","+"API_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_CCEmailAddress"+","+"API_CCEmailAddress"+","+"SQL_EffectiveStartDate"+","+"API_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"API_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"API_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"API_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"API_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"API_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"API_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"API_SignatoryState_Id"+","+"SQL_VesselName"+","+"API_VesselName"+","+"SQL_VesselType"+","+"API_VesselType"+","+"SQL_VesselTypeName"+","+"API_VesselTypeName"+","+"SQL_VesselEnteredDate"+","+"API_VesselEnteredDate"+","+"SQL_VesselFlag"+","+"API_VesselFlag"+","+"SQL_ImoNumber"+","+"API_ImoNumber"+","+"SQL_DistinctiveNumbersOrLetters"+","+"API_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"API_GrossTonnage"+","+"SQL_YearBuilt"+","+"API_YearBuilt"+","+"SQL_EngineHorsePower"+","+"API_EngineHorsePower"+","+"SQL_TradeMark"+","+"API_TradeMark"+","+"SQL_Model"+","+"API_Model"+","+"SQL_EngineNo"+","+"API_EngineNo"+","+"SQL_NominatedStateFlag"+","+"API_NominatedStateFlag"+","+"SQL_NominatedStateFlagName"+","+"API_NominatedStateFlagName"+","+"SQL_PortOfRegistry"+","+"API_PortOfRegistry"+","+"SQL_TenderReferenceList"+","+"API_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"API_TenderOutboardReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId1"+","+"SQL_GroupId"+","+"API_GroupId"+","+"SQL_TradingCertificateGroupName"+","+"API_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"API_TradingCertificateGroupCode"+","+"SQL_TradingCertificateTypeCode"+","+"API_TradingCertificateTypeCode"+","+"SQL_TradingCertificateTypeName"+","+"API_TradingCertificateTypeName"+","+"TestCaseStatus")//"SQL_AddressId"+","+"API_AddressId"+","+"SQL_AddressName"+","+"API_AddressName"+","+"SQL_AddressLine1"+","+"API_AddressLine1"+","+"SQL_AddressLine2"+","+"API_AddressLine2"+","+"SQL_AddressLine3"+","+"API_AddressLine3"+","+"SQL_StateOrCounty"+","+"API_StateOrCounty"+","+"SQL_City"+","+"API_City"+","+"SQL_Country"+","+"API_Country"+","+"SQL_PostCode"+","+"API_PostCode"+","+"SQL_PrimaryAddress"+","+"API_PrimaryAddress"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter=0

def rows=con.rows(sqlstmt)  
int db_size=rows.size
String field=null
//log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->
	sql_Id=row.Id
	sql_AddressType_Id=row.AddressType_Id
	sql_SourceSystem=row.SourceSystem
	sql_Reference=row.Reference
	sql_CurrentStatus=row.CurrentStatus
	sql_StorageId=row.StorageId
	sql_IsYacht=row.IsYacht
	sql_IsYachtFlag=row.IsYachtFlag
	sql_IsYachtFlag=ChangeTrueFalse(sql_IsYachtFlag.toString())
	sql_RiskId=row.RiskId
	sql_PolicyId=row.PolicyId
	sql_MemberPartyId=row.MemberPartyId
	sql_OwnerPartyId=row.OwnerPartyId
	sql_BrokerPartyId=row.BrokerPartyId
	sql_isRenewal=row.isRenewal
	sql_IsRenewalFlag=row.IsRenewalFlag
	sql_IsRenewalFlag=ChangeTrueFalse(sql_IsRenewalFlag.toString())
	sql_version=row.version
	sql_RiskReference=row.RiskReference
	sql_PolicyReference=row.PolicyReference
	sql_MemberReference=row.MemberReference
	sql_MemberType=row.MemberType
	sql_MemberName=row.MemberName
	sql_MemberName=replaceComma(sql_MemberName.toString())
	sql_JointAssuredName=row.JointAssuredName
	sql_OwnerReference=row.OwnerReference
	sql_OwnerName=row.OwnerName
	sql_OwnerDomicile=row.OwnerDomicile
	sql_OwnerEmailAddress=row.OwnerEmailAddress
	sql_BrokerReference=row.BrokerReference
	sql_BrokerName=row.BrokerName
	sql_BrokerEmailAddress=row.BrokerEmailAddress
	sql_PolicyYear=row.PolicyYear
	sql_CertificateIssueDate=row.CertificateIssueDate
	sql_CertificateIssueDate=dateUpdate(sql_CertificateIssueDate.toString())
	sql_EmailAddress=row.EmailAddress
	sql_CCEmailAddress=row.CCEmailAddress
	sql_EffectiveStartDate=row.EffectiveStartDate
	sql_EffectiveStartDate=dateUpdate(sql_EffectiveStartDate.toString())
	sql_EffectiveEndDate=row.EffectiveEndDate
	sql_EffectiveEndDate=dateUpdate(sql_EffectiveEndDate.toString())
	sql_PassengerCapacity=row.PassengerCapacity
	sql_PolicyStartDate=row.PolicyStartDate
	sql_PolicyStartDate=dateUpdate(sql_PolicyStartDate.toString())
	sql_PolicyEndDate=row.PolicyEndDate
	sql_PolicyEndDate=dateUpdate(sql_PolicyEndDate.toString())
	sql_CurrencyCode=row.CurrencyCode
	sql_CoverLimitAmount=row.CoverLimitAmount
	sql_CoverLimitAmount=sql_CoverLimitAmount.toString().replace(".00","")
	sql_SignatoryState_Id=row.SignatoryState_Id
	sql_VesselName=row.VesselName
	sql_VesselType=row.VesselType
	sql_VesselTypeName=row.VesselTypeName
	sql_VesselEnteredDate=row.VesselEnteredDate
	sql_VesselEnteredDate=dateUpdate(sql_VesselEnteredDate.toString())
	sql_VesselFlag=row.VesselFlag
	sql_ImoNumber=row.ImoNumber
	sql_DistinctiveNumbersOrLetters=row.DistinctiveNumbersOrLetters
	sql_GrossTonnage=row.GrossTonnage
	sql_YearBuilt=row.YearBuilt
	sql_EngineHorsePower=row.EngineHorsePower
	sql_TradeMark=row.TradeMark
	sql_Model=row.Model
	sql_EngineNo=row.EngineNo
	sql_NominatedStateFlag=row.NominatedStateFlag
	sql_NominatedStateFlag=replaceComma(sql_NominatedStateFlag.toString())	
	sql_NominatedStateFlagName=row.NominatedStateFlagName
	sql_NominatedStateFlagName=replaceComma(sql_NominatedStateFlagName.toString())
	sql_PortOfRegistry=row.PortOfRegistry
	sql_PortOfRegistry=replaceComma(sql_PortOfRegistry.toString())	
	sql_TenderReferenceList=row.TenderReferenceList
	sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_GroupId=row.GroupId
	sql_TradingCertificateGroupName=row.tradingCertificateGroupName
	sql_TradingCertificateGroupCode=row.tradingCertificateGroupCode
	sql_TradingCertificateTypeCode=row.TradingCertificateTypeCode
	sql_TradingCertificateTypeName=row.TradingCertificateTypeName
	sql_AddressId=row.AddressId	
	sql_AddressName=row.AddressName
	sql_AddressName=replaceComma(sql_AddressName.toString())
	sql_AddressLine1=row.AddressLine1
	sql_AddressLine1=replaceComma(sql_AddressLine1.toString())
	sql_AddressLine2=row.AddressLine2
	sql_AddressLine2=replaceComma(sql_AddressLine2.toString())
	sql_AddressLine3=row.AddressLine3
	sql_AddressLine3=replaceComma(sql_AddressLine3.toString())
	sql_StateOrCounty=row.StateOrCounty
	sql_StateOrCounty=replaceComma(sql_StateOrCounty.toString())
	sql_City=row.City
	sql_City=replaceComma(sql_City.toString())
	sql_Country=row.Country
	sql_Country=replaceComma(sql_Country.toString())
	sql_PostCode=row.PostCode
	sql_PrimaryAddress=row.PrimaryAddress
	sql_PrimaryAddressFlag=row.PrimaryAddressFlag
	
	sqlWriter.println(sql_Id+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_isRenewal+","+sql_IsRenewalFlag+","+sql_version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CCEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_VesselEnteredDate+","+sql_VesselFlag+","+sql_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_PortOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+sql_GroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_AddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_PrimaryAddressFlag)
	log.info "SQL Response received as :"+sql_Id+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_isRenewal+","+sql_IsRenewalFlag+","+sql_version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CCEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_VesselEnteredDate+","+sql_VesselFlag+","+sql_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_PortOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+sql_GroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_AddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_PrimaryAddressFlag

	def newRequest = 
	"""
	{	
		"id":$sql_Id,
		"addressTypeId":$sql_AddressType_Id,
		"sourceSystem":"$sql_SourceSystem",
		"reference":"$sql_Reference",
		"currentStatus":"$sql_CurrentStatus",
		"storageId":"$sql_StorageId",
		"riskId":$sql_RiskId,
		"policyId":$sql_PolicyId,
		"memberPartyId":$sql_MemberPartyId,
		"ownerPartyId":$sql_OwnerPartyId,
		"brokerPartyId":$sql_BrokerPartyId,
		"isRenewal":$sql_IsRenewalFlag,
		"isYacht":$sql_IsYachtFlag,
		"version":"$sql_version",
		"riskReference":"$sql_RiskReference",
		"policyReference":"$sql_PolicyReference",
		"memberReference":"$sql_MemberReference",
		"memberType":"$sql_MemberType",
		"memberName":"$sql_MemberName",
		"jointAssuredName":"$sql_JointAssuredName",
		"ownerReference":"$sql_OwnerReference",
		"ownerName":"$sql_OwnerName",
		"ownerDomicile":"$sql_OwnerDomicile",
		"ownerEmailAddress":"$sql_OwnerEmailAddress",
		"brokerReference":"$sql_BrokerReference",
		"brokerName":"$sql_BrokerName",
		"brokerEmailAddress":"$sql_BrokerEmailAddress",
		"policyYear":"$sql_PolicyYear",
		"certificateIssueDate":"$sql_CertificateIssueDate",
		"emailAddress":"$sql_EmailAddress",
		"ccEmailAddress":"$sql_CCEmailAddress",
		"effectiveStartDate":"$sql_EffectiveStartDate",
		"effectiveEndDate":"$sql_EffectiveEndDate",
		"passengerCapacity":"$sql_PassengerCapacity",
		"policyStartDate":"$sql_PolicyStartDate",
		"policyEndDate":"$sql_PolicyEndDate",
		"currencyCode":"$sql_CurrencyCode",
		"coverLimitAmount":"$sql_CoverLimitAmount",
		"signatoryStateId":$sql_SignatoryState_Id,
		"vesselName":"$sql_VesselName",
		"vesselType":"$sql_VesselType",
		"vesselTypeName":"$sql_VesselTypeName",
		"vesselEnteredDate":"$sql_VesselEnteredDate",
		"vesselFlag":"$sql_VesselFlag",
		"imoNumber":"$sql_ImoNumber",
		"distinctiveNumbersOrLetters":"$sql_DistinctiveNumbersOrLetters",
		"grossTonnage":"$sql_GrossTonnage",
		"yearBuilt":"$sql_YearBuilt",
		"engineHorsePower":"$sql_EngineHorsePower",
		"trademarkAndEngineModel":"$sql_TradeMark",
		"model":"$sql_Model",
		"engineNo":"$sql_EngineNo",
		"nominatedFlagState":"$sql_NominatedStateFlag",
		"nominatedFlagStateName":"$sql_NominatedStateFlagName",
		"portOfRegistry":"MUMBAI",
		"tenderReferenceList":"$sql_TenderReferenceList",
		"tenderOutboardReferenceList":"$sql_TenderOutboardReferenceList",
		"tradingCertificateTypeId":$sql_TradingCertificateTypeId,
	    "tradingCertificateType":
		{
			"id":$sql_GroupId,
	        	"tradingCertificateGroup":
			{
				"id":$sql_GroupId,
	            "name":"$sql_TradingCertificateGroupName",
	            "groupCode":"$sql_TradingCertificateGroupCode"
	        },
			"typeCode":"$sql_TradingCertificateTypeCode",
			"typeName":"$sql_TradingCertificateTypeName"
	    },
		"stateAddress": {
			"id": 3,
		    	"addressName": "Adress Name",
		    	"addressLine1": "Line 1",
		    	"addressLine2": "Line 2",
		    	"addressLine3": "Line 3",
		    	"stateOrCounty": "",
		    	"city": "London",
		    	"country": "United Kingdom",
		    	"postCode": "EC1C 2EC",
		    	"primaryAddress": false
		},
		"ownerAddress": 
		{
			"id": 3,
		    	"addressName": "Adress Name",
		    	"addressLine1": "Line 1",
		    	"addressLine2": "Line 2",
		    	"addressLine3": "Line 3",
		    	"stateOrCounty": "",
		    	"city": "London",
		    	"country": "United Kingdom",
		    	"postCode": "EC1C 2EC",
		    	"primaryAddress": false
		},
		"brokerAddress":
		{
			"id": 3,
		    	"addressName": "Adress Name",
		    	"addressLine1": "Line 1",
		    	"addressLine2": "Line 2",
		    	"addressLine3": "Line 3",
		    	"stateOrCounty": "",
		    	"city": "London",
		    	"country": "United Kingdom",
		    	"postCode": "EC1C 2EC",
		    	"primaryAddress": false
		},
	    "memberAddress":null,
	    "jointAssuredAddress":null,
	    "tradingCertificateBanks": []
	}
	"""
	log.info "Request body is : "+newRequest
	
	//set the request body for the patch request
	testRunner.testCase.testSteps["Patch_TradingCertificate"].setPropertyValue( "Request", newRequest)

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
	
	testRunner.runTestStepByName("Patch_TradingCertificate")
	String req='${Patch_TradingCertificate#Response}'
	response=context.expand(req)
	//log.info "API Response for PATCH Method received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)
	
	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["Patch_TradingCertificate"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
			api_Id=jsonRes.id
			api_AddressType_Id=jsonRes.addressTypeId
			api_SourceSystem=jsonRes.sourceSystem
			api_Reference=jsonRes.reference
			api_CurrentStatus=jsonRes.currentStatus
			api_StorageId=jsonRes.storageId
			api_RiskId=jsonRes.riskId
			api_PolicyId=jsonRes.policyId
			api_MemberPartyId=jsonRes.memberPartyId
			api_OwnerPartyId=jsonRes.ownerPartyId
			api_BrokerPartyId=jsonRes.brokerPartyId
			api_IsRenewalFlag=jsonRes.isRenewal
			api_IsYachtFlag=jsonRes.isYacht
			api_version=jsonRes.version
			api_RiskReference=jsonRes.riskReference
			api_PolicyReference=jsonRes.policyReference
			api_MemberReference=jsonRes.memberReference
			api_MemberType=jsonRes.memberType
			api_MemberName=jsonRes.memberName
			api_MemberName=replaceComma(api_MemberName.toString())
			api_JointAssuredName=jsonRes.jointAssuredName
			api_OwnerReference=jsonRes.ownerReference
			api_OwnerName=jsonRes.ownerName
			api_OwnerDomicile=jsonRes.ownerDomicile
			api_OwnerEmailAddress=jsonRes.ownerEmailAddress
			api_BrokerReference=jsonRes.brokerReference
			api_BrokerName=jsonRes.brokerName
			api_BrokerEmailAddress=jsonRes.brokerEmailAddress
			api_PolicyYear=jsonRes.policyYear
			api_CertificateIssueDate=jsonRes.certificateIssueDate
			api_EmailAddress=jsonRes.emailAddress
			api_CCEmailAddress=jsonRes.ccEmailAddress
			api_EffectiveStartDate=jsonRes.effectiveStartDate
			api_EffectiveEndDate=jsonRes.effectiveEndDate
			api_PassengerCapacity=jsonRes.passengerCapacity
			api_PolicyStartDate=jsonRes.policyStartDate
			api_PolicyEndDate=jsonRes.policyEndDate
			api_CurrencyCode=jsonRes.currencyCode
			api_CoverLimitAmount=jsonRes.coverLimitAmount
			api_SignatoryState_Id=jsonRes.signatoryStateId
			api_VesselName=jsonRes.vesselName
			api_VesselType=jsonRes.vesselType
			api_VesselTypeName=jsonRes.vesselTypeName
			api_VesselEnteredDate=jsonRes.vesselEnteredDate
			api_VesselFlag=jsonRes.vesselFlag
			api_ImoNumber=jsonRes.imoNumber
			api_DistinctiveNumbersOrLetters=jsonRes.distinctiveNumbersOrLetters
			api_GrossTonnage=jsonRes.grossTonnage
			api_YearBuilt=jsonRes.yearBuilt
			api_EngineHorsePower=jsonRes.engineHorsePower
			api_TradeMark=jsonRes.trademarkAndEngineModel
			api_Model=jsonRes.model
			api_EngineNo=jsonRes.engineNo
			api_NominatedStateFlag=jsonRes.nominatedFlagState
			api_NominatedStateFlag=replaceComma(api_NominatedStateFlag.toString())	
			api_NominatedStateFlagName=jsonRes.nominatedFlagStateName
			api_NominatedStateFlagName=replaceComma(api_NominatedStateFlagName.toString())				
			api_PortOfRegistry=jsonRes.portOfRegistry
			api_PortOfRegistry=replaceComma(api_PortOfRegistry.toString())				
			api_TenderReferenceList=jsonRes.tenderReferenceList
			api_TenderOutboardReferenceList=jsonRes.tenderOutboardReferenceList
			api_TradingCertificateTypeId=jsonRes.tradingCertificateTypeId
			api_TradingCertificateTypeId1=jsonRes.tradingCertificateType.id
			api_GroupId=jsonRes.tradingCertificateType.tradingCertificateGroup.id
			api_TradingCertificateGroupName=jsonRes.tradingCertificateType.tradingCertificateGroup.name
			api_TradingCertificateGroupCode=jsonRes.tradingCertificateType.tradingCertificateGroup.groupCode
			api_TradingCertificateTypeCode=jsonRes.tradingCertificateType.typeCode
			api_TradingCertificateTypeName=jsonRes.tradingCertificateType.typeName
			api_StateAddress=jsonRes.stateAddress
			api_OwnerAddress=jsonRes.ownerAddress
			api_BrokerAddress=jsonRes.brokerAddress
			api_MemberAddress=jsonRes.memberAddress
			api_JointAssuredAddress=jsonRes.jointAssuredAddress
			
			apiWriter.println(api_Id+","+api_AddressType_Id+","+api_SourceSystem+","+api_Reference+","+api_CurrentStatus+","+api_StorageId+","+api_IsYachtFlag+","+api_RiskId+","+api_PolicyId+","+api_MemberPartyId+","+api_OwnerPartyId+","+api_IsRenewalFlag+","+api_version+","+api_RiskReference+","+api_PolicyReference+","+api_MemberReference+","+api_MemberType+","+api_MemberName+","+api_JointAssuredName+","+api_OwnerReference+","+api_OwnerName+","+api_OwnerDomicile+","+api_OwnerEmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_BrokerEmailAddress+","+api_PolicyYear+","+api_CertificateIssueDate+","+api_EmailAddress+","+api_CCEmailAddress+","+api_EffectiveStartDate+","+api_EffectiveEndDate+","+api_PassengerCapacity+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_CurrencyCode+","+api_CoverLimitAmount+","+api_SignatoryState_Id+","+api_VesselName+","+api_VesselType+","+api_VesselTypeName+","+api_VesselEnteredDate+","+api_VesselFlag+","+api_ImoNumber+","+api_DistinctiveNumbersOrLetters+","+api_GrossTonnage+","+api_YearBuilt+","+api_EngineHorsePower+","+api_TradeMark+","+api_Model+","+api_EngineNo+","+api_NominatedStateFlag+","+api_NominatedStateFlagName+","+api_PortOfRegistry+","+api_TenderReferenceList+","+api_TenderOutboardReferenceList+","+api_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+api_GroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode+","+api_TradingCertificateTypeCode+","+api_TradingCertificateTypeName) //+","+api_AddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_PrimaryAddress)
			log.info "API Response is :" +api_Id+","+api_AddressType_Id+","+api_SourceSystem+","+api_Reference+","+api_CurrentStatus+","+api_StorageId+","+api_IsYachtFlag+","+api_RiskId+","+api_PolicyId+","+api_MemberPartyId+","+api_OwnerPartyId+","+api_IsRenewalFlag+","+api_version+","+api_RiskReference+","+api_PolicyReference+","+api_MemberReference+","+api_MemberType+","+api_MemberName+","+api_JointAssuredName+","+api_OwnerReference+","+api_OwnerName+","+api_OwnerDomicile+","+api_OwnerEmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_BrokerEmailAddress+","+api_PolicyYear+","+api_CertificateIssueDate+","+api_EmailAddress+","+api_CCEmailAddress+","+api_EffectiveStartDate+","+api_EffectiveEndDate+","+api_PassengerCapacity+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_CurrencyCode+","+api_CoverLimitAmount+","+api_SignatoryState_Id+","+api_VesselName+","+api_VesselType+","+api_VesselTypeName+","+api_VesselEnteredDate+","+api_VesselFlag+","+api_ImoNumber+","+api_DistinctiveNumbersOrLetters+","+api_GrossTonnage+","+api_YearBuilt+","+api_EngineHorsePower+","+api_TradeMark+","+api_Model+","+api_EngineNo+","+api_NominatedStateFlag+","+api_NominatedStateFlagName+","+api_PortOfRegistry+","+api_TenderReferenceList+","+api_TenderOutboardReferenceList+","+api_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+api_GroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode+","+api_TradingCertificateTypeCode+","+api_TradingCertificateTypeName //+","+api_AddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_PrimaryAddress
			
			if(api_Id.toString().toUpperCase().equals(sql_Id.toString().toUpperCase()) 
			&& api_AddressType_Id.toString().toUpperCase().equals(sql_AddressType_Id.toString().toUpperCase()) 
			&& api_SourceSystem.toString().toUpperCase().equals(sql_SourceSystem.toString().toUpperCase()) 
			&& api_Reference.toString().toUpperCase().equals(sql_Reference.toString().toUpperCase()) 
			&& api_CurrentStatus.toString().toUpperCase().equals(sql_CurrentStatus.toString().toUpperCase()) 
			&& api_StorageId.toString().toUpperCase().equals(sql_StorageId.toString().toUpperCase()) 
			&& api_RiskId.toString().toUpperCase().equals(sql_RiskId.toString().toUpperCase()) 
			&& api_PolicyId.toString().toUpperCase().equals(sql_PolicyId.toString().toUpperCase()) 
			&& api_MemberPartyId.toString().toUpperCase().equals(sql_MemberPartyId.toString().toUpperCase()) 
			&& api_OwnerPartyId.toString().toUpperCase().equals(sql_OwnerPartyId.toString().toUpperCase()) 
			&& api_BrokerPartyId.toString().toUpperCase().equals(sql_BrokerPartyId.toString().toUpperCase()) 
			&& api_IsRenewalFlag.toString().toUpperCase().equals(sql_IsRenewalFlag.toString().toUpperCase()) 
			&& api_IsYachtFlag.toString().toUpperCase().equals(sql_IsYachtFlag.toString().toUpperCase()) 
			&& api_version.toString().toUpperCase().equals(sql_version.toString().toUpperCase()) 
			&& api_RiskReference.toString().toUpperCase().equals(sql_RiskReference.toString().toUpperCase()) 
			&& api_PolicyReference.toString().toUpperCase().equals(sql_PolicyReference.toString().toUpperCase()) 
			&& api_MemberReference.toString().toUpperCase().equals(sql_MemberReference.toString().toUpperCase()) 
			&& api_MemberType.toString().toUpperCase().equals(sql_MemberType.toString().toUpperCase()) 
			&& api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) 
			&& api_JointAssuredName.toString().toUpperCase().equals(sql_JointAssuredName.toString().toUpperCase()) 
			&& api_OwnerReference.toString().toUpperCase().equals(sql_OwnerReference.toString().toUpperCase()) 
			&& api_OwnerName.toString().toUpperCase().equals(sql_OwnerName.toString().toUpperCase()) 
			&& api_OwnerDomicile.toString().toUpperCase().equals(sql_OwnerDomicile.toString().toUpperCase()) 
			&& api_OwnerEmailAddress.toString().toUpperCase().equals(sql_OwnerEmailAddress.toString().toUpperCase()) 
			&& api_BrokerReference.toString().toUpperCase().equals(sql_BrokerReference.toString().toUpperCase()) 
			&& api_BrokerName.toString().toUpperCase().equals(sql_BrokerName.toString().toUpperCase()) 
			&& api_BrokerEmailAddress.toString().toUpperCase().equals(sql_BrokerEmailAddress.toString().toUpperCase()) 
			&& api_PolicyYear.toString().toUpperCase().equals(sql_PolicyYear.toString().toUpperCase()) 
			&& api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) 
			&& api_CCEmailAddress.toString().toUpperCase().equals(sql_CCEmailAddress.toString().toUpperCase()) 
			&& api_PassengerCapacity.toString().toUpperCase().equals(sql_PassengerCapacity.toString().toUpperCase()) 
			&& api_CurrencyCode.toString().toUpperCase().equals(sql_CurrencyCode.toString().toUpperCase()) 
			&& api_CoverLimitAmount.toString().toUpperCase().equals(sql_CoverLimitAmount.toString().toUpperCase()) 
			&& api_SignatoryState_Id.toString().toUpperCase().equals(sql_SignatoryState_Id.toString().toUpperCase()) 
			&& api_VesselName.toString().toUpperCase().equals(sql_VesselName.toString().toUpperCase()) 
			&& api_VesselType.toString().toUpperCase().equals(sql_VesselType.toString().toUpperCase()) 
			&& api_VesselTypeName.toString().toUpperCase().equals(sql_VesselTypeName.toString().toUpperCase()) 
			&& api_VesselFlag.toString().toUpperCase().equals(sql_VesselFlag.toString().toUpperCase()) 
			&& api_ImoNumber.toString().toUpperCase().equals(sql_ImoNumber.toString().toUpperCase()) 
			&& api_DistinctiveNumbersOrLetters.toString().toUpperCase().equals(sql_DistinctiveNumbersOrLetters.toString().toUpperCase()) 
			&& api_GrossTonnage.toString().toUpperCase().equals(sql_GrossTonnage.toString().toUpperCase()) 
			&& api_YearBuilt.toString().toUpperCase().equals(sql_YearBuilt.toString().toUpperCase()) 
			&& api_EngineHorsePower.toString().toUpperCase().equals(sql_EngineHorsePower.toString().toUpperCase()) 
			&& api_TradeMark.toString().toUpperCase().equals(sql_TradeMark.toString().toUpperCase()) 
			&& api_Model.toString().toUpperCase().equals(sql_Model.toString().toUpperCase()) 
			&& api_EngineNo.toString().toUpperCase().equals(sql_EngineNo.toString().toUpperCase()) 
			&& api_NominatedStateFlag.toString().toUpperCase().equals(sql_NominatedStateFlag.toString().toUpperCase()) 
			&& api_NominatedStateFlagName.toString().toUpperCase().equals(sql_NominatedStateFlagName.toString().toUpperCase()) 
			&& api_PortOfRegistry.toString().toUpperCase().equals(sql_PortOfRegistry.toString().toUpperCase()) 
			&& api_TenderReferenceList.toString().toUpperCase().equals(sql_TenderReferenceList.toString().toUpperCase()) 
			&& api_TenderOutboardReferenceList.toString().toUpperCase().equals(sql_TenderOutboardReferenceList.toString().toUpperCase()) 
			&& api_TradingCertificateTypeId.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) 
			&& api_TradingCertificateTypeId1.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) 
			&& api_GroupId.toString().toUpperCase().equals(sql_GroupId.toString().toUpperCase()) 
			&& api_TradingCertificateGroupName.toString().toUpperCase().equals(sql_TradingCertificateGroupName.toString().toUpperCase()) 
			&& api_TradingCertificateGroupCode.toString().toUpperCase().equals(sql_TradingCertificateGroupCode.toString().toUpperCase()) 
			&& api_TradingCertificateTypeCode.toString().toUpperCase().equals(sql_TradingCertificateTypeCode.toString().toUpperCase()) 
			&& api_TradingCertificateTypeName.toString().toUpperCase().equals(sql_TradingCertificateTypeName.toString().toUpperCase())
			)
			{
				compareWriter.println(sql_Id+","+api_Id+","+sql_AddressType_Id+","+api_AddressType_Id+","+sql_SourceSystem+","+api_SourceSystem+","+sql_Reference+","+api_Reference+","+sql_CurrentStatus+","+api_CurrentStatus+","+sql_StorageId+","+api_StorageId+","+sql_RiskId+","+api_RiskId+","+sql_PolicyId+","+api_PolicyId+","+sql_MemberPartyId+","+api_MemberPartyId+","+sql_OwnerPartyId+","+api_OwnerPartyId+","+sql_BrokerPartyId+","+api_BrokerPartyId+","+sql_IsRenewalFlag+","+api_IsRenewalFlag+","+sql_IsYachtFlag+","+api_IsYachtFlag+","+sql_version+","+api_version+","+sql_RiskReference+","+api_RiskReference+","+sql_PolicyReference+","+api_PolicyReference+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberType+","+api_MemberType+","+sql_MemberName+","+api_MemberName+","+sql_JointAssuredName+","+api_JointAssuredName+","+sql_OwnerReference+","+api_OwnerReference+","+sql_OwnerName+","+api_OwnerName+","+sql_OwnerDomicile+","+api_OwnerDomicile+","+sql_OwnerEmailAddress+","+api_OwnerEmailAddress+","+sql_BrokerReference+","+api_BrokerReference+","+sql_BrokerName+","+api_BrokerName+","+sql_BrokerEmailAddress+","+api_BrokerEmailAddress+","+sql_PolicyYear+","+api_PolicyYear+","+sql_CertificateIssueDate+","+api_CertificateIssueDate+","+sql_EmailAddress+","+api_EmailAddress+","+sql_CCEmailAddress+","+api_CCEmailAddress+","+sql_EffectiveStartDate+","+api_EffectiveStartDate+","+sql_EffectiveEndDate+","+api_EffectiveEndDate+","+sql_PassengerCapacity+","+api_PassengerCapacity+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_CoverLimitAmount+","+api_CoverLimitAmount+","+sql_SignatoryState_Id+","+api_SignatoryState_Id+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_VesselTypeName+","+api_VesselTypeName+","+sql_VesselEnteredDate+","+api_VesselEnteredDate+","+sql_VesselFlag+","+api_VesselFlag+","+sql_ImoNumber+","+api_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+api_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TradeMark+","+api_TradeMark+","+sql_Model+","+api_Model+","+sql_EngineNo+","+api_EngineNo+","+sql_NominatedStateFlag+","+api_NominatedStateFlag+","+sql_NominatedStateFlagName+","+api_NominatedStateFlagName+","+sql_PortOfRegistry+","+api_PortOfRegistry+","+sql_TenderReferenceList+","+api_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+sql_GroupId+","+api_GroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+"Test Case Passed")//sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_PrimaryAddress+","+api_PrimaryAddress+","+"Test Case Passed")
				log.info "Details are matching, hence test case is passed"
			}
			else
			{
				compareWriter.println(sql_Id+","+api_Id+","+sql_AddressType_Id+","+api_AddressType_Id+","+sql_SourceSystem+","+api_SourceSystem+","+sql_Reference+","+api_Reference+","+sql_CurrentStatus+","+api_CurrentStatus+","+sql_StorageId+","+api_StorageId+","+sql_RiskId+","+api_RiskId+","+sql_PolicyId+","+api_PolicyId+","+sql_MemberPartyId+","+api_MemberPartyId+","+sql_OwnerPartyId+","+api_OwnerPartyId+","+sql_BrokerPartyId+","+api_BrokerPartyId+","+sql_IsRenewalFlag+","+api_IsRenewalFlag+","+sql_IsYachtFlag+","+api_IsYachtFlag+","+sql_version+","+api_version+","+sql_RiskReference+","+api_RiskReference+","+sql_PolicyReference+","+api_PolicyReference+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberType+","+api_MemberType+","+sql_MemberName+","+api_MemberName+","+sql_JointAssuredName+","+api_JointAssuredName+","+sql_OwnerReference+","+api_OwnerReference+","+sql_OwnerName+","+api_OwnerName+","+sql_OwnerDomicile+","+api_OwnerDomicile+","+sql_OwnerEmailAddress+","+api_OwnerEmailAddress+","+sql_BrokerReference+","+api_BrokerReference+","+sql_BrokerName+","+api_BrokerName+","+sql_BrokerEmailAddress+","+api_BrokerEmailAddress+","+sql_PolicyYear+","+api_PolicyYear+","+sql_CertificateIssueDate+","+api_CertificateIssueDate+","+sql_EmailAddress+","+api_EmailAddress+","+sql_CCEmailAddress+","+api_CCEmailAddress+","+sql_EffectiveStartDate+","+api_EffectiveStartDate+","+sql_EffectiveEndDate+","+api_EffectiveEndDate+","+sql_PassengerCapacity+","+api_PassengerCapacity+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_CoverLimitAmount+","+api_CoverLimitAmount+","+sql_SignatoryState_Id+","+api_SignatoryState_Id+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_VesselTypeName+","+api_VesselTypeName+","+sql_VesselEnteredDate+","+api_VesselEnteredDate+","+sql_VesselFlag+","+api_VesselFlag+","+sql_ImoNumber+","+api_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+api_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TradeMark+","+api_TradeMark+","+sql_Model+","+api_Model+","+sql_EngineNo+","+api_EngineNo+","+sql_NominatedStateFlag+","+api_NominatedStateFlag+","+sql_NominatedStateFlagName+","+api_NominatedStateFlagName+","+sql_PortOfRegistry+","+api_PortOfRegistry+","+sql_TenderReferenceList+","+api_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+sql_GroupId+","+api_GroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+"Test Case Failed")//sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_PrimaryAddress+","+api_PrimaryAddress+","+"Test Case Failed")
				log.info "Details are not matching, hence test case is failed"
			}
	}
	else
	{
		compareWriter.println(sql_Id+responseest Case Failed")//sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_PrimaryAddress+","+api_PrimaryAddress+","+"Test Case Failed")
		log.info "Failed API response received as : "+response
	}
	counter = 1+counter
	log.info "Total records tested are : "+counter
}

public String replaceComma(String field)
{
	if(field!=null)
	{
		field=field.replace(",", " " )
	}
	return field
}

public String ChangeTrueFalse(String field)
{
	if(field.toString().contains("True") || field.toString().contains("TRUE"))
	{
		field=true
	}
	else if(field.toString().contains("False") || field.toString().contains("FALSE"))
	{
		field=false
	}
	return field
}

public String dateUpdate(String field)
{
	if (field!=null && field.contains(" "))
	{
		field=field.replaceAll(" ","T")	
	}
	else
	{
		field="2000-01-01T00:00:00.000"
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for PATCH method of  Trading Certificate***********"]]></script></con:config></con:testStep><con:testStep type="groovy" name="Patch_TradingCertificateWithPOST_OutputAsInput_PATCH" id="8a8b5c49-f04f-4131-89ed-f162d0b66288"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import groovy.json.*
import java.text.SimpleDateFormat
import com.eviware.soapui.support.types.StringToStringMap
import groovy.json.JsonSlurper
import groovy.sql.Sql

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for PATCH method of Trading Certificate************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

String sqlstmt =
"""
	Use tradingcertificate
	Select
	RT.Id as TypeId, RT.Group_Id as GroupId, RG.Name as GroupName, RG.GroupCode,
	RT.TypeCode, RT.Name as TypeName
	from ref_Type RT
	inner join ref_Group RG on RT.Group_Id = RG.Id
"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_PATCH_TradingCertificateSave.csv"]
def postApiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\POST_API_Response_PATCH_TradingCertificateSave.csv"]
def patchApiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\PATCH_API_Response_PATCH_TradingCertificateSave.csv"]
def patchUpdateApiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\PATCH_UpdateAPI_Response_PATCH_TradingCertificateSave.csv"]
def patchRequestBodyFile = ["C:\\APITesting\\TradingCertificateTesting\\TestData\\PATCH_UpdateAPI_Response_PATCHResqestBody_TradingCertificateSave.csv"]
def comparePostPatchReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_PATCHAndPOST_TradingCertificateSave.csv"]
def ComparePATCHReqAndRespBodyReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_PATCHReqAndRespBody_TradingCertificateSave.csv"]

//def comparePatchDBReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_PATCHAndDB_TradingCertificateSave.csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def postApiFile = new File(postApiResponseFile[0])
def postApiWriter = postApiFile.newPrintWriter()

def patchApiFile = new File(patchApiResponseFile[0])
def patchApiWriter = patchApiFile.newPrintWriter()

def patchUpdateApiFile = new File(patchUpdateApiResponseFile[0])
def patchUpdateApiWriter = patchUpdateApiFile.newPrintWriter()

def patchRequestFile = new File(patchRequestBodyFile[0])
def patchRequestBodyWriter = patchRequestFile.newPrintWriter()

def comparePostPatchFile = new File(comparePostPatchReportFile[0])
def comparePostPatchWriter = comparePostPatchFile.newPrintWriter()

def comparePatchFile = new File(ComparePATCHReqAndRespBodyReportFile[0])
def comparePATCHReqAndRespWriter = comparePatchFile.newPrintWriter()

//def comparePatchDBFile = new File(comparePatchDBReportFile[0])
//def comparePatchDBWriter = comparePatchDBFile.newPrintWriter()

sqlWriter.println("SQL_TypeId"+","+"SQL_TypeCode"+","+"SQL_TypeName"+","+"SQL_GroupId"+","+"SQL_GroupCode")
postApiWriter.println("postApi_id"+","+"postApi_addressTypeId"+","+"postApi_sourceSystem"+","+"postApi_reference"+","+"postApi_currentStatus"+","+"postApi_storageId"+","+"postApi_riskId"+","+"postApi_policyId"+","+"postApi_memberPartyId"+","+"postApi_ownerPartyId"+","+"postApi_brokerPartyId"+","+"postApi_isRenewal"+","+"postApi_isYacht"+","+"postApi_version"+","+"postApi_riskReference"+","+"postApi_policyReference"+","+"postApi_memberReference"+","+"postApi_memberType"+","+"postApi_memberName"+","+"postApi_jointAssuredName"+","+"postApi_ownerReference"+","+"postApi_ownerName"+","+"postApi_ownerDomicile"+","+"postApi_ownerEmailAddress"+","+"postApi_brokerReference"+","+"postApi_brokerName"+","+"postApi_brokerEmailAddress"+","+"postApi_policyYear"+","+"postApi_certificateIssueDate"+","+"postApi_emailAddress"+","+"postApi_ccEmailAddress"+","+"postApi_effectiveStartDate"+","+"postApi_effectiveEndDate"+","+"postApi_passengerCapacity"+","+"postApi_policyStartDate"+","+"postApi_policyEndDate"+","+"postApi_currencyCode"+","+"postApi_coverLimitAmount"+","+"postApi_signatoryStateId"+","+"postApi_vesselName"+","+"postApi_vesselType"+","+"postApi_vesselTypeName"+","+"postApi_vesselEnteredDate"+","+"postApi_vesselFlag"+","+"postApi_imoNumber"+","+"postApi_distinctiveNumbersOrLetters"+","+"postApi_grossTonnage"+","+"postApi_yearBuilt"+","+"postApi_engineHorsePower"+","+"postApi_trademarkAndEngineModel"+","+"postApi_model"+","+"postApi_engineNo"+","+"postApi_nominatedFlagState"+","+"postApi_nominatedFlagStateName"+","+"postApi_portOfRegistry"+","+"postApi_tenderReferenceList"+","+"postApi_tenderOutboardReferenceList"+","+"postApi_tradingCertificateTypeId"+","+"postApi_tradingCertificateGroupId"+","+"postApi_tradingCertificateGroupName"+","+"postApi_tradingCertificateGroupCode"+","+"postApi_tradingCertificateTypeCode"+","+"postApi_tradingCertificateTypeName"+","+"postApi_stateAddress"+","+"postApi_ownerAddress"+","+"postApi_brokerAddress"+","+"postApi_memberAddress"+","+"postApi_jointAssuredAddress"+","+"postApi_tradingCertificateBanks")
patchApiWriter.println("patchApi_id"+","+"patchApi_addressTypeId"+","+"patchApi_sourceSystem"+","+"patchApi_reference"+","+"patchApi_currentStatus"+","+"patchApi_storageId"+","+"patchApi_riskId"+","+"patchApi_policyId"+","+"patchApi_memberPartyId"+","+"patchApi_ownerPartyId"+","+"patchApi_brokerPartyId"+","+"patchApi_isRenewal"+","+"patchApi_isYacht"+","+"patchApi_version"+","+"patchApi_riskReference"+","+"patchApi_policyReference"+","+"patchApi_memberReference"+","+"patchApi_memberType"+","+"patchApi_memberName"+","+"patchApi_jointAssuredName"+","+"patchApi_ownerReference"+","+"patchApi_ownerName"+","+"patchApi_ownerDomicile"+","+"patchApi_ownerEmailAddress"+","+"patchApi_brokerReference"+","+"patchApi_brokerName"+","+"patchApi_brokerEmailAddress"+","+"patchApi_policyYear"+","+"patchApi_certificateIssueDate"+","+"patchApi_emailAddress"+","+"patchApi_ccEmailAddress"+","+"patchApi_effectiveStartDate"+","+"patchApi_effectiveEndDate"+","+"patchApi_passengerCapacity"+","+"patchApi_policyStartDate"+","+"patchApi_policyEndDate"+","+"patchApi_currencyCode"+","+"patchApi_coverLimitAmount"+","+"patchApi_signatoryStateId"+","+"patchApi_vesselName"+","+"patchApi_vesselType"+","+"patchApi_vesselTypeName"+","+"patchApi_vesselEnteredDate"+","+"patchApi_vesselFlag"+","+"patchApi_imoNumber"+","+"patchApi_distinctiveNumbersOrLetters"+","+"patchApi_grossTonnage"+","+"patchApi_yearBuilt"+","+"patchApi_engineHorsePower"+","+"patchApi_trademarkAndEngineModel"+","+"patchApi_model"+","+"patchApi_engineNo"+","+"patchApi_nominatedFlagState"+","+"patchApi_nominatedFlagStateName"+","+"patchApi_portOfRegistry"+","+"patchApi_tenderReferenceList"+","+"patchApi_tenderOutboardReferenceList"+","+"patchApi_tradingCertificateTypeId"+","+"patchApi_tradingCertificateGroupId"+","+"patchApi_tradingCertificateGroupName"+","+"patchApi_tradingCertificateGroupCode"+","+"patchApi_tradingCertificateTypeCode"+","+"patchApi_tradingCertificateTypeName"+","+"patchApi_stateAddress"+","+"patchApi_ownerAddress"+","+"patchApi_brokerAddress"+","+"patchApi_memberAddress"+","+"patchApi_jointAssuredAddress"+","+"patchApi_tradingCertificateBanks")
patchUpdateApiWriter.println("PatchUpdateApi_id"+","+"PatchUpdateApi_addressTypeId"+","+"PatchUpdateApi_sourceSystem"+","+"PatchUpdateApi_reference"+","+"PatchUpdateApi_currentStatus"+","+"PatchUpdateApi_storageId"+","+"PatchUpdateApi_riskId"+","+"PatchUpdateApi_policyId"+","+"PatchUpdateApi_memberPartyId"+","+"PatchUpdateApi_ownerPartyId"+","+"PatchUpdateApi_brokerPartyId"+","+"PatchUpdateApi_isRenewal"+","+"PatchUpdateApi_isYacht"+","+"PatchUpdateApi_version"+","+"PatchUpdateApi_riskReference"+","+"PatchUpdateApi_policyReference"+","+"PatchUpdateApi_memberReference"+","+"PatchUpdateApi_memberType"+","+"PatchUpdateApi_memberName"+","+"PatchUpdateApi_jointAssuredName"+","+"PatchUpdateApi_ownerReference"+","+"PatchUpdateApi_ownerName"+","+"PatchUpdateApi_ownerDomicile"+","+"PatchUpdateApi_ownerEmailAddress"+","+"PatchUpdateApi_brokerReference"+","+"PatchUpdateApi_brokerName"+","+"PatchUpdateApi_brokerEmailAddress"+","+"PatchUpdateApi_policyYear"+","+"PatchUpdateApi_certificateIssueDate"+","+"PatchUpdateApi_emailAddress"+","+"PatchUpdateApi_ccEmailAddress"+","+"PatchUpdateApi_effectiveStartDate"+","+"PatchUpdateApi_effectiveEndDate"+","+"PatchUpdateApi_passengerCapacity"+","+"PatchUpdateApi_policyStartDate"+","+"PatchUpdateApi_policyEndDate"+","+"PatchUpdateApi_currencyCode"+","+"PatchUpdateApi_coverLimitAmount"+","+"PatchUpdateApi_signatoryStateId"+","+"PatchUpdateApi_vesselName"+","+"PatchUpdateApi_vesselType"+","+"PatchUpdateApi_vesselTypeName"+","+"PatchUpdateApi_vesselEnteredDate"+","+"PatchUpdateApi_vesselFlag"+","+"PatchUpdateApi_imoNumber"+","+"PatchUpdateApi_distinctiveNumbersOrLetters"+","+"PatchUpdateApi_grossTonnage"+","+"PatchUpdateApi_yearBuilt"+","+"PatchUpdateApi_engineHorsePower"+","+"PatchUpdateApi_trademarkAndEngineModel"+","+"PatchUpdateApi_model"+","+"PatchUpdateApi_engineNo"+","+"PatchUpdateApi_nominatedFlagState"+","+"PatchUpdateApi_nominatedFlagStateName"+","+"PatchUpdateApi_portOfRegistry"+","+"PatchUpdateApi_tenderReferenceList"+","+"PatchUpdateApi_tenderOutboardReferenceList"+","+"PatchUpdateApi_tradingCertificateTypeId"+","+"PatchUpdateApi_tradingCertificateGroupId"+","+"PatchUpdateApi_tradingCertificateGroupName"+","+"PatchUpdateApi_tradingCertificateGroupCode"+","+"PatchUpdateApi_tradingCertificateTypeCode"+","+"PatchUpdateApi_tradingCertificateTypeName"+","+"PatchUpdateApi_stateAddressId"+","+"PatchUpdateApi_stateAddressName"+","+"PatchUpdateApi_stateAddressLine1"+","+"PatchUpdateApi_stateAddressLine2"+","+"PatchUpdateApi_stateAddressLine3"+","+"PatchUpdateApi_stateStateOrCounty"+","+"PatchUpdateApi_stateCity"+","+"PatchUpdateApi_stateCountry"+","+"PatchUpdateApi_statePostCode"+","+"PatchUpdateApi_statePrimaryAddress"+","+"PatchUpdateApi_ownerAddressId"+","+"PatchUpdateApi_ownerAddressName"+","+"PatchUpdateApi_ownerAddressLine1"+","+"PatchUpdateApi_ownerAddressLine2"+","+"PatchUpdateApi_ownerAddressLine3"+","+"PatchUpdateApi_ownerStateOrCounty"+","+"PatchUpdateApi_ownerCity"+","+"PatchUpdateApi_ownerCountry"+","+"PatchUpdateApi_ownerPostCode"+","+"PatchUpdateApi_ownerPrimaryAddress"+","+"PatchUpdateApi_brokerAddressId"+","+"PatchUpdateApi_brokerAddressName"+","+"PatchUpdateApi_brokerAddressLine1"+","+"PatchUpdateApi_brokerAddressLine2"+","+"PatchUpdateApi_brokerAddressLine3"+","+"PatchUpdateApi_brokerStateOrCounty"+","+"PatchUpdateApi_brokerCity"+","+"PatchUpdateApi_brokerCountry"+","+"PatchUpdateApi_brokerPostCode"+","+"PatchUpdateApi_brokerPrimaryAddress"+","+"PatchUpdateApi_memberAddress"+","+"PatchUpdateApi_JAAddressId"+","+"PatchUpdateApi_JAAddressName"+","+"PatchUpdateApi_JAAddressLine1"+","+"PatchUpdateApi_JAAddressLine2"+","+"PatchUpdateApi_JAAddressLine3"+","+"PatchUpdateApi_JAStateOrCounty"+","+"PatchUpdateApi_JACity"+","+"PatchUpdateApi_JACountry"+","+"PatchUpdateApi_JAPostCode"+","+"PatchUpdateApi_JAPrimaryAddress"+","+"PatchUpdateApi_tradingCertificateBanks")
patchRequestBodyWriter.println("PatchReqestBody_id"+","+"PatchReqestBody_addressTypeId"+","+"PatchReqestBody_sourceSystem"+","+"PatchReqestBody_reference"+","+"PatchReqestBody_currentStatus"+","+"PatchReqestBody_storageId"+","+"PatchReqestBody_riskId"+","+"PatchReqestBody_policyId"+","+"PatchReqestBody_memberPartyId"+","+"PatchReqestBody_ownerPartyId"+","+"PatchReqestBody_brokerPartyId"+","+"PatchReqestBody_isRenewal"+","+"PatchReqestBody_isYacht"+","+"PatchReqestBody_version"+","+"PatchReqestBody_riskReference"+","+"PatchReqestBody_policyReference"+","+"PatchReqestBody_memberReference"+","+"PatchReqestBody_memberType"+","+"PatchReqestBody_memberName"+","+"PatchReqestBody_jointAssuredName"+","+"PatchReqestBody_ownerReference"+","+"PatchReqestBody_ownerName"+","+"PatchReqestBody_ownerDomicile"+","+"PatchReqestBody_ownerEmailAddress"+","+"PatchReqestBody_brokerReference"+","+"PatchReqestBody_brokerName"+","+"PatchReqestBody_brokerEmailAddress"+","+"PatchReqestBody_policyYear"+","+"PatchReqestBody_certificateIssueDate"+","+"PatchReqestBody_emailAddress"+","+"PatchReqestBody_ccEmailAddress"+","+"PatchReqestBody_effectiveStartDate"+","+"PatchReqestBody_effectiveEndDate"+","+"PatchReqestBody_passengerCapacity"+","+"PatchReqestBody_policyStartDate"+","+"PatchReqestBody_policyEndDate"+","+"PatchReqestBody_currencyCode"+","+"PatchReqestBody_coverLimitAmount"+","+"PatchReqestBody_signatoryStateId"+","+"PatchReqestBody_vesselName"+","+"PatchReqestBody_vesselType"+","+"PatchReqestBody_vesselTypeName"+","+"PatchReqestBody_vesselEnteredDate"+","+"PatchReqestBody_vesselFlag"+","+"PatchReqestBody_imoNumber"+","+"PatchReqestBody_distinctiveNumbersOrLetters"+","+"PatchReqestBody_grossTonnage"+","+"PatchReqestBody_yearBuilt"+","+"PatchReqestBody_engineHorsePower"+","+"PatchReqestBody_trademarkAndEngineModel"+","+"PatchReqestBody_model"+","+"PatchReqestBody_engineNo"+","+"PatchReqestBody_nominatedFlagState"+","+"PatchReqestBody_nominatedFlagStateName"+","+"PatchReqestBody_portOfRegistry"+","+"PatchReqestBody_tenderReferenceList"+","+"PatchReqestBody_tenderOutboardReferenceList"+","+"PatchReqestBody_tradingCertificateTypeId"+","+"PatchReqestBody_tradingCertificateGroupId"+","+"PatchReqestBody_tradingCertificateGroupName"+","+"PatchReqestBody_tradingCertificateGroupCode"+","+"PatchReqestBody_tradingCertificateTypeCode"+","+"PatchReqestBody_tradingCertificateTypeName"+","+"PatchReqestBody_stateAddressId"+","+"PatchReqestBody_stateAddressName"+","+"PatchReqestBody_stateAddressLine1"+","+"PatchReqestBody_stateAddressLine2"+","+"PatchReqestBody_stateAddressLine3"+","+"PatchReqestBody_stateStateOrCounty"+","+"PatchReqestBody_stateCity"+","+"PatchReqestBody_stateCountry"+","+"PatchReqestBody_statePostCode"+","+"PatchReqestBody_statePrimaryAddress"+","+"PatchReqestBody_ownerAddressId"+","+"PatchReqestBody_ownerAddressName"+","+"PatchReqestBody_ownerAddressLine1"+","+"PatchReqestBody_ownerAddressLine2"+","+"PatchReqestBody_ownerAddressLine3"+","+"PatchReqestBody_ownerStateOrCounty"+","+"PatchReqestBody_ownerCity"+","+"PatchReqestBody_ownerCountry"+","+"PatchReqestBody_ownerPostCode"+","+"PatchReqestBody_ownerPrimaryAddress"+","+"PatchReqestBody_brokerAddressId"+","+"PatchReqestBody_brokerAddressName"+","+"PatchReqestBody_brokerAddressLine1"+","+"PatchReqestBody_brokerAddressLine2"+","+"PatchReqestBody_brokerAddressLine3"+","+"PatchReqestBody_brokerStateOrCounty"+","+"PatchReqestBody_brokerCity"+","+"PatchReqestBody_brokerCountry"+","+"PatchReqestBody_brokerPostCode"+","+"PatchReqestBody_brokerPrimaryAddress"+","+"PatchReqestBody_memberAddress"+","+"PatchReqestBody_JAAddressId"+","+"PatchReqestBody_JAAddressName"+","+"PatchReqestBody_JAAddressLine1"+","+"PatchReqestBody_JAAddressLine2"+","+"PatchReqestBody_JAAddressLine3"+","+"PatchReqestBody_JAStateOrCounty"+","+"PatchReqestBody_JACity"+","+"PatchReqestBody_JACountry"+","+"PatchReqestBody_JAPostCode"+","+"PatchReqestBody_JAPrimaryAddress"+","+"PatchReqestBody_tradingCertificateBanks")
comparePostPatchWriter.println("postApi_id"+","+"patchApi_id"+","+"postApi_addressTypeId"+","+"patchApi_addressTypeId"+","+"postApi_sourceSystem"+","+"patchApi_sourceSystem"+","+"postApi_reference"+","+"patchApi_reference"+","+"postApi_currentStatus"+","+"patchApi_currentStatus"+","+"postApi_storageId"+","+"patchApi_storageId"+","+"postApi_riskId"+","+"patchApi_riskId"+","+"postApi_policyId"+","+"patchApi_policyId"+","+"postApi_memberPartyId"+","+"patchApi_memberPartyId"+","+"postApi_ownerPartyId"+","+"patchApi_ownerPartyId"+","+"postApi_brokerPartyId"+","+"patchApi_brokerPartyId"+","+"postApi_isRenewal"+","+"patchApi_isRenewal"+","+"postApi_isYacht"+","+"patchApi_isYacht"+","+"postApi_version"+","+"patchApi_version"+","+"postApi_riskReference"+","+"patchApi_riskReference"+","+"postApi_policyReference"+","+"patchApi_policyReference"+","+"postApi_memberReference"+","+"patchApi_memberReference"+","+"postApi_memberType"+","+"patchApi_memberType"+","+"postApi_memberName"+","+"patchApi_memberName"+","+"postApi_jointAssuredName"+","+"patchApi_jointAssuredName"+","+"postApi_ownerReference"+","+"patchApi_ownerReference"+","+"postApi_ownerName"+","+"patchApi_ownerName"+","+"postApi_ownerDomicile"+","+"patchApi_ownerDomicile"+","+"postApi_ownerEmailAddress"+","+"patchApi_ownerEmailAddress"+","+"postApi_brokerReference"+","+"patchApi_brokerReference"+","+"postApi_brokerName"+","+"patchApi_brokerName"+","+"postApi_brokerEmailAddress"+","+"patchApi_brokerEmailAddress"+","+"postApi_policyYear"+","+"patchApi_policyYear"+","+"postApi_certificateIssueDate"+","+"patchApi_certificateIssueDate"+","+"postApi_emailAddress"+","+"patchApi_emailAddress"+","+"postApi_ccEmailAddress"+","+"patchApi_ccEmailAddress"+","+"postApi_effectiveStartDate"+","+"patchApi_effectiveStartDate"+","+"postApi_effectiveEndDate"+","+"patchApi_effectiveEndDate"+","+"postApi_passengerCapacity"+","+"patchApi_passengerCapacity"+","+"postApi_policyStartDate"+","+"patchApi_policyStartDate"+","+"postApi_policyEndDate"+","+"patchApi_policyEndDate"+","+"postApi_currencyCode"+","+"patchApi_currencyCode"+","+"postApi_coverLimitAmount"+","+"patchApi_coverLimitAmount"+","+"postApi_signatoryStateId"+","+"patchApi_signatoryStateId"+","+"postApi_vesselName"+","+"patchApi_vesselName"+","+"postApi_vesselType"+","+"patchApi_vesselType"+","+"postApi_vesselTypeName"+","+"patchApi_vesselTypeName"+","+"postApi_vesselEnteredDate"+","+"patchApi_vesselEnteredDate"+","+"postApi_vesselFlag"+","+"patchApi_vesselFlag"+","+"postApi_imoNumber"+","+"patchApi_imoNumber"+","+"postApi_distinctiveNumbersOrLetters"+","+"patchApi_distinctiveNumbersOrLetters"+","+"postApi_grossTonnage"+","+"patchApi_grossTonnage"+","+"postApi_yearBuilt"+","+"patchApi_yearBuilt"+","+"postApi_engineHorsePower"+","+"patchApi_engineHorsePower"+","+"postApi_trademarkAndEngineModel"+","+"patchApi_trademarkAndEngineModel"+","+"postApi_model"+","+"patchApi_model"+","+"postApi_engineNo"+","+"patchApi_engineNo"+","+"postApi_nominatedFlagState"+","+"patchApi_nominatedFlagState"+","+"postApi_nominatedFlagStateName"+","+"patchApi_nominatedFlagStateName"+","+"postApi_portOfRegistry"+","+"patchApi_portOfRegistry"+","+"postApi_tenderReferenceList"+","+"patchApi_tenderReferenceList"+","+"postApi_tenderOutboardReferenceList"+","+"patchApi_tenderOutboardReferenceList"+","+"postApi_tradingCertificateTypeId"+","+"patchApi_tradingCertificateTypeId"+","+"postApi_tradingCertificateGroupId"+","+"patchApi_tradingCertificateGroupId"+","+"postApi_tradingCertificateGroupName"+","+"patchApi_tradingCertificateGroupName"+","+"postApi_tradingCertificateGroupCode"+","+"patchApi_tradingCertificateGroupCode"+","+"postApi_tradingCertificateTypeCode"+","+"patchApi_tradingCertificateTypeCode"+","+"postApi_tradingCertificateTypeName"+","+"patchApi_tradingCertificateTypeName"+","+"postApi_stateAddress"+","+"patchApi_stateAddress"+","+"postApi_ownerAddress"+","+"patchApi_ownerAddress"+","+"postApi_brokerAddress"+","+"patchApi_brokerAddress"+","+"postApi_memberAddress"+","+"patchApi_memberAddress"+","+"postApi_jointAssuredAddress"+","+"patchApi_jointAssuredAddress"+","+"postApi_tradingCertificateBanks"+","+"patchApi_tradingCertificateBanks"+","+"Test Case Status")
//comparePatchDBWriter.println("patchApi_id"+","+"patchUpdateApi_id"+","+"patchApi_addressTypeId"+","+"patchUpdateApi_addressTypeId"+","+"patchApi_sourceSystem"+","+"patchUpdateApi_sourceSystem"+","+"patchApi_reference"+","+"patchUpdateApi_reference"+","+"patchApi_currentStatus"+","+"patchUpdateApi_currentStatus"+","+"patchApi_storageId"+","+"patchUpdateApi_storageId"+","+"patchApi_riskId"+","+"patchUpdateApi_riskId"+","+"patchApi_policyId"+","+"patchUpdateApi_policyId"+","+"patchApi_memberPartyId"+","+"patchUpdateApi_memberPartyId"+","+"patchApi_ownerPartyId"+","+"patchUpdateApi_ownerPartyId"+","+"patchApi_brokerPartyId"+","+"patchUpdateApi_brokerPartyId"+","+"patchApi_isRenewal"+","+"patchUpdateApi_isRenewal"+","+"patchApi_isYacht"+","+"patchUpdateApi_isYacht"+","+"patchApi_version"+","+"patchUpdateApi_version"+","+"patchApi_riskReference"+","+"patchUpdateApi_riskReference"+","+"patchApi_policyReference"+","+"patchUpdateApi_policyReference"+","+"patchApi_memberReference"+","+"patchUpdateApi_memberReference"+","+"patchApi_memberType"+","+"patchUpdateApi_memberType"+","+"patchApi_memberName"+","+"patchUpdateApi_memberName"+","+"patchApi_jointAssuredName"+","+"patchUpdateApi_jointAssuredName"+","+"patchApi_ownerReference"+","+"patchUpdateApi_ownerReference"+","+"patchApi_ownerName"+","+"patchUpdateApi_ownerName"+","+"patchApi_ownerDomicile"+","+"patchUpdateApi_ownerDomicile"+","+"patchApi_ownerEmailAddress"+","+"patchUpdateApi_ownerEmailAddress"+","+"patchApi_brokerReference"+","+"patchUpdateApi_brokerReference"+","+"patchApi_brokerName"+","+"patchUpdateApi_brokerName"+","+"patchApi_brokerEmailAddress"+","+"patchUpdateApi_brokerEmailAddress"+","+"patchApi_policyYear"+","+"patchUpdateApi_policyYear"+","+"patchApi_certificateIssueDate"+","+"patchUpdateApi_certificateIssueDate"+","+"patchApi_emailAddress"+","+"patchUpdateApi_emailAddress"+","+"patchApi_ccEmailAddress"+","+"patchUpdateApi_ccEmailAddress"+","+"patchApi_effectiveStartDate"+","+"patchUpdateApi_effectiveStartDate"+","+"patchApi_effectiveEndDate"+","+"patchUpdateApi_effectiveEndDate"+","+"patchApi_passengerCapacity"+","+"patchUpdateApi_passengerCapacity"+","+"patchApi_policyStartDate"+","+"patchUpdateApi_policyStartDate"+","+"patchApi_policyEndDate"+","+"patchUpdateApi_policyEndDate"+","+"patchApi_currencyCode"+","+"patchUpdateApi_currencyCode"+","+"patchApi_coverLimitAmount"+","+"patchUpdateApi_coverLimitAmount"+","+"patchApi_signatoryStateId"+","+"patchUpdateApi_signatoryStateId"+","+"patchApi_vesselName"+","+"patchUpdateApi_vesselName"+","+"patchApi_vesselType"+","+"patchUpdateApi_vesselType"+","+"patchApi_vesselTypeName"+","+"patchUpdateApi_vesselTypeName"+","+"patchApi_vesselEnteredDate"+","+"patchUpdateApi_vesselEnteredDate"+","+"patchApi_vesselFlag"+","+"patchUpdateApi_vesselFlag"+","+"patchApi_imoNumber"+","+"patchUpdateApi_imoNumber"+","+"patchApi_distinctiveNumbersOrLetters"+","+"patchUpdateApi_distinctiveNumbersOrLetters"+","+"patchApi_grossTonnage"+","+"patchUpdateApi_grossTonnage"+","+"patchApi_yearBuilt"+","+"patchUpdateApi_yearBuilt"+","+"patchApi_engineHorsePower"+","+"patchUpdateApi_engineHorsePower"+","+"patchApi_trademarkAndEngineModel"+","+"patchUpdateApi_trademarkAndEngineModel"+","+"patchApi_model"+","+"patchUpdateApi_model"+","+"patchApi_engineNo"+","+"patchUpdateApi_engineNo"+","+"patchApi_nominatedFlagState"+","+"patchUpdateApi_nominatedFlagState"+","+"patchApi_nominatedFlagStateName"+","+"patchUpdateApi_nominatedFlagStateName"+","+"patchApi_portOfRegistry"+","+"patchUpdateApi_portOfRegistry"+","+"patchApi_tenderReferenceList"+","+"patchUpdateApi_tenderReferenceList"+","+"patchApi_tenderOutboardReferenceList"+","+"patchUpdateApi_tenderOutboardReferenceList"+","+"patchApi_tradingCertificateTypeId"+","+"patchUpdateApi_tradingCertificateTypeId"+","+"patchApi_tradingCertificateGroupId"+","+"patchUpdateApi_tradingCertificateGroupId"+","+"patchApi_tradingCertificateGroupName"+","+"patchUpdateApi_tradingCertificateGroupName"+","+"patchApi_tradingCertificateGroupCode"+","+"patchUpdateApi_tradingCertificateGroupCode"+","+"patchApi_tradingCertificateTypeCode"+","+"patchUpdateApi_tradingCertificateTypeCode"+","+"patchApi_tradingCertificateTypeName"+","+"patchUpdateApi_tradingCertificateTypeName"+","+"patchApi_stateAddress"+","+"patchUpdateApi_stateAddress"+","+"patchApi_ownerAddress"+","+"patchUpdateApi_ownerAddress"+","+"patchApi_brokerAddress"+","+"patchUpdateApi_brokerAddress"+","+"patchApi_memberAddress"+","+"patchUpdateApi_memberAddress"+","+"patchApi_jointAssuredAddress"+","+"patchUpdateApi_jointAssuredAddress"+","+"patchApi_tradingCertificateBanks"+","+"patchUpdateApi_tradingCertificateBanks"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonResp=null

int counter=0;

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

con.eachRow(sqlstmt)
{	
	row -> 
	sql_TypeId=row.TypeId
	sql_TypeCode=row.TypeCode
	sql_TypeName=row.TypeName
	sql_GroupId=row.GroupId
	sql_GroupCode=row.GroupCode
	sql_GroupName=row.GroupName
	
	sqlWriter.println(sql_TypeId+","+sql_TypeCode+","+sql_TypeName+","+sql_GroupId+","+sql_GroupCode)
	log.info "SQL Response is : "+sql_TypeId+","+sql_TypeCode+","+sql_TypeName+","+sql_GroupId+","+sql_GroupCode

	//Set the TypeId at test case level
	String TypeId=sql_TypeId
	//Set the GroupId at test case level
	String GroupId=sql_GroupId
	//Set the GroupCode at test case level
	String GroupCode=sql_GroupCode
	//Set the TypeName at test case level
	String TypeName=sql_TypeName
	//Set the GroupName at test case level
	String GroupName=sql_GroupName

	Random a = new Random()
	int rnd =a.next(3)
	//log.info rnd
	if(rnd==0 || rnd==1){ rnd=3}
	else if(rnd==2|| rnd==4){ rnd=4}
	else if (rnd==5||rnd==6|| rnd==7){ rnd=8}

	def postRequestBody=
	"""
	{
    "addressTypeId":$rnd,
    "tradingCertificateTypeId": $sql_TypeId,
    "sourceSystem": "SIGMA",
    "reference": null,
    "riskId": 654321,
    "policyId": 91827,
    "memberPartyId": 56789,
    "riskReference": "602345",
    "policyReference": "1045678",
    "memberReference": "76567",
    "policyStartDate": "2021-02-28T12:00:00.000Z",
    "policyEndDate": "2021-02-28T12:00:00.000Z",
    "portOfRegistry": "TRIESTE"
	}
	"""
	log.info "Request Body for post method is : "+postRequestBody

	//Set the Token at test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
	
	//Run the test step to get response
	testRunner.testCase.testSteps["POST_TradingCertSave"].setPropertyValue( "Request", postRequestBody)
	testRunner.runTestStepByName('POST_TradingCertSave')
	String req='${POST_TradingCertSave#Response}'
	response=context.expand(req)
	//log.info "API Response for POST Method received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["POST_TradingCertSave"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	postApi_id=jsonRes.id
	postApi_addressTypeId=jsonRes.addressTypeId
	postApi_sourceSystem=jsonRes.sourceSystem
	postApi_reference=jsonRes.reference
	postApi_currentStatus=jsonRes.currentStatus
	postApi_storageId=jsonRes.storageId
	postApi_riskId=jsonRes.riskId
	postApi_policyId=jsonRes.policyId
	postApi_memberPartyId=jsonRes.memberPartyId
	postApi_ownerPartyId=jsonRes.ownerPartyId
	postApi_brokerPartyId=jsonRes.brokerPartyId
	postApi_isRenewal=jsonRes.isRenewal
	postApi_isYacht=jsonRes.isYacht
	postApi_version=jsonRes.version
	postApi_riskReference=jsonRes.riskReference
	postApi_policyReference=jsonRes.policyReference
	postApi_memberReference=jsonRes.memberReference
	postApi_memberType=jsonRes.memberType
	postApi_memberName=jsonRes.memberName
	postApi_jointAssuredName=jsonRes.jointAssuredName
	postApi_ownerReference=jsonRes.ownerReference
	postApi_ownerName=jsonRes.ownerName
	postApi_ownerDomicile=jsonRes.ownerDomicile
	postApi_ownerEmailAddress=jsonRes.ownerEmailAddress
	postApi_brokerReference=jsonRes.brokerReference
	postApi_brokerName=jsonRes.brokerName
	postApi_brokerEmailAddress=jsonRes.brokerEmailAddress
	postApi_policyYear=jsonRes.policyYear
	postApi_certificateIssueDate=jsonRes.certificateIssueDate
	postApi_emailAddress=jsonRes.emailAddress
	postApi_ccEmailAddress=jsonRes.ccEmailAddress
	postApi_effectiveStartDate=jsonRes.effectiveStartDate
	postApi_effectiveEndDate=jsonRes.effectiveEndDate
	postApi_passengerCapacity=jsonRes.passengerCapacity
	postApi_policyStartDate=jsonRes.policyStartDate
	postApi_policyEndDate=jsonRes.policyEndDate
	postApi_currencyCode=jsonRes.currencyCode
	postApi_coverLimitAmount=jsonRes.coverLimitAmount
	postApi_signatoryStateId=jsonRes.signatoryStateId
	postApi_vesselName=jsonRes.vesselName
	postApi_vesselType=jsonRes.vesselType
	postApi_vesselTypeName=jsonRes.vesselTypeName
	postApi_vesselEnteredDate=jsonRes.vesselEnteredDate
	postApi_vesselFlag=jsonRes.vesselFlag
	postApi_imoNumber=jsonRes.imoNumber
	postApi_distinctiveNumbersOrLetters=jsonRes.distinctiveNumbersOrLetters
	postApi_grossTonnage=jsonRes.grossTonnage
	postApi_yearBuilt=jsonRes.yearBuilt
	postApi_engineHorsePower=jsonRes.engineHorsePower
	postApi_trademarkAndEngineModel=jsonRes.trademarkAndEngineModel
	postApi_model=jsonRes.model
	postApi_engineNo=jsonRes.engineNo
	postApi_nominatedFlagState=jsonRes.nominatedFlagState
	postApi_nominatedFlagStateName=jsonRes.nominatedFlagStateName
	postApi_portOfRegistry=jsonRes.portOfRegistry
	postApi_tenderReferenceList=jsonRes.tenderReferenceList
	postApi_tenderOutboardReferenceList=jsonRes.tenderOutboardReferenceList
	postApi_tradingCertificateTypeId=jsonRes.tradingCertificateType.id
	postApi_tradingCertificateGroupId=jsonRes.tradingCertificateType.tradingCertificateGroup.id
	postApi_tradingCertificateGroupName=jsonRes.tradingCertificateType.tradingCertificateGroup.name
	postApi_tradingCertificateGroupCode=jsonRes.tradingCertificateType.tradingCertificateGroup.groupCode
	postApi_tradingCertificateTypeCode=jsonRes.tradingCertificateType.typeCode
	postApi_tradingCertificateTypeName=jsonRes.tradingCertificateType.typeName
	postApi_stateAddress=jsonRes.stateAddress
	postApi_ownerAddress=jsonRes.ownerAddress
	postApi_brokerAddress=jsonRes.brokerAddress
	postApi_memberAddress=jsonRes.memberAddress
	postApi_jointAssuredAddress=jsonRes.jointAssuredAddress
	postApi_tradingCertificateBanks=jsonRes.tradingCertificateBanks

	postApiWriter.println(postApi_id+","+postApi_addressTypeId+","+postApi_sourceSystem+","+postApi_reference+","+postApi_currentStatus+","+postApi_storageId+","+postApi_riskId+","+postApi_policyId+","+postApi_memberPartyId+","+postApi_ownerPartyId+","+postApi_brokerPartyId+","+postApi_isRenewal+","+postApi_isYacht+","+postApi_version+","+postApi_riskReference+","+postApi_policyReference+","+postApi_memberReference+","+postApi_memberType+","+postApi_memberName+","+postApi_jointAssuredName+","+postApi_ownerReference+","+postApi_ownerName+","+postApi_ownerDomicile+","+postApi_ownerEmailAddress+","+postApi_brokerReference+","+postApi_brokerName+","+postApi_brokerEmailAddress+","+postApi_policyYear+","+postApi_certificateIssueDate+","+postApi_emailAddress+","+postApi_ccEmailAddress+","+postApi_effectiveStartDate+","+postApi_effectiveEndDate+","+postApi_passengerCapacity+","+postApi_policyStartDate+","+postApi_policyEndDate+","+postApi_currencyCode+","+postApi_coverLimitAmount+","+postApi_signatoryStateId+","+postApi_vesselName+","+postApi_vesselType+","+postApi_vesselTypeName+","+postApi_vesselEnteredDate+","+postApi_vesselFlag+","+postApi_imoNumber+","+postApi_distinctiveNumbersOrLetters+","+postApi_grossTonnage+","+postApi_yearBuilt+","+postApi_engineHorsePower+","+postApi_trademarkAndEngineModel+","+postApi_model+","+postApi_engineNo+","+postApi_nominatedFlagState+","+postApi_nominatedFlagStateName+","+postApi_portOfRegistry+","+postApi_tenderReferenceList+","+postApi_tenderOutboardReferenceList+","+postApi_tradingCertificateTypeId+","+postApi_tradingCertificateGroupId+","+postApi_tradingCertificateGroupName+","+postApi_tradingCertificateGroupCode+","+postApi_tradingCertificateTypeCode+","+postApi_tradingCertificateTypeName+","+postApi_stateAddress+","+postApi_ownerAddress+","+postApi_brokerAddress+","+postApi_memberAddress+","+postApi_jointAssuredAddress+","+postApi_tradingCertificateBanks)
	log.info "Post API response for creating new trading certificate : "+postApi_id+","+postApi_addressTypeId+","+postApi_sourceSystem+","+postApi_reference+","+postApi_currentStatus+","+postApi_storageId+","+postApi_riskId+","+postApi_policyId+","+postApi_memberPartyId+","+postApi_ownerPartyId+","+postApi_brokerPartyId+","+postApi_isRenewal+","+postApi_isYacht+","+postApi_version+","+postApi_riskReference+","+postApi_policyReference+","+postApi_memberReference+","+postApi_memberType+","+postApi_memberName+","+postApi_jointAssuredName+","+postApi_ownerReference+","+postApi_ownerName+","+postApi_ownerDomicile+","+postApi_ownerEmailAddress+","+postApi_brokerReference+","+postApi_brokerName+","+postApi_brokerEmailAddress+","+postApi_policyYear+","+postApi_certificateIssueDate+","+postApi_emailAddress+","+postApi_ccEmailAddress+","+postApi_effectiveStartDate+","+postApi_effectiveEndDate+","+postApi_passengerCapacity+","+postApi_policyStartDate+","+postApi_policyEndDate+","+postApi_currencyCode+","+postApi_coverLimitAmount+","+postApi_signatoryStateId+","+postApi_vesselName+","+postApi_vesselType+","+postApi_vesselTypeName+","+postApi_vesselEnteredDate+","+postApi_vesselFlag+","+postApi_imoNumber+","+postApi_distinctiveNumbersOrLetters+","+postApi_grossTonnage+","+postApi_yearBuilt+","+postApi_engineHorsePower+","+postApi_trademarkAndEngineModel+","+postApi_model+","+postApi_engineNo+","+postApi_nominatedFlagState+","+postApi_nominatedFlagStateName+","+postApi_portOfRegistry+","+postApi_tenderReferenceList+","+postApi_tenderOutboardReferenceList+","+postApi_tradingCertificateTypeId+","+postApi_tradingCertificateGroupId+","+postApi_tradingCertificateGroupName+","+postApi_tradingCertificateGroupCode+","+postApi_tradingCertificateTypeCode+","+postApi_tradingCertificateTypeName+","+postApi_stateAddress+","+postApi_ownerAddress+","+postApi_brokerAddress+","+postApi_memberAddress+","+postApi_jointAssuredAddress+","+postApi_tradingCertificateBanks
	
	def patchRequest=response
	log.info "Request body for patch method is : "+patchRequest

	//Set the Token at test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
	//Run the test step to get response
	testRunner.testCase.testSteps["Patch_TradingCertificate"].setPropertyValue( "Request", patchRequest)
	testRunner.runTestStepByName('Patch_TradingCertificate')
	req='${Patch_TradingCertificate#Response}'
	response=context.expand(req)
	log.info "API Response for PATCH Method received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	httpResponseHeaders = context.testCase.testSteps["Patch_TradingCertificate"].testRequest.response.responseHeaders
	httpStatus = httpResponseHeaders["#status#"]
	httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	patchApi_id=jsonRes.id
	patchApi_addressTypeId=jsonRes.addressTypeId
	patchApi_sourceSystem=jsonRes.sourceSystem
	patchApi_reference=jsonRes.reference
	patchApi_currentStatus=jsonRes.currentStatus
	patchApi_storageId=jsonRes.storageId
	patchApi_riskId=jsonRes.riskId
	patchApi_policyId=jsonRes.policyId
	patchApi_memberPartyId=jsonRes.memberPartyId
	patchApi_ownerPartyId=jsonRes.ownerPartyId
	patchApi_brokerPartyId=jsonRes.brokerPartyId
	patchApi_isRenewal=jsonRes.isRenewal
	patchApi_isYacht=jsonRes.isYacht
	patchApi_version=jsonRes.version
	patchApi_riskReference=jsonRes.riskReference
	patchApi_policyReference=jsonRes.policyReference
	patchApi_memberReference=jsonRes.memberReference
	patchApi_memberType=jsonRes.memberType
	patchApi_memberName=jsonRes.memberName
	patchApi_jointAssuredName=jsonRes.jointAssuredName
	patchApi_ownerReference=jsonRes.ownerReference
	patchApi_ownerName=jsonRes.ownerName
	patchApi_ownerDomicile=jsonRes.ownerDomicile
	patchApi_ownerEmailAddress=jsonRes.ownerEmailAddress
	patchApi_brokerReference=jsonRes.brokerReference
	patchApi_brokerName=jsonRes.brokerName
	patchApi_brokerEmailAddress=jsonRes.brokerEmailAddress
	patchApi_policyYear=jsonRes.policyYear
	patchApi_certificateIssueDate=jsonRes.certificateIssueDate
	patchApi_emailAddress=jsonRes.emailAddress
	patchApi_ccEmailAddress=jsonRes.ccEmailAddress
	patchApi_effectiveStartDate=jsonRes.effectiveStartDate
	patchApi_effectiveEndDate=jsonRes.effectiveEndDate
	patchApi_passengerCapacity=jsonRes.passengerCapacity
	patchApi_policyStartDate=jsonRes.policyStartDate
	patchApi_policyEndDate=jsonRes.policyEndDate
	patchApi_currencyCode=jsonRes.currencyCode
	patchApi_coverLimitAmount=jsonRes.coverLimitAmount
	patchApi_signatoryStateId=jsonRes.signatoryStateId
	patchApi_vesselName=jsonRes.vesselName
	patchApi_vesselType=jsonRes.vesselType
	patchApi_vesselTypeName=jsonRes.vesselTypeName
	patchApi_vesselEnteredDate=jsonRes.vesselEnteredDate
	patchApi_vesselFlag=jsonRes.vesselFlag
	patchApi_imoNumber=jsonRes.imoNumber
	patchApi_distinctiveNumbersOrLetters=jsonRes.distinctiveNumbersOrLetters
	patchApi_grossTonnage=jsonRes.grossTonnage
	patchApi_yearBuilt=jsonRes.yearBuilt
	patchApi_engineHorsePower=jsonRes.engineHorsePower
	patchApi_trademarkAndEngineModel=jsonRes.trademarkAndEngineModel
	patchApi_model=jsonRes.model
	patchApi_engineNo=jsonRes.engineNo
	patchApi_nominatedFlagState=jsonRes.nominatedFlagState
	patchApi_nominatedFlagStateName=jsonRes.nominatedFlagStateName
	patchApi_portOfRegistry=jsonRes.portOfRegistry
	patchApi_tenderReferenceList=jsonRes.tenderReferenceList
	patchApi_tenderOutboardReferenceList=jsonRes.tenderOutboardReferenceList
	patchApi_tradingCertificateTypeId=jsonRes.tradingCertificateType.id
	patchApi_tradingCertificateGroupId=jsonRes.tradingCertificateType.tradingCertificateGroup.id
	patchApi_tradingCertificateGroupName=jsonRes.tradingCertificateType.tradingCertificateGroup.name
	patchApi_tradingCertificateGroupCode=jsonRes.tradingCertificateType.tradingCertificateGroup.groupCode
	patchApi_tradingCertificateTypeCode=jsonRes.tradingCertificateType.typeCode
	patchApi_tradingCertificateTypeName=jsonRes.tradingCertificateType.typeName
	patchApi_stateAddress=jsonRes.stateAddress
	patchApi_ownerAddress=jsonRes.ownerAddress
	patchApi_brokerAddress=jsonRes.brokerAddress
	patchApi_memberAddress=jsonRes.memberAddress
	patchApi_jointAssuredAddress=jsonRes.jointAssuredAddress
	patchApi_tradingCertificateBanks=jsonRes.tradingCertificateBanks

	patchApiWriter.println(patchApi_id+","+patchApi_addressTypeId+","+patchApi_sourceSystem+","+patchApi_reference+","+patchApi_currentStatus+","+patchApi_storageId+","+patchApi_riskId+","+patchApi_policyId+","+patchApi_memberPartyId+","+patchApi_ownerPartyId+","+patchApi_brokerPartyId+","+patchApi_isRenewal+","+patchApi_isYacht+","+patchApi_version+","+patchApi_riskReference+","+patchApi_policyReference+","+patchApi_memberReference+","+patchApi_memberType+","+patchApi_memberName+","+patchApi_jointAssuredName+","+patchApi_ownerReference+","+patchApi_ownerName+","+patchApi_ownerDomicile+","+patchApi_ownerEmailAddress+","+patchApi_brokerReference+","+patchApi_brokerName+","+patchApi_brokerEmailAddress+","+patchApi_policyYear+","+patchApi_certificateIssueDate+","+patchApi_emailAddress+","+patchApi_ccEmailAddress+","+patchApi_effectiveStartDate+","+patchApi_effectiveEndDate+","+patchApi_passengerCapacity+","+patchApi_policyStartDate+","+patchApi_policyEndDate+","+patchApi_currencyCode+","+patchApi_coverLimitAmount+","+patchApi_signatoryStateId+","+patchApi_vesselName+","+patchApi_vesselType+","+patchApi_vesselTypeName+","+patchApi_vesselEnteredDate+","+patchApi_vesselFlag+","+patchApi_imoNumber+","+patchApi_distinctiveNumbersOrLetters+","+patchApi_grossTonnage+","+patchApi_yearBuilt+","+patchApi_engineHorsePower+","+patchApi_trademarkAndEngineModel+","+patchApi_model+","+patchApi_engineNo+","+patchApi_nominatedFlagState+","+patchApi_nominatedFlagStateName+","+patchApi_portOfRegistry+","+patchApi_tenderReferenceList+","+patchApi_tenderOutboardReferenceList+","+patchApi_tradingCertificateTypeId+","+patchApi_tradingCertificateGroupId+","+patchApi_tradingCertificateGroupName+","+patchApi_tradingCertificateGroupCode+","+patchApi_tradingCertificateTypeCode+","+patchApi_tradingCertificateTypeName+","+patchApi_stateAddress+","+patchApi_ownerAddress+","+patchApi_brokerAddress+","+patchApi_memberAddress+","+patchApi_jointAssuredAddress+","+patchApi_tradingCertificateBanks)
	log.info "Patch API response : "+patchApi_id+","+patchApi_addressTypeId+","+patchApi_sourceSystem+","+patchApi_reference+","+patchApi_currentStatus+","+patchApi_storageId+","+patchApi_riskId+","+patchApi_policyId+","+patchApi_memberPartyId+","+patchApi_ownerPartyId+","+patchApi_brokerPartyId+","+patchApi_isRenewal+","+patchApi_isYacht+","+patchApi_version+","+patchApi_riskReference+","+patchApi_policyReference+","+patchApi_memberReference+","+patchApi_memberType+","+patchApi_memberName+","+patchApi_jointAssuredName+","+patchApi_ownerReference+","+patchApi_ownerName+","+patchApi_ownerDomicile+","+patchApi_ownerEmailAddress+","+patchApi_brokerReference+","+patchApi_brokerName+","+patchApi_brokerEmailAddress+","+patchApi_policyYear+","+patchApi_certificateIssueDate+","+patchApi_emailAddress+","+patchApi_ccEmailAddress+","+patchApi_effectiveStartDate+","+patchApi_effectiveEndDate+","+patchApi_passengerCapacity+","+patchApi_policyStartDate+","+patchApi_policyEndDate+","+patchApi_currencyCode+","+patchApi_coverLimitAmount+","+patchApi_signatoryStateId+","+patchApi_vesselName+","+patchApi_vesselType+","+patchApi_vesselTypeName+","+patchApi_vesselEnteredDate+","+patchApi_vesselFlag+","+patchApi_imoNumber+","+patchApi_distinctiveNumbersOrLetters+","+patchApi_grossTonnage+","+patchApi_yearBuilt+","+patchApi_engineHorsePower+","+patchApi_trademarkAndEngineModel+","+patchApi_model+","+patchApi_engineNo+","+patchApi_nominatedFlagState+","+patchApi_nominatedFlagStateName+","+patchApi_portOfRegistry+","+patchApi_tenderReferenceList+","+patchApi_tenderOutboardReferenceList+","+patchApi_tradingCertificateTypeId+","+patchApi_tradingCertificateGroupId+","+patchApi_tradingCertificateGroupName+","+patchApi_tradingCertificateGroupCode+","+patchApi_tradingCertificateTypeCode+","+patchApi_tradingCertificateTypeName+","+patchApi_stateAddress+","+patchApi_ownerAddress+","+patchApi_brokerAddress+","+patchApi_memberAddress+","+patchApi_jointAssuredAddress+","+patchApi_tradingCertificateBanks

	if (
			postApi_id.equals(patchApi_id) && 
			postApi_addressTypeId.equals(patchApi_addressTypeId) && 
			postApi_sourceSystem.equals(patchApi_sourceSystem) && 
			postApi_reference.equals(patchApi_reference) && 
			postApi_currentStatus.equals(patchApi_currentStatus) && 
			postApi_storageId.equals(patchApi_storageId) && 
			postApi_riskId.equals(patchApi_riskId) && 
			postApi_policyId.equals(patchApi_policyId) && 
			postApi_memberPartyId.equals(patchApi_memberPartyId) && 
			postApi_ownerPartyId.equals(patchApi_ownerPartyId) && 
			postApi_brokerPartyId.equals(patchApi_brokerPartyId) && 
			postApi_isRenewal.equals(patchApi_isRenewal) && 
			postApi_isYacht.equals(patchApi_isYacht) && 
			postApi_version.equals(patchApi_version) && 
			postApi_riskReference.equals(patchApi_riskReference) && 
			postApi_policyReference.equals(patchApi_policyReference) && 
			postApi_memberReference.equals(patchApi_memberReference) && 
			postApi_memberType.equals(patchApi_memberType) && 
			postApi_memberName.equals(patchApi_memberName) && 
			postApi_jointAssuredName.equals(patchApi_jointAssuredName) && 
			postApi_ownerReference.equals(patchApi_ownerReference) && 
			postApi_ownerName.equals(patchApi_ownerName) && 
			postApi_ownerDomicile.equals(patchApi_ownerDomicile) && 
			postApi_ownerEmailAddress.equals(patchApi_ownerEmailAddress) && 
			postApi_brokerReference.equals(patchApi_brokerReference) && 
			postApi_brokerName.equals(patchApi_brokerName) && 
			postApi_brokerEmailAddress.equals(patchApi_brokerEmailAddress) && 
			postApi_policyYear.equals(patchApi_policyYear) && 
			postApi_certificateIssueDate.equals(patchApi_certificateIssueDate) && 
			postApi_emailAddress.equals(patchApi_emailAddress) && 
			postApi_ccEmailAddress.equals(patchApi_ccEmailAddress) && 
			postApi_effectiveStartDate.equals(patchApi_effectiveStartDate) && 
			postApi_effectiveEndDate.equals(patchApi_effectiveEndDate) && 
			postApi_passengerCapacity.equals(patchApi_passengerCapacity) && 
			postApi_policyStartDate.equals(patchApi_policyStartDate) && 
			postApi_policyEndDate.equals(patchApi_policyEndDate) && 
			postApi_currencyCode.equals(patchApi_currencyCode) && 
			postApi_coverLimitAmount.equals(patchApi_coverLimitAmount) && 
			postApi_signatoryStateId.equals(patchApi_signatoryStateId) && 
			postApi_vesselName.equals(patchApi_vesselName) && 
			postApi_vesselType.equals(patchApi_vesselType) && 
			postApi_vesselTypeName.equals(patchApi_vesselTypeName) && 
			postApi_vesselEnteredDate.equals(patchApi_vesselEnteredDate) && 
			postApi_vesselFlag.equals(patchApi_vesselFlag) && 
			postApi_imoNumber.equals(patchApi_imoNumber) && 
			postApi_distinctiveNumbersOrLetters.equals(patchApi_distinctiveNumbersOrLetters) && 
			postApi_grossTonnage.equals(patchApi_grossTonnage) && 
			postApi_yearBuilt.equals(patchApi_yearBuilt) && 
			postApi_engineHorsePower.equals(patchApi_engineHorsePower) && 
			postApi_trademarkAndEngineModel.equals(patchApi_trademarkAndEngineModel) && 
			postApi_model.equals(patchApi_model) && 
			postApi_engineNo.equals(patchApi_engineNo) && 
			postApi_nominatedFlagState.equals(patchApi_nominatedFlagState) && 
			postApi_nominatedFlagStateName.equals(patchApi_nominatedFlagStateName) && 
			postApi_portOfRegistry.equals(patchApi_portOfRegistry) && 
			postApi_tenderReferenceList.equals(patchApi_tenderReferenceList) && 
			postApi_tenderOutboardReferenceList.equals(patchApi_tenderOutboardReferenceList) && 
			postApi_tradingCertificateTypeId.equals(patchApi_tradingCertificateTypeId) && 
			postApi_tradingCertificateGroupId.equals(patchApi_tradingCertificateGroupId) && 
			postApi_tradingCertificateGroupName.equals(patchApi_tradingCertificateGroupName) && 
			postApi_tradingCertificateGroupCode.equals(patchApi_tradingCertificateGroupCode) && 
			postApi_tradingCertificateTypeCode.equals(patchApi_tradingCertificateTypeCode) && 
			postApi_tradingCertificateTypeName.equals(patchApi_tradingCertificateTypeName) && 
			postApi_stateAddress.equals(patchApi_stateAddress) && 
			postApi_ownerAddress.equals(patchApi_ownerAddress) && 
			postApi_brokerAddress.equals(patchApi_brokerAddress) && 
			postApi_memberAddress.equals(patchApi_memberAddress) && 
			postApi_jointAssuredAddress.equals(patchApi_jointAssuredAddress) && 
			postApi_tradingCertificateBanks.equals(patchApi_tradingCertificateBanks)
		)
		{
			comparePostPatchWriter.println(postApi_id+","+patchApi_id+","+postApi_addressTypeId+","+patchApi_addressTypeId+","+postApi_sourceSystem+","+patchApi_sourceSystem+","+postApi_reference+","+patchApi_reference+","+postApi_currentStatus+","+patchApi_currentStatus+","+postApi_storageId+","+patchApi_storageId+","+postApi_riskId+","+patchApi_riskId+","+postApi_policyId+","+patchApi_policyId+","+postApi_memberPartyId+","+patchApi_memberPartyId+","+postApi_ownerPartyId+","+patchApi_ownerPartyId+","+postApi_brokerPartyId+","+patchApi_brokerPartyId+","+postApi_isRenewal+","+patchApi_isRenewal+","+postApi_isYacht+","+patchApi_isYacht+","+postApi_version+","+patchApi_version+","+postApi_riskReference+","+patchApi_riskReference+","+postApi_policyReference+","+patchApi_policyReference+","+postApi_memberReference+","+patchApi_memberReference+","+postApi_memberType+","+patchApi_memberType+","+postApi_memberName+","+patchApi_memberName+","+postApi_jointAssuredName+","+patchApi_jointAssuredName+","+postApi_ownerReference+","+patchApi_ownerReference+","+postApi_ownerName+","+patchApi_ownerName+","+postApi_ownerDomicile+","+patchApi_ownerDomicile+","+postApi_ownerEmailAddress+","+patchApi_ownerEmailAddress+","+postApi_brokerReference+","+patchApi_brokerReference+","+postApi_brokerName+","+patchApi_brokerName+","+postApi_brokerEmailAddress+","+patchApi_brokerEmailAddress+","+postApi_policyYear+","+patchApi_policyYear+","+postApi_certificateIssueDate+","+patchApi_certificateIssueDate+","+postApi_emailAddress+","+patchApi_emailAddress+","+postApi_ccEmailAddress+","+patchApi_ccEmailAddress+","+postApi_effectiveStartDate+","+patchApi_effectiveStartDate+","+postApi_effectiveEndDate+","+patchApi_effectiveEndDate+","+postApi_passengerCapacity+","+patchApi_passengerCapacity+","+postApi_policyStartDate+","+patchApi_policyStartDate+","+postApi_policyEndDate+","+patchApi_policyEndDate+","+postApi_currencyCode+","+patchApi_currencyCode+","+postApi_coverLimitAmount+","+patchApi_coverLimitAmount+","+postApi_signatoryStateId+","+patchApi_signatoryStateId+","+postApi_vesselName+","+patchApi_vesselName+","+postApi_vesselType+","+patchApi_vesselType+","+postApi_vesselTypeName+","+patchApi_vesselTypeName+","+postApi_vesselEnteredDate+","+patchApi_vesselEnteredDate+","+postApi_vesselFlag+","+patchApi_vesselFlag+","+postApi_imoNumber+","+patchApi_imoNumber+","+postApi_distinctiveNumbersOrLetters+","+patchApi_distinctiveNumbersOrLetters+","+postApi_grossTonnage+","+patchApi_grossTonnage+","+postApi_yearBuilt+","+patchApi_yearBuilt+","+postApi_engineHorsePower+","+patchApi_engineHorsePower+","+postApi_trademarkAndEngineModel+","+patchApi_trademarkAndEngineModel+","+postApi_model+","+patchApi_model+","+postApi_engineNo+","+patchApi_engineNo+","+postApi_nominatedFlagState+","+patchApi_nominatedFlagState+","+postApi_nominatedFlagStateName+","+patchApi_nominatedFlagStateName+","+postApi_portOfRegistry+","+patchApi_portOfRegistry+","+postApi_tenderReferenceList+","+patchApi_tenderReferenceList+","+postApi_tenderOutboardReferenceList+","+patchApi_tenderOutboardReferenceList+","+postApi_tradingCertificateTypeId+","+patchApi_tradingCertificateTypeId+","+postApi_tradingCertificateGroupId+","+patchApi_tradingCertificateGroupId+","+postApi_tradingCertificateGroupName+","+patchApi_tradingCertificateGroupName+","+postApi_tradingCertificateGroupCode+","+patchApi_tradingCertificateGroupCode+","+postApi_tradingCertificateTypeCode+","+patchApi_tradingCertificateTypeCode+","+postApi_tradingCertificateTypeName+","+patchApi_tradingCertificateTypeName+","+postApi_stateAddress+","+patchApi_stateAddress+","+postApi_ownerAddress+","+patchApi_ownerAddress+","+postApi_brokerAddress+","+patchApi_brokerAddress+","+postApi_memberAddress+","+patchApi_memberAddress+","+postApi_jointAssuredAddress+","+patchApi_jointAssuredAddress+","+postApi_tradingCertificateBanks+","+patchApi_tradingCertificateBanks+","+"Test Case Passed")
			log.info "After Comparing Post response's and Patch response details are matching hence test case is passed"
		}
		else
		{
			comparePostPatchWriter.println(postApi_id+","+patchApi_id+","+postApi_addressTypeId+","+patchApi_addressTypeId+","+postApi_sourceSystem+","+patchApi_sourceSystem+","+postApi_reference+","+patchApi_reference+","+postApi_currentStatus+","+patchApi_currentStatus+","+postApi_storageId+","+patchApi_storageId+","+postApi_riskId+","+patchApi_riskId+","+postApi_policyId+","+patchApi_policyId+","+postApi_memberPartyId+","+patchApi_memberPartyId+","+postApi_ownerPartyId+","+patchApi_ownerPartyId+","+postApi_brokerPartyId+","+patchApi_brokerPartyId+","+postApi_isRenewal+","+patchApi_isRenewal+","+postApi_isYacht+","+patchApi_isYacht+","+postApi_version+","+patchApi_version+","+postApi_riskReference+","+patchApi_riskReference+","+postApi_policyReference+","+patchApi_policyReference+","+postApi_memberReference+","+patchApi_memberReference+","+postApi_memberType+","+patchApi_memberType+","+postApi_memberName+","+patchApi_memberName+","+postApi_jointAssuredName+","+patchApi_jointAssuredName+","+postApi_ownerReference+","+patchApi_ownerReference+","+postApi_ownerName+","+patchApi_ownerName+","+postApi_ownerDomicile+","+patchApi_ownerDomicile+","+postApi_ownerEmailAddress+","+patchApi_ownerEmailAddress+","+postApi_brokerReference+","+patchApi_brokerReference+","+postApi_brokerName+","+patchApi_brokerName+","+postApi_brokerEmailAddress+","+patchApi_brokerEmailAddress+","+postApi_policyYear+","+patchApi_policyYear+","+postApi_certificateIssueDate+","+patchApi_certificateIssueDate+","+postApi_emailAddress+","+patchApi_emailAddress+","+postApi_ccEmailAddress+","+patchApi_ccEmailAddress+","+postApi_effectiveStartDate+","+patchApi_effectiveStartDate+","+postApi_effectiveEndDate+","+patchApi_effectiveEndDate+","+postApi_passengerCapacity+","+patchApi_passengerCapacity+","+postApi_policyStartDate+","+patchApi_policyStartDate+","+postApi_policyEndDate+","+patchApi_policyEndDate+","+postApi_currencyCode+","+patchApi_currencyCode+","+postApi_coverLimitAmount+","+patchApi_coverLimitAmount+","+postApi_signatoryStateId+","+patchApi_signatoryStateId+","+postApi_vesselName+","+patchApi_vesselName+","+postApi_vesselType+","+patchApi_vesselType+","+postApi_vesselTypeName+","+patchApi_vesselTypeName+","+postApi_vesselEnteredDate+","+patchApi_vesselEnteredDate+","+postApi_vesselFlag+","+patchApi_vesselFlag+","+postApi_imoNumber+","+patchApi_imoNumber+","+postApi_distinctiveNumbersOrLetters+","+patchApi_distinctiveNumbersOrLetters+","+postApi_grossTonnage+","+patchApi_grossTonnage+","+postApi_yearBuilt+","+patchApi_yearBuilt+","+postApi_engineHorsePower+","+patchApi_engineHorsePower+","+postApi_trademarkAndEngineModel+","+patchApi_trademarkAndEngineModel+","+postApi_model+","+patchApi_model+","+postApi_engineNo+","+patchApi_engineNo+","+postApi_nominatedFlagState+","+patchApi_nominatedFlagState+","+postApi_nominatedFlagStateName+","+patchApi_nominatedFlagStateName+","+postApi_portOfRegistry+","+patchApi_portOfRegistry+","+postApi_tenderReferenceList+","+patchApi_tenderReferenceList+","+postApi_tenderOutboardReferenceList+","+patchApi_tenderOutboardReferenceList+","+postApi_tradingCertificateTypeId+","+patchApi_tradingCertificateTypeId+","+postApi_tradingCertificateGroupId+","+patchApi_tradingCertificateGroupId+","+postApi_tradingCertificateGroupName+","+patchApi_tradingCertificateGroupName+","+postApi_tradingCertificateGroupCode+","+patchApi_tradingCertificateGroupCode+","+postApi_tradingCertificateTypeCode+","+patchApi_tradingCertificateTypeCode+","+postApi_tradingCertificateTypeName+","+patchApi_tradingCertificateTypeName+","+postApi_stateAddress+","+patchApi_stateAddress+","+postApi_ownerAddress+","+patchApi_ownerAddress+","+postApi_brokerAddress+","+patchApi_brokerAddress+","+postApi_memberAddress+","+patchApi_memberAddress+","+postApi_jointAssuredAddress+","+patchApi_jointAssuredAddress+","+postApi_tradingCertificateBanks+","+patchApi_tradingCertificateBanks+","+"Test Case Failed")
			log.info "After Comparing Post response's and Patch response details are not matching hence test case is failed"
		}
		
		//code to update values into existing trading certificate generated on above step	
		def updatePatchRequestBody=
		"""
		{
		"id": $patchApi_id,
		"addressTypeId": $patchApi_addressTypeId,
		"sourceSystem": "$patchApi_sourceSystem",
		"reference": "$patchApi_reference",
		"currentStatus": "$patchApi_currentStatus",
		"storageId": null,
		"riskId": $patchApi_riskId,
		"policyId": $patchApi_policyId,
		"memberPartyId": $patchApi_memberPartyId,
		"ownerPartyId": null,
		"brokerPartyId": null,
		"isRenewal": false,
		"isYacht": false,
		"version": "$patchApi_version",
		"riskReference": "$patchApi_riskReference",
		"policyReference": "$patchApi_policyReference",
		"memberReference": "$patchApi_memberReference",
		"memberType": "Member",
		"memberName": "SIGMA TEST",
		"jointAssuredName": null,
		"ownerReference": "23407",
		"ownerName": "SD Marine Services Limited",
		"ownerDomicile": "India",
		"ownerEmailAddress": "subicbunker@hoyamarine.com",
		"brokerReference": "104",
		"brokerName": "Voyager Risk Solutions Limited",
		"brokerEmailAddress": "kevinkwan@voyfg.com",
		"policyYear": null,
		"certificateIssueDate": null,
		"emailAddress": "test@test.com",
		"ccEmailAddress": "ccTest@test.com",
		"effectiveStartDate": "2021-01-01T11:00:00.00Z",
		"effectiveEndDate": "2023-12-01T11:00:00.00Z",
		"passengerCapacity": "200",
		"policyStartDate": "$patchApi_policyStartDate",
		"policyEndDate": "$patchApi_policyEndDate",
		"currencyCode": "USD",
		"coverLimitAmount": "500000000.00",
		"signatoryStateId": 263,
		"vesselName": "Test3Policy Risk",
		"vesselType": "YA",
		"vesselTypeName": "YACHT CHARTER 13+ PAX",
		"vesselEnteredDate": "2020-11-08T12:00:00.00Z",
		"vesselFlag": "India",
		"imoNumber": "3453466",
		"distinctiveNumbersOrLetters": "f56",
		"grossTonnage": "1100",
		"yearBuilt": "2021",
		"engineHorsePower": "2000",
		"trademarkAndEngineModel": "EMN005",
		"model": "M",
		"engineNo": "007",
		"nominatedFlagState": "IND",
		"nominatedFlagStateName": "INDIA",
		"portOfRegistry": "Mumbai",
		"tenderReferenceList": "TNS-0001",
		"tenderOutboardReferenceList": "OMSN-01",
		"tradingCertificateTypeId": $patchApi_tradingCertificateTypeId,
		"tradingCertificateType": {
		"id": $patchApi_tradingCertificateTypeId,
		"tradingCertificateGroup": {
		"id": $patchApi_tradingCertificateGroupId,
		"name": "$patchApi_tradingCertificateGroupName",
		"groupCode": "$patchApi_tradingCertificateGroupCode"
		},
		"typeCode": "$patchApi_tradingCertificateTypeCode",
		"typeName": "$patchApi_tradingCertificateTypeName"
		},
		"stateAddress": {
		"id": 1,
		"addressName": "StAdrName",
		"addressLine1": "StAdrLine1",
		"addressLine2": "StAdrLine2",
		"addressLine3": "StAdrLine3",
		"stateOrCounty": "StAdrState",
		"city": "StCity",
		"country": "StCountry",
		"postCode": "100001",
		"primaryAddress": true
		  },
		"ownerAddress": {
		"id": 2,
		"addressName": "OwAdrName",
		"addressLine1": "OwAdrLine1",
		"addressLine2": "OwAdrLine2",
		"addressLine3": "OwAdrLine3",
		"stateOrCounty": "OwAdrState",
		"city": "OwCity",
		"country": "OwCountry",
		"postCode": "100001",
		"primaryAddress": true
		  },
		  "brokerAddress": {
		"id": 3,
		"addressName": "BrAdrName",
		"addressLine1": "BrAdrLine1",
		"addressLine2": "BrAdrLine2",
		"addressLine3": "BrAdrLine3",
		"stateOrCounty": "BrAdrState",
		"city": "BrCity",
		"country": "BrCountry",
		"postCode": "100001",
		"primaryAddress": true
		  },
		"memberAddress": null,
		"jointAssuredAddress": {
		"id": 3,
		"addressName": "JasAdrName",
		"addressLine1": "JasMemAdrLine1",
		"addressLine2": "JasMemAdrLine2",
		"addressLine3": "JasMemAdrLine3",
		"stateOrCounty": "JasMemAdrState",
		"city": "JasCity",
		"country": "JasCountry",
		"postCode": "100001",
		"primaryAddress": true
		  },
		  "tradingCertificateBanks": []
		}
		"""
		log.info "Update Patch Request Body : "+updatePatchRequestBody

		//Set the Token at test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
	//Run the test step to get response
	testRunner.testCase.testSteps["Test_Patch_TradingCertificate"].setPropertyValue( "Request", updatePatchRequestBody)
	testRunner.runTestStepByName('Test_Patch_TradingCertificate')
	req='${Test_Patch_TradingCertificate#Response}'
	response=context.expand(req)
	log.info "API Response after updating the values for PATCH Method received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)
	
	//Check the Status code of API response
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	httpResponseHeaders = context.testCase.testSteps["Test_Patch_TradingCertificate"].testRequest.response.responseHeaders
	httpStatus = httpResponseHeaders["#status#"]
	httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	patchUpdateApi_id=jsonRes.id
	patchUpdateApi_addressTypeId=jsonRes.addressTypeId
	patchUpdateApi_sourceSystem=jsonRes.sourceSystem
	patchUpdateApi_reference=jsonRes.reference
	patchUpdateApi_currentStatus=jsonRes.currentStatus
	patchUpdateApi_storageId=jsonRes.storageId
	patchUpdateApi_riskId=jsonRes.riskId
	patchUpdateApi_policyId=jsonRes.policyId
	patchUpdateApi_memberPartyId=jsonRes.memberPartyId
	patchUpdateApi_ownerPartyId=jsonRes.ownerPartyId
	patchUpdateApi_brokerPartyId=jsonRes.brokerPartyId
	patchUpdateApi_isRenewal=jsonRes.isRenewal
	patchUpdateApi_isYacht=jsonRes.isYacht
	patchUpdateApi_version=jsonRes.version
	patchUpdateApi_riskReference=jsonRes.riskReference
	patchUpdateApi_policyReference=jsonRes.policyReference
	patchUpdateApi_memberReference=jsonRes.memberReference
	patchUpdateApi_memberType=jsonRes.memberType
	patchUpdateApi_memberName=jsonRes.memberName
	patchUpdateApi_jointAssuredName=jsonRes.jointAssuredName
	patchUpdateApi_ownerReference=jsonRes.ownerReference
	patchUpdateApi_ownerName=jsonRes.ownerName
	patchUpdateApi_ownerDomicile=jsonRes.ownerDomicile
	patchUpdateApi_ownerEmailAddress=jsonRes.ownerEmailAddress
	patchUpdateApi_brokerReference=jsonRes.brokerReference
	patchUpdateApi_brokerName=jsonRes.brokerName
	patchUpdateApi_brokerEmailAddress=jsonRes.brokerEmailAddress
	patchUpdateApi_policyYear=jsonRes.policyYear
	patchUpdateApi_certificateIssueDate=jsonRes.certificateIssueDate
	patchUpdateApi_emailAddress=jsonRes.emailAddress
	patchUpdateApi_ccEmailAddress=jsonRes.ccEmailAddress
	patchUpdateApi_effectiveStartDate=jsonRes.effectiveStartDate
	patchUpdateApi_effectiveEndDate=jsonRes.effectiveEndDate
	patchUpdateApi_passengerCapacity=jsonRes.passengerCapacity
	patchUpdateApi_policyStartDate=jsonRes.policyStartDate
	patchUpdateApi_policyEndDate=jsonRes.policyEndDate
	patchUpdateApi_currencyCode=jsonRes.currencyCode
	patchUpdateApi_coverLimitAmount=jsonRes.coverLimitAmount
	patchUpdateApi_signatoryStateId=jsonRes.signatoryStateId
	patchUpdateApi_vesselName=jsonRes.vesselName
	patchUpdateApi_vesselType=jsonRes.vesselType
	patchUpdateApi_vesselTypeName=jsonRes.vesselTypeName
	patchUpdateApi_vesselEnteredDate=jsonRes.vesselEnteredDate
	patchUpdateApi_vesselFlag=jsonRes.vesselFlag
	patchUpdateApi_imoNumber=jsonRes.imoNumber
	patchUpdateApi_distinctiveNumbersOrLetters=jsonRes.distinctiveNumbersOrLetters
	patchUpdateApi_grossTonnage=jsonRes.grossTonnage
	patchUpdateApi_yearBuilt=jsonRes.yearBuilt
	patchUpdateApi_engineHorsePower=jsonRes.engineHorsePower
	patchUpdateApi_trademarkAndEngineModel=jsonRes.trademarkAndEngineModel
	patchUpdateApi_model=jsonRes.model
	patchUpdateApi_engineNo=jsonRes.engineNo
	patchUpdateApi_nominatedFlagState=jsonRes.nominatedFlagState
	patchUpdateApi_nominatedFlagStateName=jsonRes.nominatedFlagStateName
	patchUpdateApi_portOfRegistry=jsonRes.portOfRegistry
	patchUpdateApi_tenderReferenceList=jsonRes.tenderReferenceList
	patchUpdateApi_tenderOutboardReferenceList=jsonRes.tenderOutboardReferenceList
	patchUpdateApi_tradingCertificateTypeId=jsonRes.tradingCertificateType.id
	patchUpdateApi_tradingCertificateGroupId=jsonRes.tradingCertificateType.tradingCertificateGroup.id
	patchUpdateApi_tradingCertificateGroupName=jsonRes.tradingCertificateType.tradingCertificateGroup.name
	patchUpdateApi_tradingCertificateGroupCode=jsonRes.tradingCertificateType.tradingCertificateGroup.groupCode
	patchUpdateApi_tradingCertificateTypeCode=jsonRes.tradingCertificateType.typeCode
	patchUpdateApi_tradingCertificateTypeName=jsonRes.tradingCertificateType.typeName
	patchUpdateApi_stateAddressId=jsonRes.stateAddress.id
	patchUpdateApi_stateAddressName=jsonRes.stateAddress.addressName
	patchUpdateApi_stateAddressLine1=jsonRes.stateAddress.addressLine1
	patchUpdateApi_stateAddressLine2=jsonRes.stateAddress.addressLine2
	patchUpdateApi_stateAddressLine3=jsonRes.stateAddress.addressLine2
	patchUpdateApi_stateStateOrCounty=jsonRes.stateAddress.stateOrCounty
	patchUpdateApi_stateCity=jsonRes.stateAddress.city
	patchUpdateApi_stateCountry=jsonRes.stateAddress.country
	patchUpdateApi_statePostCode=jsonRes.stateAddress.postCode
	patchUpdateApi_statePrimaryAddress=jsonRes.stateAddress.primaryAddress
	patchUpdateApi_ownerAddressId=jsonRes.ownerAddress.id
	patchUpdateApi_ownerAddressName=jsonRes.ownerAddress.addressName
	patchUpdateApi_ownerAddressLine1=jsonRes.ownerAddress.addressLine1
	patchUpdateApi_ownerAddressLine2=jsonRes.ownerAddress.addressLine2
	patchUpdateApi_ownerAddressLine3=jsonRes.ownerAddress.addressLine2
	patchUpdateApi_ownerStateOrCounty=jsonRes.ownerAddress.stateOrCounty
	patchUpdateApi_ownerCity=jsonRes.ownerAddress.city
	patchUpdateApi_ownerCountry=jsonRes.ownerAddress.country
	patchUpdateApi_ownerPostCode=jsonRes.ownerAddress.postCode
	patchUpdateApi_ownerPrimaryAddress=jsonRes.ownerAddress.primaryAddress
	patchUpdateApi_brokerAddressId=jsonRes.brokerAddress.id
	patchUpdateApi_brokerAddressName=jsonRes.brokerAddress.addressName
	patchUpdateApi_brokerAddressLine1=jsonRes.brokerAddress.addressLine1
	patchUpdateApi_brokerAddressLine2=jsonRes.brokerAddress.addressLine2
	patchUpdateApi_brokerAddressLine3=jsonRes.brokerAddress.addressLine2
	patchUpdateApi_brokerStateOrCounty=jsonRes.brokerAddress.stateOrCounty
	patchUpdateApi_brokerCity=jsonRes.brokerAddress.city
	patchUpdateApi_brokerCountry=jsonRes.brokerAddress.country
	patchUpdateApi_brokerPostCode=jsonRes.brokerAddress.postCode
	patchUpdateApi_brokerPrimaryAddress=jsonRes.brokerAddress.primaryAddress
	patchUpdateApi_memberAddress=jsonRes.memberAddress
	patchUpdateApi_JAAddressId=jsonRes.jointAssuredAddress.id
	patchUpdateApi_JAAddressName=jsonRes.jointAssuredAddress.addressName
	patchUpdateApi_JAAddressLine1=jsonRes.jointAssuredAddress.addressLine1
	patchUpdateApi_JAAddressLine2=jsonRes.jointAssuredAddress.addressLine2
	patchUpdateApi_JAAddressLine3=jsonRes.jointAssuredAddress.addressLine3
	patchUpdateApi_JAStateOrCounty=jsonRes.jointAssuredAddress.stateOrCounty
	patchUpdateApi_JACity=jsonRes.jointAssuredAddress.city
	patchUpdateApi_JACountry=jsonRes.jointAssuredAddress.country
	patchUpdateApi_JAPostCode=jsonRes.jointAssuredAddress.postCode
	patchUpdateApi_JAPrimaryAddress=jsonRes.jointAssuredAddress.primaryAddress
	patchUpdateApi_tradingCertificateBanks=jsonRes.tradingCertificateBanks

	patchUpdateApiWriter.println(patchUpdateApi_id+","+patchUpdateApi_addressTypeId+","+patchUpdateApi_sourceSystem+","+patchUpdateApi_reference+","+patchUpdateApi_currentStatus+","+patchUpdateApi_storageId+","+patchUpdateApi_riskId+","+patchUpdateApi_policyId+","+patchUpdateApi_memberPartyId+","+patchUpdateApi_ownerPartyId+","+patchUpdateApi_brokerPartyId+","+patchUpdateApi_isRenewal+","+patchUpdateApi_isYacht+","+patchUpdateApi_version+","+patchUpdateApi_riskReference+","+patchUpdateApi_policyReference+","+patchUpdateApi_memberReference+","+patchUpdateApi_memberType+","+patchUpdateApi_memberName+","+patchUpdateApi_jointAssuredName+","+patchUpdateApi_ownerReference+","+patchUpdateApi_ownerName+","+patchUpdateApi_ownerDomicile+","+patchUpdateApi_ownerEmailAddress+","+patchUpdateApi_brokerReference+","+patchUpdateApi_brokerName+","+patchUpdateApi_brokerEmailAddress+","+patchUpdateApi_policyYear+","+patchUpdateApi_certificateIssueDate+","+patchUpdateApi_emailAddress+","+patchUpdateApi_ccEmailAddress+","+patchUpdateApi_effectiveStartDate+","+patchUpdateApi_effectiveEndDate+","+patchUpdateApi_passengerCapacity+","+patchUpdateApi_policyStartDate+","+patchUpdateApi_policyEndDate+","+patchUpdateApi_currencyCode+","+patchUpdateApi_coverLimitAmount+","+patchUpdateApi_signatoryStateId+","+patchUpdateApi_vesselName+","+patchUpdateApi_vesselType+","+patchUpdateApi_vesselTypeName+","+patchUpdateApi_vesselEnteredDate+","+patchUpdateApi_vesselFlag+","+patchUpdateApi_imoNumber+","+patchUpdateApi_distinctiveNumbersOrLetters+","+patchUpdateApi_grossTonnage+","+patchUpdateApi_yearBuilt+","+patchUpdateApi_engineHorsePower+","+patchUpdateApi_trademarkAndEngineModel+","+patchUpdateApi_model+","+patchUpdateApi_engineNo+","+patchUpdateApi_nominatedFlagState+","+patchUpdateApi_nominatedFlagStateName+","+patchUpdateApi_portOfRegistry+","+patchUpdateApi_tenderReferenceList+","+patchUpdateApi_tenderOutboardReferenceList+","+patchUpdateApi_tradingCertificateTypeId+","+patchUpdateApi_tradingCertificateGroupId+","+patchUpdateApi_tradingCertificateGroupName+","+patchUpdateApi_tradingCertificateGroupCode+","+patchUpdateApi_tradingCertificateTypeCode+","+patchUpdateApi_tradingCertificateTypeName+","+patchUpdateApi_stateAddressId+","+patchUpdateApi_stateAddressName+","+patchUpdateApi_stateAddressLine1+","+patchUpdateApi_stateAddressLine2+","+patchUpdateApi_stateAddressLine3+","+patchUpdateApi_stateStateOrCounty+","+patchUpdateApi_stateCity+","+patchUpdateApi_stateCountry+","+patchUpdateApi_statePostCode+","+patchUpdateApi_statePrimaryAddress+","+patchUpdateApi_ownerAddressId+","+patchUpdateApi_ownerAddressName+","+patchUpdateApi_ownerAddressLine1+","+patchUpdateApi_ownerAddressLine2+","+patchUpdateApi_ownerAddressLine3+","+patchUpdateApi_ownerStateOrCounty+","+patchUpdateApi_ownerCity+","+patchUpdateApi_ownerCountry+","+patchUpdateApi_ownerPostCode+","+patchUpdateApi_ownerPrimaryAddress+","+patchUpdateApi_brokerAddressId+","+patchUpdateApi_brokerAddressName+","+patchUpdateApi_brokerAddressLine1+","+patchUpdateApi_brokerAddressLine2+","+patchUpdateApi_brokerAddressLine3+","+patchUpdateApi_brokerStateOrCounty+","+patchUpdateApi_brokerCity+","+patchUpdateApi_brokerCountry+","+patchUpdateApi_brokerPostCode+","+patchUpdateApi_brokerPrimaryAddress+","+patchUpdateApi_memberAddress+","+patchUpdateApi_JAAddressId+","+patchUpdateApi_JAAddressName+","+patchUpdateApi_JAAddressLine1+","+patchUpdateApi_JAAddressLine2+","+patchUpdateApi_JAAddressLine3+","+patchUpdateApi_JAStateOrCounty+","+patchUpdateApi_JACity+","+patchUpdateApi_JACountry+","+patchUpdateApi_JAPostCode+","+patchUpdateApi_JAPrimaryAddress+","+patchUpdateApi_tradingCertificateBanks)
	log.info "PATCH API response received after updating the values : "+patchUpdateApi_id+","+patchUpdateApi_addressTypeId+","+patchUpdateApi_sourceSystem+","+patchUpdateApi_reference+","+patchUpdateApi_currentStatus+","+patchUpdateApi_storageId+","+patchUpdateApi_riskId+","+patchUpdateApi_policyId+","+patchUpdateApi_memberPartyId+","+patchUpdateApi_ownerPartyId+","+patchUpdateApi_brokerPartyId+","+patchUpdateApi_isRenewal+","+patchUpdateApi_isYacht+","+patchUpdateApi_version+","+patchUpdateApi_riskReference+","+patchUpdateApi_policyReference+","+patchUpdateApi_memberReference+","+patchUpdateApi_memberType+","+patchUpdateApi_memberName+","+patchUpdateApi_jointAssuredName+","+patchUpdateApi_ownerReference+","+patchUpdateApi_ownerName+","+patchUpdateApi_ownerDomicile+","+patchUpdateApi_ownerEmailAddress+","+patchUpdateApi_brokerReference+","+patchUpdateApi_brokerName+","+patchUpdateApi_brokerEmailAddress+","+patchUpdateApi_policyYear+","+patchUpdateApi_certificateIssueDate+","+patchUpdateApi_emailAddress+","+patchUpdateApi_ccEmailAddress+","+patchUpdateApi_effectiveStartDate+","+patchUpdateApi_effectiveEndDate+","+patchUpdateApi_passengerCapacity+","+patchUpdateApi_policyStartDate+","+patchUpdateApi_policyEndDate+","+patchUpdateApi_currencyCode+","+patchUpdateApi_coverLimitAmount+","+patchUpdateApi_signatoryStateId+","+patchUpdateApi_vesselName+","+patchUpdateApi_vesselType+","+patchUpdateApi_vesselTypeName+","+patchUpdateApi_vesselEnteredDate+","+patchUpdateApi_vesselFlag+","+patchUpdateApi_imoNumber+","+patchUpdateApi_distinctiveNumbersOrLetters+","+patchUpdateApi_grossTonnage+","+patchUpdateApi_yearBuilt+","+patchUpdateApi_engineHorsePower+","+patchUpdateApi_trademarkAndEngineModel+","+patchUpdateApi_model+","+patchUpdateApi_engineNo+","+patchUpdateApi_nominatedFlagState+","+patchUpdateApi_nominatedFlagStateName+","+patchUpdateApi_portOfRegistry+","+patchUpdateApi_tenderReferenceList+","+patchUpdateApi_tenderOutboardReferenceList+","+patchUpdateApi_tradingCertificateTypeId+","+patchUpdateApi_tradingCertificateGroupId+","+patchUpdateApi_tradingCertificateGroupName+","+patchUpdateApi_tradingCertificateGroupCode+","+patchUpdateApi_tradingCertificateTypeCode+","+patchUpdateApi_tradingCertificateTypeName+","+patchUpdateApi_stateAddressId+","+patchUpdateApi_stateAddressName+","+patchUpdateApi_stateAddressLine1+","+patchUpdateApi_stateAddressLine2+","+patchUpdateApi_stateAddressLine3+","+patchUpdateApi_stateStateOrCounty+","+patchUpdateApi_stateCity+","+patchUpdateApi_stateCountry+","+patchUpdateApi_statePostCode+","+patchUpdateApi_statePrimaryAddress+","+patchUpdateApi_ownerAddressId+","+patchUpdateApi_ownerAddressName+","+patchUpdateApi_ownerAddressLine1+","+patchUpdateApi_ownerAddressLine2+","+patchUpdateApi_ownerAddressLine3+","+patchUpdateApi_ownerStateOrCounty+","+patchUpdateApi_ownerCity+","+patchUpdateApi_ownerCountry+","+patchUpdateApi_ownerPostCode+","+patchUpdateApi_ownerPrimaryAddress+","+patchUpdateApi_brokerAddressId+","+patchUpdateApi_brokerAddressName+","+patchUpdateApi_brokerAddressLine1+","+patchUpdateApi_brokerAddressLine2+","+patchUpdateApi_brokerAddressLine3+","+patchUpdateApi_brokerStateOrCounty+","+patchUpdateApi_brokerCity+","+patchUpdateApi_brokerCountry+","+patchUpdateApi_brokerPostCode+","+patchUpdateApi_brokerPrimaryAddress+","+patchUpdateApi_memberAddress+","+patchUpdateApi_JAAddressId+","+patchUpdateApi_JAAddressName+","+patchUpdateApi_JAAddressLine1+","+patchUpdateApi_JAAddressLine2+","+patchUpdateApi_JAAddressLine3+","+patchUpdateApi_JAStateOrCounty+","+patchUpdateApi_JACity+","+patchUpdateApi_JACountry+","+patchUpdateApi_JAPostCode+","+patchUpdateApi_JAPrimaryAddress+","+patchUpdateApi_tradingCertificateBanks

	//getRequestBody Details
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(updatePatchRequestBody)
	
	PatchReqestBody_id=jsonRes.id
	PatchReqestBody_addressTypeId=jsonRes.addressTypeId
	PatchReqestBody_sourceSystem=jsonRes.sourceSystem
	PatchReqestBody_reference=jsonRes.reference
	PatchReqestBody_currentStatus=jsonRes.currentStatus
	PatchReqestBody_storageId=jsonRes.storageId
	PatchReqestBody_riskId=jsonRes.riskId
	PatchReqestBody_policyId=jsonRes.policyId
	PatchReqestBody_memberPartyId=jsonRes.memberPartyId
	PatchReqestBody_ownerPartyId=jsonRes.ownerPartyId
	PatchReqestBody_brokerPartyId=jsonRes.brokerPartyId
	PatchReqestBody_isRenewal=jsonRes.isRenewal
	PatchReqestBody_isYacht=jsonRes.isYacht
	PatchReqestBody_version=jsonRes.version
	PatchReqestBody_riskReference=jsonRes.riskReference
	PatchReqestBody_policyReference=jsonRes.policyReference
	PatchReqestBody_memberReference=jsonRes.memberReference
	PatchReqestBody_memberType=jsonRes.memberType
	PatchReqestBody_memberName=jsonRes.memberName
	PatchReqestBody_jointAssuredName=jsonRes.jointAssuredName
	PatchReqestBody_ownerReference=jsonRes.ownerReference
	PatchReqestBody_ownerName=jsonRes.ownerName
	PatchReqestBody_ownerDomicile=jsonRes.ownerDomicile
	PatchReqestBody_ownerEmailAddress=jsonRes.ownerEmailAddress
	PatchReqestBody_brokerReference=jsonRes.brokerReference
	PatchReqestBody_brokerName=jsonRes.brokerName
	PatchReqestBody_brokerEmailAddress=jsonRes.brokerEmailAddress
	PatchReqestBody_policyYear=jsonRes.policyYear
	PatchReqestBody_certificateIssueDate=jsonRes.certificateIssueDate
	PatchReqestBody_emailAddress=jsonRes.emailAddress
	PatchReqestBody_ccEmailAddress=jsonRes.ccEmailAddress
	PatchReqestBody_effectiveStartDate=jsonRes.effectiveStartDate
	PatchReqestBody_effectiveEndDate=jsonRes.effectiveEndDate
	PatchReqestBody_passengerCapacity=jsonRes.passengerCapacity
	PatchReqestBody_policyStartDate=jsonRes.policyStartDate
	PatchReqestBody_policyEndDate=jsonRes.policyEndDate
	PatchReqestBody_currencyCode=jsonRes.currencyCode
	PatchReqestBody_coverLimitAmount=jsonRes.coverLimitAmount
	PatchReqestBody_signatoryStateId=jsonRes.signatoryStateId
	PatchReqestBody_vesselName=jsonRes.vesselName
	PatchReqestBody_vesselType=jsonRes.vesselType
	PatchReqestBody_vesselTypeName=jsonRes.vesselTypeName
	PatchReqestBody_vesselEnteredDate=jsonRes.vesselEnteredDate
	PatchReqestBody_vesselFlag=jsonRes.vesselFlag
	PatchReqestBody_imoNumber=jsonRes.imoNumber
	PatchReqestBody_distinctiveNumbersOrLetters=jsonRes.distinctiveNumbersOrLetters
	PatchReqestBody_grossTonnage=jsonRes.grossTonnage
	PatchReqestBody_yearBuilt=jsonRes.yearBuilt
	PatchReqestBody_engineHorsePower=jsonRes.engineHorsePower
	PatchReqestBody_trademarkAndEngineModel=jsonRes.trademarkAndEngineModel
	PatchReqestBody_model=jsonRes.model
	PatchReqestBody_engineNo=jsonRes.engineNo
	PatchReqestBody_nominatedFlagState=jsonRes.nominatedFlagState
	PatchReqestBody_nominatedFlagStateName=jsonRes.nominatedFlagStateName
	PatchReqestBody_portOfRegistry=jsonRes.portOfRegistry
	PatchReqestBody_tenderReferenceList=jsonRes.tenderReferenceList
	PatchReqestBody_tenderOutboardReferenceList=jsonRes.tenderOutboardReferenceList
	PatchReqestBody_tradingCertificateTypeId=jsonRes.tradingCertificateType.id
	PatchReqestBody_tradingCertificateGroupId=jsonRes.tradingCertificateType.tradingCertificateGroup.id
	PatchReqestBody_tradingCertificateGroupName=jsonRes.tradingCertificateType.tradingCertificateGroup.name
	PatchReqestBody_tradingCertificateGroupCode=jsonRes.tradingCertificateType.tradingCertificateGroup.groupCode
	PatchReqestBody_tradingCertificateTypeCode=jsonRes.tradingCertificateType.typeCode
	PatchReqestBody_tradingCertificateTypeName=jsonRes.tradingCertificateType.typeName
	PatchReqestBody_stateAddressId=jsonRes.stateAddress.id
	PatchReqestBody_stateAddressName=jsonRes.stateAddress.addressName
	PatchReqestBody_stateAddressLine1=jsonRes.stateAddress.addressLine1
	PatchReqestBody_stateAddressLine2=jsonRes.stateAddress.addressLine2
	PatchReqestBody_stateAddressLine3=jsonRes.stateAddress.addressLine2
	PatchReqestBody_stateStateOrCounty=jsonRes.stateAddress.stateOrCounty
	PatchReqestBody_stateCity=jsonRes.stateAddress.city
	PatchReqestBody_stateCountry=jsonRes.stateAddress.country
	PatchReqestBody_statePostCode=jsonRes.stateAddress.postCode
	PatchReqestBody_statePrimaryAddress=jsonRes.stateAddress.primaryAddress
	PatchReqestBody_ownerAddressId=jsonRes.ownerAddress.id
	PatchReqestBody_ownerAddressName=jsonRes.ownerAddress.addressName
	PatchReqestBody_ownerAddressLine1=jsonRes.ownerAddress.addressLine1
	PatchReqestBody_ownerAddressLine2=jsonRes.ownerAddress.addressLine2
	PatchReqestBody_ownerAddressLine3=jsonRes.ownerAddress.addressLine2
	PatchReqestBody_ownerStateOrCounty=jsonRes.ownerAddress.stateOrCounty
	PatchReqestBody_ownerCity=jsonRes.ownerAddress.city
	PatchReqestBody_ownerCountry=jsonRes.ownerAddress.country
	PatchReqestBody_ownerPostCode=jsonRes.ownerAddress.postCode
	PatchReqestBody_ownerPrimaryAddress=jsonRes.ownerAddress.primaryAddress
	PatchReqestBody_brokerAddressId=jsonRes.brokerAddress.id
	PatchReqestBody_brokerAddressName=jsonRes.brokerAddress.addressName
	PatchReqestBody_brokerAddressLine1=jsonRes.brokerAddress.addressLine1
	PatchReqestBody_brokerAddressLine2=jsonRes.brokerAddress.addressLine2
	PatchReqestBody_brokerAddressLine3=jsonRes.brokerAddress.addressLine2
	PatchReqestBody_brokerStateOrCounty=jsonRes.brokerAddress.stateOrCounty
	PatchReqestBody_brokerCity=jsonRes.brokerAddress.city
	PatchReqestBody_brokerCountry=jsonRes.brokerAddress.country
	PatchReqestBody_brokerPostCode=jsonRes.brokerAddress.postCode
	PatchReqestBody_brokerPrimaryAddress=jsonRes.brokerAddress.primaryAddress
	PatchReqestBody_memberAddress=jsonRes.memberAddress
	PatchReqestBody_JAAddressId=jsonRes.jointAssuredAddress.id
	PatchReqestBody_JAAddressName=jsonRes.jointAssuredAddress.addressName
	PatchReqestBody_JAAddressLine1=jsonRes.jointAssuredAddress.addressLine1
	PatchReqestBody_JAAddressLine2=jsonRes.jointAssuredAddress.addressLine2
	PatchReqestBody_JAAddressLine3=jsonRes.jointAssuredAddress.addressLine3
	PatchReqestBody_JAStateOrCounty=jsonRes.jointAssuredAddress.stateOrCounty
	PatchReqestBody_JACity=jsonRes.jointAssuredAddress.city
	PatchReqestBody_JACountry=jsonRes.jointAssuredAddress.country
	PatchReqestBody_JAPostCode=jsonRes.jointAssuredAddress.postCode
	PatchReqestBody_JAPrimaryAddress=jsonRes.jointAssuredAddress.primaryAddress
	PatchReqestBody_tradingCertificateBanks=jsonRes.tradingCertificateBanks

	patchRequestBodyWriter.println(PatchReqestBody_id+","+PatchReqestBody_addressTypeId+","+PatchReqestBody_sourceSystem+","+PatchReqestBody_reference+","+PatchReqestBody_currentStatus+","+PatchReqestBody_storageId+","+PatchReqestBody_riskId+","+PatchReqestBody_policyId+","+PatchReqestBody_memberPartyId+","+PatchReqestBody_ownerPartyId+","+PatchReqestBody_brokerPartyId+","+PatchReqestBody_isRenewal+","+PatchReqestBody_isYacht+","+PatchReqestBody_version+","+PatchReqestBody_riskReference+","+PatchReqestBody_policyReference+","+PatchReqestBody_memberReference+","+PatchReqestBody_memberType+","+PatchReqestBody_memberName+","+PatchReqestBody_jointAssuredName+","+PatchReqestBody_ownerReference+","+PatchReqestBody_ownerName+","+PatchReqestBody_ownerDomicile+","+PatchReqestBody_ownerEmailAddress+","+PatchReqestBody_brokerReference+","+PatchReqestBody_brokerName+","+PatchReqestBody_brokerEmailAddress+","+PatchReqestBody_policyYear+","+PatchReqestBody_certificateIssueDate+","+PatchReqestBody_emailAddress+","+PatchReqestBody_ccEmailAddress+","+PatchReqestBody_effectiveStartDate+","+PatchReqestBody_effectiveEndDate+","+PatchReqestBody_passengerCapacity+","+PatchReqestBody_policyStartDate+","+PatchReqestBody_policyEndDate+","+PatchReqestBody_currencyCode+","+PatchReqestBody_coverLimitAmount+","+PatchReqestBody_signatoryStateId+","+PatchReqestBody_vesselName+","+PatchReqestBody_vesselType+","+PatchReqestBody_vesselTypeName+","+PatchReqestBody_vesselEnteredDate+","+PatchReqestBody_vesselFlag+","+PatchReqestBody_imoNumber+","+PatchReqestBody_distinctiveNumbersOrLetters+","+PatchReqestBody_grossTonnage+","+PatchReqestBody_yearBuilt+","+PatchReqestBody_engineHorsePower+","+PatchReqestBody_trademarkAndEngineModel+","+PatchReqestBody_model+","+PatchReqestBody_engineNo+","+PatchReqestBody_nominatedFlagState+","+PatchReqestBody_nominatedFlagStateName+","+PatchReqestBody_portOfRegistry+","+PatchReqestBody_tenderReferenceList+","+PatchReqestBody_tenderOutboardReferenceList+","+PatchReqestBody_tradingCertificateTypeId+","+PatchReqestBody_tradingCertificateGroupId+","+PatchReqestBody_tradingCertificateGroupName+","+PatchReqestBody_tradingCertificateGroupCode+","+PatchReqestBody_tradingCertificateTypeCode+","+PatchReqestBody_tradingCertificateTypeName+","+PatchReqestBody_stateAddressId+","+PatchReqestBody_stateAddressName+","+PatchReqestBody_stateAddressLine1+","+PatchReqestBody_stateAddressLine2+","+PatchReqestBody_stateAddressLine3+","+PatchReqestBody_stateStateOrCounty+","+PatchReqestBody_stateCity+","+PatchReqestBody_stateCountry+","+PatchReqestBody_statePostCode+","+PatchReqestBody_statePrimaryAddress+","+PatchReqestBody_ownerAddressId+","+PatchReqestBody_ownerAddressName+","+PatchReqestBody_ownerAddressLine1+","+PatchReqestBody_ownerAddressLine2+","+PatchReqestBody_ownerAddressLine3+","+PatchReqestBody_ownerStateOrCounty+","+PatchReqestBody_ownerCity+","+PatchReqestBody_ownerCountry+","+PatchReqestBody_ownerPostCode+","+PatchReqestBody_ownerPrimaryAddress+","+PatchReqestBody_brokerAddressId+","+PatchReqestBody_brokerAddressName+","+PatchReqestBody_brokerAddressLine1+","+PatchReqestBody_brokerAddressLine2+","+PatchReqestBody_brokerAddressLine3+","+PatchReqestBody_brokerStateOrCounty+","+PatchReqestBody_brokerCity+","+PatchReqestBody_brokerCountry+","+PatchReqestBody_brokerPostCode+","+PatchReqestBody_brokerPrimaryAddress+","+PatchReqestBody_memberAddress+","+PatchReqestBody_JAAddressId+","+PatchReqestBody_JAAddressName+","+PatchReqestBody_JAAddressLine1+","+PatchReqestBody_JAAddressLine2+","+PatchReqestBody_JAAddressLine3+","+PatchReqestBody_JAStateOrCounty+","+PatchReqestBody_JACity+","+PatchReqestBody_JACountry+","+PatchReqestBody_JAPostCode+","+PatchReqestBody_JAPrimaryAddress+","+PatchReqestBody_tradingCertificateBanks)

	//comparision of the patch request body and pacth response body
	if(
	patchUpdateApi_id.toString().equals(PatchReqestBody_id.toString()) && 
	patchUpdateApi_addressTypeId.toString().equals(PatchReqestBody_addressTypeId.toString()) && 
	patchUpdateApi_sourceSystem.toString().equals(PatchReqestBody_sourceSystem.toString()) && 
	patchUpdateApi_reference.toString().equals(PatchReqestBody_reference.toString()) && 
	patchUpdateApi_currentStatus.toString().equals(PatchReqestBody_currentStatus.toString()) && 
	patchUpdateApi_storageId.toString().equals(PatchReqestBody_storageId.toString()) && 
	patchUpdateApi_riskId.toString().equals(PatchReqestBody_riskId.toString()) &&
	patchUpdateApi_policyId.toString().equals(PatchReqestBody_policyId.toString()) && 
	patchUpdateApi_memberPartyId.toString().equals(PatchReqestBody_memberPartyId.toString()) && 
	patchUpdateApi_ownerPartyId.toString().equals(PatchReqestBody_ownerPartyId.toString()) && 
	patchUpdateApi_brokerPartyId.toString().equals(PatchReqestBody_brokerPartyId.toString()) && 
	patchUpdateApi_isRenewal.toString().equals(PatchReqestBody_isRenewal.toString()) && 
	patchUpdateApi_isYacht.toString().equals(PatchReqestBody_isYacht.toString()) &&  
	patchUpdateApi_riskReference.toString().equals(PatchReqestBody_riskReference.toString()) && 
	patchUpdateApi_policyReference.toString().equals(PatchReqestBody_policyReference.toString()) && 
	patchUpdateApi_memberReference.toString().equals(PatchReqestBody_memberReference.toString()) && 
	patchUpdateApi_memberType.toString().equals(PatchReqestBody_memberType.toString()) && 
	patchUpdateApi_memberName.toString().equals(PatchReqestBody_memberName.toString()) && 
	patchUpdateApi_jointAssuredName.toString().equals(PatchReqestBody_jointAssuredName.toString()) && 
	patchUpdateApi_ownerReference.toString().equals(PatchReqestBody_ownerReference.toString()) && 
	patchUpdateApi_ownerName.toString().equals(PatchReqestBody_ownerName.toString()) && 
	patchUpdateApi_ownerDomicile.toString().equals(PatchReqestBody_ownerDomicile.toString()) && 
	patchUpdateApi_ownerEmailAddress.toString().equals(PatchReqestBody_ownerEmailAddress.toString()) && 
	patchUpdateApi_brokerReference.toString().equals(PatchReqestBody_brokerReference.toString()) && 
	patchUpdateApi_brokerName.toString().equals(PatchReqestBody_brokerName.toString()) && 
	patchUpdateApi_brokerEmailAddress.toString().equals(PatchReqestBody_brokerEmailAddress.toString()) && 
	patchUpdateApi_policyYear.toString().equals(PatchReqestBody_policyYear.toString()) && 
	patchUpdateApi_certificateIssueDate.toString().equals(PatchReqestBody_certificateIssueDate.toString()) && 
	patchUpdateApi_emailAddress.toString().equals(PatchReqestBody_emailAddress.toString()) && 
	patchUpdateApi_ccEmailAddress.toString().equals(PatchReqestBody_ccEmailAddress.toString()) && 
	patchUpdateApi_policyStartDate.toString().equals(PatchReqestBody_policyStartDate.toString()) && 
	patchUpdateApi_policyEndDate.toString().equals(PatchReqestBody_policyEndDate.toString()) &&  
	patchUpdateApi_currencyCode.toString().equals(PatchReqestBody_currencyCode.toString()) &&
	patchUpdateApi_signatoryStateId.toString().equals(PatchReqestBody_signatoryStateId.toString()) &&
	patchUpdateApi_vesselName.toString().equals(PatchReqestBody_vesselName.toString()) &&
	patchUpdateApi_vesselType.toString().equals(PatchReqestBody_vesselType.toString()) &&
	patchUpdateApi_vesselTypeName.toString().equals(PatchReqestBody_vesselTypeName.toString()) &&
	patchUpdateApi_vesselFlag.toString().equals(PatchReqestBody_vesselFlag.toString()) && 
	patchUpdateApi_imoNumber.toString().equals(PatchReqestBody_imoNumber.toString()) && 
	patchUpdateApi_distinctiveNumbersOrLetters.toString().equals(PatchReqestBody_distinctiveNumbersOrLetters.toString()) && 
	patchUpdateApi_grossTonnage.toString().equals(PatchReqestBody_grossTonnage.toString()) &&
	patchUpdateApi_engineHorsePower.toString().equals(PatchReqestBody_engineHorsePower.toString()) && 
	patchUpdateApi_trademarkAndEngineModel.toString().equals(PatchReqestBody_trademarkAndEngineModel.toString()) && 
	patchUpdateApi_model.toString().equals(PatchReqestBody_model.toString()) && 
	patchUpdateApi_engineNo.toString().equals(PatchReqestBody_engineNo.toString()) &&
	patchUpdateApi_nominatedFlagState.toString().equals(PatchReqestBody_nominatedFlagState.toString()) && 
	patchUpdateApi_nominatedFlagStateName.toString().equals(PatchReqestBody_nominatedFlagStateName.toString()) && 
	patchUpdateApi_portOfRegistry.toString().equals(PatchReqestBody_portOfRegistry.toString()) && 
	patchUpdateApi_tenderReferenceList.toString().equals(PatchReqestBody_tenderReferenceList.toString()) && 
	patchUpdateApi_tenderOutboardReferenceList.toString().equals(PatchReqestBody_tenderOutboardReferenceList.toString()) &&
	patchUpdateApi_tradingCertificateTypeId.toString().equals(PatchReqestBody_tradingCertificateTypeId.toString()) && 
	patchUpdateApi_tradingCertificateGroupId.toString().equals(PatchReqestBody_tradingCertificateGroupId.toString()) && 
	patchUpdateApi_tradingCertificateGroupName.toString().equals(PatchReqestBody_tradingCertificateGroupName.toString()) && 
	patchUpdateApi_tradingCertificateGroupCode.toString().equals(PatchReqestBody_tradingCertificateGroupCode.toString()) && 
	patchUpdateApi_tradingCertificateTypeCode.toString().equals(PatchReqestBody_tradingCertificateTypeCode.toString()) && 
	patchUpdateApi_tradingCertificateTypeName.toString().equals(PatchReqestBody_tradingCertificateTypeName.toString()) &&
	patchUpdateApi_stateAddressName.toString().equals(PatchReqestBody_stateAddressName.toString()) &&
	patchUpdateApi_stateAddressLine1.toString().equals(PatchReqestBody_stateAddressLine1.toString()) && 
	patchUpdateApi_stateAddressLine2.toString().equals(PatchReqestBody_stateAddressLine2.toString()) && 
	patchUpdateApi_stateAddressLine3.toString().equals(PatchReqestBody_stateAddressLine3.toString()) && 
	patchUpdateApi_stateStateOrCounty.toString().equals(PatchReqestBody_stateStateOrCounty.toString()) && 
	patchUpdateApi_stateCity.toString().equals(PatchReqestBody_stateCity.toString()) && 
	patchUpdateApi_stateCountry.toString().equals(PatchReqestBody_stateCountry.toString()) && 
	patchUpdateApi_statePostCode.toString().equals(PatchReqestBody_statePostCode.toString()) && 
	patchUpdateApi_statePrimaryAddress.toString().equals(PatchReqestBody_statePrimaryAddress.toString()) &&
	patchUpdateApi_ownerAddressName.toString().equals(PatchReqestBody_ownerAddressName.toString()) && 
	patchUpdateApi_ownerAddressLine1.toString().equals(PatchReqestBody_ownerAddressLine1.toString()) && 
	patchUpdateApi_ownerAddressLine2.toString().equals(PatchReqestBody_ownerAddressLine2.toString()) && 
	patchUpdateApi_ownerAddressLine3.toString().equals(PatchReqestBody_ownerAddressLine3.toString()) && 
	patchUpdateApi_ownerStateOrCounty.toString().equals(PatchReqestBody_ownerStateOrCounty.toString()) && 
	patchUpdateApi_ownerCity.toString().equals(PatchReqestBody_ownerCity.toString()) && 
	patchUpdateApi_ownerCountry.toString().equals(PatchReqestBody_ownerCountry.toString()) && 
	patchUpdateApi_ownerPostCode.toString().equals(PatchReqestBody_ownerPostCode.toString()) && 
	patchUpdateApi_ownerPrimaryAddress.toString().equals(PatchReqestBody_ownerPrimaryAddress.toString()) &&
	patchUpdateApi_brokerAddressName.toString().equals(PatchReqestBody_brokerAddressName.toString()) && 
	patchUpdateApi_brokerAddressLine1.toString().equals(PatchReqestBody_brokerAddressLine1.toString()) && 
	patchUpdateApi_brokerAddressLine2.toString().equals(PatchReqestBody_brokerAddressLine2.toString()) && 
	patchUpdateApi_brokerAddressLine3.toString().equals(PatchReqestBody_brokerAddressLine3.toString()) && 
	patchUpdateApi_brokerStateOrCounty.toString().equals(PatchReqestBody_brokerStateOrCounty.toString()) && 
	patchUpdateApi_brokerCity.toString().equals(PatchReqestBody_brokerCity.toString()) && 
	patchUpdateApi_brokerCountry.toString().equals(PatchReqestBody_brokerCountry.toString()) && 
	patchUpdateApi_brokerPostCode.toString().equals(PatchReqestBody_brokerPostCode.toString()) && 
	patchUpdateApi_brokerPrimaryAddress.toString().equals(PatchReqestBody_brokerPrimaryAddress.toString()) && 
	patchUpdateApi_memberAddress.toString().equals(PatchReqestBody_memberAddress.toString()) && 
	patchUpdateApi_JAAddressName.toString().equals(PatchReqestBody_JAAddressName.toString()) && 
	patchUpdateApi_JAAddressLine1.toString().equals(PatchReqestBody_JAAddressLine1.toString()) && 
	patchUpdateApi_JAAddressLine2.toString().equals(PatchReqestBody_JAAddressLine2.toString()) && 
	patchUpdateApi_JAAddressLine3.toString().equals(PatchReqestBody_JAAddressLine3.toString()) && 
	patchUpdateApi_JAStateOrCounty.toString().equals(PatchReqestBody_JAStateOrCounty.toString()) && 
	patchUpdateApi_JACity.toString().equals(PatchReqestBody_JACity.toString()) && 
	patchUpdateApi_JACountry.toString().equals(PatchReqestBody_JACountry.toString()) && 
	patchUpdateApi_JAPostCode.toString().equals(PatchReqestBody_JAPostCode.toString()) && 
	patchUpdateApi_JAPrimaryAddress.toString().equals(PatchReqestBody_JAPrimaryAddress.toString()) && 
	patchUpdateApi_tradingCertificateBanks.toString().equals(PatchReqestBody_tradingCertificateBanks.toString())
	)
	/*	
	patchUpdateApi_version.toString().equals(PatchReqestBody_version.toString()) &&
	patchUpdateApi_passengerCapacity.toString().equals(PatchReqestBody_passengerCapacity.toString()) && 
	patchUpdateApi_effectiveStartDate.toString().equals(PatchReqestBody_effectiveStartDate.toString()) &&
	patchUpdateApi_effectiveEndDate.toString().equals(PatchReqestBody_effectiveEndDate.toString()) &&
	patchUpdateApi_coverLimitAmount.toString().equals(PatchReqestBody_coverLimitAmount.toString()) &&
	patchUpdateApi_vesselEnteredDate.toString().equals(PatchReqestBody_vesselEnteredDate.toString()) &&
	patchUpdateApi_yearBuilt.toString().equals(PatchReqestBody_yearBuilt.toString()) && 
	patchUpdateApi_stateAddressId.toString().equals(PatchReqestBody_stateAddressId.toString()) &&
	patchUpdateApi_ownerAddressId.toString().equals(PatchReqestBody_ownerAddressId.toString()) &&
	patchUpdateApi_brokerAddressId.toString().equals(PatchReqestBody_brokerAddressId.toString()) && 
	patchUpdateApi_JAAddressId.toString().equals(PatchReqestBody_JAAddressId.toString()) && 
	)
	*/
	{
		log.info "Updated PATCH request body and PATCH response body is matching hence test case is passed"
	}
	else
	{
		log.info "Updated PATCH request body and PATCH response body is not matching hence test case is failed"
	}

	counter = counter+1
	log.info "Number of records verified are : "+counter
}

sqlWriter.flush()
postApiWriter.flush()
patchApiWriter.flush()
patchUpdateApiWriter.flush()
comparePostPatchWriter.flush()
patchRequestBodyWriter.flush()

sqlWriter.close()
postApiWriter.close()
patchApiWriter.close()
patchUpdateApiWriter.close()
comparePostPatchWriter.close()
patchRequestBodyWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for PATCH method of Trading Certificate************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>certId</con:name><con:value>273095</con:value></con:property></con:properties></con:testCase><con:testCase id="dd7cbc3a-509b-49c7-9965-0a63eaaac548" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_TradingCertificateByTradingCertificateIDByGenerateDraftDocument" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="TradCertByTradCertIDByGenDraftDoc" id="1a7f8487-298c-46ef-ba15-2e73b073ec70"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#tradingCertificateId}/generateDraftDocument" methodName="TCByTCIDByGenerateDraftDocument" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TradCertByTradCertIDByGenDraftDoc" id="ab2d1e5d-6901-47ae-83c7-505727c6c9ab" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/1/generateDraftDocument</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="TradingCertificateByTradingCertificateIDByGenerateDraftDocument" id="39d8eadd-00a9-4e6c-a73a-b89627b82af0" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for POST method of  Trading Certificate By Trading Certificate ID By Generate Draft Document************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
/*
String sqlstmt=
		"""
		USE tradingcertificate
		Select 
		TOP 10
		TC.Id, TC.AddressType_Id, TC.SourceSystem, TC.Reference, TC.CurrentStatus, TC.StorageId, 
		TC.IsYacht, case when TC.IsYacht=0 then 'False' when TC.IsYacht=1 then 'True' else null end as IsYachtFlag,
		TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
		TC.isRenewal, case when TC.isRenewal = 1 then 'True' when TC.isRenewal = 0  then 'False' else NULL end as IsRenewalFlag, 
		TC.TradingCertificateVersion as version, TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, 
		TC.MemberName, TC.JointAssuredName, TC.OwnerReference, TC.OwnerName,TC.OwnerDomicile,TC.OwnerEmailAddress,
		TC.BrokerReference,TC.BrokerName,TC.BrokerEmailAddress,TC.PolicyYear,TC.CertificateIssueDate,
		TC.EmailAddress,TC.CCEmailAddress,TC.EffectiveStartDate,TC.EffectiveEndDate,TC.PassengerCapacity,TC.PolicyStartDate,
		TC.PolicyEndDate,TC.CurrencyCode, TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,
		TC.VesselEnteredDate,TC.VesselFlag,TC.ImoNumber,TC.DistinctiveNumbersOrLetters,TC.GrossTonnage,TC.YearBuilt,
		TC.EngineHorsePower,TC.TradeMark,TC.Model,TC.EngineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.PortOfRegistry,
		TC.TenderReferenceList,TC.TenderOutboardReferenceList,TC.Type_Id as TradingCertificateTypeId,RT.Id as TradingCertificateTypeId, 
		RT.Group_Id as GroupId, RG.Name as TradingCertificateGroupName,RG.GroupCode as TradingCertificateGroupCode, 
		RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName
		from TradingCertificate TC
		inner join ref_Type RT on RT.Id=TC.Type_Id
		inner join ref_Group RG on RG.Id=RT.Group_Id
		"""
*/
String sqlstmt="""
		USE tradingcertificate
		Select 
		top 100
		TC.Id, TC.AddressType_Id, TC.SourceSystem, TC.Reference, TC.CurrentStatus, TC.StorageId, TC.IsYacht, case when TC.IsYacht=0 then 'False' when TC.IsYacht=1 then 'True' else null end as IsYachtFlag,
		TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
		TC.isRenewal, case when TC.isRenewal = 1 then 'True' when TC.isRenewal = 0  then 'False' else NULL end as IsRenewalFlag, TC.TradingCertificateVersion as version,
		TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName, TC.JointAssuredName, TC.OwnerReference,
		TC.OwnerName,TC.OwnerDomicile,TC.OwnerEmailAddress,TC.BrokerReference,TC.BrokerName,TC.BrokerEmailAddress,TC.PolicyYear,TC.CertificateIssueDate,
		TC.EmailAddress,TC.CCEmailAddress,TC.EffectiveStartDate,TC.EffectiveEndDate,TC.PassengerCapacity,TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,
		TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,TC.VesselEnteredDate,TC.VesselFlag,TC.ImoNumber,TC.DistinctiveNumbersOrLetters,
		TC.GrossTonnage,TC.YearBuilt,TC.EngineHorsePower,TC.TradeMark,TC.Model,TC.EngineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.PortOfRegistry,
		TC.TenderReferenceList,TC.TenderOutboardReferenceList,TC.Type_Id as TradingCertificateTypeId,RT.Id as TradingCertificateTypeId, RT.Group_Id as GroupId, 
		RG.Name as TradingCertificateGroupName,RG.GroupCode as TradingCertificateGroupCode, RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName,
		ADRS.Id as AddressId, ADRS.AddressName, ADRS.AddressLine1, ADRS.AddressLine2, ADRS.AddressLine3, ADRS.StateOrCounty, ADRS.City, ADRS.Country, ADRS.PostCode, ADRS.PrimaryAddress,
		case when ADRS.PrimaryAddress=1 then 'true' when ADRS.PrimaryAddress=0 then 'false' else NULL end as PrimaryAddressFlag
		from TradingCertificate TC
		inner join ref_Type RT on RT.Id=TC.Type_Id
		inner join ref_Group RG on RG.Id=RT.Group_Id
		left join AddressSnapshot ADRS on ADRS.TradingCertificate_Id=TC.Id
		--where TC.Id=273016
"""		
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_POSTmethodofTradingCertificateByTradingCertificateIDByGenerateDraftDocument.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_POSTmethodofTradingCertificateByTradingCertificateIDByGenerateDraftDocument.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POSTmethodofTradingCertificateByTradingCertificateIDByGenerateDraftDocument.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_POSTmethodofTradingCertificateByTradingCertificateIDByGenerateDraftDocument"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_POSTmethodofTradingCertificateByTradingCertificateIDByGenerateDraftDocument"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POSTmethodofTradingCertificateByTradingCertificateIDByGenerateDraftDocument"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_Id"+","+"SQL_AddressType_Id"+","+"SQL_SourceSystem"+","+"SQL_Reference"+","+"SQL_CurrentStatus"+","+"SQL_StorageId"+","+"SQL_IsYacht"+","+"SQL_IsYachtFlag"+","+"SQL_RiskId"+","+"SQL_PolicyId"+","+"SQL_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"SQL_isRenewal"+","+"SQL_IsRenewalFlag"+","+"SQL_version"+","+"SQL_RiskReference"+","+"SQL_PolicyReference"+","+"SQL_MemberReference"+","+"SQL_MemberType"+","+"SQL_MemberName"+","+"SQL_JointAssuredName"+","+"SQL_OwnerReference"+","+"SQL_OwnerName"+","+"SQL_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"SQL_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"SQL_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"SQL_CCEmailAddress"+","+"SQL_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"SQL_VesselName"+","+"SQL_VesselType"+","+"SQL_VesselTypeName"+","+"SQL_VesselEnteredDate"+","+"SQL_VesselFlag"+","+"SQL_ImoNumber"+","+"SQL_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"SQL_YearBuilt"+","+"SQL_EngineHorsePower"+","+"SQL_TradeMark"+","+"SQL_Model"+","+"SQL_EngineNo"+","+"SQL_NominatedStateFlag"+","+"SQL_NominatedStateFlagName"+","+"SQL_PortOfRegistry"+","+"SQL_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateTypeId"+","+"SQL_GroupId"+","+"SQL_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"SQL_TradingCertificateTypeCode"+","+"SQL_TradingCertificateTypeName"+","+"SQL_AddressId"+","+"SQL_AddressName"+","+"SQL_AddressLine1"+","+"SQL_AddressLine2"+","+"SQL_AddressLine3"+","+"SQL_StateOrCounty"+","+"SQL_City"+","+"SQL_Country"+","+"SQL_PostCode"+","+"SQL_PrimaryAddress"+","+"SQL_PrimaryAddressFlag")
apiWriter.println("API_Id"+","+"API_AddressType_Id"+","+"API_SourceSystem"+","+"API_Reference"+","+"API_CurrentStatus"+","+"API_StorageId"+","+"API_IsYachtFlag"+","+"API_RiskId"+","+"API_PolicyId"+","+"API_MemberPartyId"+","+"API_OwnerPartyId"+","+"API_IsRenewalFlag"+","+"API_version"+","+"API_RiskReference"+","+"API_PolicyReference"+","+"API_MemberReference"+","+"API_MemberType"+","+"API_MemberName"+","+"API_JointAssuredName"+","+"API_OwnerReference"+","+"API_OwnerName"+","+"API_OwnerDomicile"+","+"API_OwnerEmailAddress"+","+"API_BrokerReference"+","+"API_BrokerName"+","+"API_BrokerEmailAddress"+","+"API_PolicyYear"+","+"API_CertificateIssueDate"+","+"API_EmailAddress"+","+"API_CCEmailAddress"+","+"API_EffectiveStartDate"+","+"API_EffectiveEndDate"+","+"API_PassengerCapacity"+","+"API_PolicyStartDate"+","+"API_PolicyEndDate"+","+"API_CurrencyCode"+","+"API_CoverLimitAmount"+","+"API_SignatoryState_Id"+","+"API_VesselName"+","+"API_VesselType"+","+"API_VesselTypeName"+","+"API_VesselEnteredDate"+","+"API_VesselFlag"+","+"API_ImoNumber"+","+"API_DistinctiveNumbersOrLetters"+","+"API_GrossTonnage"+","+"API_YearBuilt"+","+"API_EngineHorsePower"+","+"API_TradeMark"+","+"API_Model"+","+"API_EngineNo"+","+"API_NominatedStateFlag"+","+"API_NominatedStateFlagName"+","+"API_PortOfRegistry"+","+"API_TenderReferenceList"+","+"API_TenderOutboardReferenceList"+","+"API_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"API_GroupId"+","+"API_TradingCertificateGroupName"+","+"API_TradingCertificateGroupCode"+","+"API_TradingCertificateTypeCode"+","+"API_TradingCertificateTypeName"+","+"API_AddressId"+","+"API_AddressName"+","+"API_AddressLine1"+","+"API_AddressLine2"+","+"API_AddressLine3"+","+"API_StateOrCounty"+","+"API_City"+","+"API_Country"+","+"API_PostCode"+","+"API_PrimaryAddress")
compareWriter.println("SQL_Id"+","+"API_Id"+","+"SQL_AddressType_Id"+","+"API_AddressType_Id"+","+"SQL_SourceSystem"+","+"API_SourceSystem"+","+"SQL_Reference"+","+"API_Reference"+","+"SQL_CurrentStatus"+","+"API_CurrentStatus"+","+"SQL_StorageId"+","+"API_StorageId"+","+"SQL_RiskId"+","+"API_RiskId"+","+"SQL_PolicyId"+","+"API_PolicyId"+","+"SQL_MemberPartyId"+","+"API_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"API_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"API_BrokerPartyId"+","+"SQL_IsRenewalFlag"+","+"API_IsRenewalFlag"+","+"SQL_IsYachtFlag"+","+"API_IsYachtFlag"+","+"SQL_version"+","+"API_version"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_PolicyReference"+","+"API_PolicyReference"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberType"+","+"API_MemberType"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_JointAssuredName"+","+"API_JointAssuredName"+","+"SQL_OwnerReference"+","+"API_OwnerReference"+","+"SQL_OwnerName"+","+"API_OwnerName"+","+"SQL_OwnerDomicile"+","+"API_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"API_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"API_BrokerReference"+","+"SQL_BrokerName"+","+"API_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"API_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"API_PolicyYear"+","+"SQL_CertificateIssueDate"+","+"API_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_CCEmailAddress"+","+"API_CCEmailAddress"+","+"SQL_EffectiveStartDate"+","+"API_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"API_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"API_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"API_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"API_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"API_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"API_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"API_SignatoryState_Id"+","+"SQL_VesselName"+","+"API_VesselName"+","+"SQL_VesselType"+","+"API_VesselType"+","+"SQL_VesselTypeName"+","+"API_VesselTypeName"+","+"SQL_VesselEnteredDate"+","+"API_VesselEnteredDate"+","+"SQL_VesselFlag"+","+"API_VesselFlag"+","+"SQL_ImoNumber"+","+"API_ImoNumber"+","+"SQL_DistinctiveNumbersOrLetters"+","+"API_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"API_GrossTonnage"+","+"SQL_YearBuilt"+","+"API_YearBuilt"+","+"SQL_EngineHorsePower"+","+"API_EngineHorsePower"+","+"SQL_TradeMark"+","+"API_TradeMark"+","+"SQL_Model"+","+"API_Model"+","+"SQL_EngineNo"+","+"API_EngineNo"+","+"SQL_NominatedStateFlag"+","+"API_NominatedStateFlag"+","+"SQL_NominatedStateFlagName"+","+"API_NominatedStateFlagName"+","+"SQL_PortOfRegistry"+","+"API_PortOfRegistry"+","+"SQL_TenderReferenceList"+","+"API_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"API_TenderOutboardReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId1"+","+"SQL_GroupId"+","+"API_GroupId"+","+"SQL_TradingCertificateGroupName"+","+"API_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"API_TradingCertificateGroupCode"+","+"SQL_TradingCertificateTypeCode"+","+"API_TradingCertificateTypeCode"+","+"SQL_TradingCertificateTypeName"+","+"API_TradingCertificateTypeName"+","+"TestCaseStatus")//"SQL_AddressId"+","+"API_AddressId"+","+"SQL_AddressName"+","+"API_AddressName"+","+"SQL_AddressLine1"+","+"API_AddressLine1"+","+"SQL_AddressLine2"+","+"API_AddressLine2"+","+"SQL_AddressLine3"+","+"API_AddressLine3"+","+"SQL_StateOrCounty"+","+"API_StateOrCounty"+","+"SQL_City"+","+"API_City"+","+"SQL_Country"+","+"API_Country"+","+"SQL_PostCode"+","+"API_PostCode"+","+"SQL_PrimaryAddress"+","+"API_PrimaryAddress"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter=0

def rows=con.rows(sqlstmt)  
int db_size=rows.size
String field=null
//log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->
	sql_Id=row.Id
	sql_AddressType_Id=row.AddressType_Id
	sql_SourceSystem=row.SourceSystem
	sql_Reference=row.Reference
	sql_CurrentStatus=row.CurrentStatus
	sql_StorageId=row.StorageId
	sql_IsYacht=row.IsYacht
	sql_IsYachtFlag=row.IsYachtFlag
	sql_RiskId=row.RiskId
	sql_PolicyId=row.PolicyId
	sql_MemberPartyId=row.MemberPartyId
	sql_OwnerPartyId=row.OwnerPartyId
	sql_BrokerPartyId=row.BrokerPartyId
	sql_isRenewal=row.isRenewal
	sql_IsRenewalFlag=row.IsRenewalFlag
	sql_version=row.version
	sql_RiskReference=row.RiskReference
	sql_PolicyReference=row.PolicyReference
	sql_MemberReference=row.MemberReference
	sql_MemberType=row.MemberType
	sql_MemberName=row.MemberName
	sql_MemberName=replaceComma(sql_MemberName.toString())
	sql_JointAssuredName=row.JointAssuredName
	sql_OwnerReference=row.OwnerReference
	sql_OwnerName=row.OwnerName
	sql_OwnerDomicile=row.OwnerDomicile
	sql_OwnerEmailAddress=row.OwnerEmailAddress
	sql_BrokerReference=row.BrokerReference
	sql_BrokerName=row.BrokerName
	sql_BrokerEmailAddress=row.BrokerEmailAddress
	sql_PolicyYear=row.PolicyYear
	sql_CertificateIssueDate=row.CertificateIssueDate
	sql_EmailAddress=row.EmailAddress
	sql_CCEmailAddress=row.CCEmailAddress
	sql_EffectiveStartDate=row.EffectiveStartDate
	sql_EffectiveEndDate=row.EffectiveEndDate
	sql_PassengerCapacity=row.PassengerCapacity
	sql_PolicyStartDate=row.PolicyStartDate
	sql_PolicyEndDate=row.PolicyEndDate
	sql_CurrencyCode=row.CurrencyCode
	sql_CoverLimitAmount=row.CoverLimitAmount
	sql_SignatoryState_Id=row.SignatoryState_Id
	sql_VesselName=row.VesselName
	sql_VesselType=row.VesselType
	sql_VesselTypeName=row.VesselTypeName
	sql_VesselEnteredDate=row.VesselEnteredDate
	sql_VesselFlag=row.VesselFlag
	sql_ImoNumber=row.ImoNumber
	sql_DistinctiveNumbersOrLetters=row.DistinctiveNumbersOrLetters
	sql_GrossTonnage=row.GrossTonnage
	sql_YearBuilt=row.YearBuilt
	sql_EngineHorsePower=row.EngineHorsePower
	sql_TradeMark=row.TradeMark
	sql_Model=row.Model
	sql_EngineNo=row.EngineNo
	sql_NominatedStateFlag=row.NominatedStateFlag
	sql_NominatedStateFlag=replaceComma(sql_NominatedStateFlag.toString())	
	sql_NominatedStateFlagName=row.NominatedStateFlagName
	sql_NominatedStateFlagName=replaceComma(sql_NominatedStateFlagName.toString())
	sql_PortOfRegistry=row.PortOfRegistry
	sql_PortOfRegistry=replaceComma(sql_PortOfRegistry.toString())	
	sql_TenderReferenceList=row.TenderReferenceList
	sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_GroupId=row.GroupId
	sql_TradingCertificateGroupName=row.tradingCertificateGroupName
	sql_TradingCertificateGroupCode=row.tradingCertificateGroupCode
	sql_TradingCertificateTypeCode=row.TradingCertificateTypeCode
	sql_TradingCertificateTypeName=row.TradingCertificateTypeName
	sql_AddressId=row.AddressId	
	sql_AddressName=row.AddressName
	sql_AddressName=replaceComma(sql_AddressName.toString())
	sql_AddressLine1=row.AddressLine1
	sql_AddressLine1=replaceComma(sql_AddressLine1.toString())
	sql_AddressLine2=row.AddressLine2
	sql_AddressLine2=replaceComma(sql_AddressLine2.toString())
	sql_AddressLine3=row.AddressLine3
	sql_AddressLine3=replaceComma(sql_AddressLine3.toString())
	sql_StateOrCounty=row.StateOrCounty
	sql_StateOrCounty=replaceComma(sql_StateOrCounty.toString())
	sql_City=row.City
	sql_City=replaceComma(sql_City.toString())
	sql_Country=row.Country
	sql_Country=replaceComma(sql_Country.toString())
	sql_PostCode=row.PostCode
	sql_PrimaryAddress=row.PrimaryAddress
	sql_PrimaryAddressFlag=row.PrimaryAddressFlag
	
	sqlWriter.println(sql_Id+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_isRenewal+","+sql_IsRenewalFlag+","+sql_version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CCEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_VesselEnteredDate+","+sql_VesselFlag+","+sql_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_PortOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+sql_GroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_AddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_PrimaryAddressFlag)
	log.info "SQL Response received as :"+sql_Id+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_isRenewal+","+sql_IsRenewalFlag+","+sql_version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CCEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_VesselEnteredDate+","+sql_VesselFlag+","+sql_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_PortOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+sql_GroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_AddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_PrimaryAddressFlag

	String tradingCertificateId = sql_Id.toString()
	testRunner.testCase.setPropertyValue("tradingCertificateId",tradingCertificateId)
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	//Run the test Step with name
	testRunner.runTestStepByName('TradCertByTradCertIDByGenDraftDoc')
	String req='${TradCertByTradCertIDByGenDraftDoc#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["TradCertByTradCertIDByGenDraftDoc"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		if (!jsonRes.HasError)
		{
				api_Id=jsonRes.id
				api_AddressType_Id=jsonRes.addressTypeId
				api_SourceSystem=jsonRes.sourceSystem
				api_Reference=jsonRes.reference
				api_CurrentStatus=jsonRes.currentStatus
				api_StorageId=jsonRes.storageId
				api_RiskId=jsonRes.riskId
				api_PolicyId=jsonRes.policyId
				api_MemberPartyId=jsonRes.memberPartyId
				api_OwnerPartyId=jsonRes.ownerPartyId
				api_BrokerPartyId=jsonRes.brokerPartyId
				api_IsRenewalFlag=jsonRes.isRenewal
				api_IsYachtFlag=jsonRes.isYacht
				api_version=jsonRes.version
				api_RiskReference=jsonRes.riskReference
				api_PolicyReference=jsonRes.policyReference
				api_MemberReference=jsonRes.memberReference
				api_MemberType=jsonRes.memberType
				api_MemberName=jsonRes.memberName
				api_MemberName=replaceComma(api_MemberName.toString())
				api_JointAssuredName=jsonRes.jointAssuredName
				api_OwnerReference=jsonRes.ownerReference
				api_OwnerName=jsonRes.ownerName
				api_OwnerDomicile=jsonRes.ownerDomicile
				api_OwnerEmailAddress=jsonRes.ownerEmailAddress
				api_BrokerReference=jsonRes.brokerReference
				api_BrokerName=jsonRes.brokerName
				api_BrokerEmailAddress=jsonRes.brokerEmailAddress
				api_PolicyYear=jsonRes.policyYear
				api_CertificateIssueDate=jsonRes.certificateIssueDate
				api_EmailAddress=jsonRes.emailAddress
				api_CCEmailAddress=jsonRes.ccEmailAddress
				api_EffectiveStartDate=jsonRes.effectiveStartDate
				api_EffectiveEndDate=jsonRes.effectiveEndDate
				api_PassengerCapacity=jsonRes.passengerCapacity
				api_PolicyStartDate=jsonRes.policyStartDate
				api_PolicyEndDate=jsonRes.policyEndDate
				api_CurrencyCode=jsonRes.currencyCode
				api_CoverLimitAmount=jsonRes.coverLimitAmount
				api_SignatoryState_Id=jsonRes.signatoryStateId
				api_VesselName=jsonRes.vesselName
				api_VesselType=jsonRes.vesselType
				api_VesselTypeName=jsonRes.vesselTypeName
				api_VesselEnteredDate=jsonRes.vesselEnteredDate
				api_VesselFlag=jsonRes.vesselFlag
				api_ImoNumber=jsonRes.imoNumber
				api_DistinctiveNumbersOrLetters=jsonRes.distinctiveNumbersOrLetters
				api_GrossTonnage=jsonRes.grossTonnage
				api_YearBuilt=jsonRes.yearBuilt
				api_EngineHorsePower=jsonRes.engineHorsePower
				api_TradeMark=jsonRes.trademarkAndEngineModel
				api_Model=jsonRes.model
				api_EngineNo=jsonRes.engineNo
				api_NominatedStateFlag=jsonRes.nominatedFlagState
				api_NominatedStateFlag=replaceComma(api_NominatedStateFlag.toString())	
				api_NominatedStateFlagName=jsonRes.nominatedFlagStateName
				api_NominatedStateFlagName=replaceComma(api_NominatedStateFlagName.toString())				
				api_PortOfRegistry=jsonRes.portOfRegistry
				api_PortOfRegistry=replaceComma(api_PortOfRegistry.toString())				
				api_TenderReferenceList=jsonRes.tenderReferenceList
				api_TenderOutboardReferenceList=jsonRes.tenderOutboardReferenceList
				api_TradingCertificateTypeId=jsonRes.tradingCertificateTypeId
				api_TradingCertificateTypeId1=jsonRes.tradingCertificateType.id
				api_GroupId=jsonRes.tradingCertificateType.tradingCertificateGroup.id
				api_TradingCertificateGroupName=jsonRes.tradingCertificateType.tradingCertificateGroup.name
				api_TradingCertificateGroupCode=jsonRes.tradingCertificateType.tradingCertificateGroup.groupCode
				api_TradingCertificateTypeCode=jsonRes.tradingCertificateType.typeCode
				api_TradingCertificateTypeName=jsonRes.tradingCertificateType.typeName
				api_StateAddress=jsonRes.stateAddress
				api_OwnerAddress=jsonRes.ownerAddress
				api_BrokerAddress=jsonRes.brokerAddress
				api_MemberAddress=jsonRes.memberAddress
				api_JointAssuredAddress=jsonRes.jointAssuredAddress

				apiWriter.println(api_Id+","+api_AddressType_Id+","+api_SourceSystem+","+api_Reference+","+api_CurrentStatus+","+api_StorageId+","+api_IsYachtFlag+","+api_RiskId+","+api_PolicyId+","+api_MemberPartyId+","+api_OwnerPartyId+","+api_IsRenewalFlag+","+api_version+","+api_RiskReference+","+api_PolicyReference+","+api_MemberReference+","+api_MemberType+","+api_MemberName+","+api_JointAssuredName+","+api_OwnerReference+","+api_OwnerName+","+api_OwnerDomicile+","+api_OwnerEmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_BrokerEmailAddress+","+api_PolicyYear+","+api_CertificateIssueDate+","+api_EmailAddress+","+api_CCEmailAddress+","+api_EffectiveStartDate+","+api_EffectiveEndDate+","+api_PassengerCapacity+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_CurrencyCode+","+api_CoverLimitAmount+","+api_SignatoryState_Id+","+api_VesselName+","+api_VesselType+","+api_VesselTypeName+","+api_VesselEnteredDate+","+api_VesselFlag+","+api_ImoNumber+","+api_DistinctiveNumbersOrLetters+","+api_GrossTonnage+","+api_YearBuilt+","+api_EngineHorsePower+","+api_TradeMark+","+api_Model+","+api_EngineNo+","+api_NominatedStateFlag+","+api_NominatedStateFlagName+","+api_PortOfRegistry+","+api_TenderReferenceList+","+api_TenderOutboardReferenceList+","+api_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+api_GroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode+","+api_TradingCertificateTypeCode+","+api_TradingCertificateTypeName) //+","+api_AddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_PrimaryAddress)
				log.info "API Response is :" +api_Id+","+api_AddressType_Id+","+api_SourceSystem+","+api_Reference+","+api_CurrentStatus+","+api_StorageId+","+api_IsYachtFlag+","+api_RiskId+","+api_PolicyId+","+api_MemberPartyId+","+api_OwnerPartyId+","+api_IsRenewalFlag+","+api_version+","+api_RiskReference+","+api_PolicyReference+","+api_MemberReference+","+api_MemberType+","+api_MemberName+","+api_JointAssuredName+","+api_OwnerReference+","+api_OwnerName+","+api_OwnerDomicile+","+api_OwnerEmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_BrokerEmailAddress+","+api_PolicyYear+","+api_CertificateIssueDate+","+api_EmailAddress+","+api_CCEmailAddress+","+api_EffectiveStartDate+","+api_EffectiveEndDate+","+api_PassengerCapacity+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_CurrencyCode+","+api_CoverLimitAmount+","+api_SignatoryState_Id+","+api_VesselName+","+api_VesselType+","+api_VesselTypeName+","+api_VesselEnteredDate+","+api_VesselFlag+","+api_ImoNumber+","+api_DistinctiveNumbersOrLetters+","+api_GrossTonnage+","+api_YearBuilt+","+api_EngineHorsePower+","+api_TradeMark+","+api_Model+","+api_EngineNo+","+api_NominatedStateFlag+","+api_NominatedStateFlagName+","+api_PortOfRegistry+","+api_TenderReferenceList+","+api_TenderOutboardReferenceList+","+api_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+api_GroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode+","+api_TradingCertificateTypeCode+","+api_TradingCertificateTypeName //+","+api_AddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_PrimaryAddress

				if(api_Id.toString().toUpperCase().equals(sql_Id.toString().toUpperCase()) && api_AddressType_Id.toString().toUpperCase().equals(sql_AddressType_Id.toString().toUpperCase()) && api_SourceSystem.toString().toUpperCase().equals(sql_SourceSystem.toString().toUpperCase()) && api_Reference.toString().toUpperCase().equals(sql_Reference.toString().toUpperCase()) && api_CurrentStatus.toString().toUpperCase().equals(sql_CurrentStatus.toString().toUpperCase()) && api_StorageId.toString().toUpperCase().equals(sql_StorageId.toString().toUpperCase()) && api_RiskId.toString().toUpperCase().equals(sql_RiskId.toString().toUpperCase()) && api_PolicyId.toString().toUpperCase().equals(sql_PolicyId.toString().toUpperCase()) && api_MemberPartyId.toString().toUpperCase().equals(sql_MemberPartyId.toString().toUpperCase()) && api_OwnerPartyId.toString().toUpperCase().equals(sql_OwnerPartyId.toString().toUpperCase()) && api_BrokerPartyId.toString().toUpperCase().equals(sql_BrokerPartyId.toString().toUpperCase()) && api_IsRenewalFlag.toString().toUpperCase().equals(sql_IsRenewalFlag.toString().toUpperCase()) && api_IsYachtFlag.toString().toUpperCase().equals(sql_IsYachtFlag.toString().toUpperCase()) && api_version.toString().toUpperCase().equals(sql_version.toString().toUpperCase()) && api_RiskReference.toString().toUpperCase().equals(sql_RiskReference.toString().toUpperCase()) && api_PolicyReference.toString().toUpperCase().equals(sql_PolicyReference.toString().toUpperCase()) && api_MemberReference.toString().toUpperCase().equals(sql_MemberReference.toString().toUpperCase()) && api_MemberType.toString().toUpperCase().equals(sql_MemberType.toString().toUpperCase()) && api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && api_JointAssuredName.toString().toUpperCase().equals(sql_JointAssuredName.toString().toUpperCase()) && api_OwnerReference.toString().toUpperCase().equals(sql_OwnerReference.toString().toUpperCase()) && api_OwnerName.toString().toUpperCase().equals(sql_OwnerName.toString().toUpperCase()) && api_OwnerDomicile.toString().toUpperCase().equals(sql_OwnerDomicile.toString().toUpperCase()) && api_OwnerEmailAddress.toString().toUpperCase().equals(sql_OwnerEmailAddress.toString().toUpperCase()) && api_BrokerReference.toString().toUpperCase().equals(sql_BrokerReference.toString().toUpperCase()) && api_BrokerName.toString().toUpperCase().equals(sql_BrokerName.toString().toUpperCase()) && api_BrokerEmailAddress.toString().toUpperCase().equals(sql_BrokerEmailAddress.toString().toUpperCase()) && api_PolicyYear.toString().toUpperCase().equals(sql_PolicyYear.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && api_CCEmailAddress.toString().toUpperCase().equals(sql_CCEmailAddress.toString().toUpperCase()) && api_PassengerCapacity.toString().toUpperCase().equals(sql_PassengerCapacity.toString().toUpperCase()) && api_CurrencyCode.toString().toUpperCase().equals(sql_CurrencyCode.toString().toUpperCase()) && api_CoverLimitAmount.toString().toUpperCase().equals(sql_CoverLimitAmount.toString().toUpperCase()) && api_SignatoryState_Id.toString().toUpperCase().equals(sql_SignatoryState_Id.toString().toUpperCase()) && api_VesselName.toString().toUpperCase().equals(sql_VesselName.toString().toUpperCase()) && api_VesselType.toString().toUpperCase().equals(sql_VesselType.toString().toUpperCase()) && api_VesselTypeName.toString().toUpperCase().equals(sql_VesselTypeName.toString().toUpperCase()) && api_VesselFlag.toString().toUpperCase().equals(sql_VesselFlag.toString().toUpperCase()) && api_ImoNumber.toString().toUpperCase().equals(sql_ImoNumber.toString().toUpperCase()) && api_DistinctiveNumbersOrLetters.toString().toUpperCase().equals(sql_DistinctiveNumbersOrLetters.toString().toUpperCase()) && api_GrossTonnage.toString().toUpperCase().equals(sql_GrossTonnage.toString().toUpperCase()) && api_YearBuilt.toString().toUpperCase().equals(sql_YearBuilt.toString().toUpperCase()) && api_EngineHorsePower.toString().toUpperCase().equals(sql_EngineHorsePower.toString().toUpperCase()) && api_TradeMark.toString().toUpperCase().equals(sql_TradeMark.toString().toUpperCase()) && api_Model.toString().toUpperCase().equals(sql_Model.toString().toUpperCase()) && api_EngineNo.toString().toUpperCase().equals(sql_EngineNo.toString().toUpperCase()) && api_NominatedStateFlag.toString().toUpperCase().equals(sql_NominatedStateFlag.toString().toUpperCase()) && api_NominatedStateFlagName.toString().toUpperCase().equals(sql_NominatedStateFlagName.toString().toUpperCase()) && api_PortOfRegistry.toString().toUpperCase().equals(sql_PortOfRegistry.toString().toUpperCase()) && api_TenderReferenceList.toString().toUpperCase().equals(sql_TenderReferenceList.toString().toUpperCase()) && api_TenderOutboardReferenceList.toString().toUpperCase().equals(sql_TenderOutboardReferenceList.toString().toUpperCase()) && api_TradingCertificateTypeId.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) && api_TradingCertificateTypeId1.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) && api_GroupId.toString().toUpperCase().equals(sql_GroupId.toString().toUpperCase()) && api_TradingCertificateGroupName.toString().toUpperCase().equals(sql_TradingCertificateGroupName.toString().toUpperCase()) && api_TradingCertificateGroupCode.toString().toUpperCase().equals(sql_TradingCertificateGroupCode.toString().toUpperCase()) && api_TradingCertificateTypeCode.toString().toUpperCase().equals(sql_TradingCertificateTypeCode.toString().toUpperCase()) && api_TradingCertificateTypeName.toString().toUpperCase().equals(sql_TradingCertificateTypeName.toString().toUpperCase()))// && api_AddressId.toString().equals(sql_AddressId.toString()) && api_AddressName.toString().toUpperCase().equals(sql_AddressName.toString().toUpperCase()) && api_AddressLine1.toString().toUpperCase().equals(sql_AddressLine1.toString().toUpperCase()) && api_AddressLine2.toString().toUpperCase().equals(sql_AddressLine2.toString().toUpperCase()) && api_AddressLine3.toString().toUpperCase().equals(sql_AddressLine3.toString().toUpperCase()) && api_StateOrCounty.toString().toUpperCase().equals(sql_StateOrCounty.toString().toUpperCase()) && api_City.toString().toUpperCase().equals(sql_City.toString().toUpperCase()) &&  api_Country.toString().toUpperCase().equals(sql_Country.toString().toUpperCase()) &&  api_PostCode.toString().toUpperCase().equals(sql_PostCode.toString().toUpperCase()) && api_PrimaryAddress.toString().toUpperCase().equals(sql_PrimaryAddress.toString().toUpperCase()))
				{
					compareWriter.println(sql_Id+","+api_Id+","+sql_AddressType_Id+","+api_AddressType_Id+","+sql_SourceSystem+","+api_SourceSystem+","+sql_Reference+","+api_Reference+","+sql_CurrentStatus+","+api_CurrentStatus+","+sql_StorageId+","+api_StorageId+","+sql_RiskId+","+api_RiskId+","+sql_PolicyId+","+api_PolicyId+","+sql_MemberPartyId+","+api_MemberPartyId+","+sql_OwnerPartyId+","+api_OwnerPartyId+","+sql_BrokerPartyId+","+api_BrokerPartyId+","+sql_IsRenewalFlag+","+api_IsRenewalFlag+","+sql_IsYachtFlag+","+api_IsYachtFlag+","+sql_version+","+api_version+","+sql_RiskReference+","+api_RiskReference+","+sql_PolicyReference+","+api_PolicyReference+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberType+","+api_MemberType+","+sql_MemberName+","+api_MemberName+","+sql_JointAssuredName+","+api_JointAssuredName+","+sql_OwnerReference+","+api_OwnerReference+","+sql_OwnerName+","+api_OwnerName+","+sql_OwnerDomicile+","+api_OwnerDomicile+","+sql_OwnerEmailAddress+","+api_OwnerEmailAddress+","+sql_BrokerReference+","+api_BrokerReference+","+sql_BrokerName+","+api_BrokerName+","+sql_BrokerEmailAddress+","+api_BrokerEmailAddress+","+sql_PolicyYear+","+api_PolicyYear+","+sql_CertificateIssueDate+","+api_CertificateIssueDate+","+sql_EmailAddress+","+api_EmailAddress+","+sql_CCEmailAddress+","+api_CCEmailAddress+","+sql_EffectiveStartDate+","+api_EffectiveStartDate+","+sql_EffectiveEndDate+","+api_EffectiveEndDate+","+sql_PassengerCapacity+","+api_PassengerCapacity+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_CoverLimitAmount+","+api_CoverLimitAmount+","+sql_SignatoryState_Id+","+api_SignatoryState_Id+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_VesselTypeName+","+api_VesselTypeName+","+sql_VesselEnteredDate+","+api_VesselEnteredDate+","+sql_VesselFlag+","+api_VesselFlag+","+sql_ImoNumber+","+api_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+api_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TradeMark+","+api_TradeMark+","+sql_Model+","+api_Model+","+sql_EngineNo+","+api_EngineNo+","+sql_NominatedStateFlag+","+api_NominatedStateFlag+","+sql_NominatedStateFlagName+","+api_NominatedStateFlagName+","+sql_PortOfRegistry+","+api_PortOfRegistry+","+sql_TenderReferenceList+","+api_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+sql_GroupId+","+api_GroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+"Test Case Passed")//sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_PrimaryAddress+","+api_PrimaryAddress+","+"Test Case Passed")
					log.info "Details are matching, hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_Id+","+api_Id+","+sql_AddressType_Id+","+api_AddressType_Id+","+sql_SourceSystem+","+api_SourceSystem+","+sql_Reference+","+api_Reference+","+sql_CurrentStatus+","+api_CurrentStatus+","+sql_StorageId+","+api_StorageId+","+sql_RiskId+","+api_RiskId+","+sql_PolicyId+","+api_PolicyId+","+sql_MemberPartyId+","+api_MemberPartyId+","+sql_OwnerPartyId+","+api_OwnerPartyId+","+sql_BrokerPartyId+","+api_BrokerPartyId+","+sql_IsRenewalFlag+","+api_IsRenewalFlag+","+sql_IsYachtFlag+","+api_IsYachtFlag+","+sql_version+","+api_version+","+sql_RiskReference+","+api_RiskReference+","+sql_PolicyReference+","+api_PolicyReference+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberType+","+api_MemberType+","+sql_MemberName+","+api_MemberName+","+sql_JointAssuredName+","+api_JointAssuredName+","+sql_OwnerReference+","+api_OwnerReference+","+sql_OwnerName+","+api_OwnerName+","+sql_OwnerDomicile+","+api_OwnerDomicile+","+sql_OwnerEmailAddress+","+api_OwnerEmailAddress+","+sql_BrokerReference+","+api_BrokerReference+","+sql_BrokerName+","+api_BrokerName+","+sql_BrokerEmailAddress+","+api_BrokerEmailAddress+","+sql_PolicyYear+","+api_PolicyYear+","+sql_CertificateIssueDate+","+api_CertificateIssueDate+","+sql_EmailAddress+","+api_EmailAddress+","+sql_CCEmailAddress+","+api_CCEmailAddress+","+sql_EffectiveStartDate+","+api_EffectiveStartDate+","+sql_EffectiveEndDate+","+api_EffectiveEndDate+","+sql_PassengerCapacity+","+api_PassengerCapacity+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_CoverLimitAmount+","+api_CoverLimitAmount+","+sql_SignatoryState_Id+","+api_SignatoryState_Id+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_VesselTypeName+","+api_VesselTypeName+","+sql_VesselEnteredDate+","+api_VesselEnteredDate+","+sql_VesselFlag+","+api_VesselFlag+","+sql_ImoNumber+","+api_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+api_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TradeMark+","+api_TradeMark+","+sql_Model+","+api_Model+","+sql_EngineNo+","+api_EngineNo+","+sql_NominatedStateFlag+","+api_NominatedStateFlag+","+sql_NominatedStateFlagName+","+api_NominatedStateFlagName+","+sql_PortOfRegistry+","+api_PortOfRegistry+","+sql_TenderReferenceList+","+api_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+sql_GroupId+","+api_GroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+"Test Case Failed")//sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_PrimaryAddress+","+api_PrimaryAddress+","+"Test Case Failed")
					log.info "Details are not matching, hence test case is failed"
				}
		}
	}
	else
	{
		log.info "Failed API response received as : "+response
	}

	counter = 1+counter
	log.info "Total records tested are : "+counter
}

public String replaceComma(String field)
{
	if(field!=null)
	{
		field=field.replace(",", " " )
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for POST method of  Trading Certificate By Trading Certificate Id By Generate Draft Document***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>tradingCertificateId</con:name><con:value>59080</con:value></con:property></con:properties></con:testCase><con:testCase id="da7c95b5-c0b3-4088-abf4-1069476e086d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POST_TradingCertificateSave" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="POST_TradingCertSave" id="2274054b-85c6-4c67-be96-7d5b5b74c8c0"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/" methodName="POST_TradingCertificateSave" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST_TradingCertSave" id="f0efb725-78f1-47c2-a486-172c93cb9440" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request>
	{
	  "id": 1,
	  "addressTypeId": "7",
	  "sourceSystem": "PIOnline",
	  "reference": "123654",
	  "currentStatus": "ISSUED",
	  "storageId": null,
	  "riskId": 130179,
	  "vesselId": 130179,
	  "policyId": 1044648,
	  "memberPartyId": 112673,
	  "ownerPartyId": 0,
	  "brokerPartyId": 1,
	  "isRenewal": true,
	  "isYacht": true,
	  "version": 0,
	  "riskReference": "682637",
	  "vesselReference": "682637",
	  "policyReference": "1044648",
	  "memberReference": "73328",
	  "memberType": "N/K",
	  "memberName": "Test3Member Variation1",
	  "jointAssuredName": "N/K",
	  "ownerReference": "N/K",
	  "ownerName": "N/K",
	  "ownerDomicile": "N/K",
	  "ownerEmailAddress": "N/K",
	  "brokerReference": "104",
	  "brokerName": "POST &amp; CO (P &amp; I)",
	  "brokerEmailAddress": "claims@post-co.com"  ,
	  "policyYear": "2022",
	  "certificateIssueDate": "2021-03-01T11:30:33.510Z",
	  "emailAddress": "string",
	  "ccEmailAddress": "string",
	  "effectiveStartDate": "2021-03-01T11:30:33.510Z",
	  "effectiveEndDate": "2021-03-01T11:30:33.510Z",
	  "passengerCapacity": 0,
	  "policyStartDate": "2021-04-01T12:00:00.000Z",
	  "policyEndDate": "2022-04-01T12:00:00.000Z",
	  "currencyCode": "USD",
	  "coverLimitAmount": 500000000.00,
	  "signatoryStateId": 263,
	  "vesselName": "Test3Policy Risk",
	  "vesselType": "YA",
	  "vesselTypeName": "YACHT CHARTER 13+ PAX",
	  "vesselEnteredDate": "2020-11-08T12:00:00.000Z",
	  "vesselFlag": "ITALY",
	  "imoNumber": "3453466",
	  "distinctiveNumbersOrLetters": "f56",
	  "grossTonnage": "2500",
	  "yearBuilt": 2012,
	  "engineHorsePower": "N/K",
	  "trademarkAndEngineModel": "N/K",
	  "model": "N/K",
	  "engineNo": "N/K",
	  "nominatedFlagState": "ITALY",
	  "nominatedFlagStateName": "CONSAP S.p.a",
	  "portOfRegistry": "TRIESTE",
	  "lastModifiedByUserId": 115,
	  "lastModifiedDate": "2021-02-04T14:07:44.898Z",
	  "tenderReferenceList": "N/K",
	  "tenderOutboardReferenceList": "N/K",
	  "tradingCertificateTypeId": "1",
	  "tradingCertificateType": 
	  {
		"id": "1",
		"tradingCertificateGroup": 
		{
			"id": "1",
			"name": "BBC",
			"groupCode": "TRADECERT"
		},
		"typeCode": "Trading Certificates",
		"typeName": "BBC"
	  },
	  "addresses": [
	    {
	      "id": "7",
	      "addressName": "addressName",
	      "addressLine1": "Line1",
	      "addressLine2": "Line2",
	      "addressLine3": "Line3",
	      "stateOrCounty": "MH",
	      "city": "Mumbai",
	      "country": "India",
	      "postCode": "432131",
	      "primaryAddress": true
	    }
	  ],
	  "stateAddress": {
	     "id": "7",
	    "addressName": "CONSAP S.p.a",
	    "addressLine1": "VIA YSER 14",
	    "addressLine2": "N/K",
	    "addressLine3": "N/K",
	    "stateOrCounty": "",
	    "city": "Roma",
	    "country": "ITALY",
	    "postCode": "00198",
	    "primaryAddress": true
	  },
	  "ownerAddress": {
	    "id": "7",
	    "addressName": "string",
	    "addressLine1": "string",
	    "addressLine2": "string",
	    "addressLine3": "string",
	    "stateOrCounty": "string",
	    "city": "string",
	    "country": "string",
	    "postCode": "string",
	    "primaryAddress": true
	  },
	  "brokerAddress": {
	    "id": "7",
	    "addressName": "Blaak 31 11th Floor",
	    "addressLine1": "",
	    "addressLine2": "",
	    "addressLine3": "",
	    "stateOrCounty": "",
	    "city": "Rotterdam",
	    "country": "NETHERLANDS",
	    "postCode": "3011 GA",
	    "primaryAddress": true
	  },
	  "memberAddress": {
	    "id": "7",
	    "addressName": "Test3Member Created AddName",
	    "addressLine1": "Test3Member Created L1",
	    "addressLine2": "Test3Member Created L2",
	    "addressLine3": "",
	    "stateOrCounty": "Alabama",
	    "city": "Birmingham",
	    "country": "UNITED STATES OF AMERICA",
	    "postCode": "54734",
	    "primaryAddress": true
	  },
	  "jointAssuredAddress": {
	    "id": "7",
	    "addressName": "string",
	    "addressLine1": "string",
	    "addressLine2": "string",
	    "addressLine3": "string",
	    "stateOrCounty": "string",
	    "city": "string",
	    "country": "string",
	    "postCode": "string",
	    "primaryAddress": true
	  },
	  "tradingCertificateBanksForValidation": [
	    {
	      "id": 0,
	      "addressName": "string",
	      "addressLine1": "string",
	      "addressLine2": "string",
	      "addressLine3": "string",
	      "stateOrCounty": "string",
	      "city": "string",
	      "country": "string",
	      "postCode": "string",
	      "primaryAddress": true,
	      "bankCapacities": [
	        {
	          "id": 0,
	          "name": "string"
	        }
	      ],
	      "bankPartyId": 0,
	      "tradingCertificateId": 0,
	      "bankName": "string",
	      "startDate": "2021-03-04T07:49:44.584Z",
	      "endDate": "2021-03-04T07:49:44.584Z"
	    }
	  ],
	  "tradingCertificateBanks": [
	    {
	      "id": 0,
	      "addressName": "string",
	      "addressLine1": "string",
	      "addressLine2": "string",
	      "addressLine3": "string",
	      "stateOrCounty": "string",
	      "city": "string",
	      "country": "string",
	      "postCode": "string",
	      "primaryAddress": true,
	      "bankCapacities": [
	        {
	          "id": 0,
	          "name": "string"
	        }
	      ],
	      "bankPartyId": 0,
	      "tradingCertificateId": 0,
	      "bankName": "string",
	      "startDate": "2021-03-04T07:49:44.584Z",
	      "endDate": "2021-03-04T07:49:44.584Z"
	    }
	  ]
	}
	</con:request><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="POST_TradingCertificateSave" id="73185125-9131-4367-b3d2-d0ae3e1e5a45" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat
import com.eviware.soapui.support.types.StringToStringMap 

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
//	String dateForApp = newDateTimeString
//	dateForApp= dateForApp.replace("-","")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for Post method of Trading Certificate Save************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt =
"""
	Use tradingcertificate
	Select
	RT.Id as TypeId, RT.Group_Id as GroupId, RG.Name as GroupName, RG.GroupCode,
	RT.TypeCode, RT.Name as TypeName
	from ref_Type RT
	inner join ref_Group RG on RT.Group_Id = RG.Id
"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQLResponse_POST_TradingCertificateSave.csv"]
def postApiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\APIResponse_POST_TradingCertificateSave.csv"]
def getApiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\APIResponse_GET_TradingCertificateSave.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_POST_TradingCertificateSave.csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def postApiFile = new File(postApiResponseFile[0])
def postApiWriter = postApiFile.newPrintWriter()

def getApiFile = new File(getApiResponseFile[0])
def getApiWriter = getApiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TypeId"+","+"SQL_TypeCode"+","+"SQL_TypeName"+","+"SQL_GroupId"+","+"SQL_GroupCode")
postApiWriter.println("postApi_id"+","+"postApi_addressTypeId"+","+"postApi_sourceSystem"+","+"postApi_reference"+","+"postApi_currentStatus"+","+"postApi_storageId"+","+"postApi_riskId"+","+"postApi_policyId"+","+"postApi_memberPartyId"+","+"postApi_ownerPartyId"+","+"postApi_brokerPartyId"+","+"postApi_isRenewal"+","+"postApi_isYacht"+","+"postApi_version"+","+"postApi_riskReference"+","+"postApi_policyReference"+","+"postApi_memberReference"+","+"postApi_memberType"+","+"postApi_memberName"+","+"postApi_jointAssuredName"+","+"postApi_ownerReference"+","+"postApi_ownerName"+","+"postApi_ownerDomicile"+","+"postApi_ownerEmailAddress"+","+"postApi_brokerReference"+","+"postApi_brokerName"+","+"postApi_brokerEmailAddress"+","+"postApi_policyYear"+","+"postApi_certificateIssueDate"+","+"postApi_emailAddress"+","+"postApi_ccEmailAddress"+","+"postApi_effectiveStartDate"+","+"postApi_effectiveEndDate"+","+"postApi_passengerCapacity"+","+"postApi_policyStartDate"+","+"postApi_policyEndDate"+","+"postApi_currencyCode"+","+"postApi_coverLimitAmount"+","+"postApi_signatoryStateId"+","+"postApi_vesselName"+","+"postApi_vesselType"+","+"postApi_vesselTypeName"+","+"postApi_vesselEnteredDate"+","+"postApi_vesselFlag"+","+"postApi_imoNumber"+","+"postApi_distinctiveNumbersOrLetters"+","+"postApi_grossTonnage"+","+"postApi_yearBuilt"+","+"postApi_engineHorsePower"+","+"postApi_trademarkAndEngineModel"+","+"postApi_model"+","+"postApi_engineNo"+","+"postApi_nominatedFlagState"+","+"postApi_nominatedFlagStateName"+","+"postApi_portOfRegistry"+","+"postApi_tenderReferenceList"+","+"postApi_tenderOutboardReferenceList"+","+"postApi_tradingCertificateTypeId"+","+"postApi_tradingCertificateGroupId"+","+"postApi_tradingCertificateGroupName"+","+"postApi_tradingCertificateGroupCode"+","+"postApi_stateAddressId"+","+"postApi_ownerAddressId"+","+"postApi_brokerAddressId"+","+"postApi_memberAddressId"+","+"postApi_jointAssuredAddressId")
getApiWriter.println("getApi_id"+","+"getApi_addressTypeId"+","+"getApi_sourceSystem"+","+"getApi_reference"+","+"getApi_currentStatus"+","+"getApi_storageId"+","+"getApi_riskId"+","+"getApi_policyId"+","+"getApi_memberPartyId"+","+"getApi_ownerPartyId"+","+"getApi_brokerPartyId"+","+"getApi_isRenewal"+","+"getApi_isYacht"+","+"getApi_version"+","+"getApi_riskReference"+","+"getApi_policyReference"+","+"getApi_memberReference"+","+"getApi_memberType"+","+"getApi_memberName"+","+"getApi_jointAssuredName"+","+"getApi_ownerReference"+","+"getApi_ownerName"+","+"getApi_ownerDomicile"+","+"getApi_ownerEmailAddress"+","+"getApi_brokerReference"+","+"getApi_brokerName"+","+"getApi_brokerEmailAddress"+","+"getApi_policyYear"+","+"getApi_certificateIssueDate"+","+"getApi_emailAddress"+","+"getApi_ccEmailAddress"+","+"getApi_effectiveStartDate"+","+"getApi_effectiveEndDate"+","+"getApi_passengerCapacity"+","+"getApi_policyStartDate"+","+"getApi_policyEndDate"+","+"getApi_currencyCode"+","+"getApi_coverLimitAmount"+","+"getApi_signatoryStateId"+","+"getApi_vesselName"+","+"getApi_vesselType"+","+"getApi_vesselTypeName"+","+"getApi_vesselEnteredDate"+","+"getApi_vesselFlag"+","+"getApi_imoNumber"+","+"getApi_distinctiveNumbersOrLetters"+","+"getApi_grossTonnage"+","+"getApi_yearBuilt"+","+"getApi_engineHorsePower"+","+"getApi_trademarkAndEngineModel"+","+"getApi_model"+","+"getApi_engineNo"+","+"getApi_nominatedFlagState"+","+"getApi_nominatedFlagStateName"+","+"getApi_portOfRegistry"+","+"getApi_tenderReferenceList"+","+"getApi_tenderOutboardReferenceList"+","+"getApi_tradingCertificateTypeId"+","+"getApi_tradingCertificateGroupId"+","+"getApi_tradingCertificateGroupName"+","+"getApi_tradingCertificateGroupCode"+","+"getApi_stateAddressId"+","+"getApi_ownerAddressId"+","+"getApi_brokerAddressId"+","+"getApi_memberAddressId"+","+"getApi_jointAssuredAddressId")
compareWriter.println("postApi_id"+","+"getApi_id"+","+"postApi_addressTypeId"+","+"getApi_addressTypeId"+","+"postApi_sourceSystem"+","+"getApi_sourceSystem"+","+"postApi_reference"+","+"getApi_reference"+","+"postApi_currentStatus"+","+"getApi_currentStatus"+","+"postApi_storageId"+","+"getApi_storageId"+","+"postApi_riskId"+","+"getApi_riskId"+","+","+"postApi_policyId"+","+"getApi_policyId"+","+"postApi_memberPartyId"+","+"getApi_memberPartyId"+","+"postApi_ownerPartyId"+","+"getApi_ownerPartyId"+","+"postApi_brokerPartyId"+","+"getApi_brokerPartyId"+","+"postApi_isRenewal"+","+"getApi_isRenewal"+","+"postApi_isYacht"+","+"getApi_isYacht"+","+"postApi_version"+","+"getApi_version"+","+"postApi_riskReference"+","+"getApi_riskReference"+","+"postApi_policyReference"+","+"getApi_policyReference"+","+"postApi_memberReference"+","+"getApi_memberReference"+","+"postApi_memberType"+","+"getApi_memberType"+","+"postApi_memberName"+","+"getApi_memberName"+","+"postApi_jointAssuredName"+","+"getApi_jointAssuredName"+","+"postApi_ownerReference"+","+"getApi_ownerReference"+","+"postApi_ownerName"+","+"getApi_ownerName"+","+"postApi_ownerDomicile"+","+"getApi_ownerDomicile"+","+"postApi_ownerEmailAddress"+","+"getApi_ownerEmailAddress"+","+"postApi_brokerReference"+","+"getApi_brokerReference"+","+"postApi_brokerName"+","+"getApi_brokerName"+","+"postApi_brokerEmailAddress"+","+"getApi_brokerEmailAddress"+","+"postApi_policyYear"+","+"getApi_policyYear"+","+"postApi_certificateIssueDate"+","+"getApi_certificateIssueDate"+","+"postApi_emailAddress"+","+"getApi_emailAddress"+","+"postApi_ccEmailAddress"+","+"getApi_ccEmailAddress"+","+"postApi_effectiveStartDate"+","+"getApi_effectiveStartDate"+","+"postApi_effectiveEndDate"+","+"getApi_effectiveEndDate"+","+"postApi_passengerCapacity"+","+"getApi_passengerCapacity"+","+"postApi_policyStartDate"+","+"getApi_policyStartDate"+","+"postApi_policyEndDate"+","+"getApi_policyEndDate"+","+"postApi_currencyCode"+","+"getApi_currencyCode"+","+"postApi_coverLimitAmount"+","+"getApi_coverLimitAmount"+","+"postApi_signatoryStateId"+","+"getApi_signatoryStateId"+","+"postApi_vesselName"+","+"getApi_vesselName"+","+"postApi_vesselType"+","+"getApi_vesselType"+","+"postApi_vesselTypeName"+"getApi_vesselTypeName"+","+"postApi_vesselEnteredDate"+","+"getApi_vesselEnteredDate"+","+"postApi_vesselFlag"+","+"getApi_vesselFlag"+","+"postApi_imoNumber"+","+"getApi_imoNumber"+","+"postApi_distinctiveNumbersOrLetters"+","+"getApi_distinctiveNumbersOrLetters"+","+"postApi_grossTonnage"+","+"getApi_grossTonnage"+","+"postApi_yearBuilt"+","+"getApi_yearBuilt"+","+"postApi_engineHorsePower"+","+"getApi_engineHorsePower"+","+"postApi_trademarkAndEngineModel"+","+"getApi_trademarkAndEngineModel"+","+"postApi_model"+","+"getApi_model"+","+"postApi_engineNo"+","+"getApi_engineNo"+","+"postApi_nominatedFlagState"+","+"getApi_nominatedFlagState"+","+"postApi_nominatedFlagStateName"+","+"getApi_nominatedFlagStateName"+","+"postApi_portOfRegistry"+","+"getApi_portOfRegistry"+","+"postApi_tenderReferenceList"+","+"getApi_tenderReferenceList"+","+"postApi_tenderOutboardReferenceList"+","+"getApi_tenderOutboardReferenceList"+","+"postApi_tradingCertificateTypeId"+","+"getApi_tradingCertificateTypeId"+","+"postApi_tradingCertificateGroupId"+","+"getApi_tradingCertificateGroupId"+","+"postApi_tradingCertificateGroupName"+","+"getApi_tradingCertificateGroupName"+","+"postApi_tradingCertificateGroupCode"+","+"getApi_tradingCertificateGroupCode"+","+"postApi_stateAddressId"+","+"getApi_stateAddressId"+","+"postApi_ownerAddressId"+","+"getApi_ownerAddressId"+","+"postApi_brokerAddressId"+","+"getApi_brokerAddressId"+","+"postApi_memberAddressId"+","+"getApi_memberAddressId"+","+"postApi_jointAssuredAddressId"+","+"getApi_jointAssuredAddressId"+","+"Result")

def response= null
def jsonSlurper=null
def jsonResp=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
	sql_TypeId=row.TypeId
	sql_TypeCode=row.TypeCode
	sql_TypeName=row.TypeName
	sql_GroupId=row.GroupId
	sql_GroupCode=row.GroupCode
	sql_GroupName=row.GroupName
	
	sqlWriter.println(sql_TypeId+","+sql_TypeCode+","+sql_TypeName+","+sql_GroupId+","+sql_GroupCode)
	log.info "SQL Response is : "+sql_TypeId+","+sql_TypeCode+","+sql_TypeName+","+sql_GroupId+","+sql_GroupCode
	
	//Set the Token at test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	//Set the TypeId at test case level
	String TypeId=sql_TypeId
	//Set the GroupId at test case level
	String GroupId=sql_GroupId
	//Set the GroupCode at test case level
	String GroupCode=sql_GroupCode
	//Set the TypeName at test case level
	String TypeName=sql_TypeName
	//Set the GroupName at test case level
	String GroupName=sql_GroupName

	Random a = new Random()
	int rnd =a.next(3)
	log.info rnd
	if(rnd==0)
	{
		rnd=2	
	}
	
	def newRequest = """
	{
	  "id": 1,
	  "addressTypeId": "$rnd",
	  "sourceSystem": "PIOnline",
	  "reference": "123654",
	  "currentStatus": "ISSUED",
	  "storageId": null,
	  "riskId": 130179,
	  "vesselId": 130179,
	  "policyId": 1044648,
	  "memberPartyId": 112673,
	  "ownerPartyId": 0,
	  "brokerPartyId": 1,
	  "isRenewal": true,
	  "isYacht": true,
	  "version": 0,
	  "riskReference": "682637",
	  "vesselReference": "682637",
	  "policyReference": "1044648",
	  "memberReference": "73328",
	  "memberType": "N/K",
	  "memberName": "Test3Member Variation1",
	  "jointAssuredName": "N/K",
	  "ownerReference": "N/K",
	  "ownerName": "N/K",
	  "ownerDomicile": "N/K",
	  "ownerEmailAddress": "N/K",
	  "brokerReference": "104",
	  "brokerName": "POST & CO (P & I)",
	  "brokerEmailAddress": "claims@post-co.com"  ,
	  "policyYear": "2022",
	  "certificateIssueDate": "2021-03-01T11:30:33.510Z",
	  "emailAddress": "string",
	  "ccEmailAddress": "string",
	  "effectiveStartDate": "2021-03-01T11:30:33.510Z",
	  "effectiveEndDate": "2021-03-01T11:30:33.510Z",
	  "passengerCapacity": 0,
	  "policyStartDate": "2021-04-01T12:00:00.000Z",
	  "policyEndDate": "2022-04-01T12:00:00.000Z",
	  "currencyCode": "USD",
	  "coverLimitAmount": 500000000.00,
	  "signatoryStateId": 263,
	  "vesselName": "Test3Policy Risk",
	  "vesselType": "YA",
	  "vesselTypeName": "YACHT CHARTER 13+ PAX",
	  "vesselEnteredDate": "2020-11-08T12:00:00.000Z",
	  "vesselFlag": "ITALY",
	  "imoNumber": "3453466",
	  "distinctiveNumbersOrLetters": "f56",
	  "grossTonnage": "2500",
	  "yearBuilt": 2012,
	  "engineHorsePower": "N/K",
	  "trademarkAndEngineModel": "N/K",
	  "model": "N/K",
	  "engineNo": "N/K",
	  "nominatedFlagState": "ITALY",
	  "nominatedFlagStateName": "CONSAP S.p.a",
	  "portOfRegistry": "TRIESTE",
	  "lastModifiedByUserId": 115,
	  "lastModifiedDate": "2021-02-04T14:07:44.898Z",
	  "tenderReferenceList": "N/K",
	  "tenderOutboardReferenceList": "N/K",
	  "tradingCertificateTypeId": "$TypeId",
	  "tradingCertificateType": 
	  {
		"id": "$TypeId",
		"tradingCertificateGroup": 
		{
			"id": "$GroupId",
			"name": "$TypeName",
			"groupCode": "$GroupCode"
		},
		"typeCode": "$GroupName",
		"typeName": "$TypeName"
	  },
	  "addresses": [
	    {
	      "id": "$rnd",
	      "addressName": "addressName",
	      "addressLine1": "Line1",
	      "addressLine2": "Line2",
	      "addressLine3": "Line3",
	      "stateOrCounty": "MH",
	      "city": "Mumbai",
	      "country": "India",
	      "postCode": "432131",
	      "primaryAddress": true
	    }
	  ],
	  "stateAddress": {
	     "id": "$rnd",
	    "addressName": "CONSAP S.p.a",
	    "addressLine1": "VIA YSER 14",
	    "addressLine2": "N/K",
	    "addressLine3": "N/K",
	    "stateOrCounty": "",
	    "city": "Roma",
	    "country": "ITALY",
	    "postCode": "00198",
	    "primaryAddress": true
	  },
	  "ownerAddress": {
	    "id": "$rnd",
	    "addressName": "string",
	    "addressLine1": "string",
	    "addressLine2": "string",
	    "addressLine3": "string",
	    "stateOrCounty": "string",
	    "city": "string",
	    "country": "string",
	    "postCode": "string",
	    "primaryAddress": true
	  },
	  "brokerAddress": {
	    "id": "$rnd",
	    "addressName": "Blaak 31 11th Floor",
	    "addressLine1": "",
	    "addressLine2": "",
	    "addressLine3": "",
	    "stateOrCounty": "",
	    "city": "Rotterdam",
	    "country": "NETHERLANDS",
	    "postCode": "3011 GA",
	    "primaryAddress": true
	  },
	  "memberAddress": {
	    "id": "$rnd",
	    "addressName": "Test3Member Created AddName",
	    "addressLine1": "Test3Member Created L1",
	    "addressLine2": "Test3Member Created L2",
	    "addressLine3": "",
	    "stateOrCounty": "Alabama",
	    "city": "Birmingham",
	    "country": "UNITED STATES OF AMERICA",
	    "postCode": "54734",
	    "primaryAddress": true
	  },
	  "jointAssuredAddress": {
	    "id": "$rnd",
	    "addressName": "string",
	    "addressLine1": "string",
	    "addressLine2": "string",
	    "addressLine3": "string",
	    "stateOrCounty": "string",
	    "city": "string",
	    "country": "string",
	    "postCode": "string",
	    "primaryAddress": true
	  },
	  "tradingCertificateBanksForValidation": [
	    {
	      "id": 0,
	      "addressName": "string",
	      "addressLine1": "string",
	      "addressLine2": "string",
	      "addressLine3": "string",
	      "stateOrCounty": "string",
	      "city": "string",
	      "country": "string",
	      "postCode": "string",
	      "primaryAddress": true,
	      "bankCapacities": [
	        {
	          "id": 0,
	          "name": "string"
	        }
	      ],
	      "bankPartyId": 0,
	      "tradingCertificateId": 0,
	      "bankName": "string",
	      "startDate": "2021-03-04T07:49:44.584Z",
	      "endDate": "2021-03-04T07:49:44.584Z"
	    }
	  ],
	  "tradingCertificateBanks": [
	    {
	      "id": 0,
	      "addressName": "string",
	      "addressLine1": "string",
	      "addressLine2": "string",
	      "addressLine3": "string",
	      "stateOrCounty": "string",
	      "city": "string",
	      "country": "string",
	      "postCode": "string",
	      "primaryAddress": true,
	      "bankCapacities": [
	        {
	          "id": 0,
	          "name": "string"
	        }
	      ],
	      "bankPartyId": 0,
	      "tradingCertificateId": 0,
	      "bankName": "string",
	      "startDate": "2021-03-04T07:49:44.584Z",
	      "endDate": "2021-03-04T07:49:44.584Z"
	    }
	  ]
	}
	"""   
	
	//Run the test step to get response
	testRunner.testCase.testSteps["POST_TradingCertSave"].setPropertyValue( "Request", newRequest)
	testRunner.runTestStepByName('POST_TradingCertSave')
	String req='${POST_TradingCertSave#Response}'
	response=context.expand(req)
	//log.info "API Response for POST Method received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)
	
	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["POST_TradingCertSave"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		if (!jsonRes.HasError)
		{
			postApi_id = jsonRes.id
			postApi_addressTypeId = jsonRes.addressTypeId
			postApi_sourceSystem = jsonRes.sourceSystem
			postApi_reference = jsonRes.reference
			postApi_currentStatus = jsonRes.currentStatus
			postApi_storageId = jsonRes.storageId
			postApi_riskId = jsonRes.riskId
			postApi_policyId = jsonRes.policyId
			postApi_memberPartyId = jsonRes.memberPartyId
			postApi_ownerPartyId = jsonRes.ownerPartyId
			postApi_brokerPartyId = jsonRes.brokerPartyId
			postApi_isRenewal = jsonRes.isRenewal
			postApi_isYacht = jsonRes.isYacht
			postApi_version = jsonRes.version
			postApi_riskReference = jsonRes.riskReference
			postApi_policyReference = jsonRes.policyReference
			postApi_memberReference = jsonRes.memberReference
			postApi_memberType = jsonRes.memberType
			postApi_memberName = jsonRes.memberName
			postApi_jointAssuredName = jsonRes.jointAssuredName
			postApi_ownerReference = jsonRes.ownerReference
			postApi_ownerName = jsonRes.ownerName
			postApi_ownerDomicile = jsonRes.ownerDomicile
			postApi_ownerEmailAddress = jsonRes.ownerEmailAddress
			postApi_brokerReference = jsonRes.brokerReference
			postApi_brokerName = jsonRes.brokerName
			postApi_brokerEmailAddress = jsonRes.brokerEmailAddress
			postApi_policyYear = jsonRes.policyYear
			postApi_certificateIssueDate = jsonRes.certificateIssueDate
			postApi_emailAddress = jsonRes.emailAddress
			postApi_ccEmailAddress = jsonRes.ccEmailAddress
			postApi_effectiveStartDate = jsonRes.effectiveStartDate
			postApi_effectiveEndDate = jsonRes.effectiveEndDate
			postApi_passengerCapacity = jsonRes.passengerCapacity
			postApi_policyStartDate = jsonRes.policyStartDate
			postApi_policyEndDate = jsonRes.policyEndDate
			postApi_currencyCode = jsonRes.currencyCode
			postApi_coverLimitAmount = jsonRes.coverLimitAmount
			postApi_signatoryStateId = jsonRes.signatoryStateId
			postApi_vesselName = jsonRes.vesselName
			postApi_vesselType = jsonRes.vesselType
			postApi_vesselTypeName = jsonRes.vesselTypeName
			postApi_vesselEnteredDate = jsonRes.vesselEnteredDate
			postApi_vesselFlag = jsonRes.vesselFlag
			postApi_imoNumber = jsonRes.imoNumber
			postApi_distinctiveNumbersOrLetters = jsonRes.distinctiveNumbersOrLetters
			postApi_grossTonnage = jsonRes.grossTonnage
			postApi_yearBuilt = jsonRes.yearBuilt
			postApi_engineHorsePower = jsonRes.engineHorsePower
			postApi_trademarkAndEngineModel = jsonRes.trademarkAndEngineModel
			postApi_model = jsonRes.model
			postApi_engineNo = jsonRes.engineNo
			postApi_nominatedFlagState = jsonRes.nominatedFlagState
			postApi_nominatedFlagStateName = jsonRes.nominatedFlagStateName
			postApi_portOfRegistry = jsonRes.portOfRegistry
			postApi_tenderReferenceList = jsonRes.tenderReferenceList
			postApi_tenderOutboardReferenceList = jsonRes.tenderOutboardReferenceList

			postApi_tradingCertificateTypeId = jsonRes.tradingCertificateType.id
			postApi_tradingCertificateGroupId=jsonRes.tradingCertificateType.tradingCertificateGroup.id
			postApi_tradingCertificateGroupName=jsonRes.tradingCertificateType.tradingCertificateGroup.name
			postApi_tradingCertificateGroupCode=jsonRes.tradingCertificateType.tradingCertificateGroup.groupCode
			postApi_stateAddressId=jsonRes.stateAddress.id
			postApi_ownerAddressId=jsonRes.ownerAddress.id
			postApi_brokerAddressId=jsonRes.brokerAddress.id
			postApi_memberAddressId=jsonRes.memberAddress.id
			postApi_jointAssuredAddressId=jsonRes.jointAssuredAddress.id

			
			postApiWriter.println(postApi_id+","+postApi_addressTypeId+","+postApi_sourceSystem+","+postApi_reference+","+postApi_currentStatus+","+postApi_storageId+","+postApi_riskId+","+postApi_policyId+","+postApi_memberPartyId+","+postApi_ownerPartyId+","+postApi_brokerPartyId+","+postApi_isRenewal+","+postApi_isYacht+","+postApi_version+","+postApi_riskReference+","+postApi_policyReference+","+postApi_memberReference+","+postApi_memberType+","+postApi_memberName+","+postApi_jointAssuredName+","+postApi_ownerReference+","+postApi_ownerName+","+postApi_ownerDomicile+","+postApi_ownerEmailAddress+","+postApi_brokerReference+","+postApi_brokerName+","+postApi_brokerEmailAddress+","+postApi_policyYear+","+postApi_certificateIssueDate+","+postApi_emailAddress+","+postApi_ccEmailAddress+","+postApi_effectiveStartDate+","+postApi_effectiveEndDate+","+postApi_passengerCapacity+","+postApi_policyStartDate+","+postApi_policyEndDate+","+postApi_currencyCode+","+postApi_coverLimitAmount+","+postApi_signatoryStateId+","+postApi_vesselName+","+postApi_vesselType+","+postApi_vesselTypeName+","+postApi_vesselEnteredDate+","+postApi_vesselFlag+","+postApi_imoNumber+","+postApi_distinctiveNumbersOrLetters+","+postApi_grossTonnage+","+postApi_yearBuilt+","+postApi_engineHorsePower+","+postApi_trademarkAndEngineModel+","+postApi_model+","+postApi_engineNo+","+postApi_nominatedFlagState+","+postApi_nominatedFlagStateName+","+postApi_portOfRegistry+","+postApi_tenderReferenceList+","+postApi_tenderOutboardReferenceList+","+postApi_tradingCertificateTypeId+","+postApi_tradingCertificateGroupId+","+postApi_tradingCertificateGroupName+","+postApi_tradingCertificateGroupCode+","+postApi_stateAddressId+","+postApi_ownerAddressId+","+postApi_brokerAddressId+","+postApi_memberAddressId+","+postApi_jointAssuredAddressId)
			
			
			log.info "API Response received for POST method as : "+postApi_id+","+postApi_addressTypeId+","+postApi_sourceSystem+","+postApi_reference+","+postApi_currentStatus+","+postApi_storageId+","+postApi_riskId+","+postApi_policyId+","+postApi_memberPartyId+","+postApi_ownerPartyId+","+postApi_brokerPartyId+","+postApi_isRenewal+","+postApi_isYacht+","+postApi_version+","+postApi_riskReference+","+postApi_policyReference+","+postApi_memberReference+","+postApi_memberType+","+postApi_memberName+","+postApi_jointAssuredName+","+postApi_ownerReference+","+postApi_ownerName+","+postApi_ownerDomicile+","+postApi_ownerEmailAddress+","+postApi_brokerReference+","+postApi_brokerName+","+postApi_brokerEmailAddress+","+postApi_policyYear+","+postApi_certificateIssueDate+","+postApi_emailAddress+","+postApi_ccEmailAddress+","+postApi_effectiveStartDate+","+postApi_effectiveEndDate+","+postApi_passengerCapacity+","+postApi_policyStartDate+","+postApi_policyEndDate+","+postApi_currencyCode+","+postApi_coverLimitAmount+","+postApi_signatoryStateId+","+postApi_vesselName+","+postApi_vesselType+","+postApi_vesselTypeName+","+postApi_vesselEnteredDate+","+postApi_vesselFlag+","+postApi_imoNumber+","+postApi_distinctiveNumbersOrLetters+","+postApi_grossTonnage+","+postApi_yearBuilt+","+postApi_engineHorsePower+","+postApi_trademarkAndEngineModel+","+postApi_model+","+postApi_engineNo+","+postApi_nominatedFlagState+","+postApi_nominatedFlagStateName+","+postApi_portOfRegistry+","+postApi_tenderReferenceList+","+postApi_tenderOutboardReferenceList+","+postApi_tradingCertificateTypeId+","+postApi_tradingCertificateGroupId+","+postApi_tradingCertificateGroupName+","+postApi_tradingCertificateGroupCode+","+postApi_stateAddressId+","+postApi_ownerAddressId+","+postApi_brokerAddressId+","+postApi_memberAddressId+","+postApi_jointAssuredAddressId


			String certId=postApi_id
			testRunner.testCase.setPropertyValue( "certId", certId)
			
			//Run the test step to get response
			testRunner.runTestStepByName('GET_TradingCertificateByCertificateId')
			String req1='${GET_TradingCertificateByCertificateId#Response}'
			response=context.expand(req1)
			//log.info "API Response for GET method after post received is :"+response
			jsonSlurper=new JsonSlurper() 
			jsonRes=jsonSlurper.parseText(response)

			//Check the Status code of API response
			groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
			httpResponseHeaders = context.testCase.testSteps["GET_TradingCertificateByCertificateId"].testRequest.response.responseHeaders
			httpStatus = httpResponseHeaders["#status#"]
			httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
			//log.info("HTTP status code: " + httpStatusCode)
		
			error = response
			if(httpStatusCode.equals("200"))
			{
				getApi_id = jsonRes.id
				getApi_addressTypeId = jsonRes.addressTypeId
				getApi_sourceSystem = jsonRes.sourceSystem
				getApi_reference = jsonRes.reference
				getApi_currentStatus = jsonRes.currentStatus
				getApi_storageId = jsonRes.storageId
				getApi_riskId = jsonRes.riskId
				getApi_policyId = jsonRes.policyId
				getApi_memberPartyId = jsonRes.memberPartyId
				getApi_ownerPartyId = jsonRes.ownerPartyId
				getApi_brokerPartyId = jsonRes.brokerPartyId
				getApi_isRenewal = jsonRes.isRenewal
				getApi_isYacht = jsonRes.isYacht
				getApi_version = jsonRes.version
				getApi_riskReference = jsonRes.riskReference
				getApi_policyReference = jsonRes.policyReference
				getApi_memberReference = jsonRes.memberReference
				getApi_memberType = jsonRes.memberType
				getApi_memberName = jsonRes.memberName
				getApi_jointAssuredName = jsonRes.jointAssuredName
				getApi_ownerReference = jsonRes.ownerReference
				getApi_ownerName = jsonRes.ownerName
				getApi_ownerDomicile = jsonRes.ownerDomicile
				getApi_ownerEmailAddress = jsonRes.ownerEmailAddress
				getApi_brokerReference = jsonRes.brokerReference
				getApi_brokerName = jsonRes.brokerName
				getApi_brokerEmailAddress = jsonRes.brokerEmailAddress
				getApi_policyYear = jsonRes.policyYear
				getApi_certificateIssueDate = jsonRes.certificateIssueDate
				getApi_emailAddress = jsonRes.emailAddress
				getApi_ccEmailAddress = jsonRes.ccEmailAddress
				getApi_effectiveStartDate = jsonRes.effectiveStartDate
				getApi_effectiveEndDate = jsonRes.effectiveEndDate
				getApi_passengerCapacity = jsonRes.passengerCapacity
				getApi_policyStartDate = jsonRes.policyStartDate
				getApi_policyEndDate = jsonRes.policyEndDate
				getApi_currencyCode = jsonRes.currencyCode
				getApi_coverLimitAmount = jsonRes.coverLimitAmount
				getApi_signatoryStateId = jsonRes.signatoryStateId
				getApi_vesselName = jsonRes.vesselName
				getApi_vesselType = jsonRes.vesselType
				getApi_vesselTypeName = jsonRes.vesselTypeName
				getApi_vesselEnteredDate = jsonRes.vesselEnteredDate
				getApi_vesselFlag = jsonRes.vesselFlag
				getApi_imoNumber = jsonRes.imoNumber
				getApi_distinctiveNumbersOrLetters = jsonRes.distinctiveNumbersOrLetters
				getApi_grossTonnage = jsonRes.grossTonnage
				getApi_yearBuilt = jsonRes.yearBuilt
				getApi_engineHorsePower = jsonRes.engineHorsePower
				getApi_trademarkAndEngineModel = jsonRes.trademarkAndEngineModel
				getApi_model = jsonRes.model
				getApi_engineNo = jsonRes.engineNo
				getApi_nominatedFlagState = jsonRes.nominatedFlagState
				getApi_nominatedFlagStateName = jsonRes.nominatedFlagStateName
				getApi_portOfRegistry = jsonRes.portOfRegistry
				getApi_tenderReferenceList = jsonRes.tenderReferenceList
				getApi_tenderOutboardReferenceList = jsonRes.tenderOutboardReferenceList
	
				getApi_tradingCertificateTypeId = jsonRes.tradingCertificateType.id
				getApi_tradingCertificateGroupId=jsonRes.tradingCertificateType.tradingCertificateGroup.id
				getApi_tradingCertificateGroupName=jsonRes.tradingCertificateType.tradingCertificateGroup.name
				getApi_tradingCertificateGroupCode=jsonRes.tradingCertificateType.tradingCertificateGroup.groupCode
				getApi_stateAddressId=jsonRes.stateAddress.id
				getApi_ownerAddressId=jsonRes.ownerAddress.id
				getApi_brokerAddressId=jsonRes.brokerAddress.id
				getApi_memberAddressId=jsonRes.memberAddress.id
				getApi_jointAssuredAddressId=jsonRes.jointAssuredAddress.id
			
				
				getApiWriter.println(getApi_id+","+getApi_addressTypeId+","+getApi_sourceSystem+","+getApi_reference+","+getApi_currentStatus+","+getApi_storageId+","+getApi_riskId+","+getApi_policyId+","+getApi_memberPartyId+","+getApi_ownerPartyId+","+getApi_brokerPartyId+","+getApi_isRenewal+","+getApi_isYacht+","+getApi_version+","+getApi_riskReference+","+getApi_policyReference+","+getApi_memberReference+","+getApi_memberType+","+getApi_memberName+","+getApi_jointAssuredName+","+getApi_ownerReference+","+getApi_ownerName+","+getApi_ownerDomicile+","+getApi_ownerEmailAddress+","+getApi_brokerReference+","+getApi_brokerName+","+getApi_brokerEmailAddress+","+getApi_policyYear+","+getApi_certificateIssueDate+","+getApi_emailAddress+","+getApi_ccEmailAddress+","+getApi_effectiveStartDate+","+getApi_effectiveEndDate+","+getApi_passengerCapacity+","+getApi_policyStartDate+","+getApi_policyEndDate+","+getApi_currencyCode+","+getApi_coverLimitAmount+","+getApi_signatoryStateId+","+getApi_vesselName+","+getApi_vesselType+","+getApi_vesselTypeName+","+getApi_vesselEnteredDate+","+getApi_vesselFlag+","+getApi_imoNumber+","+getApi_distinctiveNumbersOrLetters+","+getApi_grossTonnage+","+getApi_yearBuilt+","+getApi_engineHorsePower+","+getApi_trademarkAndEngineModel+","+getApi_model+","+getApi_engineNo+","+getApi_nominatedFlagState+","+getApi_nominatedFlagStateName+","+getApi_portOfRegistry+","+getApi_tenderReferenceList+","+getApi_tenderOutboardReferenceList+","+getApi_tradingCertificateTypeId+","+getApi_tradingCertificateGroupId+","+getApi_tradingCertificateGroupName+","+getApi_tradingCertificateGroupCode+","+getApi_stateAddressId+","+getApi_ownerAddressId+","+getApi_brokerAddressId+","+getApi_memberAddressId+","+getApi_jointAssuredAddressId)

								
				log.info "API Response for GET method :" +getApi_id+","+getApi_addressTypeId+","+getApi_sourceSystem+","+getApi_reference+","+getApi_currentStatus+","+getApi_storageId+","+getApi_riskId+","+getApi_policyId+","+getApi_memberPartyId+","+getApi_ownerPartyId+","+getApi_brokerPartyId+","+getApi_isRenewal+","+getApi_isYacht+","+getApi_version+","+getApi_riskReference+","+getApi_policyReference+","+getApi_memberReference+","+getApi_memberType+","+getApi_memberName+","+getApi_jointAssuredName+","+getApi_ownerReference+","+getApi_ownerName+","+getApi_ownerDomicile+","+getApi_ownerEmailAddress+","+getApi_brokerReference+","+getApi_brokerName+","+getApi_brokerEmailAddress+","+getApi_policyYear+","+getApi_certificateIssueDate+","+getApi_emailAddress+","+getApi_ccEmailAddress+","+getApi_effectiveStartDate+","+getApi_effectiveEndDate+","+getApi_passengerCapacity+","+getApi_policyStartDate+","+getApi_policyEndDate+","+getApi_currencyCode+","+getApi_coverLimitAmount+","+getApi_signatoryStateId+","+getApi_vesselName+","+getApi_vesselType+","+getApi_vesselTypeName+","+getApi_vesselEnteredDate+","+getApi_vesselFlag+","+getApi_imoNumber+","+getApi_distinctiveNumbersOrLetters+","+getApi_grossTonnage+","+getApi_yearBuilt+","+getApi_engineHorsePower+","+getApi_trademarkAndEngineModel+","+getApi_model+","+getApi_engineNo+","+getApi_nominatedFlagState+","+getApi_nominatedFlagStateName+","+getApi_portOfRegistry+","+getApi_tenderReferenceList+","+getApi_tenderOutboardReferenceList+","+getApi_tradingCertificateTypeId+","+getApi_tradingCertificateGroupId+","+getApi_tradingCertificateGroupName+","+getApi_tradingCertificateGroupCode+","+getApi_stateAddressId+","+getApi_ownerAddressId+","+getApi_brokerAddressId+","+getApi_memberAddressId+","+getApi_jointAssuredAddressId
			
				if(postApi_id.toString().equals(getApi_id.toString()) && postApi_addressTypeId.toString().equals(getApi_addressTypeId.toString()) && postApi_sourceSystem.toString().equals(getApi_sourceSystem.toString()) && postApi_reference.toString().equals(getApi_reference.toString()) && postApi_currentStatus.toString().equals(getApi_currentStatus.toString()) && postApi_storageId.toString().equals(getApi_storageId.toString()) && postApi_riskId.toString().equals(getApi_riskId.toString()) && postApi_policyId.toString().equals(getApi_policyId.toString()) && postApi_memberPartyId.toString().equals(getApi_memberPartyId.toString()) && postApi_ownerPartyId.toString().equals(getApi_ownerPartyId.toString()) && postApi_brokerPartyId.toString().equals(getApi_brokerPartyId.toString()) && postApi_isRenewal.toString().equals(getApi_isRenewal.toString()) && postApi_isYacht.toString().equals(getApi_isYacht.toString()) && postApi_version.toString().equals(getApi_version.toString()) && postApi_riskReference.toString().equals(getApi_riskReference.toString()) && postApi_policyReference.toString().equals(getApi_policyReference.toString()) && postApi_memberReference.toString().equals(getApi_memberReference.toString()) && postApi_memberType.toString().equals(getApi_memberType.toString()) && postApi_memberName.toString().equals(getApi_memberName.toString()) && postApi_jointAssuredName.toString().equals(getApi_jointAssuredName.toString()) && postApi_ownerReference.toString().equals(getApi_ownerReference.toString()) && postApi_ownerName.toString().equals(getApi_ownerName.toString()) && postApi_ownerDomicile.toString().equals(getApi_ownerDomicile.toString()) && postApi_ownerEmailAddress.toString().equals(getApi_ownerEmailAddress.toString()) && postApi_brokerReference.toString().equals(getApi_brokerReference.toString()) && postApi_brokerName.toString().equals(getApi_brokerName.toString()) && postApi_brokerEmailAddress.toString().equals(getApi_brokerEmailAddress.toString()) && postApi_policyYear.toString().equals(getApi_policyYear.toString()) && postApi_certificateIssueDate.toString().equals(getApi_certificateIssueDate.toString()) && postApi_emailAddress.toString().equals(getApi_emailAddress.toString()) && postApi_ccEmailAddress.toString().equals(getApi_ccEmailAddress.toString()) && postApi_effectiveStartDate.toString().equals(getApi_effectiveStartDate.toString()) && postApi_effectiveEndDate.toString().equals(getApi_effectiveEndDate.toString()) && postApi_passengerCapacity.toString().equals(getApi_passengerCapacity.toString()) && postApi_policyStartDate.toString().equals(getApi_policyStartDate.toString()) && postApi_policyEndDate.toString().equals(getApi_policyEndDate.toString()) && postApi_currencyCode.toString().equals(getApi_currencyCode.toString()) && postApi_coverLimitAmount.toString().equals(getApi_coverLimitAmount.toString()) && postApi_signatoryStateId.toString().equals(getApi_signatoryStateId.toString()) && postApi_vesselName.toString().equals(getApi_vesselName.toString()) && postApi_vesselType.toString().equals(getApi_vesselType.toString()) && postApi_vesselTypeName.toString().equals(getApi_vesselTypeName.toString()) && postApi_vesselEnteredDate.toString().equals(getApi_vesselEnteredDate.toString()) && postApi_vesselFlag.toString().equals(getApi_vesselFlag.toString()) && postApi_imoNumber.toString().equals(getApi_imoNumber.toString()) && postApi_distinctiveNumbersOrLetters.toString().equals(getApi_distinctiveNumbersOrLetters.toString()) && postApi_grossTonnage.toString().equals(getApi_grossTonnage.toString()) && postApi_yearBuilt.toString().equals(getApi_yearBuilt.toString()) && postApi_engineHorsePower.toString().equals(getApi_engineHorsePower.toString()) && postApi_trademarkAndEngineModel.toString().equals(getApi_trademarkAndEngineModel.toString()) && postApi_model.toString().equals(getApi_model.toString()) && postApi_engineNo.toString().equals(getApi_engineNo.toString()) && postApi_nominatedFlagState.toString().equals(getApi_nominatedFlagState.toString()) && postApi_nominatedFlagStateName.toString().equals(getApi_nominatedFlagStateName.toString()) && postApi_portOfRegistry.toString().equals(getApi_portOfRegistry.toString()) && postApi_tenderReferenceList.toString().equals(getApi_tenderReferenceList.toString()) && postApi_tenderOutboardReferenceList.toString().equals(getApi_tenderOutboardReferenceList.toString()) && postApi_tradingCertificateTypeId.toString().equals(getApi_tradingCertificateTypeId.toString()) && postApi_tradingCertificateGroupId.toString().equals(getApi_tradingCertificateGroupId.toString()) && postApi_tradingCertificateGroupName.toString().equals(getApi_tradingCertificateGroupName.toString()) && postApi_tradingCertificateGroupCode.toString().equals(getApi_tradingCertificateGroupCode.toString()) && postApi_stateAddressId.toString().equals(getApi_stateAddressId.toString()) && postApi_ownerAddressId.toString().equals(getApi_ownerAddressId.toString()) && postApi_brokerAddressId.toString().equals(getApi_brokerAddressId.toString()) && postApi_memberAddressId.toString().equals(getApi_memberAddressId.toString()) && postApi_jointAssuredAddressId.toString().equals(getApi_jointAssuredAddressId.toString()) )
				{
					compareWriter.println(postApi_id+","+getApi_id+","+postApi_addressTypeId+","+getApi_addressTypeId+","+postApi_sourceSystem+","+getApi_sourceSystem+","+postApi_reference+","+getApi_reference+","+postApi_currentStatus+","+getApi_currentStatus+","+postApi_storageId+","+getApi_storageId+","+postApi_riskId+","+getApi_riskId+","+postApi_policyId+","+getApi_policyId+","+postApi_memberPartyId+","+getApi_memberPartyId+","+postApi_ownerPartyId+","+getApi_ownerPartyId+","+postApi_brokerPartyId+","+getApi_brokerPartyId+","+postApi_isRenewal+","+getApi_isRenewal+","+postApi_isYacht+","+getApi_isYacht+","+postApi_version+","+getApi_version+","+postApi_riskReference+","+getApi_riskReference+","+postApi_policyReference+","+getApi_policyReference+","+postApi_memberReference+","+getApi_memberReference+","+postApi_memberType+","+getApi_memberType+","+postApi_memberName+","+getApi_memberName+","+postApi_jointAssuredName+","+getApi_jointAssuredName+","+postApi_ownerReference+","+getApi_ownerReference+","+postApi_ownerName+","+getApi_ownerName+","+postApi_ownerDomicile+","+getApi_ownerDomicile+","+postApi_ownerEmailAddress+","+getApi_ownerEmailAddress+","+postApi_brokerReference+","+getApi_brokerReference+","+postApi_brokerName+","+getApi_brokerName+","+postApi_brokerEmailAddress+","+getApi_brokerEmailAddress+","+postApi_policyYear+","+getApi_policyYear+","+postApi_certificateIssueDate+","+getApi_certificateIssueDate+","+postApi_emailAddress+","+getApi_emailAddress+","+postApi_ccEmailAddress+","+getApi_ccEmailAddress+","+postApi_effectiveStartDate+","+getApi_effectiveStartDate+","+postApi_effectiveEndDate+","+getApi_effectiveEndDate+","+postApi_passengerCapacity+","+getApi_passengerCapacity+","+postApi_policyStartDate+","+getApi_policyStartDate+","+postApi_policyEndDate+","+getApi_policyEndDate+","+postApi_currencyCode+","+getApi_currencyCode+","+postApi_coverLimitAmount+","+getApi_coverLimitAmount+","+postApi_signatoryStateId+","+getApi_signatoryStateId+","+postApi_vesselName+","+getApi_vesselName+","+postApi_vesselType+","+getApi_vesselType+","+postApi_vesselTypeName+","+getApi_vesselTypeName+","+postApi_vesselEnteredDate+","+getApi_vesselEnteredDate+","+postApi_vesselFlag+","+getApi_vesselFlag+","+postApi_imoNumber+","+getApi_imoNumber+","+postApi_distinctiveNumbersOrLetters+","+getApi_distinctiveNumbersOrLetters+","+postApi_grossTonnage+","+getApi_grossTonnage+","+postApi_yearBuilt+","+getApi_yearBuilt+","+postApi_engineHorsePower+","+getApi_engineHorsePower+","+postApi_trademarkAndEngineModel+","+getApi_trademarkAndEngineModel+","+postApi_model+","+getApi_model+","+postApi_engineNo+","+getApi_engineNo+","+postApi_nominatedFlagState+","+getApi_nominatedFlagState+","+postApi_nominatedFlagStateName+","+getApi_nominatedFlagStateName+","+postApi_portOfRegistry+","+getApi_portOfRegistry+","+postApi_tenderReferenceList+","+getApi_tenderReferenceList+","+postApi_tenderOutboardReferenceList+","+getApi_tenderOutboardReferenceList+","+postApi_tradingCertificateTypeId+","+getApi_tradingCertificateTypeId+","+postApi_tradingCertificateGroupId+","+getApi_tradingCertificateGroupId+","+postApi_tradingCertificateGroupName+","+getApi_tradingCertificateGroupName+","+postApi_tradingCertificateGroupCode+","+getApi_tradingCertificateGroupCode+","+postApi_stateAddressId+","+getApi_stateAddressId+","+postApi_ownerAddressId+","+getApi_ownerAddressId+","+postApi_brokerAddressId+","+getApi_brokerAddressId+","+postApi_memberAddressId+","+getApi_memberAddressId+","+postApi_jointAssuredAddressId+","+getApi_jointAssuredAddressId+","+"Test Case Passed")
					log.info "Details are matching, hence test case is passed"
				}
				else
				{
					compareWriter.println(postApi_id+","+getApi_id+","+postApi_addressTypeId+","+getApi_addressTypeId+","+postApi_sourceSystem+","+getApi_sourceSystem+","+postApi_reference+","+getApi_reference+","+postApi_currentStatus+","+getApi_currentStatus+","+postApi_storageId+","+getApi_storageId+","+postApi_riskId+","+getApi_riskId+","+postApi_policyId+","+getApi_policyId+","+postApi_memberPartyId+","+getApi_memberPartyId+","+postApi_ownerPartyId+","+getApi_ownerPartyId+","+postApi_brokerPartyId+","+getApi_brokerPartyId+","+postApi_isRenewal+","+getApi_isRenewal+","+postApi_isYacht+","+getApi_isYacht+","+postApi_version+","+getApi_version+","+postApi_riskReference+","+getApi_riskReference+","+postApi_policyReference+","+getApi_policyReference+","+postApi_memberReference+","+getApi_memberReference+","+postApi_memberType+","+getApi_memberType+","+postApi_memberName+","+getApi_memberName+","+postApi_jointAssuredName+","+getApi_jointAssuredName+","+postApi_ownerReference+","+getApi_ownerReference+","+postApi_ownerName+","+getApi_ownerName+","+postApi_ownerDomicile+","+getApi_ownerDomicile+","+postApi_ownerEmailAddress+","+getApi_ownerEmailAddress+","+postApi_brokerReference+","+getApi_brokerReference+","+postApi_brokerName+","+getApi_brokerName+","+postApi_brokerEmailAddress+","+getApi_brokerEmailAddress+","+postApi_policyYear+","+getApi_policyYear+","+postApi_certificateIssueDate+","+getApi_certificateIssueDate+","+postApi_emailAddress+","+getApi_emailAddress+","+postApi_ccEmailAddress+","+getApi_ccEmailAddress+","+postApi_effectiveStartDate+","+getApi_effectiveStartDate+","+postApi_effectiveEndDate+","+getApi_effectiveEndDate+","+postApi_passengerCapacity+","+getApi_passengerCapacity+","+postApi_policyStartDate+","+getApi_policyStartDate+","+postApi_policyEndDate+","+getApi_policyEndDate+","+postApi_currencyCode+","+getApi_currencyCode+","+postApi_coverLimitAmount+","+getApi_coverLimitAmount+","+postApi_signatoryStateId+","+getApi_signatoryStateId+","+postApi_vesselName+","+getApi_vesselName+","+postApi_vesselType+","+getApi_vesselType+","+postApi_vesselTypeName+","+getApi_vesselTypeName+","+postApi_vesselEnteredDate+","+getApi_vesselEnteredDate+","+postApi_vesselFlag+","+getApi_vesselFlag+","+postApi_imoNumber+","+getApi_imoNumber+","+postApi_distinctiveNumbersOrLetters+","+getApi_distinctiveNumbersOrLetters+","+postApi_grossTonnage+","+getApi_grossTonnage+","+postApi_yearBuilt+","+getApi_yearBuilt+","+postApi_engineHorsePower+","+getApi_engineHorsePower+","+postApi_trademarkAndEngineModel+","+getApi_trademarkAndEngineModel+","+postApi_model+","+getApi_model+","+postApi_engineNo+","+getApi_engineNo+","+postApi_nominatedFlagState+","+getApi_nominatedFlagState+","+postApi_nominatedFlagStateName+","+getApi_nominatedFlagStateName+","+postApi_portOfRegistry+","+getApi_portOfRegistry+","+postApi_tenderReferenceList+","+getApi_tenderReferenceList+","+postApi_tenderOutboardReferenceList+","+getApi_tenderOutboardReferenceList+","+postApi_tradingCertificateTypeId+","+getApi_tradingCertificateTypeId+","+postApi_tradingCertificateGroupId+","+getApi_tradingCertificateGroupId+","+postApi_tradingCertificateGroupName+","+getApi_tradingCertificateGroupName+","+postApi_tradingCertificateGroupCode+","+getApi_tradingCertificateGroupCode+","+postApi_stateAddressId+","+getApi_stateAddressId+","+postApi_ownerAddressId+","+getApi_ownerAddressId+","+postApi_brokerAddressId+","+getApi_brokerAddressId+","+postApi_memberAddressId+","+getApi_memberAddressId+","+postApi_jointAssuredAddressId+","+getApi_jointAssuredAddressId+","+"Test Case Failed")
					log.info "Details are not matching, hence test case is failed"
				}
			}
		}	
	}
	else
	{
		log.info "Failed API response received as : "+response
	}		
	counter=counter+1
	log.info "Number of records verified are : "+counter
}

sqlWriter.flush()
postApiWriter.flush()
getApiWriter.flush()
compareWriter.flush()

sqlWriter.close()
postApiWriter.close()
getApiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for Post method of Trading Certificate Save************"	]]></script></con:config></con:testStep><con:testStep type="restrequest" name="GET_TradingCertificateByCertificateId" id="13392493-0466-4fb9-bd90-d07216ae9ec6"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#tradingCertificateId}" methodName="GET_TradingCertificateByCertificateId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GET_TradingCertificateByCertificateId" id="325ac480-28f6-4df9-9f1c-06b0aacf1498" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/394</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>certId</con:name><con:value>273057</con:value></con:property></con:properties></con:testCase><con:testCase id="d61ff549-bae2-41b4-82b2-d4d3feda924f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_TradingCertificateByTradingCertificateId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="TradCertByTradCertId" id="70ae6f6e-7dab-444e-9f77-e84ab84a4fe6"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#tradingCertificateId}" methodName="GET_TradingCertificateByCertificateId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TradCertByTradCertId" id="325ac480-28f6-4df9-9f1c-06b0aacf1498" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/tradingcertificates/89</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="TradingCertificateByTradingCertificateId" id="3a1f5bb8-bb92-4fbd-8ef9-9656eeb0d20e" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for GET method of  Trading Certificate By Trading Certificate Id************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

String sqlstmt="""
		USE tradingcertificate
		Select 
		top 500
		TC.Id, TC.AddressType_Id, TC.SourceSystem, TC.Reference, TC.CurrentStatus, TC.StorageId, TC.IsYacht, case when TC.IsYacht=0 then 'False' when TC.IsYacht=1 then 'True' else null end as IsYachtFlag,
		TC.RiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId,
		TC.isRenewal, case when TC.isRenewal = 1 then 'True' when TC.isRenewal = 0  then 'False' else NULL end as IsRenewalFlag, TC.TradingCertificateVersion as version,
		TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName, TC.JointAssuredName, TC.OwnerReference,
		TC.OwnerName,TC.OwnerDomicile,TC.OwnerEmailAddress,TC.BrokerReference,TC.BrokerName,TC.BrokerEmailAddress,TC.PolicyYear,TC.CertificateIssueDate,
		TC.EmailAddress,TC.CCEmailAddress,TC.EffectiveStartDate,TC.EffectiveEndDate,TC.PassengerCapacity,TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,
		TC.CoverLimitAmount,TC.SignatoryState_Id,TC.VesselName,TC.VesselType,TC.VesselTypeName,TC.VesselEnteredDate,TC.VesselFlag,TC.ImoNumber,TC.DistinctiveNumbersOrLetters,
		TC.GrossTonnage,TC.YearBuilt,TC.EngineHorsePower,TC.TradeMark,TC.Model,TC.EngineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.PortOfRegistry,
		TC.TenderReferenceList,TC.TenderOutboardReferenceList,TC.Type_Id as TradingCertificateTypeId,RT.Id as TradingCertificateTypeId, RT.Group_Id as GroupId, 
		RG.Name as TradingCertificateGroupName,RG.GroupCode as TradingCertificateGroupCode, RT.TypeCode as TradingCertificateTypeCode, RT.Name as TradingCertificateTypeName,
		ADRS.Id as AddressId, ADRS.AddressName, ADRS.AddressLine1, ADRS.AddressLine2, ADRS.AddressLine3, ADRS.StateOrCounty, ADRS.City, ADRS.Country, ADRS.PostCode, ADRS.PrimaryAddress,
		case when ADRS.PrimaryAddress=1 then 'true' when ADRS.PrimaryAddress=0 then 'false' else NULL end as PrimaryAddressFlag
		from TradingCertificate TC
		inner join ref_Type RT on RT.Id=TC.Type_Id
		inner join ref_Group RG on RG.Id=RT.Group_Id
		left join AddressSnapshot ADRS on ADRS.TradingCertificate_Id=TC.Id
	"""		
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_GETmethodofTradingCertificateByTradingCertificateID.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_GETmethodofTradingCertificateByTradingCertificateID.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GETmethodofTradingCertificateByTradingCertificateID.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_GETmethodofTradingCertificateByTradingCertificateID"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_GETmethodofTradingCertificateByTradingCertificateID"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GETmethodofTradingCertificateByTradingCertificateID"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_Id"+","+"SQL_AddressType_Id"+","+"SQL_SourceSystem"+","+"SQL_Reference"+","+"SQL_CurrentStatus"+","+"SQL_StorageId"+","+"SQL_IsYacht"+","+"SQL_IsYachtFlag"+","+"SQL_RiskId"+","+"SQL_PolicyId"+","+"SQL_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"SQL_isRenewal"+","+"SQL_IsRenewalFlag"+","+"SQL_version"+","+"SQL_RiskReference"+","+"SQL_PolicyReference"+","+"SQL_MemberReference"+","+"SQL_MemberType"+","+"SQL_MemberName"+","+"SQL_JointAssuredName"+","+"SQL_OwnerReference"+","+"SQL_OwnerName"+","+"SQL_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"SQL_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"SQL_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"SQL_CCEmailAddress"+","+"SQL_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"SQL_VesselName"+","+"SQL_VesselType"+","+"SQL_VesselTypeName"+","+"SQL_VesselEnteredDate"+","+"SQL_VesselFlag"+","+"SQL_ImoNumber"+","+"SQL_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"SQL_YearBuilt"+","+"SQL_EngineHorsePower"+","+"SQL_TradeMark"+","+"SQL_Model"+","+"SQL_EngineNo"+","+"SQL_NominatedStateFlag"+","+"SQL_NominatedStateFlagName"+","+"SQL_PortOfRegistry"+","+"SQL_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateTypeId"+","+"SQL_GroupId"+","+"SQL_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"SQL_TradingCertificateTypeCode"+","+"SQL_TradingCertificateTypeName"+","+"SQL_AddressId"+","+"SQL_AddressName"+","+"SQL_AddressLine1"+","+"SQL_AddressLine2"+","+"SQL_AddressLine3"+","+"SQL_StateOrCounty"+","+"SQL_City"+","+"SQL_Country"+","+"SQL_PostCode"+","+"SQL_PrimaryAddress"+","+"SQL_PrimaryAddressFlag")
apiWriter.println("API_Id"+","+"API_AddressType_Id"+","+"API_SourceSystem"+","+"API_Reference"+","+"API_CurrentStatus"+","+"API_StorageId"+","+"API_IsYachtFlag"+","+"API_RiskId"+","+"API_PolicyId"+","+"API_MemberPartyId"+","+"API_OwnerPartyId"+","+"API_IsRenewalFlag"+","+"API_version"+","+"API_RiskReference"+","+"API_PolicyReference"+","+"API_MemberReference"+","+"API_MemberType"+","+"API_MemberName"+","+"API_JointAssuredName"+","+"API_OwnerReference"+","+"API_OwnerName"+","+"API_OwnerDomicile"+","+"API_OwnerEmailAddress"+","+"API_BrokerReference"+","+"API_BrokerName"+","+"API_BrokerEmailAddress"+","+"API_PolicyYear"+","+"API_CertificateIssueDate"+","+"API_EmailAddress"+","+"API_CCEmailAddress"+","+"API_EffectiveStartDate"+","+"API_EffectiveEndDate"+","+"API_PassengerCapacity"+","+"API_PolicyStartDate"+","+"API_PolicyEndDate"+","+"API_CurrencyCode"+","+"API_CoverLimitAmount"+","+"API_SignatoryState_Id"+","+"API_VesselName"+","+"API_VesselType"+","+"API_VesselTypeName"+","+"API_VesselEnteredDate"+","+"API_VesselFlag"+","+"API_ImoNumber"+","+"API_DistinctiveNumbersOrLetters"+","+"API_GrossTonnage"+","+"API_YearBuilt"+","+"API_EngineHorsePower"+","+"API_TradeMark"+","+"API_Model"+","+"API_EngineNo"+","+"API_NominatedStateFlag"+","+"API_NominatedStateFlagName"+","+"API_PortOfRegistry"+","+"API_TenderReferenceList"+","+"API_TenderOutboardReferenceList"+","+"API_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"API_GroupId"+","+"API_TradingCertificateGroupName"+","+"API_TradingCertificateGroupCode"+","+"API_TradingCertificateTypeCode"+","+"API_TradingCertificateTypeName"+","+"API_AddressId"+","+"API_AddressName"+","+"API_AddressLine1"+","+"API_AddressLine2"+","+"API_AddressLine3"+","+"API_StateOrCounty"+","+"API_City"+","+"API_Country"+","+"API_PostCode"+","+"API_PrimaryAddress")
compareWriter.println("SQL_Id"+","+"API_Id"+","+"SQL_AddressType_Id"+","+"API_AddressType_Id"+","+"SQL_SourceSystem"+","+"API_SourceSystem"+","+"SQL_Reference"+","+"API_Reference"+","+"SQL_CurrentStatus"+","+"API_CurrentStatus"+","+"SQL_StorageId"+","+"API_StorageId"+","+"SQL_RiskId"+","+"API_RiskId"+","+"SQL_PolicyId"+","+"API_PolicyId"+","+"SQL_MemberPartyId"+","+"API_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"API_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"API_BrokerPartyId"+","+"SQL_IsRenewalFlag"+","+"API_IsRenewalFlag"+","+"SQL_IsYachtFlag"+","+"API_IsYachtFlag"+","+"SQL_version"+","+"API_version"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_PolicyReference"+","+"API_PolicyReference"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberType"+","+"API_MemberType"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_JointAssuredName"+","+"API_JointAssuredName"+","+"SQL_OwnerReference"+","+"API_OwnerReference"+","+"SQL_OwnerName"+","+"API_OwnerName"+","+"SQL_OwnerDomicile"+","+"API_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"API_OwnerEmailAddress"+","+"SQL_BrokerReference"+","+"API_BrokerReference"+","+"SQL_BrokerName"+","+"API_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"API_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"API_PolicyYear"+","+"SQL_CertificateIssueDate"+","+"API_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_CCEmailAddress"+","+"API_CCEmailAddress"+","+"SQL_EffectiveStartDate"+","+"API_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"API_EffectiveEndDate"+","+"SQL_PassengerCapacity"+","+"API_PassengerCapacity"+","+"SQL_PolicyStartDate"+","+"API_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"API_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"API_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"API_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"API_SignatoryState_Id"+","+"SQL_VesselName"+","+"API_VesselName"+","+"SQL_VesselType"+","+"API_VesselType"+","+"SQL_VesselTypeName"+","+"API_VesselTypeName"+","+"SQL_VesselEnteredDate"+","+"API_VesselEnteredDate"+","+"SQL_VesselFlag"+","+"API_VesselFlag"+","+"SQL_ImoNumber"+","+"API_ImoNumber"+","+"SQL_DistinctiveNumbersOrLetters"+","+"API_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"API_GrossTonnage"+","+"SQL_YearBuilt"+","+"API_YearBuilt"+","+"SQL_EngineHorsePower"+","+"API_EngineHorsePower"+","+"SQL_TradeMark"+","+"API_TradeMark"+","+"SQL_Model"+","+"API_Model"+","+"SQL_EngineNo"+","+"API_EngineNo"+","+"SQL_NominatedStateFlag"+","+"API_NominatedStateFlag"+","+"SQL_NominatedStateFlagName"+","+"API_NominatedStateFlagName"+","+"SQL_PortOfRegistry"+","+"API_PortOfRegistry"+","+"SQL_TenderReferenceList"+","+"API_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"API_TenderOutboardReferenceList"+","+"SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId1"+","+"SQL_GroupId"+","+"API_GroupId"+","+"SQL_TradingCertificateGroupName"+","+"API_TradingCertificateGroupName"+","+"SQL_TradingCertificateGroupCode"+","+"API_TradingCertificateGroupCode"+","+"SQL_TradingCertificateTypeCode"+","+"API_TradingCertificateTypeCode"+","+"SQL_TradingCertificateTypeName"+","+"API_TradingCertificateTypeName"+","+"TestCaseStatus")//"SQL_AddressId"+","+"API_AddressId"+","+"SQL_AddressName"+","+"API_AddressName"+","+"SQL_AddressLine1"+","+"API_AddressLine1"+","+"SQL_AddressLine2"+","+"API_AddressLine2"+","+"SQL_AddressLine3"+","+"API_AddressLine3"+","+"SQL_StateOrCounty"+","+"API_StateOrCounty"+","+"SQL_City"+","+"API_City"+","+"SQL_Country"+","+"API_Country"+","+"SQL_PostCode"+","+"API_PostCode"+","+"SQL_PrimaryAddress"+","+"API_PrimaryAddress"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter=0

def rows=con.rows(sqlstmt)  
int db_size=rows.size
String field=null
//log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->
	sql_Id=row.Id
	sql_AddressType_Id=row.AddressType_Id
	sql_SourceSystem=row.SourceSystem
	sql_Reference=row.Reference
	sql_CurrentStatus=row.CurrentStatus
	sql_StorageId=row.StorageId
	sql_IsYacht=row.IsYacht
	sql_IsYachtFlag=row.IsYachtFlag
	sql_RiskId=row.RiskId
	sql_PolicyId=row.PolicyId
	sql_MemberPartyId=row.MemberPartyId
	sql_OwnerPartyId=row.OwnerPartyId
	sql_BrokerPartyId=row.BrokerPartyId
	sql_isRenewal=row.isRenewal
	sql_IsRenewalFlag=row.IsRenewalFlag
	sql_version=row.version
	sql_RiskReference=row.RiskReference
	sql_PolicyReference=row.PolicyReference
	sql_MemberReference=row.MemberReference
	sql_MemberType=row.MemberType
	sql_MemberName=row.MemberName
	sql_MemberName=replaceComma(sql_MemberName.toString())
	sql_JointAssuredName=row.JointAssuredName
	sql_OwnerReference=row.OwnerReference
	sql_OwnerName=row.OwnerName
	sql_OwnerDomicile=row.OwnerDomicile
	sql_OwnerEmailAddress=row.OwnerEmailAddress
	sql_BrokerReference=row.BrokerReference
	sql_BrokerName=row.BrokerName
	sql_BrokerEmailAddress=row.BrokerEmailAddress
	sql_PolicyYear=row.PolicyYear
	sql_CertificateIssueDate=row.CertificateIssueDate
	sql_EmailAddress=row.EmailAddress
	sql_CCEmailAddress=row.CCEmailAddress
	sql_EffectiveStartDate=row.EffectiveStartDate
	sql_EffectiveEndDate=row.EffectiveEndDate
	sql_PassengerCapacity=row.PassengerCapacity
	sql_PolicyStartDate=row.PolicyStartDate
	sql_PolicyEndDate=row.PolicyEndDate
	sql_CurrencyCode=row.CurrencyCode
	sql_CoverLimitAmount=row.CoverLimitAmount
	sql_SignatoryState_Id=row.SignatoryState_Id
	sql_VesselName=row.VesselName
	sql_VesselType=row.VesselType
	sql_VesselTypeName=row.VesselTypeName
	sql_VesselEnteredDate=row.VesselEnteredDate
	sql_VesselFlag=row.VesselFlag
	sql_ImoNumber=row.ImoNumber
	sql_DistinctiveNumbersOrLetters=row.DistinctiveNumbersOrLetters
	sql_GrossTonnage=row.GrossTonnage
	sql_YearBuilt=row.YearBuilt
	sql_EngineHorsePower=row.EngineHorsePower
	sql_TradeMark=row.TradeMark
	sql_Model=row.Model
	sql_EngineNo=row.EngineNo
	sql_NominatedStateFlag=row.NominatedStateFlag
	sql_NominatedStateFlag=replaceComma(sql_NominatedStateFlag.toString())	
	sql_NominatedStateFlagName=row.NominatedStateFlagName
	sql_NominatedStateFlagName=replaceComma(sql_NominatedStateFlagName.toString())
	sql_PortOfRegistry=row.PortOfRegistry
	sql_PortOfRegistry=replaceComma(sql_PortOfRegistry.toString())	
	sql_TenderReferenceList=row.TenderReferenceList
	sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_GroupId=row.GroupId
	sql_TradingCertificateGroupName=row.tradingCertificateGroupName
	sql_TradingCertificateGroupCode=row.tradingCertificateGroupCode
	sql_TradingCertificateTypeCode=row.TradingCertificateTypeCode
	sql_TradingCertificateTypeName=row.TradingCertificateTypeName
	sql_AddressId=row.AddressId	
	sql_AddressName=row.AddressName
	sql_AddressName=replaceComma(sql_AddressName.toString())
	sql_AddressLine1=row.AddressLine1
	sql_AddressLine1=replaceComma(sql_AddressLine1.toString())
	sql_AddressLine2=row.AddressLine2
	sql_AddressLine2=replaceComma(sql_AddressLine2.toString())
	sql_AddressLine3=row.AddressLine3
	sql_AddressLine3=replaceComma(sql_AddressLine3.toString())
	sql_StateOrCounty=row.StateOrCounty
	sql_StateOrCounty=replaceComma(sql_StateOrCounty.toString())
	sql_City=row.City
	sql_City=replaceComma(sql_City.toString())
	sql_Country=row.Country
	sql_Country=replaceComma(sql_Country.toString())
	sql_PostCode=row.PostCode
	sql_PrimaryAddress=row.PrimaryAddress
	sql_PrimaryAddressFlag=row.PrimaryAddressFlag
	
	sqlWriter.println(sql_Id+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_isRenewal+","+sql_IsRenewalFlag+","+sql_version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CCEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_VesselEnteredDate+","+sql_VesselFlag+","+sql_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_PortOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+sql_GroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_AddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_PrimaryAddressFlag)
	log.info "SQL Response received as :"+sql_Id+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_isRenewal+","+sql_IsRenewalFlag+","+sql_version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CCEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_VesselEnteredDate+","+sql_VesselFlag+","+sql_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_PortOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+sql_GroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_AddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_PrimaryAddressFlag

	String tradingCertificateId = sql_Id.toString()
	testRunner.testCase.setPropertyValue("tradingCertificateId",tradingCertificateId)
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	//Run the test Step with name
	testRunner.runTestStepByName('TradCertByTradCertId')
	String req='${TradCertByTradCertId#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["TradCertByTradCertId"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		if (!jsonRes.HasError)
		{
				api_Id=jsonRes.id
				api_AddressType_Id=jsonRes.addressTypeId
				api_SourceSystem=jsonRes.sourceSystem
				api_Reference=jsonRes.reference
				api_CurrentStatus=jsonRes.currentStatus
				api_StorageId=jsonRes.storageId
				api_RiskId=jsonRes.riskId
				api_PolicyId=jsonRes.policyId
				api_MemberPartyId=jsonRes.memberPartyId
				api_OwnerPartyId=jsonRes.ownerPartyId
				api_BrokerPartyId=jsonRes.brokerPartyId
				api_IsRenewalFlag=jsonRes.isRenewal
				api_IsYachtFlag=jsonRes.isYacht
				api_version=jsonRes.version
				api_RiskReference=jsonRes.riskReference
				api_PolicyReference=jsonRes.policyReference
				api_MemberReference=jsonRes.memberReference
				api_MemberType=jsonRes.memberType
				api_MemberName=jsonRes.memberName
				api_MemberName=replaceComma(api_MemberName.toString())
				api_JointAssuredName=jsonRes.jointAssuredName
				api_OwnerReference=jsonRes.ownerReference
				api_OwnerName=jsonRes.ownerName
				api_OwnerDomicile=jsonRes.ownerDomicile
				api_OwnerEmailAddress=jsonRes.ownerEmailAddress
				api_BrokerReference=jsonRes.brokerReference
				api_BrokerName=jsonRes.brokerName
				api_BrokerEmailAddress=jsonRes.brokerEmailAddress
				api_PolicyYear=jsonRes.policyYear
				api_CertificateIssueDate=jsonRes.certificateIssueDate
				api_EmailAddress=jsonRes.emailAddress
				api_CCEmailAddress=jsonRes.ccEmailAddress
				api_EffectiveStartDate=jsonRes.effectiveStartDate
				api_EffectiveEndDate=jsonRes.effectiveEndDate
				api_PassengerCapacity=jsonRes.passengerCapacity
				api_PolicyStartDate=jsonRes.policyStartDate
				api_PolicyEndDate=jsonRes.policyEndDate
				api_CurrencyCode=jsonRes.currencyCode
				api_CoverLimitAmount=jsonRes.coverLimitAmount
				api_SignatoryState_Id=jsonRes.signatoryStateId
				api_VesselName=jsonRes.vesselName
				api_VesselType=jsonRes.vesselType
				api_VesselTypeName=jsonRes.vesselTypeName
				api_VesselEnteredDate=jsonRes.vesselEnteredDate
				api_VesselFlag=jsonRes.vesselFlag
				api_ImoNumber=jsonRes.imoNumber
				api_DistinctiveNumbersOrLetters=jsonRes.distinctiveNumbersOrLetters
				api_GrossTonnage=jsonRes.grossTonnage
				api_YearBuilt=jsonRes.yearBuilt
				api_EngineHorsePower=jsonRes.engineHorsePower
				api_TradeMark=jsonRes.trademarkAndEngineModel
				api_Model=jsonRes.model
				api_EngineNo=jsonRes.engineNo
				api_NominatedStateFlag=jsonRes.nominatedFlagState
				api_NominatedStateFlag=replaceComma(api_NominatedStateFlag.toString())	
				api_NominatedStateFlagName=jsonRes.nominatedFlagStateName
				api_NominatedStateFlagName=replaceComma(api_NominatedStateFlagName.toString())				
				api_PortOfRegistry=jsonRes.portOfRegistry
				api_PortOfRegistry=replaceComma(api_PortOfRegistry.toString())				
				api_TenderReferenceList=jsonRes.tenderReferenceList
				api_TenderOutboardReferenceList=jsonRes.tenderOutboardReferenceList
				api_TradingCertificateTypeId=jsonRes.tradingCertificateTypeId
				api_TradingCertificateTypeId1=jsonRes.tradingCertificateType.id
				api_GroupId=jsonRes.tradingCertificateType.tradingCertificateGroup.id
				api_TradingCertificateGroupName=jsonRes.tradingCertificateType.tradingCertificateGroup.name
				api_TradingCertificateGroupCode=jsonRes.tradingCertificateType.tradingCertificateGroup.groupCode
				api_TradingCertificateTypeCode=jsonRes.tradingCertificateType.typeCode
				api_TradingCertificateTypeName=jsonRes.tradingCertificateType.typeName
				api_StateAddress=jsonRes.stateAddress
				api_OwnerAddress=jsonRes.ownerAddress
				api_BrokerAddress=jsonRes.brokerAddress
				api_MemberAddress=jsonRes.memberAddress
				api_JointAssuredAddress=jsonRes.jointAssuredAddress

				apiWriter.println(api_Id+","+api_AddressType_Id+","+api_SourceSystem+","+api_Reference+","+api_CurrentStatus+","+api_StorageId+","+api_IsYachtFlag+","+api_RiskId+","+api_PolicyId+","+api_MemberPartyId+","+api_OwnerPartyId+","+api_IsRenewalFlag+","+api_version+","+api_RiskReference+","+api_PolicyReference+","+api_MemberReference+","+api_MemberType+","+api_MemberName+","+api_JointAssuredName+","+api_OwnerReference+","+api_OwnerName+","+api_OwnerDomicile+","+api_OwnerEmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_BrokerEmailAddress+","+api_PolicyYear+","+api_CertificateIssueDate+","+api_EmailAddress+","+api_CCEmailAddress+","+api_EffectiveStartDate+","+api_EffectiveEndDate+","+api_PassengerCapacity+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_CurrencyCode+","+api_CoverLimitAmount+","+api_SignatoryState_Id+","+api_VesselName+","+api_VesselType+","+api_VesselTypeName+","+api_VesselEnteredDate+","+api_VesselFlag+","+api_ImoNumber+","+api_DistinctiveNumbersOrLetters+","+api_GrossTonnage+","+api_YearBuilt+","+api_EngineHorsePower+","+api_TradeMark+","+api_Model+","+api_EngineNo+","+api_NominatedStateFlag+","+api_NominatedStateFlagName+","+api_PortOfRegistry+","+api_TenderReferenceList+","+api_TenderOutboardReferenceList+","+api_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+api_GroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode+","+api_TradingCertificateTypeCode+","+api_TradingCertificateTypeName) //+","+api_AddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_PrimaryAddress)
				log.info "API Response is :" +api_Id+","+api_AddressType_Id+","+api_SourceSystem+","+api_Reference+","+api_CurrentStatus+","+api_StorageId+","+api_IsYachtFlag+","+api_RiskId+","+api_PolicyId+","+api_MemberPartyId+","+api_OwnerPartyId+","+api_IsRenewalFlag+","+api_version+","+api_RiskReference+","+api_PolicyReference+","+api_MemberReference+","+api_MemberType+","+api_MemberName+","+api_JointAssuredName+","+api_OwnerReference+","+api_OwnerName+","+api_OwnerDomicile+","+api_OwnerEmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_BrokerEmailAddress+","+api_PolicyYear+","+api_CertificateIssueDate+","+api_EmailAddress+","+api_CCEmailAddress+","+api_EffectiveStartDate+","+api_EffectiveEndDate+","+api_PassengerCapacity+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_CurrencyCode+","+api_CoverLimitAmount+","+api_SignatoryState_Id+","+api_VesselName+","+api_VesselType+","+api_VesselTypeName+","+api_VesselEnteredDate+","+api_VesselFlag+","+api_ImoNumber+","+api_DistinctiveNumbersOrLetters+","+api_GrossTonnage+","+api_YearBuilt+","+api_EngineHorsePower+","+api_TradeMark+","+api_Model+","+api_EngineNo+","+api_NominatedStateFlag+","+api_NominatedStateFlagName+","+api_PortOfRegistry+","+api_TenderReferenceList+","+api_TenderOutboardReferenceList+","+api_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+api_GroupId+","+api_TradingCertificateGroupName+","+api_TradingCertificateGroupCode+","+api_TradingCertificateTypeCode+","+api_TradingCertificateTypeName //+","+api_AddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_PrimaryAddress
				log.info "SQL Response is:"+sql_Id+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsYacht+","+sql_IsYachtFlag+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_isRenewal+","+sql_IsRenewalFlag+","+sql_version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CCEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_VesselEnteredDate+","+sql_VesselFlag+","+sql_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_PortOfRegistry+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+sql_GroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+sql_AddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_PrimaryAddressFlag

				if(api_Id.toString().toUpperCase().equals(sql_Id.toString().toUpperCase()) && api_AddressType_Id.toString().toUpperCase().equals(sql_AddressType_Id.toString().toUpperCase()) && api_SourceSystem.toString().toUpperCase().equals(sql_SourceSystem.toString().toUpperCase()) && api_Reference.toString().toUpperCase().equals(sql_Reference.toString().toUpperCase()) && api_CurrentStatus.toString().toUpperCase().equals(sql_CurrentStatus.toString().toUpperCase()) && api_StorageId.toString().toUpperCase().equals(sql_StorageId.toString().toUpperCase()) && api_RiskId.toString().toUpperCase().equals(sql_RiskId.toString().toUpperCase()) && api_PolicyId.toString().toUpperCase().equals(sql_PolicyId.toString().toUpperCase()) && api_MemberPartyId.toString().toUpperCase().equals(sql_MemberPartyId.toString().toUpperCase()) && api_OwnerPartyId.toString().toUpperCase().equals(sql_OwnerPartyId.toString().toUpperCase()) && api_BrokerPartyId.toString().toUpperCase().equals(sql_BrokerPartyId.toString().toUpperCase()) && api_IsRenewalFlag.toString().toUpperCase().equals(sql_IsRenewalFlag.toString().toUpperCase()) && api_IsYachtFlag.toString().toUpperCase().equals(sql_IsYachtFlag.toString().toUpperCase()) && api_version.toString().toUpperCase().equals(sql_version.toString().toUpperCase()) && api_RiskReference.toString().toUpperCase().equals(sql_RiskReference.toString().toUpperCase()) && api_PolicyReference.toString().toUpperCase().equals(sql_PolicyReference.toString().toUpperCase()) && api_MemberReference.toString().toUpperCase().equals(sql_MemberReference.toString().toUpperCase()) && api_MemberType.toString().toUpperCase().equals(sql_MemberType.toString().toUpperCase()) && api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && api_JointAssuredName.toString().toUpperCase().equals(sql_JointAssuredName.toString().toUpperCase()) && api_OwnerReference.toString().toUpperCase().equals(sql_OwnerReference.toString().toUpperCase()) && api_OwnerName.toString().toUpperCase().equals(sql_OwnerName.toString().toUpperCase()) && api_OwnerDomicile.toString().toUpperCase().equals(sql_OwnerDomicile.toString().toUpperCase()) && api_OwnerEmailAddress.toString().toUpperCase().equals(sql_OwnerEmailAddress.toString().toUpperCase()) && api_BrokerReference.toString().toUpperCase().equals(sql_BrokerReference.toString().toUpperCase()) && api_BrokerName.toString().toUpperCase().equals(sql_BrokerName.toString().toUpperCase()) && api_BrokerEmailAddress.toString().toUpperCase().equals(sql_BrokerEmailAddress.toString().toUpperCase()) && api_PolicyYear.toString().toUpperCase().equals(sql_PolicyYear.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && api_CCEmailAddress.toString().toUpperCase().equals(sql_CCEmailAddress.toString().toUpperCase()) && api_PassengerCapacity.toString().toUpperCase().equals(sql_PassengerCapacity.toString().toUpperCase()) && api_CurrencyCode.toString().toUpperCase().equals(sql_CurrencyCode.toString().toUpperCase()) && api_CoverLimitAmount.toString().toUpperCase().equals(sql_CoverLimitAmount.toString().toUpperCase()) && api_SignatoryState_Id.toString().toUpperCase().equals(sql_SignatoryState_Id.toString().toUpperCase()) && api_VesselName.toString().toUpperCase().equals(sql_VesselName.toString().toUpperCase()) && api_VesselType.toString().toUpperCase().equals(sql_VesselType.toString().toUpperCase()) && api_VesselTypeName.toString().toUpperCase().equals(sql_VesselTypeName.toString().toUpperCase()) && api_VesselFlag.toString().toUpperCase().equals(sql_VesselFlag.toString().toUpperCase()) && api_ImoNumber.toString().toUpperCase().equals(sql_ImoNumber.toString().toUpperCase()) && api_DistinctiveNumbersOrLetters.toString().toUpperCase().equals(sql_DistinctiveNumbersOrLetters.toString().toUpperCase()) && api_GrossTonnage.toString().toUpperCase().equals(sql_GrossTonnage.toString().toUpperCase()) && api_YearBuilt.toString().toUpperCase().equals(sql_YearBuilt.toString().toUpperCase()) && api_EngineHorsePower.toString().toUpperCase().equals(sql_EngineHorsePower.toString().toUpperCase()) && api_TradeMark.toString().toUpperCase().equals(sql_TradeMark.toString().toUpperCase()) && api_Model.toString().toUpperCase().equals(sql_Model.toString().toUpperCase()) && api_EngineNo.toString().toUpperCase().equals(sql_EngineNo.toString().toUpperCase()) && api_NominatedStateFlag.toString().toUpperCase().equals(sql_NominatedStateFlag.toString().toUpperCase()) && api_NominatedStateFlagName.toString().toUpperCase().equals(sql_NominatedStateFlagName.toString().toUpperCase()) && api_PortOfRegistry.toString().toUpperCase().equals(sql_PortOfRegistry.toString().toUpperCase()) && api_TenderReferenceList.toString().toUpperCase().equals(sql_TenderReferenceList.toString().toUpperCase()) && api_TenderOutboardReferenceList.toString().toUpperCase().equals(sql_TenderOutboardReferenceList.toString().toUpperCase()) && api_TradingCertificateTypeId.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) && api_TradingCertificateTypeId1.toString().toUpperCase().equals(sql_TradingCertificateTypeId.toString().toUpperCase()) && api_GroupId.toString().toUpperCase().equals(sql_GroupId.toString().toUpperCase()) && api_TradingCertificateGroupName.toString().toUpperCase().equals(sql_TradingCertificateGroupName.toString().toUpperCase()) && api_TradingCertificateGroupCode.toString().toUpperCase().equals(sql_TradingCertificateGroupCode.toString().toUpperCase()) && api_TradingCertificateTypeCode.toString().toUpperCase().equals(sql_TradingCertificateTypeCode.toString().toUpperCase()) && api_TradingCertificateTypeName.toString().toUpperCase().equals(sql_TradingCertificateTypeName.toString().toUpperCase()))// && api_AddressId.toString().equals(sql_AddressId.toString()) && api_AddressName.toString().toUpperCase().equals(sql_AddressName.toString().toUpperCase()) && api_AddressLine1.toString().toUpperCase().equals(sql_AddressLine1.toString().toUpperCase()) && api_AddressLine2.toString().toUpperCase().equals(sql_AddressLine2.toString().toUpperCase()) && api_AddressLine3.toString().toUpperCase().equals(sql_AddressLine3.toString().toUpperCase()) && api_StateOrCounty.toString().toUpperCase().equals(sql_StateOrCounty.toString().toUpperCase()) && api_City.toString().toUpperCase().equals(sql_City.toString().toUpperCase()) &&  api_Country.toString().toUpperCase().equals(sql_Country.toString().toUpperCase()) &&  api_PostCode.toString().toUpperCase().equals(sql_PostCode.toString().toUpperCase()) && api_PrimaryAddress.toString().toUpperCase().equals(sql_PrimaryAddress.toString().toUpperCase()))
				{
					compareWriter.println(sql_Id+","+api_Id+","+sql_AddressType_Id+","+api_AddressType_Id+","+sql_SourceSystem+","+api_SourceSystem+","+sql_Reference+","+api_Reference+","+sql_CurrentStatus+","+api_CurrentStatus+","+sql_StorageId+","+api_StorageId+","+sql_RiskId+","+api_RiskId+","+sql_PolicyId+","+api_PolicyId+","+sql_MemberPartyId+","+api_MemberPartyId+","+sql_OwnerPartyId+","+api_OwnerPartyId+","+sql_BrokerPartyId+","+api_BrokerPartyId+","+sql_IsRenewalFlag+","+api_IsRenewalFlag+","+sql_IsYachtFlag+","+api_IsYachtFlag+","+sql_version+","+api_version+","+sql_RiskReference+","+api_RiskReference+","+sql_PolicyReference+","+api_PolicyReference+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberType+","+api_MemberType+","+sql_MemberName+","+api_MemberName+","+sql_JointAssuredName+","+api_JointAssuredName+","+sql_OwnerReference+","+api_OwnerReference+","+sql_OwnerName+","+api_OwnerName+","+sql_OwnerDomicile+","+api_OwnerDomicile+","+sql_OwnerEmailAddress+","+api_OwnerEmailAddress+","+sql_BrokerReference+","+api_BrokerReference+","+sql_BrokerName+","+api_BrokerName+","+sql_BrokerEmailAddress+","+api_BrokerEmailAddress+","+sql_PolicyYear+","+api_PolicyYear+","+sql_CertificateIssueDate+","+api_CertificateIssueDate+","+sql_EmailAddress+","+api_EmailAddress+","+sql_CCEmailAddress+","+api_CCEmailAddress+","+sql_EffectiveStartDate+","+api_EffectiveStartDate+","+sql_EffectiveEndDate+","+api_EffectiveEndDate+","+sql_PassengerCapacity+","+api_PassengerCapacity+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_CoverLimitAmount+","+api_CoverLimitAmount+","+sql_SignatoryState_Id+","+api_SignatoryState_Id+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_VesselTypeName+","+api_VesselTypeName+","+sql_VesselEnteredDate+","+api_VesselEnteredDate+","+sql_VesselFlag+","+api_VesselFlag+","+sql_ImoNumber+","+api_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+api_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TradeMark+","+api_TradeMark+","+sql_Model+","+api_Model+","+sql_EngineNo+","+api_EngineNo+","+sql_NominatedStateFlag+","+api_NominatedStateFlag+","+sql_NominatedStateFlagName+","+api_NominatedStateFlagName+","+sql_PortOfRegistry+","+api_PortOfRegistry+","+sql_TenderReferenceList+","+api_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+sql_GroupId+","+api_GroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+"Test Case Passed")//sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_PrimaryAddress+","+api_PrimaryAddress+","+"Test Case Passed")
					log.info "Details are matching, hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_Id+","+api_Id+","+sql_AddressType_Id+","+api_AddressType_Id+","+sql_SourceSystem+","+api_SourceSystem+","+sql_Reference+","+api_Reference+","+sql_CurrentStatus+","+api_CurrentStatus+","+sql_StorageId+","+api_StorageId+","+sql_RiskId+","+api_RiskId+","+sql_PolicyId+","+api_PolicyId+","+sql_MemberPartyId+","+api_MemberPartyId+","+sql_OwnerPartyId+","+api_OwnerPartyId+","+sql_BrokerPartyId+","+api_BrokerPartyId+","+sql_IsRenewalFlag+","+api_IsRenewalFlag+","+sql_IsYachtFlag+","+api_IsYachtFlag+","+sql_version+","+api_version+","+sql_RiskReference+","+api_RiskReference+","+sql_PolicyReference+","+api_PolicyReference+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberType+","+api_MemberType+","+sql_MemberName+","+api_MemberName+","+sql_JointAssuredName+","+api_JointAssuredName+","+sql_OwnerReference+","+api_OwnerReference+","+sql_OwnerName+","+api_OwnerName+","+sql_OwnerDomicile+","+api_OwnerDomicile+","+sql_OwnerEmailAddress+","+api_OwnerEmailAddress+","+sql_BrokerReference+","+api_BrokerReference+","+sql_BrokerName+","+api_BrokerName+","+sql_BrokerEmailAddress+","+api_BrokerEmailAddress+","+sql_PolicyYear+","+api_PolicyYear+","+sql_CertificateIssueDate+","+api_CertificateIssueDate+","+sql_EmailAddress+","+api_EmailAddress+","+sql_CCEmailAddress+","+api_CCEmailAddress+","+sql_EffectiveStartDate+","+api_EffectiveStartDate+","+sql_EffectiveEndDate+","+api_EffectiveEndDate+","+sql_PassengerCapacity+","+api_PassengerCapacity+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_CoverLimitAmount+","+api_CoverLimitAmount+","+sql_SignatoryState_Id+","+api_SignatoryState_Id+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_VesselTypeName+","+api_VesselTypeName+","+sql_VesselEnteredDate+","+api_VesselEnteredDate+","+sql_VesselFlag+","+api_VesselFlag+","+sql_ImoNumber+","+api_ImoNumber+","+sql_DistinctiveNumbersOrLetters+","+api_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TradeMark+","+api_TradeMark+","+sql_Model+","+api_Model+","+sql_EngineNo+","+api_EngineNo+","+sql_NominatedStateFlag+","+api_NominatedStateFlag+","+sql_NominatedStateFlagName+","+api_NominatedStateFlagName+","+sql_PortOfRegistry+","+api_PortOfRegistry+","+sql_TenderReferenceList+","+api_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+api_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId1+","+sql_GroupId+","+api_GroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+api_TradingCertificateGroupCode+","+sql_TradingCertificateTypeCode+","+api_TradingCertificateTypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+"Test Case Failed")//sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_PrimaryAddress+","+api_PrimaryAddress+","+"Test Case Failed")
					log.info "Details are not matching, hence test case is failed"
				}
		}
	}
	else
	{
		log.info "Failed API response received as : "+response
	}

	counter = 1+counter
	log.info "Total records tested are : "+counter
}

public String replaceComma(String field)
{
	if(field!=null)
	{
		field=field.replace(",", " " )
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Get method of  Trading Certificate By Trading Certificate Id***********"]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script_Rohit_DisabledAlways" id="6ef79533-d650-43df-9649-706c831716e1" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat
import com.eviware.soapui.support.types.StringToStringMap

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
//	String dateForApp = newDateTimeString
//	dateForApp= dateForApp.replace("-","")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for Get method of Trading Certificate By Certificate Id************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt =
"""
	Use tradingcertificate
	Select Top 50
	Id, Type_Id, Reference, CurrentStatus, StorageId, IsRenewal, IsYacht, RiskId, PolicyId, MemberPartyId, 
	OwnerPartyId, BrokerPartyId, TradingCertificateVersion, RiskReference, PolicyReference, MemberReference, 
	MemberType, MemberName, OwnerDomicile, OwnerEmailAddress, OwnerReference, OwnerName, BrokerReference, 
	BrokerName, BrokerEmailAddress, PolicyYear, CertificateIssueDate, EmailAddress, CCEmailAddress, EffectiveStartDate, 
	EffectiveEndDate, PolicyStartDate, PolicyEndDate, CurrencyCode, CoverLimitAmount, SignatoryState_Id, 
	NominatedStateFlag, NominatedStateFlagName, VesselName, VesselFlag, VesselType, VesselTypeName, 
	PassengerCapacity, VesselEnteredDate, IMONumber, EngineHorsePower, TradeMark, Model, EngineNo, 
	TenderReferenceList, TenderOutboardReferenceList, DistinctiveNumbersOrLetters, GrossTonnage, YearBuilt, 
	PortOfRegistry, AddressType_Id, JointAssuredName, SourceSystem
	From TradingCertificate TC

"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQLResponse_GET_TradingCertificateByCertificateId.csv"]
def getApiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\APIResponse_GET_TradingCertificateByCertificateId.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_TradingCertificateByCertificateId.csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def getApiFile = new File(getApiResponseFile[0])
def getApiWriter = getApiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_Id"+","+"SQL_TypeId"+","+"SQL_Reference"+","+"SQL_CurrentStatus"+","+"SQL_StorageId"+","+"SQL_IsRenewal"+","+"SQL_IsYacht"+","+"SQL_RiskId"+","+"SQL_PolicyId"+","+"SQL_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"SQL_TradingCertificateVersion"+","+"SQL_RiskReference"+","+"SQL_PolicyReference"+","+"SQL_MemberReference"+","+"SQL_MemberType"+","+"SQL_MemberName"+","+"SQL_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"SQL_OwnerReference"+","+"SQL_OwnerName"+","+"SQL_BrokerReference"+","+"SQL_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"SQL_CertificateIssueDate"+","+"SQL_EmailAddress"+","+"SQL_CCEmailAddress"+","+"SQL_EffectiveStartDate"+","+"SQL_EffectiveEndDate"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"SQL_CoverLimitAmount"+","+"SQL_SignatoryState_Id"+","+"SQL_NominatedStateFlag"+","+"SQL_NominatedStateFlagName"+","+"SQL_VesselName"+","+"SQL_VesselFlag"+","+"SQL_VesselType"+","+"SQL_VesselTypeName"+","+"SQL_PassengerCapacity"+","+"SQL_VesselEnteredDate"+","+"SQL_IMONumber"+","+"SQL_EngineHorsePower"+","+"SQL_TradeMark"+","+"SQL_Model"+","+"SQL_EngineNo"+","+"SQL_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"SQL_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"SQL_YearBuilt"+","+"SQL_PortOfRegistry"+","+"SQL_AddressType_Id"+","+"SQL_JointAssuredName"+","+"SQL_SourceSystem")
getApiWriter.println("GETAPI_Id"+","+"GETAPI_TypeId"+","+"GETAPI_Reference"+","+"GETAPI_CurrentStatus"+","+"GETAPI_StorageId"+","+"GETAPI_IsRenewal"+","+"GETAPI_IsYacht"+","+"GETAPI_RiskId"+","+"GETAPI_PolicyId"+","+"GETAPI_MemberPartyId"+","+"GETAPI_OwnerPartyId"+","+"GETAPI_BrokerPartyId"+","+"GETAPI_TradingCertificateVersion"+","+"GETAPI_RiskReference"+","+"GETAPI_PolicyReference"+","+"GETAPI_MemberReference"+","+"GETAPI_MemberType"+","+"GETAPI_MemberName"+","+"GETAPI_OwnerDomicile"+","+"GETAPI_OwnerEmailAddress"+","+"GETAPI_OwnerReference"+","+"GETAPI_OwnerName"+","+"GETAPI_BrokerReference"+","+"GETAPI_BrokerName"+","+"GETAPI_BrokerEmailAddress"+","+"GETAPI_PolicyYear"+","+"GETAPI_CertificateIssueDate"+","+"GETAPI_EmailAddress"+","+"GETAPI_CCEmailAddress"+","+"GETAPI_EffectiveStartDate"+","+"GETAPI_EffectiveEndDate"+","+"GETAPI_PolicyStartDate"+","+"GETAPI_PolicyEndDate"+","+"GETAPI_CurrencyCode"+","+"GETAPI_CoverLimitAmount"+","+"GETAPI_SignatoryState_Id"+","+"GETAPI_NominatedStateFlag"+","+"GETAPI_NominatedStateFlagName"+","+"GETAPI_VesselName"+","+"GETAPI_VesselFlag"+","+"GETAPI_VesselType"+","+"GETAPI_VesselTypeName"+","+"GETAPI_PassengerCapacity"+","+"GETAPI_VesselEnteredDate"+","+"GETAPI_IMONumber"+","+"GETAPI_EngineHorsePower"+","+"GETAPI_TradeMark"+","+"GETAPI_Model"+","+"GETAPI_EngineNo"+","+"GETAPI_TenderReferenceList"+","+"GETAPI_TenderOutboardReferenceList"+","+"GETAPI_DistinctiveNumbersOrLetters"+","+"GETAPI_GrossTonnage"+","+"GETAPI_YearBuilt"+","+"GETAPI_PortOfRegistry"+","+"GETAPI_AddressType_Id"+","+"GETAPI_JointAssuredName"+","+"GETAPI_SourceSystem")
compareWriter.println("SQL_Id"+","+"GETAPI_Id"+","+"SQL_TypeId"+","+"GETAPI_TypeId"+","+"SQL_Reference"+","+"GETAPI_Reference"+","+"SQL_CurrentStatus"+","+"GETAPI_CurrentStatus"+","+"SQL_StorageId"+","+"GETAPI_StorageId"+","+"SQL_IsRenewal"+","+"GETAPI_IsRenewal"+","+"SQL_IsYacht"+","+"GETAPI_IsYacht"+","+"SQL_RiskId"+","+"GETAPI_RiskId"+","+"SQL_PolicyId"+","+"GETAPI_PolicyId"+","+"SQL_MemberPartyId"+","+"GETAPI_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"GETAPI_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"GETAPI_BrokerPartyId"+","+"SQL_TradingCertificateVersion"+","+"GETAPI_TradingCertificateVersion"+","+"SQL_RiskReference"+","+"GETAPI_RiskReference"+","+"SQL_PolicyReference"+","+"GETAPI_PolicyReference"+","+"SQL_MemberReference"+","+"GETAPI_MemberReference"+","+"SQL_MemberType"+","+"GETAPI_MemberType"+","+"SQL_MemberName"+","+"GETAPI_MemberName"+","+"SQL_OwnerDomicile"+","+"GETAPI_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"GETAPI_OwnerEmailAddress"+","+"SQL_OwnerReference"+","+"GETAPI_OwnerReference"+","+"SQL_OwnerName"+","+"GETAPI_OwnerName"+","+"SQL_BrokerReference"+","+"GETAPI_BrokerReference"+","+"SQL_BrokerName"+","+"GETAPI_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"GETAPI_BrokerEmailAddress"+","+"SQL_PolicyYear"+","+"GETAPI_PolicyYear"+","+"SQL_CertificateIssueDate"+","+"GETAPI_CertificateIssueDate"+","+"SQL_emailAddress"+","+"GETAPI_emailAddress"+","+"SQL_ccEmailAddress"+","+"GETAPI_ccEmailAddress"+","+"SQL_effectiveStartDate"+","+"GETAPI_effectiveStartDate"+","+"SQL_effectiveEndDate"+","+"GETAPI_effectiveEndDate"+","+"SQL_PolicyStartDate"+","+"GETAPI_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"GETAPI_PolicyEndDate"+","+"SQL_CurrencyCode"+","+"GETAPI_CurrencyCode"+","+"SQL_coverLimitAmount"+","+"GETAPI_coverLimitAmount"+","+"SQL_signatoryStateId"+","+"GETAPI_signatoryStateId"+","+"SQL_NominatedStateFlag"+","+"GETAPI_NominatedStateFlag"+","+"SQL_NominatedStateFlagName"+","+"GETAPI_NominatedStateFlagName"+","+"SQL_vesselName"+","+"GETAPI_vesselName"+","+"SQL_VesselFlag"+","+"GETAPI_VesselFlag"+","+"SQL_vesselType"+","+"GETAPI_vesselType"+","+"SQL_vesselTypeName"+","+"GETAPI_vesselTypeName"+","+"SQL_PassengerCapacity"+","+"GETAPI_PassengerCapacity"+","+"SQL_vesselEnteredDate"+","+"GETAPI_vesselEnteredDate"+","+"SQL_imoNumber"+","+"GETAPI_imoNumber"+","+"SQL_EngineHorsePower"+","+"GETAPI_EngineHorsePower"+","+"SQL_TradeMark"+","+"GETAPI_TradeMark"+","+"SQL_Model"+","+"GETAPI_Model"+","+"SQL_EngineNo"+","+"GETAPI_EngineNo"+","+"SQL_TenderReferenceList"+","+"GETAPI_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"GETAPI_TenderOutboardReferenceList"+","+"SQL_distinctiveNumbersOrLetters"+","+"GETAPI_distinctiveNumbersOrLetters"+","+"SQL_grossTonnage"+","+"GETAPI_grossTonnage"+","+"SQL_yearBuilt"+","+"GETAPI_yearBuilt"+","+"SQL_PortOfRegistry"+","+"GETAPI_PortOfRegistry"+","+"SQL_AddressType_Id"+","+"GETAPI_AddressType_Id"+","+"SQL_JointAssuredName"+","+"GETAPI_JointAssuredName"+","+"SQL_SourceSystem"+","+"GETAPI_SourceSystem"+","+"Result")

def response= null
def jsonSlurper=null
def jsonResp=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
	sql_Id=row.Id
	sql_TypeId=row.Type_Id
	sql_Reference=row.Reference
	sql_CurrentStatus=row.CurrentStatus
	sql_StorageId=row.StorageId
	sql_IsRenewal=row.IsRenewal
	sql_IsYacht=row.IsYacht
	sql_RiskId=row.RiskId
	//sql_VesselId=row.VesselId
	sql_PolicyId=row.PolicyId
	sql_MemberPartyId=row.MemberPartyId
	sql_OwnerPartyId=row.OwnerPartyId
	sql_BrokerPartyId=row.BrokerPartyId
	sql_TradingCertificateVersion=row.TradingCertificateVersion
	sql_RiskReference=row.RiskReference
	//sql_VesselReference=row.VesselReference
	sql_PolicyReference=row.PolicyReference
	sql_MemberReference=row.MemberReference
	sql_MemberType=row.MemberType
	sql_MemberName=row.MemberName
	sql_OwnerDomicile=row.OwnerDomicile
	sql_OwnerEmailAddress=row.OwnerEmailAddress
	sql_OwnerReference=row.OwnerReference
	sql_OwnerName=row.OwnerName
	sql_BrokerReference=row.BrokerReference
	sql_BrokerName=row.BrokerName
	sql_BrokerEmailAddress=row.BrokerEmailAddress
	sql_PolicyYear=row.PolicyYear
	
	sql_CertificateIssueDate=row.CertificateIssueDate
	sql_EmailAddress=row.EmailAddress
	sql_CCEmailAddress=row.CCEmailAddress
	sql_EffectiveStartDate=row.EffectiveStartDate

	sql_EffectiveEndDate=row.EffectiveEndDate
	sql_PolicyStartDate=row.PolicyStartDate
	sql_PolicyEndDate=row.PolicyEndDate
	sql_CurrencyCode=row.CurrencyCode
	sql_CoverLimitAmount=row.CoverLimitAmount
	sql_SignatoryState_Id=row.SignatoryState_Id
	sql_NominatedStateFlag=row.NominatedStateFlag
	sql_NominatedStateFlagName=row.NominatedStateFlagName
	sql_VesselName=row.VesselName
	sql_VesselFlag=row.VesselFlag
	sql_VesselType=row.VesselType
	sql_VesselTypeName=row.VesselTypeName
	sql_PassengerCapacity=row.PassengerCapacity
	sql_VesselEnteredDate=row.VesselEnteredDate
	sql_IMONumber=row.IMONumber
	sql_EngineHorsePower=row.EngineHorsePower
	sql_TradeMark=row.TradeMark
	sql_Model=row.Model
	sql_EngineNo=row.EngineNo
	sql_TenderReferenceList=row.TenderReferenceList
	sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
	sql_DistinctiveNumbersOrLetters=row.DistinctiveNumbersOrLetters
	sql_GrossTonnage=row.GrossTonnage
	sql_YearBuilt=row.YearBuilt
	sql_PortOfRegistry=row.PortOfRegistry
	//sql_LastModified=row.LastModified
	sql_AddressType_Id=row.AddressType_Id
	sql_JointAssuredName=row.JointAssuredName
	sql_SourceSystem=row.SourceSystem

	
	sqlWriter.println(sql_Id+","+sql_TypeId+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_TradingCertificateVersion+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_OwnerReference+","+sql_OwnerName+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CCEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_VesselName+","+sql_VesselFlag+","+sql_VesselType+","+sql_VesselTypeName+","+sql_PassengerCapacity+","+sql_VesselEnteredDate+","+sql_IMONumber+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_PortOfRegistry+","+sql_AddressType_Id+","+sql_JointAssuredName+","+sql_SourceSystem)
	log.info "SQL Response is : "+sql_Id+","+sql_TypeId+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_RiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_TradingCertificateVersion+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_OwnerReference+","+sql_OwnerName+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CCEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_VesselName+","+sql_VesselFlag+","+sql_VesselType+","+sql_VesselTypeName+","+sql_PassengerCapacity+","+sql_VesselEnteredDate+","+sql_IMONumber+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_PortOfRegistry+","+sql_AddressType_Id+","+sql_JointAssuredName+","+sql_SourceSystem


	//Set the Token at test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	String tradingCertificateId=sql_Id
	testRunner.testCase.setPropertyValue( "tradingCertificateId", tradingCertificateId)
			
	//Run the test step to get response
	testRunner.runTestStepByName('TradCertByTradCertId')
	String req1='${TradCertByTradCertId#Response}'
	response=context.expand(req1)
	//log.info "API Response for GET method after post received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	httpResponseHeaders = context.testCase.testSteps["TradCertByTradCertId"].testRequest.response.responseHeaders
	httpStatus = httpResponseHeaders["#status#"]
	httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		if (!jsonRes.HasError)
		{
				getApi_Id=jsonRes.id
				getApi_TypeId=jsonRes.tradingCertificateTypeId
				getApi_Reference=jsonRes.reference
				getApi_CurrentStatus=jsonRes.currentStatus
				getApi_StorageId=jsonRes.storageId
				getApi_IsRenewal=jsonRes.isRenewal
				getApi_IsYacht=jsonRes.isYacht
				getApi_RiskId=jsonRes.riskId
				//getApi_VesselId=jsonRes.vesselId
				getApi_PolicyId=jsonRes.policyId
				getApi_MemberPartyId=jsonRes.memberPartyId
				getApi_OwnerPartyId=jsonRes.ownerPartyId
				getApi_BrokerPartyId=jsonRes.brokerPartyId
				getApi_TradingCertificateVersion=jsonRes.version
				getApi_RiskReference=jsonRes.riskReference
				//getApi_VesselReference=jsonRes.vesselReference
				getApi_PolicyReference=jsonRes.policyReference
				getApi_MemberReference=jsonRes.memberReference
				getApi_MemberType=jsonRes.memberType
				getApi_MemberName=jsonRes.memberName
				getApi_OwnerDomicile=jsonRes.ownerDomicile
				getApi_OwnerEmailAddress=jsonRes.ownerEmailAddress
				getApi_OwnerReference=jsonRes.ownerReference
				getApi_OwnerName=jsonRes.ownerName
				getApi_BrokerReference=jsonRes.brokerReference
				getApi_BrokerName=jsonRes.brokerName
				getApi_BrokerEmailAddress=jsonRes.brokerEmailAddress
				getApi_PolicyYear=jsonRes.policyYear
				
				getApi_CertificateIssueDate=jsonRes.certificateIssueDate
				getApi_EmailAddress=jsonRes.emailAddress
				getApi_CCEmailAddress=jsonRes.CCEmailAddress
				getApi_EffectiveStartDate=jsonRes.effectiveStartDate

				getApi_EffectiveEndDate=jsonRes.effectiveEndDate
				getApi_PolicyStartDate=jsonRes.policyStartDate
				getApi_PolicyEndDate=jsonRes.policyEndDate
				getApi_CurrencyCode=jsonRes.currencyCode
				getApi_CoverLimitAmount=jsonRes.coverLimitAmount
				getApi_SignatoryState_Id=jsonRes.signatoryStateId
				getApi_NominatedStateFlag=jsonRes.nominatedFlagState
				getApi_NominatedStateFlagName=jsonRes.nominatedFlagStateName
				getApi_VesselName=jsonRes.vesselName
				getApi_VesselFlag=jsonRes.vesselFlag
				getApi_VesselType=jsonRes.vesselType
				getApi_VesselTypeName=jsonRes.vesselTypeName
				getApi_PassengerCapacity=jsonRes.passengerCapacity
				getApi_VesselEnteredDate=jsonRes.vesselEnteredDate
				getApi_IMONumber=jsonRes.imoNumber
				getApi_EngineHorsePower=jsonRes.engineHorsePower
				getApi_TradeMark=jsonRes.trademarkAndEngineModel
				getApi_Model=jsonRes.model
				getApi_EngineNo=jsonRes.engineNo
				getApi_TenderReferenceList=jsonRes.tenderReferenceList
				getApi_TenderOutboardReferenceList=jsonRes.tenderOutboardReferenceList
				getApi_DistinctiveNumbersOrLetters=jsonRes.distinctiveNumbersOrLetters
				getApi_GrossTonnage=jsonRes.grossTonnage
				getApi_YearBuilt=jsonRes.yearBuilt
				getApi_PortOfRegistry=jsonRes.portOfRegistry
				//getApi_LastModified=jsonRes.lastModified
				getApi_AddressType_Id=jsonRes.addressTypeId
				getApi_JointAssuredName=jsonRes.jointAssuredName
				getApi_SourceSystem=jsonRes.sourceSystem
			
				getApiWriter.println(getApi_Id+","+getApi_TypeId+","+getApi_Reference+","+getApi_CurrentStatus+","+getApi_StorageId+","+getApi_IsRenewal+","+getApi_IsYacht+","+getApi_RiskId+","+getApi_PolicyId+","+getApi_MemberPartyId+","+getApi_OwnerPartyId+","+getApi_BrokerPartyId+","+getApi_TradingCertificateVersion+","+getApi_RiskReference+","+getApi_PolicyReference+","+getApi_MemberReference+","+getApi_MemberType+","+getApi_MemberName+","+getApi_OwnerDomicile+","+getApi_OwnerEmailAddress+","+getApi_OwnerReference+","+getApi_OwnerName+","+getApi_BrokerReference+","+getApi_BrokerName+","+getApi_BrokerEmailAddress+","+getApi_PolicyYear+","+getApi_CertificateIssueDate+","+getApi_EmailAddress+","+getApi_CCEmailAddress+","+getApi_EffectiveStartDate+","+getApi_EffectiveEndDate+","+getApi_PolicyStartDate+","+getApi_PolicyEndDate+","+getApi_CurrencyCode+","+getApi_CoverLimitAmount+","+getApi_SignatoryState_Id+","+getApi_NominatedStateFlag+","+getApi_NominatedStateFlagName+","+getApi_VesselName+","+getApi_VesselFlag+","+getApi_VesselType+","+getApi_VesselTypeName+","+getApi_PassengerCapacity+","+getApi_VesselEnteredDate+","+getApi_IMONumber+","+getApi_EngineHorsePower+","+getApi_TradeMark+","+getApi_Model+","+getApi_EngineNo+","+getApi_TenderReferenceList+","+getApi_TenderOutboardReferenceList+","+getApi_DistinctiveNumbersOrLetters+","+getApi_GrossTonnage+","+getApi_YearBuilt+","+getApi_PortOfRegistry+","+getApi_AddressType_Id+","+getApi_JointAssuredName+","+getApi_SourceSystem)
				log.info "API Response is :" +getApi_Id+","+getApi_TypeId+","+getApi_Reference+","+getApi_CurrentStatus+","+getApi_StorageId+","+getApi_IsRenewal+","+getApi_IsYacht+","+getApi_RiskId+","+getApi_PolicyId+","+getApi_MemberPartyId+","+getApi_OwnerPartyId+","+getApi_BrokerPartyId+","+getApi_TradingCertificateVersion+","+getApi_RiskReference+","+getApi_PolicyReference+","+getApi_MemberReference+","+getApi_MemberType+","+getApi_MemberName+","+getApi_OwnerDomicile+","+getApi_OwnerEmailAddress+","+getApi_OwnerReference+","+getApi_OwnerName+","+getApi_BrokerReference+","+getApi_BrokerName+","+getApi_BrokerEmailAddress+","+getApi_PolicyYear+","+getApi_CertificateIssueDate+","+getApi_EmailAddress+","+getApi_CCEmailAddress+","+getApi_EffectiveStartDate+","+getApi_EffectiveEndDate+","+getApi_PolicyStartDate+","+getApi_PolicyEndDate+","+getApi_CurrencyCode+","+getApi_CoverLimitAmount+","+getApi_SignatoryState_Id+","+getApi_NominatedStateFlag+","+getApi_NominatedStateFlagName+","+getApi_VesselName+","+getApi_VesselFlag+","+getApi_VesselType+","+getApi_VesselTypeName+","+getApi_PassengerCapacity+","+getApi_VesselEnteredDate+","+getApi_IMONumber+","+getApi_EngineHorsePower+","+getApi_TradeMark+","+getApi_Model+","+getApi_EngineNo+","+getApi_TenderReferenceList+","+getApi_TenderOutboardReferenceList+","+getApi_DistinctiveNumbersOrLetters+","+getApi_GrossTonnage+","+getApi_YearBuilt+","+getApi_PortOfRegistry+","+getApi_AddressType_Id+","+getApi_JointAssuredName+","+getApi_SourceSystem
			
				if(sql_Id.toString().equals(getApi_Id.toString()) && 
				(sql_TypeId.toString()).equals(getApi_TypeId.toString()) && 
				(sql_Reference.toString()).equals(getApi_Reference.toString()) && 
				(sql_CurrentStatus.toString()).equals(getApi_CurrentStatus.toString()) && 
				(sql_StorageId.toString()).equals(getApi_StorageId.toString()) && 
				(sql_IsRenewal.toString()).equals(getApi_IsRenewal.toString()) && 
				(sql_IsYacht.toString()).equals(getApi_IsYacht.toString()) && 
				(sql_RiskId.toString()).equals(getApi_RiskId.toString()) && 
				(sql_PolicyId.toString()).equals(getApi_PolicyId.toString()) && 
				(sql_MemberPartyId.toString()).equals(getApi_MemberPartyId.toString()) && 
				(sql_OwnerPartyId.toString()).equals(getApi_OwnerPartyId.toString()) && 
				(sql_BrokerPartyId.toString()).equals(getApi_BrokerPartyId.toString()) && 
				(sql_TradingCertificateVersion.toString()).equals(getApi_TradingCertificateVersion.toString()) && 
				(sql_RiskReference.toString()).equals(getApi_RiskReference.toString()) && 
				(sql_PolicyReference.toString()).equals(getApi_PolicyReference.toString()) && 
				(sql_MemberReference.toString()).equals(getApi_MemberReference.toString()) && 
				(sql_MemberType.toString()).equals(getApi_MemberType.toString()) && 
				(sql_MemberName.toString()).equals(getApi_MemberName.toString()) && 
				(sql_OwnerDomicile.toString()).equals(getApi_OwnerDomicile.toString()) && 
				(sql_OwnerEmailAddress.toString()).equals(getApi_OwnerEmailAddress.toString()) && 
				(sql_OwnerReference.toString()).equals(getApi_OwnerReference.toString()) && 
				(sql_OwnerName.toString()).equals(getApi_OwnerName.toString()) && 
				(sql_BrokerReference.toString()).equals(getApi_BrokerReference.toString()) && 
				(sql_BrokerName.toString()).equals(getApi_BrokerName.toString()) && 
				(sql_BrokerEmailAddress.toString()).equals(getApi_BrokerEmailAddress.toString()) && 
				(sql_PolicyYear.toString()).equals(getApi_PolicyYear.toString()) && 
				(sql_EmailAddress.toString()).equals(getApi_EmailAddress.toString())  && 
				(sql_CCEmailAddress.toString()).equals(getApi_CCEmailAddress.toString())  && 
				(sql_CurrencyCode.toString()).equals(getApi_CurrencyCode.toString()) && 
				(sql_CoverLimitAmount.toString()).equals(getApi_CoverLimitAmount.toString()) && 
				(sql_SignatoryState_Id.toString()).equals(getApi_SignatoryState_Id.toString()) && 
				(sql_NominatedStateFlag.toString()).equals(getApi_NominatedStateFlag.toString()) && 
				(sql_NominatedStateFlagName.toString()).equals(getApi_NominatedStateFlagName.toString()) && 
				(sql_VesselName.toString()).equals(getApi_VesselName.toString()) && 
				(sql_VesselFlag.toString()).equals(getApi_VesselFlag.toString()) && 
				(sql_VesselType.toString()).equals(getApi_VesselType.toString()) && 
				(sql_VesselTypeName.toString()).equals(getApi_VesselTypeName.toString()) && 
				(sql_PassengerCapacity.toString()).equals(getApi_PassengerCapacity.toString()) && 
				(sql_IMONumber.toString()).equals(getApi_IMONumber.toString()) && 
				(sql_EngineHorsePower.toString()).equals(getApi_EngineHorsePower.toString()) && 
				(sql_TradeMark.toString()).equals(getApi_TradeMark.toString()) && 
				(sql_Model.toString()).equals(getApi_Model.toString()) && 
				(sql_EngineNo.toString()).equals(getApi_EngineNo.toString()) && 
				(sql_TenderReferenceList.toString()).equals(getApi_TenderReferenceList.toString()) && 
				(sql_TenderOutboardReferenceList.toString()).equals(getApi_TenderOutboardReferenceList.toString()) && 
				(sql_DistinctiveNumbersOrLetters.toString()).equals(getApi_DistinctiveNumbersOrLetters.toString()) && 
				(sql_GrossTonnage.toString()).equals(getApi_GrossTonnage.toString()) && 
				(sql_YearBuilt.toString()).equals(getApi_YearBuilt.toString()) && 
				(sql_PortOfRegistry.toString()).equals(getApi_PortOfRegistry.toString()) && 
				(sql_AddressType_Id.toString()).equals(getApi_AddressType_Id.toString()) && 
				(sql_JointAssuredName.toString()).equals(getApi_JointAssuredName.toString()) && 
				(sql_SourceSystem.toString()).equals(getApi_SourceSystem.toString()) )
				{
					compareWriter.println(sql_Id +","+ getApi_Id +","+ sql_TypeId +","+ getApi_TypeId +","+ sql_Reference +","+ getApi_Reference +","+ sql_CurrentStatus +","+ getApi_CurrentStatus +","+ sql_StorageId +","+ getApi_StorageId +","+ sql_IsRenewal +","+ getApi_IsRenewal +","+ sql_IsYacht +","+ getApi_IsYacht +","+ sql_RiskId +","+ getApi_RiskId +","+ sql_PolicyId +","+ getApi_PolicyId +","+ sql_MemberPartyId +","+ getApi_MemberPartyId +","+ sql_OwnerPartyId +","+ getApi_OwnerPartyId +","+ sql_BrokerPartyId +","+ getApi_BrokerPartyId +","+ sql_TradingCertificateVersion +","+ getApi_TradingCertificateVersion +","+ sql_RiskReference +","+ getApi_RiskReference +","+ sql_PolicyReference +","+ getApi_PolicyReference +","+ sql_MemberReference +","+ getApi_MemberReference +","+ sql_MemberType +","+ getApi_MemberType +","+ sql_MemberName +","+ getApi_MemberName +","+ sql_OwnerDomicile +","+ getApi_OwnerDomicile +","+ sql_OwnerEmailAddress +","+ getApi_OwnerEmailAddress +","+ sql_OwnerReference +","+ getApi_OwnerReference +","+ sql_OwnerName +","+ getApi_OwnerName +","+ sql_BrokerReference +","+ getApi_BrokerReference +","+ sql_BrokerName +","+ getApi_BrokerName +","+ sql_BrokerEmailAddress +","+ getApi_BrokerEmailAddress +","+ sql_PolicyYear +","+ getApi_PolicyYear +","+ sql_CertificateIssueDate +","+ getApi_CertificateIssueDate +","+ sql_EmailAddress +","+ getApi_EmailAddress +","+ sql_CCEmailAddress +","+ getApi_CCEmailAddress +","+ sql_EffectiveStartDate +","+ getApi_EffectiveStartDate +","+ sql_EffectiveEndDate +","+ getApi_EffectiveEndDate +","+ sql_PolicyStartDate +","+ getApi_PolicyStartDate +","+ sql_PolicyEndDate +","+ getApi_PolicyEndDate+","+ sql_CurrencyCode +","+ getApi_CurrencyCode +","+ sql_CoverLimitAmount +","+ getApi_CoverLimitAmount +","+ sql_SignatoryState_Id +","+ getApi_SignatoryState_Id +","+ sql_NominatedStateFlag +","+ getApi_NominatedStateFlag+","+ sql_NominatedStateFlagName +","+ getApi_NominatedStateFlagName+","+ sql_VesselName +","+ getApi_VesselName +","+ sql_VesselFlag +","+ getApi_VesselFlag +","+ sql_VesselType +","+ getApi_VesselType +","+ sql_VesselTypeName +","+ getApi_VesselTypeName +","+ sql_PassengerCapacity +","+ getApi_PassengerCapacity +","+ sql_VesselEnteredDate +","+ getApi_VesselEnteredDate +","+ sql_IMONumber +","+ getApi_IMONumber +","+ sql_EngineHorsePower +","+ getApi_EngineHorsePower +","+ sql_TradeMark +","+ getApi_TradeMark +","+ sql_Model +","+ getApi_Model +","+ sql_EngineNo +","+ getApi_EngineNo +","+ sql_TenderReferenceList +","+ getApi_TenderReferenceList +","+ sql_TenderOutboardReferenceList +","+ getApi_TenderOutboardReferenceList +","+ sql_DistinctiveNumbersOrLetters +","+ getApi_DistinctiveNumbersOrLetters +","+ sql_GrossTonnage +","+ getApi_GrossTonnage +","+ sql_YearBuilt +","+ getApi_YearBuilt +","+ sql_PortOfRegistry +","+ getApi_PortOfRegistry +","+ sql_AddressType_Id +","+ getApi_AddressType_Id +","+ sql_JointAssuredName +","+ getApi_JointAssuredName +","+ sql_SourceSystem +","+ getApi_SourceSystem +","+ "Test Case Passed")
					log.info "Details are matching, hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_Id +","+ getApi_Id +","+ sql_TypeId +","+ getApi_TypeId +","+ sql_Reference +","+ getApi_Reference +","+ sql_CurrentStatus +","+ getApi_CurrentStatus +","+ sql_StorageId +","+ getApi_StorageId +","+ sql_IsRenewal +","+ getApi_IsRenewal +","+ sql_IsYacht +","+ getApi_IsYacht +","+ sql_RiskId +","+ getApi_RiskId +","+ sql_PolicyId +","+ getApi_PolicyId +","+ sql_MemberPartyId +","+ getApi_MemberPartyId +","+ sql_OwnerPartyId +","+ getApi_OwnerPartyId +","+ sql_BrokerPartyId +","+ getApi_BrokerPartyId +","+ sql_TradingCertificateVersion +","+ getApi_TradingCertificateVersion +","+ sql_RiskReference +","+ getApi_RiskReference +","+ sql_PolicyReference +","+ getApi_PolicyReference +","+ sql_MemberReference +","+ getApi_MemberReference +","+ sql_MemberType +","+ getApi_MemberType +","+ sql_MemberName +","+ getApi_MemberName +","+ sql_OwnerDomicile +","+ getApi_OwnerDomicile +","+ sql_OwnerEmailAddress +","+ getApi_OwnerEmailAddress +","+ sql_OwnerReference +","+ getApi_OwnerReference +","+ sql_OwnerName +","+ getApi_OwnerName +","+ sql_BrokerReference +","+ getApi_BrokerReference +","+ sql_BrokerName +","+ getApi_BrokerName +","+ sql_BrokerEmailAddress +","+ getApi_BrokerEmailAddress +","+ sql_PolicyYear +","+ getApi_PolicyYear +","+ sql_CertificateIssueDate +","+ getApi_CertificateIssueDate +","+ sql_EmailAddress +","+ getApi_EmailAddress +","+ sql_CCEmailAddress +","+ getApi_CCEmailAddress +","+ sql_EffectiveStartDate +","+ getApi_EffectiveStartDate +","+ sql_EffectiveEndDate +","+ getApi_EffectiveEndDate +","+ sql_PolicyStartDate +","+ getApi_PolicyStartDate +","+ sql_PolicyEndDate +","+ getApi_PolicyEndDate+","+ sql_CurrencyCode +","+ getApi_CurrencyCode +","+ sql_CoverLimitAmount +","+ getApi_CoverLimitAmount +","+ sql_SignatoryState_Id +","+ getApi_SignatoryState_Id +","+ sql_NominatedStateFlag +","+ getApi_NominatedStateFlag+","+ sql_NominatedStateFlagName +","+ getApi_NominatedStateFlagName+","+ sql_VesselName +","+ getApi_VesselName +","+ sql_VesselFlag +","+ getApi_VesselFlag +","+ sql_VesselType +","+ getApi_VesselType +","+ sql_VesselTypeName +","+ getApi_VesselTypeName +","+ sql_PassengerCapacity +","+ getApi_PassengerCapacity +","+ sql_VesselEnteredDate +","+ getApi_VesselEnteredDate +","+ sql_IMONumber +","+ getApi_IMONumber +","+ sql_EngineHorsePower +","+ getApi_EngineHorsePower +","+ sql_TradeMark +","+ getApi_TradeMark +","+ sql_Model +","+ getApi_Model +","+ sql_EngineNo +","+ getApi_EngineNo +","+ sql_TenderReferenceList +","+ getApi_TenderReferenceList +","+ sql_TenderOutboardReferenceList +","+ getApi_TenderOutboardReferenceList +","+ sql_DistinctiveNumbersOrLetters +","+ getApi_DistinctiveNumbersOrLetters +","+ sql_GrossTonnage +","+ getApi_GrossTonnage +","+ sql_YearBuilt +","+ getApi_YearBuilt +","+ sql_PortOfRegistry +","+ getApi_PortOfRegistry +","+ sql_AddressType_Id +","+ getApi_AddressType_Id +","+ sql_JointAssuredName +","+ getApi_JointAssuredName +","+ sql_SourceSystem +","+ getApi_SourceSystem +","+ "Test Case Failed")
					log.info "Details are not matching, hence test case is failed"
				}
		}
	}
	else
	{
		log.info "Failed API response received as : "+response
	}		
	counter=counter+1
	log.info "Number of records verified are : "+counter
}

sqlWriter.flush()
getApiWriter.flush()
compareWriter.flush()

sqlWriter.close()
getApiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for Get method of Trading Certificate By Certificate Id************"	]]></script></con:config></con:testStep><con:properties><con:property><con:name>tradingCertificateId</con:name><con:value>50</con:value></con:property><con:property><con:name>certId</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="ed22fe66-941d-4182-b1bb-cde88e4db185" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_SignatoryStatesByCertificateTypeIdByStates" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="SigStatesByCertTypeIdByStates" id="7bdfa7a4-3293-4223-980a-53a12c43e179"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/signatorystates/${#TestCase#tradingCertTypeId}/states" methodName="SignatoryStatesByCertificateTypeIdByStates" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SigStatesByCertTypeIdByStates" id="548e0007-78b3-450f-a79c-5fc0f48ba34e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/signatorystates/5/states</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SignatoryStatesByCertificateTypeIdByStates" id="49f660fb-fdb5-4c41-95c0-4901d6a9d235" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Signatory States By Certificate Type Id By States***********"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
	"""
	USE tradingcertificate
	SELECT
	RSS.Id as SignatoryStateId, RC.Name as CountryName, RC.ShortName, rss.type_id as TradingCertTypeId
	FROM [dbo].[ref_SignatoryState] RSS 
	inner join ref_country RC 
	on RSS.country_id = RC.Id
	order by RC.name ASC
	"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_SignatoryStatesByCertificateTypeIdByStates.csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_SignatoryStatesByCertificateTypeIdByStates.csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_SignatoryStatesByCertificateTypeIdByStates.csv"]

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_SignatoryStatesByCertificateTypeIdByStates"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_SignatoryStatesByCertificateTypeIdByStates"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_Response_SignatoryStatesByCertificateTypeIdByStates"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_SignatoryStateId"+","+"SQL_CountryName"+","+"SQL_ShortName"+","+"SQL_TradingCertTypeId")
apiWriter.println("API_SignatoryStateId"+","+"API_CountryName"+","+"API_ShortName"+","+"API_TradingCertTypeId")
compareWriter.println("SQL_SignatoryStateId"+","+"API_SignatoryStateId"+","+"SQL_CountryName"+","+"API_CountryName"+","+"SQL_ShortName"+","+"API_ShortName"+","+"SQL_TradingCertTypeId"+","+"API_TradingCertTypeId"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
String field=null
int counter=0

def rows=con.rows(sqlstmt)  
int db_size=rows.size

con.eachRow(sqlstmt)
{	
	row ->
	sql_SignatoryStateId=row.SignatoryStateId
	sql_CountryName=row.CountryName
	field=sql_CountryName
	sql_CountryName=removeComma(field)
	sql_ShortName=row.ShortName
	sql_TradingCertTypeId=row.TradingCertTypeId
	
	sqlWriter.println(sql_SignatoryStateId+","+sql_CountryName+","+sql_ShortName+","+sql_TradingCertTypeId)
	log.info "SQL Response received as :"+sql_SignatoryStateId+","+sql_CountryName+","+sql_ShortName+","+sql_TradingCertTypeId

	//Set Id as parameter to test case level
	String tradingCertTypeId = sql_TradingCertTypeId
	testRunner.testCase.setPropertyValue("tradingCertTypeId", tradingCertTypeId)
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('SigStatesByCertTypeIdByStates')
	String req='${SigStatesByCertTypeIdByStates#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["SigStatesByCertTypeIdByStates"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		for(int i=0; i<db_size; i++)
		{
			String newId = jsonRes.id[i]
			if(newId.toString().equals(sql_SignatoryStateId.toString()))
			{
				api_SignatoryStateId=jsonRes.id[i]
				api_CountryName=jsonRes.name[i]
				field=api_CountryName
				api_CountryName=removeComma(field)
				api_ShortName=jsonRes.shortCode[i]
				api_TradingCertTypeId=jsonRes.tradingCertTypeId[i]

				apiWriter.println(api_SignatoryStateId+","+api_CountryName+","+api_ShortName+","+api_TradingCertTypeId)
				log.info "API responce received as : "+api_SignatoryStateId+","+api_CountryName+","+api_ShortName+","+api_TradingCertTypeId
				
				if(api_SignatoryStateId.toString().equals(sql_SignatoryStateId.toString()) && api_CountryName.toString().toUpperCase().equals(sql_CountryName.toString().toUpperCase()) && api_ShortName.toString().toUpperCase().equals(sql_ShortName.toString().toUpperCase()) && api_TradingCertTypeId.toString().equals(sql_TradingCertTypeId.toString()))
				{
					compareWriter.println(sql_SignatoryStateId+","+api_SignatoryStateId+","+sql_CountryName+","+api_CountryName+","+sql_ShortName+","+api_ShortName+","+sql_TradingCertTypeId+","+api_TradingCertTypeId+","+"Test Case Passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_SignatoryStateId+","+api_SignatoryStateId+","+sql_CountryName+","+api_CountryName+","+sql_ShortName+","+api_ShortName+","+sql_TradingCertTypeId+","+api_TradingCertTypeId+","+"Test Case Failed")
					log.info "Details are not matching hence test case is failed"
				}
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}

	counter = 1+counter
	log.info "Total records tested are : "+counter
}

public String removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Signatory States By Certificate Type Id By States***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>tradingCertTypeId</con:name><con:value>26</con:value></con:property></con:properties></con:testCase><con:testCase id="84d1d9fa-7992-4953-9a66-ddaadbba34e4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_SignatoryStatesByStateIdByAddresses" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="SignStatesByStateIdByAddresses" id="b8c851b7-5295-41e9-a9f9-f6bfc18be24e"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/signatorystates/${#TestCase#stateId}/addresses" methodName="SignatureStatesByStateIdByAddresses" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="SignStatesByStateIdByAddresses" id="80aedd0f-e2d9-470b-a3d4-193cf0f4a57e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/signatorystates/389/addresses</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="SignatoryStatesByStateIdByAddresses" id="48d64cad-cb3f-4331-b88f-f56b44d7dbd2" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Signatory States By State Id By Addresses***********"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
	"""
	USE tradingcertificate
	SELECT
	RSS.SignatoryState_Id as SignatoryStateId, RSS.Id, RSS.AddressName, RSS.AddressLine1, RSS.AddressLine2, RSS.AddressLine3, RSS.StateOrCounty,
	RSS.City, RSS.Country, RSS.PostCode, RSS.PrimaryAddress, case when RSS.PrimaryAddress = 1 then 'True' 
	when RSS.PrimaryAddress = 0 then 'False' else NULL end as isThePrimaryAddress
	from ref_SignatoryStateAddress RSS
	order by 1 desc
	"""
	//order by 2 desc
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_SignatoryStatesByStateIdByAddresses.csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_SignatoryStatesByStateIdByAddresses.csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_SignatoryStatesByStateIdByAddresses.csv"]

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_SignatoryStatesByStateIdByAddresses"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_SignatoryStatesByStateIdByAddresses"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_Response_SignatoryStatesByStateIdByAddresses"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_SignatoryStateId"+","+"SQL_Id"+","+"SQL_AddressName"+","+"SQL_AddressLine1"+","+"SQL_AddressLine2"+","+"SQL_AddressLine3"+","+"SQL_StateOrCounty"+","+"SQL_City"+","+"SQL_Country"+","+"SQL_PostCode"+","+"SQL_PrimaryAddress"+","+"SQL_isThePrimaryAddress")
apiWriter.println("API_SignatoryStateId"+","+"API_Id"+","+"API_AddressName"+","+"API_AddressLine1"+","+"API_AddressLine2"+","+"API_AddressLine3"+","+"API_StateOrCounty"+","+"API_City"+","+"API_Country"+","+"API_PostCode"+","+"API_PrimaryAddress"+","+"API_isThePrimaryAddress")
compareWriter.println("SQL_SignatoryStateId"+","+"API_SignatoryStateId"+","+"SQL_Id"+","+"API_Id"+","+"SQL_AddressName"+","+"API_AddressName"+","+"SQL_AddressLine1"+","+"API_AddressLine1"+","+"SQL_AddressLine2"+","+"API_AddressLine2"+","+"SQL_AddressLine3"+","+"API_AddressLine3"+","+"SQL_StateOrCounty"+","+"API_StateOrCounty"+","+"SQL_City"+","+"API_City"+","+"SQL_Country"+","+"API_Country"+","+"SQL_PostCode"+","+"API_PostCode"+","+"SQL_isThePrimaryAddress"+","+"API_isThePrimaryAddress"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
String field=null
int counter=0

def rows=con.rows(sqlstmt)  
int db_size=rows.size

con.eachRow(sqlstmt)
{	
	row ->
	sql_SignatoryStateId=row.SignatoryStateId
	sql_Id=row.Id
	sql_AddressName=row.AddressName
	field = sql_AddressName
	sql_AddressName= removeCommaAndBrackets(field)
	
	sql_AddressLine1=row.AddressLine1
	field = sql_AddressLine1
	sql_AddressLine1= removeCommaAndBrackets(field)
	
	sql_AddressLine2=row.AddressLine2
	field = sql_AddressLine2
	sql_AddressLine2= removeCommaAndBrackets(field)
	
	sql_AddressLine3=row.AddressLine3
	field = sql_AddressLine3
	sql_AddressLine3= removeCommaAndBrackets(field)
	
	sql_StateOrCounty=row.StateOrCounty
	field = sql_StateOrCounty
	sql_StateOrCounty= removeCommaAndBrackets(field)
	
	sql_City=row.City
	field = sql_City
	sql_City= removeCommaAndBrackets(field)
	
	sql_Country=row.Country
	field = sql_Country
	sql_Country= removeCommaAndBrackets(field)
	
	sql_PostCode=row.PostCode
	sql_PrimaryAddress=row.PrimaryAddress
	sql_isThePrimaryAddress=row.isThePrimaryAddress

	
	sqlWriter.println(sql_SignatoryStateId+","+sql_Id+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_isThePrimaryAddress)
	log.info "SQL Response received as :"+sql_SignatoryStateId+","+sql_Id+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode+","+sql_PrimaryAddress+","+sql_isThePrimaryAddress

	//Set Id as parameter to test case level
	String stateId = sql_SignatoryStateId
	testRunner.testCase.setPropertyValue("stateId", stateId)
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('SignStatesByStateIdByAddresses')
	String req='${SignStatesByStateIdByAddresses#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["SignStatesByStateIdByAddresses"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{
		String newId = jsonRes.signatoryStateId[0]
		if((newId.toString()).equals(sql_SignatoryStateId.toString()))
		{
			api_SignatoryStateId=jsonRes.signatoryStateId
			field = api_SignatoryStateId
			api_SignatoryStateId= removeCommaAndBrackets(field)
		
			api_Id=jsonRes.id
			field = api_Id
			api_Id= removeCommaAndBrackets(field)
			
			api_AddressName=jsonRes.addressName 
			field = api_AddressName
			api_AddressName= removeCommaAndBrackets(field)
				
			api_AddressLine1=jsonRes.addressLine1 
			field = api_AddressLine1
			api_AddressLine1= removeCommaAndBrackets(field)
			
			api_AddressLine2=jsonRes.addressLine2 
			field = api_AddressLine2
			api_AddressLine2= removeCommaAndBrackets(field)
			
			api_AddressLine3=jsonRes.addressLine3 
			field = api_AddressLine3
			api_AddressLine3= removeCommaAndBrackets(field)
			
			api_StateOrCounty=jsonRes.stateOrCounty 
			field = api_StateOrCounty
			api_StateOrCounty= removeCommaAndBrackets(field)
			
			api_City=jsonRes.city 
			field = api_City
			api_City= removeCommaAndBrackets(field)
			
			api_Country=jsonRes.country 
			field = api_Country
			api_Country= removeCommaAndBrackets(field)
			
			api_PostCode=jsonRes.postCode 
			field = api_PostCode
			api_PostCode= removeCommaAndBrackets(field)
			
			api_isThePrimaryAddress=jsonRes.primaryAddress
			field = api_isThePrimaryAddress
			api_isThePrimaryAddress= removeCommaAndBrackets(field) 

			apiWriter.println(api_SignatoryStateId+","+api_Id+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_isThePrimaryAddress)
			log.info "API responce received as : "+api_SignatoryStateId+","+api_Id+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode+","+api_isThePrimaryAddress
				
			if(api_SignatoryStateId.toString().equals(sql_SignatoryStateId.toString()) && api_Id.toString().equals(sql_Id.toString()) && api_AddressName.toString().toUpperCase().equals(sql_AddressName.toString().toUpperCase()) && api_AddressLine1.toString().toUpperCase().equals(sql_AddressLine1.toString().toUpperCase()) && api_AddressLine2.toString().toUpperCase().equals(sql_AddressLine2.toString().toUpperCase()) && api_AddressLine3.toString().toUpperCase().equals(sql_AddressLine3.toString().toUpperCase()) && api_StateOrCounty.toString().toUpperCase().equals(sql_StateOrCounty.toString().toUpperCase()) && api_City.toString().toUpperCase().equals(sql_City.toString().toUpperCase()) && api_Country.toString().toUpperCase().equals(sql_Country.toString().toUpperCase()) && api_PostCode.toString().toUpperCase().equals(sql_PostCode.toString().toUpperCase()) && api_isThePrimaryAddress.toString().toUpperCase().equals(sql_isThePrimaryAddress.toString().toUpperCase()))
			{
				compareWriter.println(sql_SignatoryStateId+","+api_SignatoryStateId+","+sql_Id+","+api_Id+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_isThePrimaryAddress+","+api_isThePrimaryAddress+","+"Test Case Passed")
				log.info "Details are matching hence test case is passed"
			}
			else
			{
				compareWriter.println(sql_SignatoryStateId+","+api_SignatoryStateId+","+sql_Id+","+api_Id+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+sql_isThePrimaryAddress+","+api_isThePrimaryAddress+","+"Test Case Failed")
				log.info "Details are not matching hence test case is failed"
			}
		}
	}
	else
	{
		compareWriter.println("Failed API response is received : "+response)
		log.info "Failed API response is received : "+response
	}
	counter = 1+counter
	log.info "Total records tested are : "+counter
}

public String  removeCommaAndBrackets(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Signatory States By State Id By Addresses***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>stateId</con:name><con:value>1</con:value></con:property></con:properties></con:testCase><con:testCase id="01bbd3b5-41a8-4f22-b188-7930c2f19dda" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_Reference​ByTradingCertificateTypes​ByTCGroupCode" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Ref​ByTradingCertificateTypes​ByTCGroupCode" id="600c4bb6-9b1f-4487-b021-0a1c67802820"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/tradingCertificateTypes/${#TestCase#groupCode}" methodName="Reference​ByTradingCertificateTypes​ByTCGroupCode" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Ref​ByTradingCertificateTypes​ByTCGroupCode" id="60b9e02d-c099-459f-8e3b-2e6d2d42d309" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Reference​ByTradingCertificateTypes​ByTCGroupCode" id="891bd34f-9ab9-4fd6-9015-ec2f471fb9ea" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
//import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Trading Certificate Types By Group************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
	"""
	USE tradingcertificate 
	SELECT
	RT.Id as TradingCertificateTypeId, RG.Id as TradingCertificateGroupId, RG.GroupCode, RG.Name as TradingCertificateGroupName, RT.TypeCode, RT.Name
	from ref_Group RG
	inner join ref_Type RT on RT.Group_Id =RG.ID
	"""
	
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateTypesByGroup.csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateTypesByGroup.csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceByTradingCertificateTypesByGroup.csv"]

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateTypesByGroup"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateTypesByGroup"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_Response_ReferenceByTradingCertificateTypesByGroup"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"SQL_GroupCode"+","+"SQL_TradingCertificateGroupName"+","+"SQL_TypeCode"+","+"SQL_Name")
apiWriter.println("API_TradingCertificateTypeId"+","+"API_TradingCertificateGroupId"+","+"API_GroupCode"+","+"API_TradingCertificateGroupName"+","+"API_TypeCode"+","+"API_Name")
compareWriter.println("SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"API_TradingCertificateGroupId"+","+"SQL_GroupCode"+","+"API_GroupCode"+","+"SQL_TradingCertificateGroupName"+","+"API_TradingCertificateGroupName"+","+"SQL_TypeCode"+","+"API_TypeCode"+","+"SQL_Name"+","+"API_Name"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter = 0
String field=null

def rows=con.rows(sqlstmt)  
int db_size=rows.size
//log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->

	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateGroupId=row.TradingCertificateGroupId
	sql_GroupCode=row.GroupCode
	sql_TradingCertificateGroupName=row.TradingCertificateGroupName
	sql_TypeCode=row.TypeCode
	sql_Name=row.Name
	
	sqlWriter.println(sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_GroupCode+","+sql_TradingCertificateGroupName+","+sql_TypeCode+","+sql_Name)
	log.info "SQL Response received as :"+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_GroupCode+","+sql_TradingCertificateGroupName+","+sql_TypeCode+","+sql_Name

	//Set Id as parameter to test case level
	String groupCode = sql_GroupCode
	testRunner.testCase.setPropertyValue("groupCode", groupCode)
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	testRunner.runTestStepByName('Ref​ByTradingCertificateTypes​ByTCGroupCode')
	String req='${Ref​ByTradingCertificateTypes​ByTCGroupCode#Response}'
	response=context.expand(req)
	log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["Ref​ByTradingCertificateTypes​ByTCGroupCode"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		for(int i=0; i<db_size; i++)
		{
			String newId = jsonRes.id[i]
			//log.info "newId : "+newId
			if(newId.toString().equals(sql_TradingCertificateTypeId.toString()))
			{
				api_TradingCertificateTypeId=jsonRes.id[i]
				api_TradingCertificateGroupId=jsonRes.tradingCertificateGroup.id[i]
				api_TradingCertificateGroupName=jsonRes.tradingCertificateGroup.name[i]
				api_TypeCode=jsonRes.typeCode[i]
				api_Name=jsonRes.typeName[i]

				apiWriter.println(api_TradingCertificateTypeId+","+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_TypeCode+","+api_Name)
				log.info "API responce received as : "+api_TradingCertificateTypeId+","+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_TypeCode+","+api_Name
				
				if(sql_TradingCertificateTypeId.toString().equals(api_TradingCertificateTypeId.toString()) && sql_TradingCertificateGroupId.toString().equals(api_TradingCertificateGroupId.toString()) && sql_TradingCertificateGroupName.toString().toUpperCase().equals(api_TradingCertificateGroupName.toString().toUpperCase()) && sql_TypeCode.toString().toUpperCase().equals(api_TypeCode.toString().toUpperCase()) && sql_Name.toString().toUpperCase().equals(api_Name.toString().toUpperCase()))
				{
					compareWriter.println(sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_GroupCode+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TypeCode+","+api_TypeCode+","+sql_Name+","+api_Name+","+"Test Case Passed")
					log.info "Details are matching hence test case is passed"
					break;
				}
				else
				{
					compareWriter.println(sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_GroupCode+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TypeCode+","+api_TypeCode+","+sql_Name+","+api_Name+","+"Test Case Failed")
					log.info "Details are not matching hence test case is failed"
					break;
				}
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}	
	counter = 1+counter
	log.info "Total records tested are : "+counter
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Trading Certificate Types By Group***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>groupCode</con:name><con:value>TRADECERT</con:value></con:property></con:properties></con:testCase><con:testCase id="40d5050c-f405-4c9f-b55b-70469486a322" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_ReferenceByTradingcertificateGroups" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RefByTradingcertificateGroups" id="97b34bf5-e931-41e7-a294-98ed93400f4d"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/tradingcertificateGroups" methodName="ReferenceByTradingcertificateGroups" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByTradingcertificateGroups" id="97941379-c7e0-4c02-b2a6-33c967b4e981" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/tradingcertificateGroups</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceByTradingcertificateGroups" id="7cbece6d-384f-4dcb-913a-7a66220ba9f3" disabled="true"><con:settings/><con:config><script>import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Trading Certificate Groups************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
	"""
	USE tradingcertificate
	Select Id as TradingCertificateGroupId, Name as TradingCertificateGroupName
	from ref_Group
	"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateGroups.csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateGroups.csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceByTradingCertificateGroups.csv"]

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateGroups"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateGroups"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_Response_ReferenceByTradingCertificateGroups"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName")
apiWriter.println("API_TradingCertificateGroupId"+","+"API_TradingCertificateGroupName")
compareWriter.println("SQL_TradingCertificateGroupId"+","+"API_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"API_TradingCertificateGroupName"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

def rows=con.rows(sqlstmt)  
int db_size=rows.size
//log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->
	sql_TradingCertificateGroupId=row.TradingCertificateGroupId
	sql_TradingCertificateGroupName=row.TradingCertificateGroupName
	
	sqlWriter.println(sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName)
	log.info "SQL Response received as :"+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('RefByTradingcertificateGroups')
	String req='${RefByTradingcertificateGroups#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefByTradingcertificateGroups"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		for(int i=0; i&lt;db_size; i++)
		{
			String newId = jsonRes.id[i]
			if(newId.toString().equals(sql_TradingCertificateGroupId.toString()))
			{
				api_TradingCertificateGroupId=jsonRes.id[i]
				api_TradingCertificateGroupName=jsonRes.name[i]
	
				apiWriter.println(api_TradingCertificateGroupId+","+api_TradingCertificateGroupName)
				log.info "API responce received as : "+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName
				
				if(api_TradingCertificateGroupId.toString().equals(sql_TradingCertificateGroupId.toString()) &amp;&amp; api_TradingCertificateGroupName.toString().toUpperCase().equals(sql_TradingCertificateGroupName.toString().toUpperCase()))
				{
					compareWriter.println(sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+"Test Case Passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+"Test Case Failed")
					log.info "Details are not matching hence test case is failed"
				}
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Trading Certificate Groups***********"</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="e9fecff0-a9c6-47b2-afdb-898b0bab53fd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GET_ReferenceByTradingCertificateTypes" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RefByTradingCertificateTypes" id="f71b1661-e11d-4afd-9d0f-aa2d89c2720b"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/tradingCertificateTypes" methodName="ReferenceByTradingCertificateTypes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByTradingCertificateTypes" id="4834d0ff-353d-4c82-a971-63332f818c10" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/tradingCertificateTypes</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="sortAttribute" value="typeCode" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>sortAttribute</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceByTradingCertificateTypes" id="d02b3ef0-28b5-4486-a2fe-4126282b0bb7" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Trading Certificate Types************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

String sqlstmt=
		"""
	USE tradingcertificate
	SELECT
	T.Id as TradingCertificateTypeId, T.Group_Id as TradingCertificateGroupId, G.Name as TradingCertificateGroupName , T.TypeCode, 
	T.Name as TradingCertificateTypeName
	from dbo.ref_Type as T
	left join dbo.ref_Group G on G.Id=T.Group_Id
	order by t.TypeCode	
		"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateTypes.csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateTypes.csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceByTradingCertificateTypes.csv"]

def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateTypes"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateTypes"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceByTradingCertificateTypes"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"SQL_TypeCode"+","+"SQL_TradingCertificateTypeName")
apiWriter.println("API_TradingCertificateTypeId"+","+"API_TradingCertificateGroupId"+","+"API_TradingCertificateGroupName"+","+"API_TypeCode"+","+"API_TradingCertificateTypeName")
compareWriter.println("SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"API_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"API_TradingCertificateGroupName"+","+"SQL_TypeCode"+","+"API_TypeCode"+","+"SQL_TradingCertificateTypeName"+","+"API_TradingCertificateTypeName"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter=0

def rows=con.rows(sqlstmt)  
int db_size=rows.size
log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateGroupId=row.TradingCertificateGroupId
	sql_TradingCertificateGroupName=row.TradingCertificateGroupName
	sql_TypeCode=row.TypeCode
	sql_TradingCertificateTypeName=row.TradingCertificateTypeName
	
	sqlWriter.println(sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TypeCode+","+sql_TradingCertificateTypeName)
	log.info "SQL Response received as :"+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TypeCode+","+sql_TradingCertificateTypeName
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	//Run the test Step with name
	testRunner.runTestStepByName('RefByTradingCertificateTypes')
	String req='${RefByTradingCertificateTypes#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefByTradingCertificateTypes"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		for(int i=0; i<db_size; i++)
		{
			String newId = jsonRes.id[i]
			if(newId.toString().equals(sql_TradingCertificateTypeId.toString()))
			{
				api_TradingCertificateTypeId=jsonRes.id[i]
				api_TradingCertificateGroupId=jsonRes.tradingCertificateGroup.id[i]
				api_TradingCertificateGroupName=jsonRes.tradingCertificateGroup.name[i]
				api_TypeCode=jsonRes.typeCode[i]
				api_TradingCertificateTypeName=jsonRes.typeName[i]
	
				apiWriter.println(api_TradingCertificateTypeId+","+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_TypeCode+","+api_TradingCertificateTypeName)
				log.info "API responce received as : "+api_TradingCertificateTypeId+","+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_TypeCode+","+api_TradingCertificateTypeName
				
				if(api_TradingCertificateTypeId.toString().equals(sql_TradingCertificateTypeId.toString()) && api_TradingCertificateGroupId.toString().equals(sql_TradingCertificateGroupId.toString()) && api_TradingCertificateGroupName.toString().toUpperCase().equals(sql_TradingCertificateGroupName.toString().toUpperCase()) && api_TypeCode.toString().toUpperCase().equals(sql_TypeCode.toString().toUpperCase()) && api_TradingCertificateTypeName.toString().toUpperCase().equals(sql_TradingCertificateTypeName.toString().toUpperCase()))
				{
					compareWriter.println(sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TypeCode+","+api_TypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+"Test Case Passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_TypeCode+","+api_TypeCode+","+sql_TradingCertificateTypeName+","+api_TradingCertificateTypeName+","+"Test Case Failed")
					log.info "Details are not matching hence test case is failed"
				}
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
	counter = 1+counter
	log.info "Total records tested are : "+counter
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Trading Certificate Types***********"]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5e440ef1-1151-44dc-bf38-1cb62fcfbed3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OnHOLD_TC_TradingCertificateValidationByCertificateId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="TradingCertificateValidationByCertificateId" id="ff082a52-a3f1-469b-8db1-3b5db3dd57b9" disabled="true"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/tradingcertificates/${#TestCase#certId}/validate" methodName="TradingCertificateValidationByCertificateId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="TradingCertificateValidationByCertificateId" id="6b80ff43-31b3-4de7-847a-a9bf7ff7a005" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="tradingCertificateId" value="tradingCertificateId" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>tradingCertificateId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="TradingCertificateValidationByCertId" id="54938c20-2324-4055-b1f7-b8faf2451abb" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat
import com.eviware.soapui.support.types.StringToStringMap 

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
//	String dateForApp = newDateTimeString
//	dateForApp= dateForApp.replace("-","")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for Get method of Trading Certificate Validation By Certificate Id************"

//com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("com.microsoft.sqlserver.jdbc.SQLServerDriver")
driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt =
"""
	Use tradingcertificate
	Select Id, Type_Id, Reference, CurrentStatus, StorageId, IsRenewal, IsYacht, RiskId, VesselId, 
	PolicyId, MemberPartyId, OwnerPartyId, BrokerPartyId, TradingCertificateVersion, 
	RiskReference, VesselReference, PolicyReference, MemberReference, MemberType, 
	MemberName, OwnerDomicile, OwnerEmailAddress, OwnerReference, OwnerName, 
	BrokerReference, BrokerName, BrokerEmailAddress, policyYear, EmailAddress, 
	CurrencyCode, SignatoryState_Id, VesselName, VesselFlag, VesselType, VesselTypeName, 
	PassengerCapacity, IMONumber, EngineHorsePower, TradeMark, Model, EngineNo, 
	TenderReferenceList, TenderOutboardReferenceList, DistinctiveNumbersOrLetters, GrossTonnage, 
	YearBuilt, PortOfRegistry, AddressType_Id, JointAssuredName, ProductType,
	riskReference, case when riskReference = 'NULL' then 'True' else 'False' end as isRiskReference
	policyYear, case when policyYear = 'NULL' then 'True' else 'False' end as isPolicyYear
	policyStartDate, case when policyStartDate = 'NULL' then 'True' else 'False' end as ispolicyStartDate
	policyEndDate, case when policyEndDate = 'NULL' then 'True' else 'False' end as ispolicyEndDate
	nominatedFlagStateName, case when  = 'NULL' then 'True' else 'False' end as isnominatedFlagStateName
	memberName, case when memberName = 'NULL' then 'True' else 'False' end as ismemberName
	From TradingCertificate TC

"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQLResponse_TradingCertificateValidationByCertificateId.csv"]
def getApiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\APIResponse_TradingCertificateValidationByCertificateId.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_TradingCertificateValidationByCertificateId.csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def getApiFile = new File(getApiResponseFile[0])
def getApiWriter = getApiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_Id"+","+"SQL_TypeId"+","+"SQL_Reference"+","+"SQL_CurrentStatus"+","+"SQL_StorageId"+","+"SQL_IsRenewal"+","+"SQL_IsYacht"+","+"SQL_RiskId"+","+"SQL_VesselId"+","+"SQL_PolicyId"+","+"SQL_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"SQL_BrokerPartyId"+","+"SQL_TradingCertificateVersion"+","+"SQL_RiskReference"+","+"SQL_VesselReference"+","+"SQL_PolicyReference"+","+"SQL_MemberReference"+","+"SQL_MemberType"+","+"SQL_MemberName"+","+"SQL_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"SQL_OwnerReference"+","+"SQL_OwnerName"+","+"SQL_BrokerReference"+","+"SQL_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"SQL_policyYear"+","+"SQL_EmailAddress"+","+"SQL_CurrencyCode"+","+"SQL_SignatoryState_Id"+","+"SQL_VesselName"+","+"SQL_VesselFlag"+","+"SQL_VesselType"+","+"SQL_VesselTypeName"+","+"SQL_PassengerCapacity"+","+"SQL_IMONumber"+","+"SQL_EngineHorsePower"+","+"SQL_TradeMark"+","+"SQL_Model"+","+"SQL_EngineNo"+","+"SQL_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"SQL_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"SQL_YearBuilt"+","+"SQL_PortOfRegistry"+","+"SQL_AddressType_Id"+","+"SQL_JointAssuredName"+","+"SQL_ProductType"+","+"SQL_SourceSystem")
getApiWriter.println("GET_API_Id"+","+"GET_API_addressTypeId"+","+"GET_API_riskId"+","+"GET_API_vesselId"+","+"GET_API_policyId"+","+"GET_API_memberPartyId"+","+"GET_API_ownerPartyId"+","+"GET_API_brokerPartyId"+","+"GET_API_version"+","+"GET_API_tradingCertificateTypeId"+","+"GET_API_tradingCertificateGroupId"+","+"GET_API_tradingCertificateGroupName"+","+"GET_API_tradingCertificateGroupCode"+","+"GET_API_stateAddressId"+","+"GET_API_ownerAddressId"+","+"GET_API_brokerAddressId"+","+"GET_API_memberAddressId"+","+"GET_API_jointAssuredAddressId")
compareWriter.println("SQL_Id"+","+"GET_API_Id"+","+"SQL_TypeId"+","+"GET_API_TypeId"+","+"SQL_Reference"+","+"GET_API_Reference"+","+"SQL_CurrentStatus"+","+"GET_API_CurrentStatus"+","+"SQL_StorageId"+","+"GET_API_StorageId"+","+"SQL_IsRenewal"+","+"GET_API_IsRenewal"+","+"SQL_IsYacht"+","+"GET_API_IsYacht"+","+"SQL_RiskId"+","+"GET_API_RiskId"+","+"SQL_VesselId"+","+"GET_API_VesselId"+","+"SQL_PolicyId"+","+"GET_API_PolicyId"+","+"SQL_MemberPartyId"+","+"GET_API_MemberPartyId"+","+"SQL_OwnerPartyId"+","+"GET_APIOwnerPartyId_"+","+"SQL_BrokerPartyId"+","+"GET_API_BrokerPartyId"+","+"SQL_TradingCertificateVersion"+","+"GET_API_TradingCertificateVersion"+","+"SQL_RiskReference"+","+"GET_API_RiskReference"+","+"SQL_VesselReference"+","+"GET_API_VesselReference"+","+"SQL_PolicyReference"+","+"GET_API_PolicyReference"+","+"SQL_MemberReference"+","+"GET_API_MemberReference"+","+"SQL_MemberType"+","+"GET_API_MemberType"+","+"SQL_MemberName"+","+"GET_API_MemberName"+","+"SQL_OwnerDomicile"+","+"GET_API_OwnerDomicile"+","+"SQL_OwnerEmailAddress"+","+"GET_API_OwnerEmailAddress"+","+"SQL_OwnerReference"+","+"GET_API_OwnerReference"+","+"SQL_OwnerName"+","+"GET_API_OwnerName"+","+"SQL_BrokerReference"+","+"GET_API_BrokerReference"+","+"SQL_BrokerName"+","+"GET_API_BrokerName"+","+"SQL_BrokerEmailAddress"+","+"GET_API_BrokerEmailAddress"+","+"SQL_policyYear"+","+"GET_API_policyYear"+","+"SQL_EmailAddress"+","+"GET_API_EmailAddress"+","+"SQL_CurrencyCode"+","+"GET_API_CurrencyCode"+","+"SQL_SignatoryState_Id"+","+"GET_API_SignatoryState"+","+"SQL_VesselName"+","+"GET_API_VesselName"+","+"SQL_VesselFlag"+","+"GET_API_VesselFlag"+","+"SQL_VesselType"+","+"GET_API_VesselType"+","+"SQL_VesselTypeName"+","+"GET_API_VesselTypeName"+","+"SQL_PassengerCapacity"+","+"GET_API_PassengerCapacity"+","+"SQL_IMONumber"+","+"GET_API_IMONumber"+","+"SQL_EngineHorsePower"+","+"GET_API_EngineHorsePower"+","+"SQL_TradeMark"+","+"GET_API_TradeMark"+","+"SQL_Model"+","+"GET_API_Model"+","+"SQL_EngineNo"+","+"GET_API_EngineNo"+","+"SQL_TenderReferenceList"+","+"GET_API_TenderReferenceList"+","+"SQL_TenderOutboardReferenceList"+","+"GET_API_TenderOutboardReferenceList"+","+"SQL_DistinctiveNumbersOrLetters"+","+"GET_API_DistinctiveNumbersOrLetters"+","+"SQL_GrossTonnage"+","+"GET_API_GrossTonnage"+","+"SQL_YearBuilt"+","+"GET_API_YearBuilt"+","+"SQL_PortOfRegistry"+","+"GET_API_PortOfRegistry"+","+"SQL_AddressType_Id"+","+"GET_API_AddressType_Id"+","+"SQL_JointAssuredName"+","+"GET_API_JointAssuredName"+","+"SQL_ProductType"+","+"GET_API_ProductType"+","+"SQL_SourceSystem"+","+"GET_API_SourceSystem"+","+"Result")

def response= null
def jsonSlurper=null
def jsonResp=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
	sql_Id=row.Id
	sql_TypeId=row.Type_Id
	sql_Reference=row.Reference
	sql_CurrentStatus=row.CurrentStatus
	sql_StorageId=row.StorageId
	sql_IsRenewal=row.IsRenewal
	sql_IsYacht=row.IsYacht
	sql_RiskId=row.RiskId
	sql_VesselId=row.VesselId
	sql_PolicyId=row.PolicyId
	sql_MemberPartyId=row.MemberPartyId
	sql_OwnerPartyId=row.OwnerPartyId
	sql_BrokerPartyId=row.BrokerPartyId
	sql_TradingCertificateVersion=row.TradingCertificateVersion
	sql_RiskReference=row.RiskReference
	sql_VesselReference=row.VesselReference
	sql_PolicyReference=row.PolicyReference
	sql_MemberReference=row.MemberReference
	sql_MemberType=row.MemberType
	sql_MemberName=row.MemberName
	sql_OwnerDomicile=row.OwnerDomicile
	sql_OwnerEmailAddress=row.OwnerEmailAddress
	sql_OwnerReference=row.OwnerReference
	sql_OwnerName=row.OwnerName
	sql_BrokerReference=row.BrokerReference
	sql_BrokerName=row.BrokerName
	sql_BrokerEmailAddress=row.BrokerEmailAddress
	sql_PolicyYear=row.PolicyYear
	sql_EmailAddress=row.EmailAddress
	sql_CurrencyCode=row.CurrencyCode
	sql_SignatoryState_Id=row.SignatoryState_Id
	sql_VesselName=row.VesselName
	sql_VesselFlag=row.VesselFlag
	sql_VesselType=row.VesselType
	sql_VesselTypeName=row.VesselTypeName
	sql_PassengerCapacity=row.PassengerCapacity
	sql_IMONumber=row.IMONumber
	sql_EngineHorsePower=row.EngineHorsePower
	sql_TradeMark=row.TradeMark
	sql_Model=row.Model
	sql_EngineNo=row.EngineNo
	sql_TenderReferenceList=row.TenderReferenceList
	sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
	sql_DistinctiveNumbersOrLetters=row.DistinctiveNumbersOrLetters
	sql_GrossTonnage=row.GrossTonnage
	sql_YearBuilt=row.YearBuilt
	sql_PortOfRegistry=row.PortOfRegistry
	sql_AddressType_Id=row.AddressType_Id
	sql_JointAssuredName=row.JointAssuredName
	sql_ProductType=row.ProductType
	sql_SourceSystem=row.SourceSystem

	
	sqlWriter.println(sql_Id+","+sql_TypeId+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_RiskId+","+sql_VesselId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_TradingCertificateVersion+","+sql_RiskReference+","+sql_VesselReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_OwnerReference+","+sql_OwnerName+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_policyYear+","+sql_EmailAddress+","+sql_CurrencyCode+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselFlag+","+sql_VesselType+","+sql_VesselTypeName+","+sql_PassengerCapacity+","+sql_IMONumber+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_PortOfRegistry+","+sql_AddressType_Id+","+sql_JointAssuredName+","+sql_ProductType+","+sql_SourceSystem)
	log.info "SQL Response is : "+sql_Id+","+sql_TypeId+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_RiskId+","+sql_VesselId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_TradingCertificateVersion+","+sql_RiskReference+","+sql_VesselReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_OwnerReference+","+sql_OwnerName+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_policyYear+","+sql_EmailAddress+","+sql_CurrencyCode+","+sql_SignatoryState_Id+","+sql_VesselName+","+sql_VesselFlag+","+sql_VesselType+","+sql_VesselTypeName+","+sql_PassengerCapacity+","+sql_IMONumber+","+sql_EngineHorsePower+","+sql_TradeMark+","+sql_Model+","+sql_EngineNo+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_DistinctiveNumbersOrLetters+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_PortOfRegistry+","+sql_AddressType_Id+","+sql_JointAssuredName+","+sql_ProductType+","+sql_SourceSystem


	//Set the Token at test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	String certId=sql_id
	testRunner.testCase.setPropertyValue( "certId", certId)
			
	//Run the test step to get response
	testRunner.runTestStepByName('TradingCertificateByCertificateId')
	String req1='${TradingCertificateByCertificateId#Response}'
	response=context.expand(req1)
	//log.info "API Response for GET method after post received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	httpResponseHeaders = context.testCase.testSteps["TradingCertificateByCertificateId"].testRequest.response.responseHeaders
	httpStatus = httpResponseHeaders["#status#"]
	httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)


	String getApi_isRiskReference = "False"
	String getApi_isPolicyYear = "False"
	String getApi_isPolicyStartDate = "False"
	String getApi_isNominatedFlagStateName = "False"
	String getApi_isMemberName = "False"

	String error = response
	if(httpStatusCode.equals("200"))
	{
		if (!jsonRes.HasError)
		{
				getApi_Id=jsonRes.tradingCertificateId
				getApi_RiskReference=jsonRes.riskReference
				getApi_TradingCertificateType=jsonRes.tradingCertificateType
				getApi_isValid=jsonRes.isValid

				for(int i=0; jsonRes.errors[i]!= null; i++)
				{
					if(jsonRes.errors[i].toString() == "'Risk Reference' must not be empty." && jsonRes.riskReference == null)
					{
						getApi_isRiskReference = "True"
						break;
					}

					else if(jsonRes.errors[i].toString() == "'Policy Year' must not be empty.")
					{
						getApi_isPolicyYear = "True"
						break;
					}
					else if(json.errors[i].toString() == "'Policy Start Date' must not be empty.")
					{
						getApi_isPolicyStartDate = "True"
						break;
					}
					else if(json.errors[i].toString() == "'Policy End Date' must not be empty.")
					{
						getApi_isPolicyEndDate = "True"
						break;
					}
					else if(json.errors[i].toString() == "'Nominated Flag State Name' must not be empty.")
					{
						getApi_isNominatedFlagStateName = "True"
						break;
					}
					else if(json.errors[i].toString() == "'Member Name' must not be empty.")
					{
						getApi_isMemberName = "True"
						break;
					}
				}


			
				getApiWriter.println(getApi_Id+","+getApi_RiskReference+","+getApi_TradingCertificateType+","+getApi_isValid+","+getApi_isRiskReference+","+getApi_isPolicyYear+","+getApi_isPolicyStartDate+","+getApi_isPolicyEndDate+","+getApi_isNominatedFlagStateName+","+getApi_isMemberName+","+getApi_MemberPartyId+","+getApi_OwnerPartyId+","+getApi_BrokerPartyId+","+getApi_TradingCertificateVersion+","+getApi_RiskReference+","+getApi_VesselReference+","+getApi_PolicyReference+","+getApi_MemberReference+","+getApi_MemberType+","+getApi_MemberName+","+getApi_OwnerDomicile+","+getApi_OwnerEmailAddress+","+getApi_OwnerReference+","+getApi_OwnerName+","+getApi_BrokerReference+","+getApi_BrokerName+","+getApi_BrokerEmailAddress+","+getApi_policyYear+","+getApi_EmailAddress+","+getApi_CurrencyCode+","+getApi_SignatoryState_Id+","+getApi_VesselName+","+getApi_VesselFlag+","+getApi_VesselType+","+getApi_VesselTypeName+","+getApi_PassengerCapacity+","+getApi_IMONumber+","+getApi_EngineHorsePower+","+getApi_TradeMark+","+getApi_Model+","+getApi_EngineNo+","+getApi_TenderReferenceList+","+getApi_TenderOutboardReferenceList+","+getApi_DistinctiveNumbersOrLetters+","+getApi_GrossTonnage+","+getApi_YearBuilt+","+getApi_PortOfRegistry+","+getApi_AddressType_Id+","+getApi_JointAssuredName+","+getApi_ProductType+","+getApi_SourceSystem)
				log.info "API Response is :" +getApi_Id+","+getApi_RiskReference+","+getApi_TradingCertificateType+","+getApi_isValid+","+getApi_isRiskReference+","+getApi_isPolicyYear+","+getApi_isPolicyStartDate+","+getApi_isPolicyEndDate+","+getApi_isNominatedFlagStateName+","+getApi_isMemberName+","+getApi_MemberPartyId+","+getApi_OwnerPartyId+","+getApi_BrokerPartyId+","+getApi_TradingCertificateVersion+","+getApi_RiskReference+","+getApi_VesselReference+","+getApi_PolicyReference+","+getApi_MemberReference+","+getApi_MemberType+","+getApi_MemberName+","+getApi_OwnerDomicile+","+getApi_OwnerEmailAddress+","+getApi_OwnerReference+","+getApi_OwnerName+","+getApi_BrokerReference+","+getApi_BrokerName+","+getApi_BrokerEmailAddress+","+getApi_policyYear+","+getApi_EmailAddress+","+getApi_CurrencyCode+","+getApi_SignatoryState_Id+","+getApi_VesselName+","+getApi_VesselFlag+","+getApi_VesselType+","+getApi_VesselTypeName+","+getApi_PassengerCapacity+","+getApi_IMONumber+","+getApi_EngineHorsePower+","+getApi_TradeMark+","+getApi_Model+","+getApi_EngineNo+","+getApi_TenderReferenceList+","+getApi_TenderOutboardReferenceList+","+getApi_DistinctiveNumbersOrLetters+","+getApi_GrossTonnage+","+getApi_YearBuilt+","+getApi_PortOfRegistry+","+getApi_AddressType_Id+","+getApi_JointAssuredName+","+getApi_ProductType+","+getApi_SourceSystem
			
				if(sql_Id.toString().equals(getApi_Id.toString()) && (sql_TypeId.toString()).equals(getApi_TypeId.toString()) && (sql_Reference.toString()).equals(getApi_Reference.toString()) && (sql_CurrentStatus.toString()).equals(getApi_CurrentStatus.toString()) && (sql_StorageId.toString()).equals(getApi_StorageId.toString()) && (sql_IsRenewal.toString()).equals(getApi_IsRenewal.toString()) && (sql_IsYacht.toString()).equals(getApi_IsYacht.toString()) && (sql_RiskId.toString()).equals(getApi_RiskId.toString()) && (sql_VesselId.toString()).equals(getApi_VesselId.toString()) && (sql_PolicyId.toString()).equals(getApi_PolicyId.toString()) && (sql_MemberPartyId.toString()).equals(getApi_MemberPartyId.toString()) && (sql_OwnerPartyId.toString()).equals(getApiOwnerPartyId_.toString()) && (sql_BrokerPartyId.toString()).equals(getApi_BrokerPartyId.toString()) && (sql_TradingCertificateVersion.toString()).equals(getApi_TradingCertificateVersion.toString()) && (sql_RiskReference.toString()).equals(getApi_RiskReference.toString()) && (sql_VesselReference.toString()).equals(getApi_VesselReference.toString()) && (sql_PolicyReference.toString()).equals(getApi_PolicyReference.toString()) && (sql_MemberReference.toString()).equals(getApi_MemberReference.toString()) && (sql_MemberType.toString()).equals(getApi_MemberType.toString()) && (sql_MemberName.toString()).equals(getApi_MemberName.toString()) && (sql_OwnerDomicile.toString()).equals(getApi_OwnerDomicile.toString()) && (sql_OwnerEmailAddress.toString()).equals(getApi_OwnerEmailAddress.toString()) && (sql_OwnerReference.toString()).equals(getApi_OwnerReference.toString()) && (sql_OwnerName.toString()).equals(getApi_OwnerName.toString()) && (sql_BrokerReference.toString()).equals(getApi_BrokerReference.toString()) && (sql_BrokerName.toString()).equals(getApi_BrokerName.toString()) && (sql_BrokerEmailAddress.toString()).equals(getApi_BrokerEmailAddress.toString()) && (sql_policyYear.toString()).equals(getApi_policyYear.toString()) && (sql_EmailAddress.toString()).equals(getApi_EmailAddress.toString()) && (sql_CurrencyCode.toString()).equals(getApi_CurrencyCode.toString()) && (sql_SignatoryState_Id.toString()).equals(getApi_SignatoryState.toString()) && (sql_VesselName.toString()).equals(getApi_VesselName.toString()) && (sql_VesselFlag.toString()).equals(getApi_VesselFlag.toString()) && (sql_VesselType.toString()).equals(getApi_VesselType.toString()) && (sql_VesselTypeName.toString()).equals(getApi_VesselTypeName.toString()) && (sql_PassengerCapacity.toString()).equals(getApi_PassengerCapacity.toString()) && (sql_IMONumber.toString()).equals(getApi_IMONumber.toString()) && (sql_EngineHorsePower.toString()).equals(getApi_EngineHorsePower.toString()) && (sql_TradeMark.toString()).equals(getApi_TradeMark.toString()) && (sql_Model.toString()).equals(getApi_Model.toString()) && (sql_EngineNo.toString()).equals(getApi_EngineNo.toString()) && (sql_TenderReferenceList.toString()).equals(getApi_TenderReferenceList.toString()) && (sql_TenderOutboardReferenceList.toString()).equals(getApi_TenderOutboardReferenceList.toString()) && (sql_DistinctiveNumbersOrLetters.toString()).equals(getApi_DistinctiveNumbersOrLetters.toString()) && (sql_GrossTonnage.toString()).equals(getApi_GrossTonnage.toString()) && (sql_YearBuilt.toString()).equals(getApi_YearBuilt.toString()) && (sql_PortOfRegistry.toString()).equals(getApi_PortOfRegistry.toString()) && (sql_AddressType_Id.toString()).equals(getApi_AddressType_Id.toString()) && (sql_JointAssuredName.toString()).equals(getApi_JointAssuredName.toString()) && (sql_ProductType.toString()).equals(getApi_ProductType.toString()) && (sql_SourceSystem.toString()).equals(getApi_SourceSystem.toString()) )
				{
					compareWriter.println(sql_Id +","+ getApi_Id +","+ sql_TypeId +","+ getApi_TypeId +","+ sql_Reference +","+ getApi_Reference +","+ sql_CurrentStatus +","+ getApi_CurrentStatus +","+ sql_StorageId +","+ getApi_StorageId +","+ sql_IsRenewal +","+ getApi_IsRenewal +","+ sql_IsYacht +","+ getApi_IsYacht +","+ sql_RiskId +","+ getApi_RiskId +","+ sql_VesselId +","+ getApi_VesselId +","+ sql_PolicyId +","+ getApi_PolicyId +","+ sql_MemberPartyId +","+ getApi_MemberPartyId +","+ sql_OwnerPartyId +","+ getApiOwnerPartyId_ +","+ sql_BrokerPartyId +","+ getApi_BrokerPartyId +","+ sql_TradingCertificateVersion +","+ getApi_TradingCertificateVersion +","+ sql_RiskReference +","+ getApi_RiskReference +","+ sql_VesselReference +","+ getApi_VesselReference +","+ sql_PolicyReference +","+ getApi_PolicyReference +","+ sql_MemberReference +","+ getApi_MemberReference +","+ sql_MemberType +","+ getApi_MemberType +","+ sql_MemberName +","+ getApi_MemberName +","+ sql_OwnerDomicile +","+ getApi_OwnerDomicile +","+ sql_OwnerEmailAddress +","+ getApi_OwnerEmailAddress +","+ sql_OwnerReference +","+ getApi_OwnerReference +","+ sql_OwnerName +","+ getApi_OwnerName +","+ sql_BrokerReference +","+ getApi_BrokerReference +","+ sql_BrokerName +","+ getApi_BrokerName +","+ sql_BrokerEmailAddress +","+ getApi_BrokerEmailAddress +","+ sql_policyYear +","+ getApi_policyYear +","+ sql_EmailAddress +","+ getApi_EmailAddress +","+ sql_CurrencyCode +","+ getApi_CurrencyCode +","+ sql_SignatoryState_Id +","+ getApi_SignatoryState +","+ sql_VesselName +","+ getApi_VesselName +","+ sql_VesselFlag +","+ getApi_VesselFlag +","+ sql_VesselType +","+ getApi_VesselType +","+ sql_VesselTypeName +","+ getApi_VesselTypeName +","+ sql_PassengerCapacity +","+ getApi_PassengerCapacity +","+ sql_IMONumber +","+ getApi_IMONumber +","+ sql_EngineHorsePower +","+ getApi_EngineHorsePower +","+ sql_TradeMark +","+ getApi_TradeMark +","+ sql_Model +","+ getApi_Model +","+ sql_EngineNo +","+ getApi_EngineNo +","+ sql_TenderReferenceList +","+ getApi_TenderReferenceList +","+ sql_TenderOutboardReferenceList +","+ getApi_TenderOutboardReferenceList +","+ sql_DistinctiveNumbersOrLetters +","+ getApi_DistinctiveNumbersOrLetters +","+ sql_GrossTonnage +","+ getApi_GrossTonnage +","+ sql_YearBuilt +","+ getApi_YearBuilt +","+ sql_PortOfRegistry +","+ getApi_PortOfRegistry +","+ sql_AddressType_Id +","+ getApi_AddressType_Id +","+ sql_JointAssuredName +","+ getApi_JointAssuredName +","+ sql_ProductType +","+ getApi_ProductType +","+ sql_SourceSystem +","+ getApi_SourceSystem +","+ "Test Case Passed")
					log.info "Details are matching, hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_Id +","+ getApi_Id +","+ sql_TypeId +","+ getApi_TypeId +","+ sql_Reference +","+ getApi_Reference +","+ sql_CurrentStatus +","+ getApi_CurrentStatus +","+ sql_StorageId +","+ getApi_StorageId +","+ sql_IsRenewal +","+ getApi_IsRenewal +","+ sql_IsYacht +","+ getApi_IsYacht +","+ sql_RiskId +","+ getApi_RiskId +","+ sql_VesselId +","+ getApi_VesselId +","+ sql_PolicyId +","+ getApi_PolicyId +","+ sql_MemberPartyId +","+ getApi_MemberPartyId +","+ sql_OwnerPartyId +","+ getApiOwnerPartyId_ +","+ sql_BrokerPartyId +","+ getApi_BrokerPartyId +","+ sql_TradingCertificateVersion +","+ getApi_TradingCertificateVersion +","+ sql_RiskReference +","+ getApi_RiskReference +","+ sql_VesselReference +","+ getApi_VesselReference +","+ sql_PolicyReference +","+ getApi_PolicyReference +","+ sql_MemberReference +","+ getApi_MemberReference +","+ sql_MemberType +","+ getApi_MemberType +","+ sql_MemberName +","+ getApi_MemberName +","+ sql_OwnerDomicile +","+ getApi_OwnerDomicile +","+ sql_OwnerEmailAddress +","+ getApi_OwnerEmailAddress +","+ sql_OwnerReference +","+ getApi_OwnerReference +","+ sql_OwnerName +","+ getApi_OwnerName +","+ sql_BrokerReference +","+ getApi_BrokerReference +","+ sql_BrokerName +","+ getApi_BrokerName +","+ sql_BrokerEmailAddress +","+ getApi_BrokerEmailAddress +","+ sql_policyYear +","+ getApi_policyYear +","+ sql_EmailAddress +","+ getApi_EmailAddress +","+ sql_CurrencyCode +","+ getApi_CurrencyCode +","+ sql_SignatoryState_Id +","+ getApi_SignatoryState +","+ sql_VesselName +","+ getApi_VesselName +","+ sql_VesselFlag +","+ getApi_VesselFlag +","+ sql_VesselType +","+ getApi_VesselType +","+ sql_VesselTypeName +","+ getApi_VesselTypeName +","+ sql_PassengerCapacity +","+ getApi_PassengerCapacity +","+ sql_IMONumber +","+ getApi_IMONumber +","+ sql_EngineHorsePower +","+ getApi_EngineHorsePower +","+ sql_TradeMark +","+ getApi_TradeMark +","+ sql_Model +","+ getApi_Model +","+ sql_EngineNo +","+ getApi_EngineNo +","+ sql_TenderReferenceList +","+ getApi_TenderReferenceList +","+ sql_TenderOutboardReferenceList +","+ getApi_TenderOutboardReferenceList +","+ sql_DistinctiveNumbersOrLetters +","+ getApi_DistinctiveNumbersOrLetters +","+ sql_GrossTonnage +","+ getApi_GrossTonnage +","+ sql_YearBuilt +","+ getApi_YearBuilt +","+ sql_PortOfRegistry +","+ getApi_PortOfRegistry +","+ sql_AddressType_Id +","+ getApi_AddressType_Id +","+ sql_JointAssuredName +","+ getApi_JointAssuredName +","+ sql_ProductType +","+ getApi_ProductType +","+ sql_SourceSystem +","+ getApi_SourceSystem +","+ "Test Case Failed")
					log.info "Details are not matching, hence test case is failed"
				}
		}
	}
	else
	{
		log.info "Failed API response received as : "+response
	}		
	counter=counter+1
	log.info "Number of records verified are : "+counter
}

sqlWriter.flush()
postApiWriter.flush()
getApiWriter.flush()
compareWriter.flush()

sqlWriter.close()
postApiWriter.close()
getApiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for Get method of Trading Certificate By Certificate Id************"	]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="be316445-f404-4a2d-bb73-3677b2c695af" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OnHOLD_TC_ReferenceBySignatoryStateAddressesBySignatoryStatesId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RefBySignatoryStateAddressesBySignatoryStatesId" id="7cfe6293-17ff-4300-957d-3ae5a563a249" disabled="true"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/signatorystateaddresses/${#TestCase#stateId}" methodName="RefBySignatoryStateAddressesBySignatoryStatesId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefBySignatoryStateAddressesBySignatoryStatesId" id="0ceb06f5-f4da-4c55-a616-c74394ef400c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/signatorystateaddresses/25</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceBySignatoryStateAddressesBySignatoryStateId" id="2e994e67-9f93-4304-a2a7-7c495c4feaab" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Signatory State Addresses By Signatory State Id************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
	"""
	USE tradingcertificate 
	SELECT
	TOP 10
	RSS.Id as SignatoryStateId, SSA.Id as SignatoryStateAddressId, SSA.AddressName, SSA.AddressLine1, SSA.AddressLine2, 
	SSA.AddressLine3, SSA.StateOrCounty, SSA.City, SSA.Country, SSA.PostCode
	from dbo.ref_SignatoryState RSS
	inner join dbo.ref_Country RC on RC.Id=RSS.Country_Id
	inner join ref_SignatoryStateAddress SSA on SSA.SignatoryState_Id=RSS.Id
	order by 1 desc
	"""
	//where RSS.Id=25
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceBySignatoryStateAddressesBySignatoryStateId.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceBySignatoryStateAddressesBySignatoryStateId.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceBySignatoryStateAddressesBySignatoryStateId.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceBySignatoryStateAddressesBySignatoryStateId"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceBySignatoryStateAddressesBySignatoryStateId"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\Comparision_GET_Response_ReferenceBySignatoryStateAddressesBySignatoryStateId"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TypeId"+","+"SQL_SignatoryStateAddressId"+","+"SQL_AddressName"+","+"SQL_AddressLine1"+","+"SQL_AddressLine2"+","+"SQL_AddressLine3"+","+"SQL_StateOrCounty"+","+"SQL_City"+","+"SQL_Country"+","+"SQL_PostCode")
apiWriter.println("API_TypeId"+","+"API_SignatoryStateAddressId"+","+"API_AddressName"+","+"API_AddressLine1"+","+"API_AddressLine2"+","+"API_AddressLine3"+","+"API_StateOrCounty"+","+"API_City"+","+"API_Country"+","+"API_PostCode")
compareWriter.println("SQL_TypeId"+","+"API_TypeId"+","+"SQL_SignatoryStateAddressId"+","+"API_SignatoryStateAddressId"+","+"SQL_AddressName"+","+"API_AddressName"+","+"SQL_AddressLine1"+","+"API_AddressLine1"+","+"SQL_AddressLine2"+","+"API_AddressLine2"+","+"SQL_AddressLine3"+","+"API_AddressLine3"+","+"SQL_StateOrCounty"+","+"API_StateOrCounty"+","+"SQL_City"+","+"API_City"+","+"SQL_Country"+","+"API_Country"+","+"SQL_PostCode"+","+"API_PostCode"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter = 0
String field=null

def rows=con.rows(sqlstmt)  
int db_size=rows.size
//log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->

	sql_TypeId=row.SignatoryStateId
	
	sql_SignatoryStateAddressId=row.SignatoryStateAddressId
	
	sql_AddressName=row.AddressName
	field=sql_AddressName
	sql_AddressName=removeComma(field)
	
	sql_AddressLine1=row.AddressLine1
	field=sql_AddressLine1
	sql_AddressLine1=removeComma(field)
	
	sql_AddressLine2=row.AddressLine2
	field=sql_AddressLine2
	sql_AddressLine2=removeComma(field)
	
	sql_AddressLine3=row.AddressLine3
	field=sql_AddressLine3
	sql_AddressLine3=removeComma(field)
	
	sql_StateOrCounty=row.StateOrCounty
	field=sql_StateOrCounty
	sql_StateOrCounty=removeComma(field)
	
	sql_City=row.City
	field=sql_City
	sql_City=removeComma(field)
	
	sql_Country=row.Country
	field=sql_Country
	sql_Country=removeComma(field)
	
	sql_PostCode=row.PostCode
	
	sqlWriter.println(sql_TypeId+","+sql_SignatoryStateAddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode)
	log.info "SQL Response received as :"+sql_TypeId+","+sql_SignatoryStateAddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_StateOrCounty+","+sql_City+","+sql_Country+","+sql_PostCode

	//Set Id as parameter to test case level
	String stateId = sql_TypeId
	testRunner.testCase.setPropertyValue("stateId", stateId)
	//log.info "tradingCertTypId="+tradingCertTypeId
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('RefBySignatoryStateAddressesBySignatoryStatesId')
	String req='${RefBySignatoryStateAddressesBySignatoryStatesId#Response}'
	response=context.expand(req)
	log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)
/*
	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefBySignatoryStateAddressesBySignatoryStatesId"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		for(int i=0; i<db_size; i++)
		{
			String newId = jsonRes.id[i]
			//log.info "newId : "+newId
			if(newId.toString().equals(sql_SignatoryStateAddressId.toString()))
			{
				api_TypeId=jsonRes.signatoryStateId[i]

				api_SignatoryStateAddressId=jsonRes.id[i]
				
				api_AddressName=jsonRes.addressName[i]
				field=api_AddressName
				api_AddressName=removeComma(field)
				
				api_AddressLine1=jsonRes.addressLine1[i]
				field=api_AddressLine1
				api_AddressLine1=removeComma(field)
				
				api_AddressLine2=jsonRes.addressLine2[i]
				field=api_AddressLine2
				api_AddressLine2=removeComma(field)
				
				api_AddressLine3=jsonRes.addressLine3[i]
				field=api_AddressLine3
				api_AddressLine3=removeComma(field)
				
				api_StateOrCounty=jsonRes.stateOrCounty[i]
				field=api_StateOrCounty
				api_StateOrCounty=removeComma(field)
				
				api_City=jsonRes.city[i]
				field=api_City
				api_City=removeComma(field)
				
				api_Country=jsonRes.country[i]
				field=api_Country
				api_Country=removeComma(field)
				
				api_PostCode=jsonRes.postCode[i]

				apiWriter.println(api_TypeId+","+api_SignatoryStateAddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode)
				log.info "API responce received as : "+api_TypeId+","+api_SignatoryStateAddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_StateOrCounty+","+api_City+","+api_Country+","+api_PostCode
				
				if(sql_TypeId.toString().equals(api_TypeId.toString()) && sql_SignatoryStateAddressId.toString().equals(api_SignatoryStateAddressId.toString()) && sql_AddressName.toString().toUpperCase().equals(api_AddressName.toString().toUpperCase()) && sql_AddressLine1.toString().toUpperCase().equals(api_AddressLine1.toString().toUpperCase()) && sql_AddressLine2.toString().toUpperCase().equals(api_AddressLine2.toString().toUpperCase()) && sql_AddressLine3.toString().toUpperCase().equals(api_AddressLine3.toString().toUpperCase()) && sql_StateOrCounty.toString().toUpperCase().equals(api_StateOrCounty.toString().toUpperCase()) && sql_City.toString().toUpperCase().equals(api_City.toString().toUpperCase()) && sql_Country.toString().toUpperCase().equals(api_Country.toString().toUpperCase()) && sql_PostCode.toString().toUpperCase().equals(api_PostCode.toString().toUpperCase()))
				{
					compareWriter.println(sql_TypeId+","+api_TypeId+","+sql_SignatoryStateAddressId+","+api_SignatoryStateAddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+"Test Case Passsed")
					log.info "Details are matching hence test case is passed"
					break;
				}
				else
				{
					compareWriter.println(sql_TypeId+","+api_TypeId+","+sql_SignatoryStateAddressId+","+api_SignatoryStateAddressId+","+sql_AddressName+","+api_AddressName+","+sql_AddressLine1+","+api_AddressLine1+","+sql_AddressLine2+","+api_AddressLine2+","+sql_AddressLine3+","+api_AddressLine3+","+sql_StateOrCounty+","+api_StateOrCounty+","+sql_City+","+api_City+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_PostCode+","+"Test Case Failed")
					log.info "Details are not matching hence test case is failed"
					break;
				}
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
*/	
	counter = 1+counter
	log.info "Total records tested are : "+counter
}

public String removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Signatory State Addresses By Signatory State Id***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>stateId</con:name><con:value>573</con:value></con:property></con:properties></con:testCase><con:testCase id="3d5d8f96-57af-4786-b6fe-7008d4976a81" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OnHOLD_TC_ReferenceByTradingCertificateTypesByGroupByTypes" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RefByTradingCertificateTypesByGroupByTypes" id="7318a131-8eaa-4243-a990-c2d4ce5fcbd6" disabled="true"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/tradingCertificateTypes/${#TestCase#group}/types" methodName="ReferenceByTradingCertificateTypesByGroupByTypes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByTradingCertificateTypesByGroupByTypes" id="140ec35c-b04b-43e0-9240-be700d1f38b4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/tradingCertificateTypes/COFR/types</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceByTradingCertificateTypesByGroupByTypes_1" id="728fe687-931c-4f66-a37b-bf039c6457d9" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Trading Certificate Types By Group By Types***********"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
	"""
	USE tradingcertificate 
	SELECT
	RT.Id as TradingCertificateTypeId, RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode, 
	RT.TypeCode, RT.Name
	from ref_Group RG
	inner join ref_Type RT on RT.Group_Id =RG.ID
	"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateTypesByGroupByTypes.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateTypesByGroupByTypes.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceByTradingCertificateTypesByGroupByTypes.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceByTradingCertificateTypesByGroupByTypes"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceByTradingCertificateTypesByGroupByTypes"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\Comparision_GET_Response_ReferenceByTradingCertificateTypesByGroupByTypes"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"SQL_GroupCode"+","+"SQL_TypeCode"+","+"SQL_Name")
apiWriter.println("API_TradingCertificateTypeId"+","+"API_TradingCertificateGroupId"+","+"API_TradingCertificateGroupName"+","+"API_GroupCode"+","+"API_TypeCode"+","+"API_Name")
compareWriter.println("SQL_TradingCertificateTypeId"+","+"API_TradingCertificateTypeId"+","+"SQL_TradingCertificateGroupId"+","+"API_TradingCertificateGroupId"+","+"SQL_TradingCertificateGroupName"+","+"API_TradingCertificateGroupName"+","+"SQL_GroupCode"+","+"API_GroupCode"+","+"SQL_TypeCode"+","+"API_TypeCode"+","+"SQL_Name"+","+"API_Name"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
String field=null
int counter=0

def rows=con.rows(sqlstmt)  
int db_size=rows.size
//log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->
	sql_TradingCertificateTypeId=row.TradingCertificateTypeId
	sql_TradingCertificateGroupId=row.TradingCertificateGroupId
	sql_TradingCertificateGroupName=row.TradingCertificateGroupName
	sql_GroupCode=row.GroupCode
	sql_TypeCode=row.TypeCode
	sql_Name=row.Name
	
	sqlWriter.println(sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_GroupCode+","+sql_TypeCode+","+sql_Name)
	log.info "SQL Response received as :"+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_GroupCode+","+sql_TypeCode+","+sql_Name

	//Set Id as parameter to test case level
	String group = sql_GroupCode
	testRunner.testCase.setPropertyValue("group", group)
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('RefByTradingCertificateTypesByGroupByTypes')
	String req='${RefByTradingCertificateTypesByGroupByTypes#Response}'
	response=context.expand(req)
	log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefByTradingCertificateTypesByGroupByTypes"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		for(int i=0; i<db_size; i++)
		{
			String newId = jsonRes.id[i]
			//log.info "newId : "+newId
			if(newId.toString().equals(sql_TradingCertificateTypeId.toString()))
			{
				api_TradingCertificateTypeId=jsonRes.id[i]
				api_TradingCertificateGroupId=jsonRes.tradingCertificateGroup.id[i]
				api_TradingCertificateGroupName=jsonRes.tradingCertificateGroup.name[i]
				api_GroupCode=jsonRes.tradingCertificateGroup.groupCode[i]
				api_TypeCode=jsonRes.typeCode[i]
				api_Name=jsonRes.typeName[i]

	
				apiWriter.println(api_TradingCertificateTypeId+","+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_GroupCode+","+api_TypeCode+","+api_Name)
				log.info "API responce received as : "+api_TradingCertificateTypeId+","+api_TradingCertificateGroupId+","+api_TradingCertificateGroupName+","+api_GroupCode+","+api_TypeCode+","+api_Name
				
				if(api_TradingCertificateTypeId.toString().equals(sql_TradingCertificateTypeId.toString()) && api_TradingCertificateGroupId.toString().equals(sql_TradingCertificateGroupId.toString()) && api_TradingCertificateGroupName.toString().toUpperCase().equals(sql_TradingCertificateGroupName.toString().toUpperCase()) && api_GroupCode.toString().toUpperCase().equals(sql_GroupCode.toString().toUpperCase()) && api_TypeCode.toString().toUpperCase().equals(sql_TypeCode.toString().toUpperCase()) && api_Name.toString().toUpperCase().equals(sql_Name.toString().toUpperCase()))
				{
					compareWriter.println(sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_GroupCode+","+api_GroupCode+","+sql_TypeCode+","+api_TypeCode+","+sql_Name+","+api_Name+","+"Test Case passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_TradingCertificateTypeId+","+api_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+api_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+api_TradingCertificateGroupName+","+sql_GroupCode+","+api_GroupCode+","+sql_TypeCode+","+api_TypeCode+","+sql_Name+","+api_Name+","+"Test Case failed")
					log.info "Details are not matching hence test case is failed"
				}
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
	counter = 1+counter
	log.info "Total records tested are : "+counter
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Trading Certificate Types By Group By Types***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>group</con:name><con:value>TRADECERT</con:value></con:property></con:properties></con:testCase><con:testCase id="7ad4ec57-b2fd-4d5f-9059-f4a386f407d2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="OnHOLD_TC_ReferenceBySignatoryStatesByCertTypeId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RefBySignatoryStatesByCertTypeId" id="5bc47fb3-1630-4f24-93ab-b03ffad14cc2" disabled="true"><con:settings/><con:config service="https://tradingcerts-dev.azurewebsites.net" resourcePath="/reference/signatorystates/${#TestCase#tradingCertTypeId}" methodName="ReferenceBySignatoryStatesByCertTypeId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefBySignatoryStatesByCertTypeId" id="02e6e4a4-7465-4edb-85d1-72c122cede41" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>https://tradingcerts-dev.azurewebsites.net</con:endpoint><con:request/><con:originalUri>https://tradingcerts-dev.azurewebsites.net/reference/signatorystates/536</con:originalUri><con:credentials><con:selectedAuthProfile>BearerToken</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceBySignatoryStatesByCertTypeId" id="f07a1835-a4b2-4935-9062-f620022ac0f8" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Signatory State By Trading Certificate Type Id************"

String fName='C:\\APITesting\\TradingCertificateTesting\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\TradingCertificateTesting\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
	"""
	USE tradingcertificate
	SELECT  
	Top 250
	RSS.Id, RC.Name, RC.ShortName, rss.type_id as TradingCertTypeId
	FROM [dbo].[ref_SignatoryState] RSS 
	inner join ref_country RC 
	on RSS.country_id = RC.Id
	order by RC.name ASC, RSS.Id
	"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceBySignatoryStateByTradingCertTypeId.csv"]
def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceBySignatoryStateByTradingCertTypeId.csv"]
def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\Results\\Comparision_GET_ReferenceBySignatoryStateByTradingCertTypeId.csv"]

//def sqlResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\SQL_Response_ReferenceBySignatoryStateByTradingCertTypeId"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\API_Response_ReferenceBySignatoryStateByTradingCertTypeId"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\TradingCertificateTesting\\TestData\\Comparision_GET_Response_ReferenceBySignatoryStateByTradingCertTypeId"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_Id"+","+"SQL_Name"+","+"SQL_ShortName"+","+"SQL_TradingCertTypeId")
apiWriter.println("API_Id"+","+"API_Name"+","+"API_ShortName"+","+"API_TradingCertTypeId")
compareWriter.println("SQL_Id"+","+"API_Id"+","+"SQL_Name"+","+"API_Name"+","+"SQL_ShortName"+","+"API_ShortName"+","+"SQL_TradingCertTypeId"+","+"API_TradingCertTypeId"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter = 0
String field=null

def rows=con.rows(sqlstmt)  
int db_size=rows.size
//log.info "Number of Rows in DB are : "+db_size

con.eachRow(sqlstmt)
{	
	row ->
	sql_Id=row.Id
	
	sql_Name=row.Name
	field=sql_Name
	sql_Name=removeComma()
				
	sql_ShortName=row.ShortName
	
	sql_TradingCertTypeId=row.TradingCertTypeId
	
	sqlWriter.println(sql_Id+","+sql_Name+","+sql_ShortName+","+sql_TradingCertTypeId)
	log.info "SQL Response received as :"+sql_Id+","+sql_Name+","+sql_ShortName+","+sql_TradingCertTypeId

	//Set Id as parameter to test case level
	String tradingCertTypeId = sql_TradingCertTypeId
	testRunner.testCase.setPropertyValue("tradingCertTypeId", tradingCertTypeId)
	//log.info "tradingCertTypId="+tradingCertTypeId
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('RefBySignatoryStatesByCertTypeId')
	String req='${RefBySignatoryStatesByCertTypeId#Response}'
	response=context.expand(req)
	log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefBySignatoryStatesByCertTypeId"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode) 

	String error = response
	if(httpStatusCode.equals("200"))
	{	
		for(int i=0; i<db_size; i++)
		{
			String newId = jsonRes.id[i]
			//log.info "newId : "+newId
			if(newId.toString().equals(sql_Id.toString()))
			{
				api_Id=jsonRes.id[i]

				api_Name=jsonRes.name[i]
				field=api_Name
				api_Name=removeComma()
				
				api_shortCode=jsonRes.shortCode[i]
				
				api_tradingCertTypeId=jsonRes.tradingCertTypeId[i]
	
				apiWriter.println(api_Id+","+api_Name+","+api_shortCode+","+api_tradingCertTypeId)
				log.info "API responce received as : "+api_Id+","+api_Name+","+api_shortCode+","+api_tradingCertTypeId
				
				if(api_Id.toString().equals(sql_Id.toString()) && api_Name.toString().toUpperCase().equals(sql_Name.toString().toUpperCase()) && api_shortCode.toString().toUpperCase().equals(sql_ShortName.toString().toUpperCase()) && api_tradingCertTypeId.toString().toUpperCase().equals(sql_TradingCertTypeId.toString().toUpperCase()))
				{
					compareWriter.println(sql_Id+","+api_Id+","+sql_Name+","+api_Name+","+sql_ShortName+","+api_shortCode+","+sql_TradingCertTypeId+","+api_tradingCertTypeId+","+"Test Case Passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_Id+","+api_Id+","+sql_Name+","+api_Name+","+sql_ShortName+","+api_shortCode+","+sql_TradingCertTypeId+","+api_tradingCertTypeId+","+"Test Case Failed")
					log.info "Details are not matching hence test case is failed"
				}
			}
		}
	}
	else
	{
		log.info "Failed API response is received : "+response
	}
	counter = 1+counter
	log.info "Total records tested are : "+counter
}

public String removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Signatory State By Trading Certificate Type Id***********"]]></script></con:config></con:testStep><con:properties><con:property><con:name>tradingCertTypeId</con:name><con:value>5</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImNuNnRXOElubmRJVzJKVGtqU2tkTlFQakR1UXo3cmMwQ0pEbkpyRlhKVjgifQ.eyJpc3MiOiJodHRwczovL3NoaXBvd25lcnNjb3VrZGV2YjJjLmIyY2xvZ2luLmNvbS81YzJlY2M4OC1kNmNlLTRkNDEtYThhMi05ZTAzMTc0N2M3ZTYvdjIuMC8iLCJleHAiOjE2MjY0NDA5NjgsIm5iZiI6MTYyNjQzNzM2OCwiYXVkIjoiZTQ4NTNjODItNjhjYS00OTk5LTk3NjAtZmZjODkxODk4NGJhIiwic3ViIjoiNzdmM2YyOGEtZjQ3MS00MTU4LWI4ZTAtNjYwNTY2OTExNGYyIiwiZ3JvdXBzIjpbIlVuZGVyd3JpdGluZyJdLCJub25jZSI6IjAxMzhlMzYwLWNiMTctNGIxOS1hOTk2LTI4OWY3OGQ5ZmQ4NCIsInNjcCI6InRyYWRpbmctY2VydHMud3JpdGUgZG9jdW1lbnQucmVhZCB0cmFkaW5nLWNlcnRzLnJlYWQiLCJhenAiOiJmZWU1MzQ1MC1kODM0LTRlNDAtYTNhYy05YzJjMjQyZGJiMzAiLCJ2ZXIiOiIxLjAiLCJpYXQiOjE2MjY0MzczNjh9.i6sVsdwzWwS6eqGW4n5rWEioUQ1gBfJ5-fl1iLNLItLR8jPbZXSxWxmffDqUwh20XjQi2x2UDlCleWt6x4a9Hwgm4xJavjqIxBe4s67QbiPZBKhti8Z2rX34v1peo3ablfTiz9bSptDa-C8lD9D0EufJt4DGv8e-PPJLgwm4yLogxTBvakyYiEFon44WJ1ocLPtKxw5c28z7EPIAsg-4oo63-yBlcpud5s0bxRuw1ihDwvFFSOg2XEiE4bWMG_JGLSrfcVylg2FN90UpE4txFpjCnQTHfiNJ2XxeNb_GuvmSFY0tpKnLp_HA5qWZwgKlZyXSaiJaloWnQqbJ2Jq3jg</con:value></con:property><con:property><con:name>Config</con:name><con:value>C:\APITesting\TradingCertificateTesting\Config\config.Properties</con:value></con:property><con:property><con:name>EndPoint</con:name><con:value>https://tradingcerts-dev.azurewebsites.net</con:value></con:property><con:property><con:name>ResultPath</con:name><con:value>C:\APITesting\TradingCertificateTesting\Results\Result_2021_06_28_06_16_55</con:value></con:property><con:property><con:name>SummaryFile</con:name><con:value>C:\APITesting\TradingCertificateTesting\Results\Result_2021_06_28_06_16_55\Summary.xlsx</con:value></con:property></con:properties></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer><con:oAuth2Profile><con:name>BearerToken</con:name><con:accessToken>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImNuNnRXOElubmRJVzJKVGtqU2tkTlFQakR1UXo3cmMwQ0pEbkpyRlhKVjgifQ.eyJpc3MiOiJodHRwczovL3NoaXBvd25lcnNjb3VrZGV2YjJjLmIyY2xvZ2luLmNvbS81YzJlY2M4OC1kNmNlLTRkNDEtYThhMi05ZTAzMTc0N2M3ZTYvdjIuMC8iLCJleHAiOjE2Mjg4NTI5MTIsIm5iZiI6MTYyODg0OTMxMiwiYXVkIjoiZTQ4NTNjODItNjhjYS00OTk5LTk3NjAtZmZjODkxODk4NGJhIiwic3ViIjoiNzdmM2YyOGEtZjQ3MS00MTU4LWI4ZTAtNjYwNTY2OTExNGYyIiwiZ3JvdXBzIjpbIlVuZGVyd3JpdGluZyJdLCJzY3AiOiJ0cmFkaW5nLWNlcnRzLndyaXRlIGRvY3VtZW50LnJlYWQgdHJhZGluZy1jZXJ0cy5yZWFkIiwiYXpwIjoiZmVlNTM0NTAtZDgzNC00ZTQwLWEzYWMtOWMyYzI0MmRiYjMwIiwidmVyIjoiMS4wIiwiaWF0IjoxNjI4ODQ5MzEyfQ.HpKxtHGJ8G2-quviROUOe5df_rQCrbZw85-NgU_xNCKMLBD2XDoQn6eDLV6BAtsx0wLf0n8RsoQzb3Cij4XGG4dnrTVmAuRWpbwJgL4Ti71Ix3QbYZa15Qs8jUtJ_zXxstW6j99okTZepRKGFeAcPhK1U2Xl0rMz8CRg4QwhMuh2yGTz3Mi97YuDMbCKFPuodTYuw_z76pP2IoBV5l_wPiIcz_Wuy9jJ2sX2Nl_BaBu3zhzm4uIcamV-ncIPes8FQDe3AY5mOO0SFWIlIE8Eq_4tbsA66AwFN5WwNpNs5c4NVUgsM19GRaC5Wq90jcHaOOpF50uuav8vZ8e4jrEi0A</con:accessToken><con:accessTokenPosition>HEADER</con:accessTokenPosition><con:oAuth2Flow>AUTHORIZATION_CODE_GRANT</con:oAuth2Flow><con:refreshAccessTokenMethod>AUTOMATIC</con:refreshAccessTokenMethod><con:accessTokenStatus>UNKNOWN</con:accessTokenStatus><con:accessTokenStartingStatus>ENTERED_MANUALLY</con:accessTokenStartingStatus><con:manualAccessTokenExpirationTimeUnit>SECONDS</con:manualAccessTokenExpirationTimeUnit></con:oAuth2Profile></con:oAuth2ProfileContainer><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>
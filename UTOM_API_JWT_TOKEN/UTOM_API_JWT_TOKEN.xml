<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="a49b6fa6-9335-424b-86e1-1e7a167fb3cb" activeEnvironment="Default" name="UTOM_API_JWT_TOKEN" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="63a1d734-3e46-4860-a0a9-a382510677c4" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ApplicationByApplicaitonIdByBrokers" path="/api/utomapi/applications/${#TestCase#applicationId}/brokers" id="b8e5731b-8263-44fd-8f72-89fad0dac010"><con:settings/><con:parameters/><con:method name="ApplicationByApplicaitonIdByBrokers" id="df4c5862-ecec-45a9-ae0d-46ce87b7fe20" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:brok="http://spltomservices/api/utomapi/applications/76130/brokers">brok:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:brok="http://spltomservices/api/utomapi/applications/76130/brokers">brok:Fault</con:element></con:representation><con:request name="ApplicationByApplicaitonIdByBrokers" id="c5aadab0-2eeb-4e6a-ab8b-718b70090e48" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76130/brokers</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="5b0c918f-cec5-4600-b44a-f2e6058d5b62" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ApplicationByApplicaitonIdByJointAssureds" path="/api/utomapi/applications/${#TestCase#applicationId}/jointAssureds" id="5c8ac815-2407-4c86-8d93-8373b7c7a7b9"><con:settings/><con:parameters/><con:method name="ApplicationByApplicaitonIdByJointAssureds" id="ee4edf4c-a20d-418f-8f53-e991d69297e5" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 404</con:status><con:params/><con:element xmlns:join="http://spltomservices/api/utomapi/applications/72322/jointAssureds">join:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:join="http://spltomservices/api/utomapi/applications/72322/jointAssureds">join:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="ApplicationByApplicaitonIdByJointAssureds" id="e60624ec-497c-459f-80da-e5a0f03f1fd1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/72322/jointAssureds</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="eb19af1d-0cfb-47c5-acd8-f4620c35f3ca" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ApplicationByApplicationIdByMembers" path="/api/utomapi/applications/${#TestCase#applicationId}/members" id="d908f608-b266-433c-a838-5420e7b8735e"><con:settings/><con:parameters/><con:method name="ApplicationByApplicationIdByMembers" id="3d81a268-2e11-4c5d-99c7-46af46b46515" method="GET"><con:settings/><con:parameters/><con:request name="ApplicationByApplicationIdByMembers" id="0d806ab2-970b-4a39-9287-e951badea32c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="cbc19eed-a00f-4fb4-9a4b-5c94b6d53eb8" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ApplicationByApplicationIdByDocuments" path="/api/utomapi/applications/${#TestCase#appId}/documents" id="ec7869f8-6aa6-4e80-af08-3f00206197f8"><con:settings/><con:parameters/><con:method name="ApplicationByApplicationIdByDocuments" id="63f3de52-5156-4a16-9a33-d2b2f6ba6cdc" method="GET"><con:settings/><con:parameters/><con:request name="ApplicationByApplicationIdByDocuments" id="69ab8d1e-4de9-4f72-9d9d-412b6a9d3f3e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="3c6fffdf-aa95-4b74-9ef9-03a53009711b" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ApplicationByApplicationIdByDocumentsByDocumentId" path="/api/utomapi/applications/${#TestCase#applicationId}/documents/${#TestCase#documentId}" id="ec1c65ce-22a9-4e75-a268-12642717df8f"><con:settings/><con:parameters/><con:method name="ApplicationByApplicationIdByDocumentsByDocumentId" id="0ccf08d7-db56-4063-85c7-b028456a410b" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:ns="http://spltomservices/api/utomapi/applications/75527/documents/494502">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://spltomservices/api/utomapi/applications/75532/documents/498125">ns:Response</con:element></con:representation><con:request name="ApplicationByApplicationIdByDocumentsByDocumentId" id="a0e17e00-8054-4123-9d3c-2be3c46b51ef" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="5c4da03c-6cea-4204-b0c8-8afecf6932c2" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://DESKTOP-VJS48BJ:8089/</con:endpoint><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ApplicationByApplicationId" path="/api/utomapi/applications/${#TestCase#applicationId}/" id="24abceff-d99e-439f-b7f9-cfadaf582f15"><con:settings/><con:parameters><con:parameter><con:name>ExcludeNewBusiness</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ApplicationByApplicationId" id="cefe82e1-7244-4df0-bec0-91aa25341e61" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://spltomservices/api/utomapi/applications/76177/">ns:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 404</con:status><con:params/><con:element xmlns:ns="http://spltomservices/api/utomapi/applications/76177/">ns:Fault</con:element></con:representation><con:request name="ApplicationByApplicationId" id="ff689291-46b0-47a0-88f0-a2ddbd2b2302" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ExcludeNewBusiness" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ExcludeNewBusiness</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="e10238f7-4c76-4a38-b000-4a21148706f5" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ApplicationsByApplicationReference" path="/api/utomapi/applications/" id="9a200dd9-0333-4f09-9ed8-52c33b0cff7a"><con:settings/><con:parameters><con:parameter><con:name>reference</con:name><con:value>1039710</con:value><con:style>QUERY</con:style><con:default>1039710</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="ApplicationsByApplicationReference" id="7b16bbba-ce04-410e-a0db-c8d1067c2503" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:app="http://spltomservices/api/utomapi/applications/">app:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:app="http://spltomservices/api/utomapi/applications/">app:Response</con:element></con:representation><con:request name="ApplicationsByApplicationReference" id="b5c76b67-8f2a-4c1f-8e41-e1684c88e0e3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="reference" value="${#TestCase#appReference}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>reference</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="eb03ded2-2b30-4e39-9e27-ea79e8247e7f" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ApplicationByApplicationIdByAssociatedParties" path="/api/utomapi/applications/${#TestCase#applicationId}/associatedParties" id="36e21c5b-ec4c-41df-8f24-e5a4c3433cd8"><con:settings/><con:parameters/><con:method name="ApplicationByApplicationIdByAssociatedParties" id="d52b1854-78a1-4f74-b9b9-26560d756b75" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 404</con:status><con:params/><con:element xmlns:ass="http://spltomservices/api/utomapi/applications/76161/associatedParties">ass:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ass="http://spltomservices/api/utomapi/applications/76161/associatedParties">ass:Response</con:element></con:representation><con:request name="ApplicationByApplicationIdByAssociatedParties" id="f13e6370-e11d-43f0-a453-9357c174b473" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="96849743-05ac-470c-8a05-ebb7fb71cb01" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ApplicationByApplicationIdByTransactions" path="/api/utomapi/applications/${#TestCase#applicationId}/transactions" id="9da0402c-97b8-47fa-8e69-65f618647cb0"><con:settings/><con:parameters/><con:method name="ApplicationByApplicationIdByTransactions" id="241bee03-d6b4-4aee-bf46-c54961f2b15e" method="GET"><con:settings/><con:parameters/><con:request name="ApplicationByApplicationIdByTransactions" id="0c7622d7-2e59-47ce-a24f-e6d8d0c8568b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="d05b8488-8766-4a16-a5d8-ef20d5623503" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ApplicationByApplicationIdByTransactionsByTransactionId" path="/api/utomapi/applications/${#TestCase#applicationId}/transactions/${#TestCase#transactionId}" id="ded3ff22-3d8b-40c3-a97e-903e5ec56d34"><con:settings/><con:parameters/><con:method name="ApplicationByApplicationIdByTransactionsByTransactionId" id="e46c1626-0b19-4c43-89ac-0fd9a6b7d2a2" method="GET"><con:settings/><con:parameters/><con:request name="ApplicationByApplicationIdByTransactionsByTransactionId" id="18772ccd-ce4d-496a-8cc7-0cf884ebdbef" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="bce9ae07-52c6-4bdd-ac02-95af2ff364db" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ApplicationByApplicationIdByTransactionsByTransactionIdbyDocuments" path="/api/utomapi/applications/${#TestCase#applicationId}/transactions/${#TestCase#transactionId}/documents" id="4c6e7225-17bd-4763-b191-79182ee9fd2e"><con:settings/><con:parameters/><con:method name="ApplicationByApplicationIdByTransactionsByTransactionIdbyDocuments" id="cdfb2eb0-3f79-42be-92db-a2e023a191fc" method="GET"><con:settings/><con:parameters/><con:request name="ApplicationByApplicationIdByTransactionsByTransactionIdbyDocuments" id="076967ad-6567-4dab-9a99-5386fd051928" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="131396ec-3477-402d-94a0-27db54251644" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ApplicationByApplicationIdByRisks" path="/api/utomapi/applications/${#TestCase#applicationid}/risks" id="1d5899b0-e5b8-4499-abc9-211d552f8a91"><con:settings/><con:parameters/><con:method name="ApplicationByApplicationIdByRisks" id="341e1ab8-b8d7-4289-bbc1-b082578cfdc7" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:ris="http://spltomservices/api/utomapi/applications/76009/risks">ris:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ris="http://spltomservices/api/utomapi/applications/76009/risks">ris:Response</con:element></con:representation><con:request name="ApplicationByApplicationIdByRisks" id="86d726da-eb43-411b-b880-ff79ff951948" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="05d43877-9584-4fad-b499-53541b4e8fe9" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="BrokerByBrokerId" path="/api/utomapi/brokers/${#TestCase#brokerId}" id="50d8d720-b135-4a04-a515-eefefcf80c19"><con:settings/><con:parameters/><con:method name="BrokerByBrokerId" id="a49a9277-49ce-430d-a991-6447f02103d3" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://spltomservices/api/utomapi/brokers/1289">ns:Response</con:element></con:representation><con:request name="BrokerByBrokerId" id="ac696e82-1f4b-4722-aeee-9f9aa6f84602" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="1607631e-94de-4ac9-b375-e9eb5fdf510b" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="BrokersByBrokersReference" path="/api/utomapi/brokers/" id="a8657d72-390f-4130-aa43-e1d069275e76"><con:settings/><con:parameters><con:parameter><con:name>reference</con:name><con:value>7066</con:value><con:style>QUERY</con:style><con:default>7066</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="BrokersByBrokersReference" id="d5418a1d-c51d-4fc0-8b26-b93f2069d0a9" method="GET"><con:settings/><con:parameters/><con:request name="BrokersByBrokersReference" id="b880e907-63d4-4320-8376-6a1387fd5004" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="reference" value="${#TestCase#brokerReference}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>reference</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="44bfcb78-3259-4574-a952-727ee3cca4ec" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="BrokerByBrokerIdByContacts" path="/api/utomapi/brokers/${#TestCase#brokerId}/contacts" id="40032b97-3e99-4fd5-a3d5-4c5b82a8f60d"><con:settings/><con:parameters/><con:method name="BrokerByBrokerIdByContacts" id="0ce3e21f-138c-46be-93b0-14e741c5c1a4" method="GET"><con:settings/><con:parameters/><con:request name="BrokerByBrokerIdByContacts" id="44778d96-842e-479e-83c6-a62a63f1b3d9" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="230bb0b2-fef8-479e-b20e-c1b1cae9f832" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="BrokerByBrokerIdByContactsByContactId" path="/api/utomapi/brokers/${#TestCase#brokerId}/contacts/${#TestCase#contactId}" id="0f7e85e4-97cd-4168-9a06-34e27d973cb2"><con:settings/><con:parameters/><con:method name="BrokerByBrokerIdByContactsByContactId" id="6eae0ce5-9650-45a2-a5e3-c65a2dba4786" method="GET"><con:settings/><con:parameters/><con:request name="BrokerByBrokerIdByContactsByContactId" id="9b769e3f-6af5-406d-b5bf-9681caa6ae7d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="086d11bf-e23f-438a-b111-2851ca92cace" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="MembersByMemberId" path="/api/utomapi/members/${#TestCase#memberId}" id="aa54ad75-142f-49df-9d19-33bdaf0c9ee6"><con:settings/><con:parameters/><con:method name="MembersByMemberId" id="b1640afb-39cc-4488-8dde-19c6f4af3724" method="GET"><con:settings/><con:parameters/><con:request name="MembersByMemberId" id="fe42cb94-53c5-4a23-a891-cb7ad257620c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="78bb293a-b576-44a3-8e97-91a8fa0c7f3d" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="MembersByMemberReference" path="/api/utomapi/members/" id="3406b7ce-9ef1-4c73-8d68-6c03a7535ee0"><con:settings/><con:parameters><con:parameter><con:name>reference</con:name><con:value>73327</con:value><con:style>QUERY</con:style><con:default>73327</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="MembersByMemberReference" id="4113acda-d8a7-405c-844b-cb5dddd14794" method="GET"><con:settings/><con:parameters/><con:request name="MembersByMemberReference" id="345d0bd1-e414-4f79-ae68-8c25ea7c0739" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="reference" value="${#TestCase#memberReference}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>reference</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="f04706d4-50ac-4053-914a-f55ef6a751c0" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="MemberByMemberIdByRisks" path="/api/utomapi/members/${#TestCase#memberId}/risks" id="ddae2214-d16c-4998-bb26-f2efccb32e20"><con:settings/><con:parameters/><con:method name="MemberByMemberIdByRisks" id="6f63bc8c-edbf-43dd-bed7-ac58245b339a" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ris="http://spltomservices/api/utomapi/members/47355/risks">ris:Response</con:element></con:representation><con:request name="MemberByMemberIdByRisks" id="fe2bf82e-4c43-4040-beb0-a65e8b74a4cb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="9c753e75-6cf4-453e-bb04-5de5e1c99e1a" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ReferenceRiskSubTypes" path="/api/utomapi/reference/RiskSubTypes" id="2ed66ba7-3ec5-42b0-bd16-df98e01e7a8d"><con:settings/><con:parameters/><con:method name="ReferenceRiskSubTypes" id="acea06f5-b912-45bf-84dd-5f81d8a5b6a9" method="GET"><con:settings/><con:parameters/><con:request name="ReferenceRiskSubTypes" id="847a52cc-0285-4c63-8cf5-3ac38eb03fc0" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="7a06f391-e2a0-4dba-b2ed-77c9402344e8" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ReferenceByCountries" path="/api/utomapi/reference/countries" id="4b457df1-c4d3-42e6-b77f-e6a0267a5f3b"><con:settings/><con:parameters/><con:method name="ReferenceByCountries" id="eed3281c-e19a-4245-bf80-dcf38a762884" method="GET"><con:settings/><con:parameters/><con:request name="ReferenceByCountries" id="8e89cab6-7a23-4afb-a54f-77adf9ff3fde" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="7a25761e-b3e6-425d-963a-4c73b0600f46" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="RisksByApplicationRiskId" path="/api/utomapi/risks/${#TestCase#appRiskId}" id="68d8fbc3-aa37-4619-8258-a402143499e1"><con:settings/><con:parameters/><con:method name="RisksByApplicationRiskId" id="de03c2b6-2a5e-4c9a-9da1-0a3102ed142b" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:ns="http://spltomservices/api/utomapi/risks/177461">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://spltomservices/api/utomapi/risks/177461">ns:Response</con:element></con:representation><con:request name="RisksByApplicationRiskId" id="1f489ee0-a0bd-4659-a8b9-5451a5f096ea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="60c865a8-b566-4fa2-94ed-cc9e75d2fa73" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ReferenceByDocumentTypes" path="/api/utomapi/reference/documentTypes" id="c82cf7e4-a9da-442f-8185-8fab412b1f11"><con:settings/><con:parameters/><con:method name="ReferenceByDocumentTypes" id="0a760fa6-ece9-459d-844a-60d2a703fb68" method="GET"><con:settings/><con:parameters/><con:request name="ReferenceByDocumentTypes" id="0751a772-7e09-47fe-b3a9-0f2e71e14364" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="55369616-9dc6-4f4c-bd35-39f2ffb92a95" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse" path="/api/utomapi/risks/" id="c20ee534-34b5-41f3-8931-81e4400161f9"><con:settings/><con:parameters><con:parameter><con:name>filterType</con:name><con:value>vesselName</con:value><con:style>QUERY</con:style><con:default>vesselName</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>filterValue</con:name><con:value>SurajRisk</con:value><con:style>QUERY</con:style><con:default>SurajRisk</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>risktype</con:name><con:value>vessel</con:value><con:style>QUERY</con:style><con:default>vessel</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>excludeVessel</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse" id="c86bdcb5-8d4f-4e9c-9e93-7c8a1074db13" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ris="http://spltomservices/api/utomapi/risks/">ris:Response</con:element></con:representation><con:request name="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse" id="8ae0a2b8-f8a7-4cb8-9dc9-0ec35ea1575c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="risktype" value="vessel"/>
  <con:entry key="filterValue" value="SurajRisk"/>
  <con:entry key="excludeVessel" value="false"/>
  <con:entry key="filterType" value="vesselName"/>
</con:parameters><con:parameterOrder><con:entry>filterType</con:entry><con:entry>filterValue</con:entry><con:entry>risktype</con:entry><con:entry>excludeVessel</con:entry></con:parameterOrder></con:request><con:request name="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselTrue" id="e0d4d754-0c67-4971-8aa2-5f6e043f92e4" mediaType="application/json"><con:settings/><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="excludeVessel" value="True" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filterType</con:entry><con:entry>filterValue</con:entry><con:entry>risktype</con:entry><con:entry>excludeVessel</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="a406c48c-dd91-4505-92ce-c3665f953257" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ReferenceByDocumentStatuses" path="/api/utomapi/reference/documentStatuses" id="d48fdad4-2b16-49df-87ce-8837b8842681"><con:settings/><con:parameters/><con:method name="ReferenceByDocumentStatuses" id="5e105b2e-db87-4aaf-b476-8a13eac7c71f" method="GET"><con:settings/><con:parameters/><con:request name="ReferenceByDocumentStatuses" id="c94df1c1-fb4f-43a8-85bd-06d3351743b7" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="2b7723f5-5313-4887-859f-60353f273741" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="Patch_ApplicationByApplicationIdByDocumentByDocumentId" path="/api/utomapi/applications/${#TestCase#applicationid}/documents/${#TestCase#documentId}" id="eea497e8-d8fc-4b73-a5e1-1b45ee6bd400"><con:settings/><con:parameters/><con:method name="Patch_ApplicationByApplicationIdByDocumentByDocumentId" id="e56317c1-0072-4f4b-a4d0-050af48851c7" method="PATCH"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 500 400 405</con:status><con:params/><con:element xmlns:ns="http://spltomservices/api/utomapi/applications/75532/documents/494509">ns:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Patch_ApplicationByApplicationIdByDocumentByDocumentId" id="b375f3dd-a492-4310-9f7a-6e866b2a71d3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request>[
  {
    "op": "replace",
    "path": "/storageid",
    "value": "Berry"
  },
  {
    "op": "add",
    "path": "/documentmetadata",
    "value": "TestPath"
  }
]</con:request><con:originalUri>http://spltomservices/api/utomapi/applications/75532/documents/494509</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="26b15218-dd5d-4952-8c3b-f9312a51d4fe" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="PostApplicationByApplicationIdByDocument" path="/api/utomapi/applications/${#TestCase#applicationId}/documents/" id="692161a6-932e-40a7-a7d5-54640d66d759"><con:settings/><con:parameters/><con:method name="PostApplicationByApplicationIdByDocument" id="89f24c81-68c0-447f-a8cd-572771d7532a" method="POST"><con:settings/><con:parameters/><con:request name="PostApplicationByApplicationIdByDocument" id="adce849f-723a-4971-957d-558261dc0607" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request>{
    "RiskId": "101932",
    "DocumentReference": "23/12/2020",
    "StorageId": "",
    "DocumentType": {
        "Id": "1",
        "DocumentTypeName": "TradingCertificate"
    },
    "DocumentStatus": {
        "Id": "1",
        "DocumentStatusName": "issued"
    },
    "TradingCertificatesTypeId": "1",
    "IssuedDate": "23/12/2020",
    "DocumentKey": "TradingCertificateKey",
    "RiskName": "AQUA JACK I"
}</con:request><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="723a9322-798c-4ba3-95d3-e323a317b355" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="ConfigureByOwnerMemberByRiskByApplicationRiskId" path="/api/utomapi/configure/ownermember/risk/${#TestCase#AppRiskId}" id="42198f24-fb37-4c34-a33e-ee73881b8db2"><con:settings/><con:parameters/><con:method name="ConfigureByOwnerMemberByRiskByApplicationRiskId" id="4e3f52e9-dbbf-4c16-ac76-82e4ea1d94ec" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://spltomservices/api/utomapi/configure/ownermember/risk/113841">ns:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401 404</con:status><con:params/><con:element xmlns:ns="http://spltomservices/api/utomapi/configure/ownermember/risk/113841">ns:Fault</con:element></con:representation><con:request name="ConfigureByOwnerMemberByRiskByApplicationRiskId" id="ea423a2c-da4f-4a20-a8b2-0d1d63d9403c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/configure/ownermember/risk/113841</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="50fccdb2-4b65-42be-994c-6793a0b99ec8" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://spltomservices:44378" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://spltomservices:44378</con:endpoint></con:endpoints><con:resource name="RiskSelectionByRiskDetailByApplicationRiskId" path="/api/UtomApi/riskselection/riskdetail/${#TestCase#appRiskId}" id="22c60774-0c50-4433-a760-c4f7ac279e1e"><con:settings/><con:parameters/><con:method name="RiskSelectionByRiskDetailByApplicationRiskId" id="d0c310b7-b0e1-4050-a626-9ac290ae54c7" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://spltomservices/api/UtomApi/riskselection/riskdetail/179096">ns:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json; charset=utf-8</con:mediaType><con:status>401</con:status><con:params/><con:element xmlns:ns="http://spltomservices/api/UtomApi/riskselection/riskdetail/179096">ns:Fault</con:element></con:representation><con:request name="RiskSelectionByRiskDetailByApplicationRiskId" id="4102671e-1d82-4b51-84f0-20a1980d22f6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/UtomApi/riskselection/riskdetail/179096</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="a60689c8-b3d9-48b1-af75-ad2e51e95254" name="TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="c4830e01-cede-4ced-9578-9a2087991e21" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Driver_Script" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Driver" id="07def4b1-ca9f-4c94-be7c-46ddfa95dfd2"><con:settings/><con:config><script><![CDATA[import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.sql.Sql
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;  
  
import org.apache.poi.common.usermodel.*;
import org.apache.poi.common.usermodel.Hyperlink;
//import org.apache.poi.common.usermodel.HyperlinkType
import java.io.*;

public class Driver_Script
{
	XSSFCellStyle rowStyle;	
	/*	
	public printR(log)
	{
		log.info 'Method accessed'
	}
	*/
	//public static writeDetailsinRowwithLink(XSSFWorkbook wb,XSSFSheet ws,XSSFSheet source,def arrDetail,XSSFCellStyle rowStyle,boolean isHeader=false,String tcid,String summary_File)
	public static writeDetailsinRowwithLink(XSSFWorkbook wb, XSSFSheet ws, def arrDetail, XSSFCellStyle rowStyle, boolean isHeader=false, String tcid, String summary_File)
	{	
		int rowNum;
		if(isHeader)
		{
			rowNum=0
		}
		else
		{
			rowNum = ws.getLastRowNum()+1;		
		}
		XSSFRow headerRow=ws.createRow(rowNum);
		for(int i=0;i<arrDetail.size;i++)
		{
			headerRow.createCell(i);
			headerRow.getCell(i).setCellStyle(rowStyle);
			headerRow.getCell(i).setCellValue(arrDetail[i]);
			if(i==0)
			{
				CreationHelper createHelper = wb.getCreationHelper();
				//DOCUMENT
				// XSSFHyperlink link = (XSSFHyperlink)createHelper.createHyperlink(Hyperlink.LINK_FILE);
				XSSFCellStyle hlinkstyle = wb.createCellStyle();
				XSSFFont hlinkfont = wb.createFont();
				hlinkfont.setUnderline(XSSFFont.U_SINGLE);
		
				hlinkfont.setColor(IndexedColors.BLUE.index);
				hlinkstyle.setFont(hlinkfont);
				XSSFHyperlink link = (XSSFHyperlink)createHelper.createHyperlink(Hyperlink.LINK_DOCUMENT);
				link.setAddress(tcid+'!A1' );
				  
				hlinkstyle.setBorderBottom(CellStyle.BORDER_THIN);
				hlinkstyle.setBorderLeft(CellStyle.BORDER_THIN);
				hlinkstyle.setBorderRight(CellStyle.BORDER_THIN);
				hlinkstyle.setBorderTop(CellStyle.BORDER_THIN);
				headerRow.getCell(i).setCellStyle(hlinkstyle);
				headerRow.getCell(i).setHyperlink((XSSFHyperlink) link)
			}
		}
	}
	//public process_Data(XSSFWorkbook O_Summary,XSSFSheet source,int api_startCol,int db_startCol,int row_start,int api_endCol,int db_endCol,int total_size,int db_size,XSSFSheet summary,String summary_File,String uri,String broker,String tcid,String dsc="")
	public process_Data(XSSFWorkbook O_Summary,XSSFSheet source,int api_startCol,int db_startCol,int row_start,int api_endCol,int db_endCol,int total_size,int db_size,XSSFSheet summary,String summary_File,String uri,String tcid,String dsc="")
	{
		XSSFCellStyle rowStyle,rowTrue,rowFalse;
		int api_cnt=0,db_cnt=0
		rowTrue=getCellStyle(O_Summary,'Cell',true);
		rowFalse=getCellStyle(O_Summary,'Cell',false);
		api_cnt=compareData(O_Summary,source,db_startCol,api_startCol,row_start,db_endCol,api_endCol,db_size,total_size)
		
		db_cnt=compareData(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size)
		String exe_Status
		def arrOutputHeader
		if(api_cnt==0 && db_cnt==0)
		{
			exe_Status='PASS'
			rowStyle=rowFalse
		}
		else
		{
			exe_Status='FAIL'
			rowStyle=rowTrue
		}
		//arrOutputHeader=[tcid,dsc,db_size,api_cnt,total_size,db_cnt,broker,exe_Status]
		arrOutputHeader=[tcid,dsc,db_size,api_cnt,total_size,db_cnt,exe_Status]
		//writeDetailsinRow(summary,arrOutputHeader,rowStyle)
		//writeDetailsinRowwithLink(O_Summary, summary, arrOutputHeader, source, rowStyle, tcid, summary_File)
		writeDetailsinRowwithLink(O_Summary, summary, arrOutputHeader, rowStyle, tcid, summary_File)
		//XSSFWorkbook wb, XSSFSheet ws, def arrDetail,XSSFCellStyle rowStyle,boolean isHeader=false,String tcid,String summary_File
		//writeDetailsinRow(summary,arrOutputHeader,rowStyle)
		
		for(int i=0;i<=api_endCol;i++)
		{
			autoSize(source,String.valueOf(i))	
		}		
		autoSize(summary,'0,1,2,3,4,5')
		try
		{
			saveExcelFile(summary_File,O_Summary)
		}
		catch(Exception e){}			
	}
	//RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,broker,tcid,dsc)

	public int compareData(XSSFWorkbook wb,XSSFSheet source,int source_start,int dest_start,int row_start,int source_end,int dest_end,int src_size,int dest_size)
	{
		println source_start
		XSSFCellStyle rowTrue,rowFalse;
		XSSFRow currentrow,currentrow1
		rowTrue=getCellStyle(wb,'Cell',true);
		rowFalse=getCellStyle(wb,'Cell',false);
		int src_counter=row_start;
		int dest_counter=row_start;	
		int colCnt=source_end-source_start
		boolean flag
		int src_cnt=0;
		String apiRef,dbRef,dbData,apiData
		for(int iter=0;iter<src_size;iter++)
		{
			flag=false
			
			currentrow = source.getRow(src_counter);
			//log.info source_start
			apiRef=currentrow.getCell(source_start,Row.RETURN_BLANK_AS_NULL)
			//println apiRef
			dest_counter=row_start;
			for(int j=0;j<dest_size;j++)
			{
				currentrow1 = source.getRow(dest_counter)
				dbRef=currentrow1.getCell(dest_start,Row.RETURN_BLANK_AS_NULL)
				dest_counter++	
				if(apiRef==dbRef)
				{
					flag=true
					for(int k=0;k<colCnt;k++)
					{
						dbData=currentrow.getCell(source_start+k)
						apiData=currentrow1.getCell(dest_start+k)
						if(dbData!=apiData)
						{
							flag=false
							println source_start+k
							println dest_start+k
							println 'Failed for -->'+dbData+'<=value=>'+apiData
							break;
						}
					}
				break;
				}
			}
			if(!flag)
			{
				writeDetails(source,src_counter,source_end,rowTrue,['Not Matched'])
				src_cnt++
			}
			else
			{
				writeDetails(source,src_counter,source_end,rowFalse,['Matched'])	
			}
			src_counter++;
		}
		return src_cnt;
	}

	public writeSummarySheet(XSSFWorkbook O_workbook,XSSFSheet ws,String env)
	{	
		def arrOutputHeader;
		XSSFSheet data_s=O_workbook.getSheet('API_Result');
		int row_cnt=data_s.getLastRowNum()
		int cnt=0;
		XSSFCellStyle headerStyle;
		ws.setDisplayGridlines(false);

		XSSFFont hlinkfont = O_workbook.createFont();
		headerStyle=getCellStyle(O_workbook,'Header',false);
		
		XSSFRow headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("API Execution Summary ");

		Date date1 = new Date();
		String newDate = date1.format('dd-MMM-yyyy');

		headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("Environment");
		headerRow.createCell(1);
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellValue(env)
		
		headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("Execution Date");
		headerRow.createCell(1);
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellValue(newDate)
		

		headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("Total API Records");
		headerRow.createCell(1);
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellFormula("SUM(API_Result!C:C)")

		headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.createCell(1);
		headerStyle=getCellStyle(O_workbook,'Header',true);
     	
		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("Total FAIL Records");
		
		
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellFormula("SUM(API_Result!D:D)")

		headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.createCell(1);
		headerStyle=getCellStyle(O_workbook,'Header',false);
		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("Total PASS Records");
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellFormula("B4-B5")

		headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.createCell(1);
		headerStyle=getCellStyle(O_workbook,'Header',false);
		
		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("Pass Percentage");
		headerRow.getCell(1).setCellFormula("(B6/B4)*100")

		headerRow=ws.createRow(cnt++);
		headerRow.createCell(0);
		headerRow.createCell(1);
		headerStyle=getCellStyle(O_workbook,'Header',true);
		headerStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());  

		headerRow.getCell(0).setCellStyle(headerStyle);
		headerRow.getCell(1).setCellStyle(headerStyle);
		headerRow.getCell(0).setCellValue("FAIL Percentage");
		
		headerRow.getCell(1).setCellFormula("(B5/B4)*100");


		/*CellStyle style1 = O_workbook.createCellStyle();
        style1.setBorderLeft(CellStyle.BORDER_NONE);
        style1.setBorderRight(CellStyle.BORDER_NONE);
        style1.setBorderBottom(CellStyle.BORDER_NONE);
        style1.setBorderTop(CellStyle.BORDER_NONE);

        for(int i=9; i< 100 ; i++)
		{
            for(int j=0; j< 100; j++)
			{
            	headerRow=ws.createRow(i);
            	headerRow.createCell(j);
            	headerRow.getCell(j).setCellStyle(style1);
            }
        }

		/*	
		for(int i=0; i< 8 ; i++)
		{
			for(int j=4; j< 100; j++)
			{
            	headerRow=ws.createRow(i);
            	headerRow.createCell(j);
            	headerRow.getCell(j).setCellStyle(style1);
            }
        }
		*/
	}
	
	public def getConnection(String fName)
	{
		File config=new File(fName)
		Properties prop=new Properties()

		config.withInputStream
		{
			line->
			prop.load(line)
		}
		String dbURL=prop['DB_URL'];
		String dbPwd=prop['DB_Pwd'];
		String dbDriver='com.microsoft.sqlserver.jdbc.SQLServerDriver';
		String dbUser=prop['DB_User'];
		def con=Sql.newInstance(dbURL,dbUser,dbPwd,dbDriver);
		//con.setNetworkTimeout(null, 10000)
		/*Properties props = new Properties();
		props.setProperty("user", prop['DB_URL']);
		props.setProperty("password", prop['DB_Pwd']);
		props.setProperty(OracleConnection.CONNECTION_PROPERTY_THIN_NET_CONNECT_TIMEOUT, "20000");

		Connection con = DriverManager.getConnection("com.microsoft.sqlserver.jdbc.SQLServerDriver", props);*/

		return con;	
	}
	public void saveExcelFile(String strFilePathwithName, XSSFWorkbook outputWorkbook) throws FileNotFoundException
	{	
		try 
		{	
			FileOutputStream out = new FileOutputStream(strFilePathwithName);
			outputWorkbook.write(out);
			out.close();
		} 
		catch (IOException e)
		{
			//TODO Auto-generated catch block
			//e.printStackTrace();
		}	
	}

	public XSSFWorkbook getSummaryWorkbook(String strFilePathwithName)
	{
		File file1 = new File(strFilePathwithName);
		XSSFWorkbook O_workbook;
		XSSFSheet result,result1;
		if(!file1.exists())
		{
			O_workbook = new XSSFWorkbook();
			
			result1 = O_workbook.createSheet("API_Summary");
			result = O_workbook.createSheet("API_Result");
					
			def arrOutputHeader = ["TC ID","Description" ,"Database Record Count","DataBase Mistamatch","API data Count","API Mistmatch","Status"];
			XSSFCellStyle headerStyle = getCellStyle(O_workbook,'Header');
			
			writeDetailsinRow(result,arrOutputHeader,headerStyle,true);	
			try
			{
				saveExcelFile(strFilePathwithName,O_workbook)
			}
			catch(Exception e)
			{}	
		}
		else
		{
			O_workbook = new XSSFWorkbook(new FileInputStream(new File(strFilePathwithName)));
		}
		return O_workbook;
	}


	public autoSize(XSSFSheet ws,String sColumn)
	{
		def sArr=sColumn.split(',')
		for(String values:sArr)
		{
			ws.autoSizeColumn(Integer.parseInt(values))
		}	
	}
	public writeDetails(XSSFSheet ws, int rowNum, int colStart, XSSFCellStyle rowStyle, def arrDetail)
	{
		XSSFRow headerRow=ws.getRow(rowNum);
							
		if(headerRow==null)
			headerRow=ws.createRow(rowNum);		
		//log.info 'Itt'+colStart+arrDetail.size
		for(int i=0;i<arrDetail.size;i++)
		{
			headerRow.createCell(colStart);
			headerRow.getCell(colStart).setCellStyle(rowStyle);
			headerRow.getCell(colStart).setCellValue(arrDetail[i]);
			colStart++;
		}
	}
	public static writeDetailsinRow(XSSFSheet ws,def arrDetail,XSSFCellStyle rowStyle,boolean isHeader=false)
	{
		int rowNum;
		if(isHeader)
		{
			rowNum=0
		}
		else
		{
			rowNum = ws.getLastRowNum()+1;		
		}
		XSSFRow headerRow=ws.createRow(rowNum);
		for(int i=0;i<arrDetail.size;i++)
		{
			headerRow.createCell(i);
			headerRow.getCell(i).setCellStyle(rowStyle);
			headerRow.getCell(i).setCellValue(arrDetail[i]);			
		}
	}
	
	public static XSSFCellStyle getCellStyle(XSSFWorkbook wb,String rowType,boolean errorFlag=false)
	{
		XSSFCellStyle dataStyle = wb.createCellStyle();
		//dataStyle.setWrapText(true);
		if(rowType.equalsIgnoreCase('header'))
		{
			dataStyle.setAlignment(CellStyle.ALIGN_CENTER);
			//headerStyle.setFillForegroundColor(IndexedColors.GREY_50_PERCENT.index);
			//setFillBackgroundColor
			dataStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
			dataStyle.setBorderBottom(CellStyle.BORDER_THICK);
			dataStyle.setBorderLeft(CellStyle.BORDER_THICK);
			dataStyle.setBorderRight(CellStyle.BORDER_THICK);
			dataStyle.setBorderTop(CellStyle.BORDER_THICK);
			if(errorFlag)
			{
				Font font = wb.createFont();
				font.setColor(IndexedColors.RED.getIndex());
				dataStyle.setFont(font);
			}	
		}
		else
		{
			dataStyle.setAlignment(CellStyle.ALIGN_CENTER);
			dataStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
			dataStyle.setBorderBottom(CellStyle.BORDER_THIN);
			dataStyle.setBorderLeft(CellStyle.BORDER_THIN);
			dataStyle.setBorderRight(CellStyle.BORDER_THIN);
			dataStyle.setBorderTop(CellStyle.BORDER_THIN);
			if(errorFlag)
			{
				Font font = wb.createFont();
				font.setColor(IndexedColors.RED.getIndex());
				dataStyle.setFont(font);
			}	
		}
		return dataStyle;
	}
		
	public XSSFWorkbook getOutputWorkbook(strFilePathwithName)
	{
		File file1 = new File(strFilePathwithName);
		XSSFWorkbook O_workbook;
		XSSFSheet result,source,target;
		if(!file1.exists())
		{
			O_workbook = new XSSFWorkbook();
			
			//source = O_workbook.createSheet("API_Data");
			//target = O_workbook.createSheet("DB_Data");
			//result = O_workbook.createSheet("Summary");			
			try
			{
				saveExcelFile(strFilePathwithName,O_workbook)
			}
			catch(Exception e)
			{}
		}
		else
		{
			O_workbook = new XSSFWorkbook(new FileInputStream(new File(strFilePathwithName)));
		}
	
		return O_workbook;
	}
}
context.setProperty("Rt", new Driver_Script())]]></script></con:config></con:testStep><con:testStep type="groovy" name="SetParam" id="ad0050a2-3dcb-42ce-80c1-efe4e57bb1e9"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;

String fName=testRunner.testCase.getPropertyValue('Config')
File config=new File(fName)
Properties prop=new Properties()

def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
	lib.run(testRunner, context)
	def RT = context.Rt

config.withInputStream
{
	line->
	prop.load(line)
}
//log.info prop['DB_URL']
String resultLocation=prop['ResultLocation']

testRunner.testCase.testSuite.setPropertyValue('EndPoint', prop['EndPoint']);
Date date1 = new Date();
String newDate = date1.format('yyyy/MM/dd');
String newTime = date1.format('hh:mm:ss');
String finalDate=newDate.replace('/','_');
String finalTime= newTime.replace(':','_');
String ResultFolder='Result_'+finalDate+'_'+finalTime
String resLoc=resultLocation+'\\'+ResultFolder
XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
String  summary_File=resLoc+'\\Summary.xlsx';
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
File filePath = new File(resLoc);
boolean b=false
XSSFCell cell
XSSFRow currentrow
if(!filePath.exists())
{
	b=filePath.mkdirs()
}
if(b)
{
	DataFormatter formatter = new DataFormatter();
	String currentcell,cellvalue,token,tcid,eFlag;
	testRunner.testCase.testSuite.setPropertyValue('ResultPath', resLoc);
	testRunner.testCase.testSuite.setPropertyValue('SummaryFile', summary_File);

	O_Summary=RT.getSummaryWorkbook(summary_File);
	File t_data=new File(data_F);
	O_td = new XSSFWorkbook(t_data);
	data_s=O_td.getSheet('TestData');
	int row_cnt=data_s.getLastRowNum()

	testRunner.testCase.testSuite.setPropertyValue('Env', prop['Environment']);
	log.info "Working On Environment ="+prop['Environment']
	log.info "EndPoint For Testing = "+prop['EndPoint']
	log.info "Database URL = "+prop['DB_URL']
	log.info "Result Location = "+prop['ResultLocation']
	
	String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
	config=new File(tName)
	config.withInputStream
	{
		line->
		prop.load(line)
	}
	token=prop['API_TOKEN']
	testRunner.testCase.testSuite.setPropertyValue('token', prop['API_TOKEN']);
	log.info "Token for Test execution = "+prop['API_TOKEN']
}
else
{
	System.exit();
}</script></con:config></con:testStep><con:testStep type="groovy" name="SummaryCreate" id="cae9cd94-e27e-4f2a-8a1d-544f531f3d49"><con:settings/><con:config><script>import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;

def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt
String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFWorkbook O_Summary=RT.getSummaryWorkbook(summary_File)
XSSFSheet source=O_Summary.getSheet("API_Summary");
String env=testRunner.testCase.testSuite.getPropertyValue('Env')
switch(env)
{
	case "dev-tactical":
			env="DEV"
		break;
	case "int":
			env="INT"
		break;
	case "uat":
			env="UAT"
		break;
	case "P&amp;I DEV":
		env="P&amp;I DEV"
		break;	
}
RT.writeSummarySheet(O_Summary,source,env)
RT.autoSize(source,'0,1')
RT.saveExcelFile(summary_File,O_Summary)</script></con:config></con:testStep><con:properties><con:property><con:name>Config</con:name><con:value>C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.Properties</con:value></con:property></con:properties></con:testCase><con:testCase id="6d1d2ed5-f09b-48c3-82b2-803ed657d51d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="AppByAppId" id="3b3883cb-bb14-42f5-bff4-b8fcb6fdbf15"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/" methodName="ApplicationByApplicationId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppId" id="ff689291-46b0-47a0-88f0-a2ddbd2b2302" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76177/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ExcludeNewBusiness" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ExcludeNewBusiness</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdWithVoidPolicyCheck" id="da5387ae-b955-4179-a5f4-f31ff37fadb4"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_ApplicationByApplicationId"))
		tcModuleName="ApplicationByApplicationId"
	
	if(tcModuleName.toString().equals("ApplicationByApplicationId"))
	{
		log.info "Test Execution started for getting Application Id details from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			//arrOutputHeader = ["Key","ApplicationId","ApplicationReference","BrokerId","BrokerReference","BrokerName","MemberId","MemberReference","MemberName","ApplicationType","EmailAddress","ApplicationFirstTransaction","PolicyStartDate","PolicyEndDate","IsRenewalApplication","Status"];
			arrOutputHeader = ["ApplicationId","ApplicationReference","BrokerId","BrokerReference","BrokerName","MemberId","MemberReference","MemberName","ApplicationType","EmailAddress","ApplicationFirstTransaction","PolicyStartDate","PolicyEndDate","IsRenewalApplication","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			String getAppId=
			"""
			Use TOM
			Select 
			TOP 100
			AB.Id as ApplicationId, AB.Reference as ApplicationReference, ABR.Broker_Id as BrokerId, B.Reference as BrokerReference, PT.OrganisationName as BrokerName,
			MA.Id as MemberId, MA.Reference as MemberReference, P.OrganisationName as MemberName, 
			AB.Discriminator as ApplicationType, [User].EmailAddress, T.Id as ApplicationFirstTransaction, AB.PolicyStart as PolicyStartDate, 
			AB.PolicyEnd as PolicyEndDate, AB.FlagAtRenewal,
			case when AB.FlagAtRenewal = 1 then 'TRUE'  when AB.FlagAtRenewal = 0 then 'FALSE' else NULL end as IsRenewalApplication,
			RPS.Name as PolicyStatus, RQS.Name as QuoteStatus
			from ApplicationBase AB 
			inner join ApplicationMemberAssured AMA on AMA.Application_Id = AB.Id 
			inner join MemberAssured MA on MA.Id=AMA.MemberAssured_Id 
			inner join Party P on P.Id= MA.Party_Id 
			join [user] on AB.Underwriter_Id = [User].Id
			inner join ApplicationBroker ABR on ABR.Application_Id = AB.Id
			inner join [Transaction] T on T.QuoteBase_id=AB.Id
			inner join Broker B on B.Id=ABR.Broker_Id
			inner join Party PT on PT.Id=B.Party_Id
			left join ApplicationPolicyStatus APS on APS.Application_Id=AB.Id
			left join ref_PolicyStatus RPS on APS.PolicyStatus_Id=RPS.Id
			left join ref_QuoteStatus RQS on RQS.Id = AB.Status_Id
			where AB.Discriminator!='RenewalQuote'
			--and RQS.Id in (18, 19, 20) 
			--and RQS.Name like '%Abandoned%' or RPS.Name like '%Void%' or RPS.Name like '%Bound%' 
			order by 1 desc
			"""

			con.eachRow(getAppId)
			{
				getId->
				AppId=getId.ApplicationId

				String sqlstmt=
				"""
					Use TOM
					Select 
					top 100
					AB.Id as ApplicationId, AB.Reference as ApplicationReference, ABR.Broker_Id as BrokerId, B.Reference as BrokerReference, PT.OrganisationName as BrokerName,
					MA.Id as MemberId, MA.Reference as MemberReference, P.OrganisationName as MemberName, 
					AB.Discriminator as ApplicationType, [User].EmailAddress, T.Id as ApplicationFirstTransaction, AB.PolicyStart as PolicyStartDate, 
					AB.PolicyEnd as PolicyEndDate, AB.FlagAtRenewal,
					case when AB.FlagAtRenewal = 1 then 'TRUE'  when AB.FlagAtRenewal = 0 then 'FALSE' else NULL end as IsRenewalApplication,
					RPS.Name as PolicyStatus, RQS.Name as QuoteStatus
					from ApplicationBase AB 
					inner join ApplicationMemberAssured AMA on AMA.Application_Id = AB.Id 
					inner join MemberAssured MA on MA.Id=AMA.MemberAssured_Id 
					inner join Party P on P.Id= MA.Party_Id 
					join [user] on AB.Underwriter_Id = [User].Id
					inner join ApplicationBroker ABR on ABR.Application_Id = AB.Id
					inner join [Transaction] T on T.QuoteBase_id=AB.Id
					inner join Broker B on B.Id=ABR.Broker_Id
					inner join Party PT on PT.Id=B.Party_Id

					left join ApplicationPolicyStatus APS on APS.Application_Id=AB.Id
					left join ref_PolicyStatus RPS on APS.PolicyStatus_Id=RPS.Id
					left join ref_QuoteStatus RQS on RQS.Id = AB.Status_Id
					where AB.Discriminator!='RenewalQuote'
					--and RQS.Id in (18, 19, 20) 
					--and RQS.Name like '%Abandoned%' or RPS.Name like '%Void%' or RPS.Name like '%Bound%' 
					and AB.Id='"""+AppId+"""'
					order by 1 desc
				"""

				log.info "Checking for Application id  =>"+AppId
				
				rows=con.rows(sqlstmt) 
				arrCellVal=['DB data']
				RT.writeDetails(source,0,0,headerStyle,arrCellVal)
				headerStyle = RT.getCellStyle(O_Summary,'Header');
				RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
				
				def arrData;
				//DB sheet start
				con.eachRow(sqlstmt) 
				{ 
					row->
						sql_ApplicationId=row.ApplicationId
						sql_ApplicationReference=row.ApplicationReference
						sql_ApplicationReference=removeComma(sql_ApplicationReference.toString())
						sql_BrokerId=row.BrokerId
						sql_BrokerReference=row.BrokerReference
						sql_BrokerReference=removeComma(sql_BrokerReference.toString())
						sql_BrokerName=row.BrokerName
						sql_MemberId=row.MemberId
						sql_MemberReference=row.MemberReference
						sql_MemberReference=removeComma(sql_MemberReference.toString())
						sql_MemberName=row.MemberName
						sql_ApplicationType=row.ApplicationType
						sql_EmailAddress=row.EmailAddress
						sql_ApplicationFirstTransaction=row.ApplicationFirstTransaction
						sql_PolicyStartDate=row.PolicyStartDate
						sql_PolicyStartDate=sql_PolicyStartDate.toString().replace(" ", "T")
						sql_PolicyStartDate=getDate(sql_PolicyStartDate.toString())
						sql_PolicyEndDate=row.PolicyEndDate
						sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" ", "T")
						sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())
						sql_IsRenewalApplication=row.IsRenewalApplication

						key=sql_ApplicationId+"_"+sql_BrokerId+"_"+sql_MemberId
						
						log.info "SQL Response is received as =>"+key+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_BrokerId+","+sql_BrokerReference+","+sql_BrokerName+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_ApplicationType+","+sql_EmailAddress+","+sql_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication
						arrCellVal=[sql_ApplicationId,sql_ApplicationReference,sql_BrokerId,sql_BrokerReference,sql_BrokerName,sql_MemberId,sql_MemberReference,sql_MemberName,sql_ApplicationType,sql_EmailAddress,sql_ApplicationFirstTransaction, sql_PolicyStartDate, sql_PolicyEndDate, sql_IsRenewalApplication];
						RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
						db_size++
						counter++
						try
						{
							RT.saveExcelFile(summary_File,O_Summary)
						}
						catch(Exception e) 
						{
							log.info e.toString();
						}
				}//sql end
			}
			
			totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start
			//int recordCount=0

			con.eachRow(getAppId)
			{
				getAppIdRow->
				AppId=getAppIdRow.ApplicationId
				App_PolicyStatus=getAppIdRow.PolicyStatus
				App_QuoteStatus=getAppIdRow.QuoteStatus
				
				log.info "Getting api values for Application Id =>"+AppId

				testRunner.testCase.setPropertyValue("applicationId", AppId.toString())
				testRunner.testCase.setPropertyValue('token',token)
					
				//API
				testRunner.runTestStepByName('AppByAppId')
				String req='${AppByAppId#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
	
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["AppByAppId"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	
				arrCellVal=['API DATA']
				RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
				RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
				
				if(httpStatusCode.toString().equals("200"))// && !App_PolicyStatus.toString().equals("Void") || !App_QuoteStatus.toString().contains("Abandoned"))
				{
					def jsonRes=jsonSlurper.parseText(response)	
					size=(int) jsonRes.reference.size()
					
					api_ApplicationId=jsonRes.id
					api_ApplicationReference=jsonRes.reference
					api_ApplicationReference=removeComma(api_ApplicationReference.toString())
					api_BrokerId=jsonRes.brokerId
					api_BrokerReference=jsonRes.brokerReference
					api_BrokerReference=removeComma(api_BrokerReference.toString())
					api_BrokerName=jsonRes.brokerName
					api_MemberId=jsonRes.memberId
					api_MemberReference=jsonRes.memberReference
					api_MemberReference=removeComma(api_MemberReference.toString())
					api_MemberName=jsonRes.memberName
					api_Discriminator=jsonRes.applicationType
					api_EmailAddress=jsonRes.applicationUnderwriterEmail
					api_ApplicationFirstTransaction=jsonRes.applicationFirstTransaction
					api_PolicyStartDate=jsonRes.policyStartDate
					api_PolicyStartDate=api_PolicyStartDate.toString().replace(" ", "T")
					api_PolicyStartDate=getDate(api_PolicyStartDate.toString())
					api_PolicyEndDate=jsonRes.policyEndDate
					api_PolicyEndDate=api_PolicyEndDate.toString().replace(" ", "T")
					api_PolicyEndDate=getDate(api_PolicyEndDate.toString())
					api_IsRenewalApplication=jsonRes.isRenewalApplication
					//api_IsRenewalApplication=removeComma(api_IsRenewalApplication.toString())

					key=api_ApplicationId+"_"+api_BrokerId+"_"+api_MemberId
						
					log.info "API Response is received as =>"+key+","+api_ApplicationId+","+api_ApplicationReference+","+api_BrokerId+","+api_BrokerReference+","+api_BrokerName+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_Discriminator+","+api_EmailAddress+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication
					arrCellVal=[api_ApplicationId, api_ApplicationReference, api_BrokerId, api_BrokerReference, api_BrokerName, api_MemberId, api_MemberReference, api_MemberName, api_Discriminator, api_EmailAddress, api_ApplicationFirstTransaction, api_PolicyStartDate, api_PolicyEndDate, api_IsRenewalApplication];
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					total_size++
					counter++
				}
				if(App_PolicyStatus.toString().equals("Void") || App_QuoteStatus.toString().contains("Abandoned") && httpStatusCode.toString().equals("200"))
				{
					if(App_PolicyStatus.toString()!=null)
					{
						String status=App_PolicyStatus.toString()
					}
					else if(App_QuoteStatus.toString()!=null)
					{
						String status=App_QuoteStatus.toString()
					}
					
					if(httpStatusCode.toString().equals("404"))
					{
						log.info "For Void policy / Abandoned quote- valid error response code is displayed hence test case is passed"
						arrCellVal=[AppId, "Policy Or Quote Status is ->"+App_PolicyStatus+"/"+App_QuoteStatus+" is valid and http status code", httpStatusCode,httpStatus , " ", " ", " ", " ", " ", " ", " ", " ", " ", "Test case is passed"]
					}
					else
					{
						log.info "For Void policy / Abandoned quote- invalid error response code is displayed hence test case is failed"
						arrCellVal=[AppId, "Policy Or Quote Status is ->"+App_PolicyStatus+"/"+App_QuoteStatus+" is invalid and http status code", httpStatusCode,httpStatus , " "," " ," " ," " ," " ," " ," " ," " ," " ," " , "Test case is Failed"]
					}
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
				}
				else if(httpStatusCode.toString().equals("200") && httpStatusCode.toString().equals("401") && httpStatusCode.toString().equals("404"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}
			}
			con.close()	

				//DB compare with API
				int db_startCol=0
				counter=row_start;
				totalColumns = source.getRow(1).getLastCellNum();
				int api_endCol=totalColumns-1
				dsc='Compares API data for Application details as per Application Id with UTOM Database data'
				tcid=tcModuleName.toString()
				RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
				
		}//inner if end
	}//outer if end
}//outer for end
public String  removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field!=null)
		field=field.toUpperCase()
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>90302</con:value></con:property></con:properties></con:testCase><con:testCase id="09c8549b-925d-49f8-ba3c-6ac0174ced25" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByBrokers" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByBroker" id="8133e845-892b-4034-b59a-6d9e943237cd"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/brokers" methodName="ApplicationByApplicaitonIdByBrokers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByBroker" id="c5aadab0-2eeb-4e6a-ab8b-718b70090e48" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76130/brokers</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByBroker" id="37542773-19e2-4dd5-8c2f-70a2d0d57893"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import java.text.SimpleDateFormat

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList<String> appIdList= new ArrayList<>();

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ApplicationByApplicationIdByBrokers"))
		tcModuleName="ApplicationByAppIdByBrokers"
		
	if(tcModuleName.toString().equals("ApplicationByAppIdByBrokers"))
	{
		log.info "Test Execution started for getting Broker Details as per Application Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader=["Key","ApplicationId","BrokerId","BrokerReference","PartyId","CrmIdentifier","IsOrganisationFlag","OrganisationName","Salutation","FirstName","MiddleName","LastName","Name","SearchName","EmailAddress","Telephone","Fax","AddressId","AddressName","Line1","Line2","Line3","City","StateOrProvince","Country","Postcode","Status"]
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			date= new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
			date = new Date()
			getDateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
			String todaysDate=getDateFormat.format(date)
			todaysDate=todaysDate.toString().replace("/","-")
			
			String sqlstmt=
			"""
			USE TOM
			Select
			TOP 10
			AB.Id as ApplicationId, ABR.Broker_Id as BrokerId, B.Reference as BrokerReference, P.Id as PartyId, P.CrmIdentifier,
			case when P.IsOrganisation=0 then 'false' when P.IsOrganisation=1 then 'true' end as IsOrganisationFlag, P.OrganisationName, 
			P.Salutation, P.FirstName, P.MiddleName, P.LastName,  P.SearchName as Name, P.SearchName, P.EmailAddress, P.Telephone, P.Fax,
			A.Id as AddressId, A.Name as AddressName, A.Line1, A.Line2, A.Line3, A.City, A.StateOrProvince, C.Name as Country, A.Postcode, AB.PolicyEnd
			from ApplicationBase AB
			inner join ApplicationBroker ABR on ABR.Application_Id = AB.Id
			left join Broker B on B.Id=ABR.Broker_Id
			left join Party P on P.Id=B.Party_Id
			left join Address A on A.Party_Id = P.Id 
			left join ref_Country C on C.Id = A.Country_Id 
			--where AB.Id in (91880,91879,91878,91877,91876)
			--where AB.PolicyEnd<getDate()
			--where AB.Id=92926
			order by 1 desc, 2
			"""
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_ApplicationId=row.ApplicationId
				appIdList.add(sql_ApplicationId)
				sql_ApplicationId=removeComma(sql_ApplicationId.toString())
				sql_BrokerId=row.BrokerId
				sql_BrokerId=removeComma(sql_BrokerId.toString())
				sql_BrokerReference=row.BrokerReference
				sql_BrokerReference=removeComma(sql_BrokerReference.toString())
				sql_PartyId=row.PartyId
				sql_PartyId=removeComma(sql_PartyId.toString())
				sql_CrmIdentifier=row.CrmIdentifier
				sql_CrmIdentifier=removeComma(sql_CrmIdentifier.toString())
				sql_IsOrganisation=row.IsOrganisationFlag
				sql_IsOrganisation=removeComma(sql_IsOrganisation.toString())
				sql_OrganisationName=row.OrganisationName
				sql_OrganisationName=removeComma(sql_OrganisationName.toString())
				sql_Salutation=row.Salutation
				sql_Salutation=removeComma(sql_Salutation.toString())
				sql_FirstName=row.FirstName
				sql_FirstName=removeComma(sql_FirstName.toString())
				sql_MiddleName=row.MiddleName
				sql_MiddleName=removeComma(sql_MiddleName.toString())
				sql_LastName=row.LastName
				sql_LastName=removeComma(sql_LastName.toString())
				sql_Name=row.Name
				sql_Name=removeComma(sql_Name.toString())
				sql_SearchName=row.SearchName
				sql_SearchName=removeComma(sql_SearchName.toString())
				sql_EmailAddress=row.EmailAddress
				sql_EmailAddress=removeComma(sql_EmailAddress.toString())
				sql_Telephone=row.Telephone
				sql_Telephone=removeComma(sql_Telephone.toString())
				sql_Fax=row.Fax
				sql_Fax=removeComma(sql_Fax.toString())
				sql_AddressId=row.AddressId
				sql_AddressId=removeComma(sql_AddressId.toString())
				sql_AddressName=row.AddressName
				sql_AddressName=removeComma(sql_AddressName.toString())
				sql_Line1=row.Line1
				sql_Line1=removeComma(sql_Line1.toString())
				sql_Line2=row.Line2
				sql_Line2=removeComma(sql_Line2.toString())
				sql_Line3=row.Line3
				sql_Line3=removeComma(sql_Line3.toString())
				sql_City=row.City
				sql_City=removeComma(sql_City.toString())
				sql_StateOrProvince=row.StateOrProvince
				sql_StateOrProvince=removeComma(sql_StateOrProvince.toString())
				sql_Country=row.Country
				sql_Country=removeComma(sql_Country.toString())
				sql_Postcode=row.Postcode
				sql_Postcode=removeComma(sql_Postcode.toString())
				sql_PolicyEnd=row.PolicyEnd
				sql_PolicyEnd=getDate(sql_PolicyEnd.toString())

				if(sql_PolicyEnd<todaysDate)
				{
					log.info "For Application Id=>"+ApplicationId+" policy end date is past date=>"+sql_PolicyEnd+" hence expecting API response status code 404"
					arrCellVal=[ApplicationId," has Past dated policy end date"];
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					counter++
				}
				else
				{
					key=sql_ApplicationId+"_"+sql_AddressId
								
					log.info "SQL Response is received as =>"+key+","+sql_ApplicationId+","+sql_BrokerId+","+sql_BrokerReference+","+sql_PartyId+","+sql_CrmIdentifier+","+sql_IsOrganisation+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode
					arrCellVal=[key,sql_ApplicationId,sql_BrokerId,sql_BrokerReference,sql_PartyId,sql_CrmIdentifier,sql_IsOrganisation,sql_OrganisationName,sql_Salutation,sql_FirstName,sql_MiddleName,sql_LastName,sql_Name,sql_SearchName,sql_EmailAddress,sql_Telephone,sql_Fax,sql_AddressId,sql_AddressName,sql_Line1,sql_Line2,sql_Line3,sql_City,sql_StateOrProvince,sql_Country,sql_Postcode];
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					counter++	
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
				
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldAppId=00
			
			for (int k = 0; k < appIdList.size(); k++)
			 {
			 	log.info "Welcome"
			 	int appId=appIdList.get(k).toInteger()
			 	
			 	if(oldAppId.toString() == appId.toString())
			 	{
				 	oldAppId = appId
			 	}
			 	else
			 	{
			 		log.info "Getting API response for Application Id=>"+appId
				 	
				 	testRunner.testCase.setPropertyValue('applicationId',appId.toString())
					
					testRunner.testCase.setPropertyValue('token',token)
					testRunner.runTestStepByName('AppByAppIdByBroker')
					String req='${AppByAppIdByBroker#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["AppByAppIdByBroker"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

					def json=jsonSlurper.parseText(response)
					
					if(httpStatusCode.toString().equals("200"))
					{
						int jsonRecordCount = json.totalRecords
						size=json.totalRecords.toInteger()
						for(int i=0;i<jsonRecordCount;i++)
						{
							int getAddressCount = json.results.party.addresses[i].id.size()
							log.info "Number of Addresses are =>"+getAddressCount
							for(int j=0; j<getAddressCount; j++)
							{
								api_BrokerId=json.results.id[i]
								api_BrokerId=removeComma(api_BrokerId.toString())
								api_BrokerReference=json.results.reference[i]
								api_BrokerReference=removeComma(api_BrokerReference.toString())
								api_PartyId=json.results.party.id[i]
								api_PartyId=removeComma(api_PartyId.toString())
								api_CrmIdentifier=json.results.party.crmIdentifier[i]
								if(api_CrmIdentifier!=null)
									api_CrmIdentifier=api_CrmIdentifier.toString().toUpperCase()
								api_CrmIdentifier=removeComma(api_CrmIdentifier.toString())
								api_IsOrganisation=json.results.party.isOrganisation[i]
								api_IsOrganisation=removeComma(api_IsOrganisation.toString())
								api_OrganisationName=json.results.party.organisationName[i]
								api_OrganisationName=removeComma(api_OrganisationName.toString())
								api_Salutation=json.results.party.salutation[i]
								api_Salutation=removeComma(api_Salutation.toString())
								api_FirstName=json.results.party.firstName[i]
								api_FirstName=removeComma(api_FirstName.toString())
								api_MiddleName=json.results.party.middleName[i]
								api_MiddleName=removeComma(api_MiddleName.toString())
								api_LastName=json.results.party.lastName[i]
								api_LastName=removeComma(api_LastName.toString())
								api_Name=json.results.party.name[i]
								api_Name=removeComma(api_Name.toString())
								api_SearchName=json.results.party.searchName[i]
								api_SearchName=removeComma(api_SearchName.toString())
								api_EmailAddress=json.results.party.emailAddress[i]
								api_EmailAddress=removeComma(api_EmailAddress.toString())
								api_Telephone=json.results.party.telephone[i]
								api_Telephone=removeComma(api_Telephone.toString())
								api_Fax=json.results.party.fax[i]
								api_Fax=removeComma(api_Fax.toString())

								api_AddressId=json.results.party.addresses[i].id[j]
								api_AddressId=removeComma(api_AddressId.toString())
								api_AddressName=json.results.party.addresses[i].addressName[j]
								api_AddressName=removeComma(api_AddressName.toString())
								api_Line1=json.results.party.addresses[i].addressLine1[j]
								api_Line1=removeComma(api_Line1.toString())
								api_Line2=json.results.party.addresses[i].addressLine2[j]
								api_Line2=removeComma(api_Line2.toString())
								api_Line3=json.results.party.addresses[i].addressLine3[j]
								api_Line3=removeComma(api_Line3.toString())
								api_City=json.results.party.addresses[i].city[j]
								api_City=removeComma(api_City.toString())
								api_StateOrProvince=json.results.party.addresses[i].stateOrCounty[j]
								api_StateOrProvince=removeComma(api_StateOrProvince.toString())
								api_Country=json.results.party.addresses[i].country[j]
								api_Country=removeComma(api_Country.toString())
								api_Postcode=json.results.party.addresses[i].postCode[j]
								api_Postcode=removeComma(api_Postcode.toString())
								applicationId=removeComma(appId.toString())
								key=applicationId+"_"+api_AddressId
								
								log.info "API Response is received as =>"+key+","+applicationId+","+api_BrokerId+","+api_BrokerReference+","+api_PartyId+","+api_CrmIdentifier+","+api_IsOrganisation+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode
								arrCellVal=[key,applicationId,api_BrokerId,api_BrokerReference,api_PartyId,api_CrmIdentifier,api_IsOrganisation,api_OrganisationName,api_Salutation,api_FirstName,api_MiddleName,api_LastName,api_Name,api_SearchName,api_EmailAddress,api_Telephone,api_Fax,api_AddressId,api_AddressName,api_Line1,api_Line2,api_Line3,api_City,api_StateOrProvince,api_Country,api_Postcode];
								RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
								counter++
								total_size+=size
							}
						}
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					else if(httpStatusCode.toString().equals("404"))
					{
							log.info "For Application Id=>"+applicationId+" policy end date is past date, hence API response status code 404 is received"
							arrCellVal=[applicationId," has Past dated policy end date"];
							RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
					oldAppId = appId
			 	}
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Broker Details as per Application Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>90686</con:value></con:property></con:properties></con:testCase><con:testCase id="7b6eb75a-5107-494b-b4ae-d90e2e2d9754" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByMembers" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="AppByAppdIdByMembers" id="dd168ab7-927d-4a30-b64b-ea5e954ec298"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/members" methodName="ApplicationByApplicationIdByMembers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppdIdByMembers" id="0d806ab2-970b-4a39-9287-e951badea32c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76177/members</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByMembers" id="b0d75553-f2d7-4c9e-ac52-272006f5211c"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import java.text.SimpleDateFormat

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_ApplicationByApplicationIdByMembers"))
		tcModuleName="ApplicationByAppIdByMembers"
	
	if(tcModuleName.toString().equals("ApplicationByAppIdByMembers"))
	{
		log.info "Test Execution started for getting Members Details as per Application Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader=["ApplicationId","MemberAssuredId","MemberReference","Domicile","PartyId","CrmIdentifier","IsOrganisationFlag","OrganisationName","Salutation","FirstName","MiddleName","LastName","SearchName","EmailAddress","Telephone","Fax","AddressId","AddressName","AddressLine1","AddressLine2","AddressLine3","City","State","Country","Postcode","Status"]
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			date= new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
			date = new Date()
			getDateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
			String todaysDate=getDateFormat.format(date)
			todaysDate=todaysDate.toString().replace("/","-")
			//log.info "Today's Date is="+todaysDate
	

			String getAppId=
			"""
			USE TOM
			SELECT 
			DISTINCT
			TOP 10
			AB.Id as ApplicationId, AMA.MemberAssured_Id as MemberAssuredId, MA.Reference as MemberReference, CN.ShortCode as Domicile, P.Id as PartyId, P.CrmIdentifier,
			case when P.IsOrganisation=0 then 'FALSE' when P.IsOrganisation=1 then 'TRUE' end as IsOrganisationFlag,
			P.OrganisationName, P.Salutation, P.FirstName, P.MiddleName, P.LastName, concat (P.Salutation,' ', P.SearchName) as Name, P.SearchName, P.EmailAddress, P.EmailAddress, P.Telephone, P.Fax,
			A.Id as AddressId, A.Name as AddressName, a.Line1 as AddressLine1, a.Line2 as AddressLine2,A.Line3 as AddressLine3, A.City, A.StateOrProvince as State, C.Name as Country, A.Postcode
			from ApplicationBase AB
			inner join ApplicationMemberAssured AMA on AMA.Application_Id=AB.Id
			left join MemberAssured MA on MA.Id=AMA.MemberAssured_Id
			inner join ref_Country CN on CN.Id=MA.DomicileCountry_Id
			inner join Party P on P.Id=MA.Party_Id 
			inner join Address A on A.Party_Id=P.Id 
			inner join ref_Country C on C.Id=A.Country_Id
			order by 1 desc
			"""
			String oldAppId=null
			boolean policyFlag=false
			con.eachRow(getAppId)
			{
				getPolicyId->
				ApplicationId=getPolicyId.ApplicationId

				String sqlstmt=
				"""
				USE TOM
				declare
				@applicationId as int = '"""+ApplicationId+"""'
				select
				DISTINCT
				AB.Id as ApplicationId, AMA.MemberAssured_Id as MemberAssuredId, MA.Reference as MemberReference, CN.ShortCode as Domicile, P.Id as PartyId, P.CrmIdentifier,
				case when P.IsOrganisation=0 then 'FALSE' when P.IsOrganisation=1 then 'TRUE' end as IsOrganisationFlag,
				P.OrganisationName, P.Salutation, P.FirstName, P.MiddleName, P.LastName, concat (P.Salutation,' ', P.SearchName) as Name, P.SearchName, P.EmailAddress, P.EmailAddress, P.Telephone, P.Fax,
				A.Id as AddressId, A.Name as AddressName, a.Line1 as AddressLine1, a.Line2 as AddressLine2,A.Line3 as AddressLine3, A.City, A.StateOrProvince as State, C.Name as Country, A.Postcode
				from ApplicationBase AB
				inner join ApplicationMemberAssured AMA on AMA.Application_Id=AB.Id
				left join MemberAssured MA on MA.Id=AMA.MemberAssured_Id
				inner join Party P on P.Id=MA.Party_Id 
				inner join ref_Country CN on CN.Id=MA.DomicileCountry_Id
				inner join Address A on A.Party_Id=P.Id 
				inner join ref_Country C on C.Id=A.Country_Id
				where AB.Id=@applicationId
				order by 1 desc
				"""	
				log.info "Checking for Application Id =>"+ApplicationId
				
				rows=con.rows(sqlstmt) 
				arrCellVal=['DB data']
				
				RT.writeDetails(source,0,0,headerStyle,arrCellVal)
				
				headerStyle = RT.getCellStyle(O_Summary,'Header');
				RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
				
				def arrData;
				//DB sheet start
				
				con.eachRow(sqlstmt) 
				{ 
					row->
					sql_ApplicationId=row.ApplicationId
					sql_ApplicationId=removeBrackets(sql_ApplicationId.toString())
					sql_MemberId=row.MemberAssuredId
					sql_MemberId=removeBrackets(sql_MemberId.toString())
					sql_MemberReference=row.MemberReference
					sql_MemberReference=removeBrackets(sql_MemberReference.toString())
					sql_Domicile = row.Domicile
					sql_Domicile=removeBrackets(sql_Domicile.toString())
					sql_PartyId=row.PartyId
					sql_PartyId=removeBrackets(sql_PartyId.toString())
					sql_CrmIdentifier=row.CrmIdentifier
					sql_CrmIdentifier=removeBrackets(sql_CrmIdentifier.toString())
					sql_IsOrganisation=row.IsOrganisationFlag
					sql_IsOrganisation=removeBrackets(sql_IsOrganisation.toString())
					sql_OrganisationName=row.OrganisationName
					sql_OrganisationName=removeBrackets(sql_OrganisationName.toString())
					sql_Salutation=row.Salutation
					sql_Salutation=removeBrackets(sql_Salutation.toString())
					sql_FirstName=row.FirstName
					sql_FirstName=removeBrackets(sql_FirstName.toString())
					sql_MiddleName=row.MiddleName
					sql_MiddleName=removeBrackets(sql_MiddleName.toString())
					sql_LastName=row.LastName
					sql_LastName=removeBrackets(sql_LastName.toString())
					sql_SearchName=row.SearchName
					sql_SearchName=removeBrackets(sql_SearchName.toString())
					sql_EmailAddress=row.EmailAddress
					sql_EmailAddress=removeBrackets(sql_EmailAddress.toString())
					sql_Telephone=row.Telephone
					sql_Telephone=removeBrackets(sql_Telephone.toString())
					sql_Fax=row.Fax
					sql_Fax=removeBrackets(sql_Fax.toString())
					sql_AddressId=row.AddressId
					sql_AddressId=removeBrackets(sql_AddressId.toString())
					sql_AddressName=row.AddressName
					sql_AddressName=removeBrackets(sql_AddressName.toString())
					sql_AddressLine1=row.AddressLine1
					sql_AddressLine1=removeBrackets(sql_AddressLine1.toString())
					sql_AddressLine2=row.AddressLine2
					sql_AddressLine2=removeBrackets(sql_AddressLine2.toString())
					sql_AddressLine3=row.AddressLine3
					sql_AddressLine3=removeBrackets(sql_AddressLine3.toString())
					sql_City=row.City
					sql_City=removeBrackets(sql_City.toString())
					sql_State=row.State
					sql_State=removeBrackets(sql_State.toString())
					sql_Country=row.Country
					sql_Country=removeBrackets(sql_Country.toString())
					sql_Postcode=row.Postcode
					sql_Postcode=removeBrackets(sql_Postcode.toString())
					
					log.info "SQL Response is received as =>"+sql_ApplicationId+","+sql_MemberId+","+sql_MemberReference+","+sql_Domicile +","+sql_PartyId+","+sql_CrmIdentifier+","+sql_IsOrganisation+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressId+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_City+","+sql_State+","+sql_Country+","+sql_Postcode
					arrCellVal=[sql_ApplicationId,sql_MemberId,sql_MemberReference,sql_Domicile ,sql_PartyId,sql_CrmIdentifier,sql_IsOrganisation,sql_OrganisationName,sql_Salutation,sql_FirstName,sql_MiddleName,sql_LastName,sql_SearchName,sql_EmailAddress,sql_Telephone,sql_Fax,sql_AddressId,sql_AddressName,sql_AddressLine1,sql_AddressLine2,sql_AddressLine3,sql_City,sql_State,sql_Country,sql_Postcode];
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					
					db_size++
					counter++
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e) 
					{
						log.info e.toString();
					}
				}//inner sql end
			}//outer sql end
			
			totalColumns = source.getRow(1).getLastCellNum()
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start

			con.eachRow(getAppId)
			{
				getId->
				ApplicationId=getId.ApplicationId
				ApplicationId=removeBrackets(ApplicationId.toString())
					
				log.info "Getting api values for Application Id =>"+ApplicationId
				testRunner.testCase.setPropertyValue( "applicationId", ApplicationId.toString())
				testRunner.testCase.setPropertyValue('token',token)
					
				//API
				testRunner.runTestStepByName('AppByAppdIdByMembers')
				String req='${AppByAppdIdByMembers#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
				
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["AppByAppdIdByMembers"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
			
				arrCellVal=['API DATA']
				RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
				RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
				log.info "Original API response is =>"+response
				log.info "HTTP Status code received as =>"+httpStatusCode
				def json=jsonSlurper.parseText(response)	
				
				if(httpStatusCode.toString().equals("200"))
				{
					api_MemberId=json.results.id
					api_MemberId=removeBrackets(api_MemberId.toString())
					api_MemberReference=json.results.reference
					api_MemberReference=removeBrackets(api_MemberReference.toString())
					api_Domicile=json.results.domicile
					api_Domicile=removeBrackets(api_Domicile.toString())
					api_PartyId=json.results.party.id
					api_PartyId=removeBrackets(api_PartyId.toString())
					api_CrmIdentifier=json.results.party.crmIdentifier
					api_CrmIdentifier=removeBrackets(api_CrmIdentifier.toString())
					api_IsOrganisation=json.results.party.isOrganisation
					api_IsOrganisation=removeBrackets(api_IsOrganisation.toString())
					api_OrganisationName=json.results.party.organisationName
					api_OrganisationName=removeBrackets(api_OrganisationName.toString())
					api_Salutation=json.results.party.salutation
					api_Salutation=removeBrackets(api_Salutation.toString())
					api_FirstName=json.results.party.firstName
					api_FirstName=removeBrackets(api_FirstName.toString())
					api_MiddleName=json.results.party.middleName
					api_MiddleName=removeBrackets(api_MiddleName.toString())
					api_LastName=json.results.party.lastName
					api_LastName=removeBrackets(api_LastName.toString())
					api_SearchName=json.results.party.searchName
					api_SearchName=removeBrackets(api_SearchName.toString())
					api_EmailAddress=json.results.party.emailAddress
					api_EmailAddress=removeBrackets(api_EmailAddress.toString())
					api_Telephone=json.results.party.telephone
					api_Telephone=removeBrackets(api_Telephone.toString())
					api_Fax=json.results.party.fax
					api_Fax=removeBrackets(api_Fax.toString())
					api_AddressId=json.results.party.addresses.id
					api_AddressId=removeBrackets(api_AddressId.toString())
					api_AddressName=json.results.party.addresses.addressName
					api_AddressName=removeBrackets(api_AddressName.toString())
					api_AddressLine1=json.results.party.addresses.addressLine1
					api_AddressLine1=removeBrackets(api_AddressLine1.toString())
					api_AddressLine2=json.results.party.addresses.addressLine2
					api_AddressLine2=removeBrackets(api_AddressLine2.toString())
					api_AddressLine3=json.results.party.addresses.addressLine3
					api_AddressLine3=removeBrackets(api_AddressLine3.toString())
					api_City=json.results.party.addresses.city
					api_City=removeBrackets(api_City.toString())
					api_State=json.results.party.addresses.stateOrCounty
					api_State=removeBrackets(api_State.toString())
					api_Country=json.results.party.addresses.country
					api_Country=removeBrackets(api_Country.toString())
					api_Postcode=json.results.party.addresses.postCode
					api_Postcode=removeBrackets(api_Postcode.toString())
										
					log.info "API Response is received as =>"+ApplicationId+","+api_MemberId+","+api_MemberReference+","+api_Domicile+","+api_PartyId+","+api_CrmIdentifier+","+api_IsOrganisation+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_AddressName+","+api_AddressLine1+","+api_AddressLine2+","+api_AddressLine3+","+api_City+","+api_State+","+api_Country+","+api_Postcode
					arrCellVal=[ApplicationId,api_MemberId,api_MemberReference,api_Domicile,api_PartyId,api_CrmIdentifier,api_IsOrganisation,api_OrganisationName,api_Salutation,api_FirstName,api_MiddleName,api_LastName,api_SearchName,api_EmailAddress,api_Telephone,api_Fax,api_AddressId,api_AddressName,api_AddressLine1,api_AddressLine2,api_AddressLine3,api_City,api_State,api_Country,api_Postcode];
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)

					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
				}//if status 200 end
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				total_size++
				counter++
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}
			}//inner db get data close
			con.close()	

			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Members details as per Application Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String  removeBrackets(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field==null && field.contains("[") || field=="NULL" && field.contains("[") || field=="null" && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
		field="NULL"
	}
	if(field!=null)
		field=field.toUpperCase()
	return field
}

public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>90541</con:value></con:property></con:properties></con:testCase><con:testCase id="3ed52582-c382-4eac-a7bd-76eff4dc7ff1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_PatchApplicationByApplicationIdByDocumentByDocumentId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="PatchAppByAppIdByDocByDocId" id="292886cb-c20d-4df4-8c0b-f05665eefd2c"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationid}/documents/${#TestCase#documentId}" methodName="Patch_ApplicationByApplicationIdByDocumentByDocumentId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PatchAppByAppIdByDocByDocId" id="b375f3dd-a492-4310-9f7a-6e866b2a71d3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>
							[
								{
								"op": "replace",
								    "path": "/storageid",
								    "value": "testStorageID"
								  },
								  {
								    "op": "add",
								    "path": "/documentmetadata",
								    "value": "Test1"
								  }
							]
								</con:request><con:originalUri>http://spltomservices/api/utomapi/applications/75532/documents/494509</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Get_DocByDocId" id="7635c7b3-718a-4c26-8e5a-20eea6a858d7"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/documents/${#TestCase#documentId}" methodName="ApplicationByApplicationIdByDocumentsByDocumentId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_DocByDocId" id="a0e17e00-8054-4123-9d3c-2be3c46b51ef" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/75527/documents/494502</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="PatchApplicationByApplicationIdByDocumentByDocumentId" id="b4903eed-6661-43a0-a280-e4702ef95eb5"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

ArrayList<String> appId = new ArrayList<>();
ArrayList<String> docId = new ArrayList<>();

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_PatchApplicationByApplicationIdByDocumentByDocumentId"))
		tcModuleName="PATCHAppByAppIdByDocuments"
	
	if(tcModuleName.toString().equals("PATCHAppByAppIdByDocuments"))
	{
		log.info "Test Execution started for PATCH method of Application By Application Id By Documents"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Key","ApplicationId","DocumentId","DocumentTypeId","DocumentType","DocumentReference","DocumentStatusId","DocumentStatusName","TransactionId","RiskId","RiskName","Workflowid","DisplayName","TransactionStatus","TransactionSequence","TransactionSubTypeOtherDescription","ReasonForChange","UserSuppliedText","DocumentVersion","DocumentKey","StorageId","DocumentMetaData","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			def tcIdForGetDetails;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			arrCellVal=['PATCHAPI data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)


			String sqlstmt=
			"""
			USE TOM
			SELECT
			TOP 10
			AB.Id as ApplicationId, D.Id as DocumentId, D.DocumentType_Id, rdt.Name as DocumentType, D.DocumentReference, D.DocumentStatus_Id, RDS.Name as DocumentStatus, t.Id as TransactionId,
			t.WorkflowId, AB.Discriminator as DisplayName, T.StartDate, T.EndDate, T.AppliedDate, rts.Name as TransationStatus, T.Sequence as TransactionSequence, T.TransactionSubTypeOtherDescription,
			T.ReasonForChange_Id, D.UserSuppliedText, D.DocumentVersion,D.IssuedDate, D.DocumentKey, D.RiskName, D.StorageId, D.DocumentMetaData
			from applicationbase AB
			inner Join [TRANSACTION] t on T.Policy_Id = AB.Id and T.Transaction_PhysicalDeletionAttemptPrevented = 0
			left join ref_TransactionStatus rts on rts.Id = T.TransactionStatus_Id
			left join Document d on D.Transaction_Id = T.Id --and D.DocumentBase_PhysicalDeletionAttemptPrevented = 0
			left join ref_DocumentType rdt on rdT.Id = D.DocumentType_Id 
			left join ref_DocumentStatus rds on RDS.Id = D.DocumentStatus_Id
			where D.Id is not null and rdt.Name='TradingCertificate' and RDS.Name='Issued'
			and  AB.id=91961
			order by 1 desc
			"""

			def arrData;
			con.eachRow(sqlstmt)
			{
				row -> 
				sql_ApplicationId=row.ApplicationId
				sql_DocumentId=row.DocumentId
				sql_StorageId=row.StorageId
				sql_DocumentMetaData=row.DocumentMetaData
				
				//Set the Application ID at test case level
				log.info "Creating PATCH request for Application Id => "+sql_ApplicationId+" and Document Id =>"+sql_DocumentId

				String valueOfStorageId=sql_StorageId.toString()+"_"
				String valueOfTestPath=sql_DocumentMetaData.toString()+"_"
				
				def newRequest = 
				"""
				[
					{
						"op": "replace",
						    "path": "/storageid",
						    "value": "${valueOfStorageId}"
					  },
					  {
						    "op": "add",
						    "path": "/documentmetadata",
						    "value": "${valueOfTestPath}"
					  }
				]
				"""
				//Run the test step to get response
				log.info "Body for PATCH Request = "+newRequest
				testRunner.testCase.setPropertyValue( "Request", newRequest)
				testRunner.testCase.setPropertyValue("applicationid", sql_ApplicationId.toString())
				testRunner.testCase.setPropertyValue("documentId", sql_DocumentId.toString())
				
				testRunner.runTestStepByName('PatchAppByAppIdByDocByDocId')
				String req='${PatchAppByAppIdByDocByDocId#Response}'
				response=context.expand(req)
				log.info "Original API response for PATCH method is =>"+response
				jsonSlurper=new JsonSlurper() 
				json=jsonSlurper.parseText(response)
				
				//Check the Status code of API response
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				def httpResponseHeaders = context.testCase.testSteps["PatchAppByAppIdByDocByDocId"].testRequest.response.responseHeaders
				def httpStatus = httpResponseHeaders["#status#"]
				def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				log.info "HTTP Status code is =>"+httpStatusCode

				if(httpStatusCode.equals("200"))
				{
					//def json=jsonSlurper.parseText(response)
					patchApi_DocumentId = json.id
					patchApi_DocumentTypeId = json.documentType.id
					patchApi_DocumentType = json.documentType.documentTypeName
					patchApi_DocumentReference = json.documentReference
					patchApi_DocumentStatusId = json.documentStatus.id
					patchApi_DocumentStatusName = json.documentStatus.documentStatusName
					patchApi_TransactionId = json.transaction.id
					patchApi_RiskId = json.riskId
					patchApi_RiskName = json.riskName
					patchApi_Workflowid = json.transaction.workflowid
					patchApi_DisplayName=json.transaction.displayName
					patchApi_TransactionStatus=json.transaction.transactionStatus
					patchApi_TransactionSequence=json.transaction.transactionSequence
					patchApi_TransactionSubTypeOtherDescription=json.transaction.transactionSubTypeOtherDescription
					patchApi_ReasonForChange=json.transaction.reasonForChange
					patchApi_UserSuppliedText=json.userSuppliedText
					patchApi_DocumentVersion=json.documentVersion
					patchApi_DocumentKey=json.documentKey
					patchApi_StorageId=json.storageId
					patchApi_DocumentMetaData=json.documentMetaData

					appId.add(sql_ApplicationId)
					docId.add(sql_DocumentId)
					
					key=sql_ApplicationId+"_"+patchApi_DocumentId
				
					log.info "API Response received from Patch Method as : "+key+","+sql_ApplicationId+","+patchApi_DocumentId+","+patchApi_DocumentTypeId+","+patchApi_DocumentType+","+patchApi_DocumentReference+","+patchApi_DocumentStatusId+","+patchApi_DocumentStatusName+","+patchApi_TransactionId+","+patchApi_RiskId+","+patchApi_RiskName+","+patchApi_Workflowid+","+patchApi_DisplayName+","+patchApi_TransactionStatus+","+patchApi_TransactionSequence+","+patchApi_TransactionSubTypeOtherDescription+","+patchApi_ReasonForChange+","+patchApi_UserSuppliedText+","+patchApi_DocumentVersion+","+patchApi_DocumentKey+","+patchApi_StorageId+","+patchApi_DocumentMetaData
					arrCellVal=[key,sql_ApplicationId,patchApi_DocumentId,patchApi_DocumentTypeId,patchApi_DocumentType,patchApi_DocumentReference,patchApi_DocumentStatusId,patchApi_DocumentStatusName,patchApi_TransactionId,patchApi_RiskId,patchApi_RiskName,patchApi_Workflowid,patchApi_DisplayName,patchApi_TransactionStatus,patchApi_TransactionSequence,patchApi_TransactionSubTypeOtherDescription,patchApi_ReasonForChange,patchApi_UserSuppliedText,patchApi_DocumentVersion,patchApi_DocumentKey,patchApi_StorageId,patchApi_DocumentMetaData];
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}//if statement closed
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}
			}//inner sql end
			
			totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			
			//API
			arrCellVal=['GETAPI DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start

			for (int j = 0; j < appId.size(); j++)
			 {
			 	getApplicationId=appId.get(j)
			 	getDocumentId=docId.get(j)
			 	log.info "Getting API response for Application Id=>"+getApplicationId+" and for Document Id=>"+getDocumentId
			 	
			 	testRunner.testCase.setPropertyValue("applicationId", getApplicationId.toString())
			 	testRunner.testCase.setPropertyValue("documentId", getDocumentId.toString())
				
				testRunner.testCase.setPropertyValue('token',token)
				testRunner.runTestStepByName('Get_DocByDocId')
				String req1='${Get_DocByDocId#Response}'
				def getResponse=context.expand(req1) 
				jsonSlurper=new JsonSlurper()
				json=jsonSlurper.parseText(getResponse)
	
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["Get_DocByDocId"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				
				log.info "Original API response from GET method is=>"+getResponse
				log.info "HTTP Status Code received as=>"+httpStatusCode
				
				if(httpStatusCode.toString().equals("200"))
				{
					getApi_DocumentId = json.id
					getApi_DocumentTypeId = json.documentType.id
					getApi_DocumentType = json.documentType.documentTypeName
					getApi_DocumentReference = json.documentReference
					getApi_DocumentStatusId = json.documentStatus.id
					getApi_DocumentStatusName = json.documentStatus.documentStatusName
					getApi_TransactionId = json.transaction.id
					getApi_RiskId = json.riskId
					getApi_RiskName = json.riskName
					getApi_Workflowid = json.transaction.workflowid
					getApi_DisplayName=json.transaction.displayName
					getApi_TransactionStatus=json.transaction.transactionStatus
					getApi_TransactionSequence=json.transaction.transactionSequence
					getApi_TransactionSubTypeOtherDescription=json.transaction.transactionSubTypeOtherDescription
					getApi_ReasonForChange=json.transaction.reasonForChange
					getApi_UserSuppliedText=json.userSuppliedText
					getApi_DocumentVersion=json.documentVersion
					getApi_DocumentKey=json.documentKey
					getApi_StorageId=json.storageId
					getApi_DocumentMetaData=json.documentMetaData

					key=getApplicationId+"_"+getApi_DocumentId
	
					log.info "API Response for GET method :" +key+","+getApplicationId+","+getApi_DocumentId+","+getApi_DocumentTypeId+","+getApi_DocumentType+","+getApi_DocumentReference+","+getApi_DocumentStatusId+","+getApi_DocumentStatusName+","+getApi_TransactionId+","+getApi_RiskId+","+getApi_RiskName+","+getApi_Workflowid+","+getApi_DisplayName+","+getApi_TransactionStatus+","+getApi_TransactionSequence+","+getApi_TransactionSubTypeOtherDescription+","+getApi_ReasonForChange+","+getApi_UserSuppliedText+","+getApi_DocumentVersion+","+getApi_DocumentKey+","+getApi_StorageId+","+getApi_DocumentMetaData
					arrCellVal=[key,getApplicationId,getApi_DocumentId,getApi_DocumentTypeId,getApi_DocumentType,getApi_DocumentReference,getApi_DocumentStatusId,getApi_DocumentStatusName,getApi_TransactionId,getApi_RiskId,getApi_RiskName,getApi_Workflowid,getApi_DisplayName,getApi_TransactionStatus,getApi_TransactionSequence,getApi_TransactionSubTypeOtherDescription,getApi_ReasonForChange,getApi_UserSuppliedText,getApi_DocumentVersion,getApi_DocumentKey,getApi_StorageId,getApi_DocumentMetaData];
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					counter++
					total_size++
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}	
			 }
			con.close()

			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for newly updated document as per Application Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String  removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field==null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
		field="NULL"
	}
	if(field!=null)
		field=field.toUpperCase()
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}
public String getDate(String field)
{
	if(field!=null && field.length()==21)
		field = field.substring(0, field.length() - 2);
	
	if(field==null)
			field="NULL"
	else if(field=="" || field==" " || field==null)	
			field="NULL"
	return field
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>89821</con:value></con:property><con:property><con:name>documentId</con:name><con:value>597588</con:value></con:property></con:properties></con:testCase><con:testCase id="0a7c2c15-1f19-4833-a060-35198d2b6d28" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByTransactions" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByTransactions" id="94ae910f-ba7b-430b-9e7e-097086f4b889"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/transactions" methodName="ApplicationByApplicationIdByTransactions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByTransactions" id="0c7622d7-2e59-47ce-a24f-e6d8d0c8568b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76176/transactions</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByTransactions" id="fa31429d-f860-4a27-8aed-fbdae990a122"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList<String> arrayList = new ArrayList<>();

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ApplicationByApplicationIdByTransactions"))
		tcModuleName="AppByAppIdByTransactions"
		
	if(tcModuleName.toString().equals("AppByAppIdByTransactions"))
	{
		log.info "Test Execution started for getting Transaction Details as per Application Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Key","ApplicationId","TransactionId","Workflowid","DisplayName","StartDate","EndDate","AppliedDate","TransactionStatus","TransactionSequence","TransactionSubTypeOtherDescription","ReasonForChange","IsTemporaryTransaction","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			Use TOM
			Select DISTINCT 
			TOP 100
			T.QuoteBase_Id AS ApplicationId, T.Id as TransactionId, T.WorkflowId, T.Discriminator as DisplayName, T.StartDate, T.EndDate, T.AppliedDate,
			RTS.Name as TransactionStatus, T.Sequence, T.TransactionSubTypeOtherDescription, T.ReasonForChange_Id,
			case when RTS.Istemporary=0 then 'false' when RTS.Istemporary=1 then 'true' end as isTemporaryTransaction
			from [TRANSACTION] T 
			left join ref_TransactionStatus RTS on RTS.Id = T.TransactionStatus_Id
			where T.Discriminator='QuoteTransaction'
			--and T.QuoteBase_Id=92630
			order by 1 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_ApplicationId=row.ApplicationId
				arrayList.add(sql_ApplicationId)
				sql_TransactionId=row.TransactionId
				sql_TransactionId=removeComma(sql_TransactionId.toString())
				key=sql_ApplicationId+"_"+sql_TransactionId
				sql_WorkflowId=row.WorkflowId
				sql_DisplayName=row.DisplayName
				sql_DisplayName=removeComma(sql_DisplayName.toString())
				sql_StartDate=row.StartDate
				if(sql_StartDate!=null || !sql_StartDate.toString().equals("null"))
				{
					sql_StartDate=sql_StartDate.toString().replace(" ", "T")
					sql_StartDate=getDate(sql_StartDate.toString())
				}
				sql_EndDate=row.EndDate
				if(sql_EndDate!=null || !sql_EndDate.toString().equals("null"))
				{
					sql_EndDate=sql_EndDate.toString().replace(" ", "T")
					sql_EndDate=getDate(sql_EndDate.toString())
				}
				sql_AppliedDate=row.AppliedDate
				if(sql_AppliedDate!=null || !sql_AppliedDate.toString().equals("null"))
				{
					sql_AppliedDate=sql_AppliedDate.toString().replace(" ", "T")
					sql_AppliedDate=getDate(sql_AppliedDate.toString())
				}
				sql_TransactionStatus=row.TransactionStatus
				sql_TransactionStatus=removeComma(sql_TransactionStatus.toString())
				sql_TransactionSequence=row.Sequence
				sql_TransactionSequence=removeComma(sql_TransactionSequence.toString())
				sql_TransactionSubTypeOtherDescription=row.TransactionSubTypeOtherDescription
				sql_TransactionSubTypeOtherDescription=removeComma(sql_TransactionSubTypeOtherDescription.toString())
				sql_ReasonForChange=row.ReasonForChange_Id
				sql_ReasonForChange=removeComma(sql_ReasonForChange.toString())
				sql_isTemporaryTransaction=row.isTemporaryTransaction
				sql_isTemporaryTransaction=removeComma(sql_isTemporaryTransaction.toString())

				log.info "SQL Response is received as =>"+key+","+sql_ApplicationId+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransactionStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange+","+sql_isTemporaryTransaction
				arrCellVal=[key,sql_ApplicationId,sql_TransactionId,sql_WorkflowId,sql_DisplayName,sql_StartDate,sql_EndDate,sql_AppliedDate,sql_TransactionStatus,sql_TransactionSequence,sql_TransactionSubTypeOtherDescription,sql_ReasonForChange,sql_isTemporaryTransaction];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldAppId=00

			for (int j = 0; j < arrayList.size(); j++)
			 {
			 	//appId=arrayList.get(j)
			 	int appId=arrayList.get(j)
			 	if(oldAppId == appId)
			 	{
				 	oldAppId = appId
			 	}
			 	else
			 	{
			 		log.info "Getting API response for Application Id=>"+appId
			 	
				 	testRunner.testCase.setPropertyValue( "applicationId", appId.toString())
					
					testRunner.testCase.setPropertyValue('token',token)
					testRunner.runTestStepByName('AppByAppIdByTransactions')
					String req='${AppByAppIdByTransactions#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["AppByAppIdByTransactions"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					log.info "Original API response is=>"+response
					log.info "HTTP Status Code received as=>"+httpStatusCode
					
					if(httpStatusCode.toString().equals("200"))
					{
						def jsonRes=jsonSlurper.parseText(response)
						int jsonRecordCount = jsonRes.totalRecords
						size=jsonRes.totalRecords.toInteger()
						total_size+=size
						for(int i=0;i<jsonRecordCount;i++)
						{
							api_TransactionId=jsonRes.results.id[i]
							api_TransactionId=removeComma(api_TransactionId.toString())
							key=appId+"_"+api_TransactionId
							api_WorkflowId=jsonRes.results.workflowid[i]
							api_WorkflowId=api_WorkflowId.toString().toUpperCase()
							api_WorkflowId=removeComma(api_WorkflowId.toString())
							api_DisplayName=jsonRes.results.displayName[i]
							api_DisplayName=removeComma(api_DisplayName.toString())
							if(!api_DisplayName.toString().equals("null") && api_DisplayName.toString().equals("Quote Transaction"))
								api_DisplayName="QuoteTransaction"
							api_StartDate=jsonRes.results.startDate[i]
							if(api_StartDate!=null || !api_StartDate.toString().equals("null"))
							{
								api_StartDate=removeComma(api_StartDate.toString())
								api_StartDate=getDate(api_StartDate.toString())
							}
							api_EndDate=jsonRes.results.endDate[i]
							if(api_EndDate!=null || !api_EndDate.toString().equals("null"))
							{
								api_EndDate=removeComma(api_EndDate.toString())
								api_EndDate=getDate(api_EndDate.toString())
							}
							api_AppliedDate=jsonRes.results.appliedDate[i]
							if(api_AppliedDate!=null || !api_AppliedDate.toString().equals("null"))
							{
								api_AppliedDate=removeComma(api_AppliedDate.toString())
								api_AppliedDate=getDate(api_AppliedDate.toString())
							}
							api_TransactionStatus=jsonRes.results.transactionStatus[i]
							api_TransactionStatus=removeComma(api_TransactionStatus.toString())
							api_TransactionSequence=jsonRes.results.transactionSequence[i]
							api_TransactionSequence=removeComma(api_TransactionSequence.toString())
							
							api_TransactionSubTypeOtherDescription=jsonRes.results.transactionSubTypeOtherDescription[i]
							api_TransactionSubTypeOtherDescription=removeComma(api_TransactionSubTypeOtherDescription.toString())
							
							api_ReasonForChange=jsonRes.results.reasonForChange[i]
							api_ReasonForChange=removeComma(api_ReasonForChange.toString())
							api_isTemporaryTransaction=jsonRes.results.isTemporaryTransaction[i]
							api_isTemporaryTransaction=removeComma(api_isTemporaryTransaction.toString())
		
							log.info "API Response is received as =>"+key+","+appId+","+api_TransactionId+","+api_WorkflowId+","+api_DisplayName+","+api_StartDate+","+api_EndDate+","+api_AppliedDate+","+api_TransactionStatus+","+api_TransactionSequence+","+api_TransactionSubTypeOtherDescription+api_ReasonForChange+","+api_isTemporaryTransaction
							arrCellVal=[key,appId,api_TransactionId,api_WorkflowId,api_DisplayName,api_StartDate,api_EndDate,api_AppliedDate,api_TransactionStatus,api_TransactionSequence,api_TransactionSubTypeOtherDescription,api_ReasonForChange,api_isTemporaryTransaction];
							RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
							counter++
							//total_size++
						}
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
					oldAppId = appId
			 	}	
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Transaction Details as per Application Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>90629</con:value></con:property></con:properties></con:testCase><con:testCase id="19be3ff4-31cd-4565-bfbf-e5319344bf96" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByTransactionsByTransactionId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdTransactionsByTransactionId" id="b322dd67-785b-41cf-a069-8791079008d8"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/transactions/${#TestCase#transactionId}" methodName="ApplicationByApplicationIdByTransactionsByTransactionId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdTransactionsByTransactionId" id="18772ccd-ce4d-496a-8cc7-0cf884ebdbef" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76176/transactions/275087</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdTransactionsByTransactionId" id="8d314bbc-0b54-4c22-8e12-1dff853159d1"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList<String> arrayList = new ArrayList<>();
ArrayList<String> txnIdList = new ArrayList<>();

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ApplicationByApplicationIdByTransactionsByTransactionId"))
		tcModuleName="AppByAppIdByTxnByTxnId"
		
	if(tcModuleName.toString().equals("AppByAppIdByTxnByTxnId"))
	{
		log.info "Test Execution started for getting Transaction Details as per Application Id and Transaction Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Key","ApplicationId","TransactionId","Workflowid","DisplayName","StartDate","EndDate","AppliedDate","TransactionStatus","TransactionSequence","TransactionSubTypeOtherDescription","ReasonForChange","IsTemporaryTransaction","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			Use TOM
			Select DISTINCT 
			TOP 100
			T.QuoteBase_Id AS ApplicationId, T.Id as TransactionId, T.WorkflowId, T.Discriminator as DisplayName, T.StartDate, T.EndDate, T.AppliedDate,
			RTS.Name as TransactionStatus, T.Sequence, T.TransactionSubTypeOtherDescription, T.ReasonForChange_Id,
			case when RTS.Istemporary=0 then 'false' when RTS.Istemporary=1 then 'true' end as isTemporaryTransaction
			from [TRANSACTION] T 
			left join ref_TransactionStatus RTS on RTS.Id = T.TransactionStatus_Id
			where T.Discriminator='QuoteTransaction'
			--and T.QuoteBase_Id=92630
			order by 1 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_ApplicationId=row.ApplicationId
				arrayList.add(sql_ApplicationId)
				sql_TransactionId=row.TransactionId
				sql_TransactionId=removeComma(sql_TransactionId.toString())
				txnIdList.add(sql_TransactionId)
				key=sql_ApplicationId+"_"+sql_TransactionId
				sql_WorkflowId=row.WorkflowId
				sql_DisplayName=row.DisplayName
				sql_DisplayName=removeComma(sql_DisplayName.toString())
				sql_StartDate=row.StartDate
				if(sql_StartDate!=null || !sql_StartDate.toString().equals("null"))
				{
					sql_StartDate=sql_StartDate.toString().replace(" ", "T")
					sql_StartDate=getDate(sql_StartDate.toString())
				}
				sql_EndDate=row.EndDate
				if(sql_EndDate!=null || !sql_EndDate.toString().equals("null"))
				{
					sql_EndDate=sql_EndDate.toString().replace(" ", "T")
					sql_EndDate=getDate(sql_EndDate.toString())
				}
				sql_AppliedDate=row.AppliedDate
				if(sql_AppliedDate!=null || !sql_AppliedDate.toString().equals("null"))
				{
					sql_AppliedDate=sql_AppliedDate.toString().replace(" ", "T")
					sql_AppliedDate=getDate(sql_AppliedDate.toString())
				}
				sql_TransactionStatus=row.TransactionStatus
				sql_TransactionStatus=removeComma(sql_TransactionStatus.toString())
				sql_TransactionSequence=row.Sequence
				sql_TransactionSequence=removeComma(sql_TransactionSequence.toString())
				sql_TransactionSubTypeOtherDescription=row.TransactionSubTypeOtherDescription
				sql_TransactionSubTypeOtherDescription=removeComma(sql_TransactionSubTypeOtherDescription.toString())
				sql_ReasonForChange=row.ReasonForChange_Id
				sql_ReasonForChange=removeComma(sql_ReasonForChange.toString())
				sql_isTemporaryTransaction=row.isTemporaryTransaction
				sql_isTemporaryTransaction=removeComma(sql_isTemporaryTransaction.toString())

				log.info "SQL Response is received as =>"+key+","+sql_ApplicationId+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransactionStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange+","+sql_isTemporaryTransaction
				arrCellVal=[key,sql_ApplicationId,sql_TransactionId,sql_WorkflowId,sql_DisplayName,sql_StartDate,sql_EndDate,sql_AppliedDate,sql_TransactionStatus,sql_TransactionSequence,sql_TransactionSubTypeOtherDescription,sql_ReasonForChange,sql_isTemporaryTransaction];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldAppId=00

			for (int j = 0; j < arrayList.size(); j++)
			 {
			 	int appId=arrayList.get(j)
			 	transactionId=txnIdList.get(j)
			 	
				log.info "Getting API response for Application Id=>"+appId+" and Transaction Id=>"+transactionId
			 	
				 	testRunner.testCase.setPropertyValue( "applicationId", appId.toString())
				 	testRunner.testCase.setPropertyValue( "transactionId", transactionId.toString() )
					
					testRunner.testCase.setPropertyValue('token',token)
					testRunner.runTestStepByName('AppByAppIdTransactionsByTransactionId')
					String req='${AppByAppIdTransactionsByTransactionId#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["AppByAppIdTransactionsByTransactionId"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					log.info "Original API response is=>"+response
					log.info "HTTP Status Code received as=>"+httpStatusCode
					
					if(httpStatusCode.toString().equals("200"))
					{
						def jsonRes=jsonSlurper.parseText(response)

							api_TransactionId=jsonRes.id
							api_TransactionId=removeComma(api_TransactionId.toString())
							key=appId+"_"+api_TransactionId
							api_WorkflowId=jsonRes.workflowid
							api_WorkflowId=api_WorkflowId.toString().toUpperCase()
							api_WorkflowId=removeComma(api_WorkflowId.toString())
							api_DisplayName=jsonRes.displayName
							api_DisplayName=removeComma(api_DisplayName.toString())
							if(!api_DisplayName.toString().equals("null") && api_DisplayName.toString().equals("Quote Transaction"))
								api_DisplayName="QuoteTransaction"
							api_StartDate=jsonRes.startDate
							if(api_StartDate!=null || !api_StartDate.toString().equals("null"))
							{
								api_StartDate=removeComma(api_StartDate.toString())
								api_StartDate=getDate(api_StartDate.toString())
							}
							api_EndDate=jsonRes.endDate
							if(api_EndDate!=null || !api_EndDate.toString().equals("null"))
							{
								api_EndDate=removeComma(api_EndDate.toString())
								api_EndDate=getDate(api_EndDate.toString())
							}
							api_AppliedDate=jsonRes.appliedDate
							if(api_AppliedDate!=null || !api_AppliedDate.toString().equals("null"))
							{
								api_AppliedDate=removeComma(api_AppliedDate.toString())
								api_AppliedDate=getDate(api_AppliedDate.toString())
							}
							api_TransactionStatus=jsonRes.transactionStatus
							api_TransactionStatus=removeComma(api_TransactionStatus.toString())
							api_TransactionSequence=jsonRes.transactionSequence
							api_TransactionSequence=removeComma(api_TransactionSequence.toString())
							
							api_TransactionSubTypeOtherDescription=jsonRes.transactionSubTypeOtherDescription
							api_TransactionSubTypeOtherDescription=removeComma(api_TransactionSubTypeOtherDescription.toString())
							
							api_ReasonForChange=jsonRes.reasonForChange
							api_ReasonForChange=removeComma(api_ReasonForChange.toString())
							api_isTemporaryTransaction=jsonRes.isTemporaryTransaction
							api_isTemporaryTransaction=removeComma(api_isTemporaryTransaction.toString())
		
							log.info "API Response is received as =>"+key+","+appId+","+api_TransactionId+","+api_WorkflowId+","+api_DisplayName+","+api_StartDate+","+api_EndDate+","+api_AppliedDate+","+api_TransactionStatus+","+api_TransactionSequence+","+api_TransactionSubTypeOtherDescription+api_ReasonForChange+","+api_isTemporaryTransaction
							arrCellVal=[key,appId,api_TransactionId,api_WorkflowId,api_DisplayName,api_StartDate,api_EndDate,api_AppliedDate,api_TransactionStatus,api_TransactionSequence,api_TransactionSubTypeOtherDescription,api_ReasonForChange,api_isTemporaryTransaction];
							RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
							counter++
							total_size++
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}	
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Transaction Details as per Application Id and Transaction Id  with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>90567</con:value></con:property><con:property><con:name>transactionId</con:name><con:value>343181</con:value></con:property></con:properties></con:testCase><con:testCase id="0815aa33-fa7c-4f7a-ae65-01da05903961" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByTransactionsByTransactionIdbyDocuments" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByTransactionsByTransactionIdbyDocuments" id="aef80c97-3fe4-4cf6-a15b-111f3cd429ea"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/transactions/${#TestCase#transactionId}/documents" methodName="ApplicationByApplicationIdByTransactionsByTransactionIdbyDocuments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByTransactionsByTransactionIdbyDocuments" id="076967ad-6567-4dab-9a99-5386fd051928" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76177/transactions/275092/documents</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByTransactionByTransactionIdByDocuments" id="f2c5c85a-b5f3-4ac3-aa33-293774bcac0e"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList<String> appIdList = new ArrayList<>();
ArrayList<String> txnIdList = new ArrayList<>();
ArrayList<String> docIdList = new ArrayList<>();
boolean checkFlag=false

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ApplicationByApplicationIdByTransactionsByTransactionIdbyDocuments"))
		tcModuleName="AppIdByTxnByTxnIdByDoc"
		
	if(tcModuleName.toString().equals("AppIdByTxnByTxnIdByDoc"))
	{
		log.info "Test Execution started for getting Document Details as per Application Id and Transaction Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Key","ApplicationId","DocumentId","DocumentType_Id","DocumentType","DocumentReference","DocumentStatus_Id","DocumentStatus","TransactionId","WorkflowId","DisplayName","StartDate","EndDate","AppliedDate","TransationStatus","TransactionSequence","TransactionSubTypeOtherDescription","ReasonForChange_Id","UserSuppliedText","DocumentVersion","IssuedDate","DocumentKey","RiskName","StorageId","DocumentMetaData","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
			SELECT
			TOP 100
			ab.Id as ApplicationId, d.Id as DocumentId, d.DocumentType_Id, rdt.Name as DocumentType, d.DocumentReference, d.DocumentStatus_Id, rds.Name as DocumentStatus, t.Id as TransactionId,
			t.WorkflowId, ab.Discriminator as DisplayName, t.StartDate, t.EndDate, t.AppliedDate, rts.Name as TransationStatus, t.Sequence as TransactionSequence, t.TransactionSubTypeOtherDescription,
			t.ReasonForChange_Id, d.UserSuppliedText, d.DocumentVersion,  d.IssuedDate, d.DocumentKey, d.RiskName, d.StorageId, 
			d.DocumentMetaData,MA.Reference as MemberReference
			from applicationbase ab
			inner Join [TRANSACTION] t on t.Policy_Id = ab.id and t.Transaction_PhysicalDeletionAttemptPrevented = 0
			left join ref_TransactionStatus rts on rts.id = t.TransactionStatus_Id
			left join Document d on d.Transaction_Id = t.Id --and d.DocumentBase_PhysicalDeletionAttemptPrevented = 0
			left join ref_DocumentType rdt on rdt.id = d.DocumentType_Id 
			left join ref_DocumentStatus rds on rds.id = d.DocumentStatus_Id
			inner join ApplicationMemberAssured AMA on AMA.Application_Id=AB.Id
			inner join MemberAssured MA on MA.Id=AMA.MemberAssured_Id
			where d.Id is not null
			--and AB.Id=92980
			order by 1 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row -> 
				sql_ApplicationId=row.ApplicationId
				appIdList.add(sql_ApplicationId)
				sql_DocumentId=row.DocumentId
				docIdList.add(sql_DocumentId)
				sql_DocumentType_Id=row.DocumentType_Id
				sql_DocumentType=row.DocumentType
				sql_DocumentReference=row.DocumentReference
				sql_DocumentStatus_Id=row.DocumentStatus_Id
				sql_DocumentStatus=row.DocumentStatus
				sql_TransactionId=row.TransactionId
				txnIdList.add(sql_TransactionId)
				key=sql_ApplicationId+"_"+sql_DocumentId+"_"+sql_TransactionId
				sql_WorkflowId=row.WorkflowId
				sql_DisplayName=row.DisplayName
				sql_StartDate=row.StartDate
				if(sql_StartDate!=null || !sql_StartDate.toString().equals("null"))
				{
					sql_StartDate=sql_StartDate.toString().replace(" ", "T")
					sql_StartDate=getDate(sql_StartDate.toString())
				}
				sql_EndDate=row.EndDate
				if(sql_EndDate!=null || !sql_EndDate.toString().equals("null"))
				{
					sql_EndDate=sql_EndDate.toString().replace(" ", "T")
					sql_EndDate=getDate(sql_EndDate.toString())
				}
				sql_AppliedDate=row.AppliedDate
				if(sql_AppliedDate!=null || !sql_AppliedDate.toString().equals("null"))
				{
					sql_AppliedDate=sql_AppliedDate.toString().replace(" ", "T")
					sql_AppliedDate=getDate(sql_AppliedDate.toString())
				}
				sql_TransationStatus=row.TransationStatus
				sql_TransactionSequence=row.TransactionSequence
				sql_TransactionSubTypeOtherDescription=row.TransactionSubTypeOtherDescription
				sql_ReasonForChange_Id=row.ReasonForChange_Id
				sql_UserSuppliedText=row.UserSuppliedText
				String userSuppliedText=sql_UserSuppliedText
				if(userSuppliedText!=null)
				{
					if(userSuppliedText.contains(","))
					{
						userSuppliedText=userSuppliedText.replace(",","")	
					}
					if(userSuppliedText.contains("/n"))
					{
						userSuppliedText=userSuppliedText.replace("/n","")		
					}
					else if (userSuppliedText.contains("/r"))
					{
						userSuppliedText=userSuppliedText.replace("/r","")	
					}
					else if(userSuppliedText.contains("\r\n\r\n"))
					{
						userSuppliedText=userSuppliedText.replace("\r\n\r\n","")	
					}
					if(userSuppliedText.contains("\r\n"))
					{
						userSuppliedText=userSuppliedText.replace("\r\n","")	
					}
				}
				else if(userSuppliedText==null)
				{
					userSuppliedText="NULL"
				}
				sql_UserSuppliedText=userSuppliedText
				sql_DocumentVersion=row.DocumentVersion
				sql_IssuedDate=row.IssuedDate
				if(sql_IssuedDate!=null || !sql_IssuedDate.toString().equals("null"))
				{
					sql_IssuedDate=sql_IssuedDate.toString().replace(" ", "T")
					sql_IssuedDate=getDate(sql_IssuedDate.toString())
				}
				sql_DocumentKey=row.DocumentKey
				sql_RiskName=row.RiskName
				sql_StorageId=row.StorageId
				sql_DocumentMetaData=row.DocumentMetaData
				String documentData = sql_DocumentMetaData
				if(documentData.toString().contains("http"))
				{
					documentData=documentData.trim()
					if(documentData.contains('=\"'))
					{
						documentData =documentData .replace('=\"','="')	
					}
					if(documentData.contains(' '))
					{
						documentData =documentData.replace(' ','')	
					}
					if(documentData.contains('"true" /'))
					{
						documentData =documentData.replace('"true" /','"true"/')	
					}
					if(documentData.contains(" /"))
					{
						documentData =documentData.replace(" /","/")	
					}
					sql_DocumentMetaData=documentData
				}
				//sql_MemberReference=row.MemberReference
				//if(sql_DocumentMetaData.toString().contains(sql_MemberReference.toString()) && sql_DocumentMetaData.toString().contains(sql_ApplicationId.toString()))
					//checkFlag=true	
				

				log.info "SQL Response is received as =>"+key+","+sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentType_Id+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatus_Id+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData
				arrCellVal=[key,sql_ApplicationId,sql_DocumentId,sql_DocumentType_Id,sql_DocumentType,sql_DocumentReference,sql_DocumentStatus_Id,sql_DocumentStatus,sql_TransactionId,sql_WorkflowId,sql_DisplayName,sql_StartDate,sql_EndDate,sql_AppliedDate,sql_TransationStatus,sql_TransactionSequence,sql_TransactionSubTypeOtherDescription,sql_ReasonForChange_Id,sql_UserSuppliedText,sql_DocumentVersion,sql_IssuedDate,sql_DocumentKey,sql_RiskName,sql_StorageId,sql_DocumentMetaData];
				//arrCellVal=[key,sql_ApplicationId,sql_DocumentId,sql_DocumentType_Id,sql_DocumentType,sql_DocumentReference,sql_DocumentStatus_Id,sql_DocumentStatus,sql_TransactionId,sql_WorkflowId,sql_DisplayName,sql_StartDate,sql_EndDate,sql_AppliedDate,sql_TransationStatus,sql_TransactionSequence,sql_TransactionSubTypeOtherDescription,sql_ReasonForChange_Id,sql_UserSuppliedText,sql_DocumentVersion,sql_IssuedDate,sql_DocumentKey,sql_RiskName,sql_StorageId,sql_MemberReference];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldAppId=00
			int oldTransactionId=00
			int olddocId=00

			for (int j = 0; j < appIdList.size(); j++)
			 {
			 	int appId=appIdList.get(j)
			 	int transactionId=txnIdList.get(j)
			 	int docId=docIdList.get(j)
			 	
			 	if(oldAppId.toString() == appId.toString())
			 	{
				 	oldAppId = appId
				 	//break;
			 	}
			 	else
			 	{
			 		log.info "Getting API response for Application Id=>"+appId+" and Transaction Id=>"+transactionId
			 	
				 	testRunner.testCase.setPropertyValue( "applicationId", appId.toString())
				 	testRunner.testCase.setPropertyValue( "transactionId", transactionId.toString() )
					
					testRunner.testCase.setPropertyValue('token',token)
					testRunner.runTestStepByName('AppByAppIdByTransactionsByTransactionIdbyDocuments')
					String req='${AppByAppIdByTransactionsByTransactionIdbyDocuments#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["AppByAppIdByTransactionsByTransactionIdbyDocuments"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					log.info "Original API response is=>"+response
					log.info "HTTP Status Code received as=>"+httpStatusCode
					
					if(httpStatusCode.toString().equals("200"))
					{
						def jsonRes=jsonSlurper.parseText(response)
						int jsonRecordCount = jsonRes.totalRecords
						for (int i=0; i<jsonRecordCount; i++)
						{
							api_DocumentId=jsonRes.results.id[i]
							api_DocumentType_Id=jsonRes.results.documentType.id[i]
							api_DocumentType=jsonRes.results.documentType.documentTypeName[i]
							api_DocumentReference=jsonRes.results.documentReference[i]
							api_DocumentStatus_Id=jsonRes.results.documentStatus.id[i]
							api_DocumentStatus=jsonRes.results.documentStatus.documentStatusName[i]
							api_TransactionId=jsonRes.results.transaction.id[i]
							key=appId+"_"+api_DocumentId+"_"+api_TransactionId
							api_WorkflowId=jsonRes.results.transaction.workflowid[i]
							api_WorkflowId=api_WorkflowId.toString().toUpperCase()
							api_DisplayName=jsonRes.results.transaction.displayName[i]
							api_StartDate=jsonRes.results.transaction.startDate[i]
							if(api_StartDate!=null || !api_StartDate.toString().equals("null"))
							{
								api_StartDate=removeComma(api_StartDate.toString())
								api_StartDate=getDate(api_StartDate.toString())
							}
							api_EndDate=jsonRes.results.transaction.endDate[i]
							if(api_EndDate!=null || !api_EndDate.toString().equals("null"))
							{
								api_EndDate=removeComma(api_EndDate.toString())
								api_EndDate=getDate(api_EndDate.toString())
							}
							api_AppliedDate=jsonRes.results.transaction.appliedDate[i]
							if(api_AppliedDate!=null || !api_AppliedDate.toString().equals("null"))
							{
								api_AppliedDate=removeComma(api_AppliedDate.toString())
								api_AppliedDate=getDate(api_AppliedDate.toString())
							}
							api_TransationStatus=jsonRes.results.transaction.transactionStatus[i]
							api_TransactionSequence=jsonRes.results.transaction.transactionSequence[i]
							api_TransactionSubTypeOtherDescription=jsonRes.results.transaction.transactionSubTypeOtherDescription[i]
							api_ReasonForChange_Id=jsonRes.results.transaction.reasonForChange[i]
							api_UserSuppliedText=jsonRes.results.userSuppliedText[i]
							userSuppliedText=api_UserSuppliedText
							if(userSuppliedText!=null)
							{
								if(userSuppliedText.contains(","))
								{
									userSuppliedText=userSuppliedText.replace(",","")	
								}
								if(userSuppliedText.contains("/n"))
								{
									userSuppliedText=userSuppliedText.replace("/n","")		
								}
								else if (userSuppliedText.contains("/r"))
								{
									userSuppliedText=userSuppliedText.replace("/r","")	
								}
								else if(userSuppliedText.contains("\r\n\r\n"))
								{
									userSuppliedText=userSuppliedText.replace("\r\n\r\n","")	
								}
								if(userSuppliedText.contains("\r\n"))
								{
									userSuppliedText=userSuppliedText.replace("\r\n","")	
								}
								if(userSuppliedText.contains('=\"'))
								{
									userSuppliedText=userSuppliedText.replace('=\"','="')	
								}
								if(userSuppliedText.contains(" "))
								{
									userSuppliedText=userSuppliedText.replace(" ","")	
								}
								if(userSuppliedText.contains('"true" /'))
								{
									userSuppliedText=userSuppliedText.replace('"true" /','"true"/')	
								}
							}
							else if(userSuppliedText==null)
							{
								userSuppliedText="NULL"
							}
							api_UserSuppliedText=userSuppliedText
							api_DocumentVersion=jsonRes.results.documentVersion[i]
							api_IssuedDate=jsonRes.results.issuedDate[i]
							if(api_IssuedDate!=null || !api_IssuedDate.toString().equals("null"))
							{
								api_IssuedDate=removeComma(api_IssuedDate.toString())
								api_IssuedDate=getDate(api_IssuedDate.toString())
							}
							api_DocumentKey=jsonRes.results.documentKey[i]
							api_RiskName=jsonRes.results.riskName[i]
							api_StorageId=jsonRes.results.storageId[i]
							api_DocumentMetaData=jsonRes.results.documentMetaData[i]
							String documentData = api_DocumentMetaData.toString()
							if(documentData.toString().contains("http"))
							{
								documentData=documentData.trim()
								if(documentData.contains('=\"'))
								{
									documentData =documentData.replace('=\"','="')	
								}
								if(documentData.contains(' '))
								{
									documentData =documentData.replace(' ','')	
								}
								if(documentData.contains('"true" /'))
								{
									documentData =documentData.replace('"true" /','"true"/')	
								}
								if(documentData.toString().contains(" />"))
								{
									log.info "Welcome checking now"
									documentData =documentData.replace(" />","/>")	
								}
								api_DocumentMetaData=documentData
							}		
							log.info "API Response is received as =>"+key+","+appId+","+api_DocumentId+","+api_DocumentType_Id+","+api_DocumentType+","+api_DocumentReference+","+api_DocumentStatus_Id+","+api_DocumentStatus+","+api_TransactionId+","+api_WorkflowId+","+api_DisplayName+","+api_StartDate+","+api_EndDate+","+api_AppliedDate+","+api_TransationStatus+","+api_TransactionSequence+","+api_TransactionSubTypeOtherDescription+","+api_ReasonForChange_Id+","+api_UserSuppliedText+","+api_DocumentVersion+","+api_IssuedDate+","+api_DocumentKey+","+api_RiskName+","+api_StorageId+","+api_DocumentMetaData
							arrCellVal=[key,appId,api_DocumentId,api_DocumentType_Id,api_DocumentType,api_DocumentReference,api_DocumentStatus_Id,api_DocumentStatus,api_TransactionId,api_WorkflowId,api_DisplayName,api_StartDate,api_EndDate,api_AppliedDate,api_TransationStatus,api_TransactionSequence,api_TransactionSubTypeOtherDescription,api_ReasonForChange_Id,api_UserSuppliedText,api_DocumentVersion,api_IssuedDate,api_DocumentKey,api_RiskName,api_StorageId,api_DocumentMetaData];
							RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
							counter++
							total_size++
							//break;
						}//for loop end	
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
			 		oldAppId =appId
			 		//oldTransactionId=transactionId
			 		//olddocId = docId
			 	}	
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Document Details as per Application Id and Transaction Id  with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>76174</con:value></con:property><con:property><con:name>transactionId</con:name><con:value>275083</con:value></con:property></con:properties></con:testCase><con:testCase id="b9e69aeb-45a7-46e4-bcba-9e0c68bd381a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicaitonIdByJointAssureds" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByJointAssureds" id="4df00ac3-4328-4138-bde6-d554e604b213"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/jointAssureds" methodName="ApplicationByApplicaitonIdByJointAssureds" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByJointAssureds" id="e60624ec-497c-459f-80da-e5a0f03f1fd1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/72322/jointAssureds</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByJointAssureds" id="b6da0085-7e3c-40f1-879e-cf452c6a2d36"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import java.text.SimpleDateFormat

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList<String> arrayList = new ArrayList<>();

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ApplicationByApplicaitonIdByJointAssureds"))
		tcModuleName="AppByAppIdByJoinAssured"
		
	if(tcModuleName.toString().equals("AppByAppIdByJoinAssured"))
	{
		log.info "Test Execution started for getting Joint Assured Details as per Application Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Key","JointAssuredId","JointAssuredReference","ApplicationId","Party_Id","CrmIdentifier","IsOrganisation","OrganisationName","Salutation","FirstName","MiddleName","LastName","Name","SearchName","EmailAddress","Telephone","Fax","Address_Id","AddressName","Line1","Line2","Line3","City","StateOrProvince","Country","Postcode","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			date= new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
			date = new Date()
			getDateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
			String todaysDate=getDateFormat.format(date)
			todaysDate=todaysDate.toString().replace("/","-")

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
			SELECT
			Distinct
			TOP 100
			JA.Id as JointAssuredId, JA.Reference, AB.Id as ApplicationId, AP.Party_Id, AP.Id as AccociatedPartyId, P.CrmIdentifier, 
			case when P.IsOrganisation=0 then 'true' when P.IsOrganisation=1 then 'true' end as IsOrganisationFlag, P.OrganisationName,
			P.Salutation, P.FirstName, P.MiddleName, P.LastName, P.SearchName as Name, P.SearchName, P.EmailAddress, P.Telephone, P.Fax,
			ADR.Id as Address_Id, ADR.Name as AddressName, ADR.Line1, ADR.Line2, ADR.Line3, ADR.City, ADR.StateOrProvince, RC.Name as Country, ADR.Postcode, AB.PolicyEnd
			from ApplicationBase AB
			inner join AssociatedParty AP on AP.Application_Id = AB.Id
			inner join ref_PartyRoleType PRT on PRT.Id = AP.PartyRoleType_Id
			inner join Party P on AP.Party_Id = P.Id
			inner join Address ADR on ADR.Party_Id = P.Id
			Left join ref_Country RC on ADR.Country_Id = RC.Id
			left join JointAssured JA on JA.Party_Id=P.Id
			where PRT.Name='Joint Assured'
			and AB.PolicyEnd>GETDATE()
			--and AB.Id=92601
			order by 3 desc, 1, ADR.Id asc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_JointAssuredId=row.JointAssuredId
				sql_JointAssuredReference=row.Reference
				sql_JointAssuredReference=removeComma(sql_JointAssuredReference.toString())
				sql_ApplicationId=row.ApplicationId
				arrayList.add(sql_ApplicationId)
				sql_Party_Id=row.Party_Id
				sql_CrmIdentifier=row.CrmIdentifier
				sql_CrmIdentifier=removeComma(sql_CrmIdentifier.toString())
				sql_IsOrganisation=row.IsOrganisationFlag
				sql_IsOrganisation=removeComma(sql_IsOrganisation.toString())
				sql_OrganisationName=row.OrganisationName
				sql_OrganisationName=removeComma(sql_OrganisationName.toString())
				sql_Salutation=row.Salutation
				sql_Salutation=removeComma(sql_Salutation.toString())
				sql_FirstName=row.FirstName
				sql_FirstName=removeComma(sql_FirstName.toString())
				sql_MiddleName=row.MiddleName
				sql_MiddleName=removeComma(sql_MiddleName.toString())
				sql_LastName=row.LastName
				sql_LastName=removeComma(sql_LastName.toString())
				sql_Name=row.Name
				sql_Name=removeComma(sql_Name.toString())
				sql_SearchName=row.SearchName
				sql_SearchName=removeComma(sql_SearchName.toString())
				sql_EmailAddress=row.EmailAddress
				sql_EmailAddress=removeComma(sql_EmailAddress.toString())
				sql_Telephone=row.Telephone
				sql_Telephone=removeComma(sql_Telephone.toString())
				sql_Fax=row.Fax
				sql_Fax=removeComma(sql_Fax.toString())
				sql_Address_Id=row.Address_Id
				key=sql_ApplicationId+"_"+sql_JointAssuredId+"_"+sql_Address_Id
				sql_AddressName=row.AddressName
				sql_AddressName=removeComma(sql_AddressName.toString())
				sql_Line1=row.Line1
				sql_Line1=removeComma(sql_Line1.toString())
				sql_Line2=row.Line2
				sql_Line2=removeComma(sql_Line2.toString())
				sql_Line3=row.Line3
				sql_Line3=removeComma(sql_Line3.toString())
				sql_City=row.City
				sql_City=removeComma(sql_City.toString())
				sql_StateOrProvince=row.StateOrProvince
				sql_StateOrProvince=removeComma(sql_StateOrProvince.toString())
				sql_Country=row.Country
				sql_Country=removeComma(sql_Country.toString())
				sql_Postcode=row.Postcode
				sql_Postcode=removeComma(sql_Postcode.toString())
				sql_PolicyEndDate=row.PolicyEnd
				sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())

				log.info "SQL Response is received as =>"+key+","+sql_JointAssuredId+","+sql_JointAssuredReference+","+sql_ApplicationId+","+sql_Party_Id+","+sql_CrmIdentifier+","+sql_IsOrganisation+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_Address_Id+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode
				arrCellVal=[key,sql_JointAssuredId,sql_JointAssuredReference,sql_ApplicationId,sql_Party_Id,sql_CrmIdentifier,sql_IsOrganisation,sql_OrganisationName,sql_Salutation,sql_FirstName,sql_MiddleName,sql_LastName,sql_Name,sql_SearchName,sql_EmailAddress,sql_Telephone,sql_Fax,sql_Address_Id,sql_AddressName,sql_Line1,sql_Line2,sql_Line3,sql_City,sql_StateOrProvince,sql_Country,sql_Postcode];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
				
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldAppId=00

			for (int j = 0; j < arrayList.size(); j++)
			 {
			 	int appId=arrayList.get(j)
			 	if(appId.toString()== oldAppId.toString())
			 	{
				 	oldAppId = appId
				 	//break;
			 	}
			 	else
			 	{
			 		log.info "Getting API response for Application Id =>"+appId
				 	
				 	testRunner.testCase.setPropertyValue( "applicationId", appId.toString())
					
					testRunner.testCase.setPropertyValue('token',token)
					testRunner.runTestStepByName('AppByAppIdByJointAssureds')
					String req='${AppByAppIdByJointAssureds#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["AppByAppIdByJointAssureds"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					
					if(httpStatusCode.toString().equals("200"))
					{
						def jsonRes=jsonSlurper.parseText(response)
						int  jsonRecordCount= jsonRes.totalRecords
						//size=jsonRes.totalRecords.toInteger()
						for(int i=0;i<jsonRecordCount;i++)
						{
							int  addressCount= jsonRes.results.party[i].addresses.size
							for(int k=0; k<addressCount; k++)
							{
								api_JointAssuredId=jsonRes.results.id[i]
								api_JointAssuredReference=jsonRes.results.reference[i]
								api_JointAssuredReference=removeComma(api_JointAssuredReference.toString())
								api_Party_Id=jsonRes.results.party.id[i]
								api_CrmIdentifier=jsonRes.results.party.crmIdentifier[i]
								api_CrmIdentifier=removeComma(api_CrmIdentifier.toString())
								api_CrmIdentifier=api_CrmIdentifier.toString().toUpperCase()
								api_IsOrganisation=jsonRes.results.party.isOrganisation[i]
								api_IsOrganisation=removeComma(api_IsOrganisation.toString())
								api_OrganisationName=jsonRes.results.party.organisationName[i]
								api_OrganisationName=removeComma(api_OrganisationName.toString())
								api_Salutation=jsonRes.results.party.salutation[i]
								api_Salutation=removeComma(api_Salutation.toString())
								api_FirstName=jsonRes.results.party.firstName[i]
								api_FirstName=removeComma(api_FirstName.toString())
								api_MiddleName=jsonRes.results.party.middleName[i]
								api_MiddleName=removeComma(api_MiddleName.toString())
								api_LastName=jsonRes.results.party.lastName[i]
								api_LastName=removeComma(api_LastName.toString())
								api_Name=jsonRes.results.party.name[i]
								api_Name=removeComma(api_Name.toString())
								api_SearchName=jsonRes.results.party.searchName[i]
								api_SearchName=removeComma(api_SearchName.toString())
								api_EmailAddress=jsonRes.results.party.emailAddress[i]
								api_EmailAddress=removeComma(api_EmailAddress.toString())
								api_Telephone=jsonRes.results.party.telephone[i]
								api_Telephone=removeComma(api_Telephone.toString())
								api_Fax=jsonRes.results.party.fax[i]
								api_Fax=removeComma(api_Fax.toString())
								api_Address_Id=jsonRes.results.party.addresses[i].id[k]
								key=appId+"_"+api_JointAssuredId+"_"+api_Address_Id
								api_AddressName=jsonRes.results.party.addresses[i].addressName[k]
								api_AddressName=removeComma(api_AddressName.toString())
								api_Line1=jsonRes.results.party.addresses[i].addressLine1[k]
								api_Line1=removeComma(api_Line1.toString())
								api_Line2=jsonRes.results.party.addresses[i].addressLine2[k]
								api_Line2=removeComma(api_Line2.toString())
								api_Line3=jsonRes.results.party.addresses[i].addressLine3[k]
								api_Line3=removeComma(api_Line3.toString())
								api_City=jsonRes.results.party.addresses[i].city[k]
								api_City=removeComma(api_City.toString())
								api_StateOrProvince=jsonRes.results.party.addresses[i].stateOrCounty[k]
								api_StateOrProvince=removeComma(api_StateOrProvince.toString())
								api_Country=jsonRes.results.party.addresses[i].country[k]
								api_Country=removeComma(api_Country.toString())
								api_Postcode=jsonRes.results.party.addresses[i].postCode[k]
								api_Postcode=removeComma(api_Postcode.toString())

								log.info "API Response is received as =>"+key+","+api_JointAssuredId+","+api_JointAssuredReference+","+appId+","+api_Party_Id+","+api_CrmIdentifier+","+api_IsOrganisation+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_Address_Id+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode
								arrCellVal=[key,api_JointAssuredId,api_JointAssuredReference,appId, api_Party_Id,api_CrmIdentifier,api_IsOrganisation,api_OrganisationName,api_Salutation,api_FirstName,api_MiddleName,api_LastName,api_Name,api_SearchName,api_EmailAddress,api_Telephone,api_Fax,api_Address_Id,api_AddressName,api_Line1,api_Line2,api_Line3,api_City,api_StateOrProvince,api_Country,api_Postcode];
								RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
								counter++
								total_size++//=size
							}//inner for loop end
						}//outer for loop end
					}//end of if status 200
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
					oldAppId = appId
					//break;
			 	}//else part for same id check end
			 }//outer for loop end for arraylist
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Joint Assured Details as per Application Id  with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>88597</con:value></con:property></con:properties></con:testCase><con:testCase id="dccdeaf3-034d-402e-a370-17704cd833f2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByAssociatedParties" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByAssociatedParties" id="359e484b-5cbd-4120-9af9-e6a2421c364a"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/associatedParties" methodName="ApplicationByApplicationIdByAssociatedParties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByAssociatedParties" id="f13e6370-e11d-43f0-a453-9357c174b473" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76161/associatedParties</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByAssociatedParties" id="3e080a9f-ac5d-4bd1-a435-ad168cd40c71"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import java.text.SimpleDateFormat

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList<String> arrayList = new ArrayList<>();

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ApplicationByApplicationIdByAssociatedParties"))
		tcModuleName="AppByAppIdByAssociatedParties"
		
	if(tcModuleName.toString().equals("AppByAppIdByAssociatedParties"))
	{
		log.info "Test Execution started for getting Associated Parties details as per Application Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["ApplicationId","Party ID","Party Role Type","Asociated Party Id","CRM Identifier","Org Flag","Org Name","Saluation","First Name","Middle Name","Last Name","Name","Serach Name","Email Address","Telephone","Fax","Addresss Id","Address Name","Address Line1","Addresss Line 2","Address Line 3","City","State /Province","Country","Post Code","Association From","Association To","Servoce ProvidedType","Additional Information","AssociatedPartyAppliesToAllRisks","Capacity","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
			SELECT
			DISTINCT
			TOP 100
			AP.Party_Id, AB.Id as ApplicationId, PRT.Name as PartyRoleTypeName, AP.Id as AccociatedPartyId, P.CrmIdentifier, P.IsOrganisation,
			case when P.IsOrganisation=0 then 'true' when P.IsOrganisation=1 then 'true' end as IsOrganisationFlag, P.OrganisationName,
			P.Salutation, P.FirstName, P.MiddleName, P.LastName, P.SearchName as Name, P.SearchName, P.EmailAddress, P.Telephone, P.Fax,
			ADR.Id as Address_Id, ADR.Name as AddressName, ADR.Line1, ADR.Line2, ADR.Line3, ADR.City, ADR.StateOrProvince, RC.Name as Country, ADR.Postcode,
			AP.PeriodFrom as AssociationFrom, AP.PeriodTo as AssociationTo,
			RSPT.Name as ServiceProvidedType, AP.AdditionalInformation,
			case when appr.PolicyRiskCount!=pr.PartyRiskCount then 'false' else 'true' end as AssociatedPartyAppliesToAllRisks,AB.PolicyEnd
			from ApplicationBase AB
			inner join AssociatedParty AP on AP.Application_Id = AB.Id
			inner join Party P on AP.Party_Id = P.Id
			inner join ref_PartyRoleType PRT on PRT.Id = AP.PartyRoleType_Id
			inner join Address ADR on ADR.Party_Id = P.Id
			left join ref_Country RC on ADR.Country_Id = RC.Id
			left join ref_ServiceProvidedType RSPT on RSPT.Id = AP.ServiceProvidedType_Id
			inner join ApplicationMemberAssured AMA on AMA.Application_Id=Ap.Application_Id
			inner join 
				(select ama.Application_Id, count(ar.id) as PolicyRiskCount  from ApplicationRisk ar 
				inner join ApplicationMemberAssured ama on ar.ApplicationMemberAssured_Id = ama.id
				inner join ApplicationBase ab on ab.Id = ama.Application_Id
				group by ama.Application_Id) appr 
			on appr.Application_Id = ap.Application_Id
			Inner join 
				(select AssociatedParty_Id, count(applicationrisk_id) as PartyRiskCount  
				from ApplicationRiskAssociatedParty where VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
				group by AssociatedParty_Id) as PR 
				on pr.AssociatedParty_Id = ap.Id
			--where AB.PolicyEnd<getDate() and AB.Id=91986
			--where AB.id=92616
			order by AB.Id desc, 4
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_ApplicationId=row.ApplicationId
				log.info "Getting DB details for Application Id=>"+sql_ApplicationId
                    sql_Party_Id=row.Party_Id
                    sql_Party_Id=removeComma(sql_Party_Id.toString())
                    sql_PartyRoleTypeName=row.PartyRoleTypeName
                    sql_PartyRoleTypeName=sql_PartyRoleTypeName.toString().toUpperCase()
                    sql_AccociatedPartyId=row.AccociatedPartyId
                    sql_AccociatedPartyId=removeComma(sql_AccociatedPartyId.toString())
                    sql_CrmIdentifier=row.CrmIdentifier
                    sql_CrmIdentifier=removeComma(sql_CrmIdentifier.toString())
                    sql_IsOrganisationFlag=row.IsOrganisationFlag
                    sql_IsOrganisationFlag=removeComma(sql_IsOrganisationFlag.toString())
                    sql_OrganisationName=row.OrganisationName
                    sql_OrganisationName=removeComma(sql_OrganisationName.toString())
                    sql_Salutation=row.Salutation
                    sql_Salutation=removeComma(sql_Salutation.toString())
                    sql_FirstName=row.FirstName
                    sql_FirstName=removeComma(sql_FirstName.toString())
                    sql_MiddleName=row.MiddleName
                    sql_MiddleName=removeComma(sql_MiddleName.toString())
                    sql_LastName=row.LastName
                    sql_LastName=removeComma(sql_LastName.toString())
                    sql_Name=row.Name
                    sql_Name=removeComma(sql_Name.toString())
                    sql_SearchName=row.SearchName
                    sql_SearchName=removeComma(sql_SearchName.toString())
                    sql_EmailAddress=row.EmailAddress
                    sql_EmailAddress=removeComma(sql_EmailAddress.toString())
                    sql_Telephone=row.Telephone
                    sql_Telephone=removeComma(sql_Telephone.toString())
                    sql_Fax=row.Fax
                    sql_Fax=removeComma(sql_Fax.toString())                    
                    sql_Address_Id=row.Address_Id
                    sql_Address_Id=removeComma(sql_Address_Id.toString())
                    sql_AddressName=row.AddressName
                    sql_AddressName=removeComma(sql_AddressName.toString())
                    sql_Line1=row.Line1
                    sql_Line1=removeComma(sql_Line1.toString())
                    sql_Line2=row.Line2
                    sql_Line2=removeComma(sql_Line2.toString())
                    sql_Line3=row.Line3
                    sql_Line3=removeComma(sql_Line3.toString())
                    sql_City=row.City
                    sql_City=removeComma(sql_City.toString())
                    sql_StateOrProvince=row.StateOrProvince
                    sql_StateOrProvince=removeComma(sql_StateOrProvince.toString())
                    sql_Country=row.Country
                    sql_Country=removeComma(sql_Country.toString())
                    sql_Postcode=row.Postcode
                    sql_Postcode=removeComma(sql_Postcode.toString())
                    sql_AssociationFrom=row.AssociationFrom.toString()
                    sql_AssociationFrom=removeComma(sql_AssociationFrom.toString())
                    sql_AssociationFrom=sql_AssociationFrom.split(" ")[0]
                    sql_AssociationFrom=sql_AssociationFrom.toString()
                    
                    sql_AssociationTo=row.AssociationTo.toString()
                    sql_AssociationTo=removeComma(sql_AssociationTo.toString())
                    sql_AssociationTo=sql_AssociationTo.split(" ")[0]
                    sql_AssociationTo=sql_AssociationTo.toString()
                    
                    sql_ServiceProvidedType=row.serviceProvidedType
                    sql_ServiceProvidedType=removeComma(sql_ServiceProvidedType.toString())
                    sql_AdditionalInformation=row.additionalInformation
                    sql_AdditionalInformation=removeComma(sql_AdditionalInformation.toString())
                    sql_AssociatedPartyAppliesToAllRisks=row.AssociatedPartyAppliesToAllRisks
                    sql_AssociatedPartyAppliesToAllRisks=removeComma(sql_AssociatedPartyAppliesToAllRisks.toString())
                   
                   String getCapacitySQL= 
                    """
                    use tom
                    declare
                    @ApplicationId int ="""+sql_ApplicationId+""",
                    @AssociatedPartyId int = """+sql_AccociatedPartyId+"""
                    select AB.Id as AppId, AP.Id AssciatePartyId, RCT.Name as Capacity
                    from AssociatedParty AP
                    left join AssociatedPartyCapacityAssociation APCA on APCA.AssociatedParty_Id = AP.Id
                    left join ref_CapacityType RCT on RCT.Id=APCA.CapacityType_Id
                    inner join ApplicationBase AB on AP.Application_Id = AB.Id
                    where AB.Id=@ApplicationId
                    and AP.Id=@AssociatedPartyId 
                    """
                    def capacity=""
                    con.eachRow(getCapacitySQL)
                    {
                        rows1->
                        sql_Capacity=rows1.Capacity
                        if(sql_Capacity!=null || sql_Capacity!="")
                        		sql_Capacity=sql_Capacity.toString().toUpperCase()
                        	capacity=capacity+" "+sql_Capacity
                        	capacity=capacity.toString().replace(" ", "")
                    }
                     sql_Capacity=capacity
                    
                    String sql_PolicyEndDate=row.PolicyEnd.toString()
                    sql_PolicyEndDate=sql_PolicyEndDate.split(" ")[0]
                    sql_PolicyEndDate=sql_PolicyEndDate.toString()
                    
                    date= new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
                    date = new Date()
                    getDateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
                    String todaysDate=getDateFormat.format(date)
                    todaysDate=todaysDate.toString().replace("/","-")
                    todaysDate=todaysDate.split(" ")[0]
                  
			 	if(sql_PolicyEndDate<todaysDate)
	                    {
	                    	String expectedError1="An error has occurred"
	                    	String expectedError2="The Policy End Date"
	                    	String expectedError3="is in the past."
	                    	int expectedHTTPStatusCode=404
	                    	log.info " As policy end date is past date, expected response should contain=>"+expectedError1+" "+expectedError2+" "+expectedError3+" and expected HTTP Status Code=>"+expectedHTTPStatusCode
	                    	
	 	                  	key=sql_ApplicationId+"_"+expectedHTTPStatusCode
	                    	arrayList.add(sql_ApplicationId)
	                    	
	                    	arrCellVal=[key, expectedHTTPStatusCode, expectedError1, expectedError2, expectedError3]
	                    	RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
	                    }
	                    else
	                    {
	                    	key=sql_ApplicationId+"_"+sql_Party_Id+"_"+sql_AccociatedPartyId+"_"+sql_Address_Id
		                    arrayList.add(sql_ApplicationId)
		
						log.info "SQL response is received as =>"+key+","+sql_Party_Id+","+sql_PartyRoleTypeName+","+sql_AccociatedPartyId+","+sql_CrmIdentifier+","+sql_IsOrganisationFlag+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_Address_Id+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode+","+sql_AssociationFrom+","+sql_AssociationTo+","+sql_ServiceProvidedType+","+sql_AdditionalInformation+","+sql_AssociatedPartyAppliesToAllRisks+","+sql_Capacity
						arrCellVal=[key,sql_Party_Id,sql_PartyRoleTypeName,sql_AccociatedPartyId,sql_CrmIdentifier,sql_IsOrganisationFlag,sql_OrganisationName,sql_Salutation,sql_FirstName,sql_MiddleName,sql_LastName,sql_Name,sql_SearchName,sql_EmailAddress,sql_Telephone,sql_Fax,sql_Address_Id,sql_AddressName,sql_Line1,sql_Line2,sql_Line3,sql_City,sql_StateOrProvince,sql_Country,sql_Postcode,sql_AssociationFrom,sql_AssociationTo,sql_ServiceProvidedType,sql_AdditionalInformation,sql_AssociatedPartyAppliesToAllRisks,sql_Capacity];
						RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
	                    }	
	                    counter++
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldAppId=00

			for (int j = 0; j < arrayList.size(); j++)
			 {
			 	int appId=arrayList.get(j)
			 	if(oldAppId == appId)
			 	{
				 	oldAppId = appId
			 	}
			 	else
			 	{
			 		log.info "Getting API response for Application Id=>"+appId
			 	
				 	testRunner.testCase.setPropertyValue( "applicationId", appId.toString())
					
					testRunner.testCase.setPropertyValue('token',token)
					testRunner.runTestStepByName('AppByAppIdByAssociatedParties')
					String req='${AppByAppIdByAssociatedParties#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["AppByAppIdByAssociatedParties"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					log.info "Original API response is=>"+response
					log.info "HTTP Status Code received as=>"+httpStatusCode
					
					def jsonRes=jsonSlurper.parseText(response)
					
					if(httpStatusCode.toString().equals("200"))
					{
						int jsonRecordCount = jsonRes.totalRecords
						size=jsonRes.totalRecords.toInteger()
						//total_size+=size
						
						for(int i=0;i<jsonRecordCount;i++)
						{
							int addressCount = jsonRes.results.party[i].addresses.id.size
							for(int k=0; k<addressCount; k++)
							{
								api_ApplicationId=appId
								api_Party_Id=jsonRes.results.party.id[i]
								api_Party_Id=removeComma(api_Party_Id.toString())
								api_PartyRoleTypeName=jsonRes.results.partyRoleTypeName[i]
								api_PartyRoleTypeName=api_PartyRoleTypeName.toString().toUpperCase()
								api_PartyRoleTypeName=removeComma(api_PartyRoleTypeName.toString())
								api_AccociatedPartyId=jsonRes.results.id[i]
								api_AccociatedPartyId=removeComma(api_AccociatedPartyId.toString())
								api_CrmIdentifier=jsonRes.results.party.crmIdentifier[i]
								if(api_CrmIdentifier!=null)
									api_CrmIdentifier=api_CrmIdentifier.toString().toUpperCase()
								api_CrmIdentifier=removeComma(api_CrmIdentifier.toString())
								api_IsOrganisationFlag=jsonRes.results.party.isOrganisation[i]
								api_IsOrganisationFlag=removeComma(api_IsOrganisationFlag.toString())
								api_OrganisationName=jsonRes.results.party.organisationName[i]
								api_OrganisationName=removeComma(api_OrganisationName.toString())
								api_Salutation=jsonRes.results.party.salutation[i]
								api_Salutation=removeComma(api_Salutation.toString())
								api_FirstName=jsonRes.results.party.firstName[i]
								api_FirstName=removeComma(api_FirstName.toString())
								api_MiddleName=jsonRes.results.party.middleName[i]
								api_MiddleName=removeComma(api_MiddleName.toString())
								api_LastName=jsonRes.results.party.lastName[i]
								api_LastName=removeComma(api_LastName.toString())
								api_Name=jsonRes.results.party.name[i]
								api_Name=removeComma(api_Name.toString())
								api_SearchName=jsonRes.results.party.searchName[i]
								api_SearchName=removeComma(api_SearchName.toString())
								api_EmailAddress=jsonRes.results.party.emailAddress[i]
								api_EmailAddress=removeComma(api_EmailAddress.toString())
								api_Telephone=jsonRes.results.party.telephone[i]
								api_Telephone=removeComma(api_Telephone.toString())
								api_Fax=jsonRes.results.party.fax[i]
								api_Fax=removeComma(api_Fax.toString())
							
								api_Address_Id=jsonRes.results.party[i].addresses.id[k]
								api_Address_Id=removeComma(api_Address_Id.toString())
								api_AddressName=jsonRes.results.party[i].addresses.addressName[k]
								api_AddressName=removeComma(api_AddressName.toString())
								api_Line1=jsonRes.results.party[i].addresses.addressLine1[k]
								api_Line1=removeComma(api_Line1.toString())
								api_Line2=jsonRes.results.party[i].addresses.addressLine2[k]
								api_Line2=removeComma(api_Line2.toString())
								api_Line3=jsonRes.results.party[i].addresses.addressLine3[k]
								api_Line3=removeComma(api_Line3.toString())
								api_City=jsonRes.results.party[i].addresses.city[k]
								api_City=removeComma(api_City.toString())
								api_StateOrProvince=jsonRes.results.party[i].addresses.stateOrCounty[k]
								api_StateOrProvince=removeComma(api_StateOrProvince.toString())
								api_Country=jsonRes.results.party[i].addresses.country[k]
								api_Country=removeComma(api_Country.toString())
								api_Postcode=jsonRes.results.party[i].addresses.postCode[k]
								api_Postcode=removeComma(api_Postcode.toString())	
							
								api_AssociationFrom=jsonRes.results.associationFrom[i]
								api_AssociationFrom=removeComma(api_AssociationFrom.toString())
								if(api_AssociationFrom!=null)
								{
									api_AssociationFrom=api_AssociationFrom.split("T")[0]
									api_AssociationFrom=api_AssociationFrom.toString()
								}
								api_AssociationTo=jsonRes.results.associationTo[i]
								api_AssociationTo=removeComma(api_AssociationTo.toString())
								if(api_AssociationTo!=null)
								{
									api_AssociationTo=api_AssociationTo.split("T")[0]
									api_AssociationTo=api_AssociationTo.toString()
								}
								api_Capacity=jsonRes.results.capacities[i]
								api_Capacity=removeComma(api_Capacity.toString())
								if(api_Capacity==null || api_Capacity=="" || api_Capacity==[])
									api_Capacity="NULL"
								else
									api_Capacity=api_Capacity.toString().toUpperCase()
								api_Capacity=api_Capacity.toString().replace(" ","")
								api_ServiceProvidedType=jsonRes.results.serviceProvidedType[i]
								api_ServiceProvidedType=removeComma(api_ServiceProvidedType.toString())
								api_AdditionalInformation=jsonRes.results.additionalInformation[i]
								api_AdditionalInformation=removeComma(api_AdditionalInformation.toString())
								api_AssociatedPartyAppliesToAllRisks=jsonRes.results.associatedPartyAppliesToAllRisks[i]
								api_AssociatedPartyAppliesToAllRisks=removeComma(api_AssociatedPartyAppliesToAllRisks.toString())
								
								key=api_ApplicationId+"_"+api_Party_Id+"_"+api_AccociatedPartyId+"_"+api_Address_Id
			
								log.info "API response is received as =>"+key+","+api_Party_Id+","+api_PartyRoleTypeName+","+api_AccociatedPartyId+","+api_CrmIdentifier+","+api_IsOrganisationFlag+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_Address_Id+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode+","+api_AssociationFrom+","+api_AssociationTo+","+api_ServiceProvidedType+","+api_AdditionalInformation+","+api_AssociatedPartyAppliesToAllRisks+","+api_Capacity
								arrCellVal=[key,api_Party_Id,api_PartyRoleTypeName,api_AccociatedPartyId,api_CrmIdentifier,api_IsOrganisationFlag,api_OrganisationName,api_Salutation,api_FirstName,api_MiddleName,api_LastName,api_Name,api_SearchName,api_EmailAddress,api_Telephone,api_Fax,api_Address_Id,api_AddressName,api_Line1,api_Line2,api_Line3,api_City,api_StateOrProvince,api_Country,api_Postcode,api_AssociationFrom,api_AssociationTo,api_ServiceProvidedType,api_AdditionalInformation,api_AssociatedPartyAppliesToAllRisks,api_Capacity];
								RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
								counter++
								total_size++	
							}
						}
					}
					else if(httpStatusCode.toString().equals("404"))
					{
	                    	String expectedError1="An error has occurred"
	                    	String expectedError2="The Policy End Date"
	                    	String expectedError3="is in the past."
	                    	
	                    	key=appId+"_"+httpStatusCode.toString()
	                    	String receivedError=jsonRes.Message.toString()
	                    	
	                    	if(receivedError.contains(expectedError1) && receivedError.contains(expectedError2) && receivedError.contains(expectedError3))
	                    	{
	                    		log.info "When Policy end date is past date, API response is received as =>"+jsonRes.Message
		                    	arrCellVal=[key, httpStatusCode, expectedError1, expectedError2, expectedError3]
		                    	RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
							counter++	
							total_size++	
	                    	}
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++	
						total_size++	
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++	
						total_size++	
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
					oldAppId = appId
			 	}	
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Associated Parties Details as per Application Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>92483</con:value></con:property><con:property><con:name>token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ilg1ZVhrNHh5b2pORnVtMWtsMll0djhkbE5QNC1jNTdkTzZRR1RWQndhTmsifQ.eyJpc3MiOiJodHRwczovL3NoaXBvd25lcnNjb3VrZGV2YjJjLmIyY2xvZ2luLmNvbS81YzJlY2M4OC1kNmNlLTRkNDEtYThhMi05ZTAzMTc0N2M3ZTYvdjIuMC8iLCJleHAiOjE2MTQwMDg4MzEsIm5iZiI6MTYxNDAwNTIzMSwiYXVkIjoiZTQ4NTNjODItNjhjYS00OTk5LTk3NjAtZmZjODkxODk4NGJhIiwib2lkIjoiMTdlYzIyNjQtODZmNS00YWM1LWI3NTItMzkxZmE3ZTVmOWIzIiwic3ViIjoiMTdlYzIyNjQtODZmNS00YWM1LWI3NTItMzkxZmE3ZTVmOWIzIiwibmFtZSI6IlBhbmRpIFRlc3QtT25lIiwiZ2l2ZW5fbmFtZSI6IlBhbmRpIiwiam9iVGl0bGUiOiJCcm9rZXIiLCJleHRlbnNpb25fc3BsX2lkZW50aWZpZXIiOiI4NzI3MWZmOS1iNmY4LWVhMTEtYTgxNS0wMDBkM2FkYjY1NGQiLCJleHRlbnNpb25fc3BsX3JlZmVyZW5jZSI6IjQ1OSIsImZhbWlseV9uYW1lIjoiVGVzdC1PbmUiLCJleHRlbnNpb25fc3BsX3Rlcm1zYWNjZXB0ZWQiOiJ2MSIsImVtYWlscyI6WyJwaXRlc3Ricm9rZXIxQGdtYWlsLmNvbSJdLCJ0ZnAiOiJCMkNfMV9zcGx3ZWJwb3J0YWxkZXZzaWduaW5tZmEiLCJub25jZSI6IiIsInNjcCI6InRyYWRpbmctY2VydHMucmVhZCIsImF6cCI6ImZlZTUzNDUwLWQ4MzQtNGU0MC1hM2FjLTljMmMyNDJkYmIzMCIsInZlciI6IjEuMCIsImlhdCI6MTYxNDAwNTIzMX0.pMZTfdxWYtUGo6nRGiOvw088I2Ci9RmzbC8RYf9Q5kAWyolPiqGxg2cEfuIbchTpTjiA2QzCTUYlpRdNqKaUrQTH_YHHPFxvG4b4XdrtNwbeLtHYDM60fBfEUCNEE6ThDpAkD_1bb4D2658T9xSpcW0ft4BnP6-pjAtUtVUIXx1Rno58Y0szh5Q7vpSaqNJCV59SY51aHO2t5jUkuyCGFguOo6jD7CGotJAgo7rt8_lEQ0eLCmHdUVXYvABIospUs2IwWnLxdZYkk3Wr4-UNqEzTV_IDzPvmIikTvYZ45YtJERi2KV0xwZuh3rlEYhZZ_uCRMnaBLMCAIgk-F--pOg</con:value></con:property></con:properties></con:testCase><con:testCase id="5ee5004a-7142-412c-bdf8-e73e6e9d5440" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_BrokerByBrokerId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="BrkByBrkId" id="4fde9d7e-305e-4ee4-87a2-0f59966db63b"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/brokers/${#TestCase#brokerId}" methodName="BrokerByBrokerId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BrkByBrkId" id="ac696e82-1f4b-4722-aeee-9f9aa6f84602" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/brokers/1289</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="BrokerByBrokerId" id="cb3ddefe-c445-4730-856d-ee652c103f66"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList&lt;String> arrayList = new ArrayList&lt;>();

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_BrokerByBrokerId"))
		tcModuleName="BrokerByBrokerId"
		
	if(tcModuleName.toString().equals("BrokerByBrokerId"))
	{
		log.info "Test Execution started for getting Broker Details as per Broker ID from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Broker_Id","BrokerReference","Party_Id","CrmIdentifier","OrganisationName","Salutation","FirstName","MiddleName","LastName","SearchName","EmailAddress","Telephone","Fax","Address_Id","AddressName","Line1","Line2","Line3","City","StateOrProvince","Country","Postcode","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
			SELECT
			TOP 100
			B.Id as Broker_Id, B.reference as BrokerReference, P.id as Party_Id, P.CrmIdentifier, P.OrganisationName, 
			P.Salutation, P.FirstName, P.MiddleName, P.LastName, P.SearchName, 
			p.EmailAddress, p.Telephone, p.Fax, ADR.Id as Address_Id, ADR.Name as AddressName, ADR.Line1, ADR.Line2, ADR.Line3,ADR.City, 
			 ADR.StateOrProvince,C.Name as Country, ADR.Postcode
			from Broker B
			left join Party P on P.Id =B.Party_Id
			left join BrokerGroup BRG on BRG.ID=B.BrokerGroup_Id
			left join Address ADR on ADR.Party_Id = B.Party_Id
			left join ref_Country C on C.Id = ADR.Country_Id
			--where B.Id=1309
			order by 2 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_BrokerId=row.Broker_Id
				sql_BrokerId=removeComma(sql_BrokerId.toString())
				arrayList.add(sql_BrokerId)
				sql_BrokerReference=row.BrokerReference
				sql_BrokerReference=removeComma(sql_BrokerReference.toString())
				sql_PartyId=row.Party_Id
				sql_PartyId=removeComma(sql_PartyId.toString())
				sql_CrmIdentifier=row.CrmIdentifier
				sql_CrmIdentifier=removeComma(sql_CrmIdentifier.toString())
				sql_OrganisationName=row.OrganisationName
				sql_OrganisationName=removeComma(sql_OrganisationName.toString())
				sql_Salutation=row.Salutation
				sql_Salutation=removeComma(sql_Salutation.toString())
				sql_FirstName=row.FirstName
				sql_FirstName=removeComma(sql_FirstName.toString())
				sql_MiddleName=row.MiddleName
				sql_MiddleName=removeComma(sql_MiddleName.toString())
				sql_LastName=row.LastName
				sql_LastName=removeComma(sql_LastName.toString())
				sql_SearchName=row.SearchName
				sql_SearchName=removeComma(sql_SearchName.toString())
				sql_EmailAddress=row.EmailAddress
				sql_EmailAddress=removeComma(sql_EmailAddress.toString())
				sql_Telephone=row.Telephone
				sql_Telephone=removeComma(sql_Telephone.toString())
				sql_Fax=row.Fax
				sql_Fax=removeComma(sql_Fax.toString())
				sql_AddressId=row.Address_Id
				sql_AddressId=removeComma(sql_AddressId.toString())
				sql_AddressName=row.AddressName
				sql_AddressName=removeComma(sql_AddressName.toString())
				sql_Line1=row.Line1
				sql_Line1=removeComma(sql_Line1.toString())
				sql_Line2=row.Line2
				sql_Line2=removeComma(sql_Line2.toString())
				sql_Line3=row.Line3
				sql_Line3=removeComma(sql_Line3.toString())
				sql_City=row.City
				sql_City=removeComma(sql_City.toString())
				sql_StateOrProvince=row.StateOrProvince
				sql_StateOrProvince=removeComma(sql_StateOrProvince.toString())
				sql_Country=row.Country
				sql_Country=removeComma(sql_Country.toString())
				sql_Postcode=row.Postcode
				sql_Postcode=removeComma(sql_Postcode.toString())

				log.info "SQL Response is received as =>"+sql_BrokerId+","+sql_BrokerReference+","+sql_PartyId+","+sql_CrmIdentifier+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode
				arrCellVal=[sql_BrokerId,sql_BrokerReference,sql_PartyId,sql_CrmIdentifier,sql_OrganisationName,sql_Salutation,sql_FirstName,sql_MiddleName,sql_LastName,sql_SearchName,sql_EmailAddress,sql_Telephone,sql_Fax,sql_AddressId,sql_AddressName,sql_Line1,sql_Line2,sql_Line3,sql_City,sql_StateOrProvince,sql_Country,sql_Postcode];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start

			for (int j = 0; j &lt; arrayList.size(); j++)
			 {
			 	BrokerId=arrayList.get(j)
			 	log.info "Getting API response for Broker Id=>"+BrokerId
			 	
			 	testRunner.testCase.setPropertyValue('brokerid',BrokerId.toString())
				
				testRunner.testCase.setPropertyValue('token',token)
				testRunner.runTestStepByName('BrkByBrkId')
				String req='${BrkByBrkId#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
	
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["BrkByBrkId"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				log.info "Original API response is=>"+response
				log.info "HTTP Status Code received as=>"+httpStatusCode
				
				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)
					//int jsonRecordCount = jsonRes.totalRecords
					//size=jsonRes.totalRecords.toInteger()
					//total_size+=size
//					for(int i=0;i&lt;jsonRecordCount;i++)
//					{
						api_BrokerId=jsonRes.id
						api_BrokerId=removeComma(api_BrokerId.toString())
						api_BrokerReference=jsonRes.reference
						api_BrokerReference=removeComma(api_BrokerReference.toString())
						api_PartyId=jsonRes.party.id
						api_PartyId=removeComma(api_PartyId.toString())
						api_CrmIdentifier=jsonRes.party.crmIdentifier
						api_CrmIdentifier=removeComma(api_CrmIdentifier.toString())
						api_CrmIdentifier=api_CrmIdentifier.toString().toUpperCase()
						api_OrganisationName=jsonRes.party.organisationName
						api_OrganisationName=removeComma(api_OrganisationName.toString())
						api_Salutation=jsonRes.party.salutation
						api_Salutation=removeComma(api_Salutation.toString())
						api_FirstName=jsonRes.party.firstName
						api_FirstName=removeComma(api_FirstName.toString())
						api_MiddleName=jsonRes.party.middleName
						api_MiddleName=removeComma(api_MiddleName.toString())
						api_LastName=jsonRes.party.lastName
						api_LastName=removeComma(api_LastName.toString())
						api_SearchName=jsonRes.party.searchName
						api_SearchName=removeComma(api_SearchName.toString())
						api_EmailAddress=jsonRes.party.emailAddress
						api_EmailAddress=removeComma(api_EmailAddress.toString())
						api_Telephone=jsonRes.party.telephone
						api_Telephone=removeComma(api_Telephone.toString())
						api_Fax=jsonRes.party.fax
						api_Fax=removeComma(api_Fax.toString())
						api_AddressId=jsonRes.party.addresses.id
						api_AddressId=removeComma(api_AddressId.toString())
						api_Name=jsonRes.party.addresses.addressName
						api_Name=removeComma(api_Name.toString())
						api_Line1=jsonRes.party.addresses.addressLine1
						api_Line1=removeComma(api_Line1.toString())
						api_Line2=jsonRes.party.addresses.addressLine2
						api_Line2=removeComma(api_Line2.toString())
						api_Line3=jsonRes.party.addresses.addressLine3
						api_Line3=removeComma(api_Line3.toString())
						api_City=jsonRes.party.addresses.city
						api_City=removeComma(api_City.toString())
						api_StateOrProvince=jsonRes.party.addresses.stateOrCounty
						api_StateOrProvince=removeComma(api_StateOrProvince.toString())
						api_Country=jsonRes.party.addresses.country
						api_Country=removeComma(api_Country.toString())
						api_Postcode=jsonRes.party.addresses.postCode
						api_Postcode=removeComma(api_Postcode.toString())
	
						log.info "API Response is received as =>"+api_BrokerId+","+api_BrokerReference+","+api_PartyId+","+api_CrmIdentifier+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_Name+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode
							
						arrCellVal=[api_BrokerId,api_BrokerReference,api_PartyId,api_CrmIdentifier,api_OrganisationName,api_Salutation,api_FirstName,api_MiddleName,api_LastName,api_SearchName,api_EmailAddress,api_Telephone,api_Fax,api_AddressId,api_Name,api_Line1,api_Line2,api_Line3,api_City,api_StateOrProvince,api_Country,api_Postcode];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++
					//}
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}	
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Broker Details as per Broker Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}</script></con:config></con:testStep><con:properties><con:property><con:name>brokerId</con:name><con:value>1309</con:value></con:property></con:properties></con:testCase><con:testCase id="3293e1a2-2880-4264-b1b0-80d95277432a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_BrokersByBrokersReference" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="BrkByBrkReference" id="bf205ee9-8f30-4e32-8486-76dfc6dec797"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/brokers/" methodName="BrokersByBrokersReference" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BrkByBrkReference" id="b880e907-63d4-4320-8376-6a1387fd5004" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/brokers/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="reference" value="${#TestCase#brokerReference}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>reference</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="BrokerByBrokerReference" id="745ef0a3-ffdf-4895-b7cd-4122b2d8ee42"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList&lt;String> arrayList = new ArrayList&lt;>();

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_BrokersByBrokersReference"))
		tcModuleName="BrokerByBrokerReference"
		
	if(tcModuleName.toString().equals("BrokerByBrokerReference"))
	{
		log.info "Test Execution started for getting Broker Details as per Broker Reference from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Broker_Id","BrokerReference","Party_Id","CrmIdentifier","OrganisationName","Salutation","FirstName","MiddleName","LastName","SearchName","EmailAddress","Telephone","Fax","Address_Id","AddressName","Line1","Line2","Line3","City","StateOrProvince","Country","Postcode","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
			SELECT
			TOP 100
			B.Id as Broker_Id, B.reference as BrokerReference, P.id as Party_Id, P.CrmIdentifier, P.OrganisationName, 
			P.Salutation, P.FirstName, P.MiddleName, P.LastName, P.SearchName, 
			p.EmailAddress, p.Telephone, p.Fax, ADR.Id as Address_Id, ADR.Name as AddressName, ADR.Line1, ADR.Line2, ADR.Line3,ADR.City, 
			 ADR.StateOrProvince,C.Name as Country, ADR.Postcode
			from Broker B
			left join Party P on P.Id =B.Party_Id
			left join BrokerGroup BRG on BRG.ID=B.BrokerGroup_Id
			left join Address ADR on ADR.Party_Id = B.Party_Id
			left join ref_Country C on C.Id = ADR.Country_Id
			order by 2 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_BrokerId=row.Broker_Id
				sql_BrokerId=removeComma(sql_BrokerId.toString())
				sql_BrokerReference=row.BrokerReference
				sql_BrokerReference=removeComma(sql_BrokerReference.toString())
				arrayList.add(sql_BrokerReference)
				sql_PartyId=row.Party_Id
				sql_PartyId=removeComma(sql_PartyId.toString())
				sql_CrmIdentifier=row.CrmIdentifier
				sql_CrmIdentifier=removeComma(sql_CrmIdentifier.toString())
				sql_OrganisationName=row.OrganisationName
				sql_OrganisationName=removeComma(sql_OrganisationName.toString())
				sql_Salutation=row.Salutation
				sql_Salutation=removeComma(sql_Salutation.toString())
				sql_FirstName=row.FirstName
				sql_FirstName=removeComma(sql_FirstName.toString())
				sql_MiddleName=row.MiddleName
				sql_MiddleName=removeComma(sql_MiddleName.toString())
				sql_LastName=row.LastName
				sql_LastName=removeComma(sql_LastName.toString())
				sql_SearchName=row.SearchName
				sql_SearchName=removeComma(sql_SearchName.toString())
				sql_EmailAddress=row.EmailAddress
				sql_EmailAddress=removeComma(sql_EmailAddress.toString())
				sql_Telephone=row.Telephone
				sql_Telephone=removeComma(sql_Telephone.toString())
				sql_Fax=row.Fax
				sql_Fax=removeComma(sql_Fax.toString())
				sql_AddressId=row.Address_Id
				sql_AddressId=removeComma(sql_AddressId.toString())
				sql_AddressName=row.AddressName
				sql_AddressName=removeComma(sql_AddressName.toString())
				sql_Line1=row.Line1
				sql_Line1=removeComma(sql_Line1.toString())
				sql_Line2=row.Line2
				sql_Line2=removeComma(sql_Line2.toString())
				sql_Line3=row.Line3
				sql_Line3=removeComma(sql_Line3.toString())
				sql_City=row.City
				sql_City=removeComma(sql_City.toString())
				sql_StateOrProvince=row.StateOrProvince
				sql_StateOrProvince=removeComma(sql_StateOrProvince.toString())
				sql_Country=row.Country
				sql_Country=removeComma(sql_Country.toString())
				sql_Postcode=row.Postcode
				sql_Postcode=removeComma(sql_Postcode.toString())

				log.info "SQL Response is received as =>"+sql_BrokerId+","+sql_BrokerReference+","+sql_PartyId+","+sql_CrmIdentifier+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode
				arrCellVal=[sql_BrokerId,sql_BrokerReference,sql_PartyId,sql_CrmIdentifier,sql_OrganisationName,sql_Salutation,sql_FirstName,sql_MiddleName,sql_LastName,sql_SearchName,sql_EmailAddress,sql_Telephone,sql_Fax,sql_AddressId,sql_AddressName,sql_Line1,sql_Line2,sql_Line3,sql_City,sql_StateOrProvince,sql_Country,sql_Postcode];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
				
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start

			for (int j = 0; j &lt; arrayList.size(); j++)
			 {
			 	BrokerReference=arrayList.get(j)
			 	log.info "Getting API response for Broker Reference=>"+BrokerReference
			 	
			 	testRunner.testCase.setPropertyValue('brokerReference',BrokerReference)
				
				testRunner.testCase.setPropertyValue('token',token)
				testRunner.runTestStepByName('BrkByBrkReference')
				String req='${BrkByBrkReference#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
	
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["BrkByBrkReference"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				
				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)
					int jsonRecordCount = jsonRes.totalRecords
					size=jsonRes.totalRecords.toInteger()
					total_size+=size
					for(int i=0;i&lt;jsonRecordCount;i++)
					{
						api_BrokerId=jsonRes.results.id[i]
						api_BrokerId=removeComma(api_BrokerId.toString())
						api_BrokerReference=jsonRes.results.reference[i]
						api_BrokerReference=removeComma(api_BrokerReference.toString())
						api_PartyId=jsonRes.results.party.id[i]
						api_PartyId=removeComma(api_PartyId.toString())
						api_CrmIdentifier=jsonRes.results.party.crmIdentifier[i]
						api_CrmIdentifier=removeComma(api_CrmIdentifier.toString())
						api_CrmIdentifier=api_CrmIdentifier.toString().toUpperCase()
						api_OrganisationName=jsonRes.results.party.organisationName[i]
						api_OrganisationName=removeComma(api_OrganisationName.toString())
						api_Salutation=jsonRes.results.party.salutation[i]
						api_Salutation=removeComma(api_Salutation.toString())
						api_FirstName=jsonRes.results.party.firstName[i]
						api_FirstName=removeComma(api_FirstName.toString())
						api_MiddleName=jsonRes.results.party.middleName[i]
						api_MiddleName=removeComma(api_MiddleName.toString())
						api_LastName=jsonRes.results.party.lastName[i]
						api_LastName=removeComma(api_LastName.toString())
						api_SearchName=jsonRes.results.party.searchName[i]
						api_SearchName=removeComma(api_SearchName.toString())
						api_EmailAddress=jsonRes.results.party.emailAddress[i]
						api_EmailAddress=removeComma(api_EmailAddress.toString())
						api_Telephone=jsonRes.results.party.telephone[i]
						api_Telephone=removeComma(api_Telephone.toString())
						api_Fax=jsonRes.results.party.fax[i]
						api_Fax=removeComma(api_Fax.toString())
						api_AddressId=jsonRes.results.party.addresses.id[i]
						api_AddressId=removeComma(api_AddressId.toString())
						api_Name=jsonRes.results.party.addresses.addressName[i]
						api_Name=removeComma(api_Name.toString())
						api_Line1=jsonRes.results.party.addresses.addressLine1[i]
						api_Line1=removeComma(api_Line1.toString())
						api_Line2=jsonRes.results.party.addresses.addressLine2[i]
						api_Line2=removeComma(api_Line2.toString())
						api_Line3=jsonRes.results.party.addresses.addressLine3[i]
						api_Line3=removeComma(api_Line3.toString())
						api_City=jsonRes.results.party.addresses.city[i]
						api_City=removeComma(api_City.toString())
						api_StateOrProvince=jsonRes.results.party.addresses.stateOrCounty[i]
						api_StateOrProvince=removeComma(api_StateOrProvince.toString())
						api_Country=jsonRes.results.party.addresses.country[i]
						api_Country=removeComma(api_Country.toString())
						api_Postcode=jsonRes.results.party.addresses.postCode[i]
						api_Postcode=removeComma(api_Postcode.toString())
	
						log.info "API Response is received as =>"+api_BrokerId+","+api_BrokerReference+","+api_PartyId+","+api_CrmIdentifier+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_Name+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode
							
						arrCellVal=[api_BrokerId,api_BrokerReference,api_PartyId,api_CrmIdentifier,api_OrganisationName,api_Salutation,api_FirstName,api_MiddleName,api_LastName,api_SearchName,api_EmailAddress,api_Telephone,api_Fax,api_AddressId,api_Name,api_Line1,api_Line2,api_Line3,api_City,api_StateOrProvince,api_Country,api_Postcode];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
					}
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}	
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Broker Details as per Broker Reference with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}</script></con:config></con:testStep><con:properties><con:property><con:name>brokerReference</con:name><con:value>6190</con:value></con:property></con:properties></con:testCase><con:testCase id="23a20b09-dd20-463a-96f7-7c3d476fa9f1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_BrokerByBrokerIdByContacts" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="BrkByBrkIdByContacts" id="57dae3ca-ffbd-436f-afbd-503460a3db7b"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/brokers/${#TestCase#brokerId}/contacts" methodName="BrokerByBrokerIdByContacts" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BrkByBrkIdByContacts" id="44778d96-842e-479e-83c6-a62a63f1b3d9" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/brokers/1289/contacts</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="BrokerByBrokerIdByContacts" id="8c7053b6-b9c7-4279-97ee-5b4391394d8b"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList&lt;String> arrayList = new ArrayList&lt;>();

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_BrokerByBrokerIdByContacts"))
		tcModuleName="BrokerBrokerIdByContacts"
		
	if(tcModuleName.toString().equals("BrokerBrokerIdByContacts"))
	{
		log.info "Test Execution started for getting Broker's Contact Details as per Broker Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Key","BrokerId","Party_Id","OrganisationName","Position","ContactName","EmailAddress","AddressId","AddressName","Line1","Line2","Line3","City","StateOrProvince","Country","Postcode","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
			SELECT 
			DISTINCT
			TOP 100
			B.Id as BrokerId, P.Id as Party_Id, P.Salutation, P.OrganisationName, P.Position, CT.Name as ContactName,  P.EmailAddress,  A.Id as AddressId,
			A.Name as AddressName, A.Line1, A.Line2, A.Line3, A.City, A.StateOrProvince, C.Name as Country, A.Postcode, B.Reference as BrokerReference
			from Broker B 
			left Join Party P on P.Account_Id=B.Party_Id 
			left join Address A on A.Party_Id = P.Id 
			left join ref_Country C on C.Id = A.Country_Id 
			left join ref_ContactType CT on CT.Id= P.ContactType_Id
			where p.discriminator='Contact'
			order by 1 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_BrokerId=row.BrokerId
				arrayList.add(sql_BrokerId)
				sql_Party_Id=row.Party_Id
				key=sql_BrokerId+"_"+sql_Party_Id
				sql_OrganisationName=row.OrganisationName
				sql_Salutation=row.Salutation
				if(!sql_Salutation.toString().equals("null"))
					sql_Name=sql_Salutation+" "+sql_OrganisationName
				else
					sql_Name=" "+sql_OrganisationName
				sql_Name=removeComma(sql_Name.toString())
				sql_Position=row.Position
				sql_Position=removeComma(sql_Position.toString())
				sql_ContactName=row.ContactName
				sql_ContactName=removeComma(sql_ContactName.toString())
				sql_EmailAddress=row.EmailAddress
				sql_AddressId=row.AddressId
				sql_AddressName=row.AddressName
				sql_AddressName=removeComma(sql_AddressName.toString())
				sql_Line1=row.Line1
				sql_Line1=removeComma(sql_Line1.toString())
				sql_Line2=row.Line2
				sql_Line2=removeComma(sql_Line2.toString())
				sql_Line3=row.Line3
				sql_Line3=removeComma(sql_Line3.toString())
				sql_City=row.City
				sql_City=removeComma(sql_City.toString())				
				sql_StateOrProvince=row.StateOrProvince
				sql_StateOrProvince=removeComma(sql_StateOrProvince.toString())
				sql_Country=row.Country
				sql_Country=removeComma(sql_Country.toString())
				sql_PostCode=row.Postcode
				sql_PostCode=removeComma(sql_PostCode.toString())

				log.info "SQL Response is received as =>"+key+","+sql_BrokerId+","+sql_Party_Id+","+sql_Name+","+sql_Position+","+sql_ContactName+","+sql_EmailAddress+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_PostCode
				arrCellVal=[key, sql_BrokerId,sql_Party_Id,sql_Name,sql_Position,sql_ContactName,sql_EmailAddress,sql_AddressId,sql_AddressName,sql_Line1,sql_Line2,sql_Line3,sql_City,sql_StateOrProvince,sql_Country,sql_PostCode];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
				
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldBrokerId=00

			for (int j = 0; j &lt; arrayList.size(); j++)
			 {
			 	int BrokerId=arrayList.get(j)
			 	if(oldBrokerId == BrokerId)
			 	{
				 	oldBrokerId = BrokerId
			 	}
			 	else
			 	{
			 		log.info "Getting API response for Broker Id=>"+BrokerId
				 	
				 	testRunner.testCase.setPropertyValue('brokerId',BrokerId.toString())
					
					testRunner.testCase.setPropertyValue('token',token)
					testRunner.runTestStepByName('BrkByBrkIdByContacts')
					String req='${BrkByBrkIdByContacts#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["BrkByBrkIdByContacts"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					
					if(httpStatusCode.toString().equals("200"))
					{
						def jsonRes=jsonSlurper.parseText(response)
						int jsonRecordCount = jsonRes.totalRecords
						size=jsonRes.totalRecords.toInteger()
						total_size+=size
						for(int i=0;i&lt;jsonRecordCount;i++)
						{
							api_PartyId=jsonRes.results.id[i]
							key=BrokerId+"_"+api_PartyId
							api_Name=jsonRes.results.name[i]
							api_Name=removeComma(api_Name.toString())
							api_Position=jsonRes.results.position[i]
							api_Position=removeComma(api_Position.toString())
							api_ContactName=jsonRes.results.contactTypeName[i]
							api_ContactName=removeComma(api_ContactName.toString())
							api_EmailAddress=jsonRes.results.emailAddress[i]
							api_EmailAddress=removeComma(api_EmailAddress.toString())
							api_AddressId=jsonRes.results.addresses.id[i]
							api_AddressName=jsonRes.results.addresses.addressName[i]
							api_AddressName=removeComma(api_AddressName.toString())
							api_Line1=jsonRes.results.addresses.addressLine1[i]
							api_Line1=removeComma(api_Line1.toString())
							api_Line2=jsonRes.results.addresses.addressLine2[i]
							api_Line2=removeComma(api_Line2.toString())
							api_Line3=jsonRes.results.addresses.addressLine3[i]
							api_Line3=removeComma(api_Line3.toString())
							api_City=jsonRes.results.addresses.city[i]
							api_City=removeComma(api_City.toString())
							api_StateOrProvince=jsonRes.results.addresses.stateOrCounty[i]
							api_StateOrProvince=removeComma(api_StateOrProvince.toString())
							api_Country=jsonRes.results.addresses.country[i]
							api_Country=removeComma(api_Country.toString())
							api_Postcode=jsonRes.results.addresses.postCode[i]
							api_Postcode=removeComma(api_Postcode.toString())
		
							log.info "API Response is received as =>"+key+","+BrokerId+","+api_PartyId+","+api_Name+","+api_Position+","+api_ContactName+","+api_EmailAddress+","+api_AddressId+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode							
							arrCellVal=[key,BrokerId,api_PartyId,api_Name,api_Position,api_ContactName,api_EmailAddress,api_AddressId,api_AddressName,api_Line1,api_Line2,api_Line3,api_City,api_StateOrProvince,api_Country,api_Postcode];
							RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
							counter++
						}
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
					oldBrokerId = BrokerId
			 	}
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc="Compares API data for Broker's contact as per Broker Id with UTOM Database data"
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}</script></con:config></con:testStep><con:properties><con:property><con:name>brokerId</con:name><con:value>1217</con:value></con:property></con:properties></con:testCase><con:testCase id="a61fab81-085f-42f1-91cc-10ffbf71f2a3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_BrokerByBrokerIdByContactsByContactId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="BrkByBrkIdByContactsByContactId" id="e786f7a7-1449-443b-9c2b-264fea1f565c"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/brokers/${#TestCase#brokerId}/contacts/${#TestCase#contactId}" methodName="BrokerByBrokerIdByContactsByContactId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BrkByBrkIdByContactsByContactId" id="9b769e3f-6af5-406d-b5bf-9681caa6ae7d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/brokers/1289/contacts/112485</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="BrokerByBrokerIdByContactByContactId" id="f5864b6d-1605-4479-971a-ee9358e54307"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList<String> brkIdList = new ArrayList<>();
ArrayList<String> contactIdList = new ArrayList<>();

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_BrokerByBrokerIdByContactsByContactId"))
		tcModuleName="BrokerContactByContyactId"
		
	if(tcModuleName.toString().equals("BrokerContactByContyactId"))
	{
		log.info "Test Execution started for getting Broker's Contact Details as per Broker Id and Contact Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Key","BrokerId","PartyId","OrganisationName","Position","ContactName","EmailAddress","AddressId","AddressName","Line1","Line2","Line3","City","StateOrProvince","Country","Postcode","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
			SELECT 
			DISTINCT
			TOP 100
			B.Id as BrokerId, P.Id as Party_Id, P.Salutation, P.OrganisationName, P.Position, CT.Name as ContactName,  P.EmailAddress,  A.Id as AddressId,
			A.Name as AddressName, A.Line1, A.Line2, A.Line3, A.City, A.StateOrProvince, C.Name as Country, A.Postcode, B.Reference as BrokerReference
			from Broker B 
			left Join Party P on P.Account_Id=B.Party_Id 
			left join Address A on A.Party_Id = P.Id 
			left join ref_Country C on C.Id = A.Country_Id 
			left join ref_ContactType CT on CT.Id= P.ContactType_Id
			where p.discriminator='Contact'
			order by 1 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_BrokerId=row.BrokerId
				brkIdList.add(sql_BrokerId)
				sql_Party_Id=row.Party_Id
				contactIdList.add(sql_Party_Id)
				key=sql_BrokerId+"_"+sql_Party_Id
				sql_OrganisationName=row.OrganisationName
				sql_Salutation=row.Salutation
				if(!sql_Salutation.toString().equals("null"))
					sql_Name=sql_Salutation+" "+sql_OrganisationName
				else
					sql_Name=" "+sql_OrganisationName
				sql_Name=removeComma(sql_Name.toString())
				sql_Position=row.Position
				sql_Position=removeComma(sql_Position.toString())
				sql_ContactName=row.ContactName
				sql_ContactName=removeComma(sql_ContactName.toString())
				sql_EmailAddress=row.EmailAddress
				sql_AddressId=row.AddressId
				sql_AddressName=row.AddressName
				sql_AddressName=removeComma(sql_AddressName.toString())
				sql_Line1=row.Line1
				sql_Line1=removeComma(sql_Line1.toString())
				sql_Line2=row.Line2
				sql_Line2=removeComma(sql_Line2.toString())
				sql_Line3=row.Line3
				sql_Line3=removeComma(sql_Line3.toString())
				sql_City=row.City
				sql_City=removeComma(sql_City.toString())				
				sql_StateOrProvince=row.StateOrProvince
				sql_StateOrProvince=removeComma(sql_StateOrProvince.toString())
				sql_Country=row.Country
				sql_Country=removeComma(sql_Country.toString())
				sql_PostCode=row.Postcode
				sql_PostCode=removeComma(sql_PostCode.toString())

				log.info "SQL Response is received as =>"+key+","+sql_BrokerId+","+sql_Party_Id+","+sql_Name+","+sql_Position+","+sql_ContactName+","+sql_EmailAddress+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_PostCode
				arrCellVal=[key, sql_BrokerId,sql_Party_Id,sql_Name,sql_Position,sql_ContactName,sql_EmailAddress,sql_AddressId,sql_AddressName,sql_Line1,sql_Line2,sql_Line3,sql_City,sql_StateOrProvince,sql_Country,sql_PostCode];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
				
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldBrokerId=00

			for (int j = 0; j < brkIdList.size(); j++)
			 {
			 	int BrokerId=brkIdList.get(j)
			 	int ContactId=contactIdList.get(j)
			 	log.info "Getting API response for Broker Id=>"+BrokerId
				 	
				testRunner.testCase.setPropertyValue('brokerId',BrokerId.toString())
				testRunner.testCase.setPropertyValue('contactId',ContactId.toString())
					
				testRunner.testCase.setPropertyValue('token',token)
				testRunner.runTestStepByName('BrkByBrkIdByContactsByContactId')
				String req='${BrkByBrkIdByContactsByContactId#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
		
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["BrkByBrkIdByContactsByContactId"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					
				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)
					
					total_size++
					
					api_PartyId=jsonRes.id
					key=BrokerId+"_"+api_PartyId
					api_Name=jsonRes.name
					api_Name=removeComma(api_Name.toString())
					api_Position=jsonRes.position
					api_Position=removeComma(api_Position.toString())
					api_ContactName=jsonRes.contactTypeName
					api_ContactName=removeComma(api_ContactName.toString())
					api_EmailAddress=jsonRes.emailAddress
					api_EmailAddress=removeComma(api_EmailAddress.toString())
					api_AddressId=jsonRes.addresses.id
					api_AddressName=jsonRes.addresses.addressName
					api_AddressName=removeComma(api_AddressName.toString())
					api_Line1=jsonRes.addresses.addressLine1
					api_Line1=removeComma(api_Line1.toString())
					api_Line2=jsonRes.addresses.addressLine2
					api_Line2=removeComma(api_Line2.toString())
					api_Line3=jsonRes.addresses.addressLine3
					api_Line3=removeComma(api_Line3.toString())
					api_City=jsonRes.addresses.city
					api_City=removeComma(api_City.toString())
					api_StateOrProvince=jsonRes.addresses.stateOrCounty
					api_StateOrProvince=removeComma(api_StateOrProvince.toString())
					api_Country=jsonRes.addresses.country
					api_Country=removeComma(api_Country.toString())
					api_Postcode=jsonRes.addresses.postCode
					api_Postcode=removeComma(api_Postcode.toString())
					
					log.info "API Response is received as =>"+key+","+BrokerId+","+api_PartyId+","+api_Name+","+api_Position+","+api_ContactName+","+api_EmailAddress+","+api_AddressId+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode							
					arrCellVal=[key,BrokerId,api_PartyId,api_Name,api_Position,api_ContactName,api_EmailAddress,api_AddressId,api_AddressName,api_Line1,api_Line2,api_Line3,api_City,api_StateOrProvince,api_Country,api_Postcode];
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					counter++
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc="Compares API data for Broker's contact as per Broker Id and Contact Id with UTOM Database data"
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>brokerId</con:name><con:value>300</con:value></con:property><con:property><con:name>contactId</con:name><con:value>112282</con:value></con:property></con:properties></con:testCase><con:testCase id="1df73af8-7c37-4408-bc50-ced437d15bee" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_MembersByMemberId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="MemByMemId" id="a367ef35-29a1-4f97-9409-38b1900806bd"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/members/${#TestCase#memberId}" methodName="MembersByMemberId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="MemByMemId" id="fe42cb94-53c5-4a23-a891-cb7ad257620c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="MembersByMemberId" id="48461520-507e-4e46-a0f5-c75ed8625091"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList&lt;String> memberIdList = new ArrayList&lt;>();

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_MembersByMemberId"))
		tcModuleName="MembersByMemberId"
		
	if(tcModuleName.toString().equals("MembersByMemberId"))
	{
		log.info "Test Execution started for getting Member Details as per Member Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			//"Domicile",
			arrOutputHeader = ["Id","Reference","Party_Id","CrmIdentifier","IsOrganisation","OrganisationName","Salutation","FirstName","MiddleName","LastName","Name","SearchName","EmailAddress","Telephone","Fax","AddressID","AddressName","AddressLine1","AddressLine2","AddressLine3","City","StateOrProvince","Country","Postcode","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
			SELECT
			TOP 100
			MA.Id, MA.Reference, C.ShortCode as Domicile, MA.Party_Id, P.CrmIdentifier, 
			case when P.IsOrganisation=1 then 'true' else 'false' end as IsOrganisation,
			P.OrganisationName, P.Salutation, P.FirstName, P.MiddleName, P.LastName,
			P.OrganisationName as Name, P.OrganisationName as SearchName, P.EmailAddress, 
			P.Telephone, P.Fax, A.Id as AddressID, A.Name as AddressName, a.Line1 as AddressLine1, a.Line2 as AddressLine2,A.Line3 as AddressLine3, 
			A.City, A.StateOrProvince, C.Name as Country, A.Postcode 
			from MemberAssured MA 
			join Party P on P.Id=MA.Party_Id 
			join Address A on A.Party_Id=P.Id 
			join ref_Country C on C.Id=A.Country_Id 
			--where MA.Id=47511
			order by 1 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_Id=row.Id
				log.info "Getting API response for Member Id=>"+sql_Id
				memberIdList.add(sql_Id)
				sql_Reference=row.Reference
				sql_Reference=removeComma(sql_Reference.toString())
				sql_Domicile=row.Domicile
				sql_Party_Id=row.Party_Id
				sql_CrmIdentifier=row.CrmIdentifier
				if(sql_CrmIdentifier!=null)	
						sql_CrmIdentifier=sql_CrmIdentifier.toUpperCase();
				sql_IsOrganisation=row.IsOrganisation
				if(sql_IsOrganisation!=null)	
						sql_IsOrganisation=sql_IsOrganisation.toString()toUpperCase();
				sql_OrganisationName=row.OrganisationName
				sql_Salutation=row.Salutation
				sql_FirstName=row.FirstName
				sql_MiddleName=row.MiddleName
				sql_LastName=row.LastName
				sql_Name=row.Name
				sql_SearchName=row.SearchName
				sql_EmailAddress=row.EmailAddress
				sql_Telephone=row.Telephone
				sql_Fax=row.Fax
				sql_AddressID=row.AddressID
				sql_AddressName=row.AddressName
				sql_AddressLine1=row.AddressLine1
				sql_AddressLine2=row.AddressLine2
				sql_AddressLine3=row.AddressLine3
				sql_City=row.City
				sql_StateOrProvince=row.StateOrProvince
				sql_Country=row.Country
				sql_Postcode=row.Postcode

				log.info "SQL Response is received as =>"+sql_Id+","+sql_Reference+","+sql_Domicile+","+sql_Party_Id+","+sql_CrmIdentifier+","+sql_IsOrganisation+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressID+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode
				//sql_Domicile,
				arrCellVal=[sql_Id,sql_Reference,sql_Party_Id,sql_CrmIdentifier,sql_IsOrganisation,sql_OrganisationName,sql_Salutation,sql_FirstName,sql_MiddleName,sql_LastName,sql_Name,sql_SearchName,sql_EmailAddress,sql_Telephone,sql_Fax,sql_AddressID,sql_AddressName,sql_AddressLine1,sql_AddressLine2,sql_AddressLine3,sql_City,sql_StateOrProvince,sql_Country,sql_Postcode];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start

			for (int j = 0; j &lt; memberIdList.size(); j++)
			 {
			 	memberId=memberIdList.get(j)
			 	log.info "Getting API response for Member Id=>"+memberId
			 	
			 	testRunner.testCase.setPropertyValue('memberId',memberId.toString())
				
				testRunner.testCase.setPropertyValue('token',token)
				testRunner.runTestStepByName('MemByMemId')
				String req='${MemByMemId#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
	
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["MemByMemId"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				
				log.info "Original API response is=>"+response
				log.info "HTTP Status Code received as=>"+httpStatusCode
				
				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)
					
					api_MemberId=jsonRes.id	
					api_Reference=jsonRes.reference
					api_Reference=removeComma(api_Reference.toString())
					api_Domicile=jsonRes.domicile	
					api_Party_Id=jsonRes.party.id	
					api_CrmIdentifier=jsonRes.party.crmIdentifier	
					if(api_CrmIdentifier!=null)	
						api_CrmIdentifier=api_CrmIdentifier.toUpperCase();
					api_IsOrganisation=jsonRes.party.isOrganisation	
					if(api_IsOrganisation!=null)	
						api_IsOrganisation=api_IsOrganisation.toString().toUpperCase();
					api_OrganisationName=jsonRes.party.organisationName	
					api_Salutation=jsonRes.party.salutation	
					api_FirstName=jsonRes.party.firstName	
					api_MiddleName=jsonRes.party.middleName	
					api_LastName=jsonRes.party.lastName	
					api_Name=jsonRes.party.name	
					api_SearchName=jsonRes.party.searchName	
					api_EmailAddress=jsonRes.party.emailAddress	
					api_Telephone=jsonRes.party.telephone	
					api_Fax=jsonRes.party.fax	
					api_AddressId=jsonRes.party.addresses.id	
					api_AddressName=jsonRes.party.addresses.addressName	
					api_Line1=jsonRes.party.addresses.addressLine1	
					api_Line2=jsonRes.party.addresses.addressLine2	
					api_Line3=jsonRes.party.addresses.addressLine3	
					api_City=jsonRes.party.addresses.city	
					api_StateOrProvince=jsonRes.party.addresses.stateOrCounty	
					api_Country=jsonRes.party.addresses.country	
					api_Postcode=jsonRes.party.addresses.postCode	

	
						log.info "API Response is received as =>"+api_MemberId+","+api_Reference+","+api_Domicile+","+api_Party_Id+","+api_CrmIdentifier+","+api_IsOrganisation+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode
						//api_Domicile,
						arrCellVal=[api_MemberId,api_Reference,api_Party_Id,api_CrmIdentifier,api_IsOrganisation,api_OrganisationName,api_Salutation,api_FirstName,api_MiddleName,api_LastName,api_Name,api_SearchName,api_EmailAddress,api_Telephone,api_Fax,api_AddressId,api_AddressName,api_Line1,api_Line2,api_Line3,api_City,api_StateOrProvince,api_Country,api_Postcode];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++
					//}
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}	
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Member Details as per Member Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}</script></con:config></con:testStep><con:properties><con:property><con:name>memberId</con:name><con:value>46162</con:value></con:property></con:properties></con:testCase><con:testCase id="fc48c97d-5e71-4d2d-8403-9942d277292a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_MembersByMemberReference" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="MemByMemReference" id="7c99c12a-128f-46ad-bccf-b19d25057fd6"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/members/" methodName="MembersByMemberReference" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="MemByMemReference" id="345d0bd1-e414-4f79-ae68-8c25ea7c0739" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/members/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="reference" value="${#TestCase#MemberReference}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>reference</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="MemberByMemberReference" id="e84b5c2f-080f-4ccf-935c-b78379654088"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList&lt;String> memberReferenceList = new ArrayList&lt;>();

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_MembersByMemberReference"))
		tcModuleName="MembersByMemberReference"
		
	if(tcModuleName.toString().equals("MembersByMemberReference"))
	{
		log.info "Test Execution started for getting Member Details as per Member Reference from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			//"Domicile",
			arrOutputHeader = ["Id","Reference","Party_Id","CrmIdentifier","IsOrganisation","OrganisationName","Salutation","FirstName","MiddleName","LastName","Name","SearchName","EmailAddress","Telephone","Fax","AddressID","AddressName","AddressLine1","AddressLine2","AddressLine3","City","StateOrProvince","Country","Postcode","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
			SELECT
			TOP 100
			MA.Id, MA.Reference, C.ShortCode as Domicile, MA.Party_Id, P.CrmIdentifier, 
			case when P.IsOrganisation=1 then 'true' else 'false' end as IsOrganisation,
			P.OrganisationName, P.Salutation, P.FirstName, P.MiddleName, P.LastName,
			P.OrganisationName as Name, P.OrganisationName as SearchName, P.EmailAddress, 
			P.Telephone, P.Fax, A.Id as AddressID, A.Name as AddressName, a.Line1 as AddressLine1, a.Line2 as AddressLine2,A.Line3 as AddressLine3, 
			A.City, A.StateOrProvince, C.Name as Country, A.Postcode 
			from MemberAssured MA 
			join Party P on P.Id=MA.Party_Id 
			join Address A on A.Party_Id=P.Id 
			join ref_Country C on C.Id=A.Country_Id 
			--where MA.Id=47511
			order by 2 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_Id=row.Id
				log.info "Getting API response for Member Id=>"+sql_Id
				sql_Id=removeComma(sql_Id.toString())
				sql_Reference=row.Reference
				memberReferenceList.add(sql_Reference)
				sql_Reference=removeComma(sql_Reference.toString())
				sql_Domicile=row.Domicile
				sql_Domicile=removeComma(sql_Domicile.toString())
				sql_Party_Id=row.Party_Id
				sql_Party_Id=removeComma(sql_Party_Id.toString())
				sql_CrmIdentifier=row.CrmIdentifier
				sql_CrmIdentifier=removeComma(sql_CrmIdentifier.toString())
				if(sql_CrmIdentifier!=null)	
						sql_CrmIdentifier=sql_CrmIdentifier.toString().toUpperCase();
				sql_IsOrganisation=row.IsOrganisation
				if(sql_IsOrganisation!=null)	
						sql_IsOrganisation=sql_IsOrganisation.toString()toUpperCase();
				sql_IsOrganisation=removeComma(sql_IsOrganisation.toString())
				sql_OrganisationName=row.OrganisationName
				sql_OrganisationName=removeComma(sql_OrganisationName.toString())
				sql_Salutation=row.Salutation
				sql_Salutation=removeComma(sql_Salutation.toString())
				sql_FirstName=row.FirstName
				sql_FirstName=removeComma(sql_FirstName.toString())
				sql_MiddleName=row.MiddleName
				sql_MiddleName=removeComma(sql_MiddleName.toString())
				sql_LastName=row.LastName
				sql_LastName=removeComma(sql_LastName.toString())
				sql_Name=row.Name
				sql_Name=removeComma(sql_Name.toString())
				sql_SearchName=row.SearchName
				sql_SearchName=removeComma(sql_SearchName.toString())
				sql_EmailAddress=row.EmailAddress
				sql_EmailAddress=removeComma(sql_EmailAddress.toString())
				sql_Telephone=row.Telephone
				sql_Telephone=removeComma(sql_Telephone.toString())
				sql_Fax=row.Fax
				sql_Fax=removeComma(sql_Fax.toString())
				sql_AddressID=row.AddressID
				sql_AddressID=removeComma(sql_AddressID.toString())
				sql_AddressName=row.AddressName
				sql_AddressName=removeComma(sql_AddressName.toString())
				sql_AddressLine1=row.AddressLine1
				sql_AddressLine1=removeComma(sql_AddressLine1.toString())
				sql_AddressLine2=row.AddressLine2
				sql_AddressLine2=removeComma(sql_AddressLine2.toString())
				sql_AddressLine3=row.AddressLine3
				sql_AddressLine3=removeComma(sql_AddressLine3.toString())
				sql_City=row.City
				sql_City=removeComma(sql_City.toString())
				sql_StateOrProvince=row.StateOrProvince
				sql_StateOrProvince=removeComma(sql_StateOrProvince.toString())
				sql_Country=row.Country
				sql_Country=removeComma(sql_Country.toString())
				sql_Postcode=row.Postcode
				sql_Postcode=removeComma(sql_Postcode.toString())

				log.info "SQL Response is received as =>"+sql_Id+","+sql_Reference+","+sql_Domicile+","+sql_Party_Id+","+sql_CrmIdentifier+","+sql_IsOrganisation+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressID+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode
				//sql_Domicile,
				arrCellVal=[sql_Id,sql_Reference,sql_Party_Id,sql_CrmIdentifier,sql_IsOrganisation,sql_OrganisationName,sql_Salutation,sql_FirstName,sql_MiddleName,sql_LastName,sql_Name,sql_SearchName,sql_EmailAddress,sql_Telephone,sql_Fax,sql_AddressID,sql_AddressName,sql_AddressLine1,sql_AddressLine2,sql_AddressLine3,sql_City,sql_StateOrProvince,sql_Country,sql_Postcode];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start

			for (int j = 0; j &lt; memberReferenceList.size(); j++)
			 {
			 	memberReference=memberReferenceList.get(j)
			 	log.info "Getting API response for Member Reference=>"+memberReference
			 	
			 	testRunner.testCase.setPropertyValue('memberReference',memberReference.toString())
				
				testRunner.testCase.setPropertyValue('token',token)
				testRunner.runTestStepByName('MemByMemReference')
				String req='${MemByMemReference#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
	
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["MemByMemReference"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				
				log.info "Original API response is=>"+response
				log.info "HTTP Status Code received as=>"+httpStatusCode
				
				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)
					
					api_MemberId=jsonRes.results.id
					api_MemberId=removeComma(api_MemberId.toString())
					api_Reference=jsonRes.results.reference
					api_Reference=removeComma(api_Reference.toString())
					api_Domicile=jsonRes.results.domicile
					api_Domicile=removeComma(api_Domicile.toString())
					api_Party_Id=jsonRes.results.party.id	
					api_Party_Id=removeComma(api_Party_Id.toString())
					api_CrmIdentifier=jsonRes.results.party.crmIdentifier	
					api_CrmIdentifier=removeComma(api_CrmIdentifier.toString())
					if(api_CrmIdentifier!=null)
						api_CrmIdentifier=api_CrmIdentifier.toString().toUpperCase()
					api_IsOrganisation=jsonRes.results.party.isOrganisation	
					api_IsOrganisation=removeComma(api_IsOrganisation.toString())
					if(api_IsOrganisation!=null)	
						api_IsOrganisation=api_IsOrganisation.toString().toUpperCase();
					api_OrganisationName=jsonRes.results.party.organisationName	
					api_OrganisationName=removeComma(api_OrganisationName.toString())
					api_Salutation=jsonRes.results.party.salutation	
					api_Salutation=removeComma(api_Salutation.toString())
					api_FirstName=jsonRes.results.party.firstName	
					api_FirstName=removeComma(api_FirstName.toString())
					api_MiddleName=jsonRes.results.party.middleName	
					api_MiddleName=removeComma(api_MiddleName.toString())
					api_LastName=jsonRes.results.party.lastName	
					api_LastName=removeComma(api_LastName.toString())
					api_Name=jsonRes.results.party.name	
					api_Name=removeComma(api_Name.toString())
					api_SearchName=jsonRes.results.party.searchName	
					api_SearchName=removeComma(api_SearchName.toString())
					api_EmailAddress=jsonRes.results.party.emailAddress	
					api_EmailAddress=removeComma(api_EmailAddress.toString())
					api_Telephone=jsonRes.results.party.telephone	
					api_Telephone=removeComma(api_Telephone.toString())
					api_Fax=jsonRes.results.party.fax	
					api_Fax=removeComma(api_Fax.toString())
					api_AddressId=jsonRes.results.party.addresses.id	
					api_AddressId=removeComma(api_AddressId.toString())
					api_AddressName=jsonRes.results.party.addresses.addressName
					api_AddressName=removeComma(api_AddressName.toString())
					api_Line1=jsonRes.results.party.addresses.addressLine1
					api_Line1=removeComma(api_Line1.toString())	
					api_Line2=jsonRes.results.party.addresses.addressLine2
					api_Line2=removeComma(api_Line2.toString())	
					api_Line3=jsonRes.results.party.addresses.addressLine3
					api_Line3=removeComma(api_Line3.toString())	
					api_City=jsonRes.results.party.addresses.city	
					api_City=removeComma(api_City.toString())
					api_StateOrProvince=jsonRes.results.party.addresses.stateOrCounty
					api_StateOrProvince=removeComma(api_StateOrProvince.toString())
					api_Country=jsonRes.results.party.addresses.country	
					api_Country=removeComma(api_Country.toString())
					api_Postcode=jsonRes.results.party.addresses.postCode
					api_Postcode=removeComma(api_Postcode.toString())	

	
						log.info "API Response is received as =>"+api_MemberId+","+api_Reference+","+api_Domicile+","+api_Party_Id+","+api_CrmIdentifier+","+api_IsOrganisation+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode
						//api_Domicile,
						arrCellVal=[api_MemberId,api_Reference,api_Party_Id,api_CrmIdentifier,api_IsOrganisation,api_OrganisationName,api_Salutation,api_FirstName,api_MiddleName,api_LastName,api_Name,api_SearchName,api_EmailAddress,api_Telephone,api_Fax,api_AddressId,api_AddressName,api_Line1,api_Line2,api_Line3,api_City,api_StateOrProvince,api_Country,api_Postcode];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++
					//}
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}	
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Member Details as per Member Reference with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}</script></con:config></con:testStep><con:properties><con:property><con:name>memberReference</con:name><con:value>74571</con:value></con:property></con:properties></con:testCase><con:testCase id="3c59a887-31ca-42a9-b69c-4f8975c5166d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ReferenceByCountries" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="RefByCountries" id="ac20dfb2-5f9a-4d48-9b73-201842fc7b92"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/reference/countries" methodName="ReferenceByCountries" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByCountries" id="8e89cab6-7a23-4afb-a54f-77adf9ff3fde" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/reference/countries</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceByCountries" id="aad35f93-df24-4184-9b5b-7143679f109c"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList&lt;String> arrayList = new ArrayList&lt;>();

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ReferenceByCountries"))
		tcModuleName="ReferenceByCountry"
		
	if(tcModuleName.toString().equals("ReferenceByCountry"))
	{
		log.info "Test Execution started for getting Country Details from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["CountryId","CountryShortCode","CountryName","CountryDescription","CountryIptTaxMap","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
			Select 
			Id as CountryId, 
			ShortCode as CountryShortCode, 
			Name as CountryName, 
			Description as CountryDescription, 
			IptTaxMap 
			from ref_Country
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_CountryId=row.CountryId
				arrayList.add(sql_CountryId);
				sql_CountryShortCode=row.CountryShortCode
				sql_CountryName=row.CountryName
				sql_CountryName=removeComma(sql_CountryName.toString())
				sql_CountryDescription=row.CountryDescription
				sql_CountryDescription=removeComma(sql_CountryDescription.toString())
				sql_CountryIptTaxMap=row.IptTaxMap

				log.info "SQL Response is received as =>"+sql_CountryId+","+sql_CountryShortCode+","+sql_CountryName+","+sql_CountryDescription+","+sql_CountryIptTaxMap
				arrCellVal=[sql_CountryId,sql_CountryShortCode,sql_CountryName,sql_CountryDescription,sql_CountryIptTaxMap];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
				
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
				
				testRunner.testCase.setPropertyValue('token',token)
				testRunner.runTestStepByName('RefByCountries')
				String req='${RefByCountries#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
	
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["RefByCountries"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				
				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)
					int jsonRecordCount = jsonRes.totalRecords
					size=jsonRes.totalRecords.toInteger()
					total_size+=size
					for(int i=0;i&lt;jsonRecordCount;i++)
					{
						log.info "Getting API response for Country Id=>"+jsonRes.results.id[i]
						api_CountryId=jsonRes.results.id[i]
						api_CountryShortCode=jsonRes.results.shortCode[i]
						api_CountryName=jsonRes.results.name[i]
						api_CountryName=removeComma(api_CountryName.toString())
						api_CountryDescription=jsonRes.results.description[i]
						api_CountryDescription=removeComma(api_CountryDescription.toString())
						api_CountryIptTaxMap=jsonRes.results.iptTaxMap[i]
	
						log.info "API Response is received as =>"+api_CountryId+","+api_CountryShortCode+","+api_CountryName+","+api_CountryDescription+","+api_CountryIptTaxMap	
						arrCellVal=[api_CountryId,api_CountryShortCode,api_CountryName,api_CountryDescription,api_CountryIptTaxMap];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
					}
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}	
			 //}

			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Country Details with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0236baa2-57ea-43f4-ac13-3c3dc9511dc0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ReferenceByDocumentStatuses" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="RefByDocumentStatuses" id="af08a6b4-14f1-42a0-a62f-851cc3967972"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/reference/documentStatuses" methodName="ReferenceByDocumentStatuses" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByDocumentStatuses" id="c94df1c1-fb4f-43a8-85bd-06d3351743b7" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/reference/documentStatuses</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferencesByDocumentStatuses" id="9df5a248-8524-474e-b05a-05facdf9c76e"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList&lt;String> arrayList = new ArrayList&lt;>();

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ReferenceByDocumentStatuses"))
		tcModuleName="ReferenceByDocStatus"
		
	if(tcModuleName.toString().equals("ReferenceByDocStatus"))
	{
		log.info "Test Execution started for getting Document Status from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["DocumentId","DocumentStatusName","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			
			
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			String sqlstmt=
			"""
			USE TOM
			SELECT 
			Id as DocumentStatusId, Name as DocumentStatusName
			from ref_DocumentStatus
			"""
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_DocumentStatusId=row.DocumentStatusId
				sql_DocumentStatusName=row.DocumentStatusName

				log.info "SQL Response is received as =>"+sql_DocumentStatusId+","+sql_DocumentStatusName
				arrCellVal=[sql_DocumentStatusId,sql_DocumentStatusName];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
				
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
				
				testRunner.testCase.setPropertyValue('token',token)
				testRunner.runTestStepByName('RefByDocumentStatuses')
				String req='${RefByDocumentStatuses#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
	
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["RefByDocumentStatuses"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				
				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)
					int jsonRecordCount = jsonRes.totalRecords
					size=jsonRes.totalRecords.toInteger()
					total_size+=size
					for(int i=0;i&lt;jsonRecordCount;i++)
					{
						log.info "Getting API response for Document Status Id=>"+jsonRes.results.id[i]
						api_DocumentStatusId=jsonRes.results.id[i]
						api_DocumentStatusName=jsonRes.results.documentStatusName[i]
	
						log.info "API Response is received as =>"+api_DocumentStatusId+","+api_DocumentStatusName
						arrCellVal=[api_DocumentStatusId,api_DocumentStatusName];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
					}
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}	
			 //}

			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Document Status with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6c134ceb-9d81-4c5f-807b-9a8e7ba77dad" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ReferenceByDocumentTypes" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="RefByDocumentTypes" id="90bcaf3d-79b8-4873-8108-44fcbb4017ca"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/reference/documentTypes" methodName="ReferenceByDocumentTypes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByDocumentTypes" id="0751a772-7e09-47fe-b3a9-0f2e71e14364" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/reference/documentTypes</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceByDocumentTypes" id="3a375e9a-6cfd-438b-b6fa-d1fc977fb7d9"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList&lt;String> arrayList = new ArrayList&lt;>();

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ReferenceByDocumentTypes"))
		tcModuleName="ReferenceByDocTypes"
		
	if(tcModuleName.toString().equals("ReferenceByDocTypes"))
	{
		log.info "Test Execution started for getting Document Types from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["DocumentId","DocumentStatusName","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			String sqlstmt=
			"""
			USE TOM
			Select 
			Id as DocumentTypeId, Name as DocumentTypeName
			from ref_DocumentType
			"""
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_DocumentTypeId=row.DocumentTypeId
				sql_DocumentTypeName=row.DocumentTypeName
				
				log.info "SQL Response received as :"+sql_DocumentTypeId+","+sql_DocumentTypeName
				arrCellVal=[sql_DocumentTypeId,sql_DocumentTypeName];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
				
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
				
				testRunner.testCase.setPropertyValue('token',token)
				testRunner.runTestStepByName('RefByDocumentTypes')
				String req='${RefByDocumentTypes#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
	
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["RefByDocumentTypes"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				
				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)
					int jsonRecordCount = jsonRes.totalRecords
					size=jsonRes.totalRecords.toInteger()
					total_size+=size
					for(int i=0;i&lt;jsonRecordCount;i++)
					{
						log.info "Getting API response for Document Type Id=>"+jsonRes.results.id[i]
						api_DocumentTypeId=jsonRes.results.id[i]
						api_DocumentTypeName=jsonRes.results.documentTypeName[i]
	
						log.info "API Response is received as =>"+api_DocumentTypeId+","+api_DocumentTypeName
						arrCellVal=[api_DocumentTypeId,api_DocumentTypeName];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
					}
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}	
			 //}

			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Document Types with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1e050204-b39a-476e-a3fe-97d33357ad24" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ReferenceRiskSubTypes" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="RefByRiskSubTypes" id="114b44e8-b8db-46fa-adce-0cac59e06d2f"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/reference/RiskSubTypes" methodName="ReferenceRiskSubTypes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByRiskSubTypes" id="847a52cc-0285-4c63-8cf5-3ac38eb03fc0" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/reference/RiskSubTypes</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceRiskSubTypes" id="7c351518-e1f7-40bb-9454-4f019cb0b69f"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList&lt;String> arrayList = new ArrayList&lt;>();

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ReferenceRiskSubTypes"))
		tcModuleName="ReferenceByRiskSubTypes"
		
	if(tcModuleName.toString().equals("ReferenceByRiskSubTypes"))
	{
		log.info "Test Execution started for getting Risk Sub Types from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["DocumentId","DocumentStatusName","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			String sqlstmt=
			"""
			USE TOM
			Select 
			Id as RiskId, Name as RiskName, ShortCode as RiskShortCode 
			from ref_RiskSubType
			"""
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_RiskId=row.RiskId
				sql_RiskId=removeComma(sql_RiskId.toString())
				sql_RiskName=row.RiskName
				sql_RiskShortCode=row.RiskShortCode
				
				log.info "SQL Response received as :"+sql_RiskId+","+sql_RiskName+","+sql_RiskShortCode
				arrCellVal=[sql_RiskId,sql_RiskName,sql_RiskShortCode];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
				
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
				
				testRunner.testCase.setPropertyValue('token',token)
				testRunner.runTestStepByName('RefByRiskSubTypes')
				String req='${RefByRiskSubTypes#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
	
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["RefByRiskSubTypes"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				
				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)
					int jsonRecordCount = jsonRes.totalRecords
					size=jsonRes.totalRecords.toInteger()
					total_size+=size
					for(int i=0;i&lt;jsonRecordCount;i++)
					{
						log.info "Getting API response for Risk Sub Type Id=>"+jsonRes.results.id[i]
						api_RiskId=jsonRes.results.id[i]
						api_RiskId=removeComma(api_RiskId.toString())
						api_RiskName=jsonRes.results.name[i]
						api_RiskShortCode=jsonRes.results.shortCode[i]
	
						log.info "API Response is received as =>"+api_RiskId+","+api_RiskName+","+api_RiskShortCode
						arrCellVal=[api_RiskId,api_RiskName,api_RiskShortCode];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
					}
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}	
			 //}

			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Risk Sub Types with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6b6bd2af-8cca-4005-b1ef-67ff6a05597d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_RiskSelectionByRiskDetailByApplicationRiskId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="RiskSelectionByRiskDetailByAppRiskId" id="032c7ba6-fb07-4390-b8ff-169d1df487ec"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/UtomApi/riskselection/riskdetail/${#TestCase#appRiskId}" methodName="RiskSelectionByRiskDetailByApplicationRiskId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RiskSelectionByRiskDetailByAppRiskId" id="4102671e-1d82-4b51-84f0-20a1980d22f6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/UtomApi/riskselection/riskdetail/179096</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="RiskSelectionByRiskDetailByApplicationRiskId" id="91314ce5-484d-4785-8418-77714282a1ef"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import java.text.SimpleDateFormat

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList<String> arrayList = new ArrayList<>();

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_RiskSelectionByRiskDetailByApplicationRiskId"))
		tcModuleName="RiskSelectionByRiskDetail"
		
	if(tcModuleName.toString().equals("RiskSelectionByRiskDetail"))
	{
		log.info "Test Execution started for getting Risk Details as per Application Risk Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			//arrOutputHeader = ["Key","ApplicationRiskId","LimitId","CoverShortName","LimitName","CurrencyCode","Amount","isThePrimaryCoverLimit","EffectiveFrom","EffectiveTo","AsPerRules","Template","ProductType","LatestRiskTransactionDate","Branch","TerminatedType","TerminationDate","EnteredDate","EngineHorsePower","TrademarkEngineModelNumber","EngineNo","TenderReferenceList","TenderOutboardReferenceList","MemberPartyId","Status"];
			arrOutputHeader = ["Key","ApplicationRiskId","LimitId","CoverShortName","LimitName","CurrencyCode","Amount","isThePrimaryCoverLimit","EffectiveFrom","EffectiveTo","AsPerRules","Template","ProductType","Branch","TerminatedType","TerminationDate","EnteredDate","EngineHorsePower","TrademarkEngineModelNumber","EngineNo","TenderReferenceList","TenderOutboardReferenceList","MemberPartyId","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
			SELECT
			DISTINCT 
			TOP 10
			ar.Id as ApplicationRiskId,
			lims.Limit_id as LimitId, lims.ShortCode as CoverShortName, lims.Name as LimitName, lims.Currency as CurrencyCode, lims.ValueDecimal as Amount,
			case when tc.IsPrimary = 1 then 'true' when tc.IsPrimary = 0 then 'false' else NULL end as isThePrimaryCoverLimit,
			lims.maxCovStart as EffectiveFrom, lims.CoverEnd as EffectiveTo, Case when ret.Name = 'As Per Rules' then 'TRUE' else 'FALSE' end as AsPerRules,
			T.Name as Template, case when ret.Name = 'Plain Language Wording' and t.name = 'Yacht Liability Insurance' then 'YACHT' else 'P&I' end as
			ProductType, case when ACVRM.ACVRStart = rtra.maxstart then rtra.maxstart else ab.PolicyStart end 
			as LatestRiskTransactionDate,B.ShortCode as Branch,case when ptra.discriminator ='RiskTerminationTransaction' and r.Exited is not null  then 'Risk Termination' 
			when ptra.discriminator ='PolicyTerminationTransaction' then 'Policy Termination'  else null end as TerminatedType,
			case when ptra.discriminator ='RiskTerminationTransaction' and r.Exited is not null then r.Exited
			when ptra.discriminator ='PolicyTerminationTransaction' then ptra.startdate 
			else null end as TerminationDate, R.Entered as EnteredDate, RV.EngineHorsePower, 
			RV.TrademarkEngineModelNumber, RV.NumberOfEngines as EngineNo, RV.TenderSerialNumber as TenderReferenceList, 
			RV.OutboardMotorSerialNumber as TenderOutboardReferenceList, MA.Party_Id as MemberPartyId,
			AB.PolicyEnd
			from ApplicationBase ab
			inner join ApplicationMemberAssured ama on ab.Id = ama.Application_Id
			inner join ApplicationRisk ar on ar.ApplicationMemberAssured_Id = ama.id 
			--and ar.id=179173
			inner join Risk r on r.id = ar.Risk_Id
			inner join RiskVessel RV on RV.Id=R.Id
			inner join MemberAssured MA on Ma.Id=R.MemberAssured_Id
			left join 
			(select tr.policy_id, max(startdate) as maxstart from [transaction] tr where tr.discriminator in ('PermanentRiskChangeTransaction',
			'OperationalVesselChangeTransaction', 'RiskTerminationTransaction', 'TemporaryRiskChangeTransaction','PermanentLayUpVesselChangeTransaction',
			'TemporaryLayUpVesselChangeTransaction') and tr.TransactionStatus_Id = 2 group by tr.policy_id) rtra on rtra.policy_id = ab.id
			inner join ApplicationCover AC on AB.Id = AC.Application_Id
			inner Join TemplateCover TC on AC.TemplateCover_Id = TC.Id
			AND TC.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
			inner Join Cover C on TC.Cover_Id = C.Id
			AND C.Cover_PhysicalDeletionAttemptPrevented = 0
			inner join ApplicationCoverVariation acv on acv.ApplicationCover_Id = ac.id
			inner join (select acvr.CoverVariation_Id, acvr.Risk_id, max(coverstart) as ACVRStart from  ApplicationCoverVariationRisk acvr group by acvr.CoverVariation_Id,  acvr.Risk_id) acvrm on acvrm.CoverVariation_Id = acv.id and acvrm.Risk_Id = ar.Id
			inner join ApplicationCoverVariationLimit acvl on acvl.CoverVariation_Id = acv.id
			inner join ApplicationCoverVariationLimitTagValue acvltv on acvltv.ApplicationCoverVariationLimit_Id = acvl.id
			inner join TemplateCoverLimit tcl on tcl.id = acvl.TemplateCoverLimit_Id
			inner join CoverLimit cl on cl.id = tcl.CoverLimit_Id
			inner join Limit l on l.id = cl.Limit_Id
			inner join ref_Currency rc on rc.id = acvltv.Currency_Id
			inner join Template T on T.Id=TC.Template_Id
			inner join ref_EntryType ret on ret.Id = t.EntryType_Id
			inner join Branch B On B.Id=AB.Branch_Id
			inner join
			(Select 
			TOP 500
			ab.id as applicaton_id, ar.id as ApplicationRisk_id, l.id as Limit_id, c.ShortCode, l.Name, rc.ShortCode as Currency,  acvltv.ValueDecimal,  
			max(acv.ApplicationCoverVariation_EffectiveFrom) as maxCovStart, acv.CoverEnd
			from ApplicationBase ab
			inner join ApplicationMemberAssured ama on ab.Id = ama.Application_Id
			inner join ApplicationRisk ar on ar.ApplicationMemberAssured_Id = ama.id
			inner join ApplicationCover AC on AB.Id = AC.Application_Id
			inner Join TemplateCover TC on AC.TemplateCover_Id = TC.Id and tc.IsMandatory = 1 AND TC.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
			inner Join Cover C on TC.Cover_Id = C.Id AND C.Cover_PhysicalDeletionAttemptPrevented = 0
			inner join ApplicationCoverVariation acv on acv.ApplicationCover_Id = ac.id
			inner join ApplicationCoverVariationLimit acvl on acvl.CoverVariation_Id = acv.id and ACVL.VersionedLinkBase_PhysicalDeletionAttemptPrevented=0
			left join ApplicationCoverVariationLimitTagValue acvltv on acvltv.ApplicationCoverVariationLimit_Id = acvl.id
			left join ref_Currency rc on rc.id = acvltv.Currency_Id -- and rc.id = 72
			inner join TemplateCoverLimit tcl on tcl.id = acvl.TemplateCoverLimit_Id
			inner join CoverLimit cl on cl.id = tcl.CoverLimit_Id
			inner join Limit l on l.id = cl.Limit_Id
			inner join(Select ar.id, min(l.id) as minlid from  ApplicationBase ab
			inner join ApplicationMemberAssured ama on ab.Id = ama.Application_Id
			inner join ApplicationRisk ar on ar.ApplicationMemberAssured_Id = ama.id 
			--and ar.id=179173
			inner join ApplicationCover AC on AB.Id = AC.Application_Id
			inner Join TemplateCover TC on AC.TemplateCover_Id = TC.Id and tc.IsMandatory = 1 AND TC.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
			inner Join Cover C on TC.Cover_Id = C.Id AND C.Cover_PhysicalDeletionAttemptPrevented = 0
			inner join ApplicationCoverVariation acv on acv.ApplicationCover_Id = ac.id
			inner join ApplicationCoverVariationLimit acvl on acvl.CoverVariation_Id = acv.id and ACVL.VersionedLinkBase_PhysicalDeletionAttemptPrevented=0
			left join ApplicationCoverVariationLimitTagValue acvltv on acvltv.ApplicationCoverVariationLimit_Id = acvl.id
			left join ref_Currency rc on rc.id = acvltv.Currency_Id --and rc.id = 72
			inner join TemplateCoverLimit tcl on tcl.id = acvl.TemplateCoverLimit_Id
			inner join CoverLimit cl on cl.id = tcl.CoverLimit_Id
			inner join Limit l on l.id = cl.Limit_Id
			where acv.CoverEnd = ab.PolicyEnd
			group by ar.id) minl on minl.id = ar.id and  minl.minlid = l.id
			group by ab.id, ar.id , l.id , c.ShortCode, l.Name, rc.ShortCode,  acvltv.ValueDecimal, acv.CoverEnd
			order by AR.Id desc) lims on lims.applicaton_id = ab.id and lims.ApplicationRisk_id = ar.Id
			left join (select tr.policy_id, tr.discriminator,  tr.startdate from [transaction] tr where tr.discriminator in
			('PolicyTerminationTransaction', 'RiskTerminationTransaction') ) ptra on ptra.policy_id = ab.id
			where ab.discriminator = 'Policy' and tc.IsPrimary=1 and rc.ShortCode='USD'
			--and AB.PolicyEnd<GETDATE()
			--and AB.PolicyEnd<getDate()
			--and AR.id=179173
			order by AR.Id desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_ApplicationRiskId=row.ApplicationRiskId
				log.info "Getting SQL Response for Application Risk Id=>"+sql_ApplicationRiskId
				arrayList.add(sql_ApplicationRiskId)
				sql_LimitId=row.LimitId
				sql_LimitId=removeComma(sql_LimitId.toString())
				key=sql_ApplicationRiskId+"_"+sql_LimitId
				sql_CoverShortName=row.CoverShortName
				sql_CoverShortName=removeComma(sql_CoverShortName.toString())
				sql_LimitName=row.LimitName
				sql_LimitName=removeComma(sql_LimitName.toString())
				sql_CurrencyCode=row.CurrencyCode
				sql_CurrencyCode=removeComma(sql_CurrencyCode.toString())
				sql_Amount=row.Amount
				sql_Amount=removeComma(sql_Amount.toString())
				sql_Amount=removeDotFromCurrency(sql_Amount.toString())
				sql_isThePrimaryCoverLimit=row.isThePrimaryCoverLimit
				sql_isThePrimaryCoverLimit=removeComma(sql_isThePrimaryCoverLimit.toString())
				
				sql_EffectiveFrom=row.EffectiveFrom
				sql_EffectiveFrom=sql_EffectiveFrom.toString().replace(" ", "T")
				sql_EffectiveFrom=getDate(sql_EffectiveFrom.toString())
				
				sql_EffectiveTo=row.EffectiveTo
				sql_EffectiveTo=sql_EffectiveTo.toString().replace(" ", "T")
				sql_EffectiveTo=getDate(sql_EffectiveTo.toString())
				
				sql_AsPerRules=row.AsPerRules
				sql_Template=row.Template
				sql_ProductType=row.ProductType
				
				sql_LatestRiskTransactionDate=row.LatestRiskTransactionDate
				sql_LatestRiskTransactionDate=sql_LatestRiskTransactionDate.toString().replace(" ", "T")
				sql_LatestRiskTransactionDate=getDate(sql_LatestRiskTransactionDate.toString())
				
				sql_Branch=row.Branch
				sql_TerminatedType=row.TerminatedType
				
				sql_TerminationDate=row.TerminationDate
				sql_TerminationDate=sql_TerminationDate.toString().replace(" ", "T")
				sql_TerminationDate=getDate(sql_TerminationDate.toString())
				
				sql_EnteredDate=row.EnteredDate
				sql_EnteredDate=sql_EnteredDate.toString().replace(" ", "T")
				sql_EnteredDate=getDate(sql_EnteredDate.toString())
				
				sql_EngineHorsePower=row.EngineHorsePower
				sql_TrademarkEngineModelNumber=row.TrademarkEngineModelNumber
				sql_EngineNo=row.EngineNo
				sql_EngineNo=removeComma(sql_EngineNo.toString())
				sql_TenderReferenceList=row.TenderReferenceList
				sql_TenderReferenceList=removeComma(sql_TenderReferenceList.toString())
				sql_TenderOutboardReferenceList=row.TenderOutboardReferenceList
				sql_TenderOutboardReferenceList=removeComma(sql_TenderOutboardReferenceList.toString())
				sql_MemberPartyId=row.MemberPartyId
				sql_PolicyEnd=row.PolicyEnd

				date= new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
				date = new Date()
				getDateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
				String todaysDate=getDateFormat.format(date)
				todaysDate=todaysDate.toString().replace("/","-")
				//log.info "Today's Date is="+todaysDate

				log.info "SQL Response is received as =>"+key+","+sql_ApplicationRiskId+","+sql_LimitId+","+sql_CoverShortName+","+sql_LimitName+","+sql_CurrencyCode+","+sql_Amount+","+sql_isThePrimaryCoverLimit+","+sql_EffectiveFrom+","+sql_EffectiveTo+","+sql_AsPerRules+","+sql_Template+","+sql_ProductType+","+sql_LatestRiskTransactionDate+","+sql_Branch+","+sql_TerminatedType+","+sql_TerminationDate+","+sql_EnteredDate+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+sql_EngineNo+","+sql_TenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_MemberPartyId
				//arrCellVal=[key, sql_ApplicationRiskId,sql_LimitId,sql_CoverShortName,sql_LimitName,sql_CurrencyCode,sql_Amount,sql_isThePrimaryCoverLimit,sql_EffectiveFrom,sql_EffectiveTo,sql_AsPerRules,sql_Template,sql_ProductType,sql_LatestRiskTransactionDate,sql_Branch,sql_TerminatedType,sql_TerminationDate,sql_EnteredDate,sql_EngineHorsePower,sql_TrademarkEngineModelNumber,sql_EngineNo,sql_TenderReferenceList,sql_TenderOutboardReferenceList,sql_MemberPartyId];
				arrCellVal=[key, sql_ApplicationRiskId,sql_LimitId,sql_CoverShortName,sql_LimitName,sql_CurrencyCode,sql_Amount,sql_isThePrimaryCoverLimit,sql_EffectiveFrom,sql_EffectiveTo,sql_AsPerRules,sql_Template,sql_ProductType,sql_Branch,sql_TerminatedType,sql_TerminationDate,sql_EnteredDate,sql_EngineHorsePower,sql_TrademarkEngineModelNumber,sql_EngineNo,sql_TenderReferenceList,sql_TenderOutboardReferenceList,sql_MemberPartyId];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
				
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldAppRiskId=00

			for (int j = 0; j < arrayList.size(); j++)
			 {
			 	int appRiskId=arrayList.get(j)
			 	if(oldAppRiskId == appRiskId)
			 	{
				 	oldAppRiskId = appRiskId
			 	}
			 	else
			 	{
			 		log.info "Getting API response for Application Risk Id=>"+appRiskId
				 	
				 	testRunner.testCase.setPropertyValue('appRiskId',appRiskId.toString())
				 	
					testRunner.testCase.setPropertyValue('token',token)
					testRunner.runTestStepByName('RiskSelectionByRiskDetailByAppRiskId')
					String req='${RiskSelectionByRiskDetailByAppRiskId#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["RiskSelectionByRiskDetailByAppRiskId"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					log.info "Original API response is =>"+response
					log.info "HTTP Status code received as =>"+httpStatusCode
					
					if(httpStatusCode.toString().equals("200"))
					{
						def jsonRes=jsonSlurper.parseText(response)
						api_ApplicationRiskId=jsonRes.id
						api_LimitId=jsonRes.coverLimits.id
						api_LimitId=removeComma(api_LimitId.toString())
						key=api_ApplicationRiskId+"_"+api_LimitId
						api_CoverShortName=jsonRes.coverLimits.coverShortName
						api_CoverShortName=removeComma(api_CoverShortName.toString())
						api_LimitName=jsonRes.coverLimits.limitName
						api_LimitName=removeComma(api_LimitName.toString())
						api_CurrencyCode=jsonRes.coverLimits.currencyCode
						api_CurrencyCode=removeComma(api_CurrencyCode.toString())
						api_Amount=jsonRes.coverLimits.amount
						api_Amount=removeComma(api_Amount.toString())
						api_Amount=removeDotFromCurrency(api_Amount.toString())
						api_isThePrimaryCoverLimit=jsonRes.coverLimits.isThePrimaryCoverLimit
						api_isThePrimaryCoverLimit=removeComma(api_isThePrimaryCoverLimit.toString())
						
						api_EffectiveFrom=jsonRes.coverLimits.effectiveFrom
						api_EffectiveFrom=removeComma(api_EffectiveFrom.toString())
						api_EffectiveFrom=getDate(api_EffectiveFrom.toString())
						
						api_EffectiveTo=jsonRes.coverLimits.effectiveTo						
						api_EffectiveTo=removeComma(api_EffectiveTo.toString())
						api_EffectiveTo=getDate(api_EffectiveTo.toString())
						
						api_AsPerRules=jsonRes.asPerRules
						api_Template=jsonRes.template
						api_ProductType=jsonRes.productType
						
						api_LatestRiskTransactionDate=jsonRes.latestRiskTransactionDate
						api_LatestRiskTransactionDate=removeComma(api_LatestRiskTransactionDate.toString())
						api_LatestRiskTransactionDate=getDate(api_LatestRiskTransactionDate.toString())
						
						api_Branch=jsonRes.branch
						api_TerminatedType=jsonRes.terminatedDate
						
						api_TerminationDate=jsonRes.terminationType
						api_TerminationDate=removeComma(api_TerminationDate.toString())
						api_TerminationDate=getDate(api_TerminationDate.toString())
						
						api_EnteredDate=jsonRes.enteredDate
						api_EnteredDate=removeComma(api_EnteredDate.toString())
						api_EnteredDate=getDate(api_EnteredDate.toString())
						
						api_EngineHorsePower=jsonRes.engineHorsePower
						api_TrademarkEngineModelNumber=jsonRes.trademarkAndEngineModel
						api_EngineNo=jsonRes.engineNo
						api_EngineNo=removeComma(api_EngineNo.toString())
						api_TenderReferenceList=jsonRes.tenderReferenceList
						api_TenderReferenceList=removeComma(api_TenderReferenceList.toString())
						api_TenderOutboardReferenceList=jsonRes.tenderOutboardReferenceList
						api_TenderOutboardReferenceList=removeComma(api_TenderOutboardReferenceList.toString())
						api_MemberPartyId=jsonRes.memberPartyId

						log.info "API Response is received as =>"+key+","+api_ApplicationRiskId+","+api_LimitId+","+api_CoverShortName+","+api_LimitName+","+api_CurrencyCode+","+api_Amount+","+api_isThePrimaryCoverLimit+","+api_EffectiveFrom+","+api_EffectiveTo+","+api_AsPerRules+","+api_Template+","+api_ProductType+","+api_LatestRiskTransactionDate+","+api_Branch+","+api_TerminatedType+","+api_TerminationDate+","+api_EnteredDate+","+api_EngineHorsePower+","+api_TrademarkEngineModelNumber+","+api_EngineNo+","+api_TenderReferenceList+","+api_TenderOutboardReferenceList+","+api_MemberPartyId
						//arrCellVal=[key, api_ApplicationRiskId,api_LimitId,api_CoverShortName,api_LimitName,api_CurrencyCode,api_Amount,api_isThePrimaryCoverLimit,api_EffectiveFrom,api_EffectiveTo,api_AsPerRules,api_Template,api_ProductType,api_LatestRiskTransactionDate,api_Branch,api_TerminatedType,api_TerminationDate,api_EnteredDate,api_EngineHorsePower,api_TrademarkEngineModelNumber,api_EngineNo,api_TenderReferenceList,api_TenderOutboardReferenceList,api_MemberPartyId];
						arrCellVal=[key, api_ApplicationRiskId,api_LimitId,api_CoverShortName,api_LimitName,api_CurrencyCode,api_Amount,api_isThePrimaryCoverLimit,api_EffectiveFrom,api_EffectiveTo,api_AsPerRules,api_Template,api_ProductType,api_Branch,api_TerminatedType,api_TerminationDate,api_EnteredDate,api_EngineHorsePower,api_TrademarkEngineModelNumber,api_EngineNo,api_TenderReferenceList,api_TenderOutboardReferenceList,api_MemberPartyId];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
					oldAppRiskId = appRiskId
			 	}
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Risk Details as per Application Risk Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>19)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>appRiskId</con:name><con:value>179198</con:value></con:property></con:properties></con:testCase><con:testCase id="038262f8-99bc-44cd-b797-c5eea9018958" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ConfigureByOwnerMemberByRiskByApplicationRiskId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="ConfigByOwnerMemberByRiskByAppRiskId" id="9a26cdf5-ea5f-40d7-8d35-eddd7750075c"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/configure/ownermember/risk/${#TestCase#AppRiskId}" methodName="ConfigureByOwnerMemberByRiskByApplicationRiskId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ConfigByOwnerMemberByRiskByAppRiskId" id="ea423a2c-da4f-4a20-a8b2-0d1d63d9403c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/configure/ownermember/risk/113841</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ConfigByOwnerMemberByRiskByAppRiskId_Final" id="82ef0bad-85ca-414e-a2d1-72347256862b"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import java.text.SimpleDateFormat

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList<String> riskIdList = new ArrayList<>();

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ConfigureByOwnerMemberByRiskByApplicationRiskId"))
		tcModuleName="ConfigureByOwnerMemberByRiskByApplicationRiskId"
		
	if(tcModuleName.toString().equals("ConfigureByOwnerMemberByRiskByApplicationRiskId"))
	{
		log.info "Test Execution started for getting Configure By Owner Member By Risk By Application Risk Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Key","VesselId","ID","MemberId","OwnerId","PartyId","Name","Reference","Email","Capacity","Addressesid","AddressesName","AddressLine1","AddressLine2","AddressLine3","AddressCity","AddressState","AddressCountry","AddressPostalCode","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			Use TOM
			Declare @Effective datetimeoffset, @Transactional datetimeoffset, @arid int--, @MaxEffective datetimeoffset
				set @Effective = '9999-12-31 00:00:00.0000000 +00:00'  --'2020-12-03 12:00:00.0000000 +00:00' --'2020-10-01 12:00:00.0000000 +00:00' --'2020-08-27 12:00:00.0000000 +01:00'  --SYSDATETIMEOFFSET() --'2020-10-01 12:00:00.0000000 +00:00' --'2020-11-02 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() --'2000-01-01 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() -- '2018-08-08 12:00:00.0000000 +00:00' --'2020-08-20 13:00:00.0000000 +01:00'  --'2020-08-11 12:00:00.0000000 +00:00'  --'2020-04-01 00:00:00.0000000 +00:00' --'2020-05-08 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET()  --'2020-04-01 01:00:00.0000000 +00:00'  -- '2020-05-01 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET()  --'2018-05-09 12:00:00.0000000 +00:00'  --'9999-12-31 11:59:59.0000000 +00:00'  -- SYSDATETIMEOFFSET() 
				set @Transactional = '9999-12-31 00:00:00.0000000 +00:00'  --'2021-02-03 15:02:09.0352017 +00:00'  --'2020-08-27 14:30:00.0000000 +01:00'  --SYSDATETIMEOFFSET() -- '2020-08-27 19:54:36.0000000 +01:00'  --'2018-08-08 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() --'2019-11-05 16:34:04.8347351 +00:00' -- SYSDATETIMEOFFSET() -- '2019-11-05 16:34:04.8347351 +00:00' -- '2020-08-11 00:00:00.0000000 +01:00' -- '2019-08-08 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET() --'2019-08-08 00:00:00.0000000 +01:00' --'2020-07-18 00:00:00.0000000 +01:00'  --'2020-05-08 00:00:00.0000000 +01:00' --'2020-07-17 11:15:09.0383540 +01:00'  -- '2020-07-17 11:08:00.0000000 +01:00' --SYSDATETIMEOFFSET() -- 
				set @arid =182343 --181160--181022--90563-- 172746 
						
			SELECT 
			DISTINCT
			TOP 50
			ar.Id AS Vesselid, ter.id as RiskId, ter.Reference as RiskRef, 
			--ama.MemberAssured_Id as ID, 
			AMA.Id, ma.id as MemberId, null as OwnerId, p2.Id as PartyId, p2.SearchName as Name, ma.Reference,  
			p2.EmailAddress as Email, 'Member/Assured' as Capacity,
			ta.id as AddressId, ta.Name as AddressName, ta.Line1, ta.Line2, ta.Line3, ta.City, ta.StateOrProvince, rc.Name as Country, ta.Postcode, 
			AB.Id as ApplicationId, AB.Discriminator, AB.PolicyEnd, p2.EmailAddress
			from 
			temporal.ApplicationRisk ar 
			inner join temporal.ApplicationMemberAssured ama on ama.Id = ar.ApplicationMemberAssured_Id
				and ar.EffectiveFrom <= @Effective
				and ar.EffectiveTo > @Effective
				and ar.TransactionalFrom <= @Transactional
				and ar.TransactionalTo > @Transactional
				and ar.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
				and ama.EffectiveFrom <= @Effective
				and ama.EffectiveTo > @Effective
				and ama.TransactionalFrom <= @Transactional
				and ama.TransactionalTo > @Transactional
				and ama.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
			inner join temporal.MemberAssured ma on ama.MemberAssured_Id = ma.Id
				and ma.EffectiveFrom <= @Effective
				and ma.EffectiveTo > @Effective
				and ma.TransactionalFrom <= @Transactional
				and ma.TransactionalTo > @Transactional
				and ma.MemberAssured_PhysicalDeletionAttemptPrevented = 0
			inner join temporal.party p2 on ma.Party_Id = p2.id
				and p2.EffectiveFrom <= @Effective
				and p2.EffectiveTo > @Effective
				and p2.TransactionalFrom <= @Transactional
				and p2.TransactionalTo > @Transactional
				and p2.PartyBase_PhysicalDeletionAttemptPrevented = 0
			inner join Temporal.Risk ter on ar.Risk_Id = ter.Id
				and ter.EffectiveFrom <= @Effective
				and ter.EffectiveTo > @Effective
				and ter.TransactionalFrom <= @Transactional
				and ter.TransactionalTo > @Transactional
				and ter.RiskBase_PhysicalDeletionAttemptPrevented = 0 
			inner join Temporal.[Address] ta on p2.id = ta.Party_Id
				and ta.EffectiveFrom <= @Effective
				and ta.EffectiveTo > @Effective
				and ta.TransactionalFrom <= @Transactional
				and ta.TransactionalTo > @Transactional
				and ta.Address_PhysicalDeletionAttemptPrevented = 0 
			inner join ref_Country rc on ta.Country_Id = rc.id
			inner join temporal.ApplicationBase AB on AB.Id = ama.Id
			where AB.Discriminator='Policy' and AB.PolicyEnd > GETDATE()
			and ar.id = @arid
			union all
			select 
			distinct 
			TOP 50
			ar.Id AS Vesselid, r.id as RiskId, r.Reference as RiskRef, 
			ja.Id as ID, null as MemberId, ap.id as OwnerId, p.Id as PartyId, p.SearchName as Name, p.Reference, p.EmailAddress as Email, 'Owner' as Capacity,
			ta.id as AddressId, ta.Name as AddressName, ta.Line1, ta.Line2, ta.Line3, ta.City, ta.StateOrProvince, rc.Name as Country, ta.Postcode, 
			AB.Id, AB.Discriminator, AB.PolicyEnd, p.EmailAddress
			from temporal.ApplicationRisk ar 
			inner join temporal.ApplicationRiskAssociatedParty arap on ar.id = arap.ApplicationRisk_Id
				and arap.EffectiveFrom <= @Effective
				and arap.EffectiveTo > @Effective
				and arap.TransactionalFrom <= @Transactional
				and arap.TransactionalTo > @Transactional
				and arap.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
			inner join temporal.AssociatedParty ap on ap.Id = arap.AssociatedParty_Id
				and ap.EffectiveFrom <= @Effective
				and ap.EffectiveTo > @Effective
				and ap.TransactionalFrom <= @Transactional
				and ap.TransactionalTo > @Transactional
				and ap.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
			inner join temporal.party p on ap.Party_Id = p.id
				and p.EffectiveFrom <= @Effective
				and p.EffectiveTo > @Effective
				and p.TransactionalFrom <= @Transactional
				and p.TransactionalTo > @Transactional
				and p.PartyBase_PhysicalDeletionAttemptPrevented = 0
			inner join temporal.JointAssured ja on p.id = ja.Party_Id
				and ja.EffectiveFrom <= @Effective
				and ja.EffectiveTo > @Effective
				and ja.TransactionalFrom <= @Transactional
				and ja.TransactionalTo > @Transactional
				and ja.JointAssured_PhysicalDeletionAttemptPrevented = 0
			inner join temporal.risk r on ar.Risk_Id = r.id
				and r.EffectiveFrom <= @Effective
				and r.EffectiveTo > @Effective
				and r.TransactionalFrom <= @Transactional
				and r.TransactionalTo > @Transactional
				and r.RiskBase_PhysicalDeletionAttemptPrevented = 0
			inner join temporal.AssociatedPartyCapacityAssociation apca on apca.AssociatedParty_Id = ap.Id 
				and apca.EffectiveFrom <= @Effective
				and apca.EffectiveTo > @Effective
				and apca.TransactionalFrom <= @Transactional
				and apca.TransactionalTo > @Transactional
				and apca.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
			inner join Temporal.[Address] ta on p.id = ta.Party_Id
				and ta.EffectiveFrom <= @Effective
				and ta.EffectiveTo > @Effective
				and ta.TransactionalFrom <= @Transactional
				and ta.TransactionalTo > @Transactional
				and ta.Address_PhysicalDeletionAttemptPrevented = 0
			inner join ref_Country rc on ta.Country_Id = rc.id
			inner join temporal.ApplicationMemberAssured ama on ama.Id = ar.ApplicationMemberAssured_Id
			inner join temporal.ApplicationBase AB on AB.Id = ama.Id
			Where apca.CapacityType_Id in (18,19)
			and AB.Discriminator='Policy'  and AB.PolicyEnd > GETDATE()
			and ar.id = @arid
			order by 1 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			//log.info "db_size=>"+db_size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			def newsqlId=00
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_Vesselid=row.Vesselid
				riskIdList.add(sql_Vesselid)
				sql_id=row.id
				sql_id=removeComma(sql_id.toString())
				sql_RiskId=row.RiskId	
				sql_MemberId=row.MemberId
				sql_OwnerId=row.OwnerId
				sql_PartyId=row.PartyId
				sql_Name=row.Name
				sql_Name=removeComma(sql_Name.toString())
				sql_Reference=row.Reference
				sql_Reference=removeComma(sql_Reference.toString())
				sql_Email=row.Email
				sql_Email=null
				sql_Capacity=row.Capacity
				sql_AddressId=row.AddressId
				sql_AddressId=removeComma(sql_AddressId.toString())
				sql_AddressName=row.AddressName
				sql_AddressName=removeComma(sql_AddressName.toString())
				sql_Line1=row.Line1
				sql_Line1=removeComma(sql_Line1.toString())
				sql_Line2=row.Line2
				sql_Line2=removeComma(sql_Line2.toString())
				sql_Line3=row.Line3
				sql_Line3=removeComma(sql_Line3.toString())
				sql_City=row.City
				sql_City=removeComma(sql_City.toString())
				sql_State=row.StateOrProvince
				sql_State=removeComma(sql_State.toString())
				sql_Country=row.Country
				sql_Country=removeComma(sql_Country.toString())
				sql_Postcode=row.Postcode
				sql_Postcode=removeComma(sql_Postcode.toString())
				//sql_PolicyEnd=row.PolicyEnd
				//sql_PolicyEnd=sql_PolicyEnd.toString().replace(" ","T")
				//sql_PolicyEnd=getDate(sql_PolicyEnd.toString())

				sql_PolicyEnd=row.PolicyEnd
				sql_PolicyEnd=sql_PolicyEnd.toString().split(" ")[0]
                    sql_PolicyEnd=sql_PolicyEnd
                    
                    date= new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
                    date = new Date()
                    getDateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
                    String todaysDate=getDateFormat.format(date)
                    todaysDate=todaysDate.toString().replace("/","-")
                    todaysDate=todaysDate.split(" ")[0]
                    

				if(sql_MemberId==null)
					sql_MemberId=0
				if(sql_MemberId.toString().equals("0"))
					newsqlId=sql_OwnerId
				
				if(sql_OwnerId==null)
					sql_OwnerId=0
				if(sql_OwnerId.toString().equals("0"))
					newsqlId=sql_MemberId
					//key=sql_Vesselid+"_"+newsqlId
				sql_MemberId=removeComma(sql_MemberId.toString())
				sql_OwnerId=removeComma(sql_OwnerId.toString())
				key=sql_Vesselid+"_"+sql_id
				

				if( sql_PolicyEnd<todaysDate)
				{
	                   	String expectedError1="An error has occurred"
	                   	String expectedError2="The Policy End Date"
	                   	String expectedError3="is in the past."
	                   	int expectedHTTPStatusCode=404
	                   	log.info " As policy end date is past date, expected response should contain=>"+expectedError1+" "+expectedError2+" "+expectedError3+" and expected HTTP Status Code=>"+expectedHTTPStatusCode
	                   	
	 	              	key==sql_Vesselid+"_"+expectedHTTPStatusCode
	                   	
	                   	arrCellVal=[key, expectedHTTPStatusCode, expectedError1, expectedError2, expectedError3]
	                   	RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				}
				else
				{
					log.info 'SQL response is received as =>'+key+","+sql_Vesselid+","+sql_id+","+ sql_MemberId+","+sql_OwnerId+","+ sql_PartyId+","+ sql_Name+","+sql_Reference+","+sql_Email+","+sql_Capacity+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_State+","+sql_Country+","+sql_Postcode
					arrCellVal=[key,sql_Vesselid,sql_id, sql_MemberId,sql_OwnerId, sql_PartyId, sql_Name,sql_Reference,sql_Email,sql_Capacity,sql_AddressId,sql_AddressName,sql_Line1,sql_Line2,sql_Line3,sql_City,sql_State,sql_Country,sql_Postcode]
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					counter++
				}				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldVesselId=00

			for (int j = 0; j < riskIdList.size(); j++)
			 {
			 	appRiskId=riskIdList.get(j)
			 	if(oldVesselId==appRiskId)
			 	{
			 		oldVesselId=appRiskId
			 	}
			 	else
			 	{
			 		log.info "Getting API response for Application Risk Id=>"+appRiskId
			 	
				 	testRunner.testCase.setPropertyValue( "AppRiskId", appRiskId.toString())
					
					testRunner.testCase.setPropertyValue('token',token)
					testRunner.runTestStepByName('ConfigByOwnerMemberByRiskByAppRiskId')
					String req='${ConfigByOwnerMemberByRiskByAppRiskId#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["ConfigByOwnerMemberByRiskByAppRiskId"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					log.info "Original API response is=>"+response
					log.info "HTTP Status Code received as=>"+httpStatusCode
					def jsonRes=jsonSlurper.parseText(response)
					
					if(httpStatusCode.toString().equals("200"))
					{
						jsonRecordCount = jsonRes.totalRecords
	
						if(!jsonRes.members.toString().equals("[]") || jsonRes.members!=null)
						{
							int noOfMembers = jsonRes.members.id.size()
							for (int k=0; k<noOfMembers; k++)
							{
								int memberAddressCount=jsonRes.members.addresses[k].size()
								for(int i=0; i<memberAddressCount; i++)
								{
									api_id=jsonRes.members.id[k]
									api_id=removeComma(api_id.toString())
									api_MembermemberId=jsonRes.members.memberId[k]
									api_MembermemberId=removeComma(api_MembermemberId.toString())
									api_MemberownerId=jsonRes.members.ownerId[k]
									api_MemberownerId=removeComma(api_MemberownerId.toString())
									api_MemberpartyId=jsonRes.members.partyId[k]
									api_Membername=jsonRes.members.name[k]
									api_Memberreference=jsonRes.members.reference[k]
									api_Memberemail=jsonRes.members.email[k]
									api_Membercapacity=jsonRes.members.capacity[k]
									api_addressesid=jsonRes.members.addresses[k].id[i]
									api_addressesid=removeComma(api_addressesid.toString())
									api_addressesaddressName=jsonRes.members.addresses[k].addressName[i]
									api_addressesaddressName=removeComma(api_addressesaddressName.toString())
									api_addressesaddressLine1=jsonRes.members.addresses[k].addressLine1[i]
									api_addressesaddressLine1=removeComma(api_addressesaddressLine1.toString())
									api_addressesaddressLine2=jsonRes.members.addresses[k].addressLine2[i]
									api_addressesaddressLine2=removeComma(api_addressesaddressLine2.toString())
									api_addressesaddressLine3=jsonRes.members.addresses[k].addressLine3[i]
									api_addressesaddressLine3=removeComma(api_addressesaddressLine3.toString())
									api_addressescity=jsonRes.members.addresses[k].city[i]
									api_addressescity=removeComma(api_addressescity.toString())
									api_addressesstate=jsonRes.members.addresses[k].stateOrCounty[i]
									api_addressesstate=removeComma(api_addressesstate.toString())
									api_addressescountry=jsonRes.members.addresses[k].country[i]
									api_addressescountry=removeComma(api_addressescountry.toString())
									api_addressespostalCode=jsonRes.members.addresses[k].postCode[i]
									api_addressespostalCode=removeComma(api_addressespostalCode.toString())
									api_vesselId=jsonRes.vesselId
									
									key=api_vesselId+"_"+api_id
	
									log.info 'API response is received as =>'+key+","+api_vesselId+","+api_id+","+ api_MembermemberId+","+ api_MemberownerId+","+ api_MemberpartyId+","+ api_Membername+","+api_Memberreference+","+api_Memberemail+","+api_Membercapacity+","+api_addressesid+","+api_addressesaddressName+","+api_addressesaddressLine1+","+api_addressesaddressLine2+","+api_addressesaddressLine3+","+api_addressescity+","+api_addressesstate+","+api_addressescountry+","+api_addressespostalCode
									arrCellVal=[key,api_vesselId,api_id, api_MembermemberId, api_MemberownerId, api_MemberpartyId, api_Membername,api_Memberreference,api_Memberemail,api_Membercapacity,api_addressesid,api_addressesaddressName,api_addressesaddressLine1,api_addressesaddressLine2,api_addressesaddressLine3,api_addressescity,api_addressesstate,api_addressescountry,api_addressespostalCode];
									RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
									counter++
									total_size++
									oldVesselId=api_vesselId
								}//end of member for loop	
							}
						}//end of id for member
						if(!jsonRes.owners.toString().equals("[]") || jsonRes.owners!=null)
						{
							int noOfOwners = jsonRes.owners.id.size()
							for (int k=0; k<noOfOwners; k++)
							{
								int ownersAddressCount=jsonRes.owners.addresses[k].size()
								for(i=0; i<ownersAddressCount; i++)
								{
									api_id=jsonRes.owners.id[k]
									api_id=removeComma(api_id.toString())
									api_OwnermemberId=jsonRes.owners.memberId[k]
									api_OwnermemberId=removeComma(api_OwnermemberId.toString())
									api_OwnerownerId=jsonRes.owners.ownerId[k]
									api_OwnerownerId=removeComma(api_OwnerownerId.toString())
									api_OwnerpartyId=jsonRes.owners.partyId[k]
									api_Ownername=jsonRes.owners.name[k]
									api_Ownerreference=jsonRes.owners.reference[k]
									api_Owneremail=jsonRes.owners.email[k]
									api_Ownercapacity=jsonRes.owners.capacity[k]
									api_ownerAddressesid=jsonRes.owners.addresses[k].id[i]
									api_ownerAddressesid=removeComma(api_ownerAddressesid.toString())
									api_ownerAddressesaddressName=jsonRes.owners.addresses[k].addressName[i]
									api_ownerAddressesaddressName=removeComma(api_ownerAddressesaddressName.toString())
									api_ownerAddressesaddressLine1=jsonRes.owners.addresses[k].addressLine1[i]
									api_ownerAddressesaddressLine1=removeComma(api_ownerAddressesaddressLine1.toString())
									api_ownerAddressesaddressLine2=jsonRes.owners.addresses[k].addressLine2[i]
									api_ownerAddressesaddressLine2=removeComma(api_ownerAddressesaddressLine2.toString())
									api_ownerAddressesaddressLine3=jsonRes.owners.addresses[k].addressLine3[i]
									api_ownerAddressesaddressLine3=removeComma(api_ownerAddressesaddressLine3.toString())
									api_ownerAddressescity=jsonRes.owners.addresses[k].city[i]
									api_ownerAddressescity=removeComma(api_ownerAddressescity.toString())
									api_ownerAddressesstate=jsonRes.owners.addresses[k].stateOrCounty[i]
									api_ownerAddressesstate=removeComma(api_ownerAddressesstate.toString())
									api_ownerAddressescountry=jsonRes.owners.addresses[k].country[i]
									api_ownerAddressescountry=removeComma(api_ownerAddressescountry.toString())
									api_ownerAddressespostalCode=jsonRes.owners.addresses[k].postCode[i]
									api_ownerAddressespostalCode=removeComma(api_ownerAddressespostalCode.toString())
									api_vesselId=jsonRes.vesselId
										
									key=api_vesselId+"_"+api_id
	
									log.info 'API response is received as =>'+key+","+api_vesselId+","+api_id+","+ api_OwnermemberId+","+ api_OwnerownerId+","+ api_OwnerpartyId+","+ api_Ownername+","+api_Ownerreference+","+api_Owneremail+","+api_Ownercapacity+","+api_ownerAddressesid+","+api_ownerAddressesaddressName+","+api_ownerAddressesaddressLine1+","+api_ownerAddressesaddressLine2+","+api_ownerAddressesaddressLine3+","+api_ownerAddressescity+","+api_ownerAddressesstate+","+api_ownerAddressescountry+","+api_ownerAddressespostalCode
									arrCellVal=[key,api_vesselId,api_id, api_OwnermemberId, api_OwnerownerId, api_OwnerpartyId, api_Ownername,api_Ownerreference,api_Owneremail,api_Ownercapacity,api_ownerAddressesid,api_ownerAddressesaddressName,api_ownerAddressesaddressLine1,api_ownerAddressesaddressLine2,api_ownerAddressesaddressLine3,api_ownerAddressescity,api_ownerAddressesstate,api_ownerAddressescountry,api_ownerAddressespostalCode];
									RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
									counter++
									total_size++
									oldVesselId=api_vesselId
								}//end of owner for loop	
							}
						}//end of id for owner
					}//end of if 200 ok status
					else if(httpStatusCode.toString().equals("404"))
					{
	                    	String expectedError1="An error has occurred"
	                    	String expectedError2="The Policy End Date"
	                    	String expectedError3="is in the past."
	                    	
	                    	key=appRiskId+"_"+httpStatusCode.toString()
	                    	String receivedError=jsonRes.Message.toString()
	                    	
	                    	if(receivedError.contains(expectedError1) && receivedError.contains(expectedError2) && receivedError.contains(expectedError3))
	                    	{
	                    		log.info "When Policy end date is past date, API response is received as =>"+jsonRes.Message
		                    	arrCellVal=[key, httpStatusCode, expectedError1, expectedError2, expectedError3]
		                    	RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
							counter++	
							total_size++	
	                    	}
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++
					}
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}	
			 		oldVesselId=appRiskId
			 	}
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Configure By Owner Member By Risk By Application Risk Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="ConfigureByOwnerMemberByRiskByApplicationRiskId" id="323d4346-73c5-4594-ae5d-c48e6740b50f" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList<String> riskIdList = new ArrayList<>();

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ConfigureByOwnerMemberByRiskByApplicationRiskId"))
		tcModuleName="ConfigureByOwnerMemberByRiskByApplicationRiskId"
		
	if(tcModuleName.toString().equals("ConfigureByOwnerMemberByRiskByApplicationRiskId"))
	{
		log.info "Test Execution started for getting Configure By Owner Member By Risk By Application Risk Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Key","VesselId","ID","MemberId","OwnerId","PartyId","Name","Reference","Email","Capacity","Addressesid","AddressesName","AddressLine1","AddressLine2","AddressLine3","AddressCity","AddressState","AddressCountry","AddressPostalCode","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			Use TOM
			Declare @Effective datetimeoffset, @Transactional datetimeoffset, @arid int--, @MaxEffective datetimeoffset
			set @Effective = '9999-12-31 00:00:00.0000000 +00:00'  --'2020-12-03 12:00:00.0000000 +00:00' --'2020-10-01 12:00:00.0000000 +00:00' --'2020-08-27 12:00:00.0000000 +01:00'  --SYSDATETIMEOFFSET() --'2020-10-01 12:00:00.0000000 +00:00' --'2020-11-02 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() --'2000-01-01 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() -- '2018-08-08 12:00:00.0000000 +00:00' --'2020-08-20 13:00:00.0000000 +01:00'  --'2020-08-11 12:00:00.0000000 +00:00'  --'2020-04-01 00:00:00.0000000 +00:00' --'2020-05-08 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET()  --'2020-04-01 01:00:00.0000000 +00:00'  -- '2020-05-01 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET()  --'2018-05-09 12:00:00.0000000 +00:00'  --'9999-12-31 11:59:59.0000000 +00:00'  -- SYSDATETIMEOFFSET() 
			set @Transactional = '9999-12-31 00:00:00.0000000 +00:00'  --'2021-02-03 15:02:09.0352017 +00:00'  --'2020-08-27 14:30:00.0000000 +01:00'  --SYSDATETIMEOFFSET() -- '2020-08-27 19:54:36.0000000 +01:00'  --'2018-08-08 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() --'2019-11-05 16:34:04.8347351 +00:00' -- SYSDATETIMEOFFSET() -- '2019-11-05 16:34:04.8347351 +00:00' -- '2020-08-11 00:00:00.0000000 +01:00' -- '2019-08-08 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET() --'2019-08-08 00:00:00.0000000 +01:00' --'2020-07-18 00:00:00.0000000 +01:00'  --'2020-05-08 00:00:00.0000000 +01:00' --'2020-07-17 11:15:09.0383540 +01:00'  -- '2020-07-17 11:08:00.0000000 +01:00' --SYSDATETIMEOFFSET() -- 
			set @arid =181162 -- 181160--181022--90563-- 172746 
			
			SELECT 
			DISTINCT
			TOP 10
			ar.Id AS Vesselid, ter.id as RiskId, ter.Reference as RiskRef, 
			ama.Id as ID, ma.id as MemberId, null as OwnerId, p2.Id as PartyId, p2.SearchName as Name, ma.Reference,  
			p2.EmailAddress as Email, 'Member/Assured' as Capacity,
			ta.id as AddressId, ta.Name as AddressName, ta.Line1, ta.Line2, ta.Line3, ta.City, ta.StateOrProvince, rc.Name as Country, ta.Postcode, 
			AB.Id as ApplicationId, AB.Discriminator, AB.PolicyEnd, p2.EmailAddress
			from 
			temporal.ApplicationRisk ar 
			inner join temporal.ApplicationMemberAssured ama on ama.Id = ar.ApplicationMemberAssured_Id
				and ar.EffectiveFrom <= @Effective
				and ar.EffectiveTo > @Effective
				and ar.TransactionalFrom <= @Transactional
				and ar.TransactionalTo > @Transactional
				and ar.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
				and ama.EffectiveFrom <= @Effective
				and ama.EffectiveTo > @Effective
				and ama.TransactionalFrom <= @Transactional
				and ama.TransactionalTo > @Transactional
				and ama.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
			inner join temporal.MemberAssured ma on ama.MemberAssured_Id = ma.Id
				and ma.EffectiveFrom <= @Effective
				and ma.EffectiveTo > @Effective
				and ma.TransactionalFrom <= @Transactional
				and ma.TransactionalTo > @Transactional
				and ma.MemberAssured_PhysicalDeletionAttemptPrevented = 0
			inner join temporal.party p2 on ma.Party_Id = p2.id
				and p2.EffectiveFrom <= @Effective
				and p2.EffectiveTo > @Effective
				and p2.TransactionalFrom <= @Transactional
				and p2.TransactionalTo > @Transactional
				and p2.PartyBase_PhysicalDeletionAttemptPrevented = 0
			inner join Temporal.Risk ter on ar.Risk_Id = ter.Id
				and ter.EffectiveFrom <= @Effective
				and ter.EffectiveTo > @Effective
				and ter.TransactionalFrom <= @Transactional
				and ter.TransactionalTo > @Transactional
				and ter.RiskBase_PhysicalDeletionAttemptPrevented = 0 
			inner join Temporal.[Address] ta on p2.id = ta.Party_Id
				and ta.EffectiveFrom <= @Effective
				and ta.EffectiveTo > @Effective
				and ta.TransactionalFrom <= @Transactional
				and ta.TransactionalTo > @Transactional
				and ta.Address_PhysicalDeletionAttemptPrevented = 0 
			inner join ref_Country rc on ta.Country_Id = rc.id
			inner join temporal.ApplicationBase AB on AB.Id = ama.Id
			where AB.Discriminator='Policy' and AB.PolicyEnd > GETDATE()
			and ar.id = @arid
			
			order by 1 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			//log.info "db_size=>"+db_size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			def newsqlId=00
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_Vesselid=row.Vesselid
				riskIdList.add(sql_Vesselid)
				sql_id=row.id
				sql_id=removeComma(sql_id.toString())
				sql_RiskId=row.RiskId	
				sql_MemberId=row.MemberId
				sql_OwnerId=row.OwnerId
				sql_PartyId=row.PartyId
				sql_Name=row.Name
				sql_Name=removeComma(sql_Name.toString())
				sql_Reference=row.Reference
				sql_Reference=removeComma(sql_Reference.toString())
				sql_Email=row.Email
				sql_Email=null
				sql_Capacity=row.Capacity
				sql_AddressId=row.AddressId
				sql_AddressId=removeComma(sql_AddressId.toString())
				sql_AddressName=row.AddressName
				sql_AddressName=removeComma(sql_AddressName.toString())
				sql_Line1=row.Line1
				sql_Line1=removeComma(sql_Line1.toString())
				sql_Line2=row.Line2
				sql_Line2=removeComma(sql_Line2.toString())
				sql_Line3=row.Line3
				sql_Line3=removeComma(sql_Line3.toString())
				sql_City=row.City
				sql_City=removeComma(sql_City.toString())
				sql_State=row.StateOrProvince
				sql_State=removeComma(sql_State.toString())
				sql_Country=row.Country
				sql_Country=removeComma(sql_Country.toString())
				sql_Postcode=row.Postcode
				sql_Postcode=removeComma(sql_Postcode.toString())
				sql_PolicyEnd=row.PolicyEnd
				sql_PolicyEnd=sql_PolicyEnd.toString().replace(" ","T")
				sql_PolicyEnd=getDate(sql_PolicyEnd.toString())

				if(sql_MemberId==null)
					sql_MemberId=0
				if(sql_MemberId.toString().equals("0"))
					newsqlId=sql_OwnerId
				
				if(sql_OwnerId==null)
					sql_OwnerId=0
				if(sql_OwnerId.toString().equals("0"))
					newsqlId=sql_MemberId

				sql_MemberId=removeComma(sql_MemberId.toString())
				sql_OwnerId=removeComma(sql_OwnerId.toString())
				
				key=sql_Vesselid+"_"+sql_id

				log.info 'SQL response is received as =>'+key+","+sql_Vesselid+","+sql_id+","+ sql_MemberId+","+sql_OwnerId+","+ sql_PartyId+","+ sql_Name+","+sql_Reference+","+sql_Email+","+sql_Capacity+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_State+","+sql_Country+","+sql_Postcode
				arrCellVal=[key,sql_Vesselid,sql_id, sql_MemberId,sql_OwnerId, sql_PartyId, sql_Name,sql_Reference,sql_Email,sql_Capacity,sql_AddressId,sql_AddressName,sql_Line1,sql_Line2,sql_Line3,sql_City,sql_State,sql_Country,sql_Postcode]
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

				String getOwnerDetails = 
				"""
				declare
				 @Effective datetimeoffset, @Transactional datetimeoffset, @arid int--, @MaxEffective datetimeoffset
				set @Effective = '9999-12-31 00:00:00.0000000 +00:00'  --'2020-12-03 12:00:00.0000000 +00:00' --'2020-10-01 12:00:00.0000000 +00:00' --'2020-08-27 12:00:00.0000000 +01:00'  --SYSDATETIMEOFFSET() --'2020-10-01 12:00:00.0000000 +00:00' --'2020-11-02 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() --'2000-01-01 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() -- '2018-08-08 12:00:00.0000000 +00:00' --'2020-08-20 13:00:00.0000000 +01:00'  --'2020-08-11 12:00:00.0000000 +00:00'  --'2020-04-01 00:00:00.0000000 +00:00' --'2020-05-08 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET()  --'2020-04-01 01:00:00.0000000 +00:00'  -- '2020-05-01 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET()  --'2018-05-09 12:00:00.0000000 +00:00'  --'9999-12-31 11:59:59.0000000 +00:00'  -- SYSDATETIMEOFFSET() 
				set @Transactional = '9999-12-31 00:00:00.0000000 +00:00'  --'2021-02-03 15:02:09.0352017 +00:00'  --'2020-08-27 14:30:00.0000000 +01:00'  --SYSDATETIMEOFFSET() -- '2020-08-27 19:54:36.0000000 +01:00'  --'2018-08-08 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() --'2019-11-05 16:34:04.8347351 +00:00' -- SYSDATETIMEOFFSET() -- '2019-11-05 16:34:04.8347351 +00:00' -- '2020-08-11 00:00:00.0000000 +01:00' -- '2019-08-08 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET() --'2019-08-08 00:00:00.0000000 +01:00' --'2020-07-18 00:00:00.0000000 +01:00'  --'2020-05-08 00:00:00.0000000 +01:00' --'2020-07-17 11:15:09.0383540 +01:00'  -- '2020-07-17 11:08:00.0000000 +01:00' --SYSDATETIMEOFFSET() -- 
				set @arid =  """+sql_Vesselid+""" --181160--181022--90563-- 172746 
				
				select 
				distinct 
				ar.Id AS Vesselid, r.id as RiskId, r.Reference as RiskRef, 
				ja.Id as ID, null as MemberId, ap.id as OwnerId, p.Id as PartyId, p.SearchName as Name, p.Reference, p.EmailAddress as Email, 'Owner' as Capacity,
				ta.id as AddressId, ta.Name as AddressName, ta.Line1, ta.Line2, ta.Line3, ta.City, ta.StateOrProvince, rc.Name as Country, ta.Postcode, 
				AB.Id, AB.Discriminator, AB.PolicyEnd, p.EmailAddress
				from temporal.ApplicationRisk ar 
				inner join temporal.ApplicationRiskAssociatedParty arap on ar.id = arap.ApplicationRisk_Id
					and arap.EffectiveFrom <= @Effective
					and arap.EffectiveTo > @Effective
					and arap.TransactionalFrom <= @Transactional
					and arap.TransactionalTo > @Transactional
					and arap.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
				inner join temporal.AssociatedParty ap on ap.Id = arap.AssociatedParty_Id
					and ap.EffectiveFrom <= @Effective
					and ap.EffectiveTo > @Effective
					and ap.TransactionalFrom <= @Transactional
					and ap.TransactionalTo > @Transactional
					and ap.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
				inner join temporal.party p on ap.Party_Id = p.id
					and p.EffectiveFrom <= @Effective
					and p.EffectiveTo > @Effective
					and p.TransactionalFrom <= @Transactional
					and p.TransactionalTo > @Transactional
					and p.PartyBase_PhysicalDeletionAttemptPrevented = 0
				inner join temporal.JointAssured ja on p.id = ja.Party_Id
					and ja.EffectiveFrom <= @Effective
					and ja.EffectiveTo > @Effective
					and ja.TransactionalFrom <= @Transactional
					and ja.TransactionalTo > @Transactional
					and ja.JointAssured_PhysicalDeletionAttemptPrevented = 0
				inner join temporal.risk r on ar.Risk_Id = r.id
					and r.EffectiveFrom <= @Effective
					and r.EffectiveTo > @Effective
					and r.TransactionalFrom <= @Transactional
					and r.TransactionalTo > @Transactional
					and r.RiskBase_PhysicalDeletionAttemptPrevented = 0
				inner join temporal.AssociatedPartyCapacityAssociation apca on apca.AssociatedParty_Id = ap.Id 
					and apca.EffectiveFrom <= @Effective
					and apca.EffectiveTo > @Effective
					and apca.TransactionalFrom <= @Transactional
					and apca.TransactionalTo > @Transactional
					and apca.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
				inner join Temporal.[Address] ta on p.id = ta.Party_Id
					and ta.EffectiveFrom <= @Effective
					and ta.EffectiveTo > @Effective
					and ta.TransactionalFrom <= @Transactional
					and ta.TransactionalTo > @Transactional
					and ta.Address_PhysicalDeletionAttemptPrevented = 0
				inner join ref_Country rc on ta.Country_Id = rc.id
				inner join temporal.ApplicationMemberAssured ama on ama.Id = ar.ApplicationMemberAssured_Id
				inner join temporal.ApplicationBase AB on AB.Id = ama.Id
				Where apca.CapacityType_Id in (18,19)
				and AB.Discriminator='Policy'  and AB.PolicyEnd > GETDATE()
				and ar.id = @arid
				--order by 1, ID desc
				"""
				con.eachRow(getOwnerDetails)
				{
					getRow ->
					sql_Vesselid=getRow.Vesselid
					riskIdList.add(sql_Vesselid)
					sql_id=getRow.id
					sql_id=removeComma(sql_id.toString())
					sql_RiskId=getRow.RiskId	
					sql_MemberId=getRow.MemberId
					sql_OwnerId=getRow.OwnerId
					sql_PartyId=getRow.PartyId
					sql_Name=getRow.Name
					sql_Name=removeComma(sql_Name.toString())
					sql_Reference=getRow.Reference
					sql_Reference=removeComma(sql_Reference.toString())
					sql_Email=getRow.Email
					sql_Email=null
					sql_Capacity=getRow.Capacity
					sql_AddressId=getRow.AddressId
					sql_AddressId=removeComma(sql_AddressId.toString())
					sql_AddressName=getRow.AddressName
					sql_AddressName=removeComma(sql_AddressName.toString())
					sql_Line1=getRow.Line1
					sql_Line1=removeComma(sql_Line1.toString())
					sql_Line2=getRow.Line2
					sql_Line2=removeComma(sql_Line2.toString())
					sql_Line3=getRow.Line3
					sql_Line3=removeComma(sql_Line3.toString())
					sql_City=getRow.City
					sql_City=removeComma(sql_City.toString())
					sql_State=getRow.StateOrProvince
					sql_State=removeComma(sql_State.toString())
					sql_Country=getRow.Country
					sql_Country=removeComma(sql_Country.toString())
					sql_Postcode=getRow.Postcode
					sql_Postcode=removeComma(sql_Postcode.toString())
					sql_PolicyEnd=getRow.PolicyEnd
					sql_PolicyEnd=sql_PolicyEnd.toString().replace(" ","T")
					sql_PolicyEnd=getDate(sql_PolicyEnd.toString())
					
					if(sql_MemberId==null)
						sql_MemberId=0
					if(sql_MemberId.toString().equals("0"))
						newsqlId=sql_OwnerId
					
					if(sql_OwnerId==null)
						sql_OwnerId=0
					if(sql_OwnerId.toString().equals("0"))
						newsqlId=sql_MemberId
	
					sql_MemberId=removeComma(sql_MemberId.toString())
					sql_OwnerId=removeComma(sql_OwnerId.toString())
					
					//newsqlId=removeComma(newsqlId.toString())
					key=sql_Vesselid+"_"+sql_id

					//sql_id=removeComma(sql_id.toString())
					log.info 'SQL response is received as =>'+key+","+sql_Vesselid+","+sql_id+","+ sql_MemberId+","+sql_OwnerId+","+ sql_PartyId+","+ sql_Name+","+sql_Reference+","+sql_Email+","+sql_Capacity+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_State+","+sql_Country+","+sql_Postcode
					arrCellVal=[key,sql_Vesselid,sql_id, sql_MemberId,sql_OwnerId, sql_PartyId, sql_Name,sql_Reference,sql_Email,sql_Capacity,sql_AddressId,sql_AddressName,sql_Line1,sql_Line2,sql_Line3,sql_City,sql_State,sql_Country,sql_Postcode]
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e) 
					{
						log.info e.toString();
					}
					counter++
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldVesselId=00

			for (int j = 0; j < riskIdList.size(); j++)
			 {
			 	appRiskId=riskIdList.get(j)
			 	if(oldVesselId==appRiskId)
			 	{
			 		oldVesselId=appRiskId
			 		break;
			 	}
			 	else
			 	{
			 		log.info "Getting API response for Application Risk Id=>"+appRiskId
			 	
				 	testRunner.testCase.setPropertyValue( "AppRiskId", appRiskId.toString())
					
					testRunner.testCase.setPropertyValue('token',token)
					testRunner.runTestStepByName('ConfigByOwnerMemberByRiskByAppRiskId')
					String req='${ConfigByOwnerMemberByRiskByAppRiskId#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["ConfigByOwnerMemberByRiskByAppRiskId"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					log.info "Original API response is=>"+response
					log.info "HTTP Status Code received as=>"+httpStatusCode
					
					if(httpStatusCode.toString().equals("200"))
					{
						def jsonRes=jsonSlurper.parseText(response)
						jsonRecordCount = jsonRes.totalRecords
	
						if(!jsonRes.members.toString().equals("[]") || jsonRes.members!=null)
						{
							int noOfMembers = jsonRes.members.id.size()
							for (int k=0; k<noOfMembers; k++)
							{
								int memberAddressCount=jsonRes.members.addresses[k].size()
								for(int i=0; i<memberAddressCount; i++)
								{
									api_id=jsonRes.members.id[k]
									api_id=removeComma(api_id.toString())
									api_MembermemberId=jsonRes.members.memberId[k]
									api_MembermemberId=removeComma(api_MembermemberId.toString())
									api_MemberownerId=jsonRes.members.ownerId[k]
									api_MemberownerId=removeComma(api_MemberownerId.toString())
									api_MemberpartyId=jsonRes.members.partyId[k]
									api_Membername=jsonRes.members.name[k]
									api_Memberreference=jsonRes.members.reference[k]
									api_Memberemail=jsonRes.members.email[k]
									api_Membercapacity=jsonRes.members.capacity[k]
									api_addressesid=jsonRes.members.addresses[k].id[i]
									api_addressesid=removeComma(api_addressesid.toString())
									api_addressesaddressName=jsonRes.members.addresses[k].addressName[i]
									api_addressesaddressName=removeComma(api_addressesaddressName.toString())
									api_addressesaddressLine1=jsonRes.members.addresses[k].addressLine1[i]
									api_addressesaddressLine1=removeComma(api_addressesaddressLine1.toString())
									api_addressesaddressLine2=jsonRes.members.addresses[k].addressLine2[i]
									api_addressesaddressLine2=removeComma(api_addressesaddressLine2.toString())
									api_addressesaddressLine3=jsonRes.members.addresses[k].addressLine3[i]
									api_addressesaddressLine3=removeComma(api_addressesaddressLine3.toString())
									api_addressescity=jsonRes.members.addresses[k].city[i]
									api_addressescity=removeComma(api_addressescity.toString())
									api_addressesstate=jsonRes.members.addresses[k].state[i]
									api_addressesstate=removeComma(api_addressesstate.toString())
									api_addressescountry=jsonRes.members.addresses[k].country[i]
									api_addressescountry=removeComma(api_addressescountry.toString())
									api_addressespostalCode=jsonRes.members.addresses[k].postalCode[i]
									api_addressespostalCode=removeComma(api_addressespostalCode.toString())
									api_vesselId=jsonRes.vesselId
									
									key=api_vesselId+"_"+api_id
	
									log.info 'API response is received as =>'+key+","+api_vesselId+","+api_id+","+ api_MembermemberId+","+ api_MemberownerId+","+ api_MemberpartyId+","+ api_Membername+","+api_Memberreference+","+api_Memberemail+","+api_Membercapacity+","+api_addressesid+","+api_addressesaddressName+","+api_addressesaddressLine1+","+api_addressesaddressLine2+","+api_addressesaddressLine3+","+api_addressescity+","+api_addressesstate+","+api_addressescountry+","+api_addressespostalCode
									arrCellVal=[key,api_vesselId,api_id, api_MembermemberId, api_MemberownerId, api_MemberpartyId, api_Membername,api_Memberreference,api_Memberemail,api_Membercapacity,api_addressesid,api_addressesaddressName,api_addressesaddressLine1,api_addressesaddressLine2,api_addressesaddressLine3,api_addressescity,api_addressesstate,api_addressescountry,api_addressespostalCode];
									RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
									counter++
									total_size++
									oldVesselId=api_vesselId
								}//end of member for loop	
							}
						}//end of id for member
						if(!jsonRes.owners.toString().equals("[]") || jsonRes.owners!=null)
						{
							int noOfOwners = jsonRes.owners.id.size()
							for (int k=0; k<noOfOwners; k++)
							{
								int ownersAddressCount=jsonRes.owners.addresses[k].size()
								for(i=0; i<ownersAddressCount; i++)
								{
									api_id=jsonRes.owners.id[k]
									api_id=removeComma(api_id.toString())
									api_OwnermemberId=jsonRes.owners.memberId[k]
									api_OwnermemberId=removeComma(api_OwnermemberId.toString())
									api_OwnerownerId=jsonRes.owners.ownerId[k]
									api_OwnerownerId=removeComma(api_OwnerownerId.toString())
									api_OwnerpartyId=jsonRes.owners.partyId[k]
									api_Ownername=jsonRes.owners.name[k]
									api_Ownerreference=jsonRes.owners.reference[k]
									api_Owneremail=jsonRes.owners.email[k]
									api_Ownercapacity=jsonRes.owners.capacity[k]
									api_ownerAddressesid=jsonRes.owners.addresses[k].id[i]
									api_ownerAddressesid=removeComma(api_ownerAddressesid.toString())
									api_ownerAddressesaddressName=jsonRes.owners.addresses[k].addressName[i]
									api_ownerAddressesaddressName=removeComma(api_ownerAddressesaddressName.toString())
									api_ownerAddressesaddressLine1=jsonRes.owners.addresses[k].addressLine1[i]
									api_ownerAddressesaddressLine1=removeComma(api_ownerAddressesaddressLine1.toString())
									api_ownerAddressesaddressLine2=jsonRes.owners.addresses[k].addressLine2[i]
									api_ownerAddressesaddressLine2=removeComma(api_ownerAddressesaddressLine2.toString())
									api_ownerAddressesaddressLine3=jsonRes.owners.addresses[k].addressLine3[i]
									api_ownerAddressesaddressLine3=removeComma(api_ownerAddressesaddressLine3.toString())
									api_ownerAddressescity=jsonRes.owners.addresses[k].city[i]
									api_ownerAddressescity=removeComma(api_ownerAddressescity.toString())
									api_ownerAddressesstate=jsonRes.owners.addresses[k].state[i]
									api_ownerAddressesstate=removeComma(api_ownerAddressesstate.toString())
									api_ownerAddressescountry=jsonRes.owners.addresses[k].country[i]
									api_ownerAddressescountry=removeComma(api_ownerAddressescountry.toString())
									api_ownerAddressespostalCode=jsonRes.owners.addresses[k].postalCode[i]
									api_ownerAddressespostalCode=removeComma(api_ownerAddressespostalCode.toString())
									api_vesselId=jsonRes.vesselId
										
									key=api_vesselId+"_"+api_id
	
									log.info 'API response is received as =>'+key+","+api_vesselId+","+api_id+","+ api_OwnermemberId+","+ api_OwnerownerId+","+ api_OwnerpartyId+","+ api_Ownername+","+api_Ownerreference+","+api_Owneremail+","+api_Ownercapacity+","+api_ownerAddressesid+","+api_ownerAddressesaddressName+","+api_ownerAddressesaddressLine1+","+api_ownerAddressesaddressLine2+","+api_ownerAddressesaddressLine3+","+api_ownerAddressescity+","+api_ownerAddressesstate+","+api_ownerAddressescountry+","+api_ownerAddressespostalCode
									arrCellVal=[key,api_vesselId,api_id, api_OwnermemberId, api_OwnerownerId, api_OwnerpartyId, api_Ownername,api_Ownerreference,api_Owneremail,api_Ownercapacity,api_ownerAddressesid,api_ownerAddressesaddressName,api_ownerAddressesaddressLine1,api_ownerAddressesaddressLine2,api_ownerAddressesaddressLine3,api_ownerAddressescity,api_ownerAddressesstate,api_ownerAddressescountry,api_ownerAddressespostalCode];
									RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
									counter++
									total_size++
									oldVesselId=api_vesselId
								}//end of owner for loop	
							}
						}//end of id for owner
					}//end of if 200 ok status
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++
					}
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}	
			 		//oldVesselId=appRiskId
			 	}
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Configure By Owner Member By Risk By Application Risk Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="da2e6693-57f0-4add-801a-5e29fd5875ec" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList<String> riskIdList = new ArrayList<>();

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ConfigureByOwnerMemberByRiskByApplicationRiskId"))
		tcModuleName="ConfigureByOwnerMemberByRiskByApplicationRiskId"
		
	if(tcModuleName.toString().equals("ConfigureByOwnerMemberByRiskByApplicationRiskId"))
	{
		log.info "Test Execution started for getting Configure By Owner Member By Risk By Application Risk Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Key","VesselId","ID","MemberId","OwnerId","PartyId","Name","Reference","Email","Capacity","Addressesid","AddressesName","AddressLine1","AddressLine2","AddressLine3","AddressCity","AddressState","AddressCountry","AddressPostalCode","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			Use TOM
			Declare @Effective datetimeoffset, @Transactional datetimeoffset, @arid int--, @MaxEffective datetimeoffset
			set @Effective = '9999-12-31 00:00:00.0000000 +00:00'  --'2020-12-03 12:00:00.0000000 +00:00' --'2020-10-01 12:00:00.0000000 +00:00' --'2020-08-27 12:00:00.0000000 +01:00'  --SYSDATETIMEOFFSET() --'2020-10-01 12:00:00.0000000 +00:00' --'2020-11-02 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() --'2000-01-01 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() -- '2018-08-08 12:00:00.0000000 +00:00' --'2020-08-20 13:00:00.0000000 +01:00'  --'2020-08-11 12:00:00.0000000 +00:00'  --'2020-04-01 00:00:00.0000000 +00:00' --'2020-05-08 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET()  --'2020-04-01 01:00:00.0000000 +00:00'  -- '2020-05-01 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET()  --'2018-05-09 12:00:00.0000000 +00:00'  --'9999-12-31 11:59:59.0000000 +00:00'  -- SYSDATETIMEOFFSET() 
			set @Transactional = '9999-12-31 00:00:00.0000000 +00:00'  --'2021-02-03 15:02:09.0352017 +00:00'  --'2020-08-27 14:30:00.0000000 +01:00'  --SYSDATETIMEOFFSET() -- '2020-08-27 19:54:36.0000000 +01:00'  --'2018-08-08 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() --'2019-11-05 16:34:04.8347351 +00:00' -- SYSDATETIMEOFFSET() -- '2019-11-05 16:34:04.8347351 +00:00' -- '2020-08-11 00:00:00.0000000 +01:00' -- '2019-08-08 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET() --'2019-08-08 00:00:00.0000000 +01:00' --'2020-07-18 00:00:00.0000000 +01:00'  --'2020-05-08 00:00:00.0000000 +01:00' --'2020-07-17 11:15:09.0383540 +01:00'  -- '2020-07-17 11:08:00.0000000 +01:00' --SYSDATETIMEOFFSET() -- 
			set @arid =181162 -- 181160--181022--90563-- 172746 
			
			SELECT 
			DISTINCT
			TOP 10
			ar.Id AS Vesselid, ter.id as RiskId, ter.Reference as RiskRef, 
			ama.Id as ID, ma.id as MemberId, null as OwnerId, p2.Id as PartyId, p2.SearchName as Name, ma.Reference,  
			p2.EmailAddress as Email, 'Member/Assured' as Capacity,
			ta.id as AddressId, ta.Name as AddressName, ta.Line1, ta.Line2, ta.Line3, ta.City, ta.StateOrProvince, rc.Name as Country, ta.Postcode, 
			AB.Id as ApplicationId, AB.Discriminator, AB.PolicyEnd, p2.EmailAddress
			from 
			temporal.ApplicationRisk ar 
			inner join temporal.ApplicationMemberAssured ama on ama.Id = ar.ApplicationMemberAssured_Id
				and ar.EffectiveFrom <= @Effective
				and ar.EffectiveTo > @Effective
				and ar.TransactionalFrom <= @Transactional
				and ar.TransactionalTo > @Transactional
				and ar.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
				and ama.EffectiveFrom <= @Effective
				and ama.EffectiveTo > @Effective
				and ama.TransactionalFrom <= @Transactional
				and ama.TransactionalTo > @Transactional
				and ama.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
			inner join temporal.MemberAssured ma on ama.MemberAssured_Id = ma.Id
				and ma.EffectiveFrom <= @Effective
				and ma.EffectiveTo > @Effective
				and ma.TransactionalFrom <= @Transactional
				and ma.TransactionalTo > @Transactional
				and ma.MemberAssured_PhysicalDeletionAttemptPrevented = 0
			inner join temporal.party p2 on ma.Party_Id = p2.id
				and p2.EffectiveFrom <= @Effective
				and p2.EffectiveTo > @Effective
				and p2.TransactionalFrom <= @Transactional
				and p2.TransactionalTo > @Transactional
				and p2.PartyBase_PhysicalDeletionAttemptPrevented = 0
			inner join Temporal.Risk ter on ar.Risk_Id = ter.Id
				and ter.EffectiveFrom <= @Effective
				and ter.EffectiveTo > @Effective
				and ter.TransactionalFrom <= @Transactional
				and ter.TransactionalTo > @Transactional
				and ter.RiskBase_PhysicalDeletionAttemptPrevented = 0 
			inner join Temporal.[Address] ta on p2.id = ta.Party_Id
				and ta.EffectiveFrom <= @Effective
				and ta.EffectiveTo > @Effective
				and ta.TransactionalFrom <= @Transactional
				and ta.TransactionalTo > @Transactional
				and ta.Address_PhysicalDeletionAttemptPrevented = 0 
			inner join ref_Country rc on ta.Country_Id = rc.id
			inner join temporal.ApplicationBase AB on AB.Id = ama.Id
			where AB.Discriminator='Policy' and AB.PolicyEnd > GETDATE()
			and ar.id = @arid
			
			order by 1, ID desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			//log.info "db_size=>"+db_size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			def newsqlId=00
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_Vesselid=row.Vesselid
				riskIdList.add(sql_Vesselid)
				sql_id=row.id
				sql_id=removeComma(sql_id.toString())
				sql_RiskId=row.RiskId	
				sql_MemberId=row.MemberId
				sql_OwnerId=row.OwnerId
				sql_PartyId=row.PartyId
				sql_Name=row.Name
				sql_Name=removeComma(sql_Name.toString())
				sql_Reference=row.Reference
				sql_Reference=removeComma(sql_Reference.toString())
				sql_Email=row.Email
				sql_Email=null
				sql_Capacity=row.Capacity
				sql_AddressId=row.AddressId
				sql_AddressId=removeComma(sql_AddressId.toString())
				sql_AddressName=row.AddressName
				sql_AddressName=removeComma(sql_AddressName.toString())
				sql_Line1=row.Line1
				sql_Line1=removeComma(sql_Line1.toString())
				sql_Line2=row.Line2
				sql_Line2=removeComma(sql_Line2.toString())
				sql_Line3=row.Line3
				sql_Line3=removeComma(sql_Line3.toString())
				sql_City=row.City
				sql_City=removeComma(sql_City.toString())
				sql_State=row.StateOrProvince
				sql_State=removeComma(sql_State.toString())
				sql_Country=row.Country
				sql_Country=removeComma(sql_Country.toString())
				sql_Postcode=row.Postcode
				sql_Postcode=removeComma(sql_Postcode.toString())
				sql_PolicyEnd=row.PolicyEnd
				sql_PolicyEnd=sql_PolicyEnd.toString().replace(" ","T")
				sql_PolicyEnd=getDate(sql_PolicyEnd.toString())

				if(sql_MemberId==null)
					sql_MemberId=0
				if(sql_MemberId.toString().equals("0"))
					newsqlId=sql_OwnerId
				
				if(sql_OwnerId==null)
					sql_OwnerId=0
				if(sql_OwnerId.toString().equals("0"))
					newsqlId=sql_MemberId

				sql_MemberId=removeComma(sql_MemberId.toString())
				sql_OwnerId=removeComma(sql_OwnerId.toString())
				
				key=sql_Vesselid+"_"+sql_id

				log.info 'SQL response is received as =>'+key+","+sql_Vesselid+","+sql_id+","+ sql_MemberId+","+sql_OwnerId+","+ sql_PartyId+","+ sql_Name+","+sql_Reference+","+sql_Email+","+sql_Capacity+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_State+","+sql_Country+","+sql_Postcode
				arrCellVal=[key,sql_Vesselid,sql_id, sql_MemberId,sql_OwnerId, sql_PartyId, sql_Name,sql_Reference,sql_Email,sql_Capacity,sql_AddressId,sql_AddressName,sql_Line1,sql_Line2,sql_Line3,sql_City,sql_State,sql_Country,sql_Postcode]
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				//counter++
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}
			}//sql end
			int oldId=00
			for (int l=0;l<riskIdList.size(); l++)
			{
				int veseelId=riskIdList.get(l)

				if(oldId==veseelId)
				{
					oldId=veseelId
					break;
				}
				else
				{
					String getOwnerDetails = 
					"""
					declare
					 @Effective datetimeoffset, @Transactional datetimeoffset, @arid int--, @MaxEffective datetimeoffset
					set @Effective = '9999-12-31 00:00:00.0000000 +00:00'  --'2020-12-03 12:00:00.0000000 +00:00' --'2020-10-01 12:00:00.0000000 +00:00' --'2020-08-27 12:00:00.0000000 +01:00'  --SYSDATETIMEOFFSET() --'2020-10-01 12:00:00.0000000 +00:00' --'2020-11-02 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() --'2000-01-01 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() -- '2018-08-08 12:00:00.0000000 +00:00' --'2020-08-20 13:00:00.0000000 +01:00'  --'2020-08-11 12:00:00.0000000 +00:00'  --'2020-04-01 00:00:00.0000000 +00:00' --'2020-05-08 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET()  --'2020-04-01 01:00:00.0000000 +00:00'  -- '2020-05-01 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET()  --'2018-05-09 12:00:00.0000000 +00:00'  --'9999-12-31 11:59:59.0000000 +00:00'  -- SYSDATETIMEOFFSET() 
					set @Transactional = '9999-12-31 00:00:00.0000000 +00:00'  --'2021-02-03 15:02:09.0352017 +00:00'  --'2020-08-27 14:30:00.0000000 +01:00'  --SYSDATETIMEOFFSET() -- '2020-08-27 19:54:36.0000000 +01:00'  --'2018-08-08 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() --'2019-11-05 16:34:04.8347351 +00:00' -- SYSDATETIMEOFFSET() -- '2019-11-05 16:34:04.8347351 +00:00' -- '2020-08-11 00:00:00.0000000 +01:00' -- '2019-08-08 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET() --'2019-08-08 00:00:00.0000000 +01:00' --'2020-07-18 00:00:00.0000000 +01:00'  --'2020-05-08 00:00:00.0000000 +01:00' --'2020-07-17 11:15:09.0383540 +01:00'  -- '2020-07-17 11:08:00.0000000 +01:00' --SYSDATETIMEOFFSET() -- 
					set @arid =  """+veseelId+""" --181160--181022--90563-- 172746 
					
					select 
					distinct 
					ar.Id AS Vesselid, r.id as RiskId, r.Reference as RiskRef, 
					ja.Id as ID, null as MemberId, ap.id as OwnerId, p.Id as PartyId, p.SearchName as Name, p.Reference, p.EmailAddress as Email, 'Owner' as Capacity,
					ta.id as AddressId, ta.Name as AddressName, ta.Line1, ta.Line2, ta.Line3, ta.City, ta.StateOrProvince, rc.Name as Country, ta.Postcode, 
					AB.Id, AB.Discriminator, AB.PolicyEnd, p.EmailAddress
					from temporal.ApplicationRisk ar 
					inner join temporal.ApplicationRiskAssociatedParty arap on ar.id = arap.ApplicationRisk_Id
						and arap.EffectiveFrom <= @Effective
						and arap.EffectiveTo > @Effective
						and arap.TransactionalFrom <= @Transactional
						and arap.TransactionalTo > @Transactional
						and arap.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
					inner join temporal.AssociatedParty ap on ap.Id = arap.AssociatedParty_Id
						and ap.EffectiveFrom <= @Effective
						and ap.EffectiveTo > @Effective
						and ap.TransactionalFrom <= @Transactional
						and ap.TransactionalTo > @Transactional
						and ap.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
					inner join temporal.party p on ap.Party_Id = p.id
						and p.EffectiveFrom <= @Effective
						and p.EffectiveTo > @Effective
						and p.TransactionalFrom <= @Transactional
						and p.TransactionalTo > @Transactional
						and p.PartyBase_PhysicalDeletionAttemptPrevented = 0
					inner join temporal.JointAssured ja on p.id = ja.Party_Id
						and ja.EffectiveFrom <= @Effective
						and ja.EffectiveTo > @Effective
						and ja.TransactionalFrom <= @Transactional
						and ja.TransactionalTo > @Transactional
						and ja.JointAssured_PhysicalDeletionAttemptPrevented = 0
					inner join temporal.risk r on ar.Risk_Id = r.id
						and r.EffectiveFrom <= @Effective
						and r.EffectiveTo > @Effective
						and r.TransactionalFrom <= @Transactional
						and r.TransactionalTo > @Transactional
						and r.RiskBase_PhysicalDeletionAttemptPrevented = 0
					inner join temporal.AssociatedPartyCapacityAssociation apca on apca.AssociatedParty_Id = ap.Id 
						and apca.EffectiveFrom <= @Effective
						and apca.EffectiveTo > @Effective
						and apca.TransactionalFrom <= @Transactional
						and apca.TransactionalTo > @Transactional
						and apca.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
					inner join Temporal.[Address] ta on p.id = ta.Party_Id
						and ta.EffectiveFrom <= @Effective
						and ta.EffectiveTo > @Effective
						and ta.TransactionalFrom <= @Transactional
						and ta.TransactionalTo > @Transactional
						and ta.Address_PhysicalDeletionAttemptPrevented = 0
					inner join ref_Country rc on ta.Country_Id = rc.id
					inner join temporal.ApplicationMemberAssured ama on ama.Id = ar.ApplicationMemberAssured_Id
					inner join temporal.ApplicationBase AB on AB.Id = ama.Id
					Where apca.CapacityType_Id in (18,19)
					and AB.Discriminator='Policy'  and AB.PolicyEnd > GETDATE()
					and ar.id = @arid
					--order by 1, ID desc
					"""
					con.eachRow(getOwnerDetails)
					{
						getRow ->
						sql_Vesselid=getRow.Vesselid
						riskIdList.add(sql_Vesselid)
						sql_id=getRow.id
						sql_id=removeComma(sql_id.toString())
						sql_RiskId=getRow.RiskId	
						sql_MemberId=getRow.MemberId
						sql_OwnerId=getRow.OwnerId
						sql_PartyId=getRow.PartyId
						sql_Name=getRow.Name
						sql_Name=removeComma(sql_Name.toString())
						sql_Reference=getRow.Reference
						sql_Reference=removeComma(sql_Reference.toString())
						sql_Email=getRow.Email
						sql_Email=null
						sql_Capacity=getRow.Capacity
						sql_AddressId=getRow.AddressId
						sql_AddressId=removeComma(sql_AddressId.toString())
						sql_AddressName=getRow.AddressName
						sql_AddressName=removeComma(sql_AddressName.toString())
						sql_Line1=getRow.Line1
						sql_Line1=removeComma(sql_Line1.toString())
						sql_Line2=getRow.Line2
						sql_Line2=removeComma(sql_Line2.toString())
						sql_Line3=getRow.Line3
						sql_Line3=removeComma(sql_Line3.toString())
						sql_City=getRow.City
						sql_City=removeComma(sql_City.toString())
						sql_State=getRow.StateOrProvince
						sql_State=removeComma(sql_State.toString())
						sql_Country=getRow.Country
						sql_Country=removeComma(sql_Country.toString())
						sql_Postcode=getRow.Postcode
						sql_Postcode=removeComma(sql_Postcode.toString())
						sql_PolicyEnd=getRow.PolicyEnd
						sql_PolicyEnd=sql_PolicyEnd.toString().replace(" ","T")
						sql_PolicyEnd=getDate(sql_PolicyEnd.toString())
						
						if(sql_MemberId==null)
							sql_MemberId=0
						if(sql_MemberId.toString().equals("0"))
							newsqlId=sql_OwnerId
						
						if(sql_OwnerId==null)
							sql_OwnerId=0
						if(sql_OwnerId.toString().equals("0"))
							newsqlId=sql_MemberId
		
						sql_MemberId=removeComma(sql_MemberId.toString())
						sql_OwnerId=removeComma(sql_OwnerId.toString())
						
						//newsqlId=removeComma(newsqlId.toString())
						key=sql_Vesselid+"_"+sql_id
	
						//sql_id=removeComma(sql_id.toString())
						log.info 'SQL response is received as =>'+key+","+sql_Vesselid+","+sql_id+","+ sql_MemberId+","+sql_OwnerId+","+ sql_PartyId+","+ sql_Name+","+sql_Reference+","+sql_Email+","+sql_Capacity+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_State+","+sql_Country+","+sql_Postcode
						arrCellVal=[key,sql_Vesselid,sql_id, sql_MemberId,sql_OwnerId, sql_PartyId, sql_Name,sql_Reference,sql_Email,sql_Capacity,sql_AddressId,sql_AddressName,sql_Line1,sql_Line2,sql_Line3,sql_City,sql_State,sql_Country,sql_Postcode]
						RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
						
						try
						{
							RT.saveExcelFile(summary_File,O_Summary)
						}
						catch(Exception e) 
						{
							log.info e.toString();
						}
						counter++
					}
					
					oldId=veseelId
				}
			}
			
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldVesselId=00

			for (int j = 0; j < riskIdList.size(); j++)
			 {
			 	appRiskId=riskIdList.get(j)
			 	if(oldVesselId==appRiskId)
			 	{
			 		oldVesselId=appRiskId
			 		break;
			 	}
			 	else
			 	{
			 		log.info "Getting API response for Application Risk Id=>"+appRiskId
			 	
				 	testRunner.testCase.setPropertyValue( "AppRiskId", appRiskId.toString())
					
					testRunner.testCase.setPropertyValue('token',token)
					testRunner.runTestStepByName('ConfigByOwnerMemberByRiskByAppRiskId')
					String req='${ConfigByOwnerMemberByRiskByAppRiskId#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["ConfigByOwnerMemberByRiskByAppRiskId"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					log.info "Original API response is=>"+response
					log.info "HTTP Status Code received as=>"+httpStatusCode
					
					if(httpStatusCode.toString().equals("200"))
					{
						def jsonRes=jsonSlurper.parseText(response)
						jsonRecordCount = jsonRes.totalRecords
	
						if(!jsonRes.members.toString().equals("[]") || jsonRes.members!=null)
						{
							int noOfMembers = jsonRes.members.id.size()
							for (int k=0; k<noOfMembers; k++)
							{
								int memberAddressCount=jsonRes.members.addresses[k].size()
								for(int i=0; i<memberAddressCount; i++)
								{
									api_id=jsonRes.members.id[k]
									api_id=removeComma(api_id.toString())
									api_MembermemberId=jsonRes.members.memberId[k]
									api_MembermemberId=removeComma(api_MembermemberId.toString())
									api_MemberownerId=jsonRes.members.ownerId[k]
									api_MemberownerId=removeComma(api_MemberownerId.toString())
									api_MemberpartyId=jsonRes.members.partyId[k]
									api_Membername=jsonRes.members.name[k]
									api_Memberreference=jsonRes.members.reference[k]
									api_Memberemail=jsonRes.members.email[k]
									api_Membercapacity=jsonRes.members.capacity[k]
									api_addressesid=jsonRes.members.addresses[k].id[i]
									api_addressesid=removeComma(api_addressesid.toString())
									api_addressesaddressName=jsonRes.members.addresses[k].addressName[i]
									api_addressesaddressName=removeComma(api_addressesaddressName.toString())
									api_addressesaddressLine1=jsonRes.members.addresses[k].addressLine1[i]
									api_addressesaddressLine1=removeComma(api_addressesaddressLine1.toString())
									api_addressesaddressLine2=jsonRes.members.addresses[k].addressLine2[i]
									api_addressesaddressLine2=removeComma(api_addressesaddressLine2.toString())
									api_addressesaddressLine3=jsonRes.members.addresses[k].addressLine3[i]
									api_addressesaddressLine3=removeComma(api_addressesaddressLine3.toString())
									api_addressescity=jsonRes.members.addresses[k].city[i]
									api_addressescity=removeComma(api_addressescity.toString())
									api_addressesstate=jsonRes.members.addresses[k].state[i]
									api_addressesstate=removeComma(api_addressesstate.toString())
									api_addressescountry=jsonRes.members.addresses[k].country[i]
									api_addressescountry=removeComma(api_addressescountry.toString())
									api_addressespostalCode=jsonRes.members.addresses[k].postalCode[i]
									api_addressespostalCode=removeComma(api_addressespostalCode.toString())
									api_vesselId=jsonRes.vesselId
									
									key=api_vesselId+"_"+api_id
	
									log.info 'API response is received as =>'+key+","+api_vesselId+","+api_id+","+ api_MembermemberId+","+ api_MemberownerId+","+ api_MemberpartyId+","+ api_Membername+","+api_Memberreference+","+api_Memberemail+","+api_Membercapacity+","+api_addressesid+","+api_addressesaddressName+","+api_addressesaddressLine1+","+api_addressesaddressLine2+","+api_addressesaddressLine3+","+api_addressescity+","+api_addressesstate+","+api_addressescountry+","+api_addressespostalCode
									arrCellVal=[key,api_vesselId,api_id, api_MembermemberId, api_MemberownerId, api_MemberpartyId, api_Membername,api_Memberreference,api_Memberemail,api_Membercapacity,api_addressesid,api_addressesaddressName,api_addressesaddressLine1,api_addressesaddressLine2,api_addressesaddressLine3,api_addressescity,api_addressesstate,api_addressescountry,api_addressespostalCode];
									RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
									counter++
									total_size++
									oldVesselId=api_vesselId
								}//end of member for loop	
							}
						}//end of id for member
						if(!jsonRes.owners.toString().equals("[]") || jsonRes.owners!=null)
						{
							int noOfOwners = jsonRes.owners.id.size()
							for (int k=0; k<noOfOwners; k++)
							{
								int ownersAddressCount=jsonRes.owners.addresses[k].size()
								for(i=0; i<ownersAddressCount; i++)
								{
									api_id=jsonRes.owners.id[k]
									api_id=removeComma(api_id.toString())
									api_OwnermemberId=jsonRes.owners.memberId[k]
									api_OwnermemberId=removeComma(api_OwnermemberId.toString())
									api_OwnerownerId=jsonRes.owners.ownerId[k]
									api_OwnerownerId=removeComma(api_OwnerownerId.toString())
									api_OwnerpartyId=jsonRes.owners.partyId[k]
									api_Ownername=jsonRes.owners.name[k]
									api_Ownerreference=jsonRes.owners.reference[k]
									api_Owneremail=jsonRes.owners.email[k]
									api_Ownercapacity=jsonRes.owners.capacity[k]
									api_ownerAddressesid=jsonRes.owners.addresses[k].id[i]
									api_ownerAddressesid=removeComma(api_ownerAddressesid.toString())
									api_ownerAddressesaddressName=jsonRes.owners.addresses[k].addressName[i]
									api_ownerAddressesaddressName=removeComma(api_ownerAddressesaddressName.toString())
									api_ownerAddressesaddressLine1=jsonRes.owners.addresses[k].addressLine1[i]
									api_ownerAddressesaddressLine1=removeComma(api_ownerAddressesaddressLine1.toString())
									api_ownerAddressesaddressLine2=jsonRes.owners.addresses[k].addressLine2[i]
									api_ownerAddressesaddressLine2=removeComma(api_ownerAddressesaddressLine2.toString())
									api_ownerAddressesaddressLine3=jsonRes.owners.addresses[k].addressLine3[i]
									api_ownerAddressesaddressLine3=removeComma(api_ownerAddressesaddressLine3.toString())
									api_ownerAddressescity=jsonRes.owners.addresses[k].city[i]
									api_ownerAddressescity=removeComma(api_ownerAddressescity.toString())
									api_ownerAddressesstate=jsonRes.owners.addresses[k].state[i]
									api_ownerAddressesstate=removeComma(api_ownerAddressesstate.toString())
									api_ownerAddressescountry=jsonRes.owners.addresses[k].country[i]
									api_ownerAddressescountry=removeComma(api_ownerAddressescountry.toString())
									api_ownerAddressespostalCode=jsonRes.owners.addresses[k].postalCode[i]
									api_ownerAddressespostalCode=removeComma(api_ownerAddressespostalCode.toString())
									api_vesselId=jsonRes.vesselId
										
									key=api_vesselId+"_"+api_id
	
									log.info 'API response is received as =>'+key+","+api_vesselId+","+api_id+","+ api_OwnermemberId+","+ api_OwnerownerId+","+ api_OwnerpartyId+","+ api_Ownername+","+api_Ownerreference+","+api_Owneremail+","+api_Ownercapacity+","+api_ownerAddressesid+","+api_ownerAddressesaddressName+","+api_ownerAddressesaddressLine1+","+api_ownerAddressesaddressLine2+","+api_ownerAddressesaddressLine3+","+api_ownerAddressescity+","+api_ownerAddressesstate+","+api_ownerAddressescountry+","+api_ownerAddressespostalCode
									arrCellVal=[key,api_vesselId,api_id, api_OwnermemberId, api_OwnerownerId, api_OwnerpartyId, api_Ownername,api_Ownerreference,api_Owneremail,api_Ownercapacity,api_ownerAddressesid,api_ownerAddressesaddressName,api_ownerAddressesaddressLine1,api_ownerAddressesaddressLine2,api_ownerAddressesaddressLine3,api_ownerAddressescity,api_ownerAddressesstate,api_ownerAddressescountry,api_ownerAddressespostalCode];
									RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
									counter++
									total_size++
									oldVesselId=api_vesselId
								}//end of owner for loop	
							}
						}//end of id for owner
					}//end of if 200 ok status
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++
					}
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}	
			 		//oldVesselId=appRiskId
			 	}
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Configure By Owner Member By Risk By Application Risk Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>AppRiskId</con:name><con:value>180261</con:value></con:property></con:properties></con:testCase><con:testCase id="fbdf5494-0030-408a-8380-90f542177805" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_RisksByApplicationRiskId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="RiskByAppRiskId" id="81a031bd-e294-4538-8781-8d1bb9dd25f1"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/risks/${#TestCase#appRiskId}" methodName="RisksByApplicationRiskId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RiskByAppRiskId" id="1f489ee0-a0bd-4659-a8b9-5451a5f096ea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/risks/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="RisksByApplicationRiskId" id="022ade77-3e23-491c-b546-c6e02d89dde9" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Risks By Application Risk Id************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
"""
USE TOM
select DISTINCT
TOP 10
AR.Id as ApplicationRiskId, R.Id as RiskId, R.Reference, AMA.MemberAssured_Id as MemberId, MA.Reference as MemberReference, P.OrganisationName as MemberName,
AB.Id as ApplicationId, AB.Reference as ApplicationReference, AB.Discriminator as ApplicationType, [User].EmailAddress, 
AB.PolicyStart, AB.PolicyEnd, RV.Id as VesselId, RV.ImoNumber, VT.Name as VesselType, R.Name as VesselName, RV.CallSign, RV.GrossTonnage,
RV.NumberOfGuests as NoOfPassengers, RV.YearBuilt, CON.ShortCode as FlagCountryCode, CON.Name as FlagCountryName, RP.ShortCode as PortOfRegistryCode, 
RP.Name as PortOfRegistryName, RST.Name as RiskCategoryName, RV.TrademarkEngineModelNumber, VM.Name as VesselMake, RV.EngineHorsePower, RV.TenderSerialNumber, 
RV.OutboardMotorSerialNumber
from ApplicationRisk AR 
inner join Risk R on R.Id = AR.Risk_Id
inner join ApplicationMemberAssured AMA on AMA.Id=AR.ApplicationMemberAssured_Id
inner join MemberAssured MA on MA.Id=AMA.MemberAssured_Id
inner join Party P on P.Id=MA.Party_Id
inner join ApplicationBase AB on AB.Id = AMA.Application_Id
join [user] on AB.Underwriter_Id = [User].Id
inner join History.RiskVessel RV on RV.Id= R.Id
inner join ref_RiskSubType RST on RST.Id=RV.Category_Id
inner join ref_VesselType VT on VT.Id=RV.Type_Id
left join ref_Country Con on Con.id = RV.Flag_Id
left join ref_Port RP on RP.Id = RV.PortOfRegistry_Id
right join ref_VesselMake VM on VM.Id = RV.VesselMake_Id
where AB.Discriminator not in ('AdditionalCoverQuote', 'RenewalQuote')
--and AR.Id=179030
order by 1 desc
"""
				
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskByApplicationRiskId.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskByApplicationRiskId.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskByApplicationRiskId.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskByApplicationRiskId"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskByApplicationRiskId"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskByApplicationRiskId"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationRiskId"+","+"SQL_RiskId"+","+"SQL_Reference"+","+"SQL_MemberId"+","+"SQL_MemberReference"+","+"SQL_MemberName"+","+"SQL_ApplicationId"+","+"SQL_ApplicationReference"+","+"SQL_ApplicationType"+","+"SQL_EmailAddress"+","+"SQL_PolicyStart"+","+"SQL_PolicyEnd"+","+"SQL_VesselId"+","+"SQL_ImoNumber"+","+"SQL_VesselType"+","+"SQL_VesselName"+","+"SQL_CallSign"+","+"SQL_GrossTonnage"+","+"SQL_NoOfPassengers"+","+"SQL_YearBuilt"+","+"SQL_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"SQL_TrademarkEngineModelNumber"+","+"SQL_VesselMake"+","+"SQL_EngineHorsePower"+","+"SQL_TenderSerialNumber"+","+"SQL_OutboardMotorSerialNumber")
apiWriter.println("API_ApplicationRiskId"+","+"API_RiskId"+","+"API_Reference"+","+"API_MemberId"+","+"API_MemberReference"+","+"API_MemberName"+","+"API_ApplicationId"+","+"API_ApplicationReference"+","+"API_ApplicationType"+","+"API_EmailAddress"+","+"API_PolicyStart"+","+"API_PolicyEnd"+","+"API_VesselId"+","+"API_ImoNumber"+","+"API_VesselType"+","+"API_VesselName"+","+"API_CallSign"+","+"API_GrossTonnage"+","+"API_NoOfPassengers"+","+"API_YearBuilt"+","+"API_FlagCountryCode"+","+"API_FlagCountryName"+","+"API_PortOfRegistryCode"+","+"API_PortOfRegistryName"+","+"API_RiskCategoryName"+","+"API_TrademarkEngineModelNumber"+","+"API_VesselMake"+","+"API_EngineHorsePower"+","+"API_TenderSerialNumber"+","+"API_OutboardMotorSerialNumber")
compareWriter.println("SQL_ApplicationRiskId"+","+"API_ApplicationRiskId"+","+"SQL_RiskId"+","+"API_RiskId"+","+"SQL_Reference"+","+"API_Reference"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_ApplicationType"+","+"API_ApplicationType"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_PolicyStart"+","+"API_PolicyStart"+","+"SQL_PolicyEnd"+","+"API_PolicyEnd"+","+"SQL_VesselId"+","+"API_VesselId"+","+"SQL_ImoNumber"+","+"API_ImoNumber"+","+"SQL_VesselType"+","+"API_VesselType"+","+"SQL_VesselName"+","+"API_VesselName"+","+"SQL_CallSign"+","+"API_CallSign"+","+"SQL_GrossTonnage"+","+"API_GrossTonnage"+","+"SQL_NoOfPassengers"+","+"API_NoOfPassengers"+","+"SQL_YearBuilt"+","+"API_YearBuilt"+","+"SQL_FlagCountryCode"+","+"API_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"API_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"API_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"API_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"API_RiskCategoryName"+","+"SQL_TrademarkEngineModelNumber"+","+"API_TrademarkEngineModelNumber"+","+"SQL_VesselMake"+","+"API_VesselMake"+","+"SQL_EngineHorsePower"+","+"API_EngineHorsePower"+","+"SQL_TenderSerialNumber"+","+"API_TenderSerialNumber"+","+"SQL_OutboardMotorSerialNumber"+","+"API_OutboardMotorSerialNumber"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter = 0;
//String field=null

con.eachRow(sqlstmt)
{	
	row ->
		sql_ApplicationRiskId=row.ApplicationRiskId
		sql_RiskId=row.RiskId
		sql_Reference=row.Reference
		sql_MemberId=row.MemberId
		sql_MemberReference=row.MemberReference
		sql_MemberName=row.MemberName
		sql_MemberName=removeBracketsAndComma(sql_MemberName.toString())
		sql_ApplicationId=row.ApplicationId
		sql_ApplicationReference=row.ApplicationReference
		sql_ApplicationType=row.ApplicationType
		sql_EmailAddress=row.EmailAddress
		sql_PolicyStart=row.PolicyStart
		sql_PolicyEnd=row.PolicyEnd
		sql_VesselId=row.VesselId
		sql_ImoNumber=row.ImoNumber
		sql_VesselType=row.VesselType
		sql_VesselName=row.VesselName
		sql_VesselName=removeBracketsAndComma(sql_VesselName.toString())
		sql_CallSign=row.CallSign
		sql_GrossTonnage=row.GrossTonnage
		sql_NoOfPassengers=row.NoOfPassengers
		sql_YearBuilt=row.YearBuilt
		sql_FlagCountryCode=row.FlagCountryCode
		sql_FlagCountryCode=removeBracketsAndComma(sql_FlagCountryCode.toString())
		sql_FlagCountryName=row.FlagCountryName
		sql_FlagCountryName=removeBracketsAndComma(sql_FlagCountryName.toString())
		sql_PortOfRegistryCode=row.PortOfRegistryCode
		sql_PortOfRegistryCode=removeBracketsAndComma(sql_PortOfRegistryCode.toString())
		sql_PortOfRegistryName=row.PortOfRegistryName
		sql_PortOfRegistryName=removeBracketsAndComma(sql_PortOfRegistryName.toString())
		sql_RiskCategoryName=row.RiskCategoryName
		sql_TrademarkEngineModelNumber=row.TrademarkEngineModelNumber
		sql_VesselMake=row.VesselMake
		sql_EngineHorsePower=row.EngineHorsePower
		sql_TenderSerialNumber=row.TenderSerialNumber
		sql_OutboardMotorSerialNumber=row.OutboardMotorSerialNumber

		sqlWriter.println(sql_ApplicationRiskId+","+sql_RiskId+","+sql_Reference+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_EmailAddress+","+sql_PolicyStart+","+sql_PolicyEnd+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselType+","+sql_VesselName+","+sql_CallSign+","+sql_GrossTonnage+","+sql_NoOfPassengers+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+sql_VesselMake+","+sql_EngineHorsePower+","+sql_TenderSerialNumber+","+sql_OutboardMotorSerialNumber)
		log.info "SQL response is : "+sql_ApplicationRiskId+","+sql_RiskId+","+sql_Reference+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_EmailAddress+","+sql_PolicyStart+","+sql_PolicyEnd+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselType+","+sql_VesselName+","+sql_CallSign+","+sql_GrossTonnage+","+sql_NoOfPassengers+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+sql_VesselMake+","+sql_EngineHorsePower+","+sql_TenderSerialNumber+","+sql_OutboardMotorSerialNumber

		//Set the ApplicationRisk ID at test case level
		String appRiskId = sql_ApplicationRiskId
		testRunner.testCase.setPropertyValue("appRiskId", appRiskId)
		
		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)

		//Run the test step to get response
		testRunner.runTestStepByName('RiskByAppRiskId')
		String req='${RiskByAppRiskId#Response}'
		response=context.expand(req)
		//log.info "API Response received is :"+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["RiskByAppRiskId"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info("HTTP status code: " + httpStatusCode)
	
		String error = response
		if(httpStatusCode.equals("200"))
		{
			api_ApplicationRiskId=jsonRes.applicationRiskId
			api_RiskId=jsonRes.id
			api_Reference=jsonRes.reference
			api_MemberId=jsonRes.memberId
			api_MemberReference=jsonRes.memberReference
			api_MemberName=jsonRes.memberName
			api_MemberName=removeBracketsAndComma(api_MemberName.toString())
			api_ApplicationId=jsonRes.applicationId
			api_ApplicationReference=jsonRes.applicationReference
			api_ApplicationType=jsonRes.applicationType
			api_EmailAddress=jsonRes.applicationUnderwriterEmail
			api_PolicyStart=jsonRes.policyStartDate
			api_PolicyEnd=jsonRes.policyEndDate
			api_VesselId=jsonRes.vessel.id
			api_ImoNumber=jsonRes.vessel.imoNumber
			api_VesselType=jsonRes.vessel.vesselType
			api_VesselName=jsonRes.vessel.vesselName
			api_VesselName=removeBracketsAndComma(api_VesselName.toString())
			api_CallSign=jsonRes.vessel.callSign
			api_GrossTonnage=jsonRes.vessel.grossTonnage
			api_NoOfPassengers=jsonRes.vessel.noOfPassengers
			api_YearBuilt=jsonRes.vessel.yearBuilt
			api_FlagCountryCode=jsonRes.vessel.flagCountryCode
			api_FlagCountryCode=removeBracketsAndComma(api_FlagCountryCode.toString())
			api_FlagCountryName=jsonRes.vessel.flagCountryName
			api_FlagCountryName=removeBracketsAndComma(api_FlagCountryName.toString())
			api_PortOfRegistryCode=jsonRes.vessel.portOfRegistryCode
			api_PortOfRegistryCode=removeBracketsAndComma(api_PortOfRegistryCode.toString())
			api_PortOfRegistryName=jsonRes.vessel.portOfRegistryName
			api_PortOfRegistryName=removeBracketsAndComma(api_PortOfRegistryName.toString())
			api_RiskCategoryName=jsonRes.vessel.riskCategoryName
			api_TrademarkEngineModelNumber=jsonRes.vessel.trademarkAndEngineModel
			api_VesselMake=jsonRes.vessel.vesselMake
			api_EngineHorsePower=jsonRes.vessel.engineHorsePower
			api_TenderSerialNumber=jsonRes.vessel.tenderSerialNumbers
			api_OutboardMotorSerialNumber=jsonRes.vessel.motorSerialNumbers

			apiWriter.println(api_ApplicationRiskId+","+api_RiskId+","+api_Reference+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_PolicyStart+","+api_PolicyEnd+","+api_VesselId+","+api_ImoNumber+","+api_VesselType+","+api_VesselName+","+api_CallSign+","+api_GrossTonnage+","+api_NoOfPassengers+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_TrademarkEngineModelNumber+","+api_VesselMake+","+api_EngineHorsePower+","+api_TenderSerialNumber+","+api_OutboardMotorSerialNumber)
			log.info "API response received as : "+api_ApplicationRiskId+","+api_RiskId+","+api_Reference+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_PolicyStart+","+api_PolicyEnd+","+api_VesselId+","+api_ImoNumber+","+api_VesselType+","+api_VesselName+","+api_CallSign+","+api_GrossTonnage+","+api_NoOfPassengers+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_TrademarkEngineModelNumber+","+api_VesselMake+","+api_EngineHorsePower+","+api_TenderSerialNumber+","+api_OutboardMotorSerialNumber
			
			if(
				api_ApplicationRiskId.toString().equals(sql_ApplicationRiskId.toString()) && 
				api_RiskId.toString().equals(sql_RiskId.toString()) && 
				api_Reference.toString().equals(sql_Reference.toString()) && 
				api_MemberId.toString().equals(sql_MemberId.toString()) && 
				api_MemberReference.toString().equals(sql_MemberReference.toString()) && 
				api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && 
				api_ApplicationId.toString().equals(sql_ApplicationId.toString()) && 
				api_ApplicationReference.toString().equals(sql_ApplicationReference.toString()) && 
				api_ApplicationType.toString().toUpperCase().equals(sql_ApplicationType.toString().toUpperCase()) && 
				api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && 
				api_VesselId.toString().equals(sql_VesselId.toString()) && 
				api_ImoNumber.toString().equals(sql_ImoNumber.toString()) && 
				api_VesselType.toString().equals(sql_VesselType.toString()) && 
				api_VesselName.toString().toUpperCase().equals(sql_VesselName.toString().toUpperCase()) && 
				api_CallSign.toString().equals(sql_CallSign.toString()) && 
				api_GrossTonnage.toString().equals(sql_GrossTonnage.toString()) && 
				api_NoOfPassengers.toString().equals(sql_NoOfPassengers.toString()) && 
				api_YearBuilt.toString().equals(sql_YearBuilt.toString()) && 
				api_FlagCountryCode.toString().toUpperCase().equals(sql_FlagCountryCode.toString().toUpperCase()) && 
				api_FlagCountryName.toString().toUpperCase().equals(sql_FlagCountryName.toString().toUpperCase()) && 
				api_PortOfRegistryCode.toString().toUpperCase().equals(sql_PortOfRegistryCode.toString().toUpperCase()) && 
				api_PortOfRegistryName.toString().toUpperCase().equals(sql_PortOfRegistryName.toString().toUpperCase()) && 
				api_RiskCategoryName.toString().toUpperCase().equals(sql_RiskCategoryName.toString().toUpperCase()) && 
				api_TrademarkEngineModelNumber.toString().equals(sql_TrademarkEngineModelNumber.toString()) && 
				api_VesselMake.toString().equals(sql_VesselMake.toString()) && 
				api_EngineHorsePower.toString().equals(sql_EngineHorsePower.toString()) && 
				api_TenderSerialNumber.toString().equals(sql_TenderSerialNumber.toString()) && 
				api_OutboardMotorSerialNumber.toString().equals(sql_OutboardMotorSerialNumber.toString())
			)
			{
				compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskId+","+api_RiskId+","+sql_Reference+","+api_Reference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_PolicyStart+","+api_PolicyStart+","+sql_PolicyEnd+","+api_PolicyEnd+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselType+","+api_VesselType+","+sql_VesselName+","+api_VesselName+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_NoOfPassengers+","+api_NoOfPassengers+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+sql_VesselMake+","+api_VesselMake+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TenderSerialNumber+","+api_TenderSerialNumber+","+sql_OutboardMotorSerialNumber+","+api_OutboardMotorSerialNumber+","+"Test Case Passed")
				log.info "Details are matching hence test case is passed"
			}
			else
			{	
				compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskId+","+api_RiskId+","+sql_Reference+","+api_Reference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_PolicyStart+","+api_PolicyStart+","+sql_PolicyEnd+","+api_PolicyEnd+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselType+","+api_VesselType+","+sql_VesselName+","+api_VesselName+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_NoOfPassengers+","+api_NoOfPassengers+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+sql_VesselMake+","+api_VesselMake+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TenderSerialNumber+","+api_TenderSerialNumber+","+sql_OutboardMotorSerialNumber+","+api_OutboardMotorSerialNumber+","+"Test Case Failed")
				log.info "Details are not matching hence test case is failed"
			}
		}
		else if(httpStatusCode.equals("401"))
		{
			apiWriter.println(sql_ApplicationRiskId+","+jsonRes.message)
			compareWriter.println(sql_ApplicationRiskId+","+jsonRes.message)
			log.info sql_ApplicationRiskId+","+jsonRes.message
		}
		else
		{
			log.info sql_ApplicationRiskId+","+"Failed API response received as :"+response
		}
		counter=counter+1;
		log.info "Record number "+counter+" is checked."
}

public String removeBracketsAndComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if (field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString = newDateTimeString.replace(":","-")
log.info "************Execution Finished at "+newDateTimeString+"************"
log.info "************Execution Finished for Risks By Application Risk Id************"]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="2d65e056-7451-43e7-9b33-12cdb4b6156b"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import java.text.SimpleDateFormat

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList&lt;String> arrayList = new ArrayList&lt;>();

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_RisksByApplicationRiskId"))
		tcModuleName="RisksByApplicationRiskId"
		
	if(tcModuleName.toString().equals("RisksByApplicationRiskId"))
	{
		log.info "Test Execution started for getting Risk Details as per Application Risk Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["ApplicationRiskId","RiskId","Reference","MemberId","MemberReference","MemberName","ApplicationId","ApplicationReference","ApplicationType","ProductType","EmailAddress","PolicyStart","PolicyEnd","VesselId","ImoNumber","VesselType","VesselName","CallSign","GrossTonnage","NoOfPassengers","YearBuilt","FlagCountryCode","FlagCountryName","PortOfRegistryCode","PortOfRegistryName","EnteredDate","RiskCategoryName","TrademarkEngineModelNumber","EngineHorsePower","TenderSerialNumber","OutboardMotorSerialNumber","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			date= new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
			date = new Date()
			getDateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
			String todaysDate=getDateFormat.format(date)
			todaysDate=todaysDate.toString().replace("/","-")

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
			select DISTINCT
			TOP 100
			AR.Id as ApplicationRiskId, R.Id as RiskId, R.Reference, AMA.MemberAssured_Id as MemberId, MA.Reference as MemberReference, P.OrganisationName as MemberName,
			AB.Id as ApplicationId, AB.Reference as ApplicationReference, AB.Discriminator as ApplicationType, 
			case when ret.Name = 'Plain Language Wording' and t.name = 'Yacht Liability Insurance' then 'YACHT' else 'P&amp;I' end as ProductType, [User].EmailAddress, 
			AB.PolicyStart, AB.PolicyEnd, RV.Id as VesselId, RV.ImoNumber, VT.Name as VesselType, R.Name as VesselName, RV.CallSign, RV.GrossTonnage,
			RV.PassengerCarryingCapacity as NoOfPassengers, RV.YearBuilt, CON.ShortCode as FlagCountryCode, CON.Name as FlagCountryName, RP.ShortCode as PortOfRegistryCode, 
			--RV.NumberOfGuests as NoOfPassengers,
			RP.Name as PortOfRegistryName, R.Entered as EnteredDate,RST.Name as RiskCategoryName, RV.TrademarkEngineModelNumber,  RV.EngineHorsePower, RV.TenderSerialNumber, 
			RV.OutboardMotorSerialNumber
			--C.ShortCode, VM.Name as VesselMake,
			from ApplicationRisk AR 
			inner join Risk R on R.Id = AR.Risk_Id
			inner join ApplicationMemberAssured AMA on AMA.Id=AR.ApplicationMemberAssured_Id
			inner join MemberAssured MA on MA.Id=AMA.MemberAssured_Id
			inner join Party P on P.Id=MA.Party_Id
			inner join ApplicationBase AB on AB.Id = AMA.Application_Id
			join [user] on AB.Underwriter_Id = [User].Id
			inner join History.RiskVessel RV on RV.Id= R.Id
			inner join ref_RiskSubType RST on RST.Id=RV.Category_Id
			inner join ref_VesselType VT on VT.Id=RV.Type_Id
			left join ref_Country Con on Con.id = RV.Flag_Id
			left join ref_Port RP on RP.Id = RV.PortOfRegistry_Id
			right join ref_VesselMake VM on VM.Id = RV.VesselMake_Id
			inner join ApplicationCover AC on AB.Id = AC.Application_Id
			inner Join TemplateCover TC on AC.TemplateCover_Id = TC.Id
			inner join Template T on T.Id=TC.Template_Id
			--inner join Cover C on C.Id=TC.Cover_Id
			inner join ref_EntryType ret on ret.Id = t.EntryType_Id
			where AB.Discriminator not in ('AdditionalCoverQuote', 'RenewalQuote')
			--and AR.Id=179085
			order by 1 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_ApplicationRiskId=row.ApplicationRiskId
				arrayList.add(sql_ApplicationRiskId)
				log.info "Checking DB for Application Risk Id=>"+sql_ApplicationRiskId
				sql_RiskId=row.RiskId
				sql_RiskId=removeComma(sql_RiskId.toString())
				sql_Reference=row.Reference
				sql_Reference=removeComma(sql_Reference.toString())
				sql_MemberId=row.MemberId
				sql_MemberReference=row.MemberReference
				sql_MemberReference=removeComma(sql_MemberReference.toString())
				sql_MemberName=row.MemberName
				sql_MemberName=removeComma(sql_MemberName.toString())
				sql_ApplicationId=row.ApplicationId
				sql_ApplicationReference=row.ApplicationReference
				sql_ApplicationReference=removeComma(sql_ApplicationReference.toString())
				sql_ApplicationType=row.ApplicationType
				sql_ProductType=row.ProductType
				sql_EmailAddress=row.EmailAddress
				
				sql_PolicyStart=row.PolicyStart
				sql_PolicyStart=sql_PolicyStart.toString().replace(" ", "T")
				sql_PolicyStart=getDate(sql_PolicyStart.toString())
				
				sql_PolicyEnd=row.PolicyEnd
				sql_PolicyEnd=sql_PolicyEnd.toString().replace(" ", "T")
				sql_PolicyEnd=getDate(sql_PolicyEnd.toString())
				
				sql_VesselId=row.VesselId
				sql_ImoNumber=row.ImoNumber
				sql_ImoNumber=removeComma(sql_ImoNumber.toString())
				sql_VesselType=row.VesselType
				sql_VesselType=removeComma(sql_VesselType.toString())
				sql_VesselName=row.VesselName
				sql_VesselName=removeComma(sql_VesselName.toString())
				sql_CallSign=row.CallSign
				sql_CallSign=removeComma(sql_CallSign.toString())
				sql_GrossTonnage=row.GrossTonnage
				sql_NoOfPassengers=row.NoOfPassengers
				sql_YearBuilt=row.YearBuilt
				sql_FlagCountryCode=row.FlagCountryCode
				sql_FlagCountryName=row.FlagCountryName
				sql_FlagCountryName=removeComma(sql_FlagCountryName.toString())
				sql_PortOfRegistryCode=row.PortOfRegistryCode
				sql_PortOfRegistryName=row.PortOfRegistryName
				sql_PortOfRegistryName=removeComma(sql_PortOfRegistryName.toString())
				
				sql_EnteredDate=row.EnteredDate
				sql_EnteredDate=sql_EnteredDate.toString().replace(" ", "T")
				sql_EnteredDate=getDate(sql_EnteredDate.toString())
				
				sql_RiskCategoryName=row.RiskCategoryName
				sql_TrademarkEngineModelNumber=row.TrademarkEngineModelNumber
				//sql_VesselMake=row.VesselMake
				//sql_VesselMake=removeComma(sql_VesselMake.toString())
				sql_EngineHorsePower=row.EngineHorsePower
				sql_TenderSerialNumber=row.TenderSerialNumber
				sql_OutboardMotorSerialNumber=row.OutboardMotorSerialNumber

				log.info "SQL Response is received as =>"+sql_ApplicationRiskId+","+sql_RiskId+","+sql_Reference+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_ProductType+","+sql_EmailAddress+","+sql_PolicyStart+","+sql_PolicyEnd+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselType+","+sql_VesselName+","+sql_CallSign+","+sql_GrossTonnage+","+sql_NoOfPassengers+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_EnteredDate+","+sql_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+sql_EngineHorsePower+","+sql_TenderSerialNumber+","+sql_OutboardMotorSerialNumber
				//arrCellVal=[sql_ApplicationRiskId,sql_RiskId,sql_Reference,sql_MemberId,sql_MemberReference,sql_MemberName,sql_ApplicationId,sql_ApplicationReference,sql_ApplicationType,sql_ProductType,sql_EmailAddress,sql_PolicyStart,sql_PolicyEnd,sql_VesselId,sql_ImoNumber,sql_VesselType,sql_VesselName,sql_CallSign,sql_GrossTonnage,sql_NoOfPassengers,sql_YearBuilt,sql_FlagCountryCode,sql_FlagCountryName,sql_PortOfRegistryCode,sql_PortOfRegistryName,sql_EnteredDate,sql_RiskCategoryName,sql_TrademarkEngineModelNumber,sql_VesselMake,sql_EngineHorsePower,sql_TenderSerialNumber,sql_OutboardMotorSerialNumber];
				arrCellVal=[sql_ApplicationRiskId,sql_RiskId,sql_Reference,sql_MemberId,sql_MemberReference,sql_MemberName,sql_ApplicationId,sql_ApplicationReference,sql_ApplicationType,sql_ProductType,sql_EmailAddress,sql_PolicyStart,sql_PolicyEnd,sql_VesselId,sql_ImoNumber,sql_VesselType,sql_VesselName,sql_CallSign,sql_GrossTonnage,sql_NoOfPassengers,sql_YearBuilt,sql_FlagCountryCode,sql_FlagCountryName,sql_PortOfRegistryCode,sql_PortOfRegistryName,sql_EnteredDate,sql_RiskCategoryName,sql_TrademarkEngineModelNumber,sql_EngineHorsePower,sql_TenderSerialNumber,sql_OutboardMotorSerialNumber];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				//db_size++
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
				
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start

			for (int j = 0; j &lt; arrayList.size(); j++)
			 {
			 	appRiskId=arrayList.get(j)
			 	log.info "Getting API response for Application Risk Id =>"+appRiskId
				 	
				 	testRunner.testCase.setPropertyValue( "appRiskId", appRiskId.toString())
					
					testRunner.testCase.setPropertyValue('token',token)
					testRunner.runTestStepByName('RiskByAppRiskId')
					String req='${RiskByAppRiskId#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["RiskByAppRiskId"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					
					if(httpStatusCode.toString().equals("200"))
					{
						def jsonRes=jsonSlurper.parseText(response)
						
						api_ApplicationRiskId=jsonRes.applicationRiskId
						api_RiskId=jsonRes.id
						api_RiskId=removeComma(api_RiskId.toString())
						api_Reference=jsonRes.reference
						api_Reference=removeComma(api_Reference.toString())
						api_MemberId=jsonRes.memberId
						api_MemberReference=jsonRes.memberReference
						api_MemberReference=removeComma(api_MemberReference.toString())
						api_MemberName=jsonRes.memberName
						api_MemberName=removeComma(api_MemberName.toString())
						api_ApplicationId=jsonRes.applicationId
						api_ApplicationReference=jsonRes.applicationReference
						api_ApplicationReference=removeComma(api_ApplicationReference.toString())
						api_ApplicationType=jsonRes.applicationType
						api_ProductType=jsonRes.applicationProductType
						api_EmailAddress=jsonRes.applicationUnderwriterEmail
						api_PolicyStart=jsonRes.policyStartDate
						api_PolicyStart=removeComma(api_PolicyStart.toString())
						api_PolicyStart=getDate(api_PolicyStart.toString())
						
						api_PolicyEnd=jsonRes.policyEndDate
						api_PolicyEnd=removeComma(api_PolicyEnd.toString())
						api_PolicyEnd=getDate(api_PolicyEnd.toString())
						
						api_VesselId=jsonRes.vessel.id
						api_ImoNumber=jsonRes.vessel.imoNumber
						api_ImoNumber=removeComma(api_ImoNumber.toString())
						api_VesselType=jsonRes.vessel.vesselType
						api_VesselType=removeComma(api_VesselType.toString())
						api_VesselName=jsonRes.vessel.vesselName
						api_VesselName=removeComma(api_VesselName.toString())
						api_CallSign=jsonRes.vessel.callSign
						api_GrossTonnage=jsonRes.vessel.grossTonnage
						api_NoOfPassengers=jsonRes.vessel.noOfPassengers
						api_YearBuilt=jsonRes.vessel.yearBuilt
						api_FlagCountryCode=jsonRes.vessel.flagCountryCode
						api_FlagCountryName=jsonRes.vessel.flagCountryName
						api_FlagCountryName=removeComma(api_FlagCountryName.toString())
						api_PortOfRegistryCode=jsonRes.vessel.portOfRegistryCode
						api_PortOfRegistryName=jsonRes.vessel.portOfRegistryName
						api_PortOfRegistryName=removeComma(api_PortOfRegistryName.toString())
						api_EnteredDate=jsonRes.vessel.enteredDate
						api_EnteredDate=removeComma(api_EnteredDate.toString())
						api_EnteredDate=getDate(api_EnteredDate.toString())
						
						api_RiskCategoryName=jsonRes.vessel.riskCategoryName
						api_TrademarkEngineModelNumber=jsonRes.vessel.trademarkAndEngineModel
						//api_VesselMake=jsonRes.vessel.vesselMake
						//api_VesselMake=removeComma(api_VesselMake.toString())
						api_EngineHorsePower=jsonRes.vessel.engineHorsePower
						api_TenderSerialNumber=jsonRes.vessel.tenderSerialNumbers
						api_OutboardMotorSerialNumber=jsonRes.vessel.motorSerialNumbers
						
						log.info "API Response is received as =>"+api_ApplicationRiskId+","+api_RiskId+","+api_Reference+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_ProductType+","+api_EmailAddress+","+api_PolicyStart+","+api_PolicyEnd+","+api_VesselId+","+api_ImoNumber+","+api_VesselType+","+api_VesselName+","+api_CallSign+","+api_GrossTonnage+","+api_NoOfPassengers+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_EnteredDate+","+api_RiskCategoryName+","+api_TrademarkEngineModelNumber+","+api_EngineHorsePower+","+api_TenderSerialNumber+","+api_OutboardMotorSerialNumber
						//arrCellVal=[api_ApplicationRiskId,api_RiskId,api_Reference,api_MemberId,api_MemberReference,api_MemberName,api_ApplicationId,api_ApplicationReference,api_ApplicationType,api_ProductType,api_EmailAddress,api_PolicyStart,api_PolicyEnd,api_VesselId,api_ImoNumber,api_VesselType,api_VesselName,api_CallSign,api_GrossTonnage,api_NoOfPassengers,api_YearBuilt,api_FlagCountryCode,api_FlagCountryName,api_PortOfRegistryCode,api_PortOfRegistryName,api_EnteredDate,api_RiskCategoryName,api_TrademarkEngineModelNumber,api_VesselMake,api_EngineHorsePower,api_TenderSerialNumber,api_OutboardMotorSerialNumber];
						arrCellVal=[api_ApplicationRiskId,api_RiskId,api_Reference,api_MemberId,api_MemberReference,api_MemberName,api_ApplicationId,api_ApplicationReference,api_ApplicationType,api_ProductType,api_EmailAddress,api_PolicyStart,api_PolicyEnd,api_VesselId,api_ImoNumber,api_VesselType,api_VesselName,api_CallSign,api_GrossTonnage,api_NoOfPassengers,api_YearBuilt,api_FlagCountryCode,api_FlagCountryName,api_PortOfRegistryCode,api_PortOfRegistryName,api_EnteredDate,api_RiskCategoryName,api_TrademarkEngineModelNumber,api_EngineHorsePower,api_TenderSerialNumber,api_OutboardMotorSerialNumber];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++
					}//end of if status 200
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
			 }//outer for loop end for arraylist
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Risk Details as per Application Risk Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>appRiskId</con:name><con:value>179085</con:value></con:property></con:properties></con:testCase><con:testCase id="a9a870b6-19db-4cd3-ae3a-119f8e7f9381" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByDocumentsByDocumentId" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByDocByDocId" id="977c5d10-f035-4471-abcc-2383815192d0"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/documents/${#TestCase#documentId}" methodName="ApplicationByApplicationIdByDocumentsByDocumentId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByDocByDocId" id="a0e17e00-8054-4123-9d3c-2be3c46b51ef" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/75532/documents/494509</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByDocumentByDocumentId" id="6b26a96c-7a35-4ada-b47f-8a26ba1c5fa1"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList<String> appIdList = new ArrayList<>();
ArrayList<String> docIdList= new ArrayList<>();

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ApplicationByApplicationIdByDocumentsByDocumentId"))
		tcModuleName="AppByAppIdByDocByDocId"
		
	if(tcModuleName.toString().equals("AppByAppIdByDocByDocId"))
	{
		log.info "Test Execution started for getting DocumentDetails as per Application Id and Document Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Key","ApplicationId","DocumentId","DocumentTypeId","DocumentType","DocumentReference","DocumentStatusId","DocumentStatus","TransactionId","WorkflowId","DisplayName","StartDate","EndDate","AppliedDate","TransationStatus","TransactionSequence","TransactionSubTypeOtherDescription","ReasonForChange_Id","UserSuppliedText","DocumentVersion","IssuedDate","DocumentKey","RiskName","StorageId","DocumentMetaData","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
 			SELECT
			TOP 100
			AB.Id as ApplicationId, D.Id as DocumentId, D.DocumentType_Id as DocumentTypeId, rdt.Name as DocumentType, D.DocumentReference, 
			D.DocumentStatus_Id as DocumentStatusId, RDS.Name as DocumentStatus, T.Id as TransactionId,T.WorkflowId, AB.Discriminator as DisplayName, 
			T.StartDate, T.EndDate, T.AppliedDate, rts.Name as TransationStatus, T.Sequence as TransactionSequence, T.TransactionSubTypeOtherDescription,
			T.ReasonForChange_Id, D.UserSuppliedText, D.DocumentVersion,D.IssuedDate, D.DocumentKey, D.RiskName, D.StorageId, D.DocumentMetaData
			from applicationbase AB
			inner Join [TRANSACTION] T on T.Policy_Id = AB.Id and T.Transaction_PhysicalDeletionAttemptPrevented = 0
			left join ref_TransactionStatus rts on rts.Id = T.TransactionStatus_Id
			left join Document d on D.Transaction_Id = T.Id --and D.DocumentBase_PhysicalDeletionAttemptPrevented = 0
			left join ref_DocumentType rdt on rdT.Id = D.DocumentType_Id 
			left join ref_DocumentStatus rds on RDS.Id = D.DocumentStatus_Id
			where D.Id is not null and rdt.Name='TradingCertificate' and RDS.Name='Issued'
			order by 1 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row -> 
				sql_ApplicationId=row.ApplicationId
				appIdList.add(sql_ApplicationId)
				sql_DocumentId=row.DocumentId
				docIdList.add(sql_DocumentId)
				sql_DocumentTypeId=row.DocumentTypeId
				sql_DocumentType=row.DocumentType
				sql_DocumentReference=row.DocumentReference
				sql_DocumentStatusId=row.DocumentStatusId
				sql_DocumentStatus=row.DocumentStatus
				sql_TransactionId=row.TransactionId
				sql_WorkflowId=row.WorkflowId
				sql_DisplayName=row.DisplayName
				sql_StartDate=row.StartDate
				sql_StartDate=sql_StartDate.toString().split(" ")[0]
				sql_EndDate=row.EndDate
				sql_EndDate=sql_EndDate.toString()split(" ")[0]
				sql_AppliedDate=row.AppliedDate
				sql_AppliedDate=sql_AppliedDate.toString().split(" ")[0]
				sql_TransationStatus=row.TransationStatus
				sql_TransactionSequence=row.TransactionSequence
				sql_TransactionSubTypeOtherDescription=row.TransactionSubTypeOtherDescription
				sql_ReasonForChange_Id=row.ReasonForChange_Id
				sql_UserSuppliedText=row.UserSuppliedText
				sql_DocumentVersion=row.DocumentVersion
				sql_IssuedDate=row.IssuedDate
				sql_IssuedDate=sql_IssuedDate.toString().split(" ")[0]
				sql_DocumentKey=row.DocumentKey
				sql_RiskName=row.RiskName
				sql_StorageId=row.StorageId
				sql_DocumentMetaData=row.DocumentMetaData

				key=sql_ApplicationId+"_"+sql_DocumentId
				
				log.info "SQL Response is : "+sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentTypeId+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatusId+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData
				arrCellVal=[key, sql_ApplicationId,sql_DocumentId,sql_DocumentTypeId,sql_DocumentType,sql_DocumentReference,sql_DocumentStatusId,sql_DocumentStatus,sql_TransactionId,sql_WorkflowId,sql_DisplayName,sql_StartDate,sql_EndDate,sql_AppliedDate,sql_TransationStatus,sql_TransactionSequence,sql_TransactionSubTypeOtherDescription,sql_ReasonForChange_Id,sql_UserSuppliedText,sql_DocumentVersion,sql_IssuedDate,sql_DocumentKey,sql_RiskName,sql_StorageId,sql_DocumentMetaData];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
				
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldBrokerId=00

			for (int j = 0; j < appIdList.size(); j++)
			 {
			 	int applicationId=appIdList.get(j)
			 	int documentId=docIdList.get(j)
			 	log.info "Getting API response for Application Id=>"+applicationId+" and for Document Id=>"+documentId
				 	
				testRunner.testCase.setPropertyValue("applicationId", applicationId.toString())
				testRunner.testCase.setPropertyValue("documentId", documentId.toString())
					
				testRunner.testCase.setPropertyValue('token',token)
				testRunner.runTestStepByName('AppByAppIdByDocByDocId')
				String req='${AppByAppIdByDocByDocId#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
		
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["AppByAppIdByDocByDocId"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					
				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)
					
					total_size++
					
					api_DocumentId=jsonRes.id
					api_DocumentTypeId=jsonRes.documentType.id
					api_DocumentType=jsonRes.documentType.documentTypeName
					api_DocumentReference=jsonRes.documentReference
					api_DocumentStatusId=jsonRes.documentStatus.id
					api_DocumentStatus=jsonRes.documentStatus.documentStatusName
					api_TransactionId=jsonRes.transaction.id
					api_WorkflowId=jsonRes.transaction.workflowid
					if(api_WorkflowId!=null)
						api_WorkflowId=api_WorkflowId.toString().toUpperCase()
					api_DisplayName=jsonRes.transaction.displayName
					api_StartDate=jsonRes.transaction.startDate
					api_StartDate=api_StartDate.toString().split("T")[0]
					api_EndDate=jsonRes.transaction.endDate
					api_EndDate=api_EndDate.toString().split("T")[0]
					api_AppliedDate=jsonRes.transaction.appliedDate
					api_AppliedDate=api_AppliedDate.toString().split("T")[0]
					api_TransationStatus=jsonRes.transaction.transactionStatus
					api_TransactionSequence=jsonRes.transaction.transactionSequence
					api_TransactionSubTypeOtherDescription=jsonRes.transaction.transactionSubTypeOtherDescription
					api_ReasonForChange_Id=jsonRes.transaction.reasonForChange
					api_UserSuppliedText=jsonRes.userSuppliedText
					api_DocumentVersion=jsonRes.documentVersion
					api_IssuedDate=jsonRes.issuedDate
					api_IssuedDate=api_IssuedDate.toString().split("T")[0]
					api_DocumentKey=jsonRes.documentKey
					api_RiskName=jsonRes.riskName
					api_StorageId=jsonRes.storageId
					api_DocumentMetaData=jsonRes.documentMetaData

					key=applicationId+"_"+api_DocumentId
					
					log.info "API Response received as : "+key+","+applicationId+","+api_DocumentId+","+api_DocumentTypeId+","+api_DocumentType+","+api_DocumentReference+","+api_DocumentStatusId+","+api_DocumentStatus+","+api_TransactionId+","+api_WorkflowId+","+api_DisplayName+","+api_StartDate+","+api_EndDate+","+api_AppliedDate+","+api_TransationStatus+","+api_TransactionSequence+","+api_TransactionSubTypeOtherDescription+","+api_ReasonForChange_Id+","+api_UserSuppliedText+","+api_DocumentVersion+","+api_IssuedDate+","+api_DocumentKey+","+api_RiskName+","+api_StorageId+","+api_DocumentMetaData
					arrCellVal=[key,applicationId,api_DocumentId,api_DocumentTypeId,api_DocumentType,api_DocumentReference,api_DocumentStatusId,api_DocumentStatus,api_TransactionId,api_WorkflowId,api_DisplayName,api_StartDate,api_EndDate,api_AppliedDate,api_TransationStatus,api_TransactionSequence,api_TransactionSubTypeOtherDescription,api_ReasonForChange_Id,api_UserSuppliedText,api_DocumentVersion,api_IssuedDate,api_DocumentKey,api_RiskName,api_StorageId,api_DocumentMetaData];
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					counter++
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Document details as per Application Id and Document Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>75429</con:value></con:property><con:property><con:name>documentId</con:name><con:value>493452</con:value></con:property></con:properties></con:testCase><con:testCase id="c5c68985-3da2-4dae-974d-49243124e12f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_RiskWithMultipleParameters_FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse" id="d58a88ea-2a24-4c4f-b3a3-3fee31577c28"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/risks/" methodName="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse" id="8ae0a2b8-f8a7-4cb8-9dc9-0ec35ea1575c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/risks/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="risktype" value="vessel"/>
  <con:entry key="filterValue" value="Perf_test10"/>
  <con:entry key="excludeVessel" value="false"/>
  <con:entry key="filterType" value="vesselName"/>
</con:parameters><con:parameterOrder><con:entry>filterType</con:entry><con:entry>filterValue</con:entry><con:entry>risktype</con:entry><con:entry>excludeVessel</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy_FilterTypeVesselNameAndRiskTypeVesselAndExcludeVesslFalse" id="4108dfe2-a23f-4d28-8d1d-e3a039400099"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

String searchVeseelName="Perf_test10"

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_RiskWithMultipleParameters_FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse"))
		tcModuleName="RiskWithMultipleParametersExVesselFalse"
		
	if(tcModuleName.toString().equals("RiskWithMultipleParametersExVesselFalse"))
	{
		log.info "Test Execution started for getting risk details with multiple parameters when exclude vessel is false from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["ApplicationRiskId","RiskId","RiskReference","MemberId","MemberReference","OrganisationName","ApplicationId","ApplicationReference","ApplicationType","ApplicationProductType","ApplicationUnderwriterEmail","LimitId","CoverShortName","LimitName","CurrencyCode","Amount","isThePrimaryCoverLimit","ApplicationFirstTransaction","PolicyStartDate","PolicyEndDate","IsRenewalApplication","VesselId","ImoNumber","VesselName","VesselType","CallSign","EnteredDate","GrossTonnage","PassengerCarryingCapacity","YearBuilt","FlagCountryCode","FlagCountryName","PortOfRegistryCode","PortOfRegistryName","RiskCategoryName","TrademarkEngineModelNumber","VesselMake","EngineHorsePower","TenderSerialNumber","MotorSerialNumber","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			declare
			@vesselName as varchar(50)='"""+searchVeseelName+"""'
			USE TOM
			SELECT 
			DISTINCT
			ar.Id as ApplicationRiskId, r.Id as RiskId, r.Reference as RiskReference, ma.Id as MemberId,ma.Reference as MemberReference, p.OrganisationName,
			ab.Id as ApplicationId, ab.Reference as ApplicationReference, ab.Discriminator as ApplicationType, cc.Name as ApplicationProductType, 
			[user].EmailAddress as ApplicationUnderwriterEmail, l.Id as LimitId, c.ShortCode as CoverShortName, l.Name as LimitName, rc.ShortCode as CurrencyCode,
			acvltv.ValueDecimal as Amount,
			case when tc.IsPrimary = 1 then 'true' 	
			when tc.IsPrimary = 0 then 'false' 
			else NULL end as isThePrimaryCoverLimit,
			Case when ab.Discriminator = 'Quote' then (select MIN(tq.Id)
			from ApplicationBase appb 
			join [Transaction] tq on tq.QuoteBase_Id = appb.Id 
			where appb.Id = ab.Id
			group by appb.id) 
			When ab.Discriminator = 'Policy' then (select MIN(tp.Id)
			from ApplicationBase appb 
			join [Transaction] tp on tp.Policy_Id = appb.Id 
			where appb.Id = ab.Id
			group by appb.id)  end as ApplicationFirstTransaction,
			ab.PolicyStart as PolicyStartDate,
			ab.PolicyEnd as PolicyEndDate,
			case when ab.Discriminator = 'Renewal Quote' then 'true'
			else 'false' end as IsRenewalApplication,
			rv.Id as VesselId, rv.ImoNumber, r.Name as VesselName, rvt.Name as VesselType, rv.CallSign, r.Entered as EnteredDate, rv.GrossTonnage, rv.PassengerCarryingCapacity,
			rv.YearBuilt,con.ShortCode as FlagCountryCode, con.Name as FlagCountryName, rp.ShortCode as PortOfRegistryCode, rp.Name as PortOfRegistryName, 
			rst.Name as RiskCategoryName,rv.TrademarkEngineModelNumber, rvm.Name as VesselMake, rv.EngineHorsePower, rv.TenderSerialNumber,
			rv.OutboardMotorSerialNumber as MotorSerialNumber 
			from ApplicationBase ab
			join ApplicationMemberAssured ama on ab.Id = ama.Application_Id
			join MemberAssured ma on ma.id = ama.MemberAssured_Id
			join Party p on p.id = ma.Party_Id
			join ApplicationRisk ar on ar.ApplicationMemberAssured_Id = ama.id 
			join Risk r on r.id = ar.Risk_Id
			join RiskVessel rv on rv.id = r.id
			join ref_VesselType rvt on rvt.id = rv.[Type_Id]
			LEFT join ApplicationCover AC on AB.Id = AC.Application_Id 
			Left Join TemplateCover TC on AC.TemplateCover_Id = TC.Id 
			AND TC.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0 
			Left Join Cover C on TC.Cover_Id = C.Id 
			AND C.Cover_PhysicalDeletionAttemptPrevented = 0
			left join CoverCategory cc on cc.id = c.CoverCategory_Id 
			LEFT Join [User] on AB.Underwriter_Id = [User].Id 
			left join ApplicationCoverVariation acv on acv.ApplicationCover_Id = ac.id
			left join ApplicationCoverVariationLimit acvl on acvl.CoverVariation_Id = acv.id
			left join ApplicationCoverVariationLimitTagValue acvltv on acvltv.ApplicationCoverVariationLimit_Id = acvl.id
			left join TemplateCoverLimit tcl on tcl.id = acvl.TemplateCoverLimit_Id
			left join CoverLimit cl on cl.id = tcl.CoverLimit_Id
			left join Limit l on l.id = cl.Limit_Id
			left join ref_Currency rc on rc.id = acvltv.Currency_Id
			left join ref_Country con on con.id = rv.Flag_Id
			left join ref_Port rp on rp.id = rv.PortOfRegistry_Id
			left join TemplatePermittedRiskSubType tprst on tprst.Template_Id = tc.Template_Id
			left join ref_RiskSubType rst on rst.id = tprst.RiskSubType_Id
			left join ref_VesselMake rvm on rvm.id = rv.VesselMake_Id
			where ab.discriminator = 'Policy'
			and  r.Name like @vesselName
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_ApplicationRiskId=row.ApplicationRiskId
				sql_ApplicationRiskId=removeComma(sql_ApplicationRiskId.toString())
				
				sql_RiskId=row.RiskId
				sql_RiskId=removeComma(sql_RiskId.toString())
				
				sql_RiskReference=row.RiskReference
				sql_RiskReference=removeComma(sql_RiskReference.toString())
				
				sql_MemberId=row.MemberId
				sql_MemberId=removeComma(sql_MemberId.toString())
				
				sql_MemberReference=row.MemberReference
				sql_MemberReference=removeComma(sql_MemberReference.toString())
				
				sql_OrganisationName=row.OrganisationName
				sql_OrganisationName=removeComma(sql_OrganisationName.toString())
				
				sql_ApplicationId=row.ApplicationId
				sql_ApplicationId=removeComma(sql_ApplicationId.toString())
				
				sql_ApplicationReference=row.ApplicationReference
				sql_ApplicationReference=removeComma(sql_ApplicationReference.toString())
				
				sql_ApplicationType=row.ApplicationType
				sql_ApplicationType=removeComma(sql_ApplicationType.toString())
				
				sql_ApplicationProductType=row.ApplicationProductType
				sql_ApplicationProductType=removeComma(sql_ApplicationProductType.toString())
				
				sql_ApplicationUnderwriterEmail=row.ApplicationUnderwriterEmail
				sql_ApplicationUnderwriterEmail=removeComma(sql_ApplicationUnderwriterEmail.toString())
				
				sql_LimitId=row.LimitId
				sql_LimitId=removeComma(sql_LimitId.toString())
				
				sql_CoverShortName=row.CoverShortName
				sql_CoverShortName=removeComma(sql_CoverShortName.toString())
				
				sql_LimitName=row.LimitName
				sql_LimitName=removeComma(sql_LimitName.toString())
				
				sql_CurrencyCode=row.CurrencyCode
				sql_CurrencyCode=removeComma(sql_CurrencyCode.toString())
				
				sql_Amount=row.Amount
				sql_Amount=removeComma(sql_Amount.toString())
				sql_Amount=removeDotFromCurrency(sql_Amount.toString())
				
				sql_isThePrimaryCoverLimit=row.isThePrimaryCoverLimit
				sql_isThePrimaryCoverLimit=removeComma(sql_isThePrimaryCoverLimit.toString())
				
				sql_ApplicationFirstTransaction=row.ApplicationFirstTransaction
				sql_ApplicationFirstTransaction=removeComma(sql_ApplicationFirstTransaction.toString())
				sql_ApplicationFirstTransaction=sql_ApplicationFirstTransaction.toString().replace(" ", "T")
				sql_ApplicationFirstTransaction=getDate(sql_ApplicationFirstTransaction.toString())
				
				sql_PolicyStartDate=row.PolicyStartDate
				sql_PolicyStartDate=removeComma(sql_PolicyStartDate.toString())
				sql_PolicyStartDate=sql_PolicyStartDate.toString().replace(" ", "T")
				sql_PolicyStartDate=getDate(sql_PolicyStartDate.toString())
				
				sql_PolicyEndDate=row.PolicyEndDate
				sql_PolicyEndDate=removeComma(sql_PolicyEndDate.toString())
				sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" ", "T")
				sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())
				
				sql_IsRenewalApplication=row.IsRenewalApplication
				sql_IsRenewalApplication=removeComma(sql_IsRenewalApplication.toString())

				sql_VesselId=row.VesselId
				sql_VesselId=removeComma(sql_VesselId.toString())
				
				sql_ImoNumber=row.ImoNumber
				sql_ImoNumber=removeComma(sql_ImoNumber.toString())
				
				sql_VesselName=row.VesselName
				sql_VesselName=removeComma(sql_VesselName.toString())
				
				sql_VesselType=row.VesselType
				sql_VesselType=removeComma(sql_VesselType.toString())
				
				sql_CallSign=row.CallSign
				sql_CallSign=removeComma(sql_CallSign.toString())
				
				sql_EnteredDate=row.EnteredDate
				sql_EnteredDate=removeComma(sql_EnteredDate.toString())
				sql_EnteredDate=sql_EnteredDate.toString().replace(" ", "T")
				sql_EnteredDate=getDate(sql_EnteredDate.toString())
				
				sql_GrossTonnage=row.GrossTonnage
				sql_GrossTonnage=removeComma(sql_GrossTonnage.toString())
				
				sql_PassengerCarryingCapacity=row.PassengerCarryingCapacity
				sql_PassengerCarryingCapacity=removeComma(sql_PassengerCarryingCapacity.toString())
				if(sql_PassengerCarryingCapacity.toString()=="null")
							sql_PassengerCarryingCapacity="0"
				
				sql_YearBuilt=row.YearBuilt
				sql_YearBuilt=removeComma(sql_YearBuilt.toString())
				
				sql_FlagCountryCode=row.FlagCountryCode
				sql_FlagCountryCode=removeComma(sql_FlagCountryCode.toString())
				
				sql_FlagCountryName=row.FlagCountryName
				sql_FlagCountryName=removeComma(sql_FlagCountryName.toString())
				
				sql_PortOfRegistryCode=row.PortOfRegistryCode
				sql_PortOfRegistryCode=removeComma(sql_PortOfRegistryCode.toString())
				
				sql_PortOfRegistryName=row.PortOfRegistryName
				sql_PortOfRegistryName=removeComma(sql_PortOfRegistryName.toString())
				
				sql_RiskCategoryName=row.RiskCategoryName
				sql_RiskCategoryName=removeComma(sql_RiskCategoryName.toString())
				
				sql_TrademarkEngineModelNumber=row.TrademarkEngineModelNumber
				sql_TrademarkEngineModelNumber=removeComma(sql_TrademarkEngineModelNumber.toString())
				
				sql_VesselMake=row.VesselMake
				sql_VesselMake=removeComma(sql_VesselMake.toString())
				
				sql_EngineHorsePower=row.EngineHorsePower
				sql_EngineHorsePower=removeComma(sql_EngineHorsePower.toString())
				
				sql_TenderSerialNumber=row.TenderSerialNumber
				sql_TenderSerialNumber=removeComma(sql_TenderSerialNumber.toString())
			
				sql_MotorSerialNumber=row.MotorSerialNumber
				sql_MotorSerialNumber=removeComma(sql_MotorSerialNumber.toString())

				log.info "SQL Response is received as =>"+sql_ApplicationRiskId+","+sql_RiskId+","+sql_RiskReference+","+sql_MemberId+","+sql_MemberReference+","+sql_OrganisationName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+sql_LimitId+","+sql_CoverShortName+","+sql_LimitName+","+sql_CurrencyCode+","+sql_Amount+","+sql_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_EnteredDate+","+sql_GrossTonnage+","+sql_PassengerCarryingCapacity+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+sql_VesselMake+","+sql_EngineHorsePower+","+sql_TenderSerialNumber+","+sql_MotorSerialNumber
				arrCellVal=[sql_ApplicationRiskId,sql_RiskId,sql_RiskReference,sql_MemberId,sql_MemberReference,sql_OrganisationName,sql_ApplicationId,sql_ApplicationReference,sql_ApplicationType,sql_ApplicationProductType,sql_ApplicationUnderwriterEmail,sql_LimitId,sql_CoverShortName,sql_LimitName,sql_CurrencyCode,sql_Amount,sql_isThePrimaryCoverLimit,sql_ApplicationFirstTransaction,sql_PolicyStartDate,sql_PolicyEndDate,sql_IsRenewalApplication,sql_VesselId,sql_ImoNumber,sql_VesselName,sql_VesselType,sql_CallSign,sql_EnteredDate,sql_GrossTonnage,sql_PassengerCarryingCapacity,sql_YearBuilt,sql_FlagCountryCode,sql_FlagCountryName,sql_PortOfRegistryCode,sql_PortOfRegistryName,sql_RiskCategoryName,sql_TrademarkEngineModelNumber,sql_VesselMake,sql_EngineHorsePower,sql_TenderSerialNumber,sql_MotorSerialNumber];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
				
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start

			 	String filterType = "vesselName"
				testRunner.testCase.setPropertyValue("filterType",filterType)
				String filterValue = searchVeseelName
				testRunner.testCase.setPropertyValue("filterValue",filterValue)
				String risktype = "vessel"
				testRunner.testCase.setPropertyValue("risktype",risktype)
				String excludeVessel = "false"
				testRunner.testCase.setPropertyValue("excludeVessel",excludeVessel)
					
				testRunner.testCase.setPropertyValue('token',token)
				testRunner.runTestStepByName('FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse')
				String req='${FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
		
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					
				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)
					int recordCount = jsonRes.totalRecords
					for (int i=0; i&lt;recordCount; i++)
					{
						api_ApplicationRiskId=jsonRes.results.applicationRiskId[i]
						api_ApplicationRiskId=removeComma(api_ApplicationRiskId.toString())
						
						api_RiskId=jsonRes.results.id[i]
						api_RiskId=removeComma(api_RiskId.toString())
					
						api_RiskReference=jsonRes.results.reference[i]
						api_RiskReference=removeComma(api_RiskReference.toString())
						
						api_MemberId=jsonRes.results.memberId[i]
						api_MemberId=removeComma(api_MemberId.toString())
						
						api_MemberReference=jsonRes.results.memberReference[i]
						api_MemberReference=removeComma(api_MemberReference.toString())
						
						api_OrganisationName=jsonRes.results.memberName[i]
						api_OrganisationName=removeComma(api_OrganisationName.toString())
						
						api_ApplicationId=jsonRes.results.applicationId[i]
						api_ApplicationId=removeComma(api_ApplicationId.toString())
						
						api_ApplicationReference=jsonRes.results.applicationReference[i]
						api_ApplicationReference=removeComma(api_ApplicationReference.toString())
						
						api_ApplicationType=jsonRes.results.applicationType[i]
						api_ApplicationType=removeComma(api_ApplicationType.toString())
						
						api_ApplicationProductType=jsonRes.results.applicationProductType[i]
						api_ApplicationProductType=removeComma(api_ApplicationProductType.toString())
						
						api_ApplicationUnderwriterEmail=jsonRes.results.applicationUnderwriterEmail[i]
						api_ApplicationUnderwriterEmail=removeComma(api_ApplicationUnderwriterEmail.toString())
						
						api_LimitId=jsonRes.results.applicationCoverLimits.id[i]
						api_LimitId=removeComma(api_LimitId.toString())
						
						api_CoverShortName=jsonRes.results.applicationCoverLimits.coverShortName[i]
						api_CoverShortName=removeComma(api_CoverShortName.toString())
						
						api_LimitName=jsonRes.results.applicationCoverLimits.limitName[i]
						api_LimitName=removeComma(api_LimitName.toString())
						
						api_CurrencyCode=jsonRes.results.applicationCoverLimits.currencyCode[i]
						api_CurrencyCode=removeComma(api_CurrencyCode.toString())
						
						api_Amount=jsonRes.results.applicationCoverLimits.amount[i]
						api_Amount=removeComma(api_Amount.toString())
						api_Amount=removeDotFromCurrency(api_Amount.toString())
						
						api_isThePrimaryCoverLimit=jsonRes.results.applicationCoverLimits.isThePrimaryCoverLimit[i]
						api_isThePrimaryCoverLimit=removeComma(api_isThePrimaryCoverLimit.toString())
						
						api_ApplicationFirstTransaction=jsonRes.results.applicationFirstTransaction[i]
						api_ApplicationFirstTransaction=removeComma(api_ApplicationFirstTransaction.toString())
						api_ApplicationFirstTransaction=getDate(api_ApplicationFirstTransaction.toString())
						
						api_PolicyStartDate=jsonRes.results.policyStartDate[i]
						api_PolicyStartDate=removeComma(api_PolicyStartDate.toString())
						api_PolicyStartDate=getDate(api_PolicyStartDate.toString())
						
						api_PolicyEndDate=jsonRes.results.policyEndDate[i]
						api_PolicyEndDate=removeComma(api_PolicyEndDate.toString())
						api_PolicyEndDate=getDate(api_PolicyEndDate.toString())
						
						api_IsRenewalApplication=jsonRes.results.isRenewalApplication[i]
						api_IsRenewalApplication=removeComma(api_IsRenewalApplication.toString())

						api_VesselId=jsonRes.results.vessel.id[i]
						api_VesselId=removeComma(api_VesselId.toString())
						
						api_ImoNumber=jsonRes.results.vessel.imoNumber[i]
						api_ImoNumber=removeComma(api_ImoNumber.toString())
						
						api_VesselName=jsonRes.results.vessel.vesselName[i]
						api_VesselName=removeComma(api_VesselName.toString())
						
						api_VesselType=jsonRes.results.vessel.vesselType[i]
						api_VesselType=removeComma(api_VesselType.toString())
						
						api_CallSign=jsonRes.results.vessel.callSign[i]
						api_CallSign=removeComma(api_CallSign.toString())
						
						api_EnteredDate=jsonRes.results.vessel.enteredDate[i]
						api_EnteredDate=removeComma(api_EnteredDate.toString())
						api_EnteredDate=getDate(api_EnteredDate.toString())
						
						api_GrossTonnage=jsonRes.results.vessel.grossTonnage[i]
						api_GrossTonnage=removeComma(api_GrossTonnage.toString())
						
						api_PassengerCarryingCapacity=jsonRes.results.vessel.noOfPassengers[i]
						api_PassengerCarryingCapacity=removeComma(api_PassengerCarryingCapacity.toString())
						
						api_YearBuilt=jsonRes.results.vessel.yearBuilt[i]
						api_YearBuilt=removeComma(api_YearBuilt.toString())
						
						api_FlagCountryCode=jsonRes.results.vessel.flagCountryCode[i]
						api_FlagCountryCode=removeComma(api_FlagCountryCode.toString())
						
						api_FlagCountryName=jsonRes.results.vessel.flagCountryName[i]
						api_FlagCountryName=removeComma(api_FlagCountryName.toString())
						
						api_PortOfRegistryCode=jsonRes.results.vessel.portOfRegistryCode[i]
						api_PortOfRegistryCode=removeComma(api_PortOfRegistryCode.toString())
						
						api_PortOfRegistryName=jsonRes.results.vessel.portOfRegistryName[i]
						api_PortOfRegistryName=removeComma(api_PortOfRegistryName.toString())
						
						api_RiskCategoryName=jsonRes.results.vessel.riskCategoryName[i]
						api_RiskCategoryName=removeComma(api_RiskCategoryName.toString())
						
						api_TrademarkEngineModelNumber=jsonRes.results.vessel.trademarkAndEngineModel[i]
						api_TrademarkEngineModelNumber=removeComma(api_TrademarkEngineModelNumber.toString())
				
						api_VesselMake=jsonRes.results.vessel.vesselMake[i]
						api_VesselMake=removeComma(api_VesselMake.toString())
						
						api_EngineHorsePower=jsonRes.results.vessel.engineHorsePower[i]
						api_EngineHorsePower=removeComma(api_EngineHorsePower.toString())
						
						api_TenderSerialNumber=jsonRes.results.vessel.tenderSerialNumbers[i]
						api_TenderSerialNumber=removeComma(api_TenderSerialNumber.toString())
						
						api_MotorSerialNumber=jsonRes.results.vessel.motorSerialNumbers[i]
						api_MotorSerialNumber=removeComma(api_MotorSerialNumber.toString())						
					
						log.info "API Response is received as =>"+api_ApplicationRiskId+","+api_RiskId+","+api_RiskReference+","+api_MemberId+","+api_MemberReference+","+api_OrganisationName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_ApplicationProductType+","+api_ApplicationUnderwriterEmail+","+api_LimitId+","+api_CoverShortName+","+api_LimitName+","+api_CurrencyCode+","+api_Amount+","+api_isThePrimaryCoverLimit+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_VesselId+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_EnteredDate+","+api_GrossTonnage+","+api_PassengerCarryingCapacity+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_TrademarkEngineModelNumber+","+api_VesselMake+","+api_EngineHorsePower+","+api_TenderSerialNumber+","+api_MotorSerialNumber
						arrCellVal=[api_ApplicationRiskId,api_RiskId,api_RiskReference,api_MemberId,api_MemberReference,api_OrganisationName,api_ApplicationId,api_ApplicationReference,api_ApplicationType,api_ApplicationProductType,api_ApplicationUnderwriterEmail,api_LimitId,api_CoverShortName,api_LimitName,api_CurrencyCode,api_Amount,api_isThePrimaryCoverLimit,api_ApplicationFirstTransaction,api_PolicyStartDate,api_PolicyEndDate,api_IsRenewalApplication,api_VesselId,api_ImoNumber,api_VesselName,api_VesselType,api_CallSign,api_EnteredDate,api_GrossTonnage,api_PassengerCarryingCapacity,api_YearBuilt,api_FlagCountryCode,api_FlagCountryName,api_PortOfRegistryCode,api_PortOfRegistryName,api_RiskCategoryName,api_TrademarkEngineModelNumber,api_VesselMake,api_EngineHorsePower,api_TenderSerialNumber,api_MotorSerialNumber];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						total_size++
						counter++
					}
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for risk details with multiple parameters when exclude vessel is false with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}
public String removeDotFromCurrency(String field)
{
	if(field!=null &amp;&amp; field.contains(".00"))
		field=field.replace(".00","")
	return field	
}</script></con:config></con:testStep><con:properties><con:property><con:name>filterType</con:name><con:value>vesselName</con:value></con:property><con:property><con:name>filterValue</con:name><con:value>Perf_test10</con:value></con:property><con:property><con:name>risktype</con:name><con:value>vessel</con:value></con:property><con:property><con:name>excludeVessel</con:name><con:value>false</con:value></con:property></con:properties></con:testCase><con:testCase id="44a317d7-5677-4b12-9f2b-5e47f7c0d46d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_RiskWithMultipleParameters_FilterTypeVesselNameAndRiskTypeVesselExcludeVesselTrue" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselTrue" id="8b99a7f5-cc75-43f6-8570-d221943496ed"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/risks/" methodName="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselTrue" id="e0d4d754-0c67-4971-8aa2-5f6e043f92e4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/risks/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filterValue" value="Perf_test10"/>
  <con:entry key="excludeVessel" value="True"/>
</con:parameters><con:parameterOrder><con:entry>filterType</con:entry><con:entry>filterValue</con:entry><con:entry>risktype</con:entry><con:entry>excludeVessel</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy_FilterTypeVesselNameAndRiskTypeVesselAndExcludeVesslTrue" id="1004cdd9-b6e8-4e5e-8f98-c6e2ebf9f134"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

String searchVeseelName="Perf_test10"

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_RiskWithMultipleParameters_FilterTypeVesselNameAndRiskTypeVesselExcludeVesselTrue"))
		tcModuleName="RiskWithMultipleParametersExVesselTrue"
		
	if(tcModuleName.toString().equals("RiskWithMultipleParametersExVesselTrue"))
	{
		log.info "Test Execution started for getting risk details with multiple parameters when exclude vessel is true from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["ApplicationRiskId","RiskId","RiskReference","MemberId","MemberReference","OrganisationName","ApplicationId","ApplicationReference","ApplicationType","ApplicationProductType","ApplicationUnderwriterEmail","LimitId","CoverShortName","LimitName","CurrencyCode","Amount","isThePrimaryCoverLimit","ApplicationFirstTransaction","PolicyStartDate","PolicyEndDate","IsRenewalApplication","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			declare
			@vesselName as varchar(50)='"""+searchVeseelName+"""'
			USE TOM
			SELECT 
			DISTINCT
			ar.Id as ApplicationRiskId, r.Id as RiskId, r.Reference as RiskReference, ma.Id as MemberId,ma.Reference as MemberReference, p.OrganisationName,
			ab.Id as ApplicationId, ab.Reference as ApplicationReference, ab.Discriminator as ApplicationType, cc.Name as ApplicationProductType, 
			[user].EmailAddress as ApplicationUnderwriterEmail, l.Id as LimitId, c.ShortCode as CoverShortName, l.Name as LimitName, rc.ShortCode as CurrencyCode,
			acvltv.ValueDecimal as Amount,
			case when tc.IsPrimary = 1 then 'true' 	
			when tc.IsPrimary = 0 then 'false' 
			else NULL end as isThePrimaryCoverLimit,
			Case when ab.Discriminator = 'Quote' then (select MIN(tq.Id)
			from ApplicationBase appb 
			join [Transaction] tq on tq.QuoteBase_Id = appb.Id 
			where appb.Id = ab.Id
			group by appb.id) 
			When ab.Discriminator = 'Policy' then (select MIN(tp.Id)
			from ApplicationBase appb 
			join [Transaction] tp on tp.Policy_Id = appb.Id 
			where appb.Id = ab.Id
			group by appb.id)  end as ApplicationFirstTransaction,
			ab.PolicyStart as PolicyStartDate,
			ab.PolicyEnd as PolicyEndDate,
			case when ab.Discriminator = 'Renewal Quote' then 'true'
			else 'false' end as IsRenewalApplication,
			rv.Id as VesselId, rv.ImoNumber, r.Name as VesselName, rvt.Name as VesselType, rv.CallSign, r.Entered as EnteredDate, rv.GrossTonnage, rv.PassengerCarryingCapacity,
			rv.YearBuilt,con.ShortCode as FlagCountryCode, con.Name as FlagCountryName, rp.ShortCode as PortOfRegistryCode, rp.Name as PortOfRegistryName, 
			rst.Name as RiskCategoryName,rv.TrademarkEngineModelNumber, rvm.Name as VesselMake, rv.EngineHorsePower, rv.TenderSerialNumber,
			rv.OutboardMotorSerialNumber as MotorSerialNumber 
			from ApplicationBase ab
			join ApplicationMemberAssured ama on ab.Id = ama.Application_Id
			join MemberAssured ma on ma.id = ama.MemberAssured_Id
			join Party p on p.id = ma.Party_Id
			join ApplicationRisk ar on ar.ApplicationMemberAssured_Id = ama.id 
			join Risk r on r.id = ar.Risk_Id
			join RiskVessel rv on rv.id = r.id
			join ref_VesselType rvt on rvt.id = rv.[Type_Id]
			LEFT join ApplicationCover AC on AB.Id = AC.Application_Id 
			Left Join TemplateCover TC on AC.TemplateCover_Id = TC.Id 
			AND TC.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0 
			Left Join Cover C on TC.Cover_Id = C.Id 
			AND C.Cover_PhysicalDeletionAttemptPrevented = 0
			left join CoverCategory cc on cc.id = c.CoverCategory_Id 
			LEFT Join [User] on AB.Underwriter_Id = [User].Id 
			left join ApplicationCoverVariation acv on acv.ApplicationCover_Id = ac.id
			left join ApplicationCoverVariationLimit acvl on acvl.CoverVariation_Id = acv.id
			left join ApplicationCoverVariationLimitTagValue acvltv on acvltv.ApplicationCoverVariationLimit_Id = acvl.id
			left join TemplateCoverLimit tcl on tcl.id = acvl.TemplateCoverLimit_Id
			left join CoverLimit cl on cl.id = tcl.CoverLimit_Id
			left join Limit l on l.id = cl.Limit_Id
			left join ref_Currency rc on rc.id = acvltv.Currency_Id
			left join ref_Country con on con.id = rv.Flag_Id
			left join ref_Port rp on rp.id = rv.PortOfRegistry_Id
			left join TemplatePermittedRiskSubType tprst on tprst.Template_Id = tc.Template_Id
			left join ref_RiskSubType rst on rst.id = tprst.RiskSubType_Id
			left join ref_VesselMake rvm on rvm.id = rv.VesselMake_Id
			where ab.discriminator = 'Policy'
			and  r.Name like @vesselName
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_ApplicationRiskId=row.ApplicationRiskId
				sql_ApplicationRiskId=removeComma(sql_ApplicationRiskId.toString())
				
				sql_RiskId=row.RiskId
				sql_RiskId=removeComma(sql_RiskId.toString())
				
				sql_RiskReference=row.RiskReference
				sql_RiskReference=removeComma(sql_RiskReference.toString())
				
				sql_MemberId=row.MemberId
				sql_MemberId=removeComma(sql_MemberId.toString())
				
				sql_MemberReference=row.MemberReference
				sql_MemberReference=removeComma(sql_MemberReference.toString())
				
				sql_OrganisationName=row.OrganisationName
				sql_OrganisationName=removeComma(sql_OrganisationName.toString())
				
				sql_ApplicationId=row.ApplicationId
				sql_ApplicationId=removeComma(sql_ApplicationId.toString())
				
				sql_ApplicationReference=row.ApplicationReference
				sql_ApplicationReference=removeComma(sql_ApplicationReference.toString())
				
				sql_ApplicationType=row.ApplicationType
				sql_ApplicationType=removeComma(sql_ApplicationType.toString())
				
				sql_ApplicationProductType=row.ApplicationProductType
				sql_ApplicationProductType=removeComma(sql_ApplicationProductType.toString())
				
				sql_ApplicationUnderwriterEmail=row.ApplicationUnderwriterEmail
				sql_ApplicationUnderwriterEmail=removeComma(sql_ApplicationUnderwriterEmail.toString())
				
				sql_LimitId=row.LimitId
				sql_LimitId=removeComma(sql_LimitId.toString())
				
				sql_CoverShortName=row.CoverShortName
				sql_CoverShortName=removeComma(sql_CoverShortName.toString())
				
				sql_LimitName=row.LimitName
				sql_LimitName=removeComma(sql_LimitName.toString())
				
				sql_CurrencyCode=row.CurrencyCode
				sql_CurrencyCode=removeComma(sql_CurrencyCode.toString())
				
				sql_Amount=row.Amount
				sql_Amount=removeComma(sql_Amount.toString())
				sql_Amount=removeDotFromCurrency(sql_Amount.toString())
				
				sql_isThePrimaryCoverLimit=row.isThePrimaryCoverLimit
				sql_isThePrimaryCoverLimit=removeComma(sql_isThePrimaryCoverLimit.toString())
				
				sql_ApplicationFirstTransaction=row.ApplicationFirstTransaction
				sql_ApplicationFirstTransaction=removeComma(sql_ApplicationFirstTransaction.toString())
				sql_ApplicationFirstTransaction=sql_ApplicationFirstTransaction.toString().replace(" ", "T")
				sql_ApplicationFirstTransaction=getDate(sql_ApplicationFirstTransaction.toString())
				
				sql_PolicyStartDate=row.PolicyStartDate
				sql_PolicyStartDate=removeComma(sql_PolicyStartDate.toString())
				sql_PolicyStartDate=sql_PolicyStartDate.toString().replace(" ", "T")
				sql_PolicyStartDate=getDate(sql_PolicyStartDate.toString())
				
				sql_PolicyEndDate=row.PolicyEndDate
				sql_PolicyEndDate=removeComma(sql_PolicyEndDate.toString())
				sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" ", "T")
				sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())
				
				sql_IsRenewalApplication=row.IsRenewalApplication
				sql_IsRenewalApplication=removeComma(sql_IsRenewalApplication.toString())

				log.info "SQL Response is received as =>"+sql_ApplicationRiskId+","+sql_RiskId+","+sql_RiskReference+","+sql_MemberId+","+sql_MemberReference+","+sql_OrganisationName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+sql_LimitId+","+sql_CoverShortName+","+sql_LimitName+","+sql_CurrencyCode+","+sql_Amount+","+sql_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication
				arrCellVal=[sql_ApplicationRiskId,sql_RiskId,sql_RiskReference,sql_MemberId,sql_MemberReference,sql_OrganisationName,sql_ApplicationId,sql_ApplicationReference,sql_ApplicationType,sql_ApplicationProductType,sql_ApplicationUnderwriterEmail,sql_LimitId,sql_CoverShortName,sql_LimitName,sql_CurrencyCode,sql_Amount,sql_isThePrimaryCoverLimit,sql_ApplicationFirstTransaction,sql_PolicyStartDate,sql_PolicyEndDate,sql_IsRenewalApplication];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
				
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldBrokerId=00

//			for (int j = 0; j &lt; brkIdList.size(); j++)
//			 {
			 	//log.info "Getting API response for Broker Id=>"+BrokerId

			 	String filterType = "vesselName"
				testRunner.testCase.setPropertyValue("filterType",filterType)
				String filterValue = searchVeseelName
				testRunner.testCase.setPropertyValue("filterValue",filterValue)
				String risktype = "vessel"
				testRunner.testCase.setPropertyValue("risktype",risktype)
				String excludeVessel = "true"
				testRunner.testCase.setPropertyValue("excludeVessel",excludeVessel)
					
				testRunner.testCase.setPropertyValue('token',token)
				testRunner.runTestStepByName('FilterTypeVesselNameAndRiskTypeVesselExcludeVesselTrue')
				String req='${FilterTypeVesselNameAndRiskTypeVesselExcludeVesselTrue#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
		
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["FilterTypeVesselNameAndRiskTypeVesselExcludeVesselTrue"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					
				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)
					int recordCount = jsonRes.totalRecords
					for (int i=0; i&lt;recordCount; i++)
					{
						api_ApplicationRiskId=jsonRes.results.applicationRiskId[i]
						api_ApplicationRiskId=removeComma(api_ApplicationRiskId.toString())
						
						api_RiskId=jsonRes.results.id[i]
						api_RiskId=removeComma(api_RiskId.toString())
					
						api_RiskReference=jsonRes.results.reference[i]
						api_RiskReference=removeComma(api_RiskReference.toString())
						
						api_MemberId=jsonRes.results.memberId[i]
						api_MemberId=removeComma(api_MemberId.toString())
						
						api_MemberReference=jsonRes.results.memberReference[i]
						api_MemberReference=removeComma(api_MemberReference.toString())
						
						api_OrganisationName=jsonRes.results.memberName[i]
						api_OrganisationName=removeComma(api_OrganisationName.toString())
						
						api_ApplicationId=jsonRes.results.applicationId[i]
						api_ApplicationId=removeComma(api_ApplicationId.toString())
						
						api_ApplicationReference=jsonRes.results.applicationReference[i]
						api_ApplicationReference=removeComma(api_ApplicationReference.toString())
						
						api_ApplicationType=jsonRes.results.applicationType[i]
						api_ApplicationType=removeComma(api_ApplicationType.toString())
						
						api_ApplicationProductType=jsonRes.results.applicationProductType[i]
						api_ApplicationProductType=removeComma(api_ApplicationProductType.toString())
						
						api_ApplicationUnderwriterEmail=jsonRes.results.applicationUnderwriterEmail[i]
						api_ApplicationUnderwriterEmail=removeComma(api_ApplicationUnderwriterEmail.toString())
						
						api_LimitId=jsonRes.results.applicationCoverLimits.id[i]
						api_LimitId=removeComma(api_LimitId.toString())
						
						api_CoverShortName=jsonRes.results.applicationCoverLimits.coverShortName[i]
						api_CoverShortName=removeComma(api_CoverShortName.toString())
						
						api_LimitName=jsonRes.results.applicationCoverLimits.limitName[i]
						api_LimitName=removeComma(api_LimitName.toString())
						
						api_CurrencyCode=jsonRes.results.applicationCoverLimits.currencyCode[i]
						api_CurrencyCode=removeComma(api_CurrencyCode.toString())
						
						api_Amount=jsonRes.results.applicationCoverLimits.amount[i]
						api_Amount=removeComma(api_Amount.toString())
						api_Amount=removeDotFromCurrency(api_Amount.toString())
						
						api_isThePrimaryCoverLimit=jsonRes.results.applicationCoverLimits.isThePrimaryCoverLimit[i]
						api_isThePrimaryCoverLimit=removeComma(api_isThePrimaryCoverLimit.toString())
						
						api_ApplicationFirstTransaction=jsonRes.results.applicationFirstTransaction[i]
						api_ApplicationFirstTransaction=removeComma(api_ApplicationFirstTransaction.toString())
						api_ApplicationFirstTransaction=getDate(api_ApplicationFirstTransaction.toString())
						
						api_PolicyStartDate=jsonRes.results.policyStartDate[i]
						api_PolicyStartDate=removeComma(api_PolicyStartDate.toString())
						api_PolicyStartDate=getDate(api_PolicyStartDate.toString())
						
						api_PolicyEndDate=jsonRes.results.policyEndDate[i]
						api_PolicyEndDate=removeComma(api_PolicyEndDate.toString())
						api_PolicyEndDate=getDate(api_PolicyEndDate.toString())
						
						api_IsRenewalApplication=jsonRes.results.isRenewalApplication[i]
						api_IsRenewalApplication=removeComma(api_IsRenewalApplication.toString())
						
					
						log.info "API Response is received as =>"+api_ApplicationRiskId+","+api_RiskId+","+api_RiskReference+","+api_MemberId+","+api_MemberReference+","+api_OrganisationName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_ApplicationProductType+","+api_ApplicationUnderwriterEmail+","+api_LimitId+","+api_CoverShortName+","+api_LimitName+","+api_CurrencyCode+","+api_Amount+","+api_isThePrimaryCoverLimit+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication
						arrCellVal=[api_ApplicationRiskId,api_RiskId,api_RiskReference,api_MemberId,api_MemberReference,api_OrganisationName,api_ApplicationId,api_ApplicationReference,api_ApplicationType,api_ApplicationProductType,api_ApplicationUnderwriterEmail,api_LimitId,api_CoverShortName,api_LimitName,api_CurrencyCode,api_Amount,api_isThePrimaryCoverLimit,api_ApplicationFirstTransaction,api_PolicyStartDate,api_PolicyEndDate,api_IsRenewalApplication];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						total_size++
						counter++
					}
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}
			 //}
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for risk details with multiple parameters when exclude vessel is true with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}
public String removeDotFromCurrency(String field)
{
	if(field!=null &amp;&amp; field.contains(".00"))
		field=field.replace(".00","")
	return field	
}</script></con:config></con:testStep><con:properties><con:property><con:name>filterType</con:name><con:value>vesselName</con:value></con:property><con:property><con:name>filterValue</con:name><con:value>Perf_test10</con:value></con:property><con:property><con:name>risktype</con:name><con:value>vessel</con:value></con:property><con:property><con:name>excludeVessel</con:name><con:value>false</con:value></con:property></con:properties></con:testCase><con:testCase id="056787ac-9065-473e-ac2d-c73feab41135" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByDocuments_Deprecated" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByDocuments" id="26231823-e4b2-4c09-9ca5-cf1b0f587f7b" disabled="true"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#appId}/documents" methodName="ApplicationByApplicationIdByDocuments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByDocuments" id="69ab8d1e-4de9-4f72-9d9d-412b6a9d3f3e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76177/documents</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByDocuments" id="5bbab640-e213-417d-99c5-51f36ed2b354" disabled="true"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList&lt;String> appIdList = new ArrayList&lt;>();

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ApplicationByApplicationIdByDocuments"))
		tcModuleName="AppByAppIdByDocByDocuments"
		
	if(tcModuleName.toString().equals("AppByAppIdByDocByDocuments"))
	{
		log.info "Test Execution started for getting Document Details as per Application Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Key","ApplicationId","DocumentId","DocumentTypeId","DocumentType","DocumentReference","DocumentStatusId","DocumentStatus","TransactionId","WorkflowId","DisplayName","StartDate","EndDate","AppliedDate","TransationStatus","TransactionSequence","TransactionSubTypeOtherDescription","ReasonForChange_Id","UserSuppliedText","DocumentVersion","IssuedDate","DocumentKey","RiskName","StorageId","DocumentMetaData","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
 			SELECT
			TOP 100
			AB.Id as ApplicationId, D.Id as DocumentId, D.DocumentType_Id as DocumentTypeId, rdt.Name as DocumentType, D.DocumentReference, 
			D.DocumentStatus_Id as DocumentStatusId, RDS.Name as DocumentStatus, T.Id as TransactionId,T.WorkflowId, AB.Discriminator as DisplayName, 
			T.StartDate, T.EndDate, T.AppliedDate, rts.Name as TransationStatus, T.Sequence as TransactionSequence, T.TransactionSubTypeOtherDescription,
			T.ReasonForChange_Id, D.UserSuppliedText, D.DocumentVersion,D.IssuedDate, D.DocumentKey, D.RiskName, D.StorageId, D.DocumentMetaData
			from applicationbase AB
			inner Join [TRANSACTION] T on T.Policy_Id = AB.Id and T.Transaction_PhysicalDeletionAttemptPrevented = 0
			left join ref_TransactionStatus rts on rts.Id = T.TransactionStatus_Id
			left join Document d on D.Transaction_Id = T.Id --and D.DocumentBase_PhysicalDeletionAttemptPrevented = 0
			left join ref_DocumentType rdt on rdT.Id = D.DocumentType_Id 
			left join ref_DocumentStatus rds on RDS.Id = D.DocumentStatus_Id
			where D.Id is not null and rdt.Name='TradingCertificate' and RDS.Name='Issued'
			and AB.Id=93458
			order by 1 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row -> 
				sql_ApplicationId=row.ApplicationId
				appIdList.add(sql_ApplicationId)
				sql_DocumentId=row.DocumentId
				//docIdList.add(sql_DocumentId)
				sql_DocumentTypeId=row.DocumentTypeId
				sql_DocumentType=row.DocumentType
				sql_DocumentReference=row.DocumentReference
				sql_DocumentStatusId=row.DocumentStatusId
				sql_DocumentStatus=row.DocumentStatus
				sql_TransactionId=row.TransactionId
				sql_WorkflowId=row.WorkflowId
				sql_DisplayName=row.DisplayName
				sql_StartDate=row.StartDate
				sql_StartDate=sql_StartDate.toString().split(" ")[0]
				sql_EndDate=row.EndDate
				sql_EndDate=sql_EndDate.toString()split(" ")[0]
				sql_AppliedDate=row.AppliedDate
				sql_AppliedDate=sql_AppliedDate.toString().split(" ")[0]
				sql_TransationStatus=row.TransationStatus
				sql_TransactionSequence=row.TransactionSequence
				sql_TransactionSubTypeOtherDescription=row.TransactionSubTypeOtherDescription
				sql_ReasonForChange_Id=row.ReasonForChange_Id
				sql_UserSuppliedText=row.UserSuppliedText
				sql_DocumentVersion=row.DocumentVersion
				sql_IssuedDate=row.IssuedDate
				sql_IssuedDate=sql_IssuedDate.toString().split(" ")[0]
				sql_DocumentKey=row.DocumentKey
				sql_RiskName=row.RiskName
				sql_StorageId=row.StorageId
				sql_DocumentMetaData=row.DocumentMetaData

				key=sql_ApplicationId+"_"+sql_DocumentId
				
				log.info "SQL Response is : "+key+","+sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentTypeId+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatusId+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData
				arrCellVal=[key, sql_ApplicationId,sql_DocumentId,sql_DocumentTypeId,sql_DocumentType,sql_DocumentReference,sql_DocumentStatusId,sql_DocumentStatus,sql_TransactionId,sql_WorkflowId,sql_DisplayName,sql_StartDate,sql_EndDate,sql_AppliedDate,sql_TransationStatus,sql_TransactionSequence,sql_TransactionSubTypeOtherDescription,sql_ReasonForChange_Id,sql_UserSuppliedText,sql_DocumentVersion,sql_IssuedDate,sql_DocumentKey,sql_RiskName,sql_StorageId,sql_DocumentMetaData];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldAppId=00

			for (int j = 0; j &lt; appIdList.size(); j++)
			 {
			 	//appId=arrayList.get(j)
			 	int appId=appIdList.get(j)
			 	if(oldAppId == appId)
			 	{
				 	oldAppId = appId
			 	}
			 	else
			 	{
			 		log.info "Getting API response for Application Id=>"+appId
			 	
				 	testRunner.testCase.setPropertyValue( "appId", appId.toString())
					
					testRunner.testCase.setPropertyValue('token',token)
					testRunner.runTestStepByName('AppByAppIdByDocuments')
					String req='${AppByAppIdByDocuments#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["AppByAppIdByDocuments"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					
					//log.info "Original API response is=>"+response
					//log.info "HTTP Status Code received as=>"+httpStatusCode
					
					if(httpStatusCode.toString().equals("200"))
					{
						def jsonRes=jsonSlurper.parseText(response)
						int jsonRecordCount = jsonRes.totalRecords
						size=jsonRes.totalRecords.toInteger()
						total_size+=size
						for(int i=0;i&lt;jsonRecordCount;i++)
						{
							api_DocumentId=jsonRes.results.id[i]
							//log.info "API_DocumentId=>"+api_DocumentId
							//log.info "API_AppId=>"+applicationId
							api_DocumentType_Id=jsonRes.results.documentType.id[i]
							api_DocumentType=jsonRes.results.documentType.documentTypeName[i]
							api_DocumentReference=jsonRes.results.documentReference[i]
							api_DocumentStatus_Id=jsonRes.results.documentStatus.id[i]
							api_DocumentStatus=jsonRes.results.documentStatus.documentStatusName[i]
							api_TransactionId=jsonRes.results.transaction.id[i]
							api_WorkflowId=jsonRes.results.transaction.workflowid[i]
							if(api_WorkflowId!=null)
								api_WorkflowId=api_WorkflowId.toString().toUpperCase()
							api_DisplayName=jsonRes.results.transaction.displayName[i]
							api_StartDate=jsonRes.results.transaction.startDate[i]
							api_StartDate=api_StartDate.toString().split("T")[0]
							api_EndDate=jsonRes.results.transaction.endDate[i]
							api_EndDate=api_EndDate.toString().split("T")[0]
							api_AppliedDate=jsonRes.results.transaction.appliedDate[i]
							api_AppliedDate=api_AppliedDate.toString().split("T")[0]
							api_TransationStatus=jsonRes.results.transaction.transactionStatus[i]
							api_TransactionSequence=jsonRes.results.transaction.transactionSequence[i]
							api_TransactionSubTypeOtherDescription=jsonRes.results.transaction.transactionSubTypeOtherDescription[i]
							api_ReasonForChange_Id=jsonRes.results.transaction.reasonForChange[i]
							api_UserSuppliedText=jsonRes.results.userSuppliedText[i]
							api_DocumentVersion=jsonRes.results.documentVersion[i]
							api_IssuedDate=jsonRes.results.issuedDate[i]
							api_IssuedDate=api_IssuedDate.toString().split("T")[0]
							api_DocumentKey=jsonRes.results.documentKey[i]
							api_RiskName=jsonRes.results.riskName[i]
							api_StorageId=jsonRes.results.storageId[i]
							api_DocumentMetaData=jsonRes.results.documentMetaData[i]
							
							key=appId+"_"+api_DocumentId
		
							log.info "API Response received as : "+key+","+appId+","+api_DocumentId+","+api_DocumentType_Id+","+api_DocumentType+","+api_DocumentReference+","+api_DocumentStatus_Id+","+api_DocumentStatus+","+api_TransactionId+","+api_WorkflowId+","+api_DisplayName+","+api_StartDate+","+api_EndDate+","+api_AppliedDate+","+api_TransationStatus+","+api_TransactionSequence+","+api_TransactionSubTypeOtherDescription+","+api_ReasonForChange_Id+","+api_UserSuppliedText+","+api_DocumentVersion+","+api_IssuedDate+","+api_DocumentKey+","+api_RiskName+","+api_StorageId+","+api_DocumentMetaData
							arrCellVal=[key,appId,api_DocumentId,api_DocumentType_Id,api_DocumentType,api_DocumentReference,api_DocumentStatus_Id,api_DocumentStatus,api_TransactionId,api_WorkflowId,api_DisplayName,api_StartDate,api_EndDate,api_AppliedDate,api_TransationStatus,api_TransactionSequence,api_TransactionSubTypeOtherDescription,api_ReasonForChange_Id,api_UserSuppliedText,api_DocumentVersion,api_IssuedDate,api_DocumentKey,api_RiskName,api_StorageId,api_DocumentMetaData];
							RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
							counter++
							//total_size++
						}
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
					oldAppId = appId
			 	}	
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Document details by Application Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}</script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>91690</con:value></con:property></con:properties></con:testCase><con:testCase id="1ba4485d-dce1-4f8b-be3e-97679c13214c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POSTApplicationByApplicationIdByDocuments_Descope" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="POST_AppByAppIdByDocByDocID" id="d0e63908-05c4-4a2e-9a6e-080aa607c245" disabled="true"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/documents/" methodName="PostApplicationByApplicationIdByDocument" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST_AppByAppIdByDocByDocID" id="adce849f-723a-4971-957d-558261dc0607" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request>
	{
		"RiskId": "137059",
		"DocumentReference": "23/12/2020",
		"StorageId": "",
		"DocumentType": {
			"Id": "1",
			"DocumentTypeName": "TradingCertificate"
		},
		"DocumentStatus": {
			"Id": "1",
			"DocumentStatusName": "issued"
		},
		"TradingCertificatesTypeId": "1",
		"IssuedDate": "23/12/2020",
		"DocumentKey": "TradingCertificateKey",
		"RiskName":" US161720 Case1Risk1"
	}
	</con:request><con:originalUri>http://spltomservices/api/utomapi/applications/75532/documents/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Post_ApplicationByApplicationIdByDocuments" id="48025289-fae8-4854-97dd-35c951e21e52" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_POSTApplicationByApplicationIdByDocuments"))
		tcModuleName="POSTAppByAppIdByDocuments"
	
	if(tcModuleName.toString().equals("POSTAppByAppIdByDocuments"))
	{
		log.info "Test Execution started for POST method of Application By Application Id By Documents"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["ApplicationId","DocumentId","DocumentTypeId","DocumentType","DocumentReference","DocumentStatusId","DocumentStatusName","TransactionId","RiskId","RiskName","Workflowid","DisplayName","TransactionStatus","TransactionSequence","TransactionSubTypeOtherDescription","ReasonForChange","UserSuppliedText","DocumentVersion","DocumentKey","StorageId","DocumentMetaData","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			def tcIdForGetDetails;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));

			arrCellVal=['API data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)

			ArrayList<String> tcList = new ArrayList<>();

			String sqlstmt=
			"""
			Use TOM
			Select
			Distinct 
			TOP 1
			R.Id as RiskId,R.Name as RiskName, AB.Id as ApplicationId, AB.Discriminator
			from Risk R 
			left join ApplicationRisk AR on AR.Risk_Id=R.Id
			left join MemberAssured MA on MA.Id = R.MemberAssured_Id
			left join ApplicationMemberAssured AMA on AMA.MemberAssured_Id=MA.Id
			left join Party P on P.Id= MA.Party_Id
			left join ApplicationBase AB on AB.Id=AMA.Application_Id
			inner Join [TRANSACTION] t on T.Policy_Id = AB.Id and T.Transaction_PhysicalDeletionAttemptPrevented = 0
			left join ref_TransactionStatus rts on rts.Id = T.TransactionStatus_Id
			left join Document d on D.Transaction_Id = T.Id --and D.DocumentBase_PhysicalDeletionAttemptPrevented = 0
			left join ref_DocumentType rdt on rdT.Id = D.DocumentType_Id 
			left join ref_DocumentStatus rds on RDS.Id = D.DocumentStatus_Id
			where AB.Discriminator='Policy' and D.Id is not null and rdt.Name='TradingCertificate' and RDS.Name='Issued' 
			and R.Status_Id not in (1, 3)
			order by 3 desc
			"""
			def arrData;
			con.eachRow(sqlstmt)
			{
				row -> 
				sql_ApplicationId=row.ApplicationId
				sql_RiskId=row.RiskId
				sql_RiskName=row.RiskName
				sql_ProductType=row.Discriminator

				//Set the Application ID at test case level
				String applicationId=sql_ApplicationId
				testRunner.testCase.setPropertyValue( "applicationId", applicationId)
				log.info "Creating post request for Application Id => "+applicationId
			
				//Set the risk ID at test case level
				String riskId=sql_RiskId
				testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].setPropertyValue( "riskId", riskId)
				def inApi_RiskId = testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].getPropertyValue("riskId")
			
				//Set the risk Name at test case level
				String riskName=sql_RiskName
				testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].setPropertyValue( "riskName", riskName)
				def inApi_riskName = testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].getPropertyValue("riskName")
				
				def newRequest = 
				"""
				{
					"RiskId": "${riskId}",
					"DocumentReference": "74970/1053940/688535/LCC-P&I",
					"StorageId": "",
					"DocumentType": {
						"Id": "41",
						"DocumentTypeName": "Long Form Certificate"
					},
					"DocumentStatus": {
						"Id": "1",
						"DocumentStatusName": "Created"
					},
					"TradingCertificatesTypeId": "1",
					"IssuedDate": "2021-08-04T03:33:00",
					"DocumentKey": "T:TomLongFormCertificateSingle^R:1053940^SC:True^ST:1^MR:74970^RN:^RR:688535^CC:LCC-P&I^C:False",
					"RiskName":" ${riskName}"
				}
				"""
				//Run the test step to get response
				log.info "Body for POST Request = "+newRequest
				testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].setPropertyValue( "Request", newRequest)
				
				testRunner.runTestStepByName('POST_AppByAppIdByDocByDocID')
				String req='${POST_AppByAppIdByDocByDocID#Response}'
				response=context.expand(req)
				log.info "Original API response is =>"+response
				jsonSlurper=new JsonSlurper() 
				jsonRes=jsonSlurper.parseText(response)
				
				//Check the Status code of API response
				def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				def httpResponseHeaders = context.testCase.testSteps["POST_AppByAppIdByDocByDocID"].testRequest.response.responseHeaders
				def httpStatus = httpResponseHeaders["#status#"]
				def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				log.info "HTTP Status code is =>"+httpStatusCode

				if(httpStatusCode.equals("200"))
				{
					//def json=jsonSlurper.parseText(response)
						
					postApi_DocumentId = jsonRes.id
					postApi_DocumentTypeId = jsonRes.documentType.id
					postApi_DocumentType = jsonRes.documentType.documentTypeName
					postApi_DocumentReference = jsonRes.documentReference
					postApi_DocumentStatusId = jsonRes.documentStatus.id
					postApi_DocumentStatusName = jsonRes.documentStatus.documentStatusName
					postApi_TransactionId = jsonRes.transaction.id
					postApi_RiskId = jsonRes.riskId
					postApi_RiskName = jsonRes.riskName
					postApi_Workflowid = jsonRes.transaction.workflowid
					postApi_DisplayName=jsonRes.transaction.displayName
					postApi_TransactionStatus=jsonRes.transaction.transactionStatus
					postApi_TransactionSequence=jsonRes.transaction.transactionSequence
					postApi_TransactionSubTypeOtherDescription=jsonRes.transaction.transactionSubTypeOtherDescription
					postApi_ReasonForChange=jsonRes.transaction.reasonForChange
					postApi_UserSuppliedText=jsonRes.userSuppliedText
					postApi_DocumentVersion=jsonRes.documentVersion
					postApi_DocumentKey=jsonRes.documentKey
					postApi_StorageId=jsonRes.storageId
					postApi_DocumentMetaData=jsonRes.documentMetaData

					log.info "API Response is received as =>"+sql_ApplicationId+","+postApi_DocumentId+","+postApi_DocumentTypeId+","+postApi_DocumentType+","+postApi_DocumentReference+","+postApi_DocumentStatusId+","+postApi_DocumentStatusName+","+postApi_TransactionId+","+postApi_RiskId+","+postApi_RiskName+","+postApi_Workflowid+","+postApi_DisplayName+","+postApi_TransactionStatus+","+postApi_TransactionSequence+","+postApi_TransactionSubTypeOtherDescription+","+postApi_ReasonForChange+","+postApi_UserSuppliedText+","+postApi_DocumentVersion+","+postApi_DocumentKey+","+postApi_StorageId+","+postApi_DocumentMetaData
					arrCellVal=[sql_ApplicationId,postApi_DocumentId,postApi_DocumentTypeId,postApi_DocumentType,postApi_DocumentReference,postApi_DocumentStatusId,postApi_DocumentStatusName,postApi_TransactionId,postApi_RiskId,postApi_RiskName,postApi_Workflowid,postApi_DisplayName,postApi_TransactionStatus,postApi_TransactionSequence,postApi_TransactionSubTypeOtherDescription,postApi_ReasonForChange,postApi_UserSuppliedText,postApi_DocumentVersion,postApi_DocumentKey,postApi_StorageId,postApi_DocumentMetaData];
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}//if statement closed
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
					db_size++
					counter++
				}
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}
			}//inner sql end
			
			totalColumns = source.getRow(1).getLastCellNum()
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start

			arrCellVal=['DB DATA']
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			//arrOutputHeaderapi = ["TradingCertificateId","TradingCertificatePackId","ActualStatusCode","Status"];
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)

			log.info "Number of Trading Certificate are=> "+tcList.size()
			log.info "TradingCertificateId=> "+tcList

			 for (int i = 0; i < tcList.size(); i++)
			 {
			 	tcIdForGetDetails=tcList.get(i)
			 	
			 	log.info "Getting Trading Certificate details =>"+tcIdForGetDetails

			 	String getTCId=
				"""
					declare
					@TCID as int = '"""+tcIdForGetDetails+"""'
					select
					TOP 1
					TC.Id as TradingCertificateId, TC.AddressType_Id,TC.SourceSystem,TC.Reference, TC.CurrentStatus, 
					TC.StorageId, TC.RiskId, TC.ApplicationRiskId, TC.PolicyId, TC.MemberPartyId, TC.OwnerPartyId, TC.BrokerPartyId, 
					case when TC.IsOwner =0 then 'FALSE' when TC.IsOwner =0 then 'TRUE' else NULL end as IsOwner, TC.BrokerContactPartyId,  TC.JointAssuredPartyId, 
					case when TC.IsRenewal = 1 then 'TRUE'    when TC.IsRenewal = 0 then 'FALSE' else NULL end as IsRenewal,
					case when TC.IsYacht = 1 then 'TRUE' when TC.IsYacht = 0 then 'FALSE' else NULL end as IsYacht,TC.TradingCertificateVersion as Version,
					TC.RiskReference, TC.PolicyReference, TC.MemberReference, TC.MemberType, TC.MemberName,TC.JointAssuredName, TC.OwnerReference,
					TC.OwnerName, TC.OwnerDomicile, TC.OwnerEmailAddress, TC.BrokerReference, TC.BrokerName, TC.BrokerEmailAddress,TC.PolicyYear, TC.CertificateIssueDate,
					TC.EmailAddress, TC.CcEmailAddress, TC.EffectiveStartDate, TC.EffectiveEndDate, TC.PassengerCapacity, TC.PolicyStartDate,TC.PolicyEndDate,TC.CurrencyCode,TC.CoverLimitAmount,
					TC.SignatoryState_Id, TC.SignatoryStateAddressId, TC.VesselName,TC.VesselType,TC.VesselTypeName, TC.vesselEnteredDate,TC.vesselFlag,TC.imoNumber,TC.distinctiveNumbersOrLetters,
					TC.grossTonnage,TC.yearBuilt,TC.engineHorsePower, TC.TradeMark, TC.model,TC.engineNo,TC.NominatedStateFlag,TC.NominatedStateFlagName,TC.portOfRegistry,TC.tenderReferenceList,
					TC.TenderOutboardReferenceList, TC.Type_Id as TradingCertificateTypeId,RG.Id as TradingCertificateGroupId, RG.Name as TradingCertificateGroupName, RG.GroupCode as TradingCertificateGroupCode,
					RT.TypeCode, RT.Name as TypeName, TC.BranchCode, TC.TradingCertificatePack_Id
					from TradingCertificate TC
					inner join ref_Type RT on RT.Id=TC.Type_Id
					inner join ref_Group RG on RG.Id=RT.Group_Id
					left join BankSnapshot BS on BS.TradingCertificate_Id=Tc.Id and BS.IsDeleted = 0
					where TC.Id=@TCID
					Order by 1 desc
				"""
				arrData=null
				//DB sheet start
				con.eachRow(getTCId) 
				{ 
					getDetails->
						sql_TradingCertificateId=getDetails.TradingCertificateId
						sql_AddressType_Id=getDetails.AddressType_Id
						sql_SourceSystem=getDetails.SourceSystem
						sql_Reference=getDetails.Reference
						sql_CurrentStatus=getDetails.CurrentStatus
						sql_StorageId=getDetails.StorageId
						sql_RiskId=getDetails.RiskId
						sql_ApplicationRiskId=getDetails.ApplicationRiskId
						sql_PolicyId=getDetails.PolicyId
						sql_MemberPartyId=getDetails.MemberPartyId
						sql_OwnerPartyId=getDetails.OwnerPartyId
						sql_BrokerPartyId=getDetails.BrokerPartyId
						sql_BrokerContactPartyId=getDetails.BrokerContactPartyId
						sql_JointAssuredPartyId=getDetails.JointAssuredPartyId
						sql_IsRenewal=getDetails.IsRenewal
						sql_IsYacht=getDetails.IsYacht
						sql_Version=getDetails.Version
						sql_RiskReference=getDetails.RiskReference
						sql_PolicyReference=getDetails.PolicyReference
						sql_MemberReference=getDetails.MemberReference
						sql_MemberType=getDetails.MemberType
						sql_MemberName=getDetails.MemberName
						sql_JointAssuredName=getDetails.JointAssuredName
						sql_OwnerReference=getDetails.OwnerReference
						sql_OwnerName=getDetails.OwnerName
						sql_OwnerDomicile=getDetails.OwnerDomicile
						sql_OwnerEmailAddress=getDetails.OwnerEmailAddress
						sql_BrokerReference=getDetails.BrokerReference
						sql_BrokerName=getDetails.BrokerName
						sql_BrokerEmailAddress=getDetails.BrokerEmailAddress
						sql_PolicyYear=getDetails.PolicyYear
						sql_CertificateIssueDate=getDetails.CertificateIssueDate
						sql_CertificateIssueDate=sql_CertificateIssueDate.toString().replace(" ","T")
						sql_CertificateIssueDate=getDate(sql_CertificateIssueDate.toString())
						sql_EmailAddress=getDetails.EmailAddress
						sql_CcEmailAddress=getDetails.CcEmailAddress
						sql_EffectiveStartDate=getDetails.EffectiveStartDate
						sql_EffectiveStartDate=sql_EffectiveStartDate.toString().replace(" ","T")
						sql_EffectiveStartDate=getDate(sql_EffectiveStartDate.toString())
						sql_EffectiveEndDate=getDetails.EffectiveEndDate
						sql_EffectiveEndDate=sql_EffectiveEndDate.toString().replace(" ","T")
						sql_EffectiveEndDate=getDate(sql_EffectiveEndDate.toString())
						sql_PassengerCapacity=getDetails.PassengerCapacity
						sql_PolicyStartDate=getDetails.PolicyStartDate
						sql_PolicyStartDate=sql_PolicyStartDate.toString().replace(" ","T")
						sql_PolicyStartDate=getDate(sql_PolicyStartDate.toString())
						sql_PolicyEndDate=getDetails.PolicyEndDate
						sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" ","T")
						sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())
						sql_CurrencyCode=getDetails.CurrencyCode
						sql_CoverLimitAmount=getDetails.CoverLimitAmount
						sql_SignatoryState_Id=getDetails.SignatoryState_Id
						sql_SignatoryStateAddressId=getDetails.SignatoryStateAddressId
						sql_VesselName=getDetails.VesselName
						sql_VesselType=getDetails.VesselType
						sql_VesselTypeName=getDetails.VesselTypeName
						sql_vesselEnteredDate=getDetails.vesselEnteredDate
						sql_vesselEnteredDate=sql_vesselEnteredDate.toString().replace(" ","T")
						sql_vesselEnteredDate=getDate(sql_vesselEnteredDate.toString())
						sql_vesselFlag=getDetails.vesselFlag
						sql_imoNumber=getDetails.imoNumber
						sql_distinctiveNumbersOrLetters=getDetails.distinctiveNumbersOrLetters
						sql_grossTonnage=getDetails.grossTonnage
						sql_yearBuilt=getDetails.yearBuilt
						sql_engineHorsePower=getDetails.engineHorsePower
						sql_TradeMark=getDetails.TradeMark
						sql_model=getDetails.model
						sql_engineNo=getDetails.engineNo
						sql_NominatedStateFlag=getDetails.NominatedStateFlag
						sql_NominatedStateFlagName=getDetails.NominatedStateFlagName
						sql_portOfRegistry=getDetails.portOfRegistry
						sql_tenderReferenceList=getDetails.tenderReferenceList
						sql_TenderOutboardReferenceList=getDetails.TenderOutboardReferenceList
						sql_TradingCertificateTypeId=getDetails.TradingCertificateTypeId
						sql_TradingCertificateGroupId=getDetails.TradingCertificateGroupId
						sql_TradingCertificateGroupName=getDetails.TradingCertificateGroupName
						sql_TradingCertificateGroupCode=getDetails.TradingCertificateGroupCode
						sql_TypeCode=getDetails.TypeCode
						sql_TypeName=getDetails.TypeName
						sql_BranchCode=getDetails.BranchCode
						sql_TradingCertificatePack_Id=getDetails.TradingCertificatePack_Id

						log.info "SQL response received as =>"+sql_TradingCertificateId+","+sql_AddressType_Id+","+sql_SourceSystem+","+sql_Reference+","+sql_CurrentStatus+","+sql_StorageId+","+sql_RiskId+","+sql_ApplicationRiskId+","+sql_PolicyId+","+sql_MemberPartyId+","+sql_OwnerPartyId+","+sql_BrokerPartyId+","+sql_BrokerContactPartyId+","+sql_JointAssuredPartyId+","+sql_IsRenewal+","+sql_IsYacht+","+sql_Version+","+sql_RiskReference+","+sql_PolicyReference+","+sql_MemberReference+","+sql_MemberType+","+sql_MemberName+","+sql_JointAssuredName+","+sql_OwnerReference+","+sql_OwnerName+","+sql_OwnerDomicile+","+sql_OwnerEmailAddress+","+sql_BrokerReference+","+sql_BrokerName+","+sql_BrokerEmailAddress+","+sql_PolicyYear+","+sql_CertificateIssueDate+","+sql_EmailAddress+","+sql_CcEmailAddress+","+sql_EffectiveStartDate+","+sql_EffectiveEndDate+","+sql_PassengerCapacity+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_CurrencyCode+","+sql_CoverLimitAmount+","+sql_SignatoryState_Id+","+sql_SignatoryStateAddressId+","+sql_VesselName+","+sql_VesselType+","+sql_VesselTypeName+","+sql_vesselEnteredDate+","+sql_vesselFlag+","+sql_imoNumber+","+sql_distinctiveNumbersOrLetters+","+sql_grossTonnage+","+sql_yearBuilt+","+sql_engineHorsePower+","+sql_TradeMark+","+sql_model+","+sql_engineNo+","+sql_NominatedStateFlag+","+sql_NominatedStateFlagName+","+sql_portOfRegistry+","+sql_tenderReferenceList+","+sql_TenderOutboardReferenceList+","+sql_TradingCertificateTypeId+","+sql_TradingCertificateGroupId+","+sql_TradingCertificateGroupName+","+sql_TradingCertificateGroupCode+","+sql_TypeCode+","+sql_TypeName+","+sql_BranchCode+","+sql_TradingCertificatePack_Id
						arrCellVal=[sql_TradingCertificateId,sql_AddressType_Id,sql_SourceSystem,sql_Reference,sql_CurrentStatus,sql_StorageId,sql_RiskId,sql_ApplicationRiskId, sql_PolicyId,sql_MemberPartyId,sql_OwnerPartyId,sql_BrokerPartyId,sql_BrokerContactPartyId,sql_JointAssuredPartyId,sql_IsRenewal,sql_IsYacht,sql_Version,sql_RiskReference,sql_PolicyReference,sql_MemberReference,sql_MemberType,sql_MemberName,sql_JointAssuredName,sql_OwnerReference,sql_OwnerName,sql_OwnerDomicile,sql_OwnerEmailAddress,sql_BrokerReference,sql_BrokerName,sql_BrokerEmailAddress,sql_PolicyYear,sql_CertificateIssueDate,sql_EmailAddress,sql_CcEmailAddress,sql_EffectiveStartDate,sql_EffectiveEndDate,sql_PassengerCapacity,sql_PolicyStartDate,sql_PolicyEndDate,sql_CurrencyCode,sql_CoverLimitAmount,sql_SignatoryState_Id,sql_SignatoryStateAddressId,sql_VesselName,sql_VesselType,sql_VesselTypeName,sql_vesselEnteredDate,sql_vesselFlag,sql_imoNumber,sql_distinctiveNumbersOrLetters,sql_grossTonnage,sql_yearBuilt,sql_engineHorsePower,sql_TradeMark,sql_model,sql_engineNo,sql_NominatedStateFlag,sql_NominatedStateFlagName,sql_portOfRegistry,sql_tenderReferenceList,sql_TenderOutboardReferenceList,sql_TradingCertificateTypeId,sql_TradingCertificateGroupId,sql_TradingCertificateGroupName,sql_TradingCertificateGroupCode,sql_TypeCode,sql_TypeName,sql_BranchCode,sql_TradingCertificatePack_Id]
						RT.writeDetails(source, counter, api_startCol, rowStyle, arrCellVal)
						total_size++
						counter++
						try
						{
							RT.saveExcelFile(summary_File,O_Summary)
						}
						catch(Exception e)
						{
						  log.info e.getMessage();	
						}
					}//sql end
			 }//for loop end
			con.close()

			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for newly Created document as per Application ID with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String  removeComma(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field==null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
		field="NULL"
	}
	if(field!=null)
		field=field.toUpperCase()
	return field
}
public String removeDotFromCurrency(String field)
{
	if(field!=null && field.contains(".00"))
		field=field.replace(".00","")
	return field	
}
public String getDate(String field)
{
	if(field!=null && field.length()==21)
		field = field.substring(0, field.length() - 2);
	
	if(field==null)
			field="NULL"
	else if(field=="" || field==" " || field==null)	
			field="NULL"
	return field
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>91737</con:value></con:property><con:property><con:name>documentId</con:name><con:value>600376</con:value></con:property></con:properties></con:testCase><con:testCase id="705cf18f-8626-4d15-88e2-f3684bede6ec" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByRisks_Deprecated" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByRisks" id="0587b0f0-e51f-43f7-b349-c95a8be6bdc0"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationid}/risks" methodName="ApplicationByApplicationIdByRisks" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByRisks" id="86d726da-eb43-411b-b880-ff79ff951948" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76009/risks</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByRisks" id="685655ae-60ed-4721-8039-a66d8ef70399"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList&lt;String> arrayList = new ArrayList&lt;>();

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_ApplicationByApplicationIdByRisks"))
		tcModuleName="AppByAppIdByRisks"
		
	if(tcModuleName.toString().equals("AppByAppIdByRisks"))
	{
		log.info "Test Execution started for getting Risk Details as per Application Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Key","ApplicationId","ApplicationRiskId","Id","RiskReference","MemberId","MemberReference","MemberName","ApplicationReference","ApplicationType","EmailAddress","VesselId","ImoNumber","VesselName","VesselType","CallSign","GrossTonnage","YearBuilt","FlagCountryCode","FlagCountryName","PortOfRegistryCode","PortOfRegistryName","RiskCategoryName","EngineHorsePower","TrademarkEngineModelNumber","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			Use TOM
			SELECT
			DISTINCT
			TOP 100
			AR.Id as ApplicationRiskId, AR.Risk_Id as Id, R.Reference as RiskReference, AMA.MemberAssured_Id as MemberId, MA.Reference as MemberReference,
			P.OrganisationName as MemberName, AB.Id as ApplicationId, AB.Reference as ApplicationReference, AB.Discriminator as ApplicationType, [User].EmailAddress,
			AR.Risk_Id as VesselId, RV.ImoNumber, R.Name as VesselName, VT.Name as VesselType, RV.CallSign, Rv.GrossTonnage, RV.YearBuilt, con.ShortCode as FlagCountryCode, 
			con.Name as FlagCountryName, RP.ShortCode as PortOfRegistryCode, RP.Name as PortOfRegistryName, RST.Name as RiskCategoryName, 
			RV.EngineHorsePower, RV.TrademarkEngineModelNumber
			from ApplicationRisk AR
			inner join ApplicationMemberAssured AMA on AMA.Id=AR.ApplicationMemberAssured_Id
			inner join ApplicationBase AB on AB.Id = AMA.Application_Id
			inner join MemberAssured MA on MA.Id = AMA.MemberAssured_Id
			inner join Risk R on R.Id = AR.Risk_Id
			inner join Party P on P.Id= MA.Party_Id
			join [user] on AB.Underwriter_Id = [User].Id
			join RiskVessel RV on RV.Id = R.Id
			join ref_VesselType VT on VT.Id=RV.Type_Id
			left join ref_Port RP on RP.Id = RV.PortOfRegistry_Id
			join ref_RiskSubType RST on RST.Id = RV.Category_Id
			left join ref_Country Con on Con.id = RV.Flag_Id
			where AB.Discriminator in ('Quote', 'Policy')
			--and AB.Id=92896
			order by 1 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_ApplicationRiskId=row.ApplicationRiskId
				sql_Id=row.Id
				sql_RiskReference=row.RiskReference
				sql_RiskReference=removeComma(sql_RiskReference.toString())
				sql_MemberId=row.MemberId
				sql_MemberReference=row.MemberReference
				sql_MemberReference=removeComma(sql_MemberReference.toString())
				sql_MemberName=row.MemberName
				sql_MemberName=removeComma(sql_MemberName.toString())
				sql_ApplicationId=row.ApplicationId
				arrayList.add(sql_ApplicationId)
				sql_ApplicationReference=row.ApplicationReference
				sql_ApplicationReference=removeComma(sql_ApplicationReference.toString())
				sql_ApplicationType=row.ApplicationType
				sql_EmailAddress=row.EmailAddress
				sql_VesselId=row.VesselId
				sql_ImoNumber=row.ImoNumber
				sql_ImoNumber=removeComma(sql_ImoNumber.toString())
				sql_VesselName=row.VesselName
				sql_VesselName=removeComma(sql_VesselName.toString())
				sql_VesselType=row.VesselType
				sql_VesselType=removeComma(sql_VesselType.toString())
				sql_CallSign=row.CallSign
				sql_CallSign=removeComma(sql_CallSign.toString())
				sql_GrossTonnage=row.GrossTonnage
				sql_GrossTonnage=removeComma(sql_GrossTonnage.toString())
				sql_YearBuilt=row.YearBuilt
				sql_YearBuilt=removeComma(sql_YearBuilt.toString())
				sql_FlagCountryCode=row.FlagCountryCode
				sql_FlagCountryCode=removeComma(sql_FlagCountryCode.toString())
				sql_FlagCountryName=row.FlagCountryName
				sql_FlagCountryName=removeComma(sql_FlagCountryName.toString())
				sql_PortOfRegistryCode=row.PortOfRegistryCode
				sql_PortOfRegistryName=row.PortOfRegistryName
				sql_PortOfRegistryName=removeComma(sql_PortOfRegistryName.toString())
				sql_RiskCategoryName=row.RiskCategoryName
				sql_RiskCategoryName=removeComma(sql_RiskCategoryName.toString())
				sql_EngineHorsePower=row.EngineHorsePower
				sql_EngineHorsePower=removeComma(sql_EngineHorsePower.toString())
				sql_TrademarkEngineModelNumber=row.TrademarkEngineModelNumber
				sql_TrademarkEngineModelNumber=removeComma(sql_TrademarkEngineModelNumber.toString())

				key=sql_ApplicationId+"_"+sql_ApplicationRiskId+"_"+sql_Id+"_"+sql_RiskReference

				log.info "SQL Response is received as =>"+key+","+sql_ApplicationId+","+sql_ApplicationRiskId+","+sql_Id+","+sql_RiskReference+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_EmailAddress+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber
				arrCellVal=[key,sql_ApplicationId,sql_ApplicationRiskId,sql_Id,sql_RiskReference,sql_MemberId,sql_MemberReference,sql_MemberName,sql_ApplicationReference,sql_ApplicationType,sql_EmailAddress,sql_VesselId,sql_ImoNumber,sql_VesselName,sql_VesselType,sql_CallSign,sql_GrossTonnage,sql_YearBuilt,sql_FlagCountryCode,sql_FlagCountryName,sql_PortOfRegistryCode,sql_PortOfRegistryName,sql_RiskCategoryName,sql_EngineHorsePower,sql_TrademarkEngineModelNumber];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldAppId=00

			for (int j = 0; j &lt; arrayList.size(); j++)
			 {
			 	int appId=arrayList.get(j).toInteger()
			 	if(oldAppId==appId)
			 	{
			 		oldAppId=appId
			 	}
			 	else
			 	{
			 		log.info "Getting API response for Application Id=>"+appId
			 	
				 	testRunner.testCase.setPropertyValue('applicationId',appId.toString())
					
					testRunner.testCase.setPropertyValue('token',token)
					testRunner.runTestStepByName('AppByAppIdByRisks')
					String req='${AppByAppIdByRisks#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["AppByAppIdByRisks"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					log.info "Original API response is=>"+response
					log.info "HTTP Status Code received as=>"+httpStatusCode
					
					if(httpStatusCode.toString().equals("200"))
					{
						def jsonRes=jsonSlurper.parseText(response)
						int jsonRecordCount = jsonRes.totalRecords
						//size=jsonRes.totalRecords.toInteger()
						//total_size+=size
						for (int i=0; i&lt;jsonRecordCount; i++)
						{
						api_ApplicationRiskId=jsonRes.results.applicationRiskId[i]
						//api_ApplicationRiskId=removeComma(api_ApplicationRiskId.toString())
				
						api_Id=jsonRes.results.id[i]
						//api_Id=removeComma(api_Id.toString())
						
						api_RiskReference=jsonRes.results.reference[i]
						api_RiskReference=removeComma(api_RiskReference.toString())
						
						api_MemberId=jsonRes.results.memberId[i]
						//api_MemberId=removeComma(api_MemberId.toString())
						
						api_MemberReference=jsonRes.results.memberReference[i]
						api_MemberReference=removeComma(api_MemberReference.toString())
						
						api_MemberName=jsonRes.results.memberName[i]
						api_MemberName=removeComma(api_MemberName.toString())
						
						api_ApplicationId=jsonRes.results.applicationId[i]
						//api_ApplicationId=removeComma(api_ApplicationId.toString())
						
						api_ApplicationReference=jsonRes.results.applicationReference[i]
						api_ApplicationReference=removeComma(api_ApplicationReference.toString())
						
						api_ApplicationType=jsonRes.results.applicationType[i]
						api_ApplicationType=removeComma(api_ApplicationType.toString())
						
						api_EmailAddress=jsonRes.results.applicationUnderwriterEmail[i]
						api_EmailAddress=removeComma(api_EmailAddress.toString())
						
						api_VesselId=jsonRes.results.vessel.id[i]
						//api_VesselId=removeComma(api_VesselId.toString())
						
						api_ImoNumber=jsonRes.results.vessel.imoNumber[i]
						api_ImoNumber=removeComma( api_ImoNumber.toString())
						
						api_VesselName=jsonRes.results.vessel.vesselName[i]
						api_VesselName=removeComma(api_VesselName.toString())
						
						api_VesselType=jsonRes.results.vessel.vesselType[i]
						api_VesselType=removeComma(api_VesselType.toString())
						
						api_CallSign=jsonRes.results.vessel.callSign[i]
						api_CallSign=removeComma(api_CallSign.toString())
						
						api_GrossTonnage=jsonRes.results.vessel.grossTonnage[i]
						api_GrossTonnage=removeComma(api_GrossTonnage.toString())
						
						api_YearBuilt=jsonRes.results.vessel.yearBuilt[i]
						api_YearBuilt=removeComma(api_YearBuilt.toString())
						
						api_FlagCountryCode=jsonRes.results.vessel.flagCountryCode[i]
						api_FlagCountryCode=removeComma(api_FlagCountryCode.toString())
						
						api_FlagCountryName=jsonRes.results.vessel.flagCountryName[i]
						api_FlagCountryName=removeComma(api_FlagCountryName.toString())
						
						api_PortOfRegistryCode=jsonRes.results.vessel.portOfRegistryCode[i]
						api_PortOfRegistryCode=removeComma(api_PortOfRegistryCode.toString())
						
						api_PortOfRegistryName=jsonRes.results.vessel.portOfRegistryName[i]
						api_PortOfRegistryName=removeComma(api_PortOfRegistryName.toString())
						
						api_RiskCategoryName=jsonRes.results.vessel.riskCategoryName[i]
						api_RiskCategoryName=removeComma(api_RiskCategoryName.toString())
						
						api_EngineHorsePower=jsonRes.results.vessel.engineHorsePower[i]
						api_EngineHorsePower=removeComma(api_EngineHorsePower.toString())
						
						api_TrademarkEngineModelNumber=jsonRes.results.vessel.trademarkAndEngineModel[i]
						api_TrademarkEngineModelNumber=removeComma(api_TrademarkEngineModelNumber.toString())
	
						key=api_ApplicationId+"_"+api_ApplicationRiskId+"_"+api_Id+"_"+api_RiskReference
						
						log.info "API response received as : "+key+","+api_ApplicationId+","+api_ApplicationRiskId+","+api_Id+","+api_RiskReference+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_VesselId+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_GrossTonnage+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_EngineHorsePower+","+api_TrademarkEngineModelNumber
						arrCellVal=[key,api_ApplicationId,api_ApplicationRiskId,api_Id,api_RiskReference,api_MemberId,api_MemberReference,api_MemberName,api_ApplicationReference,api_ApplicationType,api_EmailAddress,api_VesselId,api_ImoNumber,api_VesselName,api_VesselType,api_CallSign,api_GrossTonnage,api_YearBuilt,api_FlagCountryCode,api_FlagCountryName,api_PortOfRegistryCode,api_PortOfRegistryName,api_RiskCategoryName,api_EngineHorsePower,api_TrademarkEngineModelNumber];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++				
					}
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
					oldAppId=appId	
			 	}	
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Risk Details as per Application Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}</script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>90583</con:value></con:property></con:properties></con:testCase><con:testCase id="0ddb2a13-f464-42c6-afe8-f4d9bab5ffee" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_MemberByMemberIdByRisks_Deprecated" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="MemByMemIdByRisks" id="dcd985e9-8298-414d-bab9-8867b8c20a1a"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/members/${#TestCase#memberId}/risks" methodName="MemberByMemberIdByRisks" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="MemByMemIdByRisks" id="fe2bf82e-4c43-4040-beb0-a65e8b74a4cb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/members/44904/risks</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="MemberByMemberIdByRisks" id="dd7990c6-3607-4153-9b3b-4ea2e3855392" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution execution strted for Member By Member Id By Risk ************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt="""
			USE TOM
			SELECT 
			TOP 100
			AR.Id as ApplicationRiskId, RV.Id as RiskVesselId, R.Reference as RiskReference, AMA.MemberAssured_Id as MemberId, MA.Reference,
			P.OrganisationName,
			AB.Id as ApplicationID, Ab.Reference as ApplicationReference, AB.Discriminator, [User].EmailAddress,
			R.Name as VesselName, RV.CallSign, RV.ImoNumber, Rv.GrossTonnage, RV.YearBuilt, VT.Name as VesselType, con.ShortCode as FlagCountryCode, 
			con.Name as FlagCountryName, RP.ShortCode as PortOfRegistryCode, RP.Name as PortOfRegistryName, RST.Name as RiskCategoryName, 
			RV.EngineHorsePower, RV.TrademarkEngineModelNumber
			from ApplicationBase AB
			join ApplicationMemberAssured AMA on AMA.Application_Id=AB.Id
			join ApplicationRisk AR on AR.ApplicationMemberAssured_Id=AMA.Id
			join Risk R on R.Id = AR.Risk_Id
			join RiskVessel RV on RV.Id = R.Id
			join [user] on AB.Underwriter_Id = [User].Id
			join ref_VesselType VT on VT.Id=RV.Type_Id
			left join ref_Port RP on RP.Id = RV.PortOfRegistry_Id
			join ref_RiskSubType RST on RST.Id = RV.Category_Id
			left join ref_Country Con on Con.id = RV.Flag_Id
			left join MemberAssured MA on AMA.MemberAssured_Id=MA.Id
			inner join Party P on P.Id=MA.Party_Id
			where 
			AB.Reference NOT in (
			select AB.Reference from ApplicationBase AB 
			join ApplicationMemberAssured AMA on AMA.Application_Id =AB.Id 
			where AB.Discriminator in ('RenewalQuote')) and AB.Discriminator='Policy'
			order by 4 desc
"""
def rows=con.rows(sqlstmt) 
int db_size=rows.size

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
	
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_MemberByMemberIdByRisk.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_MemberByMemberIdByRisk.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_MemberByMemberIdByRisk.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_MemberByMemberIdByRisk"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_MemberByMemberIdByRisk"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_MemberByMemberIdByRisk"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()
				
sqlWriter.println("SQL_ApplicationRiskId"+","+"SQL_RiskVesselId"+","+"SQL_RiskReference"+","+"SQL_MemberId"+","+"SQL_Reference"+","+"SQL_OrganisationName"+","+"SQL_ApplicationID"+","+"SQL_ApplicationReference"+","+"SQL_Discriminator"+","+"SQL_EmailAddress"+","+"SQL_ImoNumber"+","+"SQL_VesselName"+","+"SQL_VesselType"+","+"SQL_CallSign"+","+"SQL_GrossTonnage"+","+"SQL_YearBuilt"+","+"SQL_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"SQL_EngineHorsePower"+","+"SQL_TrademarkEngineModelNumber")
apiWriter.println("API_ApplicationRiskId"+","+"API_RiskVesselId"+","+"API_RiskReference"+","+"API_MemberId"+","+"API_Reference"+","+"API_OrganisationName"+","+"API_ApplicationID"+","+"API_ApplicationReference"+","+"API_Discriminator"+","+"API_EmailAddress"+","+"API_ImoNumber"+","+"API_VesselName"+","+"API_VesselType"+","+"API_CallSign"+","+"API_GrossTonnage"+","+"API_YearBuilt"+","+"API_FlagCountryCode"+","+"API_FlagCountryName"+","+"API_PortOfRegistryCode"+","+"API_PortOfRegistryName"+","+"API_RiskCategoryName"+","+"API_EngineHorsePower"+","+"API_TrademarkEngineModelNumber")
compareWriter.println("SQL_ApplicationRiskId"+","+"API_ApplicationRiskId"+","+"SQL_RiskVesselId"+","+"API_RiskVesselId"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_Reference"+","+"API_Reference"+","+"SQL_OrganisationName"+","+"API_OrganisationName"+","+"SQL_ApplicationID"+","+"API_ApplicationID"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_Discriminator"+","+"API_Discriminator"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_ImoNumber"+","+"API_ImoNumber"+","+"SQL_VesselName"+","+"API_VesselName"+","+"SQL_VesselType"+","+"API_VesselType"+","+"SQL_CallSign"+","+"API_CallSign"+","+"SQL_GrossTonnage"+","+"API_GrossTonnage"+","+"SQL_YearBuilt"+","+"API_YearBuilt"+","+"SQL_FlagCountryCode"+","+"API_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"API_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"API_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"API_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"API_RiskCategoryName"+","+"SQL_EngineHorsePower"+","+"API_EngineHorsePower"+","+"SQL_TrademarkEngineModelNumber"+","+"API_TrademarkEngineModelNumber"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
String field=null
int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
		sql_ApplicationRiskId=row.ApplicationRiskId
		field=sql_ApplicationRiskId
		sql_ApplicationRiskId=removeCommaAndBrackets(field)
					
		sql_RiskVesselId=row.RiskVesselId
		field=sql_RiskVesselId
		sql_RiskVesselId=removeCommaAndBrackets(field)
		
		sql_RiskReference=row.RiskReference
		field=sql_RiskReference
		sql_RiskReference=removeCommaAndBrackets(field)
		
		sql_MemberId=row.MemberId
		field=sql_MemberId
		sql_MemberId=removeCommaAndBrackets(field)
		
		sql_Reference=row.Reference
		field=sql_Reference
		sql_Reference=removeCommaAndBrackets(field)
		
		sql_OrganisationName=row.OrganisationName
		field=sql_OrganisationName
		sql_OrganisationName=removeCommaAndBrackets(field)
		
		sql_ApplicationID=row.ApplicationID
		field=sql_ApplicationID
		sql_ApplicationID=removeCommaAndBrackets(field)
		
		sql_ApplicationReference=row.ApplicationReference
		field=sql_ApplicationReference
		sql_ApplicationReference=removeCommaAndBrackets(field)
		
		sql_Discriminator=row.Discriminator
		field=sql_Discriminator
		sql_Discriminator=removeCommaAndBrackets(field)
		
		sql_EmailAddress=row.EmailAddress
		field=sql_EmailAddress
		sql_EmailAddress=removeCommaAndBrackets(field)
		
		sql_ImoNumber=row.ImoNumber
		field=sql_ImoNumber
		sql_ImoNumber=removeCommaAndBrackets(field)
		
		sql_VesselName=row.VesselName
		field=sql_VesselName
		sql_VesselName=removeCommaAndBrackets(field)
		
		sql_VesselType=row.VesselType
		field=sql_VesselType
		sql_VesselType=removeCommaAndBrackets(field)
		
		sql_CallSign=row.CallSign
		field=sql_CallSign
		sql_CallSign=removeCommaAndBrackets(field)
		
		sql_GrossTonnage=row.GrossTonnage
		field=sql_GrossTonnage
		sql_GrossTonnage=removeCommaAndBrackets(field)
		
		sql_YearBuilt=row.YearBuilt
		field=sql_YearBuilt
		sql_YearBuilt=removeCommaAndBrackets(field)
		
		sql_FlagCountryCode=row.FlagCountryCode
		field=sql_FlagCountryCode
		sql_FlagCountryCode=removeCommaAndBrackets(field)
		
		sql_FlagCountryName=row.FlagCountryName
		field=sql_FlagCountryName
		sql_FlagCountryName=removeCommaAndBrackets(field)
		
		sql_PortOfRegistryCode=row.PortOfRegistryCode
		field=sql_PortOfRegistryCode
		sql_PortOfRegistryCode=removeCommaAndBrackets(field)
		
		sql_PortOfRegistryName=row.PortOfRegistryName
		field=sql_PortOfRegistryName
		sql_PortOfRegistryName=removeCommaAndBrackets(field)
		
		sql_RiskCategoryName=row.RiskCategoryName
		field=sql_RiskCategoryName
		sql_RiskCategoryName=removeCommaAndBrackets(field)
		
		sql_EngineHorsePower=row.EngineHorsePower
		field=sql_EngineHorsePower
		sql_EngineHorsePower=removeCommaAndBrackets(field)
		
		sql_TrademarkEngineModelNumber=row.TrademarkEngineModelNumber
		field=sql_TrademarkEngineModelNumber
		sql_TrademarkEngineModelNumber=removeCommaAndBrackets(field)
		
		sqlWriter.println(sql_ApplicationRiskId+","+sql_RiskVesselId+","+sql_RiskReference+","+sql_MemberId+","+sql_Reference+","+sql_OrganisationName+","+sql_ApplicationID+","+sql_ApplicationReference+","+sql_Discriminator+","+sql_EmailAddress+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber)
		log.info "SQL Response received as : "+sql_ApplicationRiskId+","+sql_RiskVesselId+","+sql_RiskReference+","+sql_MemberId+","+sql_Reference+","+sql_OrganisationName+","+sql_ApplicationID+","+sql_ApplicationReference+","+sql_Discriminator+","+sql_EmailAddress+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber

		//Set the Application ID at test case level
		String memberId=sql_MemberId
		testRunner.testCase.setPropertyValue("memberId", memberId)

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)

		//Run the test step to get response
		testRunner.runTestStepByName("MemByMemIdByRisks")
		String req='${MemByMemIdByRisks#Response}'
		response=context.expand(req)
		//log.info "API Response received is :"+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		
	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["MemByMemIdByRisks"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		int count =  jsonRes.totalRecords
		for (int i=0; i<count; i++)
		{
			String newId= jsonRes.results.memberId[i]
			newId=removeCommaAndBrackets(newId)
			if(sql_MemberId.toString().equals(newId.toString()))
			{
				api_ApplicationRiskId= jsonRes.results.applicationRiskId[i]
				field=api_ApplicationRiskId
				api_ApplicationRiskId=removeCommaAndBrackets(field)
				
				api_RiskVesselId= jsonRes.results.id[i]
				field=api_RiskVesselId
				api_RiskVesselId=removeCommaAndBrackets(field)
				
				api_RiskReference= jsonRes.results.reference[i]
				field=api_RiskReference
				api_RiskReference=removeCommaAndBrackets(field)
				
				api_MemberId= jsonRes.results.memberId[i]
				field=api_MemberId
				api_MemberId=removeCommaAndBrackets(field)
				
				api_Reference= jsonRes.results.memberReference[i]
				field=api_Reference
				api_Reference=removeCommaAndBrackets(field)
				
				api_OrganisationName= jsonRes.results.memberName[i]
				field=api_OrganisationName
				api_OrganisationName=removeCommaAndBrackets(field)
				
				api_ApplicationID= jsonRes.results.applicationId[i]
				field=api_ApplicationRiskId
				api_ApplicationRiskId=removeCommaAndBrackets(field)
				
				api_ApplicationReference= jsonRes.results.applicationReference[i]
				field=api_ApplicationReference
				api_ApplicationReference=removeCommaAndBrackets(field)
				
				api_ApplicationType= jsonRes.results.applicationType[i]
				field=api_ApplicationType
				api_ApplicationType=removeCommaAndBrackets(field)
				
				api_EmailAddress= jsonRes.results.applicationUnderwriterEmail[i]
				field=api_EmailAddress
				api_EmailAddress=removeCommaAndBrackets(field)
				
				api_ImoNumber= jsonRes.results.vessel.imoNumber[i]
				field=api_ImoNumber
				api_ImoNumber=removeCommaAndBrackets(field)
				
				api_VesselName= jsonRes.results.vessel.vesselName[i]
				field=api_VesselName
				api_VesselName=removeCommaAndBrackets(field)
				
				api_VesselType= jsonRes.results.vessel.vesselType[i]
				field=api_VesselType
				api_VesselType=removeCommaAndBrackets(field)
				
				api_CallSign= jsonRes.results.vessel.callSign[i]
				field=api_CallSign
				api_CallSign=removeCommaAndBrackets(field)
				
				api_GrossTonnage= jsonRes.results.vessel.grossTonnage[i]
				field=api_GrossTonnage
				api_GrossTonnage=removeCommaAndBrackets(field)
				
				api_YearBuilt= jsonRes.results.vessel.yearBuilt[i]
				field=api_YearBuilt
				api_YearBuilt=removeCommaAndBrackets(field)
				
				api_FlagCountryCode= jsonRes.results.vessel.flagCountryCode[i]
				field=api_FlagCountryCode
				api_FlagCountryCode=removeCommaAndBrackets(field)
				
				api_FlagCountryName= jsonRes.results.vessel.flagCountryName[i]
				field=api_FlagCountryName
				api_FlagCountryName=removeCommaAndBrackets(field)
				
				api_PortOfRegistryCode= jsonRes.results.vessel.portOfRegistryCode[i]
				field=api_PortOfRegistryCode
				api_PortOfRegistryCode=removeCommaAndBrackets(field)
				
				api_PortOfRegistryName= jsonRes.results.vessel.portOfRegistryName[i]
				field=api_PortOfRegistryName
				api_PortOfRegistryName=removeCommaAndBrackets(field)
				
				api_RiskCategoryName= jsonRes.results.vessel.riskCategoryName[i]
				field=api_RiskCategoryName
				api_RiskCategoryName=removeCommaAndBrackets(field)
				
				api_EngineHorsePower= jsonRes.results.vessel.engineHorsePower[i]
				field=api_EngineHorsePower
				api_EngineHorsePower=removeCommaAndBrackets(field)
				
				api_TrademarkEngineModelNumber= jsonRes.results.vessel.trademarkAndEngineModel[i]
				field=api_TrademarkEngineModelNumber
				api_TrademarkEngineModelNumber=removeCommaAndBrackets(field)
		
				//sqlWriter.println(sql_ApplicationRiskId+","+sql_RiskVesselId+","+sql_RiskReference+","+sql_MemberId+","+sql_Reference+","+sql_OrganisationName+","+sql_ApplicationID+","+sql_ApplicationReference+","+sql_Discriminator+","+sql_EmailAddress+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber)
				apiWriter.println(api_ApplicationRiskId+","+api_RiskVesselId+","+api_RiskReference+","+api_MemberId+","+api_Reference+","+api_OrganisationName+","+api_ApplicationID+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_GrossTonnage+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_EngineHorsePower+","+api_TrademarkEngineModelNumber)
				log.info "API response received as :"+api_ApplicationRiskId+","+api_RiskVesselId+","+api_RiskReference+","+api_MemberId+","+api_Reference+","+api_OrganisationName+","+api_ApplicationID+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_GrossTonnage+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_EngineHorsePower+","+api_TrademarkEngineModelNumber			
		
				if(sql_ApplicationRiskId.toString().equals(api_ApplicationRiskId.toString()) && sql_RiskVesselId.toString().equals(api_RiskVesselId.toString()) && sql_RiskReference.toString().equals(api_RiskReference.toString()) && sql_MemberId.toString().equals(api_MemberId.toString()) && sql_Reference.toString().equals(api_Reference.toString()) && sql_OrganisationName.toString().toUpperCase().equals(api_OrganisationName.toString().toUpperCase()) && sql_ApplicationID.toString().equals(api_ApplicationID.toString()) && sql_ApplicationReference.toString().equals(api_ApplicationReference.toString()) && sql_Discriminator.toString().toUpperCase().equals(api_ApplicationType.toString().toUpperCase()) && sql_EmailAddress.toString().toUpperCase().equals(api_EmailAddress.toString().toUpperCase()) && sql_ImoNumber.toString().equals(api_ImoNumber.toString()) && sql_VesselName.toString().toUpperCase().equals(api_VesselName.toString().toUpperCase()) && sql_VesselType.toString().toUpperCase().equals(api_VesselType.toString().toUpperCase()) && sql_CallSign.toString().toUpperCase().equals(api_CallSign.toString().toUpperCase()) && sql_GrossTonnage.toString().equals(api_GrossTonnage.toString()) && sql_YearBuilt.toString().equals(api_YearBuilt.toString()) && sql_FlagCountryCode.toString().toUpperCase().equals(api_FlagCountryCode.toString().toUpperCase()) && sql_FlagCountryName.toString().toUpperCase().equals(api_FlagCountryName.toString().toUpperCase()) && sql_PortOfRegistryCode.toString().toUpperCase().equals(api_PortOfRegistryCode.toString().toUpperCase()) && sql_PortOfRegistryName.toString().toUpperCase().equals(api_PortOfRegistryName.toString().toUpperCase()) && sql_RiskCategoryName.toString().toUpperCase().equals(api_RiskCategoryName.toString().toUpperCase()) && sql_EngineHorsePower.toString().toUpperCase().equals(api_EngineHorsePower.toString().toUpperCase()) && sql_TrademarkEngineModelNumber.toString().toUpperCase().equals(api_TrademarkEngineModelNumber.toString().toUpperCase()))
				{
					compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskVesselId+","+api_RiskVesselId+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_Reference+","+api_Reference+","+sql_OrganisationName+","+api_OrganisationName+","+sql_ApplicationID+","+api_ApplicationID+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+"Test Case passed")
					log.info "Details are matching hence test case is passed"
					break;
				}
				else
				{
					compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskVesselId+","+api_RiskVesselId+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_Reference+","+api_Reference+","+sql_OrganisationName+","+api_OrganisationName+","+sql_ApplicationID+","+api_ApplicationID+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+"Test Case failed")
					log.info "Details are not matching hence test case is failed"
					break;
				}
			}
		}
	}
	counter=counter+1
	log.info "Number of records verified are : "+counter
}
public String removeCommaAndBrackets(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************End of Script for Member By Member Id By Risk ************"
log.info "************Execution Ended at "+newDateTimeString+"************"]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy" id="3e8e0705-a108-4f9a-b8c3-2a4803c90e50" disabled="true"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList&lt;String> memberIdList = new ArrayList&lt;>();

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_MemberByMemberIdByRisks"))
		tcModuleName="MembersByMemberIdByRisks"
		
	if(tcModuleName.toString().equals("MembersByMemberIdByRisks"))
	{
		log.info "Test Execution started for getting Risk Details as per Member By Member Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			//"Domicile",
			arrOutputHeader = ["Id","Reference","Party_Id","CrmIdentifier","IsOrganisation","OrganisationName","Salutation","FirstName","MiddleName","LastName","Name","SearchName","EmailAddress","Telephone","Fax","AddressID","AddressName","AddressLine1","AddressLine2","AddressLine3","City","StateOrProvince","Country","Postcode","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
			SELECT
			TOP 100
			AR.Id as ApplicationRiskId, RV.Id as RiskVesselId, R.Reference as RiskReference, AMA.MemberAssured_Id as MemberId, MA.Reference,P.OrganisationName, AB.Id as ApplicationID,
			Ab.Reference as ApplicationReference, AB.Discriminator, [User].EmailAddress, R.Name as VesselName, RV.CallSign, RV.ImoNumber, Rv.GrossTonnage, RV.YearBuilt, VT.Name as VesselType, con.ShortCode as FlagCountryCode,
			con.Name as FlagCountryName, RP.ShortCode as PortOfRegistryCode, RP.Name as PortOfRegistryName, RST.Name as RiskCategoryName, RV.EngineHorsePower, RV.TrademarkEngineModelNumber
			from ApplicationBase AB
			inner join ApplicationMemberAssured AMA on AMA.Application_Id=AB.Id
			inner join ApplicationRisk AR on AR.ApplicationMemberAssured_Id=AMA.Id
			inner join Risk R on R.Id = AR.Risk_Id
			inner join RiskVessel RV on RV.Id = R.Id
			inner join [user] on AB.Underwriter_Id = [User].Id
			inner join ref_VesselType VT on VT.Id=RV.Type_Id
			inner join ref_Port RP on RP.Id = RV.PortOfRegistry_Id--
			inner join ref_RiskSubType RST on RST.Id = RV.Category_Id
			inner join ref_Country Con on Con.id = RV.Flag_Id
			inner join MemberAssured MA on AMA.MemberAssured_Id=MA.Id
			inner join Party P on P.Id=MA.Party_Id
			inner join ApplicationPolicyStatus aps on ab.id = aps.Application_Id
			inner join ref_PolicyStatus rps on aps.PolicyStatus_Id = rps.id
			where ab.PolicyEnd > GETDATE()
			and r.MemberAssured_Id = 47511
			and ab.Discriminator = 'Policy'
			and aps.PolicyStatus_Id &lt;> 2
			union
			select
			AR.Id as ApplicationRiskId, RV.Id as RiskVesselId, R.Reference as RiskReference, AMA.MemberAssured_Id as MemberId, MA.Reference,P.OrganisationName, AB.Id as ApplicationID,
			Ab.Reference as ApplicationReference, AB.Discriminator, [User].EmailAddress, R.Name as VesselName, RV.CallSign, RV.ImoNumber, Rv.GrossTonnage, RV.YearBuilt, VT.Name as VesselType, con.ShortCode as FlagCountryCode,
			con.Name as FlagCountryName, RP.ShortCode as PortOfRegistryCode, RP.Name as PortOfRegistryName, RST.Name as RiskCategoryName, RV.EngineHorsePower, RV.TrademarkEngineModelNumber
			from ApplicationBase AB
			inner join ApplicationMemberAssured AMA on AMA.Application_Id=AB.Id
			inner join ApplicationRisk AR on AR.ApplicationMemberAssured_Id=AMA.Id
			inner join Risk R on R.Id = AR.Risk_Id
			inner join RiskVessel RV on RV.Id = R.Id
			inner join [user] on AB.Underwriter_Id = [User].Id
			inner join ref_VesselType VT on VT.Id=RV.Type_Id
			inner join ref_Port RP on RP.Id = RV.PortOfRegistry_Id--
			inner join ref_RiskSubType RST on RST.Id = RV.Category_Id
			inner join ref_Country Con on Con.id = RV.Flag_Id
			inner join MemberAssured MA on AMA.MemberAssured_Id=MA.Id
			inner join Party P on P.Id=MA.Party_Id
			where ab.PolicyEnd > GETDATE()
			and r.MemberAssured_Id = 47511
			and ab.Discriminator = 'RenewalQuote'
			and ab.status_id = 16
			order by 4 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_Id=row.Id
				log.info "Getting API response for Member Id=>"+sql_Id
				memberIdList.add(sql_Id)
				sql_Reference=row.Reference
				sql_Reference=removeComma(sql_Reference.toString())
				sql_Domicile=row.Domicile
				sql_Party_Id=row.Party_Id
				sql_CrmIdentifier=row.CrmIdentifier
				if(sql_CrmIdentifier!=null)	
						sql_CrmIdentifier=sql_CrmIdentifier.toUpperCase();
				sql_IsOrganisation=row.IsOrganisation
				if(sql_IsOrganisation!=null)	
						sql_IsOrganisation=sql_IsOrganisation.toString()toUpperCase();
				sql_OrganisationName=row.OrganisationName
				sql_Salutation=row.Salutation
				sql_FirstName=row.FirstName
				sql_MiddleName=row.MiddleName
				sql_LastName=row.LastName
				sql_Name=row.Name
				sql_SearchName=row.SearchName
				sql_EmailAddress=row.EmailAddress
				sql_Telephone=row.Telephone
				sql_Fax=row.Fax
				sql_AddressID=row.AddressID
				sql_AddressName=row.AddressName
				sql_AddressLine1=row.AddressLine1
				sql_AddressLine2=row.AddressLine2
				sql_AddressLine3=row.AddressLine3
				sql_City=row.City
				sql_StateOrProvince=row.StateOrProvince
				sql_Country=row.Country
				sql_Postcode=row.Postcode

				log.info "SQL Response is received as =>"+sql_Id+","+sql_Reference+","+sql_Domicile+","+sql_Party_Id+","+sql_CrmIdentifier+","+sql_IsOrganisation+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressID+","+sql_AddressName+","+sql_AddressLine1+","+sql_AddressLine2+","+sql_AddressLine3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode
				//sql_Domicile,
				arrCellVal=[sql_Id,sql_Reference,sql_Party_Id,sql_CrmIdentifier,sql_IsOrganisation,sql_OrganisationName,sql_Salutation,sql_FirstName,sql_MiddleName,sql_LastName,sql_Name,sql_SearchName,sql_EmailAddress,sql_Telephone,sql_Fax,sql_AddressID,sql_AddressName,sql_AddressLine1,sql_AddressLine2,sql_AddressLine3,sql_City,sql_StateOrProvince,sql_Country,sql_Postcode];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start

			for (int j = 0; j &lt; memberIdList.size(); j++)
			 {
			 	memberId=memberIdList.get(j)
			 	log.info "Getting API response for Member Id=>"+memberId
			 	
			 	testRunner.testCase.setPropertyValue('memberId',memberId.toString())
				
				testRunner.testCase.setPropertyValue('token',token)
				testRunner.runTestStepByName('MemByMemId')
				String req='${MemByMemId#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
	
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["MemByMemId"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				
				log.info "Original API response is=>"+response
				log.info "HTTP Status Code received as=>"+httpStatusCode
				
				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)
					
					api_MemberId=jsonRes.id	
					api_Reference=jsonRes.reference
					api_Reference=removeComma(api_Reference.toString())
					api_Domicile=jsonRes.domicile	
					api_Party_Id=jsonRes.party.id	
					api_CrmIdentifier=jsonRes.party.crmIdentifier	
					if(api_CrmIdentifier!=null)	
						api_CrmIdentifier=api_CrmIdentifier.toUpperCase();
					api_IsOrganisation=jsonRes.party.isOrganisation	
					if(api_IsOrganisation!=null)	
						api_IsOrganisation=api_IsOrganisation.toString().toUpperCase();
					api_OrganisationName=jsonRes.party.organisationName	
					api_Salutation=jsonRes.party.salutation	
					api_FirstName=jsonRes.party.firstName	
					api_MiddleName=jsonRes.party.middleName	
					api_LastName=jsonRes.party.lastName	
					api_Name=jsonRes.party.name	
					api_SearchName=jsonRes.party.searchName	
					api_EmailAddress=jsonRes.party.emailAddress	
					api_Telephone=jsonRes.party.telephone	
					api_Fax=jsonRes.party.fax	
					api_AddressId=jsonRes.party.addresses.id	
					api_AddressName=jsonRes.party.addresses.addressName	
					api_Line1=jsonRes.party.addresses.addressLine1	
					api_Line2=jsonRes.party.addresses.addressLine2	
					api_Line3=jsonRes.party.addresses.addressLine3	
					api_City=jsonRes.party.addresses.city	
					api_StateOrProvince=jsonRes.party.addresses.state	
					api_Country=jsonRes.party.addresses.country	
					api_Postcode=jsonRes.party.addresses.postalCode	

	
						log.info "API Response is received as =>"+api_MemberId+","+api_Reference+","+api_Domicile+","+api_Party_Id+","+api_CrmIdentifier+","+api_IsOrganisation+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode
						//api_Domicile,
						arrCellVal=[api_MemberId,api_Reference,api_Party_Id,api_CrmIdentifier,api_IsOrganisation,api_OrganisationName,api_Salutation,api_FirstName,api_MiddleName,api_LastName,api_Name,api_SearchName,api_EmailAddress,api_Telephone,api_Fax,api_AddressId,api_AddressName,api_Line1,api_Line2,api_Line3,api_City,api_StateOrProvince,api_Country,api_Postcode];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++
					//}
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}	
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Risk Details as per Member By Member Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="c52c4aa6-debc-4280-8c39-d70075a05236"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList<String> memberIdList= new ArrayList<>();

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_MemberByMemberIdByRisks"))
		tcModuleName="MemberByMemberIdByRisks"
		
	if(tcModuleName.toString().equals("MemberByMemberIdByRisks"))
	{
		log.info "Test Execution started for getting Risk Details as per Member Id from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["ApplicationRiskId","RiskVesselId","RiskReference","MemberId","Reference","OrganisationName","ApplicationID","ApplicationReference","ApplicationType","EmailAddress","VesselName","CallSign","ImoNumber","GrossTonnage","YearBuilt","VesselType","FlagCountryCode","FlagCountryName","PortOfRegistryCode","PortOfRegistryName","RiskCategoryName","EngineHorsePower","TrademarkEngineModelNumber","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
			SELECT
			TOP 5
			AR.Id as ApplicationRiskId, RV.Id as RiskVesselId, R.Reference as RiskReference, AMA.MemberAssured_Id as MemberId, MA.Reference,P.OrganisationName, AB.Id as ApplicationID,
			Ab.Reference as ApplicationReference, AB.Discriminator, [User].EmailAddress, R.Name as VesselName, RV.CallSign, RV.ImoNumber, Rv.GrossTonnage, RV.YearBuilt, VT.Name as VesselType, con.ShortCode as FlagCountryCode,
			con.Name as FlagCountryName, RP.ShortCode as PortOfRegistryCode, RP.Name as PortOfRegistryName, RST.Name as RiskCategoryName, RV.EngineHorsePower, RV.TrademarkEngineModelNumber
			from ApplicationBase AB
			inner join ApplicationMemberAssured AMA on AMA.Application_Id=AB.Id
			inner join ApplicationRisk AR on AR.ApplicationMemberAssured_Id=AMA.Id
			inner join Risk R on R.Id = AR.Risk_Id
			inner join RiskVessel RV on RV.Id = R.Id
			inner join [user] on AB.Underwriter_Id = [User].Id
			inner join ref_VesselType VT on VT.Id=RV.Type_Id
			inner join ref_Port RP on RP.Id = RV.PortOfRegistry_Id--
			inner join ref_RiskSubType RST on RST.Id = RV.Category_Id
			inner join ref_Country Con on Con.id = RV.Flag_Id
			inner join MemberAssured MA on AMA.MemberAssured_Id=MA.Id
			inner join Party P on P.Id=MA.Party_Id
			inner join ApplicationPolicyStatus aps on ab.id = aps.Application_Id
			inner join ref_PolicyStatus rps on aps.PolicyStatus_Id = rps.id
			where ab.PolicyEnd > GETDATE()
			and r.MemberAssured_Id = 47511
			and ab.Discriminator = 'Policy'
			and aps.PolicyStatus_Id <> 2
			union
			select
			AR.Id as ApplicationRiskId, RV.Id as RiskVesselId, R.Reference as RiskReference, AMA.MemberAssured_Id as MemberId, MA.Reference,P.OrganisationName, AB.Id as ApplicationID,
			Ab.Reference as ApplicationReference, AB.Discriminator, [User].EmailAddress, R.Name as VesselName, RV.CallSign, RV.ImoNumber, Rv.GrossTonnage, RV.YearBuilt, VT.Name as VesselType, con.ShortCode as FlagCountryCode,
			con.Name as FlagCountryName, RP.ShortCode as PortOfRegistryCode, RP.Name as PortOfRegistryName, RST.Name as RiskCategoryName, RV.EngineHorsePower, RV.TrademarkEngineModelNumber
			from ApplicationBase AB
			inner join ApplicationMemberAssured AMA on AMA.Application_Id=AB.Id
			inner join ApplicationRisk AR on AR.ApplicationMemberAssured_Id=AMA.Id
			inner join Risk R on R.Id = AR.Risk_Id
			inner join RiskVessel RV on RV.Id = R.Id
			inner join [user] on AB.Underwriter_Id = [User].Id
			inner join ref_VesselType VT on VT.Id=RV.Type_Id
			inner join ref_Port RP on RP.Id = RV.PortOfRegistry_Id--
			inner join ref_RiskSubType RST on RST.Id = RV.Category_Id
			inner join ref_Country Con on Con.id = RV.Flag_Id
			inner join MemberAssured MA on AMA.MemberAssured_Id=MA.Id
			inner join Party P on P.Id=MA.Party_Id
			where ab.PolicyEnd > GETDATE()
			and r.MemberAssured_Id = 47511
			and ab.Discriminator = 'RenewalQuote'
			and ab.status_id = 16
			order by 4 desc
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_ApplicationRiskId=row.ApplicationRiskId
				sql_ApplicationRiskId=removeComma(sql_ApplicationRiskId.toString())
				sql_RiskVesselId=row.RiskVesselId
				sql_RiskVesselId=removeComma(sql_RiskVesselId.toString())
				sql_RiskReference=row.RiskReference
				sql_RiskReference=removeComma(sql_RiskReference.toString())
				sql_MemberId=row.MemberId
				sql_MemberId=removeComma(sql_MemberId.toString())
				memberIdList.add(sql_MemberId)
				sql_Reference=row.Reference
				sql_Reference=removeComma(sql_Reference.toString())
				sql_OrganisationName=row.OrganisationName
				sql_OrganisationName=removeComma(sql_OrganisationName.toString())
				sql_ApplicationID=row.ApplicationID
				//sql_ApplicationID=removeComma(sql_ApplicationID.toString())
				sql_ApplicationReference=row.ApplicationReference
				sql_ApplicationReference=removeComma(sql_ApplicationReference.toString())
				sql_Discriminator=row.Discriminator
				sql_Discriminator=removeComma(sql_Discriminator.toString())
				sql_EmailAddress=row.EmailAddress
				sql_EmailAddress=removeComma(sql_EmailAddress.toString())
				sql_VesselName=row.VesselName
				sql_VesselName=removeComma(sql_VesselName.toString())
				sql_CallSign=row.CallSign
				sql_CallSign=removeComma(sql_CallSign.toString())
				sql_ImoNumber=row.ImoNumber
				sql_ImoNumber=removeComma(sql_ImoNumber.toString())
				sql_GrossTonnage=row.GrossTonnage
				sql_GrossTonnage=removeComma(sql_GrossTonnage.toString())
				sql_YearBuilt=row.YearBuilt
				sql_YearBuilt=removeComma(sql_YearBuilt.toString())
				sql_VesselType=row.VesselType
				sql_VesselType=removeComma(sql_VesselType.toString())
				sql_FlagCountryCode=row.FlagCountryCode
				sql_FlagCountryCode=removeComma(sql_FlagCountryCode.toString())
				sql_FlagCountryName=row.FlagCountryName
				sql_FlagCountryName=removeComma(sql_FlagCountryName.toString())
				sql_PortOfRegistryCode=row.PortOfRegistryCode
				sql_PortOfRegistryCode=removeComma(sql_PortOfRegistryCode.toString())
				sql_PortOfRegistryName=row.PortOfRegistryName
				sql_PortOfRegistryName=removeComma(sql_PortOfRegistryName.toString())
				sql_RiskCategoryName=row.RiskCategoryName
				sql_RiskCategoryName=removeComma(sql_RiskCategoryName.toString())
				sql_EngineHorsePower=row.EngineHorsePower
				sql_EngineHorsePower=removeComma(sql_EngineHorsePower.toString())
				sql_TrademarkEngineModelNumber=row.TrademarkEngineModelNumber
				sql_TrademarkEngineModelNumber=removeComma(sql_TrademarkEngineModelNumber.toString())

				log.info "SQL Response is received as =>"+sql_ApplicationRiskId+","+sql_RiskVesselId+","+sql_RiskReference+","+sql_MemberId+","+sql_Reference+","+sql_OrganisationName+","+sql_ApplicationID+","+sql_ApplicationReference+","+sql_Discriminator+","+sql_EmailAddress+","+sql_VesselName+","+sql_CallSign+","+sql_ImoNumber+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_VesselType+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber
				arrCellVal=[sql_ApplicationRiskId,sql_RiskVesselId,sql_RiskReference,sql_MemberId,sql_Reference,sql_OrganisationName,sql_ApplicationID,sql_ApplicationReference,sql_Discriminator,sql_EmailAddress,sql_VesselName,sql_CallSign,sql_ImoNumber,sql_GrossTonnage,sql_YearBuilt,sql_VesselType,sql_FlagCountryCode,sql_FlagCountryName,sql_PortOfRegistryCode,sql_PortOfRegistryName,sql_RiskCategoryName,sql_EngineHorsePower,sql_TrademarkEngineModelNumber];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
				
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start
			int oldMemberId=00

			for (int j = 0; j < memberIdList.size(); j++)
			 {
			 	int memberId=memberIdList.get(j).toInteger()
			 	if(oldMemberId == memberId)
			 	{
				 	oldMemberId = memberId
			 	}
			 	else
			 	{
			 		log.info "Getting API response for Member Id=>"+memberId
				 	
				 	testRunner.testCase.setPropertyValue('memberId',memberId.toString())
					
					testRunner.testCase.setPropertyValue('token',token)
					testRunner.runTestStepByName('MemByMemIdByRisks')
					String req='${MemByMemIdByRisks#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
		
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["MemByMemIdByRisks"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
					
					if(httpStatusCode.toString().equals("200"))
					{
						def jsonRes=jsonSlurper.parseText(response)
						int jsonRecordCount = jsonRes.totalRecords
						size=jsonRes.totalRecords.toInteger()
						total_size+=size
						for(int i=0;i<jsonRecordCount;i++)
						{
							api_ApplicationRiskId= jsonRes.results.applicationRiskId[i]
							api_ApplicationRiskId=removeComma(api_ApplicationRiskId.toString())
							
							api_RiskVesselId= jsonRes.results.id[i]
							api_RiskVesselId=removeComma(api_RiskVesselId.toString())
							
							api_RiskReference= jsonRes.results.reference[i]
							api_RiskReference=removeComma(api_RiskReference.toString())
							
							api_MemberId= jsonRes.results.memberId[i]
							api_MemberId=removeComma(api_MemberId.toString())
							
							api_Reference= jsonRes.results.memberReference[i]
							api_Reference=removeComma(api_Reference.toString())
							
							api_OrganisationName= jsonRes.results.memberName[i]
							api_OrganisationName=removeComma(api_OrganisationName.toString())
							
							api_ApplicationID= jsonRes.results.applicationId[i]
							api_ApplicationRiskId=removeComma(api_ApplicationRiskId.toString())
							
							api_ApplicationReference= jsonRes.results.applicationReference[i]
							api_ApplicationReference=removeComma(api_ApplicationReference.toString())
							
							api_ApplicationType= jsonRes.results.applicationType[i]
							api_ApplicationType=removeComma(api_ApplicationType.toString())
							
							api_EmailAddress= jsonRes.results.applicationUnderwriterEmail[i]
							api_EmailAddress=removeComma(api_EmailAddress.toString())
							
							api_ImoNumber= jsonRes.results.vessel.imoNumber[i]
							api_ImoNumber=removeComma(api_ImoNumber.toString())
							
							api_VesselName= jsonRes.results.vessel.vesselName[i]
							api_VesselName=removeComma(api_VesselName.toString())
							
							api_VesselType= jsonRes.results.vessel.vesselType[i]
							api_VesselType=removeComma(api_VesselType.toString())
							
							api_CallSign= jsonRes.results.vessel.callSign[i]
							api_CallSign=removeComma(api_CallSign.toString())
							
							api_GrossTonnage= jsonRes.results.vessel.grossTonnage[i]
							api_GrossTonnage=removeComma(api_GrossTonnage.toString())
							
							api_YearBuilt= jsonRes.results.vessel.yearBuilt[i]
							api_YearBuilt=removeComma(api_YearBuilt.toString())
							
							api_FlagCountryCode= jsonRes.results.vessel.flagCountryCode[i]
							api_FlagCountryCode=removeComma(api_FlagCountryCode.toString())
							
							api_FlagCountryName= jsonRes.results.vessel.flagCountryName[i]
							api_FlagCountryName=removeComma(api_FlagCountryName.toString())
							
							api_PortOfRegistryCode= jsonRes.results.vessel.portOfRegistryCode[i]
							api_PortOfRegistryCode=removeComma(api_PortOfRegistryCode.toString())
							
							api_PortOfRegistryName= jsonRes.results.vessel.portOfRegistryName[i]
							api_PortOfRegistryName=removeComma(api_PortOfRegistryName.toString())
							
							api_RiskCategoryName= jsonRes.results.vessel.riskCategoryName[i]
							api_RiskCategoryName=removeComma(api_RiskCategoryName.toString())
							
							api_EngineHorsePower= jsonRes.results.vessel.engineHorsePower[i]
							api_EngineHorsePower=removeComma(api_EngineHorsePower.toString())
							
							api_TrademarkEngineModelNumber= jsonRes.results.vessel.trademarkAndEngineModel[i]
							api_TrademarkEngineModelNumber=removeComma(api_TrademarkEngineModelNumber.toString())
		
							log.info "API Response is received as =>"+api_ApplicationRiskId+","+api_RiskVesselId+","+api_RiskReference+","+api_MemberId+","+api_Reference+","+api_OrganisationName+","+api_ApplicationID+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_GrossTonnage+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_EngineHorsePower+","+api_TrademarkEngineModelNumber
							arrCellVal=[api_ApplicationRiskId,api_RiskVesselId,api_RiskReference,api_MemberId,api_Reference,api_OrganisationName,api_ApplicationID,api_ApplicationReference,api_ApplicationType,api_EmailAddress,api_VesselName,api_CallSign,api_ImoNumber,api_GrossTonnage,api_YearBuilt,api_VesselType,api_FlagCountryCode,api_FlagCountryName,api_PortOfRegistryCode,api_PortOfRegistryName,api_RiskCategoryName,api_EngineHorsePower,api_TrademarkEngineModelNumber];
							RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
							counter++
						}
					}
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
					}
					
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}
					oldMemberId = memberId
			 	}
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Risks as per Member Id with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>memberId</con:name><con:value>46214</con:value></con:property></con:properties></con:testCase><con:testCase id="307a1cb5-d002-47ca-86a7-c8ade9447b98" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationsByApplicationReference_Deprecated" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppReference" id="df53d36a-3c3a-4a5a-9f79-ccefeb9a4b19"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/" methodName="ApplicationsByApplicationReference" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppReference" id="b5c76b67-8f2a-4c1f-8e41-e1684c88e0e3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#TestSuite#EndPoint}</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="reference" value="${#TestCase#appReference}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>reference</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Copy of Void_ApplicationByApplicationReference" id="2fc577cf-2ef1-4fa9-bfb2-8bb15a5a6223" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Exclude Void Policies in Application by Application Reference ************"

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
"""
Use TOM
Select 
TOP 200
AB.Id as ApplicationId, AB.Reference as ApplicationReference, ABR.Broker_Id as BrokerId, MA.Id as MemberId, MA.Reference as MemberReference, P.OrganisationName as MemberName, 
AB.Discriminator, [User].EmailAddress, AB.PolicyStart as PolicyStartDate, AB.PolicyEnd as PolicyEndDate, AB.FlagAtRenewal as IsRenewalApplication, 
RPS.Name as PolicyStatus, RQS.Name as QuoteStatus
from ApplicationBase AB 
inner join ApplicationMemberAssured AMA on AMA.Application_Id = AB.Id 
inner join MemberAssured MA on MA.Id=AMA.MemberAssured_Id 
inner join Party P on P.Id= MA.Party_Id 
join [user] on AB.Underwriter_Id = [User].Id
inner join ApplicationBroker ABR on ABR.Application_Id = AB.Id
left join ApplicationPolicyStatus APS on APS.Application_Id=AB.Id
left join ref_PolicyStatus RPS on APS.PolicyStatus_Id=RPS.Id
left join ref_QuoteStatus RQS on RQS.Id = AB.Status_Id
where AB.Discriminator!='RenewalQuote'
--and AB.Id=91713
--and RPS.Id=2
and RQS.Id in (18, 19, 20)
and RQS.Name like '%Abandoned%' or RPS.Name like '%Void%' or RPS.Name like '%Bound%' 
order by 1 desc
"""

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationReference(ExcludeVoidPolicy).csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationReference(ExcludeVoidPolicy).csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationReference(ExcludeVoidPolicy).csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationReference(ExcludeVoidPolicy)"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationReference(ExcludeVoidPolicy)"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationReference(ExcludeVoidPolicy)"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_ApplicationReference"+","+"SQL_BrokerId"+","+"SQL_MemberId"+","+"SQL_MemberReference"+","+"SQL_MemberName"+","+"SQL_Discriminator"+","+"SQL_EmailAddress"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_IsRenewalApplication"+","+"SQL_PolicyStatus"+","+"SQL_QuoteStatus")
apiWriter.println("API_ApplicationId"+","+"API_ApplicationReference"+","+"API_BrokerId"+","+"API_BrokerReference"+","+"API_BrokerName"+","+"API_MemberId"+","+"API_MemberReference"+","+"API_MemberName"+","+"API_Discriminator"+","+"API_ApplicationType"+","+"API_ApplicationProductType"+","+"API_ApplicationUnderwriterEmail"+","+"API_ApplicationFirstTransaction"+","+"API_PolicyStartDate"+","+"API_PolicyEndDate"+","+"API_IsRenewalApplication"+","+"API_RenewalFromPolicyReference")
//compareWriter.println("SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_BrokerId"+","+"API_BrokerId"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_Discriminator"+","+"API_Discriminator"+","+"SQL_EmailAddress"+","+"API_ApplicationUnderwriterEmail"+","+"SQL_PolicyStartDate"+","+"API_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"API_PolicyEndDate"+","+"SQL_IsRenewalApplication"+","+"API_IsRenewalApplication"+","+"API_ApplicationType"+","+"API_ApplicationProductType"+","+"API_ApplicationFirstTransaction"+","+"API_RenewalFromPolicyReference"+","+"Test Case Status")
compareWriter.println("SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_BrokerId"+","+"API_BrokerId"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_Discriminator"+","+"API_ApplicationType"+","+"SQL_EmailAddress"+","+"API_ApplicationUnderwriterEmail"+","+"SQL_PolicyStartDate"+","+"API_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"API_PolicyEndDate"+","+"SQL_IsRenewalApplication"+","+"API_IsRenewalApplication"+","+"API_ApplicationProductType"+","+"API_ApplicationFirstTransaction"+","+"API_BrokerReference"+","+"API_BrokerName"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter=0;

def api_ApplicationId=null
def api_ApplicationReference=null
def api_BrokerId=null
def api_BrokerReference=null
def api_BrokerName=null
def api_MemberId=null
def api_MemberReference=null
def api_MemberName=null
def api_ApplicationType=null
def api_ApplicationProductType=null
def api_ApplicationUnderwriterEmail=null
def api_ApplicationFirstTransaction=null
def api_PolicyStartDate=null
def api_PolicyEndDate=null
def api_IsRenewalApplication=null
def api_RenewalFromPolicyReference=null


con.eachRow(sqlstmt)
{	
	row ->
		sql_ApplicationId=row.ApplicationId
		sql_ApplicationReference=row.ApplicationReference
		sql_BrokerId=row.BrokerId
		sql_MemberId=row.MemberId
		sql_MemberReference=row.MemberReference
		sql_MemberName=row.MemberName
		sql_Discriminator=row.Discriminator
		sql_EmailAddress=row.EmailAddress
		sql_PolicyStartDate=row.PolicyStartDate
		sql_PolicyEndDate=row.PolicyEndDate
		sql_IsRenewalApplication=row.IsRenewalApplication
		sql_PolicyStatus=row.PolicyStatus
		sql_QuoteStatus=row.QuoteStatus

		sqlWriter.println(sql_ApplicationId+","+sql_ApplicationReference+","+sql_BrokerId+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_Discriminator+","+sql_EmailAddress+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication+","+sql_PolicyStatus+","+sql_QuoteStatus)
		log.info "SQL response is : "+sql_ApplicationId+","+sql_ApplicationReference+","+sql_BrokerId+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_Discriminator+","+sql_EmailAddress+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication+","+sql_PolicyStatus+","+sql_QuoteStatus

		//Set the Application ID at test case level
		String appReference=sql_ApplicationReference
		testRunner.testCase.setPropertyValue( "appReference", appReference)

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
		//log.info "Token Value : "+token
		
		testRunner.runTestStepByName('AppByAppRef')
		String req='${AppByAppRef#Response}'
		response=context.expand(req)
		log.info "API response is : "+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["AppByAppRef"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info "API Status code is : "+httpStatusCode

		String error = response
		if(httpStatusCode.equals("200"))
		{
			int jsonRecordCount = jsonRes.totalRecords
			log.info "Search records counts : "+ jsonRecordCount 
			for (int i=0; i<jsonRecordCount; i++)
			{
				newId = jsonRes.results.id[i]
				if(sql_ApplicationId.toString().equals(newId.toString()))
				{
					api_ApplicationId=jsonRes.results.id[i]
					api_ApplicationReference=jsonRes.results.reference[i]
					api_BrokerId=jsonRes.results.brokerId[i]
					api_BrokerReference=jsonRes.results.brokerReference[i]
					api_BrokerName=jsonRes.results.brokerName[i]
					api_MemberId=jsonRes.results.memberId[i]
					api_MemberReference=jsonRes.results.memberReference[i]
					api_MemberName=jsonRes.results.memberName[i]
					api_ApplicationType=jsonRes.results.applicationType[i]
					api_ApplicationProductType=jsonRes.results.applicationProductType[i]
					api_ApplicationUnderwriterEmail=jsonRes.results.applicationUnderwriterEmail[i]
					api_ApplicationFirstTransaction=jsonRes.results.applicationFirstTransaction[i]
					api_PolicyStartDate=jsonRes.results.policyStartDate[i]
					api_PolicyEndDate=jsonRes.results.policyEndDate[i]
					api_IsRenewalApplication=jsonRes.results.isRenewalApplication[i]
					api_RenewalFromPolicyReference=jsonRes.results.renewalFromPolicyReference[i]
					
					apiWriter.println(api_ApplicationId+","+api_ApplicationReference+","+api_BrokerId+","+api_BrokerReference+","+api_BrokerName+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationType+","+api_ApplicationProductType+","+api_ApplicationUnderwriterEmail+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication)
					log.info "API response is : "+api_ApplicationId+","+api_ApplicationReference+","+api_BrokerId+","+api_BrokerReference+","+api_BrokerName+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationType+","+api_ApplicationProductType+","+api_ApplicationUnderwriterEmail+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication

					if(sql_Discriminator.toString().equals("Policy") && sql_PolicyStatus.toString().equals("Void"))
					{	
						log.info sql_ApplicationId+","+"Test case should be failed as void policy details are displayed into API response which should not be displayed"
						compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_ApplicationUnderwriterEmail+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"Test Case Failed, void policy details should not be displayed")				
					}
					else if (sql_Discriminator.toString().equals("Quote") && sql_QuoteStatus.toString().equals("Abandoned"))
					{	
						log.info sql_ApplicationId+","+"Test case should be failed as quote is abandoned and still details are displayed into API response which should not be displayed"
						compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_ApplicationUnderwriterEmail+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"Test Case Failed, abandoned quote details should not be displayed")				
					}
					else if(!sql_PolicyStatus.toString().equals("Void") && !sql_QuoteStatus.toString().contains("Abandoned"))
					{
						if(api_ApplicationId.toString().equals(sql_ApplicationId.toString()) && api_ApplicationReference.toString().equals(sql_ApplicationReference.toString()) && api_BrokerId.toString().equals(sql_BrokerId.toString()) && api_MemberId.toString().equals(sql_MemberId.toString()) && api_MemberReference.toString().equals(sql_MemberReference.toString()) && api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && api_ApplicationType.toString().toUpperCase().equals(sql_Discriminator.toString().toUpperCase()) && api_ApplicationUnderwriterEmail.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()))
						{
							compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_ApplicationUnderwriterEmail+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"Test Case Passed")
							log.info ("Details are matching hence test case is passed")
						}
						else
						{
							compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_ApplicationUnderwriterEmail+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"Test Case failed")
							log.info ("Details are not matching hence test case is failed")
						}	
					}
				}	
			}	
		}
		else
		{
			apiWriter.println("Test Case is failed for "+","+sql_ApplicationId+" because , "+response)
			log.info "Test Case is failed for "+","+sql_ApplicationId+" because , "+response
		}
		if(sql_PolicyStatus.toString().equals("Void") || sql_QuoteStatus.toString().contains("Abandoned"))
		{
			if(httpStatusCode.equals("404"))
			{
				log.info "For Void policy / Abandoned quote- valid error response code is displayed hence test case is passed"
				compareWriter.println(sql_ApplicationId+","+"For Void policy / Abandoned quote- valid error response code is displayed hence test case is passed"+","+response)
			}
			else
			{
				log.info "For Void policy / Abandoned quote- invalid error response code is displayed hence test case is failed"
				compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_ApplicationUnderwriterEmail+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"For Void policy / Abandoned quote- invalid error response code is displayed hence test case is failed")
				//compareWriter.println(sql_ApplicationId+","+"For Void policy / Abandoned quote- invalid error response code is displayed hence test case is failed"+","+response)
			}
		}
		counter=counter+1
		log.info "Number of records verified are : "+counter
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Exclude Void Policies in Application by Application Reference ************"]]></script></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationReference" id="7257ca16-a964-481b-8c63-ac86d91e87e3"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import java.text.SimpleDateFormat

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;

for(int rowi=1;rowi<=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)
	if(tcModuleName.toString().equals("TC_ApplicationsByApplicationReference"))
		tcModuleName="ApplicationsByApplicationReference"
	
	if(tcModuleName.toString().equals("ApplicationsByApplicationReference"))
	{
		log.info "Test Execution started for getting Application Details as per Application Reference from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader=["Key","ApplicationId","ApplicationReference","BrokerId","BrokerReference","BrokerName","MemberId","MemebrReference","MemberName","ApplicationType","ApplicationUnderwriterEmail","PolicyStartDate","PolicyEndDate","Status"]
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			int row_start=2
			int counter=2
			def rows
			int db_size=0
			int totalColumns =0
			int db_endCol=0
			int api_startCol=0
			def arrCellVal;
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String getAppId=
			"""
			USE TOM
			Select 
			Distinct
			TOP 100
			AB.Id as ApplicationId, AB.Reference as ApplicationReference, B.Id as BrokerId, B.Reference as BrokerReference, P.OrganisationName as BrokerName, MA.Id as MemberId, 
			MA.Reference as MemebrReference, PT.OrganisationName as MemberName, 
			case when AB.Discriminator='RenewalQuote' then 'Quote' when AB.Discriminator='Quote' then 'Quote' when AB.Discriminator='Policy' then 'Policy' 
			end as ApplicationType, [User].EmailAddress as ApplicationUnderwriterEmail, AB.PolicyStart as PolicyStartDate, 
			AB.PolicyEnd as PolicyEndDate, RPS.Name as PolicyStatus, RQS.Name as QuoteStatus
			from ApplicationBase AB
			inner join ApplicationBroker ABR on ABR.Application_Id=AB.Id
			inner join Broker B on B.Id = ABR.Broker_Id
			inner join Party P on P.Id=B.Party_Id
			right join ApplicationMemberAssured AMA on AMA.Application_Id = AB.Id
			inner join MemberAssured MA on MA.Id=AMA.MemberAssured_Id 
			inner join Party PT on PT.Id=MA.Party_Id
			--left join [Transaction] T on T.Reference=AB.Reference
			left join [user] on AB.Underwriter_Id = [User].Id
			left join ApplicationPolicyStatus APS on APS.Application_Id=AB.Id
			left  join ref_PolicyStatus RPS on APS.PolicyStatus_Id=RPS.Id
			left  join ref_QuoteStatus RQS on RQS.Id = AB.Status_Id
			where AB.Discriminator!='RenewalQuote'
			or RPS.Name like '%Void%'
			--or RQS.Id in (18, 19, 20)
			--or RQS.Name like '%Abandoned%' 
			--or RPS.Name like '%Bound%'
			order by 1 desc
			"""
			String oldRef=null
			con.eachRow(getAppId)
			{
				getPolicyId->
				ApplicationReference=getPolicyId.ApplicationReference
				sql_PolicyStatus=getPolicyId.PolicyStatus
				sql_QuoteStatus=getPolicyId.QuoteStatus
				if(!oldRef.toString().equals(ApplicationReference.toString()))
				{
					String sqlstmt=
					"""
					USE TOM
					declare
					@applicationReference as int = '"""+ApplicationReference+"""'
				
					Select 
					Distinct
					TOP 10
					AB.Id as ApplicationId, AB.Reference as ApplicationReference, B.Id as BrokerId, B.Reference as BrokerReference, P.OrganisationName as BrokerName, MA.Id as MemberId, 
					MA.Reference as MemebrReference, PT.OrganisationName as MemberName,
					case when AB.Discriminator='RenewalQuote' then 'Quote' when AB.Discriminator='Quote' then 'Quote' when AB.Discriminator='Policy' then 'Policy' 
					end as ApplicationType, [User].EmailAddress as ApplicationUnderwriterEmail, AB.PolicyStart as PolicyStartDate,AB.PolicyEnd as PolicyEndDate,
					RPS.Name as PolicyStatus, RQS.Name as QuoteStatus
					from ApplicationBase AB
					inner join ApplicationBroker ABR on ABR.Application_Id=AB.Id
					inner join Broker B on B.Id = ABR.Broker_Id
					inner join Party P on P.Id=B.Party_Id
					right join ApplicationMemberAssured AMA on AMA.Application_Id = AB.Id
					inner join MemberAssured MA on MA.Id=AMA.MemberAssured_Id 
					inner join Party PT on PT.Id=MA.Party_Id
					--left join [Transaction] T on T.Reference=AB.Reference
					left join [user] on AB.Underwriter_Id = [User].Id
					left join ApplicationPolicyStatus APS on APS.Application_Id=AB.Id
					left  join ref_PolicyStatus RPS on APS.PolicyStatus_Id=RPS.Id
					left  join ref_QuoteStatus RQS on RQS.Id = AB.Status_Id
					where AB.Discriminator!='RenewalQuote'
					--or RPS.Name like '%Void%'
					--or RQS.Id in (18, 19, 20)
					--or RQS.Name like '%Abandoned%' 
					--or RPS.Name like '%Bound%'
					and AB.Reference=@applicationReference
					order by 1 desc
					"""	
					log.info "Checking for Application Reference =>"+ApplicationReference
					
					rows=con.rows(sqlstmt) 
					arrCellVal=['DB data']
					
					RT.writeDetails(source,0,0,headerStyle,arrCellVal)
					
					headerStyle = RT.getCellStyle(O_Summary,'Header');
					RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
					
					def arrData;
					//DB sheet start
					
					con.eachRow(sqlstmt) 
					{
						row->
							sql_ApplicationId=row.ApplicationId
							sql_ApplicationReference=row.ApplicationReference
							sql_ApplicationReference=removeBrackets(sql_ApplicationReference.toString())
							sql_BrokerId=row.BrokerId
							sql_BrokerReference=row.BrokerReference
							sql_BrokerReference=removeBrackets(sql_BrokerReference.toString())
							sql_BrokerName=row.BrokerName
							sql_BrokerName=removeBrackets(sql_BrokerName.toString())
							sql_MemberId=row.MemberId
							sql_MemebrReference=row.MemebrReference
							sql_MemebrReference=removeBrackets(sql_MemebrReference.toString())
							sql_MemberName=row.MemberName
							sql_MemberName=removeBrackets(sql_MemberName.toString())
							sql_ApplicationType=row.ApplicationType
							sql_ApplicationUnderwriterEmail=row.ApplicationUnderwriterEmail
							//sql_ApplicationFirstTransaction=row.ApplicationFirstTransaction
							sql_PolicyStartDate=row.PolicyStartDate
							sql_PolicyStartDate=sql_PolicyStartDate.toString().replace(" ", "T")
							sql_PolicyStartDate=getDate(sql_PolicyStartDate.toString())
							sql_PolicyEndDate=row.PolicyEndDate
							sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" ", "T")
							sql_PolicyEndDate=getDate(sql_PolicyEndDate.toString())
							sqlKey=sql_ApplicationReference+"_"+sql_ApplicationId
							
							log.info "SQL Response is received as =>"+sqlKey+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_BrokerId+","+sql_BrokerReference+","+sql_BrokerName+","+sql_MemberId+","+sql_MemebrReference+","+sql_MemberName+","+sql_ApplicationType+","+sql_ApplicationUnderwriterEmail+","+sql_PolicyStartDate+","+sql_PolicyEndDate
							arrCellVal=[sqlKey,sql_ApplicationId,sql_ApplicationReference,sql_BrokerId,sql_BrokerReference,sql_BrokerName,sql_MemberId,sql_MemebrReference,sql_MemberName,sql_ApplicationType,sql_ApplicationUnderwriterEmail,sql_PolicyStartDate,sql_PolicyEndDate];
							RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
							
							db_size++
							counter++
							oldRef=sql_ApplicationReference.toString()
							
							try
							{
								RT.saveExcelFile(summary_File,O_Summary)
							}
							catch(Exception e) 
							{
								log.info e.toString();
							}
					}//inner sql end	
				}
			}//outer sql end
			
			totalColumns = source.getRow(1).getLastCellNum()
			db_endCol=totalColumns-1
			api_startCol=totalColumns+2
			counter=row_start
			oldRef=null

			con.eachRow(getAppId)
			{
				getId->
				ApplicationReference=getId.ApplicationReference
				sql_PolicyStatus=getId.PolicyStatus
				sql_QuoteStatus=getId.QuoteStatus

				if(!oldRef.toString().equals(ApplicationReference.toString()))
				{
					log.info "Getting api values for Application Reference =>"+ApplicationReference
					testRunner.testCase.setPropertyValue( "appReference", ApplicationReference.toString())
					testRunner.testCase.setPropertyValue('token',token)
						
					//API
					testRunner.runTestStepByName('AppByAppReference')
					String req='${AppByAppReference#Response}'
					def response=context.expand(req) 
					def jsonSlurper=new JsonSlurper()
					
					groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
					httpResponseHeaders = context.testCase.testSteps["AppByAppReference"].testRequest.response.responseHeaders
					httpStatus = httpResponseHeaders["#status#"]
					httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				
					arrCellVal=['API DATA']
					RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
					RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
					log.info "Original API response is =>"+response
					log.info "HTTP Status code received as =>"+httpStatusCode
					def json=jsonSlurper.parseText(response)	
					
					if(httpStatusCode.toString().equals("200"))
					{
						for(int i=0; i<json.results.id.size(); i++)
						{
							api_ApplicationId=json.results.id[i]
							api_ApplicationReference=json.results.reference[i]
							api_ApplicationReference=removeBrackets(api_ApplicationReference.toString())
							api_BrokerId=json.results.brokerId[i]
							api_BrokerReference=json.results.brokerReference[i]
							api_BrokerReference=removeBrackets(api_BrokerReference.toString())
							api_BrokerName=json.results.brokerName[i]
							api_BrokerName=removeBrackets(api_BrokerName.toString())
							api_MemberId=json.results.memberId[i]
							api_MemebrReference=json.results.memberReference[i]
							api_MemebrReference=removeBrackets(api_MemebrReference.toString())
							api_MemberName=json.results.memberName[i]
							api_MemberName=removeBrackets(api_MemberName.toString())
							api_ApplicationType=json.results.applicationType[i]
							api_ApplicationUnderwriterEmail=json.results.applicationUnderwriterEmail[i]
							api_PolicyStartDate=json.results.policyStartDate[i]
							api_PolicyStartDate=getDate(api_PolicyStartDate.toString())
							api_PolicyEndDate=json.results.policyEndDate[i]
							api_PolicyEndDate=getDate(api_PolicyEndDate.toString())	
							apiKey=api_ApplicationReference+"_"+api_ApplicationId
							
							log.info "API Response is received as =>"+apiKey+","+api_ApplicationId+","+api_ApplicationReference+","+api_BrokerId+","+api_BrokerReference+","+api_BrokerName+","+api_MemberId+","+api_MemebrReference+","+api_MemberName+","+api_ApplicationType+","+api_ApplicationUnderwriterEmail+","+api_PolicyStartDate+","+api_PolicyEndDate
							arrCellVal=[apiKey,api_ApplicationId,api_ApplicationReference,api_BrokerId,api_BrokerReference,api_BrokerName,api_MemberId,api_MemebrReference,api_MemberName,api_ApplicationType,api_ApplicationUnderwriterEmail,api_PolicyStartDate,api_PolicyEndDate];
							RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
							total_size++
							counter++
						}
					}//if status 200 end
					else if(httpStatusCode.toString().equals("401"))
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						total_size++
						counter++
					}
					else
					{
						log.info "Failed API response is received"
						log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
						arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						total_size++
						counter++
					}
					try
					{
						RT.saveExcelFile(summary_File,O_Summary)
					}
					catch(Exception e)
					{
					  log.info e.getMessage();	
					}	
					oldRef=ApplicationReference.toString()
				}
			}//inner db get data close
			con.close()	

			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for Application details as per Application Reference with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary, source, api_startCol, db_startCol, row_start, api_endCol, db_endCol, total_size, db_size, summary, summary_File, uri, tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String  removeBrackets(String field)
{
	if(field!=null && field.toString().contains(","))
	{
		field=field.replace(",", " ")
	}
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field==null && field.contains("[") || field=="NULL" && field.contains("[") || field=="null" && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
		field="NULL"
	}
	if(field!=null)
		field=field.toUpperCase()
	return field
}
public String getDate(String field)
{
	if(field!=null)
	{
		if(field.length()>=20)
			field=field.toString().substring(0, 19)
		else if(field==null)
			field="NULL"
		else if(field=="" || field==" ")	
			field="NULL"
		return field	
	}
}]]></script></con:config></con:testStep><con:properties><con:property><con:name>appReference</con:name><con:value>1053059</con:value></con:property></con:properties></con:testCase><con:testCase id="feb18515-f865-4362-9fbe-0bd153e8676e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_GroupRenewalBindSuccess" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="cc107a87-d6d4-4c2e-8cec-85fff68718a6"><con:settings/><con:config><script>import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFCell;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap

String uri=context.getProperty("requestUri").toString()
String data_F='C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\TestData.xlsx'
String currentcell,cellvalue,token,tcModuleId,eFlag,dsc,newtcModuleId;

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
File config=new File(tName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
token=prop['API_TOKEN']

XSSFWorkbook O_Summary,O_td;
XSSFSheet data_s;
File t_data=new File(data_F);
O_td = new XSSFWorkbook(t_data);
data_s=O_td.getSheet('TestData');
int row_cnt=data_s.getLastRowNum()
def lib = testRunner.testCase.testSuite.project.testSuites["TS"].testCases["Driver_Script"].testSteps["Driver"]
lib.run(testRunner, context)
def RT = context.Rt

String summary_File= testRunner.testCase.testSuite.getPropertyValue('SummaryFile');
XSSFSheet source,target,summary,result
O_Summary=RT.getSummaryWorkbook(summary_File)
summary=O_Summary.getSheet('API_Result')

XSSFCellStyle rowStyle,headerStyle,rowTrue,rowFalse;
def arrOutputHeader;
String res_Path= testRunner.testCase.testSuite.getPropertyValue('ResultPath');
String final_status;
boolean flag=false

XSSFCell cell
XSSFRow currentrow,currentrow1
XSSFRow headerRow
int iter=0;
ArrayList&lt;String> arrayList = new ArrayList&lt;>();

for(int rowi=1;rowi&lt;=row_cnt;rowi++)
{
	currentrow = data_s.getRow(rowi);
	tcModuleid=currentrow.getCell(0, Row.RETURN_BLANK_AS_NULL)
	tcModuleName=currentrow.getCell(1, Row.RETURN_BLANK_AS_NULL)
	noOfRecords=currentrow.getCell(2, Row.RETURN_BLANK_AS_NULL)
	eFlag=currentrow.getCell(3, Row.RETURN_BLANK_AS_NULL)
	dsc=currentrow.getCell(4, Row.RETURN_BLANK_AS_NULL)

	if(tcModuleName.toString().equals("TC_GroupRenewalBindSuccess"))
		tcModuleName="GroupRenewalBindSuccess"
		
	if(tcModuleName.toString().equals("GroupRenewalBindSuccess"))
	{
		log.info "Test Execution started for getting details of quote after group renewal for bind success from API and database"
		
		testRunner.testCase.setPropertyValue('token',token)
		testRunner.testCase.setPropertyValue('ExecutionFlag',eFlag)
		
		if(eFlag.equalsIgnoreCase('Y'))
		{
			rowStyle=RT.getCellStyle(O_Summary,'Cell',false)
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			
			arrOutputHeader = ["Broker_Id","BrokerReference","Party_Id","CrmIdentifier","OrganisationName","Salutation","FirstName","MiddleName","LastName","SearchName","EmailAddress","Telephone","Fax","Address_Id","AddressName","Line1","Line2","Line3","City","StateOrProvince","Country","Postcode","Status"];
			
			source=O_Summary.createSheet(tcModuleName.toString());

			int total_size=0	
			int api_cnt=0
			int db_cnt=0
			//SQL connection and query
			def con=RT.getConnection(testRunner.testCase.testSuite.getPropertyValue('config'));
			
			String sqlstmt=
			"""
			USE TOM
			SELECT
			* from ABC
			"""
			
			def rows=con.rows(sqlstmt)  
			int db_size=rows.size
			def arrCellVal;
			arrCellVal=['DB data']
			RT.writeDetails(source,0,0,headerStyle,arrCellVal)
			
			headerStyle = RT.getCellStyle(O_Summary,'Header');
			RT.writeDetails(source,1,0,headerStyle,arrOutputHeader)
			int row_start=2
			int counter=2
			
			def arrData;
			//DB sheet start
			con.eachRow(sqlstmt) 
			{
				row ->
				sql_BrokerId=row.Broker_Id
				sql_BrokerId=removeComma(sql_BrokerId.toString())
				arrayList.add(sql_BrokerId)

				log.info "SQL Response is received as =>"+sql_BrokerId+","+sql_BrokerReference+","+sql_PartyId+","+sql_CrmIdentifier+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode
				arrCellVal=[sql_BrokerId,sql_BrokerReference,sql_PartyId,sql_CrmIdentifier,sql_OrganisationName,sql_Salutation,sql_FirstName,sql_MiddleName,sql_LastName,sql_SearchName,sql_EmailAddress,sql_Telephone,sql_Fax,sql_AddressId,sql_AddressName,sql_Line1,sql_Line2,sql_Line3,sql_City,sql_StateOrProvince,sql_Country,sql_Postcode];
				RT.writeDetails(source,counter,0,rowStyle,arrCellVal)
				counter++
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e) 
				{
					log.info e.toString();
				}

			}//sql end
			con.close()
			int totalColumns = source.getRow(1).getLastCellNum()
			//log.info 'DB End is'+totalColumns
			int db_endCol=totalColumns-1
			int api_startCol=totalColumns+2
			
			//API
			arrCellVal=['API DATA']
			total_size=0
			RT.writeDetails(source,0,api_startCol,headerStyle,arrCellVal)
			RT.writeDetails(source,1,api_startCol,headerStyle,arrOutputHeader)
			counter=row_start

			for (int j = 0; j &lt; arrayList.size(); j++)
			 {
			 	BrokerId=arrayList.get(j)
			 	log.info "Getting API response for Broker Id=>"+BrokerId
			 	
			 	testRunner.testCase.setPropertyValue('brokerid',BrokerId.toString())
				
				testRunner.testCase.setPropertyValue('token',token)
				testRunner.runTestStepByName('BrkByBrkId')
				String req='${BrkByBrkId#Response}'
				def response=context.expand(req) 
				def jsonSlurper=new JsonSlurper()
	
				groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
				httpResponseHeaders = context.testCase.testSteps["BrkByBrkId"].testRequest.response.responseHeaders
				httpStatus = httpResponseHeaders["#status#"]
				httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
				log.info "Original API response is=>"+response
				log.info "HTTP Status Code received as=>"+httpStatusCode
				
				if(httpStatusCode.toString().equals("200"))
				{
					def jsonRes=jsonSlurper.parseText(response)

						api_BrokerId=jsonRes.id
						api_BrokerId=removeComma(api_BrokerId.toString())
	
						log.info "API Response is received as =>"+api_BrokerId+","+api_BrokerReference+","+api_PartyId+","+api_CrmIdentifier+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_Name+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode
						arrCellVal=[api_BrokerId,api_BrokerReference,api_PartyId,api_CrmIdentifier,api_OrganisationName,api_Salutation,api_FirstName,api_MiddleName,api_LastName,api_SearchName,api_EmailAddress,api_Telephone,api_Fax,api_AddressId,api_Name,api_Line1,api_Line2,api_Line3,api_City,api_StateOrProvince,api_Country,api_Postcode];
						RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
						counter++
						total_size++
					//}
				}
				else if(httpStatusCode.toString().equals("401"))
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				else
				{
					log.info "Failed API response is received"
					log.info "In API Response, HTTP Status code is received as ==>"+httpStatusCode+" with status message as =>"+httpStatus
					arrCellVal=[" "," ", httpStatusCode+"=>"+httpStatus]
					RT.writeDetails(source,counter,api_startCol,rowStyle,arrCellVal)
				}
				
				try
				{
					RT.saveExcelFile(summary_File,O_Summary)
				}
				catch(Exception e)
				{
				  log.info e.getMessage();	
				}	
			 }
			
			//DB compare with API
			int db_startCol=0
			counter=row_start;
			totalColumns = source.getRow(1).getLastCellNum();
			int api_endCol=totalColumns-1
			dsc='Compares API data for quote after group renewal for bind success with UTOM Database data'
			tcid=tcModuleName.toString()
			RT.process_Data(O_Summary,source,api_startCol,db_startCol,row_start,api_endCol,db_endCol,total_size,db_size,summary,summary_File,uri,tcid,dsc)
		}//inner if end
	}//outer if end
}//outer for end
public String removeComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}</script></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>config</con:name><con:value>C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.Properties</con:value></con:property><con:property><con:name>EndPoint</con:name><con:value>http://spltomservices:44378</con:value></con:property><con:property><con:name>ResultPath</con:name><con:value>C:\APITesting\UTOM_API_JWT_TOKEN\Results\Result_2021_07_27_04_26_07</con:value></con:property><con:property><con:name>SummaryFile</con:name><con:value>C:\APITesting\UTOM_API_JWT_TOKEN\Results\Result_2021_07_27_04_26_07\Summary.xlsx</con:value></con:property><con:property><con:name>token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImNuNnRXOElubmRJVzJKVGtqU2tkTlFQakR1UXo3cmMwQ0pEbkpyRlhKVjgifQ.eyJpc3MiOiJodHRwczovL3NoaXBvd25lcnNjb3VrZGV2YjJjLmIyY2xvZ2luLmNvbS81YzJlY2M4OC1kNmNlLTRkNDEtYThhMi05ZTAzMTc0N2M3ZTYvdjIuMC8iLCJleHAiOjE2Mjg1MjIwNDQsIm5iZiI6MTYyODUxODQ0NCwiYXVkIjoiZTQ4NTNjODItNjhjYS00OTk5LTk3NjAtZmZjODkxODk4NGJhIiwic3ViIjoiNzdmM2YyOGEtZjQ3MS00MTU4LWI4ZTAtNjYwNTY2OTExNGYyIiwiZ3JvdXBzIjpbIlVuZGVyd3JpdGluZyJdLCJzY3AiOiJ0cmFkaW5nLWNlcnRzLndyaXRlIGRvY3VtZW50LnJlYWQgdHJhZGluZy1jZXJ0cy5yZWFkIiwiYXpwIjoiZmVlNTM0NTAtZDgzNC00ZTQwLWEzYWMtOWMyYzI0MmRiYjMwIiwidmVyIjoiMS4wIiwiaWF0IjoxNjI4NTE4NDQ0fQ.kvIkwrYRTjUpW8hdNu-MffktehUOmu7Ng270g3e78zuaKVjMgE8Z5PwLp_qFNjyG9nopQSe0MQy4XLl8H-VgEdo-dk53cvNUkjMGtw3p6jFnEkIxla7ZSrbMzRsHM8LH_Be8D93CqoqdmUMyUvNnL-wdnmXa7d0Qn47eP6C09gJc68v0MHE6nfgfWKKfVorOEOSbtN3y-82ihh9V82b7pQ6lIEeihBOXz1FC9WvtmlAf_m2KqhyhF4ZkZUPPaMTGKL9cx8GIeErHU_rpsdB13o89xQXXHWmZaoFGdN6apYa52MCkAMINlHHerKhKpHDz_qphqE5xTc0Pp9hPBi7ZRg</con:value></con:property></con:properties></con:testSuite><con:testSuite id="57950f61-9e41-4c72-8b76-b886fdf7b835" name="TestSuite_CSVReport" disabled="true"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="cbf54dfc-7ac3-4f27-b1e1-f3cd751bbb86" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_RiskSelectionByRiskDetailByApplicationRiskId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RiskSelectionByRiskDetailByAppRiskId" id="f26e70e0-5bd7-4d98-8d7f-53babd41028c"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/UtomApi/riskselection/riskdetail/${#TestCase#appRiskId}" methodName="RiskSelectionByRiskDetailByApplicationRiskId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RiskSelectionByRiskDetailByAppRiskId" id="4102671e-1d82-4b51-84f0-20a1980d22f6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/UtomApi/riskselection/riskdetail/179096</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="RiskSelectionByRiskDetailByApplicationRiskId" id="fc23b224-b86b-4982-9458-3d45986103a4" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Risk Selection By Risk Detail By Application Risk Id************"

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
"""
USE TOM
SELECT
DISTINCT 
ar.Id as ApplicationRiskId,
lims.Limit_id as LimitId, lims.ShortCode as CoverShortName, lims.Name as LimitName, lims.Currency as CurrencyCode, lims.ValueDecimal as Amount,
tc.IsPrimary, case when tc.IsPrimary = 1 then 'true' when tc.IsPrimary = 0 then 'false' else NULL end as isThePrimaryCoverLimit,
lims.maxCovStart as EffectiveFrom, lims.CoverEnd as EffectiveTo, Case when ret.Name = 'As Per Rules' then 'true' else 'false' end as AsPerRules,
T.Name as Template, case when ret.Name = 'Plain Language Wording' and t.name = 'Yacht Liability Insurance' then 'YACHT' else 'P&I' end as
ProductType, case when ACVRM.ACVRStart = rtra.maxstart then rtra.maxstart else ab.PolicyStart end 
as LatestRiskTransactionDate,B.ShortCode as Branch,case when ptra.discriminator ='RiskTerminationTransaction' and r.Exited is not null  then 'Risk Termination' 
when ptra.discriminator ='PolicyTerminationTransaction' then 'Policy Termination'  else null end as TerminatedType,
case when ptra.discriminator ='RiskTerminationTransaction' and r.Exited is not null then r.Exited
when ptra.discriminator ='PolicyTerminationTransaction' then ptra.startdate 
else null end as TerminationDate, AB.PolicyEnd
from ApplicationBase ab
inner join ApplicationMemberAssured ama on ab.Id = ama.Application_Id
inner join ApplicationRisk ar on ar.ApplicationMemberAssured_Id = ama.id
inner join Risk r on r.id = ar.Risk_Id
left join 
(select tr.policy_id, max(startdate) as maxstart from [transaction] tr where tr.discriminator in ('PermanentRiskChangeTransaction',
'OperationalVesselChangeTransaction', 'RiskTerminationTransaction', 'TemporaryRiskChangeTransaction','PermanentLayUpVesselChangeTransaction',
'TemporaryLayUpVesselChangeTransaction') and tr.TransactionStatus_Id = 2 group by tr.policy_id) rtra on rtra.policy_id = ab.id
inner join ApplicationCover AC on AB.Id = AC.Application_Id
inner Join TemplateCover TC on AC.TemplateCover_Id = TC.Id
AND TC.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
inner Join Cover C on TC.Cover_Id = C.Id
AND C.Cover_PhysicalDeletionAttemptPrevented = 0
inner join ApplicationCoverVariation acv on acv.ApplicationCover_Id = ac.id
inner join (select acvr.CoverVariation_Id, acvr.Risk_id, max(coverstart) as ACVRStart from  ApplicationCoverVariationRisk acvr group by acvr.CoverVariation_Id,  acvr.Risk_id) acvrm on acvrm.CoverVariation_Id = acv.id and acvrm.Risk_Id = ar.Id
inner join ApplicationCoverVariationLimit acvl on acvl.CoverVariation_Id = acv.id
inner join ApplicationCoverVariationLimitTagValue acvltv on acvltv.ApplicationCoverVariationLimit_Id = acvl.id
inner join TemplateCoverLimit tcl on tcl.id = acvl.TemplateCoverLimit_Id
inner join CoverLimit cl on cl.id = tcl.CoverLimit_Id
inner join Limit l on l.id = cl.Limit_Id
inner join ref_Currency rc on rc.id = acvltv.Currency_Id
inner join Template T on T.Id=TC.Template_Id
inner join ref_EntryType ret on ret.Id = t.EntryType_Id
inner join Branch B On B.Id=AB.Branch_Id
inner join
(Select 
TOP 500
ab.id as applicaton_id, ar.id as ApplicationRisk_id, l.id as Limit_id, c.ShortCode, l.Name, rc.ShortCode as Currency,  acvltv.ValueDecimal,  max(acv.ApplicationCoverVariation_EffectiveFrom) as maxCovStart, acv.CoverEnd
from ApplicationBase ab
inner join ApplicationMemberAssured ama on ab.Id = ama.Application_Id
inner join ApplicationRisk ar on ar.ApplicationMemberAssured_Id = ama.id
inner join ApplicationCover AC on AB.Id = AC.Application_Id
inner Join TemplateCover TC on AC.TemplateCover_Id = TC.Id and tc.IsMandatory = 1 AND TC.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
inner Join Cover C on TC.Cover_Id = C.Id AND C.Cover_PhysicalDeletionAttemptPrevented = 0
inner join ApplicationCoverVariation acv on acv.ApplicationCover_Id = ac.id
inner join ApplicationCoverVariationLimit acvl on acvl.CoverVariation_Id = acv.id and ACVL.VersionedLinkBase_PhysicalDeletionAttemptPrevented=0
left join ApplicationCoverVariationLimitTagValue acvltv on acvltv.ApplicationCoverVariationLimit_Id = acvl.id
left join ref_Currency rc on rc.id = acvltv.Currency_Id -- and rc.id = 72
inner join TemplateCoverLimit tcl on tcl.id = acvl.TemplateCoverLimit_Id
inner join CoverLimit cl on cl.id = tcl.CoverLimit_Id
inner join Limit l on l.id = cl.Limit_Id
inner join(Select ar.id, min(l.id) as minlid from  ApplicationBase ab
inner join ApplicationMemberAssured ama on ab.Id = ama.Application_Id
inner join ApplicationRisk ar on ar.ApplicationMemberAssured_Id = ama.id
inner join ApplicationCover AC on AB.Id = AC.Application_Id
inner Join TemplateCover TC on AC.TemplateCover_Id = TC.Id and tc.IsMandatory = 1 AND TC.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
inner Join Cover C on TC.Cover_Id = C.Id AND C.Cover_PhysicalDeletionAttemptPrevented = 0
inner join ApplicationCoverVariation acv on acv.ApplicationCover_Id = ac.id
inner join ApplicationCoverVariationLimit acvl on acvl.CoverVariation_Id = acv.id and ACVL.VersionedLinkBase_PhysicalDeletionAttemptPrevented=0
left join ApplicationCoverVariationLimitTagValue acvltv on acvltv.ApplicationCoverVariationLimit_Id = acvl.id
left join ref_Currency rc on rc.id = acvltv.Currency_Id --and rc.id = 72
inner join TemplateCoverLimit tcl on tcl.id = acvl.TemplateCoverLimit_Id
inner join CoverLimit cl on cl.id = tcl.CoverLimit_Id
inner join Limit l on l.id = cl.Limit_Id
where acv.CoverEnd = ab.PolicyEnd
group by ar.id) minl on minl.id = ar.id and  minl.minlid = l.id
group by ab.id, ar.id , l.id , c.ShortCode, l.Name, rc.ShortCode,  acvltv.ValueDecimal, acv.CoverEnd
order by AR.Id desc) lims on lims.applicaton_id = ab.id and lims.ApplicationRisk_id = ar.Id
left join (select tr.policy_id, tr.discriminator,  tr.startdate from [transaction] tr where tr.discriminator in
('PolicyTerminationTransaction', 'RiskTerminationTransaction') ) ptra on ptra.policy_id = ab.id
where ab.discriminator = 'Policy' and tc.IsPrimary=1 and rc.ShortCode='USD'
--and AB.PolicyEnd<GETDATE()
--and AB.PolicyEnd<getDate()
order by AR.Id desc
"""
				
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskSelectionByRiskDetailByApplicationRiskId.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskSelectionByRiskDetailByApplicationRiskId.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskSelectionByRiskDetailByApplicationRiskId.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskSelectionByRiskDetailByApplicationRiskId"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskSelectionByRiskDetailByApplicationRiskId"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskSelectionByRiskDetailByApplicationRiskId"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("sql_ApplicationRiskId"+","+"SQL_LimitId"+","+"SQL_CoverShortName"+","+"SQL_LimitName"+","+"SQL_CurrencyCode"+","+"SQL_Amount"+","+"SQL_IsPrimary"+","+"SQL_isThePrimaryCoverLimit"+","+"SQL_EffectiveFrom"+","+"SQL_EffectiveTo"+","+"SQL_AsPerRules"+","+"SQL_Template"+","+"SQL_ProductType"+","+"SQL_LatestRiskTransactionDate"+","+"SQL_Branch"+","+"SQL_TerminatedType"+","+"SQL_TerminationDate"+","+"SQL_PolicyEndDate")
apiWriter.println("API_ApplicationRiskId"+","+"API_LimitId"+","+"API_CoverShortName"+","+"API_LimitName"+","+"API_CurrencyCode"+","+"API_Amount"+","+"API_IsThePrimaryCoverLimit"+","+"API_EffectiveFrom"+","+"API_EffectiveTo"+","+"API_AsPerRules"+","+"API_Template"+","+"API_ProductType"+","+"API_LatestRiskTransactionDate"+","+"API_Branch"+","+"API_TerminatedDate"+","+"API_TerminationType")
compareWriter.println("SQL_ApplicationRiskId"+","+"API_ApplicationRiskId"+","+"SQL_LimitId"+","+"API_LimitId"+","+"SQL_CoverShortName"+","+"API_CoverShortName"+","+"SQL_LimitName"+","+"API_LimitName"+","+"SQL_CurrencyCode"+","+"API_CurrencyCode"+","+"SQL_Amount"+","+"API_Amount"+","+"SQL_isThePrimaryCoverLimit"+","+"API_IsThePrimaryCoverLimit"+","+"SQL_EffectiveFrom"+","+"API_EffectiveFrom"+","+"SQL_EffectiveTo"+","+"API_EffectiveTo"+","+"SQL_AsPerRules"+","+"API_AsPerRules"+","+"SQL_Template"+","+"API_Template"+","+"SQL_ProductType"+","+"API_ProductType"+","+"SQL_LatestRiskTransactionDate"+","+"API_LatestRiskTransactionDate"+","+"SQL_Branch"+","+"API_Branch"+","+"SQL_TerminatedType"+","+"API_TerminatedDate"+","+"SQL_TerminationDate"+","+"API_TerminationType"+","+"SQL_PolicyEndDate"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter = 0;

String sql_effectiveFromYear = null
String sql_effectiveFromMonth = null
String sql_effectiveFromDate = null
String sql_effectiveToYear = null
String sql_effectiveToMonth = null
String sql_effectiveToDate = null
String sql_LatestRiskTransactionYear = null
String sql_LatestRiskTransactionMonth = null
String sql_LatestRiskTransaction_Date = null
String sql_TerminationYear = null
String sql_TerminationMonth = null
String sql_Termination_Date = null

String api_effectiveFromYear = null
String api_effectiveFromMonth = null
String api_effectiveFromDate = null
String api_effectiveToYear = null
String api_effectiveToMonth = null
String api_effectiveToDate = null
String api_LatestRiskTransactionYear = null
String api_LatestRiskTransactionMonth = null
String api_LatestRiskTransaction_Date = null
String api_TerminationYear= null
String api_TerminationMonth = null
String api_Termination_Date = null

con.eachRow(sqlstmt)
{	
		row ->
		sql_ApplicationRiskId=row.ApplicationRiskId
		log.info "Checking for Application Risk Id ="+sql_ApplicationRiskId
		sql_LimitId=row.LimitId
		sql_CoverShortName=row.CoverShortName
		sql_LimitName=row.LimitName
		sql_LimitName = removeComma(sql_LimitName.toString())
		sql_CurrencyCode=row.CurrencyCode
		sql_Amount=row.Amount
		sql_Amount = removeComma(sql_Amount.toString())
		sql_IsPrimary=row.IsPrimary
		sql_isThePrimaryCoverLimit=row.isThePrimaryCoverLimit
		sql_EffectiveFrom=row.EffectiveFrom
		if(sql_EffectiveFrom!=null && sql_EffectiveFrom.toString().contains("T"))
		{
			sql_EffectiveFrom=sql_EffectiveFrom.replace("T", " ")
			sql_EffectiveFrom=sql_EffectiveFrom.replace("+", " +")
		}
		sql_EffectiveTo=row.EffectiveTo
		sql_AsPerRules=row.AsPerRules
		sql_AsPerRules = removeComma(sql_AsPerRules.toString())
		sql_Template=row.Template
		sql_Template = removeComma(sql_Template.toString())
		sql_ProductType=row.ProductType
		sql_LatestRiskTransactionDate=row.LatestRiskTransactionDate
		if(sql_LatestRiskTransactionDate!=null && sql_LatestRiskTransactionDate.toString().contains("T"))
		{
			sql_LatestRiskTransactionDate=sql_LatestRiskTransactionDate.replace("T", " ")
			sql_LatestRiskTransactionDate=sql_LatestRiskTransactionDate.replace("+", " +")
		}
		sql_Branch=row.Branch
		sql_TerminatedType=row.TerminatedType
		sql_TerminationDate=row.TerminationDate

		if(sql_TerminationDate!=null && sql_TerminationDate.toString().contains("T"))
		{
			sql_TerminationDate=sql_TerminationDate.replace("T", " ")
			sql_TerminationDate=sql_TerminationDate.replace("+", " +")
		}
		
		sql_PolicyEndDate=row.PolicyEnd
		sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" +00:00","")
		//log.info "Policy End Date="+sql_PolicyEndDate
		
		date= new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
		date = new Date()
		getDateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
		String todaysDate=getDateFormat.format(date)
		todaysDate=todaysDate.toString().replace("/","-")
		//log.info "Today's Date is="+todaysDate

		sqlWriter.println(sql_ApplicationRiskId+","+sql_LimitId+","+sql_CoverShortName+","+sql_LimitName+","+sql_CurrencyCode+","+sql_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+sql_EffectiveFrom+","+sql_EffectiveTo+","+sql_AsPerRules+","+sql_Template+","+sql_ProductType+","+sql_LatestRiskTransactionDate+","+sql_Branch+","+sql_TerminatedType+","+sql_TerminationDate+","+sql_PolicyEndDate)
		log.info "SQL response is : "+sql_ApplicationRiskId+","+sql_LimitId+","+sql_CoverShortName+","+sql_LimitName+","+sql_CurrencyCode+","+sql_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+sql_EffectiveFrom+","+sql_EffectiveTo+","+sql_AsPerRules+","+sql_Template+","+sql_ProductType+","+sql_LatestRiskTransactionDate+","+sql_Branch+","+sql_TerminatedType+","+sql_TerminationDate+","+sql_PolicyEndDate

		//Set the ApplicationRisk ID at test case level
		String appRiskId = sql_ApplicationRiskId
		testRunner.testCase.setPropertyValue("appRiskId", appRiskId)
		
		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)

		//Run the test step to get response
		testRunner.runTestStepByName('RiskSelectionByRiskDetailByAppRiskId')
		String req='${RiskSelectionByRiskDetailByAppRiskId#Response}'
		response=context.expand(req)
		//log.info "API Response received is :"+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["RiskSelectionByRiskDetailByAppRiskId"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info("HTTP status code: " + httpStatusCode)
	
		if(httpStatusCode.equals("200") && sql_PolicyEndDate.toString()>todaysDate)
		{
			api_ApplicationRiskId=jsonRes.id
			if(jsonRes.coverLimits.toString().contains(",") || jsonRes.coverLimits.toString().contains("id"))
			{
				api_LimitId = jsonRes.coverLimits.id
				api_LimitId = removeComma(api_LimitId.toString())
				api_CoverShortName=jsonRes.coverLimits.coverShortName
				api_CoverShortName = removeComma(api_CoverShortName.toString())
				api_LimitName=jsonRes.coverLimits.limitName
				api_LimitName = removeComma(api_LimitName.toString())
				api_CurrencyCode=jsonRes.coverLimits.currencyCode
				api_CurrencyCode = removeComma(api_CurrencyCode.toString())
				api_Amount=jsonRes.coverLimits.amount
				api_Amount = removeComma(api_Amount.toString())
				api_IsThePrimaryCoverLimit=jsonRes.coverLimits.isThePrimaryCoverLimit
				api_IsThePrimaryCoverLimit = removeComma(api_IsThePrimaryCoverLimit.toString())
				api_EffectiveFrom = jsonRes.coverLimits.effectiveFrom	
				if(api_EffectiveFrom!=null && api_EffectiveFrom.toString().contains("T"))
				{
					api_EffectiveFrom = removeComma(api_EffectiveFrom.toString())
					api_EffectiveFrom=api_EffectiveFrom.toString().replace("T", " ")
					api_EffectiveFrom=api_EffectiveFrom.toString().replace("+", " +")
				}
				api_EffectiveTo= jsonRes.coverLimits.effectiveTo
				if(api_EffectiveTo!=null && api_EffectiveTo.toString().contains("T"))
				{
					api_EffectiveTo = removeComma(api_EffectiveTo.toString())
					api_EffectiveTo=api_EffectiveTo.toString().replace("T", " ")
					api_EffectiveTo=api_EffectiveTo.toString().replace("+", " +")
				}
			}
			else
			{
				api_LimitId = null
				api_CoverShortName= null
				api_LimitName= null
				api_CurrencyCode= null
				api_Amount= null
				api_IsThePrimaryCoverLimit= null
				api_effectiveFromYear = null
				api_effectiveFromMonth = null
				api_effectiveFromDate = null
				api_effectiveToYear = null
				api_effectiveToMonth = null
				api_effectiveToDate = null
			}
			
			api_AsPerRules=jsonRes.asPerRules
			api_AsPerRules = removeComma(api_AsPerRules.toString())
			api_ProductType=jsonRes.productType
			api_Template=jsonRes.template
			api_Template = removeComma(api_Template.toString())
			api_LatestRiskTransactionDate=jsonRes.latestRiskTransactionDate
			if(api_LatestRiskTransactionDate!=null && api_LatestRiskTransactionDate.toString().contains("T"))
			{
				api_LatestRiskTransactionDate=api_LatestRiskTransactionDate.toString().replace("T", " ")
				api_LatestRiskTransactionDate=api_LatestRiskTransactionDate.toString().replace("+", " +")
			}
			api_Branch=jsonRes.branch
			api_TerminationType=jsonRes.terminationType
			api_TerminatedDate=jsonRes.terminatedDate
			if(api_TerminatedDate!=null && api_TerminatedDate.toString().contains("T"))
			{
				api_TerminatedDate=api_TerminatedDate.toString().replace("T", " ")
				api_TerminatedDate=api_TerminatedDate.toString().replace("+", " +")
			}

			apiWriter.println(api_ApplicationRiskId+","+api_LimitId+","+api_CoverShortName+","+api_LimitName+","+api_CurrencyCode+","+api_Amount+","+api_IsThePrimaryCoverLimit+","+api_EffectiveFrom+","+api_EffectiveTo+","+api_AsPerRules+","+api_Template+","+api_ProductType+","+api_LatestRiskTransactionDate+","+api_Branch+","+api_TerminatedDate+","+api_TerminationType)
			log.info "API response received as : "+api_ApplicationRiskId+","+api_LimitId+","+api_CoverShortName+","+api_LimitName+","+api_CurrencyCode+","+api_Amount+","+api_IsThePrimaryCoverLimit+","+api_EffectiveFrom+","+api_EffectiveTo+","+api_AsPerRules+","+api_Template+","+api_ProductType+","+api_LatestRiskTransactionDate+","+api_Branch+","+api_TerminatedDate+","+api_TerminationType

			if(
				sql_ApplicationRiskId.toString().equals(api_ApplicationRiskId.toString()) && 
				sql_LimitId.toString().equals(api_LimitId.toString()) && 
				sql_CoverShortName.toString().toUpperCase().equals(api_CoverShortName.toString().toUpperCase()) && 
				sql_LimitName.toString().toUpperCase().equals(api_LimitName.toString().toUpperCase()) && 
				sql_CurrencyCode.toString().toUpperCase().equals(api_CurrencyCode.toString().toUpperCase()) && 
				sql_Amount.toString().equals(api_Amount.toString()) && 
				sql_isThePrimaryCoverLimit.toString().toUpperCase().equals(api_IsThePrimaryCoverLimit.toString().toUpperCase()) && 
				sql_EffectiveFrom.toString().equals(api_EffectiveFrom.toString()) && 
				sql_EffectiveTo.toString().equals(api_EffectiveTo.toString()) && 
				sql_AsPerRules.toString().toUpperCase().equals(api_AsPerRules.toString().toUpperCase()) && 
				sql_Template.toString().toUpperCase().equals(api_Template.toString().toUpperCase()) && 
				sql_Branch.toString().toUpperCase().equals(api_Branch.toString().toUpperCase()) &&
				sql_ProductType.toString().toUpperCase().equals(api_ProductType.toString().toUpperCase()) && 
				sql_TerminatedType.toString().toUpperCase().equals(api_TerminationType.toString().toUpperCase()) &&
				sql_LatestRiskTransactionDate.toString().equals(api_LatestRiskTransactionDate.toString()) && 
				sql_TerminationDate.toString().equals(api_TerminatedDate.toString())
			)
			{
				compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_LimitId+","+api_LimitId+","+sql_CoverShortName+","+api_CoverShortName+","+sql_LimitName+","+api_LimitName+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_Amount+","+api_Amount+","+sql_isThePrimaryCoverLimit+","+api_IsThePrimaryCoverLimit+","+sql_EffectiveFrom+","+api_EffectiveFrom+","+sql_EffectiveTo+","+api_EffectiveTo+","+sql_AsPerRules+","+api_AsPerRules+","+sql_Template+","+api_Template+","+sql_ProductType+","+api_ProductType+","+sql_LatestRiskTransactionDate+","+api_LatestRiskTransactionDate+","+sql_Branch+","+api_Branch+","+sql_TerminatedType+","+api_TerminatedDate+","+sql_TerminationDate+","+api_TerminationType+","+sql_PolicyEndDate+","+"Test Case passed")
				log.info "Details are matching hence test case is passed"+sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_LimitId+","+api_LimitId+","+sql_CoverShortName+","+api_CoverShortName+","+sql_LimitName+","+api_LimitName+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_Amount+","+api_Amount+","+sql_isThePrimaryCoverLimit+","+api_IsThePrimaryCoverLimit+","+sql_EffectiveFrom+","+api_EffectiveFrom+","+sql_EffectiveTo+","+api_EffectiveTo+","+sql_AsPerRules+","+api_AsPerRules+","+sql_Template+","+api_Template+","+sql_ProductType+","+api_ProductType+","+sql_LatestRiskTransactionDate+","+api_LatestRiskTransactionDate+","+sql_Branch+","+api_Branch+","+sql_TerminatedType+","+api_TerminatedDate+","+sql_TerminationDate+","+api_TerminationType+","+sql_PolicyEndDate
			}
			else
			{	
				compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_LimitId+","+api_LimitId+","+sql_CoverShortName+","+api_CoverShortName+","+sql_LimitName+","+api_LimitName+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_Amount+","+api_Amount+","+sql_isThePrimaryCoverLimit+","+api_IsThePrimaryCoverLimit+","+sql_EffectiveFrom+","+api_EffectiveFrom+","+sql_EffectiveTo+","+api_EffectiveTo+","+sql_AsPerRules+","+api_AsPerRules+","+sql_Template+","+api_Template+","+sql_Branch+","+api_Branch+","+sql_ProductType+","+api_ProductType+","+sql_LatestRiskTransactionDate+","+api_LatestRiskTransactionDate+","+sql_TerminatedType+","+api_TerminationType+","+sql_TerminationDate+","+api_TerminatedDate+","+sql_PolicyEndDate+","+"Test case Failed")
				log.info "Details are not matching hence test case is failed"+sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_LimitId+","+api_LimitId+","+sql_CoverShortName+","+api_CoverShortName+","+sql_LimitName+","+api_LimitName+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_Amount+","+api_Amount+","+sql_isThePrimaryCoverLimit+","+api_IsThePrimaryCoverLimit+","+sql_EffectiveFrom+","+api_EffectiveFrom+","+sql_EffectiveTo+","+api_EffectiveTo+","+sql_AsPerRules+","+api_AsPerRules+","+sql_Template+","+api_Template+","+sql_ProductType+","+api_ProductType+","+sql_LatestRiskTransactionDate+","+api_LatestRiskTransactionDate+","+sql_Branch+","+api_Branch+","+sql_TerminatedType+","+api_TerminatedDate+","+sql_TerminationDate+","+api_TerminationType+","+sql_PolicyEndDate
			}
		}
		else if(httpStatusCode.equals("401"))
		{
			apiWriter.println(sql_ApplicationRiskId+","+jsonRes.message)
			message = jsonRes.message.toString()
			message = message.replace(","," ")
			compareWriter.println(sql_ApplicationRiskId+","+message+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+jsonRes.message)
			log.info "For Application Risk id =>"+sql_ApplicationRiskId+" response is received as =>"+jsonRes.message
		}
		else if(httpStatusCode.equals("404"))
		{
			if(jsonRes.Message.toString().contains("is in the past") && todaysDate.toString()>sql_PolicyEndDate.toString())
			{
				message = jsonRes.Message.toString()
				message = message.replace(","," ")
				apiWriter.println(sql_ApplicationRiskId+","+jsonRes.Message)
				compareWriter.println(sql_ApplicationRiskId+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+jsonRes.Message+","+"Test Case passed")
				log.info "For application risk id =>"+sql_ApplicationRiskId+" policy end date is past date hence test case is passed by receiving valid response=>"+jsonRes.Message
			}
		}
		else if(httpStatusCode.equals("200") && todaysDate.toString()>sql_PolicyEndDate.toString())
		{
			getAPIPropertyValue(jsonRes, apiWriter)
			compareWriter.println(sql_ApplicationRiskId+","+"httpStatusCode:"+httpStatusCode+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test case failed because Supplemental Application Risk details are displayed in API response enev though policy end date is past date")
			log.info "For application risk id =>"+sql_ApplicationRiskId+" Supplemental Application Risk details are displayed in API response enev though policy end date is past date"
		}
		else
		{
			compareWriter.println(sql_ApplicationRiskId+","+"httpStatusCode:"+httpStatusCode+jsonRes+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test case failed")
			log.info ("Invalid API response is received hence test case is failed.")
		}
		counter=counter+1;
		log.info "Record number "+counter+" is checked."
}

public String removeComma(String field)
{
	if(field!=null && field.contains(","))
		field=field.replace(","," ")
	if(field!=null && field.contains("["))
	{
		field=field.replace("[","")
		field=field.replace("]","")
	}
	if(field.contains(".00"))
	{
		field = field.replace(".00","")
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString = newDateTimeString.replace(":","-")
log.info "************Execution Finished at "+newDateTimeString+"************"
log.info "************Execution Finished for Risk Selection By Risk Detail By Application Risk Id************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>appRiskId</con:name><con:value>179198</con:value></con:property></con:properties></con:testCase><con:testCase id="bfe27617-4bdb-42c6-96ab-a550c44879a4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_VoidPolicies" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppId" id="2a63daf6-426d-4f76-9cb1-b4b10d51f75f"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/" methodName="ApplicationByApplicationId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppId" id="ff689291-46b0-47a0-88f0-a2ddbd2b2302" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/91714/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ExcludeNewBusiness" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ExcludeNewBusiness</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Void_ApplicationByApplicationId" id="52dac484-d31a-43d0-8f41-6ba737baa731" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Exclude Void policies for Application by Application Id ************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
"""
Use TOM
Select 
Top 200
AB.Id, AB.Reference, ABR.Broker_Id as BrokerId, MA.Id as MemberId, MA.Reference as MemberReference, P.OrganisationName as MemberName, 
AB.Discriminator, [User].EmailAddress, AB.PolicyStart as PolicyStartDate, AB.PolicyEnd as PolicyEndDate, AB.FlagAtRenewal as IsRenewalApplication,
RPS.Name as PolicyStatus, RQS.Name as QuoteStatus
from ApplicationBase AB 
inner join ApplicationMemberAssured AMA on AMA.Application_Id = AB.Id 
inner join MemberAssured MA on MA.Id=AMA.MemberAssured_Id 
inner join Party P on P.Id= MA.Party_Id 
join [user] on AB.Underwriter_Id = [User].Id
inner join ApplicationBroker ABR on ABR.Application_Id = AB.Id
left join ApplicationPolicyStatus APS on APS.Application_Id=AB.Id
left join ref_PolicyStatus RPS on APS.PolicyStatus_Id=RPS.Id
left join ref_QuoteStatus RQS on RQS.Id = AB.Status_Id
where AB.Discriminator!='RenewalQuote'
--and AB.Id=91713
--and RPS.Id =2 
and RQS.Id in (18, 19, 20)
--and RQS.Name not like '%Abandoned%' or RPS.Name not like '%Void%'
and RQS.Name like '%Abandoned%' or RPS.Name like '%Void%' or RPS.Name like '%Bound%' 
order by 1 desc
"""
def rows=con.rows(sqlstmt)  
int db_size=rows.size

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationID(ExcludeVoidPolicy).csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationID(ExcludeVoidPolicy).csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationID(ExcludeVoidPolicy).csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationID(ExcludeVoidPolicy)"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationID(ExcludeVoidPolicy)"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationID(ExcludeVoidPolicy)"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_ApplicationReference"+","+"SQL_BrokerId"+","+"SQL_MemberId"+","+"SQL_MemberReference"+","+"SQL_MemberName"+","+"SQL_Discriminator"+","+"SQL_EmailAddress"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_IsRenewalApplication"+","+"SQL_PolicyStatus"+","+"SQL_QuoteStatus")
apiWriter.println("API_ApplicationId"+","+"API_ApplicationReference"+","+"API_BrokerId"+","+"API_MemberId"+","+"API_MemberReference"+","+"API_MemberName"+","+"API_Discriminator"+","+"API_EmailAddress"+","+"API_BrokerReference"+","+"API_BrokerName"+","+"API_ApplicationProductType"+","+"API_ApplicationFirstTransaction"+","+"API_PolicyStartDate"+","+"API_PolicyEndDate"+","+"API_IsRenewalApplication"+","+"API_RenewalFromPolicyReference")			
compareWriter.println("SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_BrokerId"+","+"API_BrokerId"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_Discriminator"+","+"API_Discriminator"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"API_BrokerReference"+","+"API_BrokerName"+","+"API_ApplicationProductType"+","+"API_ApplicationFirstTransaction"+","+"API_PolicyStartDate"+","+"API_PolicyEndDate"+","+"API_IsRenewalApplication"+","+"API_RenewalFromPolicyReference"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row ->
		sql_ApplicationId=row.Id
		sql_ApplicationReference=row.Reference
		sql_BrokerId=row.BrokerId
		sql_MemberId=row.MemberId
		sql_MemberReference=row.MemberReference
		sql_MemberName=row.MemberName
		sql_MemberName = removeCommas(sql_MemberName.toString())
		sql_Discriminator=row.Discriminator
		sql_EmailAddress=row.EmailAddress
		sql_PolicyStartDate=row.PolicyStartDate
		sql_PolicyEndDate=row.PolicyEndDate
		sql_IsRenewalApplication=row.IsRenewalApplication
		sql_PolicyStatus=row.PolicyStatus
		sql_QuoteStatus=row.QuoteStatus

		sqlWriter.println(sql_ApplicationId+","+sql_ApplicationReference+","+sql_BrokerId+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_Discriminator+","+sql_EmailAddress+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication+","+sql_PolicyStatus+","+sql_QuoteStatus)
		log.info "SQL response is : "+sql_ApplicationId+","+sql_ApplicationReference+","+sql_BrokerId+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_Discriminator+","+sql_EmailAddress+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication+","+sql_PolicyStatus+","+sql_QuoteStatus

		//Set the Application ID at test case level
		String applicationId =sql_ApplicationId
		testRunner.testCase.setPropertyValue( "applicationId", applicationId)

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
		//log.info "Token Value : "+token

		//Run the test step to get response	
		testRunner.runTestStepByName('AppByAppId')
		String req='${AppByAppId#Response}'
		response=context.expand(req)
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["AppByAppId"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info "API Status code is : "+httpStatusCode
	
		String error = response
		if(httpStatusCode.equals("200"))
		{
			api_ApplicationId=jsonRes.id
			api_ApplicationReference=jsonRes.reference
			api_BrokerId=jsonRes.brokerId
			api_BrokerReference=jsonRes.brokerReference
			api_BrokerName=jsonRes.brokerName
			api_MemberId=jsonRes.memberId
			api_MemberReference=jsonRes.memberReference
			api_MemberName=jsonRes.memberName
			api_MemberName = removeCommas(api_MemberName.toString())
			api_Discriminator=jsonRes.applicationType
			api_ApplicationProductType=jsonRes.applicationProductType
			api_EmailAddress=jsonRes.applicationUnderwriterEmail
			api_ApplicationFirstTransaction=jsonRes.applicationFirstTransaction
			api_PolicyStartDate=jsonRes.policyStartDate
			api_PolicyEndDate=jsonRes.policyEndDate
			api_IsRenewalApplication=jsonRes.isRenewalApplication
			api_RenewalFromPolicyReference=jsonRes.renewalFromPolicyReference
	
			apiWriter.println(api_ApplicationId+","+api_ApplicationReference+","+api_BrokerId+","+api_BrokerReference+","+api_BrokerName+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_Discriminator+","+api_ApplicationProductType+","+api_EmailAddress+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference)
			log.info "API response is : "+api_ApplicationId+","+api_ApplicationReference+","+api_BrokerId+","+api_BrokerReference+","+api_BrokerName+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_Discriminator+","+api_ApplicationProductType+","+api_EmailAddress+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference

			if(sql_Discriminator.toString().equals("Policy") && sql_PolicyStatus.toString().equals("Void"))
			{	
				log.info sql_ApplicationId+","+"Test case should be failed as void policy details are displayed into API response which should not be displayed"
				compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_Discriminator+","+sql_EmailAddress+","+api_EmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"Test Case Failed, void policy details should not be displayed")				
			}
			else if (sql_Discriminator.toString().equals("Quote") && sql_QuoteStatus.toString().equals("Abandoned"))
			{	
				log.info sql_ApplicationId+","+"Test case should be failed as quote is abandoned and still details are displayed into API response which should not be displayed"
				compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_Discriminator+","+sql_EmailAddress+","+api_EmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"Test Case Failed, abandoned quote details should not be displayed")				
			}
			else if(!sql_PolicyStatus.toString().equals("Void") && !sql_QuoteStatus.toString().contains("Abandoned"))
			{
				if(api_ApplicationId.toString().equals(sql_ApplicationId.toString()) && api_ApplicationReference.toString().equals(sql_ApplicationReference.toString()) && api_BrokerId.toString().equals(sql_BrokerId.toString()) && api_MemberId.toString().equals(sql_MemberId.toString()) && api_MemberReference.toString().equals(sql_MemberReference.toString()) && api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && api_Discriminator.toString().toUpperCase().equals(sql_Discriminator.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()))
				{
					compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_Discriminator+","+sql_EmailAddress+","+api_EmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"Test Case Passed")
					log.info ("Details are matching hence test case is passed")
				}
				else
				{
					compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_Discriminator+","+sql_EmailAddress+","+api_EmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"Test Case failed")
					log.info ("Details are not matching hence test case is failed")
				}	
			}
		}
		if(sql_PolicyStatus.toString().equals("Void") || sql_QuoteStatus.toString().contains("Abandoned"))
		{
			if(httpStatusCode.equals("404"))
			{
				log.info "For Void policy / Abandoned quote- valid error response code is displayed hence test case is passed"
				compareWriter.println(sql_ApplicationId+","+"For Void policy / Abandoned quote- valid error response code is displayed hence test case is passed"+","+response)
			}
			else
			{
				log.info "For Void policy / Abandoned quote- invalid error response code is displayed hence test case is failed"
				compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_Discriminator+","+sql_EmailAddress+","+api_EmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"For Void policy / Abandoned quote- invalid error response code is displayed hence test case is failed")
			}
		}
		counter=counter+1
		log.info "Number of records verified are : "+counter
}
public String removeCommas(String field)
{
	if(field!=null && field.contains(","))
	{
		field = field.replace(","," ")
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Exclude void policies for Application by Application Id************"]]></script></con:config></con:testStep><con:testStep type="restrequest" name="AppByAppRef" id="fa7b761c-70c5-4b27-9809-81c6d3a0b2d7"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/" methodName="ApplicationsByApplicationReference" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppRef" id="b5c76b67-8f2a-4c1f-8e41-e1684c88e0e3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="reference" value="${#TestCase#appReference}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>reference</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Void_ApplicationByApplicationReference" id="441ab118-aa96-488a-bdeb-7bab70de5db7" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Exclude Void Policies in Application by Application Reference ************"

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
"""
Use TOM
Select 
TOP 200
AB.Id as ApplicationId, AB.Reference as ApplicationReference, ABR.Broker_Id as BrokerId, MA.Id as MemberId, MA.Reference as MemberReference, P.OrganisationName as MemberName, 
AB.Discriminator, [User].EmailAddress, AB.PolicyStart as PolicyStartDate, AB.PolicyEnd as PolicyEndDate, AB.FlagAtRenewal as IsRenewalApplication, 
RPS.Name as PolicyStatus, RQS.Name as QuoteStatus
from ApplicationBase AB 
inner join ApplicationMemberAssured AMA on AMA.Application_Id = AB.Id 
inner join MemberAssured MA on MA.Id=AMA.MemberAssured_Id 
inner join Party P on P.Id= MA.Party_Id 
join [user] on AB.Underwriter_Id = [User].Id
inner join ApplicationBroker ABR on ABR.Application_Id = AB.Id
left join ApplicationPolicyStatus APS on APS.Application_Id=AB.Id
left join ref_PolicyStatus RPS on APS.PolicyStatus_Id=RPS.Id
left join ref_QuoteStatus RQS on RQS.Id = AB.Status_Id
where AB.Discriminator!='RenewalQuote'
--and AB.Id=91713
--and RPS.Id=2
and RQS.Id in (18, 19, 20)
and RQS.Name like '%Abandoned%' or RPS.Name like '%Void%' or RPS.Name like '%Bound%' 
order by 1 desc
"""

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationReference(ExcludeVoidPolicy).csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationReference(ExcludeVoidPolicy).csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationReference(ExcludeVoidPolicy).csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationReference(ExcludeVoidPolicy)"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationReference(ExcludeVoidPolicy)"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationReference(ExcludeVoidPolicy)"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_ApplicationReference"+","+"SQL_BrokerId"+","+"SQL_MemberId"+","+"SQL_MemberReference"+","+"SQL_MemberName"+","+"SQL_Discriminator"+","+"SQL_EmailAddress"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_IsRenewalApplication"+","+"SQL_PolicyStatus"+","+"SQL_QuoteStatus")
apiWriter.println("API_ApplicationId"+","+"API_ApplicationReference"+","+"API_BrokerId"+","+"API_BrokerReference"+","+"API_BrokerName"+","+"API_MemberId"+","+"API_MemberReference"+","+"API_MemberName"+","+"API_Discriminator"+","+"API_ApplicationType"+","+"API_ApplicationProductType"+","+"API_ApplicationUnderwriterEmail"+","+"API_ApplicationFirstTransaction"+","+"API_PolicyStartDate"+","+"API_PolicyEndDate"+","+"API_IsRenewalApplication"+","+"API_RenewalFromPolicyReference")
//compareWriter.println("SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_BrokerId"+","+"API_BrokerId"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_Discriminator"+","+"API_Discriminator"+","+"SQL_EmailAddress"+","+"API_ApplicationUnderwriterEmail"+","+"SQL_PolicyStartDate"+","+"API_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"API_PolicyEndDate"+","+"SQL_IsRenewalApplication"+","+"API_IsRenewalApplication"+","+"API_ApplicationType"+","+"API_ApplicationProductType"+","+"API_ApplicationFirstTransaction"+","+"API_RenewalFromPolicyReference"+","+"Test Case Status")
compareWriter.println("SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_BrokerId"+","+"API_BrokerId"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_Discriminator"+","+"API_ApplicationType"+","+"SQL_EmailAddress"+","+"API_ApplicationUnderwriterEmail"+","+"SQL_PolicyStartDate"+","+"API_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"API_PolicyEndDate"+","+"SQL_IsRenewalApplication"+","+"API_IsRenewalApplication"+","+"API_ApplicationProductType"+","+"API_ApplicationFirstTransaction"+","+"API_BrokerReference"+","+"API_BrokerName"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter=0;

def api_ApplicationId=null
def api_ApplicationReference=null
def api_BrokerId=null
def api_BrokerReference=null
def api_BrokerName=null
def api_MemberId=null
def api_MemberReference=null
def api_MemberName=null
def api_ApplicationType=null
def api_ApplicationProductType=null
def api_ApplicationUnderwriterEmail=null
def api_ApplicationFirstTransaction=null
def api_PolicyStartDate=null
def api_PolicyEndDate=null
def api_IsRenewalApplication=null
def api_RenewalFromPolicyReference=null


con.eachRow(sqlstmt)
{	
	row ->
		sql_ApplicationId=row.ApplicationId
		sql_ApplicationReference=row.ApplicationReference
		sql_BrokerId=row.BrokerId
		sql_MemberId=row.MemberId
		sql_MemberReference=row.MemberReference
		sql_MemberName=row.MemberName
		sql_Discriminator=row.Discriminator
		sql_EmailAddress=row.EmailAddress
		sql_PolicyStartDate=row.PolicyStartDate
		sql_PolicyEndDate=row.PolicyEndDate
		sql_IsRenewalApplication=row.IsRenewalApplication
		sql_PolicyStatus=row.PolicyStatus
		sql_QuoteStatus=row.QuoteStatus

		sqlWriter.println(sql_ApplicationId+","+sql_ApplicationReference+","+sql_BrokerId+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_Discriminator+","+sql_EmailAddress+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication+","+sql_PolicyStatus+","+sql_QuoteStatus)
		log.info "SQL response is : "+sql_ApplicationId+","+sql_ApplicationReference+","+sql_BrokerId+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_Discriminator+","+sql_EmailAddress+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication+","+sql_PolicyStatus+","+sql_QuoteStatus

		//Set the Application ID at test case level
		String appReference=sql_ApplicationReference
		testRunner.testCase.setPropertyValue( "appReference", appReference)

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
		//log.info "Token Value : "+token
		
		testRunner.runTestStepByName('AppByAppRef')
		String req='${AppByAppRef#Response}'
		response=context.expand(req)
		log.info "API response is : "+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["AppByAppRef"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info "API Status code is : "+httpStatusCode

		String error = response
		if(httpStatusCode.equals("200"))
		{
			int jsonRecordCount = jsonRes.totalRecords
			log.info "Search records counts : "+ jsonRecordCount 
			for (int i=0; i<jsonRecordCount; i++)
			{
				newId = jsonRes.results.id[i]
				if(sql_ApplicationId.toString().equals(newId.toString()))
				{
					api_ApplicationId=jsonRes.results.id[i]
					api_ApplicationReference=jsonRes.results.reference[i]
					api_BrokerId=jsonRes.results.brokerId[i]
					api_BrokerReference=jsonRes.results.brokerReference[i]
					api_BrokerName=jsonRes.results.brokerName[i]
					api_MemberId=jsonRes.results.memberId[i]
					api_MemberReference=jsonRes.results.memberReference[i]
					api_MemberName=jsonRes.results.memberName[i]
					api_ApplicationType=jsonRes.results.applicationType[i]
					api_ApplicationProductType=jsonRes.results.applicationProductType[i]
					api_ApplicationUnderwriterEmail=jsonRes.results.applicationUnderwriterEmail[i]
					api_ApplicationFirstTransaction=jsonRes.results.applicationFirstTransaction[i]
					api_PolicyStartDate=jsonRes.results.policyStartDate[i]
					api_PolicyEndDate=jsonRes.results.policyEndDate[i]
					api_IsRenewalApplication=jsonRes.results.isRenewalApplication[i]
					api_RenewalFromPolicyReference=jsonRes.results.renewalFromPolicyReference[i]
					
					apiWriter.println(api_ApplicationId+","+api_ApplicationReference+","+api_BrokerId+","+api_BrokerReference+","+api_BrokerName+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationType+","+api_ApplicationProductType+","+api_ApplicationUnderwriterEmail+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication)
					log.info "API response is : "+api_ApplicationId+","+api_ApplicationReference+","+api_BrokerId+","+api_BrokerReference+","+api_BrokerName+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationType+","+api_ApplicationProductType+","+api_ApplicationUnderwriterEmail+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication

					if(sql_Discriminator.toString().equals("Policy") && sql_PolicyStatus.toString().equals("Void"))
					{	
						log.info sql_ApplicationId+","+"Test case should be failed as void policy details are displayed into API response which should not be displayed"
						compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_ApplicationUnderwriterEmail+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"Test Case Failed, void policy details should not be displayed")				
					}
					else if (sql_Discriminator.toString().equals("Quote") && sql_QuoteStatus.toString().equals("Abandoned"))
					{	
						log.info sql_ApplicationId+","+"Test case should be failed as quote is abandoned and still details are displayed into API response which should not be displayed"
						compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_ApplicationUnderwriterEmail+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"Test Case Failed, abandoned quote details should not be displayed")				
					}
					else if(!sql_PolicyStatus.toString().equals("Void") && !sql_QuoteStatus.toString().contains("Abandoned"))
					{
						if(api_ApplicationId.toString().equals(sql_ApplicationId.toString()) && api_ApplicationReference.toString().equals(sql_ApplicationReference.toString()) && api_BrokerId.toString().equals(sql_BrokerId.toString()) && api_MemberId.toString().equals(sql_MemberId.toString()) && api_MemberReference.toString().equals(sql_MemberReference.toString()) && api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && api_ApplicationType.toString().toUpperCase().equals(sql_Discriminator.toString().toUpperCase()) && api_ApplicationUnderwriterEmail.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()))
						{
							compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_ApplicationUnderwriterEmail+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"Test Case Passed")
							log.info ("Details are matching hence test case is passed")
						}
						else
						{
							compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_ApplicationUnderwriterEmail+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"Test Case failed")
							log.info ("Details are not matching hence test case is failed")
						}	
					}
				}	
			}	
		}
		else
		{
			apiWriter.println("Test Case is failed for "+","+sql_ApplicationId+" because , "+response)
			log.info "Test Case is failed for "+","+sql_ApplicationId+" because , "+response
		}
		if(sql_PolicyStatus.toString().equals("Void") || sql_QuoteStatus.toString().contains("Abandoned"))
		{
			if(httpStatusCode.equals("404"))
			{
				log.info "For Void policy / Abandoned quote- valid error response code is displayed hence test case is passed"
				compareWriter.println(sql_ApplicationId+","+"For Void policy / Abandoned quote- valid error response code is displayed hence test case is passed"+","+response)
			}
			else
			{
				log.info "For Void policy / Abandoned quote- invalid error response code is displayed hence test case is failed"
				compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_ApplicationUnderwriterEmail+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"For Void policy / Abandoned quote- invalid error response code is displayed hence test case is failed")
				//compareWriter.println(sql_ApplicationId+","+"For Void policy / Abandoned quote- invalid error response code is displayed hence test case is failed"+","+response)
			}
		}
		counter=counter+1
		log.info "Number of records verified are : "+counter
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Exclude Void Policies in Application by Application Reference ************"]]></script></con:config></con:testStep><con:testStep type="restrequest" name="MemByMemIdByRisks" id="5b74e087-332b-4164-83be-f62943f99c5f"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/members/${#TestCase#memberId}/risks" methodName="MemberByMemberIdByRisks" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="MemByMemIdByRisks" id="fe2bf82e-4c43-4040-beb0-a65e8b74a4cb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/members/47355/risks</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Void_MemberByMemberIdByRisks" id="52ec9385-1a47-4558-b6cf-6975de3c6f04" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution execution strted for Exclude Void Policies in Member By Member Id By Risk ************"

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt="""
			USE TOM
			SELECT 
			TOP 200
			AR.Id as ApplicationRiskId, RV.Id as RiskVesselId, R.Reference as RiskReference, AMA.MemberAssured_Id as MemberId, MA.Reference,
			P.OrganisationName,
			AB.Id as ApplicationID, Ab.Reference as ApplicationReference, AB.Discriminator, [User].EmailAddress,
			R.Name as VesselName, RV.CallSign, RV.ImoNumber, Rv.GrossTonnage, RV.YearBuilt, VT.Name as VesselType, con.ShortCode as FlagCountryCode, 
			con.Name as FlagCountryName, RP.ShortCode as PortOfRegistryCode, RP.Name as PortOfRegistryName, RST.Name as RiskCategoryName, 
			RV.EngineHorsePower, RV.TrademarkEngineModelNumber,
			RPS.Name as PolicyStatus
			from ApplicationBase AB
			join ApplicationMemberAssured AMA on AMA.Application_Id=AB.Id
			join ApplicationRisk AR on AR.ApplicationMemberAssured_Id=AMA.Id
			join Risk R on R.Id = AR.Risk_Id
			join RiskVessel RV on RV.Id = R.Id
			join [user] on AB.Underwriter_Id = [User].Id
			join ref_VesselType VT on VT.Id=RV.Type_Id
			left join ref_Port RP on RP.Id = RV.PortOfRegistry_Id
			join ref_RiskSubType RST on RST.Id = RV.Category_Id
			left join ref_Country Con on Con.id = RV.Flag_Id
			left join ApplicationPolicyStatus APS on APS.Application_Id=AB.Id
			left join ref_PolicyStatus RPS on APS.PolicyStatus_Id=RPS.Id
			left join MemberAssured MA on AMA.MemberAssured_Id=MA.Id
			inner join Party P on P.Id=MA.Party_Id
			where 
			AB.Reference NOT in (
			select AB.Reference from ApplicationBase AB 
			join ApplicationMemberAssured AMA on AMA.Application_Id =AB.Id 
			where AB.Discriminator in ('RenewalQuote')) and AB.Discriminator='Policy'
			--and RPS.Id=2
			order by 4 desc
"""
def rows=con.rows(sqlstmt) 
int db_size=rows.size

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_MemberByMemberIdByRisk(ExcludeVoidPolicy).csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_MemberByMemberIdByRisk(ExcludeVoidPolicy).csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_MemberByMemberIdByRisk(ExcludeVoidPolicy).csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_MemberByMemberIdByRisk(ExcludeVoidPolicy)"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_MemberByMemberIdByRisk(ExcludeVoidPolicy)"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_MemberByMemberIdByRisk(ExcludeVoidPolicy)"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()
				
sqlWriter.println("SQL_ApplicationRiskId"+","+"SQL_RiskVesselId"+","+"SQL_RiskReference"+","+"SQL_MemberId"+","+"SQL_Reference"+","+"SQL_OrganisationName"+","+"SQL_ApplicationID"+","+"SQL_ApplicationReference"+","+"SQL_Discriminator"+","+"SQL_EmailAddress"+","+"SQL_ImoNumber"+","+"SQL_VesselName"+","+"SQL_VesselType"+","+"SQL_CallSign"+","+"SQL_GrossTonnage"+","+"SQL_YearBuilt"+","+"SQL_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"SQL_EngineHorsePower"+","+"SQL_TrademarkEngineModelNumber"+","+"SQL_PolicyStatus")
apiWriter.println("API_ApplicationRiskId"+","+"API_RiskVesselId"+","+"API_RiskReference"+","+"API_MemberId"+","+"API_Reference"+","+"API_OrganisationName"+","+"API_ApplicationID"+","+"API_ApplicationReference"+","+"API_Discriminator"+","+"API_EmailAddress"+","+"API_ImoNumber"+","+"API_VesselName"+","+"API_VesselType"+","+"API_CallSign"+","+"API_GrossTonnage"+","+"API_YearBuilt"+","+"API_FlagCountryCode"+","+"API_FlagCountryName"+","+"API_PortOfRegistryCode"+","+"API_PortOfRegistryName"+","+"API_RiskCategoryName"+","+"API_EngineHorsePower"+","+"API_TrademarkEngineModelNumber")
compareWriter.println("SQL_ApplicationRiskId"+","+"API_ApplicationRiskId"+","+"SQL_RiskVesselId"+","+"API_RiskVesselId"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_Reference"+","+"API_Reference"+","+"SQL_OrganisationName"+","+"API_OrganisationName"+","+"SQL_ApplicationID"+","+"API_ApplicationID"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_Discriminator"+","+"API_Discriminator"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_ImoNumber"+","+"API_ImoNumber"+","+"SQL_VesselName"+","+"API_VesselName"+","+"SQL_VesselType"+","+"API_VesselType"+","+"SQL_CallSign"+","+"API_CallSign"+","+"SQL_GrossTonnage"+","+"API_GrossTonnage"+","+"SQL_YearBuilt"+","+"API_YearBuilt"+","+"SQL_FlagCountryCode"+","+"API_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"API_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"API_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"API_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"API_RiskCategoryName"+","+"SQL_EngineHorsePower"+","+"API_EngineHorsePower"+","+"SQL_TrademarkEngineModelNumber"+","+"API_TrademarkEngineModelNumber"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
String field=null
int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
		sql_ApplicationRiskId=row.ApplicationRiskId
		sql_ApplicationRiskId=removeCommaAndBrackets(sql_ApplicationRiskId.toString())
					
		sql_RiskVesselId=row.RiskVesselId
		sql_RiskVesselId=removeCommaAndBrackets(sql_RiskVesselId.toString())
		
		sql_RiskReference=row.RiskReference
		sql_RiskReference=removeCommaAndBrackets(sql_RiskReference.toString())
		
		sql_MemberId=row.MemberId
		sql_MemberId=removeCommaAndBrackets(sql_MemberId.toString())
		
		sql_Reference=row.Reference
		sql_Reference=removeCommaAndBrackets(sql_Reference.toString())
		
		sql_OrganisationName=row.OrganisationName
		sql_OrganisationName=removeCommaAndBrackets(sql_OrganisationName.toString())
		
		sql_ApplicationID=row.ApplicationID
		sql_ApplicationID=removeCommaAndBrackets(sql_ApplicationID.toString())
		
		sql_ApplicationReference=row.ApplicationReference
		sql_ApplicationReference=removeCommaAndBrackets(sql_ApplicationReference.toString())
		
		sql_Discriminator=row.Discriminator
		sql_Discriminator=removeCommaAndBrackets(sql_Discriminator.toString())
		
		sql_EmailAddress=row.EmailAddress
		sql_EmailAddress=removeCommaAndBrackets(sql_EmailAddress.toString())
		
		sql_ImoNumber=row.ImoNumber
		sql_ImoNumber=removeCommaAndBrackets(sql_ImoNumber.toString())
		
		sql_VesselName=row.VesselName
		sql_VesselName=removeCommaAndBrackets(sql_VesselName.toString())
		
		sql_VesselType=row.VesselType
		sql_VesselType=removeCommaAndBrackets(sql_VesselType.toString())
		
		sql_CallSign=row.CallSign
		sql_CallSign=removeCommaAndBrackets(sql_CallSign.toString())
		
		sql_GrossTonnage=row.GrossTonnage
		sql_GrossTonnage=removeCommaAndBrackets(sql_GrossTonnage.toString())
		
		sql_YearBuilt=row.YearBuilt
		sql_YearBuilt=removeCommaAndBrackets(sql_YearBuilt.toString())
		
		sql_FlagCountryCode=row.FlagCountryCode
		sql_FlagCountryCode=removeCommaAndBrackets(sql_FlagCountryCode.toString())
		
		sql_FlagCountryName=row.FlagCountryName
		sql_FlagCountryName=removeCommaAndBrackets(sql_FlagCountryName.toString())
		
		sql_PortOfRegistryCode=row.PortOfRegistryCode
		sql_PortOfRegistryCode=removeCommaAndBrackets(sql_PortOfRegistryCode.toString())
		
		sql_PortOfRegistryName=row.PortOfRegistryName
		sql_PortOfRegistryName=removeCommaAndBrackets(sql_PortOfRegistryName.toString())
		
		sql_RiskCategoryName=row.RiskCategoryName
		sql_RiskCategoryName=removeCommaAndBrackets(sql_RiskCategoryName.toString())
		
		sql_EngineHorsePower=row.EngineHorsePower
		sql_EngineHorsePower=removeCommaAndBrackets(sql_EngineHorsePower.toString())
		
		sql_TrademarkEngineModelNumber=row.TrademarkEngineModelNumber
		sql_TrademarkEngineModelNumber=removeCommaAndBrackets(sql_TrademarkEngineModelNumber.toString())

		sql_PolicyStatus=row.PolicyStatus
		
		sqlWriter.println(sql_ApplicationRiskId+","+sql_RiskVesselId+","+sql_RiskReference+","+sql_MemberId+","+sql_Reference+","+sql_OrganisationName+","+sql_ApplicationID+","+sql_ApplicationReference+","+sql_Discriminator+","+sql_EmailAddress+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+sql_PolicyStatus)
		log.info "SQL Response received as : "+sql_ApplicationRiskId+","+sql_RiskVesselId+","+sql_RiskReference+","+sql_MemberId+","+sql_Reference+","+sql_OrganisationName+","+sql_ApplicationID+","+sql_ApplicationReference+","+sql_Discriminator+","+sql_EmailAddress+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+sql_PolicyStatus

		//Set the Application ID at test case level
		String memberId=sql_MemberId
		testRunner.testCase.setPropertyValue("memberId", memberId)

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)

		//Run the test step to get response
		testRunner.runTestStepByName("MemByMemIdByRisks")
		String req='${MemByMemIdByRisks#Response}'
		response=context.expand(req)
		//log.info "API Response received is :"+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["MemByMemIdByRisks"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		int count =  jsonRes.totalRecords
		for (int i=0; i<count; i++)
		{
			String newId= jsonRes.results.memberId[i]
			newId=removeCommaAndBrackets(newId)
			if(sql_MemberId.toString().equals(newId.toString()))
			{
				api_ApplicationRiskId= jsonRes.results.applicationRiskId[i]
				field=api_ApplicationRiskId
				api_ApplicationRiskId=removeCommaAndBrackets(field)
				
				api_RiskVesselId= jsonRes.results.id[i]
				field=api_RiskVesselId
				api_RiskVesselId=removeCommaAndBrackets(field)
				
				api_RiskReference= jsonRes.results.reference[i]
				field=api_RiskReference
				api_RiskReference=removeCommaAndBrackets(field)
				
				api_MemberId= jsonRes.results.memberId[i]
				field=api_MemberId
				api_MemberId=removeCommaAndBrackets(field)
				
				api_Reference= jsonRes.results.memberReference[i]
				field=api_Reference
				api_Reference=removeCommaAndBrackets(field)
				
				api_OrganisationName= jsonRes.results.memberName[i]
				field=api_OrganisationName
				api_OrganisationName=removeCommaAndBrackets(field)
				
				api_ApplicationID= jsonRes.results.applicationId[i]
				field=api_ApplicationRiskId
				api_ApplicationRiskId=removeCommaAndBrackets(field)
				
				api_ApplicationReference= jsonRes.results.applicationReference[i]
				field=api_ApplicationReference
				api_ApplicationReference=removeCommaAndBrackets(field)
				
				api_ApplicationType= jsonRes.results.applicationType[i]
				field=api_ApplicationType
				api_ApplicationType=removeCommaAndBrackets(field)
				
				api_EmailAddress= jsonRes.results.applicationUnderwriterEmail[i]
				field=api_EmailAddress
				api_EmailAddress=removeCommaAndBrackets(field)
				
				api_ImoNumber= jsonRes.results.vessel.imoNumber[i]
				field=api_ImoNumber
				api_ImoNumber=removeCommaAndBrackets(field)
				
				api_VesselName= jsonRes.results.vessel.vesselName[i]
				field=api_VesselName
				api_VesselName=removeCommaAndBrackets(field)
				
				api_VesselType= jsonRes.results.vessel.vesselType[i]
				field=api_VesselType
				api_VesselType=removeCommaAndBrackets(field)
				
				api_CallSign= jsonRes.results.vessel.callSign[i]
				field=api_CallSign
				api_CallSign=removeCommaAndBrackets(field)
				
				api_GrossTonnage= jsonRes.results.vessel.grossTonnage[i]
				field=api_GrossTonnage
				api_GrossTonnage=removeCommaAndBrackets(field)
				
				api_YearBuilt= jsonRes.results.vessel.yearBuilt[i]
				field=api_YearBuilt
				api_YearBuilt=removeCommaAndBrackets(field)
				
				api_FlagCountryCode= jsonRes.results.vessel.flagCountryCode[i]
				field=api_FlagCountryCode
				api_FlagCountryCode=removeCommaAndBrackets(field)
				
				api_FlagCountryName= jsonRes.results.vessel.flagCountryName[i]
				field=api_FlagCountryName
				api_FlagCountryName=removeCommaAndBrackets(field)
				
				api_PortOfRegistryCode= jsonRes.results.vessel.portOfRegistryCode[i]
				field=api_PortOfRegistryCode
				api_PortOfRegistryCode=removeCommaAndBrackets(field)
				
				api_PortOfRegistryName= jsonRes.results.vessel.portOfRegistryName[i]
				field=api_PortOfRegistryName
				api_PortOfRegistryName=removeCommaAndBrackets(field)
				
				api_RiskCategoryName= jsonRes.results.vessel.riskCategoryName[i]
				field=api_RiskCategoryName
				api_RiskCategoryName=removeCommaAndBrackets(field)
				
				api_EngineHorsePower= jsonRes.results.vessel.engineHorsePower[i]
				field=api_EngineHorsePower
				api_EngineHorsePower=removeCommaAndBrackets(field)
				
				api_TrademarkEngineModelNumber= jsonRes.results.vessel.trademarkAndEngineModel[i]
				field=api_TrademarkEngineModelNumber
				api_TrademarkEngineModelNumber=removeCommaAndBrackets(field)
		
				//sqlWriter.println(sql_ApplicationRiskId+","+sql_RiskVesselId+","+sql_RiskReference+","+sql_MemberId+","+sql_Reference+","+sql_OrganisationName+","+sql_ApplicationID+","+sql_ApplicationReference+","+sql_Discriminator+","+sql_EmailAddress+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber)
				apiWriter.println(api_ApplicationRiskId+","+api_RiskVesselId+","+api_RiskReference+","+api_MemberId+","+api_Reference+","+api_OrganisationName+","+api_ApplicationID+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_GrossTonnage+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_EngineHorsePower+","+api_TrademarkEngineModelNumber)
				log.info "API response received as :"+api_ApplicationRiskId+","+api_RiskVesselId+","+api_RiskReference+","+api_MemberId+","+api_Reference+","+api_OrganisationName+","+api_ApplicationID+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_GrossTonnage+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_EngineHorsePower+","+api_TrademarkEngineModelNumber			

				if(!sql_PolicyStatus.toString().equals("Void"))
				{
					if(sql_ApplicationRiskId.toString().equals(api_ApplicationRiskId.toString()) && sql_RiskVesselId.toString().equals(api_RiskVesselId.toString()) && sql_RiskReference.toString().equals(api_RiskReference.toString()) && sql_MemberId.toString().equals(api_MemberId.toString()) && sql_Reference.toString().equals(api_Reference.toString()) && sql_OrganisationName.toString().toUpperCase().equals(api_OrganisationName.toString().toUpperCase()) && sql_ApplicationID.toString().equals(api_ApplicationID.toString()) && sql_ApplicationReference.toString().equals(api_ApplicationReference.toString()) && sql_Discriminator.toString().toUpperCase().equals(api_ApplicationType.toString().toUpperCase()) && sql_EmailAddress.toString().toUpperCase().equals(api_EmailAddress.toString().toUpperCase()) && sql_ImoNumber.toString().equals(api_ImoNumber.toString()) && sql_VesselName.toString().toUpperCase().equals(api_VesselName.toString().toUpperCase()) && sql_VesselType.toString().toUpperCase().equals(api_VesselType.toString().toUpperCase()) && sql_CallSign.toString().toUpperCase().equals(api_CallSign.toString().toUpperCase()) && sql_GrossTonnage.toString().equals(api_GrossTonnage.toString()) && sql_YearBuilt.toString().equals(api_YearBuilt.toString()) && sql_FlagCountryCode.toString().toUpperCase().equals(api_FlagCountryCode.toString().toUpperCase()) && sql_FlagCountryName.toString().toUpperCase().equals(api_FlagCountryName.toString().toUpperCase()) && sql_PortOfRegistryCode.toString().toUpperCase().equals(api_PortOfRegistryCode.toString().toUpperCase()) && sql_PortOfRegistryName.toString().toUpperCase().equals(api_PortOfRegistryName.toString().toUpperCase()) && sql_RiskCategoryName.toString().toUpperCase().equals(api_RiskCategoryName.toString().toUpperCase()) && sql_EngineHorsePower.toString().toUpperCase().equals(api_EngineHorsePower.toString().toUpperCase()) && sql_TrademarkEngineModelNumber.toString().toUpperCase().equals(api_TrademarkEngineModelNumber.toString().toUpperCase()))
					{
						compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskVesselId+","+api_RiskVesselId+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_Reference+","+api_Reference+","+sql_OrganisationName+","+api_OrganisationName+","+sql_ApplicationID+","+api_ApplicationID+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+"Test Case passed")
						log.info "Details are matching hence test case is passed"
						break;
					}
					else
					{
						compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskVesselId+","+api_RiskVesselId+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_Reference+","+api_Reference+","+sql_OrganisationName+","+api_OrganisationName+","+sql_ApplicationID+","+api_ApplicationID+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+"Test Case failed")
						log.info "Details are not matching hence test case is failed"
						break;
					}	
				}
			}
			else if(sql_PolicyStatus.toString().equals("Void"))
			{
				log.info sql_MemberId+","+"Test case should be failed as void policy details are displayed into API response which should not be displayed"
				compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskVesselId+","+api_RiskVesselId+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_Reference+","+api_Reference+","+sql_OrganisationName+","+api_OrganisationName+","+sql_ApplicationID+","+api_ApplicationID+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+"Test case should be failed as void policy details are displayed into API response which should not be displayed")
			}
		}
	}
	else
			{
				log.info "API response for member id : "+sql_MemberId+"is received as "+response
				apiWriter.println("API response for member id : "+sql_MemberId+"is received as "+response)
			}
	counter=counter+1
	log.info "Number of records verified are : "+counter
}
public String removeCommaAndBrackets(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************End of Script for Exclude Void Policies in Member By Member Id By Risk ************"]]></script></con:config></con:testStep><con:testStep type="restrequest" name="RisksByAppRiskId" id="56db70f0-1749-48a8-bda0-d6a227f6bfe4"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/risks/${#TestCase#appRiskId}" methodName="RisksByApplicationRiskId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RisksByAppRiskId" id="1f489ee0-a0bd-4659-a8b9-5451a5f096ea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/risks/179029</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Void_RiskByApplicationRiskId" id="1e9f1ebf-fff3-408a-892c-daa07c80a42b" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Exclude Void policies in Risks By Application Risk Id************"

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
				"""
				Use TOM
				SELECT
				DISTINCT
				TOP 200
				AR.Id as ApplicationRiskId, AR.Risk_Id as Id, R.Reference as RiskReference, AMA.MemberAssured_Id as MemberId, MA.Reference as MemberReference,
				P.OrganisationName as MemberName, AB.Id as ApplicationId, AB.Reference as ApplicationReference, AB.Discriminator as ApplicationType, [User].EmailAddress,
				AR.Risk_Id as VesselId, RV.ImoNumber, R.Name as VesselName, VT.Name as VesselType, RV.CallSign, Rv.GrossTonnage, RV.YearBuilt, con.ShortCode as FlagCountryCode, 
				con.Name as FlagCountryName, RP.ShortCode as PortOfRegistryCode, RP.Name as PortOfRegistryName, RST.Name as RiskCategoryName, 
				RV.EngineHorsePower, RV.TrademarkEngineModelNumber, RPS.Name as PolicyStatus
				from ApplicationRisk AR
				inner join ApplicationMemberAssured AMA on AMA.Id=AR.ApplicationMemberAssured_Id
				inner join ApplicationBase AB on AB.Id = AMA.Application_Id
				inner join MemberAssured MA on MA.Id = AMA.MemberAssured_Id
				inner join Risk R on R.Id = AR.Risk_Id
				inner join Party P on P.Id= MA.Party_Id
				join [user] on AB.Underwriter_Id = [User].Id
				join RiskVessel RV on RV.Id = R.Id
				join ref_VesselType VT on VT.Id=RV.Type_Id
				left join ref_Port RP on RP.Id = RV.PortOfRegistry_Id
				join ref_RiskSubType RST on RST.Id = RV.Category_Id
				left join ref_Country Con on Con.id = RV.Flag_Id
				left join ApplicationPolicyStatus APS on APS.Application_Id=AB.Id
				left join ref_PolicyStatus RPS on APS.PolicyStatus_Id=RPS.Id
				where RPS.Id=2
				order by 1 desc
				"""

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskByApplicationRiskId(ExcludeVoidPolicy).csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskByApplicationRiskId(ExcludeVoidPolicy).csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskByApplicationRiskId(ExcludeVoidPolicy).csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskByApplicationRiskId(ExcludeVoidPolicy)"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskByApplicationRiskId(ExcludeVoidPolicy)"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskByApplicationRiskId(ExcludeVoidPolicy)"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationRiskId"+","+"SQL_Id"+","+"SQL_RiskReference"+","+"SQL_MemberId"+","+"SQL_MemberReference"+","+"SQL_MemberName"+","+"SQL_ApplicationId"+","+"SQL_ApplicationReference"+","+"SQL_ApplicationType"+","+"SQL_EmailAddress"+","+"SQL_VesselId"+","+"SQL_ImoNumber"+","+"SQL_VesselName"+","+"SQL_VesselType"+","+"SQL_CallSign"+","+"SQL_GrossTonnage"+","+"SQL_YearBuilt"+","+"SQL_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"SQL_EngineHorsePower"+","+"SQL_TrademarkEngineModelNumber"+","+"SQL_PolicyStatus")
apiWriter.println("API_ApplicationRiskId"+","+"API_Id"+","+"API_RiskReference"+","+"API_MemberId"+","+"API_MemberReference"+","+"API_MemberName"+","+"API_ApplicationId"+","+"API_ApplicationReference"+","+"API_ApplicationType"+","+"API_EmailAddress"+","+"API_VesselId"+","+"API_ImoNumber"+","+"API_VesselName"+","+"API_VesselType"+","+"API_CallSign"+","+"API_GrossTonnage"+","+"API_YearBuilt"+","+"API_FlagCountryCode"+","+"API_FlagCountryName"+","+"API_PortOfRegistryCode"+","+"API_PortOfRegistryName"+","+"API_RiskCategoryName"+","+"API_EngineHorsePower"+","+"API_TrademarkEngineModelNumber")			
compareWriter.println("SQL_ApplicationRiskId"+","+"API_ApplicationRiskId"+","+"SQL_Id"+","+"API_Id"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_ApplicationType"+","+"API_ApplicationType"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_VesselId"+","+"API_VesselId"+","+"SQL_ImoNumber"+","+"API_ImoNumber"+","+"SQL_VesselName"+","+"API_VesselName"+","+"SQL_VesselType"+","+"API_VesselType"+","+"SQL_CallSign"+","+"API_CallSign"+","+"SQL_GrossTonnage"+","+"API_GrossTonnage"+","+"SQL_YearBuilt"+","+"API_YearBuilt"+","+"SQL_FlagCountryCode"+","+"API_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"API_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"API_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"API_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"API_RiskCategoryName"+","+"SQL_EngineHorsePower"+","+"API_EngineHorsePower"+","+"SQL_TrademarkEngineModelNumber"+","+"API_TrademarkEngineModelNumber"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter = 0;
String field=null

con.eachRow(sqlstmt)
{	
	row ->
		sql_ApplicationRiskId=row.ApplicationRiskId
		sql_Id=row.Id
		sql_RiskReference=row.RiskReference
		sql_MemberId=row.MemberId
		sql_MemberReference=row.MemberReference
		sql_MemberName=row.MemberName
		sql_MemberName=removeBracketsAndComma(sql_MemberName.toString())
		
		sql_ApplicationId=row.ApplicationId
		sql_ApplicationReference=row.ApplicationReference
		sql_ApplicationType=row.ApplicationType
		sql_EmailAddress=row.EmailAddress
		sql_VesselId=row.VesselId
		sql_ImoNumber=row.ImoNumber
		sql_VesselName=row.VesselName
		sql_VesselName=removeBracketsAndComma(sql_VesselName.toString())
		
		sql_VesselType=row.VesselType
		sql_CallSign=row.CallSign
		sql_GrossTonnage=row.GrossTonnage
		sql_YearBuilt=row.YearBuilt
		sql_FlagCountryCode=row.FlagCountryCode
		sql_FlagCountryName=row.FlagCountryName
		sql_FlagCountryName=removeBracketsAndComma( sql_FlagCountryName.toString())
		
		sql_PortOfRegistryCode=row.PortOfRegistryCode
		sql_PortOfRegistryName=row.PortOfRegistryName
		sql_PortOfRegistryName=removeBracketsAndComma(sql_PortOfRegistryName.toString())
		
		sql_RiskCategoryName=row.RiskCategoryName
		sql_EngineHorsePower=row.EngineHorsePower
		sql_TrademarkEngineModelNumber=row.TrademarkEngineModelNumber
		sql_PolicyStatus=row.PolicyStatus
		
		sqlWriter.println(sql_ApplicationRiskId+","+sql_Id+","+sql_RiskReference+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_EmailAddress+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+sql_PolicyStatus)
		log.info "SQL response is : "+sql_ApplicationRiskId+","+sql_Id+","+sql_RiskReference+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_EmailAddress+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+sql_PolicyStatus

		//Set the ApplicationRisk ID at test case level
		String appRiskId = sql_ApplicationRiskId
		testRunner.testCase.setPropertyValue("appRiskId", appRiskId)
		
		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)

		//Run the test step to get response
		testRunner.runTestStepByName('RisksByAppRiskId')
		String req='${RisksByAppRiskId#Response}'
		response=context.expand(req)
		//log.info "API Response received is :"+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["RisksByAppRiskId"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info("HTTP status code: " + httpStatusCode)
	
		String error = response
		if(httpStatusCode.equals("200"))
		{
			api_ApplicationRiskId=jsonRes.applicationRiskId
			api_ApplicationRiskId=removeBracketsAndComma(api_ApplicationRiskId.toString())
			
			api_Id=jsonRes.id
			api_Id=removeBracketsAndComma(api_Id.toString())
			
			api_RiskReference=jsonRes.reference
			api_RiskReference=removeBracketsAndComma(api_RiskReference.toString())
			
			api_MemberId=jsonRes.memberId
			api_MemberId=removeBracketsAndComma(api_MemberId.toString())
			
			api_MemberReference=jsonRes.memberReference
			api_MemberReference=removeBracketsAndComma(api_MemberReference.toString())
			
			api_MemberName=jsonRes.memberName
			api_MemberName=removeBracketsAndComma(api_MemberName.toString())
			
			api_ApplicationId=jsonRes.applicationId
			api_ApplicationId=removeBracketsAndComma(api_ApplicationId.toString())
			
			api_ApplicationReference=jsonRes.applicationReference
			api_ApplicationReference=removeBracketsAndComma(api_ApplicationReference.toString())
			
			api_ApplicationType=jsonRes.applicationType
			api_ApplicationType=removeBracketsAndComma(api_ApplicationType.toString())
			
			api_EmailAddress=jsonRes.applicationUnderwriterEmail
			api_EmailAddress=removeBracketsAndComma(api_EmailAddress.toString())
			
			api_VesselId=jsonRes.vessel.id
			api_VesselId=removeBracketsAndComma(api_VesselId.toString())
			
			api_ImoNumber=jsonRes.vessel.imoNumber
			api_ImoNumber=removeBracketsAndComma(api_ImoNumber.toString())
			
			api_VesselName=jsonRes.vessel.vesselName
			api_VesselName=removeBracketsAndComma(api_VesselName.toString())
			
			api_VesselType=jsonRes.vessel.vesselType
			api_VesselType=removeBracketsAndComma(api_VesselType.toString())
			
			api_CallSign=jsonRes.vessel.callSign
			api_CallSign=removeBracketsAndComma(api_CallSign.toString())
			
			api_GrossTonnage=jsonRes.vessel.grossTonnage
			api_GrossTonnage=removeBracketsAndComma(api_GrossTonnage.toString())
			
			api_YearBuilt=jsonRes.vessel.yearBuilt
			api_YearBuilt=removeBracketsAndComma(api_YearBuilt.toString())
			
			api_FlagCountryCode=jsonRes.vessel.flagCountryCode
			api_FlagCountryCode=removeBracketsAndComma(api_FlagCountryCode.toString())
			
			api_FlagCountryName=jsonRes.vessel.flagCountryName
			api_FlagCountryName=removeBracketsAndComma(api_FlagCountryName.toString())
			
			api_PortOfRegistryCode=jsonRes.vessel.portOfRegistryCode
			api_PortOfRegistryCode=removeBracketsAndComma(api_PortOfRegistryCode.toString())
			
			api_PortOfRegistryName=jsonRes.vessel.portOfRegistryName
			api_PortOfRegistryName=removeBracketsAndComma(api_PortOfRegistryName.toString())
			
			api_RiskCategoryName=jsonRes.vessel.riskCategoryName
			api_RiskCategoryName=removeBracketsAndComma(api_RiskCategoryName.toString())
			
			api_EngineHorsePower=jsonRes.vessel.engineHorsePower
			api_EngineHorsePower=removeBracketsAndComma(api_EngineHorsePower.toString())
			
			api_TrademarkEngineModelNumber=jsonRes.vessel.trademarkAndEngineModel
			api_TrademarkEngineModelNumber=removeBracketsAndComma(api_TrademarkEngineModelNumber.toString())
			
			apiWriter.println(api_ApplicationRiskId+","+api_Id+","+api_RiskReference+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_VesselId+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_GrossTonnage+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_EngineHorsePower+","+api_TrademarkEngineModelNumber)
			log.info "API response received as : "+api_ApplicationRiskId+","+api_Id+","+api_RiskReference+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_VesselId+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_GrossTonnage+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_EngineHorsePower+","+api_TrademarkEngineModelNumber		
			
			if(sql_PolicyStatus.toString().equals("Void"))
			{	
				log.info sql_ApplicationId+","+"Test case should be failed as void policy details are displayed into API response which should not be displayed"
				compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_Id+","+api_Id+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+"Test Case Failed- void policy details should not be displayed")				
			}
			else if(!sql_PolicyStatus.toString().equals("Void"))
			{
				if(api_ApplicationRiskId.toString().equals(sql_ApplicationRiskId.toString()) && api_Id.toString().equals(sql_Id.toString()) && api_RiskReference.toString().equals(sql_RiskReference.toString()) && api_MemberId.toString().equals(sql_MemberId.toString()) && api_MemberReference.toString().equals(sql_MemberReference.toString()) && api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && api_ApplicationId.toString().equals(sql_ApplicationId.toString()) && api_ApplicationReference.toString().equals(sql_ApplicationReference.toString()) && api_ApplicationType.toString().toUpperCase().equals(sql_ApplicationType.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && api_VesselId.toString().equals(sql_VesselId.toString()) && api_ImoNumber.toString().equals(sql_ImoNumber.toString()) && api_VesselName.toString().toUpperCase().equals(sql_VesselName.toString().toUpperCase()) && api_VesselType.toString().toUpperCase().equals(sql_VesselType.toString().toUpperCase()) && api_CallSign.toString().equals(sql_CallSign.toString()) && api_GrossTonnage.toString().equals(sql_GrossTonnage.toString()) && api_YearBuilt.toString().equals(sql_YearBuilt.toString()) && api_FlagCountryCode.toString().toUpperCase().equals(sql_FlagCountryCode.toString().toUpperCase()) && api_FlagCountryName.toString().toUpperCase().equals(sql_FlagCountryName.toString().toUpperCase()) && api_PortOfRegistryCode.toString().toUpperCase().equals(sql_PortOfRegistryCode.toString().toUpperCase()) && api_PortOfRegistryName.toString().toUpperCase().equals(sql_PortOfRegistryName.toString().toUpperCase()) && api_RiskCategoryName.toString().toUpperCase().equals(sql_RiskCategoryName.toString().toUpperCase()) && api_EngineHorsePower.toString().equals(sql_EngineHorsePower.toString()) && api_TrademarkEngineModelNumber.toString().equals(sql_TrademarkEngineModelNumber.toString()))
				{
					compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_Id+","+api_Id+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+"Test Case is passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{	
					compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_Id+","+api_Id+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+"Test Case is failed")
					log.info "Details are not matching hence test case is failed"
				}	
			}
		}
		else
		{
			apiWriter.println("Test Case is failed for "+","+sql_ApplicationRiskId+" because : "+response)
			log.info "Test Case is failed for "+","+sql_ApplicationRiskId+" because : "+response
		}
		if(sql_PolicyStatus.toString().equals("Void") && httpStatusCode.equals("404"))
		{
			log.info "For Void policy / Abandoned quote- valid error response code is displayed hence test case is passed"
			compareWriter.println(sql_ApplicationRiskId+","+"For Void policy / Abandoned quote- valid error response code is displayed hence test case is passed"+","+response)
		}
		else
		{
			log.info "For Void policy / Abandoned quote- invalid error response code is displayed hence test case is failed"
			compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_Id+","+api_Id+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+"For Void policy / Abandoned quote- invalid error response code is displayed hence test case is failed")
		}
		counter=counter+1;
		log.info "Record number "+counter+" is checked."
}

public String removeBracketsAndComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if (field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString = newDateTimeString.replace(":","-")
log.info "************Execution Finished at "+newDateTimeString+"************"
log.info "************Execution Finished for Exclude Void policies in Risk By Application Risk Id************"]]></script></con:config></con:testStep><con:testStep type="restrequest" name="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse" id="1647570f-2225-4656-bf23-d71e5437b873"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/risks/" methodName="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse" id="8ae0a2b8-f8a7-4cb8-9dc9-0ec35ea1575c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/risks/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="risktype" value="vessel"/>
  <con:entry key="filterValue" value="SurajRisk"/>
  <con:entry key="excludeVessel" value="false"/>
  <con:entry key="filterType" value="vesselName"/>
</con:parameters><con:parameterOrder><con:entry>filterType</con:entry><con:entry>filterValue</con:entry><con:entry>risktype</con:entry><con:entry>excludeVessel</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Void_RiskWithMultipleParameters" id="31e8fbfb-bc01-4a09-b59e-305ae5f770cf" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Risk With MultipleParameters for Exclude Void Policies in Risk with Multiple Parameters like Filter Type as VesselName and Risk Type as Vessel Exclude Vessel False************"

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
		"""
		USE TOM
		SELECT 
		DISTINCT
		TOP 200
		ar.Id as ApplicationRiskId, r.Id as RiskId, r.Reference as RiskReference, ma.Id as MemberId,ma.Reference as MemberReference, p.OrganisationName,
		ab.Id as ApplicationId, ab.Reference as ApplicationReference, ab.Discriminator as ApplicationType, cc.Name as ApplicationProductType, 
		[user].EmailAddress as ApplicationUnderwriterEmail, l.Id as LimitId, c.ShortCode as CoverShortName, l.Name as LimitName, rc.ShortCode as CurrencyCode,
		RPS.Name as PolicyStatus, acvltv.ValueDecimal as Amount, tc.IsPrimary,
		case when tc.IsPrimary = 1 then 'True' 	
		when tc.IsPrimary = 0 then 'False' 
		else NULL end as isThePrimaryCoverLimit,
		Case when ab.Discriminator = 'Quote' then (select MIN(tq.Id)
		from ApplicationBase appb 
		join [Transaction] tq on tq.QuoteBase_Id = appb.Id 
		where appb.Id = ab.Id
		group by appb.id) 
		When ab.Discriminator = 'Policy' then (select MIN(tp.Id)
		from ApplicationBase appb 
		join [Transaction] tp on tp.Policy_Id = appb.Id 
		where appb.Id = ab.Id
		group by appb.id)  end as ApplicationFirstTransaction,
		ab.PolicyStart as PolicyStartDate,
		ab.PolicyEnd as PolicyEndDate,
		case when ab.Discriminator = 'Renewal Quote' then 'True'
		else 'False' end as IsRenewalApplication,
		rv.Id as VesselId, rv.ImoNumber, r.Name as VesselName, rvt.Name as VesselType, rv.CallSign, r.Entered as EnteredDate, rv.GrossTonnage, rv.PassengerCarryingCapacity,
		rv.YearBuilt,con.ShortCode as FlagCountryCode, con.Name as FlagCountryName, rp.ShortCode as PortOfRegistryCode, rp.Name as PortOfRegistryName, 
		rst.Name as RiskCategoryName,rv.TrademarkEngineModelNumber, rvm.Name as VesselMake, rv.EngineHorsePower, rv.TenderSerialNumber,
		rv.OutboardMotorSerialNumber as MotorSerialNumber 
		from ApplicationBase ab
		join ApplicationMemberAssured ama on ab.Id = ama.Application_Id
		join MemberAssured ma on ma.id = ama.MemberAssured_Id
		join Party p on p.id = ma.Party_Id
		join ApplicationRisk ar on ar.ApplicationMemberAssured_Id = ama.id 
		join Risk r on r.id = ar.Risk_Id
		join RiskVessel rv on rv.id = r.id
		join ref_VesselType rvt on rvt.id = rv.[Type_Id]
		LEFT join ApplicationCover AC on AB.Id = AC.Application_Id 
		Left Join TemplateCover TC on AC.TemplateCover_Id = TC.Id 
		AND TC.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0 
		Left Join Cover C on TC.Cover_Id = C.Id 
		AND C.Cover_PhysicalDeletionAttemptPrevented = 0
		left join CoverCategory cc on cc.id = c.CoverCategory_Id 
		LEFT Join [User] on AB.Underwriter_Id = [User].Id 
		left join ApplicationCoverVariation acv on acv.ApplicationCover_Id = ac.id
		left join ApplicationCoverVariationLimit acvl on acvl.CoverVariation_Id = acv.id
		left join ApplicationCoverVariationLimitTagValue acvltv on acvltv.ApplicationCoverVariationLimit_Id = acvl.id
		left join TemplateCoverLimit tcl on tcl.id = acvl.TemplateCoverLimit_Id
		left join CoverLimit cl on cl.id = tcl.CoverLimit_Id
		left join Limit l on l.id = cl.Limit_Id
		left join ref_Currency rc on rc.id = acvltv.Currency_Id
		left join ref_Country con on con.id = rv.Flag_Id
		left join ref_Port rp on rp.id = rv.PortOfRegistry_Id
		left join TemplatePermittedRiskSubType tprst on tprst.Template_Id = tc.Template_Id
		left join ref_RiskSubType rst on rst.id = tprst.RiskSubType_Id
		left join ref_VesselMake rvm on rvm.id = rv.VesselMake_Id
		left join ApplicationPolicyStatus APS on APS.Application_Id=AB.Id
		left join ref_PolicyStatus RPS on APS.PolicyStatus_Id=RPS.Id
		where r.Name like '%Risk%' and ab.discriminator = 'Policy'
		--and RPS.id=1
		--and RPS.id=2
		"""
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselFalse(ExcludeVoidPolicies).csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselFalse(ExcludeVoidPolicies).csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselFalse(ExcludeVoidPolicies).csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselFalse(ExcludeVoidPolicies)"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselFalse(ExcludeVoidPolicies)"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselFalse(ExcludeVoidPolicies)"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()
				
sqlWriter.println("SQL_ApplicationRiskId"+","+"SQL_RiskId"+","+"SQL_RiskReference"+","+"SQL_MemberId"+","+"SQL_MemberReference"+","+"SQL_OrganisationName"+","+"SQL_ApplicationId"+","+"SQL_ApplicationReference"+","+"SQL_ApplicationType"+","+"SQL_ApplicationProductType"+","+"SQL_ApplicationUnderwriterEmail"+","+"SQL_LimitId"+","+"SQL_CoverShortName"+","+"SQL_LimitName"+","+"SQL_CurrencyCode"+","+"SQL_Amount"+","+"SQL_IsPrimary"+","+"SQL_isThePrimaryCoverLimit"+","+"SQL_ApplicationFirstTransaction"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_IsRenewalApplication"+","+"SQL_VesselId"+","+"SQL_ImoNumber"+","+"SQL_VesselName"+","+"SQL_VesselType"+","+"SQL_CallSign"+","+"SQL_EnteredDate"+","+"SQL_GrossTonnage"+","+"SQL_PassengerCarryingCapacity"+","+"SQL_YearBuilt"+","+"SQL_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"SQL_TrademarkEngineModelNumber"+","+"SQL_VesselMake"+","+"SQL_EngineHorsePower"+","+"SQL_TenderSerialNumber"+","+"SQL_MotorSerialNumber"+","+"SQL_PolicyStatus")
apiWriter.println("API_ApplicationRiskId"+","+"API_RiskId"+","+"API_RiskReference"+","+"API_MemberId"+","+"API_MemberReference"+","+"API_OrganisationName"+","+"API_ApplicationId"+","+"API_ApplicationReference"+","+"API_ApplicationType"+","+"API_ApplicationProductType"+","+"API_ApplicationUnderwriterEmail"+","+"API_LimitId"+","+"API_CoverShortName"+","+"API_LimitName"+","+"API_CurrencyCode"+","+"API_Amount"+","+"API_isThePrimaryCoverLimit"+","+"API_ApplicationFirstTransaction"+","+"API_PolicyStartDate"+","+"API_PolicyEndDate"+","+"API_IsRenewalApplication"+","+"API_VesselId"+","+"API_ImoNumber"+","+"API_VesselName"+","+"API_VesselType"+","+"API_CallSign"+","+"API_EnteredDate"+","+"API_GrossTonnage"+","+"API_PassengerCarryingCapacity"+","+"API_YearBuilt"+","+"API_FlagCountryCode"+","+"API_FlagCountryName"+","+"API_PortOfRegistryCode"+","+"API_PortOfRegistryName"+","+"API_RiskCategoryName"+","+"API_TrademarkEngineModelNumber"+","+"API_VesselMake"+","+"API_EngineHorsePower"+","+"API_TenderSerialNumber"+","+"API_MotorSerialNumber")
compareWriter.println("SQL_ApplicationRiskId"+","+"API_ApplicationRiskId"+","+"SQL_RiskId"+","+"API_RiskId"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_OrganisationName"+","+"API_OrganisationName"+","+"SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_ApplicationType"+","+"API_ApplicationType"+","+"SQL_ApplicationProductType"+","+"API_ApplicationProductType"+","+"SQL_ApplicationUnderwriterEmail"+","+"API_ApplicationUnderwriterEmail"+","+"SQL_LimitId"+","+"API_LimitId"+","+"SQL_CoverShortName"+","+"API_CoverShortName"+","+"SQL_LimitName"+","+"API_LimitName"+","+"SQL_CurrencyCode"+","+"API_CurrencyCode"+","+"SQL_Amount"+","+"API_Amount"+","+"SQL_IsPrimary"+","+"SQL_isThePrimaryCoverLimit"+","+"API_isThePrimaryCoverLimit"+","+"SQL_ApplicationFirstTransaction"+","+"API_ApplicationFirstTransaction"+","+"SQL_PolicyStartDate"+","+"API_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"API_PolicyEndDate"+","+"SQL_IsRenewalApplication"+","+"API_IsRenewalApplication"+","+"SQL_VesselId"+","+"API_VesselId"+","+"SQL_ImoNumber"+","+"API_ImoNumber"+","+"SQL_VesselName"+","+"API_VesselName"+","+"SQL_VesselType"+","+"API_VesselType"+","+"SQL_CallSign"+","+"API_CallSign"+","+"SQL_EnteredDate"+","+"API_EnteredDate"+","+"SQL_GrossTonnage"+","+"API_GrossTonnage"+","+"SQL_PassengerCarryingCapacity"+","+"API_PassengerCarryingCapacity"+","+"SQL_YearBuilt"+","+"API_YearBuilt"+","+"SQL_FlagCountryCode"+","+"API_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"API_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"API_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"API_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"API_RiskCategoryName"+","+"SQL_TrademarkEngineModelNumber"+","+"API_TrademarkEngineModelNumber"+","+"SQL_VesselMake"+","+"API_VesselMake"+","+"SQL_EngineHorsePower"+","+"API_EngineHorsePower"+","+"SQL_TenderSerialNumber"+","+"API_TenderSerialNumber"+","+"SQL_MotorSerialNumber"+","+"API_MotorSerialNumber"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0
String field=null

def api_ApplicationRiskId=null
def api_RiskId=null
def api_RiskReference=null
def api_MemberId=null
def api_MemberReference=null
def api_OrganisationName=null
def api_ApplicationId=null
def api_ApplicationReference=null
def api_ApplicationType=null
def api_ApplicationProductType=null
def api_ApplicationUnderwriterEmail=null
def api_LimitId=null
def api_CoverShortName=null
def api_LimitName=null
def api_CurrencyCode=null
def api_Amount=null
def api_isThePrimaryCoverLimit=null
def api_ApplicationFirstTransaction=null
def api_PolicyStartDate=null
def api_PolicyEndDate=null
def api_IsRenewalApplication=null
def api_VesselId=null
def api_ImoNumber=null
def api_VesselName=null
def api_VesselType=null
def api_CallSign=null
def api_EnteredDate=null
def api_GrossTonnage=null
def api_PassengerCarryingCapacity=null
def api_YearBuilt=null
def api_FlagCountryCode=null
def api_FlagCountryName=null
def api_PortOfRegistryCode=null
def api_PortOfRegistryName=null
def api_RiskCategoryName=null
def api_TrademarkEngineModelNumber=null
def api_VesselMake=null
def api_EngineHorsePower=null
def api_TenderSerialNumber=null
def api_MotorSerialNumber=null


con.eachRow(sqlstmt)
{	
	row -> 
		sql_ApplicationRiskId=row.ApplicationRiskId
		sql_ApplicationRiskId=removeBracketAndComma(sql_ApplicationRiskId.toString())
		
		sql_RiskId=row.RiskId
		sql_RiskId=removeBracketAndComma(sql_RiskId.toString())
		
		sql_RiskReference=row.RiskReference
		sql_RiskReference=removeBracketAndComma(sql_RiskReference.toString())
		
		sql_MemberId=row.MemberId
		sql_MemberId=removeBracketAndComma(sql_MemberId.toString())
		
		sql_MemberReference=row.MemberReference
		sql_MemberReference=removeBracketAndComma(sql_MemberReference.toString())
		
		sql_OrganisationName=row.OrganisationName
		sql_OrganisationName=removeBracketAndComma(sql_OrganisationName.toString())
		
		sql_ApplicationId=row.ApplicationId
		sql_ApplicationId=removeBracketAndComma(sql_ApplicationId.toString())
		
		sql_ApplicationReference=row.ApplicationReference
		sql_ApplicationReference=removeBracketAndComma(sql_ApplicationReference.toString())
		
		sql_ApplicationType=row.ApplicationType
		sql_ApplicationType=removeBracketAndComma(sql_ApplicationType.toString())
		
		sql_ApplicationProductType=row.ApplicationProductType
		sql_ApplicationProductType=removeBracketAndComma(sql_ApplicationProductType.toString())
		
		sql_ApplicationUnderwriterEmail=row.ApplicationUnderwriterEmail
		sql_ApplicationUnderwriterEmail=removeBracketAndComma(sql_ApplicationUnderwriterEmail.toString())
		
		sql_LimitId=row.LimitId
		sql_LimitId=removeBracketAndComma(sql_LimitId.toString())
		
		sql_CoverShortName=row.CoverShortName
		sql_CoverShortName=removeBracketAndComma(sql_CoverShortName.toString())
		
		sql_LimitName=row.LimitName
		sql_LimitName=removeBracketAndComma(sql_LimitName.toString())
		
		sql_CurrencyCode=row.CurrencyCode
		sql_CurrencyCode=removeBracketAndComma(sql_CurrencyCode.toString())
		
		sql_Amount=row.Amount
		sql_Amount=removeBracketAndComma(sql_Amount.toString())
		
		sql_IsPrimary=row.IsPrimary
		sql_IsPrimary=removeBracketAndComma(sql_IsPrimary.toString())
		
		sql_isThePrimaryCoverLimit=row.isThePrimaryCoverLimit
		sql_isThePrimaryCoverLimit=removeBracketAndComma(sql_MemberId.toString())
		
		sql_ApplicationFirstTransaction=row.ApplicationFirstTransaction
		sql_ApplicationFirstTransaction=removeBracketAndComma(sql_isThePrimaryCoverLimit.toString())
		
		sql_PolicyStartDate=row.PolicyStartDate
		sql_PolicyStartDate=removeBracketAndComma(sql_PolicyStartDate.toString())
		
		sql_PolicyEndDate=row.PolicyEndDate
		sql_PolicyEndDate=removeBracketAndComma(sql_PolicyEndDate.toString())
		
		sql_IsRenewalApplication=row.IsRenewalApplication
		sql_IsRenewalApplication=removeBracketAndComma(sql_IsRenewalApplication.toString())
		
		sql_VesselId=row.VesselId
		sql_VesselId=removeBracketAndComma(sql_VesselId.toString())
		
		sql_ImoNumber=row.ImoNumber
		sql_ImoNumber=removeBracketAndComma(sql_ImoNumber.toString())
		
		sql_VesselName=row.VesselName
		sql_VesselName=removeBracketAndComma(sql_VesselName.toString())
		
		sql_VesselType=row.VesselType
		sql_VesselType=removeBracketAndComma(sql_VesselType.toString())
		
		sql_CallSign=row.CallSign
		sql_CallSign=removeBracketAndComma(sql_CallSign.toString())
		
		sql_EnteredDate=row.EnteredDate
		sql_EnteredDate=removeBracketAndComma(sql_EnteredDate.toString())
		
		sql_GrossTonnage=row.GrossTonnage
		sql_GrossTonnage=removeBracketAndComma(sql_GrossTonnage.toString())
		
		sql_PassengerCarryingCapacity=row.PassengerCarryingCapacity
		sql_PassengerCarryingCapacity=removeBracketAndComma(sql_PassengerCarryingCapacity.toString())
		
		sql_YearBuilt=row.YearBuilt
		sql_YearBuilt=removeBracketAndComma(sql_YearBuilt.toString())
		
		sql_FlagCountryCode=row.FlagCountryCode
		sql_FlagCountryCode=removeBracketAndComma(sql_FlagCountryCode.toString())
		
		sql_FlagCountryName=row.FlagCountryName
		sql_FlagCountryName=removeBracketAndComma(sql_FlagCountryName.toString())
		
		sql_PortOfRegistryCode=row.PortOfRegistryCode
		sql_PortOfRegistryCode=removeBracketAndComma(sql_PortOfRegistryCode.toString())
		
		sql_PortOfRegistryName=row.PortOfRegistryName
		sql_PortOfRegistryName=removeBracketAndComma(sql_PortOfRegistryName.toString())
		
		sql_RiskCategoryName=row.RiskCategoryName
		sql_RiskCategoryName=removeBracketAndComma(sql_RiskCategoryName.toString())
		
		sql_TrademarkEngineModelNumber=row.TrademarkEngineModelNumber
		sql_TrademarkEngineModelNumber=removeBracketAndComma(sql_TrademarkEngineModelNumber.toString())
		
		sql_VesselMake=row.VesselMake
		sql_VesselMake=removeBracketAndComma(sql_VesselMake.toString())
		
		sql_EngineHorsePower=row.EngineHorsePower
		sql_EngineHorsePower=removeBracketAndComma(sql_EngineHorsePower.toString())
		
		sql_TenderSerialNumber=row.TenderSerialNumber
		sql_TenderSerialNumber=removeBracketAndComma(sql_TenderSerialNumber.toString())
		
		sql_MotorSerialNumber=row.MotorSerialNumber
		sql_MotorSerialNumber=removeBracketAndComma(sql_MotorSerialNumber.toString())

		sql_PolicyStatus=row.PolicyStatus
		
		sqlWriter.println(sql_ApplicationRiskId+","+sql_RiskId+","+sql_RiskReference+","+sql_MemberId+","+sql_MemberReference+","+sql_OrganisationName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+sql_LimitId+","+sql_CoverShortName+","+sql_LimitName+","+sql_CurrencyCode+","+sql_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_EnteredDate+","+sql_GrossTonnage+","+sql_PassengerCarryingCapacity+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+sql_VesselMake+","+sql_EngineHorsePower+","+sql_TenderSerialNumber+","+sql_MotorSerialNumber+","+sql_PolicyStatus)
		log.info "SQL response is : "+sql_ApplicationRiskId+","+sql_RiskId+","+sql_RiskReference+","+sql_MemberId+","+sql_MemberReference+","+sql_OrganisationName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+sql_LimitId+","+sql_CoverShortName+","+sql_LimitName+","+sql_CurrencyCode+","+sql_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_EnteredDate+","+sql_GrossTonnage+","+sql_PassengerCarryingCapacity+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+sql_VesselMake+","+sql_EngineHorsePower+","+sql_TenderSerialNumber+","+sql_MotorSerialNumber+","+sql_PolicyStatus

		//Set the filterType at test case level
		String filterType = "vesselName"
		testRunner.testCase.setPropertyValue("filterType",filterType)
		//Set the FilietValue at test case level
		String filterValue = "Risk"
		testRunner.testCase.setPropertyValue("filterValue",filterValue)
		//Set the riskType at test case level
		String risktype = "vessel"
		testRunner.testCase.setPropertyValue("risktype",risktype)
		//Set the excludeVessel at test case level
		String excludeVessel = "false"
		testRunner.testCase.setPropertyValue("excludeVessel",excludeVessel)
		
		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
	
		//Run the test step to get response
		testRunner.runTestStepByName("FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse")
		String req='${FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse#Response}'
		response=context.expand(req)
		log.info "API Response received as : "+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info("HTTP status code: " + httpStatusCode)
	
		String error = response
		if(httpStatusCode.equals("200"))
		{
			
			int recordCount = jsonRes.totalRecords
			for (int i=0; i<recordCount; i++)
			{
				newId = jsonRes.results.applicationRiskId[i]
				if(sql_ApplicationRiskId.toString().equals(newId.toString()))
				{
					api_ApplicationRiskId=jsonRes.results.applicationRiskId[i]
					api_ApplicationRiskId=removeBracketAndComma(api_ApplicationRiskId.toString())
					
					api_RiskId=jsonRes.results.id[i]
					api_RiskId=removeBracketAndComma(api_RiskId.toString())
					
					api_RiskReference=jsonRes.results.reference[i]
					api_RiskReference=removeBracketAndComma(api_RiskReference.toString())
					
					api_MemberId=jsonRes.results.memberId[i]
					api_MemberId=removeBracketAndComma(api_MemberId.toString())
					
					api_MemberReference=jsonRes.results.memberReference[i]
					api_MemberReference=removeBracketAndComma(api_MemberReference.toString())
					
					api_OrganisationName=jsonRes.results.memberName[i]
					api_OrganisationName=removeBracketAndComma(api_OrganisationName.toString())
					
					api_ApplicationId=jsonRes.results.applicationId[i]
					api_ApplicationId=removeBracketAndComma(api_ApplicationId.toString())
					
					api_ApplicationReference=jsonRes.results.applicationReference[i]
					api_ApplicationReference=removeBracketAndComma(api_ApplicationReference.toString())
					
					api_ApplicationType=jsonRes.results.applicationType[i]
					api_ApplicationType=removeBracketAndComma(api_ApplicationType.toString())
					
					api_ApplicationProductType=jsonRes.results.applicationProductType[i]
					api_ApplicationProductType=removeBracketAndComma(api_ApplicationProductType.toString())
					
					api_ApplicationUnderwriterEmail=jsonRes.results.applicationUnderwriterEmail[i]
					api_ApplicationUnderwriterEmail=removeBracketAndComma(api_ApplicationUnderwriterEmail.toString())
					
					api_LimitId=jsonRes.results.applicationCoverLimits.id[i]
					api_LimitId=removeBracketAndComma(api_LimitId.toString())
					
					api_CoverShortName=jsonRes.results.applicationCoverLimits.coverShortName[i]
					api_CoverShortName=removeBracketAndComma(api_CoverShortName.toString())
					
					api_LimitName=jsonRes.results.applicationCoverLimits.limitName[i]
					api_LimitName=removeBracketAndComma(api_LimitName.toString())
					
					api_CurrencyCode=jsonRes.results.applicationCoverLimits.currencyCode[i]
					api_CurrencyCode=removeBracketAndComma(api_CurrencyCode.toString())
					
					api_Amount=jsonRes.results.applicationCoverLimits.amount[i]
					api_Amount=removeBracketAndComma(api_Amount.toString())
					
					api_isThePrimaryCoverLimit=jsonRes.results.applicationCoverLimits.isThePrimaryCoverLimit[i]
					api_isThePrimaryCoverLimit=removeBracketAndComma(api_isThePrimaryCoverLimit.toString())
					
					api_ApplicationFirstTransaction=jsonRes.results.applicationFirstTransaction[i]
					api_ApplicationFirstTransaction=removeBracketAndComma(api_ApplicationFirstTransaction.toString())
					
					api_PolicyStartDate=jsonRes.results.policyStartDate[i]
					api_PolicyStartDate=removeBracketAndComma(api_PolicyStartDate.toString())
					
					api_PolicyEndDate=jsonRes.results.policyEndDate[i]
					api_PolicyEndDate=removeBracketAndComma(api_PolicyEndDate.toString())
					
					api_IsRenewalApplication=jsonRes.results.isRenewalApplication[i]
					api_IsRenewalApplication=removeBracketAndComma(api_IsRenewalApplication.toString())
					
					api_VesselId=jsonRes.results.vessel.id[i]
					api_VesselId=removeBracketAndComma(api_VesselId.toString())
					
					api_ImoNumber=jsonRes.results.vessel.imoNumber[i]
					api_ImoNumber=removeBracketAndComma(api_ImoNumber.toString())
					
					api_VesselName=jsonRes.results.vessel.vesselName[i]
					api_VesselName=removeBracketAndComma(api_VesselName.toString())
					
					api_VesselType=jsonRes.results.vessel.vesselType[i]
					api_VesselType=removeBracketAndComma(api_VesselType.toString())
					
					api_CallSign=jsonRes.results.vessel.callSign[i]
					api_CallSign=removeBracketAndComma(api_CallSign.toString())
					
					api_EnteredDate=jsonRes.results.vessel.enteredDate[i]
					api_EnteredDate=removeBracketAndComma(api_EnteredDate.toString())
					
					api_GrossTonnage=jsonRes.results.vessel.grossTonnage[i]
					api_GrossTonnage=removeBracketAndComma(api_GrossTonnage.toString())
					
					api_PassengerCarryingCapacity=jsonRes.results.vessel.noOfPassengers[i]
					api_PassengerCarryingCapacity=removeBracketAndComma(api_PassengerCarryingCapacity.toString())
					
					api_YearBuilt=jsonRes.results.vessel.yearBuilt[i]
					api_YearBuilt=removeBracketAndComma(api_YearBuilt.toString())
					
					api_FlagCountryCode=jsonRes.results.vessel.flagCountryCode[i]
					api_FlagCountryCode=removeBracketAndComma(api_FlagCountryCode.toString())
					
					api_FlagCountryName=jsonRes.results.vessel.flagCountryName[i]
					api_FlagCountryName=removeBracketAndComma(api_FlagCountryName.toString())
					
					api_PortOfRegistryCode=jsonRes.results.vessel.portOfRegistryCode[i]
					api_PortOfRegistryCode=removeBracketAndComma(api_PortOfRegistryCode.toString())
					
					api_PortOfRegistryName=jsonRes.results.vessel.portOfRegistryName[i]
					api_PortOfRegistryName=removeBracketAndComma(api_PortOfRegistryName.toString())
					
					api_RiskCategoryName=jsonRes.results.vessel.riskCategoryName[i]
					api_RiskCategoryName=removeBracketAndComma(api_RiskCategoryName.toString())
					
					api_TrademarkEngineModelNumber=jsonRes.results.vessel.trademarkAndEngineModel[i]
					api_TrademarkEngineModelNumber=removeBracketAndComma(api_TrademarkEngineModelNumber.toString())
					
					api_VesselMake=jsonRes.results.vessel.vesselMake[i]
					api_VesselMake=removeBracketAndComma(api_VesselMake.toString())
					
					api_EngineHorsePower=jsonRes.results.vessel.engineHorsePower[i]
					api_EngineHorsePower=removeBracketAndComma(api_EngineHorsePower.toString())
					
					api_TenderSerialNumber=jsonRes.results.vessel.tenderSerialNumbers[i]
					api_TenderSerialNumber=removeBracketAndComma(api_TenderSerialNumber.toString())
					
					api_MotorSerialNumber=jsonRes.results.vessel.motorSerialNumbers[i]
					api_MotorSerialNumber=removeBracketAndComma(api_MotorSerialNumber.toString())
		
					apiWriter.println(api_ApplicationRiskId+","+api_RiskId+","+api_RiskReference+","+api_MemberId+","+api_MemberReference+","+api_OrganisationName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_ApplicationProductType+","+api_ApplicationUnderwriterEmail+","+api_LimitId+","+api_CoverShortName+","+api_LimitName+","+api_CurrencyCode+","+api_Amount+","+api_isThePrimaryCoverLimit+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_VesselId+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_EnteredDate+","+api_GrossTonnage+","+api_PassengerCarryingCapacity+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_TrademarkEngineModelNumber+","+api_VesselMake+","+api_EngineHorsePower+","+api_TenderSerialNumber+","+api_MotorSerialNumber)
					log.info "API response received : "+api_ApplicationRiskId+","+api_RiskId+","+api_RiskReference+","+api_MemberId+","+api_MemberReference+","+api_OrganisationName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_ApplicationProductType+","+api_ApplicationUnderwriterEmail+","+api_LimitId+","+api_CoverShortName+","+api_LimitName+","+api_CurrencyCode+","+api_Amount+","+api_isThePrimaryCoverLimit+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_VesselId+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_EnteredDate+","+api_GrossTonnage+","+api_PassengerCarryingCapacity+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_TrademarkEngineModelNumber+","+api_VesselMake+","+api_EngineHorsePower+","+api_TenderSerialNumber+","+api_MotorSerialNumber

					if(sql_ApplicationType.toString().equals("Policy") && sql_PolicyStatus.toString().equals("Void"))
					{	
						log.info sql_ApplicationId+","+"Test case should be failed as void policy details are displayed into API response which should not be displayed"
						compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskId+","+api_RiskId+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_OrganisationName+","+api_OrganisationName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_ApplicationProductType+","+api_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+api_ApplicationUnderwriterEmail+","+sql_LimitId+","+api_LimitId+","+sql_CoverShortName+","+api_CoverShortName+","+sql_LimitName+","+api_LimitName+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_Amount+","+api_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+api_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+api_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_IsRenewalApplication+","+api_IsRenewalApplication+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_EnteredDate+","+api_EnteredDate+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_PassengerCarryingCapacity+","+api_PassengerCarryingCapacity+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+sql_VesselMake+","+api_VesselMake+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TenderSerialNumber+","+api_TenderSerialNumber+","+sql_MotorSerialNumber+","+api_MotorSerialNumber+","+"Test Case Failed, void policy details should not be displayed")				
					}
					else if(!sql_PolicyStatus.toString().equals("Void"))
					{
						if(sql_ApplicationRiskId.toString().equals(api_ApplicationRiskId.toString()) && sql_RiskId.toString().equals(api_RiskId.toString()) && sql_RiskReference.toString().equals(api_RiskReference.toString()) && sql_MemberId.toString().equals(api_MemberId.toString()) && sql_MemberReference.toString().equals(api_MemberReference.toString()) && sql_OrganisationName.toString().toUpperCase().equals(api_OrganisationName.toString().toUpperCase()) && sql_ApplicationId.toString().equals(api_ApplicationId.toString()) && sql_ApplicationReference.toString().equals(api_ApplicationReference.toString()) && sql_ApplicationType.toString().toUpperCase().equals(api_ApplicationType.toString().toUpperCase()) && sql_ApplicationProductType.toString().toUpperCase().equals(api_ApplicationProductType.toString().toUpperCase()) && sql_ApplicationUnderwriterEmail.toString().toUpperCase().equals(api_ApplicationUnderwriterEmail.toString().toUpperCase()) && sql_VesselId.toString().equals(api_VesselId.toString()) && sql_ImoNumber.toString().equals(api_ImoNumber.toString()) && sql_VesselName.toString().toUpperCase().equals(api_VesselName.toString().toUpperCase()) && sql_VesselType.toString().toUpperCase().equals(api_VesselType.toString().toUpperCase()) && sql_CallSign.toString().toUpperCase().equals(api_CallSign.toString().toUpperCase()) && sql_GrossTonnage.toString().equals(api_GrossTonnage.toString()) && sql_PassengerCarryingCapacity.toString().equals(api_PassengerCarryingCapacity.toString()) && sql_YearBuilt.toString().equals(api_YearBuilt.toString()) && sql_FlagCountryCode.toString().toUpperCase().equals(api_FlagCountryCode.toString().toUpperCase()) && sql_FlagCountryName.toString().toUpperCase().equals(api_FlagCountryName.toString().toUpperCase()) && sql_PortOfRegistryCode.toString().toUpperCase().equals(api_PortOfRegistryCode.toString().toUpperCase()) && sql_PortOfRegistryName.toString().toUpperCase().equals(api_PortOfRegistryName.toString().toUpperCase()) && sql_RiskCategoryName.toString().toUpperCase().equals(api_RiskCategoryName.toString().toUpperCase()) && sql_TrademarkEngineModelNumber.toString().equals(api_TrademarkEngineModelNumber.toString()) && sql_VesselMake.toString().equals(api_VesselMake.toString()) && sql_EngineHorsePower.toString().equals(api_EngineHorsePower.toString()) && sql_TenderSerialNumber.toString().equals(api_TenderSerialNumber.toString()) && sql_MotorSerialNumber.toString().equals(api_MotorSerialNumber.toString()))
						{
							compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskId+","+api_RiskId+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_OrganisationName+","+api_OrganisationName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_ApplicationProductType+","+api_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+api_ApplicationUnderwriterEmail+","+sql_LimitId+","+api_LimitId+","+sql_CoverShortName+","+api_CoverShortName+","+sql_LimitName+","+api_LimitName+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_Amount+","+api_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+api_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+api_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_IsRenewalApplication+","+api_IsRenewalApplication+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_EnteredDate+","+api_EnteredDate+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_PassengerCarryingCapacity+","+api_PassengerCarryingCapacity+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+sql_VesselMake+","+api_VesselMake+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TenderSerialNumber+","+api_TenderSerialNumber+","+sql_MotorSerialNumber+","+api_MotorSerialNumber+","+"Test case Passed")
							log.info "Details are matching hence test case is passed"
							break;
						}
						else
						{
							compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskId+","+api_RiskId+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_OrganisationName+","+api_OrganisationName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_ApplicationProductType+","+api_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+api_ApplicationUnderwriterEmail+","+sql_LimitId+","+api_LimitId+","+sql_CoverShortName+","+api_CoverShortName+","+sql_LimitName+","+api_LimitName+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_Amount+","+api_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+api_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+api_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_IsRenewalApplication+","+api_IsRenewalApplication+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_EnteredDate+","+api_EnteredDate+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_PassengerCarryingCapacity+","+api_PassengerCarryingCapacity+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+sql_VesselMake+","+api_VesselMake+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TenderSerialNumber+","+api_TenderSerialNumber+","+sql_MotorSerialNumber+","+api_MotorSerialNumber+","+"Test case failed")
							log.info "Details are not matching hence test case is failed"
							break;
						}	
					}
				}
			}
		}
		
		else
		{
			apiWriter.println("Test Case is failed for Application Risk Id : "+sql_ApplicationRiskId+" for Risk Id : "+sql_RiskId+" for Application Id : "+sql_ApplicationId+" because , "+response)
			log.info "Test Case is failed for Application Risk Id : "+sql_ApplicationRiskId+" for Risk Id : "+sql_RiskId+" for Application Id : "+sql_ApplicationId+" because , "+response
		}
		if(sql_PolicyStatus.toString().equals("Void") && httpStatusCode.equals("404") && jsonRes.totalRecords>0)
		{
			log.info "For Void policy / Abandoned quote- valid error response code is displayed hence test case is passed"
			compareWriter.println(sql_ApplicationId+","+"For Void policy / Abandoned quote- valid error response code is displayed hence test case is passed"+","+response)
		}
		else if(sql_PolicyStatus.toString().equals("Void") && jsonRes.totalRecords==0)
		{
			apiWriter.println(sql_ApplicationRiskId+","+"api response is received with 200 OK status but 0 records are found.")
			compareWriter.println(sql_ApplicationRiskId+","+"api response is received with 200 OK status but 0 records are found.")
			log.info sql_ApplicationRiskId+","+"api response is received with 200 OK status but 0 records are found."
		}
		else
		{
			log.info "For Void policy / Abandoned quote- invalid error response code is displayed hence test case is failed"
			compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskId+","+api_RiskId+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_OrganisationName+","+api_OrganisationName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_ApplicationProductType+","+api_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+api_ApplicationUnderwriterEmail+","+sql_LimitId+","+api_LimitId+","+sql_CoverShortName+","+api_CoverShortName+","+sql_LimitName+","+api_LimitName+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_Amount+","+api_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+api_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+api_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_IsRenewalApplication+","+api_IsRenewalApplication+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_EnteredDate+","+api_EnteredDate+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_PassengerCarryingCapacity+","+api_PassengerCarryingCapacity+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+sql_VesselMake+","+api_VesselMake+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TenderSerialNumber+","+api_TenderSerialNumber+","+sql_MotorSerialNumber+","+api_MotorSerialNumber+","+"For Void policy / Abandoned quote- invalid error response code is displayed hence test case is failed")
		}
		
	counter = counter+1
	log.info "Number of records verified are : "+counter
}

public String removeBracketAndComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************End of Script for Risk With MultipleParameters for Exclude Void Policies in Risk with Multiple Parameters like Filter Type as VesselName and Risk Type as Vessel Exclude Vessel False************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>88584</con:value></con:property><con:property><con:name>appReference</con:name><con:value>1052057</con:value></con:property><con:property><con:name>memberId</con:name><con:value>46129</con:value></con:property><con:property><con:name>appRiskId</con:name><con:value>165484</con:value></con:property><con:property><con:name>filterType</con:name><con:value>vesselName</con:value></con:property><con:property><con:name>filterValue</con:name><con:value>Risk</con:value></con:property><con:property><con:name>risktype</con:name><con:value>vessel</con:value></con:property><con:property><con:name>excludeVessel</con:name><con:value>false</con:value></con:property></con:properties></con:testCase><con:testCase id="bb86af4e-10c2-4b9d-b512-07e1ab9f34d7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ConfigureByOwnerMemberByRiskByApplicationRiskId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="ConfigByOwnerMemberByRiskByAppRiskId" id="0fbffd8e-b3a6-4f7f-999b-b78c191b5f55"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/configure/ownermember/risk/${#TestCase#AppRiskId}" methodName="ConfigureByOwnerMemberByRiskByApplicationRiskId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="ConfigByOwnerMemberByRiskByAppRiskId" id="ea423a2c-da4f-4a20-a8b2-0d1d63d9403c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/configure/ownermember/risk/113841</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ConfigureByOwnerMemberByRiskByApplicationRiskId" id="989300b8-76a1-4401-b3de-8e2200c76385" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for Configure By OwnerMember By Risk By ApplicationRiskId************"

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info "token : "+token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt = 
"""
Use TOM
	Declare @Effective datetimeoffset, @Transactional datetimeoffset, @arid int--, @MaxEffective datetimeoffset
		set @Effective = '9999-12-31 00:00:00.0000000 +00:00'  --'2020-12-03 12:00:00.0000000 +00:00' --'2020-10-01 12:00:00.0000000 +00:00' --'2020-08-27 12:00:00.0000000 +01:00'  --SYSDATETIMEOFFSET() --'2020-10-01 12:00:00.0000000 +00:00' --'2020-11-02 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() --'2000-01-01 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() -- '2018-08-08 12:00:00.0000000 +00:00' --'2020-08-20 13:00:00.0000000 +01:00'  --'2020-08-11 12:00:00.0000000 +00:00'  --'2020-04-01 00:00:00.0000000 +00:00' --'2020-05-08 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET()  --'2020-04-01 01:00:00.0000000 +00:00'  -- '2020-05-01 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET()  --'2018-05-09 12:00:00.0000000 +00:00'  --'9999-12-31 11:59:59.0000000 +00:00'  -- SYSDATETIMEOFFSET() 
		set @Transactional = '9999-12-31 00:00:00.0000000 +00:00'  --'2021-02-03 15:02:09.0352017 +00:00'  --'2020-08-27 14:30:00.0000000 +01:00'  --SYSDATETIMEOFFSET() -- '2020-08-27 19:54:36.0000000 +01:00'  --'2018-08-08 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() --'2019-11-05 16:34:04.8347351 +00:00' -- SYSDATETIMEOFFSET() -- '2019-11-05 16:34:04.8347351 +00:00' -- '2020-08-11 00:00:00.0000000 +01:00' -- '2019-08-08 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET() --'2019-08-08 00:00:00.0000000 +01:00' --'2020-07-18 00:00:00.0000000 +01:00'  --'2020-05-08 00:00:00.0000000 +01:00' --'2020-07-17 11:15:09.0383540 +01:00'  -- '2020-07-17 11:08:00.0000000 +01:00' --SYSDATETIMEOFFSET() -- 
		--set @arid =90563--175713-- 172746 
				
	SELECT 
	DISTINCT
	TOP 10
	ar.Id AS Vesselid, ter.id as RiskId, ter.Reference as RiskRef, 
	ama.MemberAssured_Id as ID, ma.id as MemberId, null as OwnerId, p2.Id as PartyId, p2.SearchName as Name, ma.Reference, p2.EmailAddress as Email, 'Member/Assured' as Capacity,
	ta.id as AddressId, ta.Name as AddressName, ta.Line1, ta.Line2, ta.Line3, ta.City, ta.StateOrProvince, rc.Name as Country, ta.Postcode, 
	AB.Id as ApplicationId, AB.Discriminator, AB.PolicyEnd
	from 
	temporal.ApplicationRisk ar 
	inner join temporal.ApplicationMemberAssured ama on ama.Id = ar.ApplicationMemberAssured_Id
		and ar.EffectiveFrom <= @Effective
		and ar.EffectiveTo > @Effective
		and ar.TransactionalFrom <= @Transactional
		and ar.TransactionalTo > @Transactional
		and ar.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
		and ama.EffectiveFrom <= @Effective
		and ama.EffectiveTo > @Effective
		and ama.TransactionalFrom <= @Transactional
		and ama.TransactionalTo > @Transactional
		and ama.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
	inner join temporal.MemberAssured ma on ama.MemberAssured_Id = ma.Id
		and ma.EffectiveFrom <= @Effective
		and ma.EffectiveTo > @Effective
		and ma.TransactionalFrom <= @Transactional
		and ma.TransactionalTo > @Transactional
		and ma.MemberAssured_PhysicalDeletionAttemptPrevented = 0
	inner join temporal.party p2 on ma.Party_Id = p2.id
		and p2.EffectiveFrom <= @Effective
		and p2.EffectiveTo > @Effective
		and p2.TransactionalFrom <= @Transactional
		and p2.TransactionalTo > @Transactional
		and p2.PartyBase_PhysicalDeletionAttemptPrevented = 0
	inner join Temporal.Risk ter on ar.Risk_Id = ter.Id
		and ter.EffectiveFrom <= @Effective
		and ter.EffectiveTo > @Effective
		and ter.TransactionalFrom <= @Transactional
		and ter.TransactionalTo > @Transactional
		and ter.RiskBase_PhysicalDeletionAttemptPrevented = 0 
	inner join Temporal.[Address] ta on p2.id = ta.Party_Id
		and ta.EffectiveFrom <= @Effective
		and ta.EffectiveTo > @Effective
		and ta.TransactionalFrom <= @Transactional
		and ta.TransactionalTo > @Transactional
		and ta.Address_PhysicalDeletionAttemptPrevented = 0 
	inner join ref_Country rc on ta.Country_Id = rc.id
	inner join temporal.ApplicationBase AB on AB.Id = ama.Id
	where AB.Discriminator='Policy' and AB.PolicyEnd > GETDATE()
	--and ar.id = @arid
	
	union all
		
	select 
	distinct 
	TOP 10
	ar.Id AS Vesselid, r.id as RiskId, r.Reference as RiskRef, 
	ja.Id as ID, null as MemberId, ap.id as OwnerId, p.Id as PartyId, p.SearchName as Name, ja.Reference, p.EmailAddress as Email, 'Owenr' as Capacity,
	ta.id as AddressId, ta.Name as AddressName, ta.Line1, ta.Line2, ta.Line3, ta.City, ta.StateOrProvince, rc.Name as Country, ta.Postcode, 
	AB.Id, AB.Discriminator, AB.PolicyEnd
	from temporal.ApplicationRisk ar 
	inner join temporal.ApplicationRiskAssociatedParty arap on ar.id = arap.ApplicationRisk_Id
		and arap.EffectiveFrom <= @Effective
		and arap.EffectiveTo > @Effective
		and arap.TransactionalFrom <= @Transactional
		and arap.TransactionalTo > @Transactional
		and arap.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
	inner join temporal.AssociatedParty ap on ap.Id = arap.AssociatedParty_Id
		and ap.EffectiveFrom <= @Effective
		and ap.EffectiveTo > @Effective
		and ap.TransactionalFrom <= @Transactional
		and ap.TransactionalTo > @Transactional
		and ap.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
	inner join temporal.party p on ap.Party_Id = p.id
		and p.EffectiveFrom <= @Effective
		and p.EffectiveTo > @Effective
		and p.TransactionalFrom <= @Transactional
		and p.TransactionalTo > @Transactional
		and p.PartyBase_PhysicalDeletionAttemptPrevented = 0
	inner join temporal.JointAssured ja on p.id = ja.Party_Id
		and ja.EffectiveFrom <= @Effective
		and ja.EffectiveTo > @Effective
		and ja.TransactionalFrom <= @Transactional
		and ja.TransactionalTo > @Transactional
		and ja.JointAssured_PhysicalDeletionAttemptPrevented = 0
	inner join temporal.risk r on ar.Risk_Id = r.id
		and r.EffectiveFrom <= @Effective
		and r.EffectiveTo > @Effective
		and r.TransactionalFrom <= @Transactional
		and r.TransactionalTo > @Transactional
		and r.RiskBase_PhysicalDeletionAttemptPrevented = 0
	inner join temporal.AssociatedPartyCapacityAssociation apca on apca.AssociatedParty_Id = ap.Id 
		and apca.EffectiveFrom <= @Effective
		and apca.EffectiveTo > @Effective
		and apca.TransactionalFrom <= @Transactional
		and apca.TransactionalTo > @Transactional
		and apca.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
	inner join Temporal.[Address] ta on p.id = ta.Party_Id
		and ta.EffectiveFrom <= @Effective
		and ta.EffectiveTo > @Effective
		and ta.TransactionalFrom <= @Transactional
		and ta.TransactionalTo > @Transactional
		and ta.Address_PhysicalDeletionAttemptPrevented = 0 
	inner join ref_Country rc on ta.Country_Id = rc.id
	inner join temporal.ApplicationMemberAssured ama on ama.Id = ar.ApplicationMemberAssured_Id
	inner join temporal.ApplicationBase AB on AB.Id = ama.Id
	Where apca.CapacityType_Id in (18,19)
	and AB.Discriminator='Policy'  and AB.PolicyEnd > GETDATE()
	--and ar.id = @arid
	order by 1 desc
"""

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ConfigureByOwnerMemberByRiskByApplicationRiskId.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ConfigureByOwnerMemberByRiskByApplicationRiskId.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_Get_ConfigureByOwnerMemberByRiskByApplicationRiskId.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ConfigureByOwnerMemberByRiskByApplicationRiskId"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ConfigureByOwnerMemberByRiskByApplicationRiskId"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_Get_ConfigureByOwnerMemberByRiskByApplicationRiskId"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_Vesselid"+","+"SQL_RiskId"+","+"SQL_RiskRef"+","+"SQL_ID"+","+"SQL_MemberId"+","+"SQL_OwnerId"+","+"SQL_PartyId"+","+"SQL_Name"+","+"SQL_Reference"+","+"SQL_Email"+","+"SQL_Capacity"+","+"SQL_AddressId"+","+"SQL_AddressName"+","+"SQL_Line1"+","+"SQL_Line2"+","+"SQL_Line3"+","+"SQL_City"+","+"SQL_State"+","+"SQL_Country"+","+"SQL_Postcode"+","+"SQL_applicationId"+","+"SQL_applicationType"+","+"SQL_policyEndDate")
apiWriter.println("API_Memberid"+","+"API_MembermemberId"+","+"API_MemberownerId"+","+"API_MemberpartyId"+","+"API_Membername"+","+"API_Memberreference"+","+"API_Memberemail"+","+"API_Membercapacity"+","+"MemberAddressId"+","+"MemberAddressName"+","+"MemberAddressLine1"+","+"MemberAddressLine2"+","+"MemberAddressLine3"+","+"MemberAddressCity"+","+"MemberAddressState"+","+"MemberAddressCountry"+","+"MemberAddressPostCode"+","+"MemberAddressisPrimaryAddress"+","+"API_vesselId"+","+"API_OwnermemberId"+","+"API_OwnerownerId"+","+"API_OwnerpartyId"+","+"API_Ownername"+","+"API_Ownerreference"+","+"API_Owneremail"+","+"API_Ownercapacity"+","+"OwnerAddressId"+","+"OwnerAddressName"+","+"OwnerAddressLine1"+","+"OwnerAddressLine2"+","+"OwnerAddressLine3"+","+"OwnerAddressCity"+","+"OwnerAddressState"+","+"OwnerAddressCountry"+","+"OwnerAddressPostCode"+","+"OwnerAddressisPrimaryAddress"+","+"API_vesselId")
compareWriter.println("SQL_MemberId"+","+"API_MembermemberId"+","+"SQL_OwnerId"+","+"API_MemberownerId"+","+"SQL_PartyId"+","+"API_MemberpartyId"+","+"SQL_Name"+","+"API_Membername"+","+"SQL_Reference"+","+"API_Memberreference"+","+"SQL_Email"+","+"API_Memberemail"+","+"SQL_Capacity"+","+"API_Membercapacity"+","+"SQL_AddressId"+","+"API_MemberAddressId"+","+"SQL_AddressName"+","+"API_MemberAddressName"+","+"SQL_Line1"+","+"API_MemberAddressLine1"+","+"SQL_Line2"+","+"API_MemberAddressLine2"+","+"SQL_Line3"+","+"API_MemberAddressLine3"+","+"SQL_City"+","+"API_MemberAddressCity"+","+"SQL_State"+","+"API_MemberAddressState"+","+"SQL_Country"+","+"API_MemberAddressCountry"+","+"SQL_Postcode"+","+"API_MemberAddressPostCode"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;

con.eachRow(sqlstmt)
{
	row ->
		sql_Vesselid=row.Vesselid
		sql_RiskId=row.RiskId
		sql_RiskRef=row.RiskRef
		sql_ID=row.ID
		sql_MemberId=row.MemberId
		sql_OwnerId=row.OwnerId		
		sql_PartyId=row.PartyId
		sql_Name=row.Name
		sql_Name=removeBrackets(sql_Name.toString())
		sql_Reference=row.Reference
		sql_Email=row.Email
		sql_Capacity=row.Capacity
		sql_AddressId=row.AddressId
		sql_AddressName=row.AddressName
		sql_AddressName=removeBrackets(sql_AddressName.toString())
		sql_Line1=row.Line1
		sql_Line1=removeBrackets(sql_Line1.toString())
		sql_Line2=row.Line2
		sql_Line2=removeBrackets(sql_Line2.toString())
		sql_Line3=row.Line3
		sql_Line3=removeBrackets(sql_Line3.toString())
		sql_City=row.City
		sql_City=removeBrackets(sql_City.toString())
		sql_Country=row.Country
		sql_State=row.StateOrProvince
		sql_State=removeBrackets(sql_State.toString())
		sql_Country=removeBrackets(sql_Country.toString())
		sql_Postcode=row.Postcode
		sql_applicationType=row.Discriminator
		sql_applicationId=row.ApplicationId
		sql_policyEndDate=row.PolicyEnd
		String str=sql_policyEndDate.toString()
		//log.info "Date is : "+str
		String sql_year = str.substring(0,4)
		String sql_month = str.substring(5,7)
		String sql_date = str.substring(8,10)
		
		log.info "sql_date  : "+sql_date +" sql_month  : "+sql_month + " sql_year  : "+sql_year 
		//log.info "sql_policyEndDate : "+sql_policyEndDate


		sqlWriter.println(sql_Vesselid+","+sql_RiskId+","+sql_RiskRef+","+sql_ID+","+sql_MemberId+","+sql_OwnerId+","+sql_PartyId+","+sql_Name+","+sql_Reference+","+sql_Email+","+sql_Capacity+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_State+","+sql_Country+","+sql_Postcode+","+sql_applicationId+","+sql_applicationType+","+sql_policyEndDate)
		log.info "SQL Response received as : "+sql_Vesselid+","+sql_RiskId+","+sql_RiskRef+","+sql_ID+","+sql_MemberId+","+sql_OwnerId+","+sql_PartyId+","+sql_Name+","+sql_Reference+","+sql_Email+","+sql_Capacity+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_State+","+sql_Country+","+sql_Postcode+","+sql_applicationId+","+sql_applicationType+","+sql_policyEndDate
	
		//Set the Application ID at test case level
		String appRiskId = sql_Vesselid
		//log.info "appRiskId : "+appRiskId
		testRunner.testCase.setPropertyValue( "AppRiskId", appRiskId)

		//Set the Application ID at test case level
		testRunner.testCase.testSuite.setPropertyValue( "token", token)
		//log.info "===>"+token

		//Set token to test suite level
		testRunner.runTestStepByName('ConfigByOwnerMemberByRiskByAppRiskId')
		String req='${ConfigByOwnerMemberByRiskByAppRiskId#Response}'
		response=context.expand(req)
		//log.info "API response is : "+response
		jsonSlurper=new JsonSlurper()
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["ConfigByOwnerMemberByRiskByAppRiskId"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info " API response Status code is : "	+httpStatusCode

		if(httpStatusCode.equals("200"))
		{
			api_Memberid=jsonRes.members.id[0]
			api_MembermemberId=jsonRes.members.memberId[0]
			api_MemberownerId=jsonRes.members.ownerId[0]
			api_MemberpartyId=jsonRes.members.partyId[0]
			api_Membername=jsonRes.members.name[0]
			api_Memberreference=jsonRes.members.reference[0]
			api_Memberemail=jsonRes.members.email[0]
			api_Membercapacity=jsonRes.members.capacity[0]
			api_addressesid=jsonRes.members.addresses.id
			api_addressesid=removeBrackets(api_addressesid.toString())
			api_addressesaddressName=jsonRes.members.addresses.addressName
			api_addressesaddressName=removeBrackets(api_addressesaddressName.toString())
			api_addressesaddressLine1=jsonRes.members.addresses.addressLine1
			api_addressesaddressLine1=removeBrackets(api_addressesaddressLine1.toString())
			api_addressesaddressLine2=jsonRes.members.addresses.addressLine2
			api_addressesaddressLine2=removeBrackets(api_addressesaddressLine2.toString())
			api_addressesaddressLine3=jsonRes.members.addresses.addressLine3
			api_addressesaddressLine3=removeBrackets(api_addressesaddressLine3.toString())
			api_addressescity=jsonRes.members.addresses.city
			api_addressescity=removeBrackets(api_addressescity.toString())
			api_addressesstate=jsonRes.members.addresses.state
			api_addressesstate=removeBrackets(api_addressesstate.toString())
			api_addressescountry=jsonRes.members.addresses.country
			api_addressescountry=removeBrackets(api_addressescountry.toString())
			api_addressespostalCode=jsonRes.members.addresses.postalCode
			api_addressespostalCode=removeBrackets(api_addressespostalCode.toString())
			api_addressesisPrimaryAddress=jsonRes.members.addresses.isPrimaryAddress
			api_addressesisPrimaryAddress=removeBrackets(api_addressesisPrimaryAddress.toString())
			api_owners=jsonRes.owners
			api_vesselId=jsonRes.vesselId
			arrayMemberAddress=[api_addressesid, api_addressesaddressName,api_addressesaddressLine1,api_addressesaddressLine2,api_addressesaddressLine3,api_addressescity,api_addressesstate,api_addressescountry,api_addressespostalCode,api_addressesisPrimaryAddress]

			apiWriter.println(api_Memberid+","+api_MembermemberId+","+api_MemberownerId+","+api_MemberpartyId+","+api_Membername+","+api_Memberreference+","+api_Memberemail+","+api_Membercapacity+","+arrayMemberAddress[0]+","+arrayMemberAddress[1]+","+arrayMemberAddress[2]+","+arrayMemberAddress[3]+","+arrayMemberAddress[4]+","+arrayMemberAddress[5]+","+arrayMemberAddress[6]+","+arrayMemberAddress[7]+","+arrayMemberAddress[8]+","+arrayMemberAddress[9]+","+api_vesselId)
			log.info "API Response received for only member details : "+api_Memberid+","+api_MembermemberId+","+api_MemberownerId+","+api_MemberpartyId+","+api_Membername+","+api_Memberreference+","+api_Memberemail+","+api_Membercapacity+","+arrayMemberAddress[0]+","+arrayMemberAddress[1]+","+arrayMemberAddress[2]+","+arrayMemberAddress[3]+","+arrayMemberAddress[4]+","+arrayMemberAddress[5]+","+arrayMemberAddress[6]+","+arrayMemberAddress[7]+","+arrayMemberAddress[8]+","+arrayMemberAddress[9]+","+api_vesselId

			if (!jsonRes.owners.toString().equals("[]"))// || !jsonRes.owners.toString().equals(null))
			{
				api_Ownerid=jsonRes.owners.id[0]
				api_OwnermemberId=jsonRes.owners.memberId[0]
				api_OwnerownerId=jsonRes.owners.ownerId[0]
				api_OwnerpartyId=jsonRes.owners.partyId[0]
				api_Ownername=jsonRes.owners.name[0]
				api_Ownerreference=jsonRes.owners.reference[0]
				api_Owneremail=jsonRes.owners.email[0]
				api_Ownercapacity=jsonRes.owners.capacity[0]
				api_ownerAddressesid=jsonRes.owners.addresses.id
				api_ownerAddressesid=removeBrackets(api_ownerAddressesid.toString())
				api_ownerAddressesaddressName=jsonRes.owners.addresses.addressName
				api_ownerAddressesaddressName=removeBrackets(api_ownerAddressesaddressName.toString())
				api_ownerAddressesaddressLine1=jsonRes.owners.addresses.addressLine1
				api_ownerAddressesaddressLine1=removeBrackets(api_ownerAddressesaddressLine1.toString())
				api_ownerAddressesaddressLine2=jsonRes.owners.addresses.addressLine2
				api_ownerAddressesaddressLine2=removeBrackets(api_ownerAddressesaddressLine2.toString())
				api_ownerAddressesaddressLine3=jsonRes.owners.addresses.addressLine3
				api_ownerAddressesaddressLine3=removeBrackets(api_ownerAddressesaddressLine3.toString())
				api_ownerAddressescity=jsonRes.owners.addresses.city
				api_ownerAddressescity=removeBrackets(api_ownerAddressescity.toString())
				api_ownerAddressesstate=jsonRes.owners.addresses.state
				api_ownerAddressesstate=removeBrackets(api_ownerAddressesstate.toString())
				api_ownerAddressescountry=jsonRes.owners.addresses.country
				api_ownerAddressescountry=removeBrackets(api_ownerAddressescountry.toString())
				api_ownerAddressespostalCode=jsonRes.owners.addresses.postalCode
				api_ownerAddressespostalCode=removeBrackets(api_ownerAddressespostalCode.toString())
				api_ownerAddressesisPrimaryAddress=jsonRes.owners.addresses.isPrimaryAddress
				api_ownerAddressesisPrimaryAddress=removeBrackets(api_ownerAddressesisPrimaryAddress.toString())
	
				arrayOwnerAddress=[api_ownerAddressesid, api_ownerAddressesaddressName, api_ownerAddressesaddressLine1, api_ownerAddressesaddressLine2, api_ownerAddressesaddressLine3, api_ownerAddressescity, api_ownerAddressesstate, api_ownerAddressescountry, api_ownerAddressespostalCode,api_ownerAddressesisPrimaryAddress]
	
				apiWriter.println(api_Memberid+","+api_MembermemberId+","+api_MemberownerId+","+api_MemberpartyId+","+api_Membername+","+api_Memberreference+","+api_Memberemail+","+api_Membercapacity+","+arrayMemberAddress[0]+","+arrayMemberAddress[1]+","+arrayMemberAddress[2]+","+arrayMemberAddress[3]+","+arrayMemberAddress[4]+","+arrayMemberAddress[5]+","+arrayMemberAddress[6]+","+arrayMemberAddress[7]+","+arrayMemberAddress[8]+","+arrayMemberAddress[9]+","+api_Ownerid+","+api_OwnermemberId+","+api_OwnerownerId+","+api_OwnerpartyId+","+api_Ownername+","+api_Ownerreference+","+api_Owneremail+","+api_Ownercapacity+","+arrayOwnerAddress[0]+","+arrayOwnerAddress[1]+","+arrayOwnerAddress[2]+","+arrayOwnerAddress[3]+","+arrayOwnerAddress[4]+","+arrayOwnerAddress[5]+","+arrayOwnerAddress[6]+","+arrayOwnerAddress[7]+","+arrayOwnerAddress[8]+","+arrayOwnerAddress[9]+","+api_vesselId)
				log.info api_Memberid+","+"API Response reveived for member and owner details : "+api_Memberid+","+api_MembermemberId+","+api_MemberownerId+","+api_MemberpartyId+","+api_Membername+","+api_Memberreference+","+api_Memberemail+","+api_Membercapacity+","+arrayMemberAddress[0]+","+arrayMemberAddress[1]+","+arrayMemberAddress[2]+","+arrayMemberAddress[3]+","+arrayMemberAddress[4]+","+arrayMemberAddress[5]+","+arrayMemberAddress[6]+","+arrayMemberAddress[7]+","+arrayMemberAddress[8]+","+arrayMemberAddress[9]+","+api_Ownerid+","+api_OwnermemberId+","+api_OwnerownerId+","+api_OwnerpartyId+","+api_Ownername+","+api_Ownerreference+","+api_Owneremail+","+api_Ownercapacity+","+arrayOwnerAddress[0]+","+arrayOwnerAddress[1]+","+arrayOwnerAddress[2]+","+arrayOwnerAddress[3]+","+arrayOwnerAddress[4]+","+arrayOwnerAddress[5]+","+arrayOwnerAddress[6]+","+arrayOwnerAddress[7]+","+arrayOwnerAddress[8]+","+arrayOwnerAddress[9]+","+api_vesselId
			}

			//log.info sql_Email +":"+api_Memberemail
			//for testing purpose
			//sql_OwnerId="0"
			//sql_Email=null
			if(jsonRes.owners.toString().equals("[]"))//when owner details are not returned
			{
				//Compare without owner details
				if(
					sql_MemberId.toString().equals(api_MembermemberId.toString()) &&
					sql_OwnerId.toString().equals(	api_MemberownerId.toString()) &&
					sql_PartyId.toString().equals(api_MemberpartyId.toString()) &&
					sql_Name.toString().toUpperCase().equals(api_Membername.toString().toUpperCase()) &&
					sql_Reference.toString().equals(api_Memberreference.toString()) &&
					sql_Email.toString().toUpperCase().equals(api_Memberemail.toString().toUpperCase()) &&
					sql_Capacity.toString().toUpperCase().equals(api_Membercapacity.toString().toUpperCase()) &&
					sql_AddressId.toString().equals(arrayMemberAddress[0].toString()) &&
					sql_AddressName.toString().toUpperCase().equals(arrayMemberAddress[1].toString().toUpperCase()) &&
					sql_Line1.toString().toUpperCase().equals(arrayMemberAddress[2].toString().toUpperCase()) &&
					sql_Line2.toString().toUpperCase().equals(arrayMemberAddress[3].toString().toUpperCase()) &&
					sql_Line3.toString().toUpperCase().equals(arrayMemberAddress[4].toString().toUpperCase()) &&
					sql_City.toString().toUpperCase().equals(arrayMemberAddress[5].toString().toUpperCase()) &&
					sql_State.toString().toUpperCase().equals(arrayMemberAddress[6].toString().toUpperCase()) &&
					sql_Country.toString().toUpperCase().equals(arrayMemberAddress[7].toString().toUpperCase()) &&
					sql_Postcode.toString().equals(arrayMemberAddress[8].toString())
				)
				{
					log.info "Member details are matching hence test case is passed."
					compareWriter.println(sql_MemberId+","+api_MembermemberId+","+sql_OwnerId+","+api_MemberownerId+","+sql_PartyId+","+api_MemberpartyId+","+sql_Name+","+api_Membername+","+sql_Reference+","+api_Memberreference+","+sql_Email+","+api_Memberemail+","+sql_Capacity+","+api_Membercapacity+","+sql_AddressId+","+arrayMemberAddress[0]+","+sql_AddressName+","+arrayMemberAddress[1]+","+sql_Line1+","+arrayMemberAddress[2]+","+sql_Line2+","+arrayMemberAddress[3]+","+sql_Line3+","+arrayMemberAddress[4]+","+sql_City+","+arrayMemberAddress[5]+","+sql_State+","+arrayMemberAddress[6]+","+sql_Country+","+arrayMemberAddress[7]+","+sql_Postcode+","+arrayMemberAddress[8]+","+"Test Case passed")
				}
			}
			else if(!jsonRes.owners.toString().equals("[]"))//when owner details are returned
			{
				//log.info "Checking for member and owner "
				//log.info sql_MemberId+":"+api_MembermemberId
				if(
					sql_MemberId.toString().equals(api_MembermemberId.toString()) &&
					sql_OwnerId.toString().equals(	api_MemberownerId.toString()) &&
					sql_PartyId.toString().equals(api_MemberpartyId.toString()) &&
					sql_Name.toString().toUpperCase().equals(api_Membername.toString().toUpperCase()) &&
					sql_Reference.toString().equals(api_Memberreference.toString()) &&
					sql_Email.toString().toUpperCase().equals(api_Memberemail.toString().toUpperCase()) &&
					sql_Capacity.toString().toUpperCase().equals(api_Membercapacity.toString().toUpperCase()) &&
					sql_AddressId.toString().equals(arrayMemberAddress[0].toString()) &&
					sql_AddressName.toString().toUpperCase().equals(arrayMemberAddress[1].toString().toUpperCase()) &&
					sql_Line1.toString().toUpperCase().equals(arrayMemberAddress[2].toString().toUpperCase()) &&
					sql_Line2.toString().toUpperCase().equals(arrayMemberAddress[3].toString().toUpperCase()) &&
					sql_Line3.toString().toUpperCase().equals(arrayMemberAddress[4].toString().toUpperCase()) &&
					sql_City.toString().toUpperCase().equals(arrayMemberAddress[5].toString().toUpperCase()) &&
					sql_State.toString().toUpperCase().equals(arrayMemberAddress[6].toString().toUpperCase()) &&
					sql_Country.toString().toUpperCase().equals(arrayMemberAddress[7].toString().toUpperCase()) &&
					sql_Postcode.toString().equals(arrayMemberAddress[8].toString()) &&
					sql_OwnerId.toString().equals(api_OwnerownerId.toString()) &&
					sql_PartyId.toString().equals(api_OwnerpartyId.toString()) &&
					sql_Name.toString().upperCase().equals(api_Ownername.toString().upperCase()) &&
					sql_Reference.toString().equals(api_Ownerreference.toString()) &&
					sql_Email.toString().upperCase().equals(api_Owneremail.toString().upperCase()) &&
					sql_Capacity.toString().upperCase().equals(api_Ownercapacity.toString().upperCase()) &&
					sql_AddressId.toString().equals(arrayOwnerAddress[0].toString()) &&
					sql_AddressName.toString().upperCase().equals(arrayOwnerAddress[1].toString().upperCase()) &&
					sql_Line1.toString().upperCase().equals(arrayOwnerAddress[2].toString().upperCase()) &&
					sql_Line2.toString().upperCase().equals(arrayOwnerAddress[3].toString().upperCase()) &&
					sql_Line3.toString().upperCase().equals(arrayOwnerAddress[4].toString().upperCase()) &&
					sql_City.toString().upperCase().equals(arrayOwnerAddress[5].toString().upperCase()) &&
					sql_State.toString().upperCase().equals(arrayOwnerAddress[6].toString().upperCase()) &&
					sql_Country.toString().upperCase().equals(arrayOwnerAddress[7].toString().upperCase()) &&
					sql_Postcode.toString().equals(arrayOwnerAddress[8].toString())
				)
				{
					log.info "Member and Owner details are matching hence test case is passed."
					compareWriter.println(sql_MemberId+","+api_MembermemberId+","+sql_OwnerId+","+api_MemberownerId+","+sql_PartyId+","+api_MemberpartyId+","+sql_Name+","+api_Membername+","+sql_Reference+","+api_Memberreference+","+sql_Email+","+api_Memberemail+","+sql_Capacity+","+api_Membercapacity+","+sql_AddressId+","+arrayMemberAddress[0]+","+sql_AddressName+","+arrayMemberAddress[1]+","+sql_Line1+","+arrayMemberAddress[2]+","+sql_Line2+","+arrayMemberAddress[3]+","+sql_Line3+","+arrayMemberAddress[4]+","+sql_City+","+arrayMemberAddress[5]+","+sql_State+","+arrayMemberAddress[6]+","+sql_Country+","+arrayMemberAddress[7]+","+sql_Postcode+","+arrayMemberAddress[8]+","+sql_OwnerId+","+	api_OwnerownerId+","+sql_PartyId+","+	api_OwnerpartyId+","+sql_Name+","+api_Ownername+","+sql_Reference+","+	api_Ownerreference+","+sql_Email+","+api_Owneremail+","+sql_Capacity+","+api_Ownercapacity+","+sql_AddressId+","+arrayOwnerAddress[0]+","+sql_AddressName+","+arrayOwnerAddress[1]+","+sql_Line1+","+arrayOwnerAddress[2]+","+sql_Line2+","+arrayOwnerAddress[3]+","+sql_Line3+","+arrayOwnerAddress[4]+","+sql_City+","+arrayOwnerAddress[5]+","+sql_State+","+arrayOwnerAddress[6]+","+sql_Country+","+arrayOwnerAddress[7]+","+sql_Postcode+","+arrayOwnerAddress[8]+","+"Test Case is passed")
				}
			}
		}
		else if(httpStatusCode.equals("404"))
		{
			response = response.toString().replace(","," ")
			log.info response
			if(jsonRes.Message.toString().contains("Unable to locate a Policy or Renewal Quote for the risk!"))
			{
				if(sql_applicationType.toString().equals("Quote"))
				{
					log.info sql_MemberId+","+"Application risk Id : "+sql_Vesselid+" associated with application Id : "+sql_applicationId+" is of type"+sql_applicationType+" hence API response is received as :"+response
					apiWriter.println(sql_MemberId+","+"Application risk Id : "+sql_Vesselid+" associated with application Id : "+sql_applicationId+" is of type "+sql_applicationType+" hence API response is received as :"+response)
					compareWriter.println(sql_MemberId+","+"Application risk Id : "+sql_Vesselid+" associated with application Id : "+sql_applicationId+" is of type "+sql_applicationType+" hence API response is received as :"+response)
				}
			}
			else if(jsonRes.Message.toString().contains("The Policy End Date") && jsonRes.Message.toString().contains("is in the past."))
			{
				fetchDate=sdf.format(date)
				fetchDate= fetchDate.replace("/", "-")
				fetchDate=fetchDate.replace(":","-")
				//log.info "Today's Date : "+fetchDate
				String todaysYear=fetchDate.substring(6,10)
				String todaysMonth=fetchDate.substring(3,5)
				String todaysDate=fetchDate.substring(0,2)
				log.info "todaysDate : "+todaysDate +" todaysMonth : "+todaysMonth +" todaysYear : "+todaysYear

				if(todaysYear > sql_year)
				{
					log.info "Policy end date is past date hence valid error response is received, hence test case is passed"
					apiWriter.println(sql_Vesselid+","+response)
					compareWriter.println(sql_Vesselid+","+response)
				}
				else if (todaysYear <=sql_year)
				{
					if (todaysMonth > sql_month)
					{
						log.info "Policy end date is past date hence valid error response is received, hence test case is passed"
						apiWriter.println(sql_Vesselid+","+response)
						compareWriter.println(sql_Vesselid+","+response)
					}
				}
				else if (todaysYear <=sql_year && todaysMonth <= sql_month)
				{
					if (todaysdate > sql_date)
					{
						log.info "Policy end date is past date hence valid error response is received, hence test case is passed"
						apiWriter.println(sql_Vesselid+","+response)
						compareWriter.println(sql_Vesselid+","+response)
					}
				}
				else
				{
					log.info "Something went wrong with API need to check the Dates"
					compareWriter.println(sql_Vesselid+","+response)
				}
			}
		}
		else
		{
			log.info "Failed API response is received : "+response
			compareWriter.println(sql_Vesselid+","+response)
		}
	
		counter=counter+1
		log.info "Number of records verified are : "+counter
}

public String removeBrackets(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(",","")
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Script execution finished for Configure By OwnerMember By Risk By ApplicationRiskId************"]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="31894ad0-9d8f-46fb-a2a9-ec73194e0101" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for Configure By OwnerMember By Risk By ApplicationRiskId************"

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info "token : "+token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt = 
"""
Use TOM
	Declare @Effective datetimeoffset, @Transactional datetimeoffset, @arid int--, @MaxEffective datetimeoffset
		set @Effective = '9999-12-31 00:00:00.0000000 +00:00'  --'2020-12-03 12:00:00.0000000 +00:00' --'2020-10-01 12:00:00.0000000 +00:00' --'2020-08-27 12:00:00.0000000 +01:00'  --SYSDATETIMEOFFSET() --'2020-10-01 12:00:00.0000000 +00:00' --'2020-11-02 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() --'2000-01-01 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() -- '2018-08-08 12:00:00.0000000 +00:00' --'2020-08-20 13:00:00.0000000 +01:00'  --'2020-08-11 12:00:00.0000000 +00:00'  --'2020-04-01 00:00:00.0000000 +00:00' --'2020-05-08 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET()  --'2020-04-01 01:00:00.0000000 +00:00'  -- '2020-05-01 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET()  --'2018-05-09 12:00:00.0000000 +00:00'  --'9999-12-31 11:59:59.0000000 +00:00'  -- SYSDATETIMEOFFSET() 
		set @Transactional = '9999-12-31 00:00:00.0000000 +00:00'  --'2021-02-03 15:02:09.0352017 +00:00'  --'2020-08-27 14:30:00.0000000 +01:00'  --SYSDATETIMEOFFSET() -- '2020-08-27 19:54:36.0000000 +01:00'  --'2018-08-08 12:00:00.0000000 +00:00' --SYSDATETIMEOFFSET() --'2019-11-05 16:34:04.8347351 +00:00' -- SYSDATETIMEOFFSET() -- '2019-11-05 16:34:04.8347351 +00:00' -- '2020-08-11 00:00:00.0000000 +01:00' -- '2019-08-08 00:00:00.0000000 +01:00' --SYSDATETIMEOFFSET() --'2019-08-08 00:00:00.0000000 +01:00' --'2020-07-18 00:00:00.0000000 +01:00'  --'2020-05-08 00:00:00.0000000 +01:00' --'2020-07-17 11:15:09.0383540 +01:00'  -- '2020-07-17 11:08:00.0000000 +01:00' --SYSDATETIMEOFFSET() -- 
		--set @arid =90563--175713-- 172746 
				
	SELECT 
	DISTINCT
	TOP 10
	ar.Id AS Vesselid, ter.id as RiskId, ter.Reference as RiskRef, 
	ama.MemberAssured_Id as ID, ma.id as MemberId, null as OwnerId, p2.Id as PartyId, p2.SearchName as Name, ma.Reference, p2.EmailAddress as Email, 'Member/Assured' as Capacity,
	ta.id as AddressId, ta.Name as AddressName, ta.Line1, ta.Line2, ta.Line3, ta.City, ta.StateOrProvince, rc.Name as Country, ta.Postcode, 
	AB.Id as ApplicationId, AB.Discriminator, AB.PolicyEnd
	from 
	temporal.ApplicationRisk ar 
	inner join temporal.ApplicationMemberAssured ama on ama.Id = ar.ApplicationMemberAssured_Id
		and ar.EffectiveFrom <= @Effective
		and ar.EffectiveTo > @Effective
		and ar.TransactionalFrom <= @Transactional
		and ar.TransactionalTo > @Transactional
		and ar.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
		and ama.EffectiveFrom <= @Effective
		and ama.EffectiveTo > @Effective
		and ama.TransactionalFrom <= @Transactional
		and ama.TransactionalTo > @Transactional
		and ama.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
	inner join temporal.MemberAssured ma on ama.MemberAssured_Id = ma.Id
		and ma.EffectiveFrom <= @Effective
		and ma.EffectiveTo > @Effective
		and ma.TransactionalFrom <= @Transactional
		and ma.TransactionalTo > @Transactional
		and ma.MemberAssured_PhysicalDeletionAttemptPrevented = 0
	inner join temporal.party p2 on ma.Party_Id = p2.id
		and p2.EffectiveFrom <= @Effective
		and p2.EffectiveTo > @Effective
		and p2.TransactionalFrom <= @Transactional
		and p2.TransactionalTo > @Transactional
		and p2.PartyBase_PhysicalDeletionAttemptPrevented = 0
	inner join Temporal.Risk ter on ar.Risk_Id = ter.Id
		and ter.EffectiveFrom <= @Effective
		and ter.EffectiveTo > @Effective
		and ter.TransactionalFrom <= @Transactional
		and ter.TransactionalTo > @Transactional
		and ter.RiskBase_PhysicalDeletionAttemptPrevented = 0 
	inner join Temporal.[Address] ta on p2.id = ta.Party_Id
		and ta.EffectiveFrom <= @Effective
		and ta.EffectiveTo > @Effective
		and ta.TransactionalFrom <= @Transactional
		and ta.TransactionalTo > @Transactional
		and ta.Address_PhysicalDeletionAttemptPrevented = 0 
	inner join ref_Country rc on ta.Country_Id = rc.id
	inner join temporal.ApplicationBase AB on AB.Id = ama.Id
	where AB.Discriminator='Policy' and AB.PolicyEnd > GETDATE()
	--and ar.id = @arid
	
	union all
		
	select 
	distinct 
	TOP 10
	ar.Id AS Vesselid, r.id as RiskId, r.Reference as RiskRef, 
	ja.Id as ID, null as MemberId, ap.id as OwnerId, p.Id as PartyId, p.SearchName as Name, ja.Reference, p.EmailAddress as Email, 'Owenr' as Capacity,
	ta.id as AddressId, ta.Name as AddressName, ta.Line1, ta.Line2, ta.Line3, ta.City, ta.StateOrProvince, rc.Name as Country, ta.Postcode, 
	AB.Id, AB.Discriminator, AB.PolicyEnd
	from temporal.ApplicationRisk ar 
	inner join temporal.ApplicationRiskAssociatedParty arap on ar.id = arap.ApplicationRisk_Id
		and arap.EffectiveFrom <= @Effective
		and arap.EffectiveTo > @Effective
		and arap.TransactionalFrom <= @Transactional
		and arap.TransactionalTo > @Transactional
		and arap.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
	inner join temporal.AssociatedParty ap on ap.Id = arap.AssociatedParty_Id
		and ap.EffectiveFrom <= @Effective
		and ap.EffectiveTo > @Effective
		and ap.TransactionalFrom <= @Transactional
		and ap.TransactionalTo > @Transactional
		and ap.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
	inner join temporal.party p on ap.Party_Id = p.id
		and p.EffectiveFrom <= @Effective
		and p.EffectiveTo > @Effective
		and p.TransactionalFrom <= @Transactional
		and p.TransactionalTo > @Transactional
		and p.PartyBase_PhysicalDeletionAttemptPrevented = 0
	inner join temporal.JointAssured ja on p.id = ja.Party_Id
		and ja.EffectiveFrom <= @Effective
		and ja.EffectiveTo > @Effective
		and ja.TransactionalFrom <= @Transactional
		and ja.TransactionalTo > @Transactional
		and ja.JointAssured_PhysicalDeletionAttemptPrevented = 0
	inner join temporal.risk r on ar.Risk_Id = r.id
		and r.EffectiveFrom <= @Effective
		and r.EffectiveTo > @Effective
		and r.TransactionalFrom <= @Transactional
		and r.TransactionalTo > @Transactional
		and r.RiskBase_PhysicalDeletionAttemptPrevented = 0
	inner join temporal.AssociatedPartyCapacityAssociation apca on apca.AssociatedParty_Id = ap.Id 
		and apca.EffectiveFrom <= @Effective
		and apca.EffectiveTo > @Effective
		and apca.TransactionalFrom <= @Transactional
		and apca.TransactionalTo > @Transactional
		and apca.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
	inner join Temporal.[Address] ta on p.id = ta.Party_Id
		and ta.EffectiveFrom <= @Effective
		and ta.EffectiveTo > @Effective
		and ta.TransactionalFrom <= @Transactional
		and ta.TransactionalTo > @Transactional
		and ta.Address_PhysicalDeletionAttemptPrevented = 0 
	inner join ref_Country rc on ta.Country_Id = rc.id
	inner join temporal.ApplicationMemberAssured ama on ama.Id = ar.ApplicationMemberAssured_Id
	inner join temporal.ApplicationBase AB on AB.Id = ama.Id
	Where apca.CapacityType_Id in (18,19)
	and AB.Discriminator='Policy'  and AB.PolicyEnd > GETDATE()
	--and ar.id = @arid
	order by 1 desc
"""

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ConfigureByOwnerMemberByRiskByApplicationRiskId.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ConfigureByOwnerMemberByRiskByApplicationRiskId.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_Get_ConfigureByOwnerMemberByRiskByApplicationRiskId.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ConfigureByOwnerMemberByRiskByApplicationRiskId"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ConfigureByOwnerMemberByRiskByApplicationRiskId"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_Get_ConfigureByOwnerMemberByRiskByApplicationRiskId"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_Vesselid"+","+"SQL_RiskId"+","+"SQL_RiskRef"+","+"SQL_ID"+","+"SQL_MemberId"+","+"SQL_OwnerId"+","+"SQL_PartyId"+","+"SQL_Name"+","+"SQL_Reference"+","+"SQL_Email"+","+"SQL_Capacity"+","+"SQL_AddressId"+","+"SQL_AddressName"+","+"SQL_Line1"+","+"SQL_Line2"+","+"SQL_Line3"+","+"SQL_City"+","+"SQL_State"+","+"SQL_Country"+","+"SQL_Postcode"+","+"SQL_applicationId"+","+"SQL_applicationType"+","+"SQL_policyEndDate")
apiWriter.println("API_Memberid"+","+"API_MembermemberId"+","+"API_MemberownerId"+","+"API_MemberpartyId"+","+"API_Membername"+","+"API_Memberreference"+","+"API_Memberemail"+","+"API_Membercapacity"+","+"MemberAddressId"+","+"MemberAddressName"+","+"MemberAddressLine1"+","+"MemberAddressLine2"+","+"MemberAddressLine3"+","+"MemberAddressCity"+","+"MemberAddressState"+","+"MemberAddressCountry"+","+"MemberAddressPostCode"+","+"MemberAddressisPrimaryAddress"+","+"API_vesselId"+","+"API_OwnermemberId"+","+"API_OwnerownerId"+","+"API_OwnerpartyId"+","+"API_Ownername"+","+"API_Ownerreference"+","+"API_Owneremail"+","+"API_Ownercapacity"+","+"OwnerAddressId"+","+"OwnerAddressName"+","+"OwnerAddressLine1"+","+"OwnerAddressLine2"+","+"OwnerAddressLine3"+","+"OwnerAddressCity"+","+"OwnerAddressState"+","+"OwnerAddressCountry"+","+"OwnerAddressPostCode"+","+"OwnerAddressisPrimaryAddress"+","+"API_vesselId")
compareWriter.println("SQL_MemberId"+","+"API_MembermemberId"+","+"SQL_OwnerId"+","+"API_MemberownerId"+","+"SQL_PartyId"+","+"API_MemberpartyId"+","+"SQL_Name"+","+"API_Membername"+","+"SQL_Reference"+","+"API_Memberreference"+","+"SQL_Email"+","+"API_Memberemail"+","+"SQL_Capacity"+","+"API_Membercapacity"+","+"SQL_AddressId"+","+"API_MemberAddressId"+","+"SQL_AddressName"+","+"API_MemberAddressName"+","+"SQL_Line1"+","+"API_MemberAddressLine1"+","+"SQL_Line2"+","+"API_MemberAddressLine2"+","+"SQL_Line3"+","+"API_MemberAddressLine3"+","+"SQL_City"+","+"API_MemberAddressCity"+","+"SQL_State"+","+"API_MemberAddressState"+","+"SQL_Country"+","+"API_MemberAddressCountry"+","+"SQL_Postcode"+","+"API_MemberAddressPostCode"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;

con.eachRow(sqlstmt)
{
	row ->
		sql_Vesselid=row.Vesselid
		sql_RiskId=row.RiskId
		sql_RiskRef=row.RiskRef
		sql_ID=row.ID
		sql_MemberId=row.MemberId
		sql_OwnerId=row.OwnerId		
		sql_PartyId=row.PartyId
		sql_Name=row.Name
		sql_Name=removeBrackets(sql_Name.toString())
		sql_Reference=row.Reference
		sql_Email=row.Email
		sql_Capacity=row.Capacity
		sql_AddressId=row.AddressId
		sql_AddressName=row.AddressName
		sql_AddressName=removeBrackets(sql_AddressName.toString())
		sql_Line1=row.Line1
		sql_Line1=removeBrackets(sql_Line1.toString())
		sql_Line2=row.Line2
		sql_Line2=removeBrackets(sql_Line2.toString())
		sql_Line3=row.Line3
		sql_Line3=removeBrackets(sql_Line3.toString())
		sql_City=row.City
		sql_City=removeBrackets(sql_City.toString())
		sql_Country=row.Country
		sql_State=row.StateOrProvince
		sql_State=removeBrackets(sql_State.toString())
		sql_Country=removeBrackets(sql_Country.toString())
		sql_Postcode=row.Postcode
		sql_applicationType=row.Discriminator
		sql_applicationId=row.ApplicationId
		sql_policyEndDate=row.PolicyEnd
		String str=sql_policyEndDate.toString()
		//log.info "Date is : "+str
		String sql_year = str.substring(0,4)
		String sql_month = str.substring(5,7)
		String sql_date = str.substring(8,10)
		
		log.info "sql_date  : "+sql_date +" sql_month  : "+sql_month + " sql_year  : "+sql_year 
		//log.info "sql_policyEndDate : "+sql_policyEndDate

		sqlWriter.println(sql_Vesselid+","+sql_RiskId+","+sql_RiskRef+","+sql_ID+","+sql_MemberId+","+sql_OwnerId+","+sql_PartyId+","+sql_Name+","+sql_Reference+","+sql_Email+","+sql_Capacity+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_State+","+sql_Country+","+sql_Postcode+","+sql_applicationId+","+sql_applicationType+","+sql_policyEndDate)
		log.info "SQL Response received as : "+sql_Vesselid+","+sql_RiskId+","+sql_RiskRef+","+sql_ID+","+sql_MemberId+","+sql_OwnerId+","+sql_PartyId+","+sql_Name+","+sql_Reference+","+sql_Email+","+sql_Capacity+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_State+","+sql_Country+","+sql_Postcode+","+sql_applicationId+","+sql_applicationType+","+sql_policyEndDate
	
		//Set the Application ID at test case level
		String appRiskId = sql_Vesselid
		//log.info "appRiskId : "+appRiskId
		testRunner.testCase.setPropertyValue( "AppRiskId", appRiskId)

		//Set the Application ID at test case level
		testRunner.testCase.testSuite.setPropertyValue( "token", token)
		//log.info "===>"+token

		//Set token to test suite level
		testRunner.runTestStepByName('ConfigByOwnerMemberByRiskByAppRiskId')
		String req='${ConfigByOwnerMemberByRiskByAppRiskId#Response}'
		response=context.expand(req)
		log.info "API response is : "+response
		jsonSlurper=new JsonSlurper()
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["ConfigByOwnerMemberByRiskByAppRiskId"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info " API response Status code is : "	+httpStatusCode

		if(httpStatusCode.equals("200") && jsonRes.owners.toString().equals("[]"))
		{
			api_Memberid=jsonRes.members.id[0]
			api_MembermemberId=jsonRes.members.memberId[0]
			api_MemberownerId=jsonRes.members.ownerId[0]
			api_MemberpartyId=jsonRes.members.partyId[0]
			api_Membername=jsonRes.members.name[0]
			api_Memberreference=jsonRes.members.reference[0]
			api_Memberemail=jsonRes.members.email[0]
			api_Membercapacity=jsonRes.members.capacity[0]
			api_addressesid=jsonRes.members.addresses.id
			api_addressesid=removeBrackets(api_addressesid.toString())
			api_addressesaddressName=jsonRes.members.addresses.addressName
			api_addressesaddressName=removeBrackets(api_addressesaddressName.toString())
			api_addressesaddressLine1=jsonRes.members.addresses.addressLine1
			api_addressesaddressLine1=removeBrackets(api_addressesaddressLine1.toString())
			api_addressesaddressLine2=jsonRes.members.addresses.addressLine2
			api_addressesaddressLine2=removeBrackets(api_addressesaddressLine2.toString())
			api_addressesaddressLine3=jsonRes.members.addresses.addressLine3
			api_addressesaddressLine3=removeBrackets(api_addressesaddressLine3.toString())
			api_addressescity=jsonRes.members.addresses.city
			api_addressescity=removeBrackets(api_addressescity.toString())
			api_addressesstate=jsonRes.members.addresses.state
			api_addressesstate=removeBrackets(api_addressesstate.toString())
			api_addressescountry=jsonRes.members.addresses.country
			api_addressescountry=removeBrackets(api_addressescountry.toString())
			api_addressespostalCode=jsonRes.members.addresses.postalCode
			api_addressespostalCode=removeBrackets(api_addressespostalCode.toString())
			api_addressesisPrimaryAddress=jsonRes.members.addresses.isPrimaryAddress
			api_addressesisPrimaryAddress=removeBrackets(api_addressesisPrimaryAddress.toString())
			api_owners=jsonRes.owners
			api_vesselId=jsonRes.vesselId
			arrayMemberAddress=[api_addressesid, api_addressesaddressName,api_addressesaddressLine1,api_addressesaddressLine2,api_addressesaddressLine3,api_addressescity,api_addressesstate,api_addressescountry,api_addressespostalCode,api_addressesisPrimaryAddress]

			apiWriter.println(api_Memberid+","+api_MembermemberId+","+api_MemberownerId+","+api_MemberpartyId+","+api_Membername+","+api_Memberreference+","+api_Memberemail+","+api_Membercapacity+","+arrayMemberAddress[0]+","+arrayMemberAddress[1]+","+arrayMemberAddress[2]+","+arrayMemberAddress[3]+","+arrayMemberAddress[4]+","+arrayMemberAddress[5]+","+arrayMemberAddress[6]+","+arrayMemberAddress[7]+","+arrayMemberAddress[8]+","+arrayMemberAddress[9]+","+api_vesselId)
			log.info "API Response received for only member details : "+api_Memberid+","+api_MembermemberId+","+api_MemberownerId+","+api_MemberpartyId+","+api_Membername+","+api_Memberreference+","+api_Memberemail+","+api_Membercapacity+","+arrayMemberAddress[0]+","+arrayMemberAddress[1]+","+arrayMemberAddress[2]+","+arrayMemberAddress[3]+","+arrayMemberAddress[4]+","+arrayMemberAddress[5]+","+arrayMemberAddress[6]+","+arrayMemberAddress[7]+","+arrayMemberAddress[8]+","+arrayMemberAddress[9]+","+api_vesselId
		}
		else if (httpStatusCode.equals("200") && !jsonRes.owners.toString().equals("[]"))
		{
			api_Memberid=jsonRes.members.id[0]
			api_MembermemberId=jsonRes.members.memberId[0]
			api_MemberownerId=jsonRes.members.ownerId[0]
			api_MemberpartyId=jsonRes.members.partyId[0]
			api_Membername=jsonRes.members.name[0]
			api_Memberreference=jsonRes.members.reference[0]
			api_Memberemail=jsonRes.members.email[0]
			api_Membercapacity=jsonRes.members.capacity[0]
			api_addressesid=jsonRes.members.addresses.id
			api_addressesid=removeBrackets(api_addressesid.toString())
			api_addressesaddressName=jsonRes.members.addresses.addressName
			api_addressesaddressName=removeBrackets(api_addressesaddressName.toString())
			api_addressesaddressLine1=jsonRes.members.addresses.addressLine1
			api_addressesaddressLine1=removeBrackets(api_addressesaddressLine1.toString())
			api_addressesaddressLine2=jsonRes.members.addresses.addressLine2
			api_addressesaddressLine2=removeBrackets(api_addressesaddressLine2.toString())
			api_addressesaddressLine3=jsonRes.members.addresses.addressLine3
			api_addressesaddressLine3=removeBrackets(api_addressesaddressLine3.toString())
			api_addressescity=jsonRes.members.addresses.city
			api_addressescity=removeBrackets(api_addressescity.toString())
			api_addressesstate=jsonRes.members.addresses.state
			api_addressesstate=removeBrackets(api_addressesstate.toString())
			api_addressescountry=jsonRes.members.addresses.country
			api_addressescountry=removeBrackets(api_addressescountry.toString())
			api_addressespostalCode=jsonRes.members.addresses.postalCode
			api_addressespostalCode=removeBrackets(api_addressespostalCode.toString())
			api_addressesisPrimaryAddress=jsonRes.members.addresses.isPrimaryAddress
			api_addressesisPrimaryAddress=removeBrackets(api_addressesisPrimaryAddress.toString())
			api_owners=jsonRes.owners
			api_vesselId=jsonRes.vesselId
			arrayMemberAddress=[api_addressesid, api_addressesaddressName,api_addressesaddressLine1,api_addressesaddressLine2,api_addressesaddressLine3,api_addressescity,api_addressesstate,api_addressescountry,api_addressespostalCode,api_addressesisPrimaryAddress]

			api_Ownerid=jsonRes.owners.id[0]
			api_OwnermemberId=jsonRes.owners.memberId[0]
			api_OwnerownerId=jsonRes.owners.ownerId[0]
			api_OwnerpartyId=jsonRes.owners.partyId[0]
			api_Ownername=jsonRes.owners.name[0]
			api_Ownerreference=jsonRes.owners.reference[0]
			api_Owneremail=jsonRes.owners.email[0]
			api_Ownercapacity=jsonRes.owners.capacity[0]
			api_ownerAddressesid=jsonRes.owners.addresses.id
			api_ownerAddressesid=removeBrackets(api_ownerAddressesid.toString())
			api_ownerAddressesaddressName=jsonRes.owners.addresses.addressName
			api_ownerAddressesaddressName=removeBrackets(api_ownerAddressesaddressName.toString())
			api_ownerAddressesaddressLine1=jsonRes.owners.addresses.addressLine1
			api_ownerAddressesaddressLine1=removeBrackets(api_ownerAddressesaddressLine1.toString())
			api_ownerAddressesaddressLine2=jsonRes.owners.addresses.addressLine2
			api_ownerAddressesaddressLine2=removeBrackets(api_ownerAddressesaddressLine2.toString())
			api_ownerAddressesaddressLine3=jsonRes.owners.addresses.addressLine3
			api_ownerAddressesaddressLine3=removeBrackets(api_ownerAddressesaddressLine3.toString())
			api_ownerAddressescity=jsonRes.owners.addresses.city
			api_ownerAddressescity=removeBrackets(api_ownerAddressescity.toString())
			api_ownerAddressesstate=jsonRes.owners.addresses.state
			api_ownerAddressesstate=removeBrackets(api_ownerAddressesstate.toString())
			api_ownerAddressescountry=jsonRes.owners.addresses.country
			api_ownerAddressescountry=removeBrackets(api_ownerAddressescountry.toString())
			api_ownerAddressespostalCode=jsonRes.owners.addresses.postalCode
			api_ownerAddressespostalCode=removeBrackets(api_ownerAddressespostalCode.toString())
			api_ownerAddressesisPrimaryAddress=jsonRes.owners.addresses.isPrimaryAddress
			api_ownerAddressesisPrimaryAddress=removeBrackets(api_ownerAddressesisPrimaryAddress.toString())
	
			arrayOwnerAddress=[api_ownerAddressesid, api_ownerAddressesaddressName, api_ownerAddressesaddressLine1, api_ownerAddressesaddressLine2, api_ownerAddressesaddressLine3, api_ownerAddressescity, api_ownerAddressesstate, api_ownerAddressescountry, api_ownerAddressespostalCode,api_ownerAddressesisPrimaryAddress]

			apiWriter.println(api_Memberid+","+api_MembermemberId+","+api_MemberownerId+","+api_MemberpartyId+","+api_Membername+","+api_Memberreference+","+api_Memberemail+","+api_Membercapacity+","+arrayMemberAddress[0]+","+arrayMemberAddress[1]+","+arrayMemberAddress[2]+","+arrayMemberAddress[3]+","+arrayMemberAddress[4]+","+arrayMemberAddress[5]+","+arrayMemberAddress[6]+","+arrayMemberAddress[7]+","+arrayMemberAddress[8]+","+arrayMemberAddress[9]+","+api_Ownerid+","+api_OwnermemberId+","+api_OwnerownerId+","+api_OwnerpartyId+","+api_Ownername+","+api_Ownerreference+","+api_Owneremail+","+api_Ownercapacity+","+arrayOwnerAddress[0]+","+arrayOwnerAddress[1]+","+arrayOwnerAddress[2]+","+arrayOwnerAddress[3]+","+arrayOwnerAddress[4]+","+arrayOwnerAddress[5]+","+arrayOwnerAddress[6]+","+arrayOwnerAddress[7]+","+arrayOwnerAddress[8]+","+arrayOwnerAddress[9]+","+api_vesselId)
			log.info api_Memberid+","+"API Response reveived for member and owner details : "+api_Memberid+","+api_MembermemberId+","+api_MemberownerId+","+api_MemberpartyId+","+api_Membername+","+api_Memberreference+","+api_Memberemail+","+api_Membercapacity+","+arrayMemberAddress[0]+","+arrayMemberAddress[1]+","+arrayMemberAddress[2]+","+arrayMemberAddress[3]+","+arrayMemberAddress[4]+","+arrayMemberAddress[5]+","+arrayMemberAddress[6]+","+arrayMemberAddress[7]+","+arrayMemberAddress[8]+","+arrayMemberAddress[9]+","+api_Ownerid+","+api_OwnermemberId+","+api_OwnerownerId+","+api_OwnerpartyId+","+api_Ownername+","+api_Ownerreference+","+api_Owneremail+","+api_Ownercapacity+","+arrayOwnerAddress[0]+","+arrayOwnerAddress[1]+","+arrayOwnerAddress[2]+","+arrayOwnerAddress[3]+","+arrayOwnerAddress[4]+","+arrayOwnerAddress[5]+","+arrayOwnerAddress[6]+","+arrayOwnerAddress[7]+","+arrayOwnerAddress[8]+","+arrayOwnerAddress[9]+","+api_vesselId
		}
		
		else if(httpStatusCode.equals("404"))
		{
			//apiWriter.println(sql_Vesselid+","+jsonRes.Message)
			//log.info sql_Vesselid+","+jsonRes.Message
			//response = response.toString().replace(","," ")
			//log.info "info jsonRes.Message:"+jsonRes.Message
			if(jsonRes.Message.toString().contains("Unable to locate a Policy or Renewal Quote for the risk"))
			{
				if(sql_applicationType.toString().equals("Quote"))
				{
					log.info sql_Vesselid+","+"Application risk Id : "+sql_Vesselid+" associated with application Id : "+sql_applicationId+" is of type"+sql_applicationType+" hence API response is received as :"+response
					apiWriter.println(sql_Vesselid+","+"Application risk Id : "+sql_Vesselid+" associated with application Id : "+sql_applicationId+" is of type "+sql_applicationType+" hence API response is received as :"+response)
					compareWriter.println(sql_Vesselid+","+"Application risk Id : "+sql_Vesselid+" associated with application Id : "+sql_applicationId+" is of type "+sql_applicationType+" hence API response is received as :"+response)
				}
			}
			else if(jsonRes.Message.toString().contains("The Policy End Date") && jsonRes.Message.toString().contains("is in the past."))
			{
				fetchDate=sdf.format(date)
				fetchDate= fetchDate.replace("/", "-")
				fetchDate=fetchDate.replace(":","-")
				//log.info "Today's Date : "+fetchDate
				String todaysYear=fetchDate.substring(6,10)
				String todaysMonth=fetchDate.substring(3,5)
				String todaysDate=fetchDate.substring(0,2)
				log.info "todaysDate : "+todaysDate +" todaysMonth : "+todaysMonth +" todaysYear : "+todaysYear

				if(todaysYear > sql_year)
				{
					log.info "Policy end date is past date hence valid error response is received, hence test case is passed"
					apiWriter.println(sql_Vesselid+","+jsonRes.Message)
					compareWriter.println(sql_Vesselid+","+jsonRes.Message)
				}
				else if (todaysYear <=sql_year)
				{
					if (todaysMonth > sql_month)
					{
						log.info "Policy end date is past date hence valid error response is received, hence test case is passed"
						apiWriter.println(sql_Vesselid+","+jsonRes.Message)
						compareWriter.println(sql_Vesselid+","+jsonRes.Message)
					}
				}
				else if (todaysYear <=sql_year && todaysMonth <= sql_month)
				{
					if (todaysdate > sql_date)
					{
						log.info "Policy end date is past date hence valid error response is received, hence test case is passed"
						apiWriter.println(sql_Vesselid+","+jsonRes.Message)
						compareWriter.println(sql_Vesselid+","+jsonRes.Message)
					}
				}
				else
				{
					log.info "Something went wrong with API need to check the Dates"
					compareWriter.println(sql_Vesselid+","+response)
				}
			}
			else
			{
				apiWriter.println(sql_Vesselid+","+response)
			}
		}
		else
		{
			compareWriter.println(sql_Vesselid+","+response)
		}
		
		counter=counter+1
		log.info "Number of records verified are : "+counter
}

public String removeBrackets(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(",","")
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Script execution finished for Configure By OwnerMember By Risk By ApplicationRiskId************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>AppRiskId</con:name><con:value>180261</con:value></con:property></con:properties></con:testCase><con:testCase id="421fac31-fbbc-4118-959d-d24aff76a70c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByAssociatedParties" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByAssociatedParties" id="6ec2bcfd-fd45-4318-92e3-b1abe0284222"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/associatedParties" methodName="ApplicationByApplicationIdByAssociatedParties" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByAssociatedParties" id="f13e6370-e11d-43f0-a453-9357c174b473" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76161/associatedParties</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByAssociatedParties" id="be3dcfc2-6485-4863-a757-79d04ce28d9c" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for Application By Application Id By Associated Parties************"

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def  con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt = 
"""
USE TOM
SELECT
DISTINCT
TOP 10
AP.Party_Id, AB.Id as ApplicationId, PRT.Name as PartyRoleTypeName, AP.Id as AccociatedPartyId, P.CrmIdentifier, P.IsOrganisation,
case when P.IsOrganisation=0 then 'true' when P.IsOrganisation=1 then 'true' end as IsOrganisationFlag, P.OrganisationName,
P.Salutation, P.FirstName, P.MiddleName, P.LastName, P.SearchName as Name, P.SearchName, P.EmailAddress, P.Telephone, P.Fax,
ADR.Id as Address_Id, ADR.Name as AddressName, ADR.Line1, ADR.Line2, ADR.Line3, ADR.City, ADR.StateOrProvince, RC.Name as Country, ADR.Postcode,
AP.PeriodFrom as AssociationFrom, AP.PeriodTo as AssociationTo,
RSPT.Name as ServiceProvidedType, AP.AdditionalInformation,
--appr.PolicyRiskCount, pr.PartyRiskCount,
case when appr.PolicyRiskCount!=pr.PartyRiskCount then 'false' else 'true' end as AssociatedPartyAppliesToAllRisks,AB.PolicyEnd
from ApplicationBase AB
inner join AssociatedParty AP on AP.Application_Id = AB.Id
inner join Party P on AP.Party_Id = P.Id
inner join ref_PartyRoleType PRT on PRT.Id = AP.PartyRoleType_Id
inner join Address ADR on ADR.Party_Id = P.Id
left join ref_Country RC on ADR.Country_Id = RC.Id
left join ref_ServiceProvidedType RSPT on RSPT.Id = AP.ServiceProvidedType_Id
inner join ApplicationMemberAssured AMA on AMA.Application_Id=Ap.Application_Id
inner join 
		(select ama.Application_Id, count(ar.id) as PolicyRiskCount  from ApplicationRisk ar 
		inner join ApplicationMemberAssured ama on ar.ApplicationMemberAssured_Id = ama.id
		inner join ApplicationBase ab on ab.Id = ama.Application_Id
		group by ama.Application_Id) appr 
on appr.Application_Id = ap.Application_Id
Inner join 
		(select AssociatedParty_Id, count(applicationrisk_id) as PartyRiskCount  
		from ApplicationRiskAssociatedParty where VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0
		group by AssociatedParty_Id) as PR 
		on pr.AssociatedParty_Id = ap.Id
--where AB.Id=91825
--where AB.PolicyEnd<getDate()
order by AB.Id desc, 4
"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ApplicationByApplicationIdByAssociatedParty.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ApplicationByApplicationIdByAssociatedParty.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_Get_ApplicationByApplicationIdByAssociatedParty.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ApplicationByApplicationIdByAssociatedParty"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ApplicationByApplicationIdByAssociatedParty"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_Get_ApplicationByApplicationIdByAssociatedParty"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_Party_Id"+","+"SQL_PartyRoleTypeName"+","+"SQL_AccociatedPartyId"+","+"SQL_CrmIdentifier"+","+"SQL_IsOrganisationFlag"+","+"SQL_OrganisationName"+","+"SQL_Salutation"+","+"SQL_FirstName"+","+"SQL_MiddleName"+","+"SQL_LastName"+","+"SQL_Name"+","+"SQL_SearchName"+","+"SQL_EmailAddress"+","+"SQL_Telephone"+","+"SQL_Fax"+","+"SQL_Address_Id"+","+"SQL_AddressName"+","+"SQL_Line1"+","+"SQL_Line2"+","+"SQL_Line3"+","+"SQL_City"+","+"SQL_StateOrProvince"+","+"SQL_Country"+","+"SQL_Postcode"+","+"SQL_AssociationFrom"+","+"SQL_AssociationTo"+","+"SQL_ServiceProvidedType"+","+"SQL_AdditionalInformation"+","+"SQL_AssociatedPartyAppliesToAllRisks"+","+"SQL_PolicyEndDate")
apiWriter.println("SQL_ApplicationId"+","+"API_Party_Id"+","+"API_PartyRoleTypeName"+","+"API_AccociatedPartyId"+","+"API_CrmIdentifier"+","+"API_IsOrganization"+","+"API_OrganisationName"+","+"API_Salutation"+","+"API_FirstName"+","+"API_MiddleName"+","+"API_LastName"+","+"API_Name"+","+"API_SearchName"+","+"API_EmailAddress"+","+"API_Telephone"+","+"API_Fax"+","+"API_Address_Id"+","+"API_AddressName"+","+"API_Line1"+","+"API_Line2"+","+"API_Line3"+","+"API_City"+","+"API_StateOrProvince"+","+"API_Country"+","+"API_Postcode"+","+"API_AssociationFrom"+","+"API_AssociationTo"+","+"API_Capacities"+","+"API_ServiceProvidedType"+","+"API_AdditionalInformation"+","+"API_AssociatedPartyAppliesToAllRisks")
compareWriter.println("SQL_ApplicationId"+","+"SQL_Party_Id"+","+"API_AccociatedPartyId"+","+"SQL_PartyRoleTypeName"+","+"API_PartyRoleTypeName"+","+"SQL_AccociatedPartyId"+","+"API_Party_Id"+","+"SQL_CrmIdentifier"+","+"API_CrmIdentifier"+","+"SQL_IsOrganisationFlag"+","+"API_IsOrganization"+","+"SQL_OrganisationName"+","+"API_OrganisationName"+","+"SQL_Salutation"+","+"API_Salutation"+","+"SQL_FirstName"+","+"API_FirstName"+","+"SQL_MiddleName"+","+"API_MiddleName"+","+"SQL_LastName"+","+"API_LastName"+","+"SQL_Name"+","+"API_Name"+","+"SQL_SearchName"+","+"API_SearchName"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_Telephone"+","+"API_Telephone"+","+"SQL_Fax"+","+"API_Fax"+","+"SQL_Address_Id"+","+"API_Address_Id"+","+"SQL_AddressName"+","+"API_AddressName"+","+"SQL_Line1"+","+"API_Line1"+","+"SQL_Line2"+","+"API_Line2"+","+"SQL_Line3"+","+"API_Line3"+","+"SQL_City"+","+"API_City"+","+"SQL_StateOrProvince"+","+"API_StateOrProvince"+","+"SQL_Country"+","+"API_Country"+","+"SQL_Postcode"+","+"API_Postcode"+","+"SQL_AssociationFrom"+","+"API_AssociationFrom"+","+"SQL_AssociationTo"+","+"API_AssociationTo"+","+"SQL_Capacity"+","+"API_Capacities"+","+"SQL_ServiceProvidedType"+","+"API_ServiceProvidedType"+","+"SQL_AdditionalInformation"+","+"API_AdditionalInformation"+","+"SQL_AssociatedPartyAppliesToAllRisks"+","+"API_AssociatedPartyAppliesToAllRisks"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;

con.eachRow(sqlstmt)
{
	row ->
		sql_ApplicationId=row.ApplicationId
		sql_Party_Id=row.Party_Id
		sql_PartyRoleTypeName=row.PartyRoleTypeName
		sql_AccociatedPartyId=row.AccociatedPartyId
		sql_CrmIdentifier=row.CrmIdentifier
		sql_IsOrganisationFlag=row.IsOrganisationFlag
		sql_OrganisationName=row.OrganisationName
		sql_Salutation=row.Salutation
		sql_FirstName=row.FirstName
		sql_MiddleName=row.MiddleName
		sql_LastName=row.LastName
		sql_Name=row.Name
		sql_SearchName=row.SearchName
		sql_EmailAddress=row.EmailAddress
		sql_Telephone=row.Telephone
		sql_Fax=row.Fax
		sql_Address_Id=row.Address_Id
		sql_AddressName=row.AddressName
		sql_Line1=row.Line1
		sql_Line2=row.Line2
		sql_Line3=row.Line3
		sql_City=row.City
		sql_StateOrProvince=row.StateOrProvince
		sql_Country=row.Country
		sql_Postcode=row.Postcode
		sql_AssociationFrom=row.AssociationFrom
		sql_AssociationTo=row.AssociationTo
		sql_ServiceProvidedType=row.serviceProvidedType
		sql_AdditionalInformation=row.additionalInformation
		sql_AssociatedPartyAppliesToAllRisks=row.AssociatedPartyAppliesToAllRisks
		sql_PolicyEndDate=row.PolicyEnd
		sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" +00:00","")
		//log.info "Policy End Date="+sql_PolicyEndDate
		
		date= new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
		date = new Date()
		getDateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
		String todaysDate=getDateFormat.format(date)
		todaysDate=todaysDate.toString().replace("/","-")
		//log.info "Today's Date is="+todaysDate

		sqlWriter.println(sql_ApplicationId+","+sql_Party_Id+","+sql_PartyRoleTypeName+","+sql_AccociatedPartyId+","+sql_CrmIdentifier+","+sql_IsOrganisationFlag+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_Address_Id+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode+","+sql_AssociationFrom+","+sql_AssociationTo+","+sql_ServiceProvidedType+","+sql_AdditionalInformation+","+sql_AssociatedPartyAppliesToAllRisks+","+sql_PolicyEndDate)
		log.info "SQL Response received as : "+sql_ApplicationId+","+sql_Party_Id+","+sql_PartyRoleTypeName+","+sql_AccociatedPartyId+","+sql_CrmIdentifier+","+sql_IsOrganisationFlag+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_Address_Id+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode+","+sql_AssociationFrom+","+sql_AssociationTo+","+sql_ServiceProvidedType+","+sql_AdditionalInformation+","+sql_AssociatedPartyAppliesToAllRisks+","+sql_PolicyEndDate
	
		//Set the Application ID at test case level
		String applicationId = sql_ApplicationId
		testRunner.testCase.setPropertyValue( "applicationId", applicationId)

		//Set the Application ID at test case level
		testRunner.testCase.testSuite.setPropertyValue( "token", token)
		//log.info "===>"+token

		//Set token to test suite level
		testRunner.runTestStepByName('AppByAppIdByAssociatedParties')
		String req='${AppByAppIdByAssociatedParties#Response}'
		response=context.expand(req)
		//log.info "API response is : "+response
		jsonSlurper=new JsonSlurper()
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["AppByAppIdByAssociatedParties"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info "API Status code is : "+httpStatusCode

		//String error = response
		if(httpStatusCode.equals("200") && sql_PolicyEndDate.toString()>todaysDate)
		{
			//log.info "Number of records in response are : "+jsonRes.totalRecords
			//getAPIPropertyValue(jsonRes, apiWriter, con)
				
				for(int i=0; i<jsonRes.totalRecords; i++)
				{
					api_Party_Id=jsonRes.results.id[i]
					if (sql_AccociatedPartyId.toString().equals(api_Party_Id.toString()))
					{
						api_AccociatedPartyId=jsonRes.results.id[i]
						api_AccociatedPartyId=removeBrackets(api_AccociatedPartyId.toString())
						api_PartyRoleTypeName=jsonRes.results.partyRoleTypeName[i]
						api_PartyRoleTypeName=removeBrackets(api_PartyRoleTypeName.toString())
						api_Party_Id=jsonRes.results.party.id[i]
						api_Party_Id=removeBrackets(api_Party_Id.toString())
						api_CrmIdentifier=jsonRes.results.party.crmIdentifier[i]
						api_CrmIdentifier=removeBrackets(api_CrmIdentifier.toString())
						api_IsOrganization=jsonRes.results.party.isOrganisation[i]
						api_IsOrganization=removeBrackets(api_IsOrganization.toString())
						api_OrganisationName=jsonRes.results.party.organisationName[i]
						api_OrganisationName=removeBrackets(api_OrganisationName.toString())
						api_Salutation=jsonRes.results.party.salutation[i]
						api_Salutation=removeBrackets(api_Salutation.toString())
						api_FirstName=jsonRes.results.party.firstName[i]
						api_FirstName=removeBrackets(api_FirstName.toString())
						api_MiddleName=jsonRes.results.party.middleName[i]
						api_MiddleName=removeBrackets(api_MiddleName.toString())
						api_LastName=jsonRes.results.party.lastName[i]
						api_LastName=removeBrackets(api_LastName.toString())
						api_Name=jsonRes.results.party.name[i]
						api_Name=removeBrackets(api_Name.toString())
						api_SearchName=jsonRes.results.party.searchName[i]
						api_SearchName=removeBrackets(api_SearchName.toString())
						api_EmailAddress=jsonRes.results.party.emailAddress[i]
						api_EmailAddress=removeBrackets(api_EmailAddress.toString())
						api_Telephone=jsonRes.results.party.telephone[i]
						api_Telephone=removeBrackets(api_Telephone.toString())
						api_Fax=jsonRes.results.party.fax[i]
						api_Fax=removeBrackets(api_Fax.toString())
						api_Address_Id=jsonRes.results.party.addresses.id[i]
						api_Address_Id=removeBrackets(api_Address_Id.toString())
						api_AddressName=jsonRes.results.party.addresses.addressName[i]
						api_AddressName=removeBrackets(api_AddressName.toString())
						api_Line1=jsonRes.results.party.addresses.addressLine1[i]
						api_Line1=removeBrackets(api_Line1.toString())
						api_Line2=jsonRes.results.party.addresses.addressLine2[i]
						api_Line2=removeBrackets(api_Line2.toString())
						api_Line3=jsonRes.results.party.addresses.addressLine3[i]
						api_Line3=removeBrackets(api_Line3.toString())
						api_City=jsonRes.results.party.addresses.city[i]
						api_City=removeBrackets(api_City.toString())
						api_StateOrProvince=jsonRes.results.party.addresses.state[i]
						api_StateOrProvince=removeBrackets(api_StateOrProvince.toString())
						api_Country=jsonRes.results.party.addresses.country[i]
						api_Country=removeBrackets(api_Country.toString())
						api_Postcode=jsonRes.results.party.addresses.postalCode[i]
						api_Postcode=removeBrackets(api_Postcode.toString())
						api_AssociationFrom=jsonRes.results.associationFrom[i]
						if(api_AssociationFrom!=null && api_AssociationFrom.toString().contains("T"))
						{
							api_AssociationFrom=removeBrackets(api_AssociationFrom.toString())
							api_AssociationFrom = api_AssociationFrom.toString().replace("T", " ")
							api_AssociationFrom = api_AssociationFrom.toString().replace("+", " +")
						}
						api_AssociationTo=jsonRes.results.associationTo[i]
						api_AssociationTo=removeBrackets(api_AssociationTo.toString())
						if(api_AssociationTo!=null && api_AssociationTo.toString().contains("T"))
						{
							api_AssociationTo=removeBrackets(api_AssociationTo.toString())
							api_AssociationTo = api_AssociationTo.toString().replace("T", " ")
							api_AssociationTo = api_AssociationTo.toString().replace("+", " +")
						}
						api_Capacities=jsonRes.results.capacities[i]
						api_Capacities=removeBrackets(api_Capacities.toString())
						if(api_Capacities.toString().equals(null) || api_Capacities.toString().equals("") || api_Capacities.toString().equals("[]"))
							api_Capacities=null
						
						int appId=sql_ApplicationId.toInteger()
						String getCapacitySQL=	
						"""
						use tom
						declare
						@ApplicationId int ="""+appId+"""
						select AB.Id as AppId, AP.Id AssciatePartyId, RCT.Name as Capacity
						from AssociatedParty AP
						left join AssociatedPartyCapacityAssociation APCA on APCA.AssociatedParty_Id = AP.Id
						left join ref_CapacityType RCT on RCT.Id=APCA.CapacityType_Id
						inner join ApplicationBase AB on AP.Application_Id = AB.Id
						where AB.Id=@ApplicationId 
						"""
						String oldAssciatePartyId=sql_AccociatedPartyId
						String newCapacity="Test"
						con.eachRow(getCapacitySQL)
						{
							rows->
							sql_AssciatePartyId1=rows.AssciatePartyId
							if(oldAssciatePartyId.toString().equals(sql_AssciatePartyId1.toString()))
							{
								sql_Capacity=rows.Capacity							
								sql_AppId=rows.AppId
								newCapacity=newCapacity+""+sql_Capacity
							}
						}
						newCapacity=newCapacity.replace("Test","")
						newCapacity=newCapacity.replace(" ","")
						api_Capacities=api_Capacities.toString().replace(" ","")
						//log.info sql_AccociatedPartyId+"->"+newCapacity
						//log.info api_AccociatedPartyId+"->"+api_Capacities
						sql_Capacities=newCapacity
						
						api_ServiceProvidedType=jsonRes.results.serviceProvidedType[i]
						api_AdditionalInformation=jsonRes.results.additionalInformation[i]
						api_AssociatedPartyAppliesToAllRisks=jsonRes.results.associatedPartyAppliesToAllRisks[i]
						
						apiWriter.println(sql_ApplicationId+","+api_Party_Id+","+api_PartyRoleTypeName+","+api_AccociatedPartyId+","+api_CrmIdentifier+","+api_IsOrganization+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_Address_Id+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode+","+api_AssociationFrom+","+api_AssociationTo+","+api_Capacities+","+api_ServiceProvidedType+","+api_AdditionalInformation+","+api_AssociatedPartyAppliesToAllRisks)
						log.info "API Response received as :"+sql_ApplicationId+","+api_Party_Id+","+api_PartyRoleTypeName+","+api_AccociatedPartyId+","+api_CrmIdentifier+","+api_IsOrganization+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_Address_Id+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode+","+api_AssociationFrom+","+api_AssociationTo+","+api_Capacities+","+api_ServiceProvidedType+","+api_AdditionalInformation+","+api_AssociatedPartyAppliesToAllRisks
					
						if(sql_Party_Id.toString().equals(api_Party_Id.toString()) && 
						sql_PartyRoleTypeName.toString().toUpperCase().equals(api_PartyRoleTypeName.toString().toUpperCase()) && 
						sql_AccociatedPartyId.toString().equals(api_AccociatedPartyId.toString()) && 
						sql_CrmIdentifier.toString().toUpperCase().equals(api_CrmIdentifier.toString().toUpperCase()) && 
						sql_OrganisationName.toString().toUpperCase().equals(api_OrganisationName.toString().toUpperCase()) && 
						sql_Salutation.toString().toUpperCase().equals(api_Salutation.toString().toUpperCase()) && 
						sql_FirstName.toString().toUpperCase().equals(api_FirstName.toString().toUpperCase()) && 
						sql_MiddleName.toString().toUpperCase().equals(api_MiddleName.toString().toUpperCase()) && 
						sql_LastName.toString().toUpperCase().equals(api_LastName.toString().toUpperCase()) && 
						sql_SearchName.toString().toUpperCase().equals(api_SearchName.toString().toUpperCase()) && 
						sql_EmailAddress.toString().toUpperCase().equals(api_EmailAddress.toString().toUpperCase()) && 
						sql_Telephone.toString().equals(api_Telephone.toString()) && sql_Fax.toString().equals(api_Fax.toString()) && 
						sql_Address_Id.toString().equals(api_Address_Id.toString()) && 
						sql_AddressName.toString().toUpperCase().equals(api_AddressName.toString().toUpperCase()) && 
						sql_Line1.toString().toUpperCase().equals(api_Line1.toString().toUpperCase()) && 
						sql_Line2.toString().toUpperCase().equals(api_Line2.toString().toUpperCase()) && 
						sql_Line3.toString().toUpperCase().equals(api_Line3.toString().toUpperCase()) && 
						sql_City.toString().toUpperCase().equals(api_City.toString().toUpperCase()) && 
						sql_StateOrProvince.toString().toUpperCase().equals(api_StateOrProvince.toString().toUpperCase()) && 
						sql_Country.toString().toUpperCase().equals(api_Country.toString().toUpperCase()) && 
						sql_Postcode.toString().toUpperCase().equals(api_Postcode.toString().toUpperCase())&& 
						sql_IsOrganisationFlag.toString().toUpperCase().equals(api_IsOrganization.toString().toUpperCase()) &&
						sql_AssociationFrom.toString().equals(api_AssociationFrom.toString()) && 
						sql_AssociationTo.toString().equals(api_AssociationTo.toString()) &&
						sql_ServiceProvidedType.toString().toUpperCase().equals(api_ServiceProvidedType.toString().toUpperCase()) &&
						sql_AdditionalInformation.toString().toUpperCase().equals(api_AdditionalInformation.toString().toUpperCase())&&
						sql_Capacities.toString().contains(api_Capacities.toString())
						)
						{
							log.info "Details are matching hence test case is passed."+sql_ApplicationId+","+sql_Party_Id+","+api_AccociatedPartyId+","+sql_PartyRoleTypeName+","+api_PartyRoleTypeName+","+sql_AccociatedPartyId+","+api_Party_Id+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_IsOrganisationFlag+","+api_IsOrganization+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Salutation+","+api_Salutation+","+sql_FirstName+","+api_FirstName+","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_Name+","+api_Name+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_Address_Id+","+api_Address_Id+","+sql_AddressName+","+api_AddressName+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+sql_AssociationFrom+","+api_AssociationFrom+","+sql_AssociationTo+","+api_AssociationTo+","+sql_Capacity+","+api_Capacities+","+sql_ServiceProvidedType+","+api_ServiceProvidedType+","+sql_AdditionalInformation+","+api_AdditionalInformation+","+sql_AssociatedPartyAppliesToAllRisks+","+api_AssociatedPartyAppliesToAllRisks
							compareWriter.println(sql_ApplicationId+","+sql_Party_Id+","+api_AccociatedPartyId+","+sql_PartyRoleTypeName+","+api_PartyRoleTypeName+","+sql_AccociatedPartyId+","+api_Party_Id+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_IsOrganisationFlag+","+api_IsOrganization+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Salutation+","+api_Salutation+","+sql_FirstName+","+api_FirstName+","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_Name+","+api_Name+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_Address_Id+","+api_Address_Id+","+sql_AddressName+","+api_AddressName+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+sql_AssociationFrom+","+api_AssociationFrom+","+sql_AssociationTo+","+api_AssociationTo+","+sql_Capacity+","+api_Capacities+","+sql_ServiceProvidedType+","+api_ServiceProvidedType+","+sql_AdditionalInformation+","+api_AdditionalInformation+","+sql_AssociatedPartyAppliesToAllRisks+","+api_AssociatedPartyAppliesToAllRisks+","+"Test Case Passed")
							
						}
						else
						{
							log.info "Details are not matching hence test case is failed."+sql_ApplicationId+","+sql_Party_Id+","+api_AccociatedPartyId+","+sql_PartyRoleTypeName+","+api_PartyRoleTypeName+","+sql_AccociatedPartyId+","+api_Party_Id+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_IsOrganisationFlag+","+api_IsOrganization+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Salutation+","+api_Salutation+","+sql_FirstName+","+api_FirstName+","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_Name+","+api_Name+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_Address_Id+","+api_Address_Id+","+sql_AddressName+","+api_AddressName+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+sql_AssociationFrom+","+api_AssociationFrom+","+sql_AssociationTo+","+api_AssociationTo+","+sql_Capacity+","+api_Capacities+","+sql_ServiceProvidedType+","+api_ServiceProvidedType+","+sql_AdditionalInformation+","+api_AdditionalInformation+","+sql_AssociatedPartyAppliesToAllRisks+","+api_AssociatedPartyAppliesToAllRisks
							compareWriter.println(sql_ApplicationId+","+sql_Party_Id+","+api_AccociatedPartyId+","+sql_PartyRoleTypeName+","+api_PartyRoleTypeName+","+sql_AccociatedPartyId+","+api_Party_Id+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_IsOrganisationFlag+","+api_IsOrganization+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Salutation+","+api_Salutation+","+sql_FirstName+","+api_FirstName+","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_Name+","+api_Name+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_Address_Id+","+api_Address_Id+","+sql_AddressName+","+api_AddressName+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+sql_AssociationFrom+","+api_AssociationFrom+","+sql_AssociationTo+","+api_AssociationTo+","+sql_Capacity+","+api_Capacities+","+sql_ServiceProvidedType+","+api_ServiceProvidedType+","+sql_AdditionalInformation+","+api_AdditionalInformation+","+sql_AssociatedPartyAppliesToAllRisks+","+api_AssociatedPartyAppliesToAllRisks+","+"Test Case Failed")
						}
					}
				}
		}
		else if(httpStatusCode.equals("401"))
		{
			apiWriter.println(sql_ApplicationId+","+jsonRes.message)
			message = jsonRes.message.toString()
			message = message.replace(","," ")
			compareWriter.println(sql_ApplicationId+","+message+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test Case is failed")
			log.info "For application id =>"+sql_ApplicationId+" response is received as =>"+jsonRes.message
		}
		else if(httpStatusCode.equals("404"))
		{
			if(jsonRes.Message.toString().contains("is in the past") && todaysDate.toString()>sql_PolicyEndDate.toString())
			{
				message = jsonRes.Message.toString()
				message = message.replace(","," ")
				apiWriter.println(sql_ApplicationId+","+message)
				compareWriter.println(sql_ApplicationId+","+message+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test Case is passed")
				log.info "For application id =>"+sql_ApplicationId+" policy end date is past date hence test case is passed by receiving valid response=>"+jsonRes.Message
			}
		}
		else if(httpStatusCode.equals("200") && todaysDate.toString()>sql_PolicyEndDate.toString())
		{
			getAPIPropertyValue(jsonRes, apiWriter, con)
			compareWriter.println(sql_ApplicationId+","+message+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test case failed because Associated Party details are displayed into API response even though policy end date is past date")
			log.info "For application id =>"+sql_ApplicationId+" Associated Party details are displayed into API response even though policy end date is past date"
		}
		else
		{
			compareWriter.println(sql_ApplicationId+","+jsonRes+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test Case is failed")
			log.info ("Invalid API response is received hence test case is failed.")
		}
		counter=counter+1
		log.info "Total of records verified are : "+counter
}
public void getAPIPropertyValue(def jsonRes, def apiWriter, def con)
{
	for(int i=0; i<jsonRes.totalRecords; i++)
	{
		api_Party_Id=jsonRes.results.id[i]
		api_AccociatedPartyId=jsonRes.results.id[i]
		api_AccociatedPartyId=removeBrackets(api_AccociatedPartyId.toString())
		api_PartyRoleTypeName=jsonRes.results.partyRoleTypeName[i]
		api_PartyRoleTypeName=removeBrackets(api_PartyRoleTypeName.toString())
		api_Party_Id=jsonRes.results.party.id[i]
		api_Party_Id=removeBrackets(api_Party_Id.toString())
		api_CrmIdentifier=jsonRes.results.party.crmIdentifier[i]
		api_CrmIdentifier=removeBrackets(api_CrmIdentifier.toString())
		api_IsOrganization=jsonRes.results.party.isOrganisation[i]
		api_IsOrganization=removeBrackets(api_IsOrganization.toString())
		api_OrganisationName=jsonRes.results.party.organisationName[i]
		api_OrganisationName=removeBrackets(api_OrganisationName.toString())
		api_Salutation=jsonRes.results.party.salutation[i]
		api_Salutation=removeBrackets(api_Salutation.toString())
		api_FirstName=jsonRes.results.party.firstName[i]
		api_FirstName=removeBrackets(api_FirstName.toString())
		api_MiddleName=jsonRes.results.party.middleName[i]
		api_MiddleName=removeBrackets(api_MiddleName.toString())
		api_LastName=jsonRes.results.party.lastName[i]
		api_LastName=removeBrackets(api_LastName.toString())
		api_Name=jsonRes.results.party.name[i]
		api_Name=removeBrackets(api_Name.toString())
		api_SearchName=jsonRes.results.party.searchName[i]
		api_SearchName=removeBrackets(api_SearchName.toString())
		api_EmailAddress=jsonRes.results.party.emailAddress[i]
		api_EmailAddress=removeBrackets(api_EmailAddress.toString())
		api_Telephone=jsonRes.results.party.telephone[i]
		api_Telephone=removeBrackets(api_Telephone.toString())
		api_Fax=jsonRes.results.party.fax[i]
		api_Fax=removeBrackets(api_Fax.toString())
		api_Address_Id=jsonRes.results.party.addresses.id[i]
		api_Address_Id=removeBrackets(api_Address_Id.toString())
		api_AddressName=jsonRes.results.party.addresses.addressName[i]
		api_AddressName=removeBrackets(api_AddressName.toString())
		api_Line1=jsonRes.results.party.addresses.addressLine1[i]
		api_Line1=removeBrackets(api_Line1.toString())
		api_Line2=jsonRes.results.party.addresses.addressLine2[i]
		api_Line2=removeBrackets(api_Line2.toString())
		api_Line3=jsonRes.results.party.addresses.addressLine3[i]
		api_Line3=removeBrackets(api_Line3.toString())
		api_City=jsonRes.results.party.addresses.city[i]
		api_City=removeBrackets(api_City.toString())
		api_StateOrProvince=jsonRes.results.party.addresses.state[i]
		api_StateOrProvince=removeBrackets(api_StateOrProvince.toString())
		api_Country=jsonRes.results.party.addresses.country[i]
		api_Country=removeBrackets(api_Country.toString())
		api_Postcode=jsonRes.results.party.addresses.postalCode[i]
		api_Postcode=removeBrackets(api_Postcode.toString())
		api_AssociationFrom=jsonRes.results.associationFrom[i]
		if(api_AssociationFrom!=null && api_AssociationFrom.toString().contains("T"))
		{
			api_AssociationFrom=removeBrackets(api_AssociationFrom.toString())
			api_AssociationFrom = api_AssociationFrom.toString().replace("T", " ")
			api_AssociationFrom = api_AssociationFrom.toString().replace("+", " +")
		}
		api_AssociationTo=jsonRes.results.associationTo[i]
		api_AssociationTo=removeBrackets(api_AssociationTo.toString())
		if(api_AssociationTo!=null && api_AssociationTo.toString().contains("T"))
		{
			api_AssociationTo=removeBrackets(api_AssociationTo.toString())
			api_AssociationTo = api_AssociationTo.toString().replace("T", " ")
			api_AssociationTo = api_AssociationTo.toString().replace("+", " +")
		}
		api_Capacities=jsonRes.results.capacities[i]
		api_Capacities=removeBrackets(api_Capacities.toString())
		if(api_Capacities.toString().equals(null) || api_Capacities.toString().equals("") || api_Capacities.toString().equals("[]"))
			api_Capacities=null
		
		int appId=sql_ApplicationId.toInteger()
		String getCapacitySQL=	
		"""
		use tom
		declare
		@ApplicationId int ="""+appId+"""
		select AB.Id as AppId, AP.Id AssciatePartyId, RCT.Name as Capacity
		from AssociatedParty AP
		left join AssociatedPartyCapacityAssociation APCA on APCA.AssociatedParty_Id = AP.Id
		left join ref_CapacityType RCT on RCT.Id=APCA.CapacityType_Id
		inner join ApplicationBase AB on AP.Application_Id = AB.Id
		where AB.Id=@ApplicationId 
		"""
		String oldAssciatePartyId=sql_AccociatedPartyId
		String newCapacity="Test"
		con.eachRow(getCapacitySQL)
		{
			rows->
			sql_AssciatePartyId1=rows.AssciatePartyId
			if(oldAssciatePartyId.toString().equals(sql_AssciatePartyId1.toString()))
			{
				sql_Capacity=rows.Capacity							
				sql_AppId=rows.AppId
				newCapacity=newCapacity+""+sql_Capacity
			}
		}
		newCapacity=newCapacity.replace("Test","")
		newCapacity=newCapacity.replace(" ","")
		api_Capacities=api_Capacities.toString().replace(" ","")
		//log.info sql_AccociatedPartyId+"->"+newCapacity
		//log.info api_AccociatedPartyId+"->"+api_Capacities
		sql_Capacities=newCapacity
		
		api_ServiceProvidedType=jsonRes.results.serviceProvidedType[i]
		api_AdditionalInformation=jsonRes.results.additionalInformation[i]
		api_AssociatedPartyAppliesToAllRisks=jsonRes.results.associatedPartyAppliesToAllRisks[i]
		
		apiWriter.println(sql_ApplicationId+","+api_Party_Id+","+api_PartyRoleTypeName+","+api_AccociatedPartyId+","+api_CrmIdentifier+","+api_IsOrganization+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_Address_Id+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode+","+api_AssociationFrom+","+api_AssociationTo+","+api_Capacities+","+api_ServiceProvidedType+","+api_AdditionalInformation+","+api_AssociatedPartyAppliesToAllRisks)
		log.info "API Response received as :"+sql_ApplicationId+","+api_Party_Id+","+api_PartyRoleTypeName+","+api_AccociatedPartyId+","+api_CrmIdentifier+","+api_IsOrganization+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_Address_Id+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode+","+api_AssociationFrom+","+api_AssociationTo+","+api_Capacities+","+api_ServiceProvidedType+","+api_AdditionalInformation+","+api_AssociatedPartyAppliesToAllRisks
	}	
}
public String removeBrackets(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Script execution started for Application By Application Id By Associated Parties************"
log.info "************Execution Ended at "+newDateTimeString+"************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>92483</con:value></con:property><con:property><con:name>token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ilg1ZVhrNHh5b2pORnVtMWtsMll0djhkbE5QNC1jNTdkTzZRR1RWQndhTmsifQ.eyJpc3MiOiJodHRwczovL3NoaXBvd25lcnNjb3VrZGV2YjJjLmIyY2xvZ2luLmNvbS81YzJlY2M4OC1kNmNlLTRkNDEtYThhMi05ZTAzMTc0N2M3ZTYvdjIuMC8iLCJleHAiOjE2MTQwMDg4MzEsIm5iZiI6MTYxNDAwNTIzMSwiYXVkIjoiZTQ4NTNjODItNjhjYS00OTk5LTk3NjAtZmZjODkxODk4NGJhIiwib2lkIjoiMTdlYzIyNjQtODZmNS00YWM1LWI3NTItMzkxZmE3ZTVmOWIzIiwic3ViIjoiMTdlYzIyNjQtODZmNS00YWM1LWI3NTItMzkxZmE3ZTVmOWIzIiwibmFtZSI6IlBhbmRpIFRlc3QtT25lIiwiZ2l2ZW5fbmFtZSI6IlBhbmRpIiwiam9iVGl0bGUiOiJCcm9rZXIiLCJleHRlbnNpb25fc3BsX2lkZW50aWZpZXIiOiI4NzI3MWZmOS1iNmY4LWVhMTEtYTgxNS0wMDBkM2FkYjY1NGQiLCJleHRlbnNpb25fc3BsX3JlZmVyZW5jZSI6IjQ1OSIsImZhbWlseV9uYW1lIjoiVGVzdC1PbmUiLCJleHRlbnNpb25fc3BsX3Rlcm1zYWNjZXB0ZWQiOiJ2MSIsImVtYWlscyI6WyJwaXRlc3Ricm9rZXIxQGdtYWlsLmNvbSJdLCJ0ZnAiOiJCMkNfMV9zcGx3ZWJwb3J0YWxkZXZzaWduaW5tZmEiLCJub25jZSI6IiIsInNjcCI6InRyYWRpbmctY2VydHMucmVhZCIsImF6cCI6ImZlZTUzNDUwLWQ4MzQtNGU0MC1hM2FjLTljMmMyNDJkYmIzMCIsInZlciI6IjEuMCIsImlhdCI6MTYxNDAwNTIzMX0.pMZTfdxWYtUGo6nRGiOvw088I2Ci9RmzbC8RYf9Q5kAWyolPiqGxg2cEfuIbchTpTjiA2QzCTUYlpRdNqKaUrQTH_YHHPFxvG4b4XdrtNwbeLtHYDM60fBfEUCNEE6ThDpAkD_1bb4D2658T9xSpcW0ft4BnP6-pjAtUtVUIXx1Rno58Y0szh5Q7vpSaqNJCV59SY51aHO2t5jUkuyCGFguOo6jD7CGotJAgo7rt8_lEQ0eLCmHdUVXYvABIospUs2IwWnLxdZYkk3Wr4-UNqEzTV_IDzPvmIikTvYZ45YtJERi2KV0xwZuh3rlEYhZZ_uCRMnaBLMCAIgk-F--pOg</con:value></con:property></con:properties></con:testCase><con:testCase id="10dc9ddc-cc9b-476a-8c4c-396aea63cd0f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByBrokers" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByBroker" id="ee03f4f7-2c31-4556-b56b-4e5bac8c3ee6"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/brokers" methodName="ApplicationByApplicaitonIdByBrokers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByBroker" id="c5aadab0-2eeb-4e6a-ab8b-718b70090e48" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76130/brokers</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByBroker" id="2edd3954-dd73-447f-a82d-4b0192bae372" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import org.apache.poi.ss.util.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for  Application by Application Id By Brokers************"
			
String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}

String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
"""
USE TOM
Select
TOP 200
AB.Id as ApplicationId, ABR.Broker_Id as BrokerId, B.Reference as BrokerReference, P.Id as PartyId, P.CrmIdentifier,
case when P.IsOrganisation=0 then 'true' when P.IsOrganisation=1 then 'true' end as IsOrganisationFlag, P.OrganisationName, 
P.Salutation, P.FirstName, P.MiddleName, P.LastName,  P.SearchName as Name, P.SearchName, P.EmailAddress, P.Telephone, P.Fax,
A.Id as AddressId, A.Name as AddressName, A.Line1, A.Line2, A.Line3, A.City, A.StateOrProvince, C.Name as Country, A.Postcode, AB.PolicyEnd
from ApplicationBase AB
inner join ApplicationBroker ABR on ABR.Application_Id = AB.Id
left join Broker B on B.Id=ABR.Broker_Id
left join Party P on P.Id=B.Party_Id
left join Address A on A.Party_Id = P.Id 
left join ref_Country C on C.Id = A.Country_Id 
--where AB.Id in (91880,91879,91878,91877,91876)
--where AB.PolicyEnd<getDate()
order by 1 desc, 2
"""

def rows=con.rows(sqlstmt)  
int db_size=rows.size

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ApplicationByApplicationIdByBrokers.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ApplicationByApplicationIdByBrokers.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ApplicationByApplicationIdByBrokers.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ApplicationByApplicationIdByBrokers"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ApplicationByApplicationIdByBrokers"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ApplicationByApplicationIdByBrokers"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_BrokerId"+","+"SQL_BrokerReference"+","+"SQL_PartyId"+","+"SQL_CrmIdentifier"+","+"SQL_IsOrganisation"+","+"SQL_OrganisationName"+","+"SQL_Salutation"+","+"SQL_FirstName"+","+"SQL_MiddleName"+","+"SQL_LastName"+","+"SQL_Name"+","+"SQL_SearchName"+","+"SQL_EmailAddress"+","+"SQL_Telephone"+","+"SQL_Fax"+","+"SQL_AddressId"+","+"SQL_AddressName"+","+"SQL_Line1"+","+"SQL_Line2"+","+"SQL_Line3"+","+"SQL_City"+","+"SQL_StateOrProvince"+","+"SQL_Country"+","+"SQL_Postcode"+","+"SQL_PolicyEndDate"+","+"Today'sDate")
apiWriter.println("SQL_ApplicationId"+","+"API_BrokerId"+","+"API_BrokerReference"+","+"API_PartyId"+","+"API_CrmIdentifier"+","+"API_IsOrganisation"+","+"API_OrganisationName"+","+"API_Salutation"+","+"API_FirstName"+","+"API_MiddleName"+","+"API_LastName"+","+"SQL_Name"+","+"API_SearchName"+","+"API_EmailAddress"+","+"API_Telephone"+","+"API_Fax"+","+"API_AddressId"+","+"API_AddressName"+","+"API_Line1"+","+"API_Line2"+","+"API_Line3"+","+"API_City"+","+"API_StateOrProvince"+","+"API_Country"+","+"API_Postcode")
compareWriter.println("SQL_ApplicationId"+","+"SQL_BrokerId"+","+"API_BrokerId"+","+"SQL_BrokerReference"+","+"API_BrokerReference"+","+"SQL_PartyId"+","+"API_PartyId"+","+"SQL_CrmIdentifier"+","+"API_CrmIdentifier"+","+"SQL_IsOrganisation"+","+"API_IsOrganisation"+","+"SQL_OrganisationName"+","+"API_OrganisationName"+","+"SQL_Salutation"+","+"API_Salutation"+","+"SQL_FirstName"+","+"API_FirstName"+","+"SQL_MiddleName"+","+"API_MiddleName"+","+"SQL_LastName"+","+"API_LastName"+","+"SQL_Name"+","+"SQL_Name"+","+"SQL_SearchName"+","+"API_SearchName"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_Telephone"+","+"API_Telephone"+","+"SQL_Fax"+","+"API_Fax"+","+"SQL_AddressId"+","+"API_AddressId"+","+"SQL_AddressName"+","+"API_AddressName"+","+"SQL_Line1"+","+"API_Line1"+","+"SQL_Line2"+","+"API_Line2"+","+"SQL_Line3"+","+"API_Line3"+","+"SQL_City"+","+"API_City"+","+"SQL_StateOrProvince"+","+"API_StateOrProvince"+","+"SQL_Country"+","+"API_Country"+","+"SQL_Postcode"+","+"API_Postcode"+","+"SQL_PolicyEndDate"+","+"Today'sDate"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row ->
	sql_ApplicationId=row.ApplicationId
	sql_ApplicationId=removeBrackets(sql_ApplicationId.toString())
		
	sql_BrokerId=row.BrokerId
	sql_BrokerId=removeBrackets(sql_BrokerId.toString())
	
	sql_BrokerReference=row.BrokerReference
	sql_BrokerReference=removeBrackets(sql_BrokerReference.toString())
	
	sql_PartyId=row.PartyId
	sql_PartyId=removeBrackets(sql_PartyId.toString())
	
	sql_CrmIdentifier=row.CrmIdentifier
	sql_CrmIdentifier=removeBrackets(sql_CrmIdentifier.toString())

	sql_IsOrganisation=row.IsOrganisationFlag
	sql_IsOrganisation=removeBrackets(sql_IsOrganisation.toString())
	
	sql_OrganisationName=row.OrganisationName
	sql_OrganisationName=removeBrackets(sql_OrganisationName.toString())
	
	sql_Salutation=row.Salutation
	sql_Salutation=removeBrackets(sql_Salutation.toString())
	
	sql_FirstName=row.FirstName
	sql_FirstName=removeBrackets(sql_FirstName.toString())
	
	sql_MiddleName=row.MiddleName
	sql_MiddleName=removeBrackets(sql_MiddleName.toString())
	
	sql_LastName=row.LastName
	sql_LastName=removeBrackets(sql_LastName.toString())

	sql_Name=row.Name
	sql_Name=removeBrackets(sql_Name.toString())
	
	sql_SearchName=row.SearchName
	sql_SearchName=removeBrackets(sql_SearchName.toString())
	
	sql_EmailAddress=row.EmailAddress
	sql_EmailAddress=removeBrackets(sql_EmailAddress.toString())
	
	sql_Telephone=row.Telephone
	sql_Telephone=removeBrackets(sql_Telephone.toString())
	
	sql_Fax=row.Fax
	sql_Fax=removeBrackets(sql_Fax.toString())
	
	sql_AddressId=row.AddressId
	sql_AddressId=removeBrackets(sql_AddressId.toString())
	
	sql_AddressName=row.AddressName
	sql_AddressName=removeBrackets(sql_AddressName.toString())
	
	sql_Line1=row.Line1
	sql_Line1=removeBrackets(sql_Line1.toString())
	
	sql_Line2=row.Line2
	sql_Line2=removeBrackets(sql_Line2.toString())
	
	sql_Line3=row.Line3
	sql_Line3=removeBrackets(sql_Line3.toString())
	
	sql_City=row.City
	sql_City=removeBrackets(sql_City.toString())
	
	sql_StateOrProvince=row.StateOrProvince
	sql_StateOrProvince=removeBrackets(sql_StateOrProvince.toString())
	
	sql_Country=row.Country
	sql_Country=removeBrackets(sql_Country.toString())
	
	sql_Postcode=row.Postcode
	sql_Postc=removeBrackets(sql_Postcode.toString())

	sql_PolicyEndDate=row.PolicyEnd
	sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" +00:00","")
	//log.info "Policy End Date="+sql_PolicyEndDate
	
	date= new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
	date = new Date()
	getDateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
	String todaysDate=getDateFormat.format(date)
	todaysDate=todaysDate.toString().replace("/","-")
	//log.info "Today's Date is="+todaysDate
	
	sqlWriter.println(sql_ApplicationId+","+sql_BrokerId+","+sql_BrokerReference+","+sql_PartyId+","+sql_CrmIdentifier+","+sql_IsOrganisation+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode+","+sql_PolicyEndDate+","+todaysDate)
	log.info "SQL Response received as :"+sql_ApplicationId+","+sql_BrokerId+","+sql_BrokerReference+","+sql_PartyId+","+sql_CrmIdentifier+","+sql_IsOrganisation+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode+","+sql_PolicyEndDate+","+todaysDate

	//Set the Application ID at test case level
	String applicationId =sql_ApplicationId
	testRunner.testCase.setPropertyValue( "applicationId", applicationId)

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	//Run the test step to get response
	testRunner.runTestStepByName('AppByAppIdByBroker')
	String req='${AppByAppIdByBroker#Response}'
	response=context.expand(req)
	//log.info "Original API response is : "+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["AppByAppIdByBroker"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200") && sql_PolicyEndDate.toString()>todaysDate)
	{
		getAPIPropertyValue(jsonRes, apiWriter)
		if (
				api_BrokerId.toString().equals(sql_BrokerId.toString()) && 
				api_BrokerReference.toString().equals(sql_BrokerReference.toString()) && 
				api_PartyId.toString().equals(sql_PartyId.toString()) && 
				api_CrmIdentifier.toString().toUpperCase().equals(sql_CrmIdentifier.toString().toUpperCase()) && 
				api_IsOrganisation.toString().toUpperCase().equals(sql_IsOrganisation.toString().toUpperCase()) && 
				api_OrganisationName.toString().toUpperCase().equals(sql_OrganisationName.toString().toUpperCase()) && 
				api_Salutation.toString().toUpperCase().equals(sql_Salutation.toString().toUpperCase()) && 
				api_FirstName.toString().toUpperCase().equals(sql_FirstName.toString().toUpperCase()) && 
				api_MiddleName.toString().toUpperCase().equals(sql_MiddleName.toString().toUpperCase()) && 
				api_LastName.toString().toUpperCase().equals(sql_LastName.toString().toUpperCase()) && 
				api_Name.toString().toUpperCase().equals(sql_Name.toString().toUpperCase()) && 
				api_SearchName.toString().toUpperCase().equals(sql_SearchName.toString().toUpperCase()) && 
				api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && 
				api_Telephone.toString().equals(sql_Telephone.toString()) &&
				api_Fax.toString().equals(sql_Fax.toString()) &&
				api_AddressId.toString().equals(sql_AddressId.toString()) && 
				api_AddressName.toString().toUpperCase().equals(sql_AddressName.toString().toUpperCase()) && 
				api_Line1.toString().toUpperCase().equals(sql_Line1.toString().toUpperCase()) && 
				api_Line2.toString().toUpperCase().equals(sql_Line2.toString().toUpperCase()) && 
				api_Line3.toString().toUpperCase().equals(sql_Line3.toString().toUpperCase()) && 
				api_City.toString().toUpperCase().equals(sql_City.toString().toUpperCase()) && 
				api_StateOrProvince.toString().toUpperCase().equals(sql_StateOrProvince.toString().toUpperCase()) && 
				api_Country.toString().toUpperCase().equals(sql_Country.toString().toUpperCase()) && 
				api_Postcode.toString().toUpperCase().equals(sql_Postcode.toString().toUpperCase())
			)
			{
				compareWriter.println(sql_ApplicationId+","+sql_BrokerId+","+api_BrokerId+","+sql_BrokerReference+","+api_BrokerReference+","+sql_PartyId+","+api_PartyId+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_IsOrganisation+","+api_IsOrganisation+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Salutation+","+api_Salutation+","+sql_FirstName+","+api_FirstName+","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_Name+","+sql_Name+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+sql_PolicyEndDate+","+todaysDate+","+"Test Case Passed")
				log.info "Details are matching hence test case is passed=>"+sql_ApplicationId+","+sql_BrokerId+","+api_BrokerId+","+sql_BrokerReference+","+api_BrokerReference+","+sql_PartyId+","+api_PartyId+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_IsOrganisation+","+api_IsOrganisation+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Salutation+","+api_Salutation+","+sql_FirstName+","+api_FirstName+","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_Name+","+sql_Name+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+sql_PolicyEndDate+","+todaysDate
			}
			else
			{
				compareWriter.println(sql_ApplicationId+","+sql_BrokerId+","+api_BrokerId+","+sql_BrokerReference+","+api_BrokerReference+","+sql_PartyId+","+api_PartyId+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_IsOrganisation+","+api_IsOrganisation+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Salutation+","+api_Salutation+","+sql_FirstName+","+api_FirstName+","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_Name+","+sql_Name+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+sql_PolicyEndDate+","+todaysDate+","+"Test Case Failed")
				log.info "Details are not matching hence test case is failed=>"+sql_ApplicationId+","+sql_BrokerId+","+api_BrokerId+","+sql_BrokerReference+","+api_BrokerReference+","+sql_PartyId+","+api_PartyId+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_IsOrganisation+","+api_IsOrganisation+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Salutation+","+api_Salutation+","+sql_FirstName+","+api_FirstName+","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_Name+","+sql_Name+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+sql_PolicyEndDate+","+todaysDate
			}
	}
	else if(httpStatusCode.equals("401"))
	{
		apiWriter.println(sql_ApplicationId+","+jsonRes.message)
		message = jsonRes.message.toString()
		message = message.replace(","," ")
		compareWriter.println(sql_ApplicationId+","+message+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test case Failed")
		log.info "For application id =>"+sql_ApplicationId+" response is received as =>"+jsonRes.message
	}
	else if(httpStatusCode.equals("404"))
	{
		if(jsonRes.Message.toString().contains("is in the past") && todaysDate.toString()>sql_PolicyEndDate.toString())
		{
			message = jsonRes.Message.toString()
			message = message.replace(","," ")
			apiWriter.println(sql_ApplicationId+","+jsonRes.Message)
			compareWriter.println(sql_ApplicationId+","+message+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test case passed")
			log.info "For application id =>"+sql_ApplicationId+" policy end date is past date hence test case is passed by receiving valid response=>"+jsonRes.Message
		}
	}
	else if(httpStatusCode.equals("200") && todaysDate.toString()>sql_PolicyEndDate.toString())
	{
		getAPIPropertyValue(jsonRes, apiWriter)
		compareWriter.println(sql_ApplicationId+","+httpStatusCode+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test case failed because Improper API response received as policy end date is past date")
		log.info "For application id =>"+sql_ApplicationId+" improper API response received as policy end date is past date"
	}
	else
	{
		compareWriter.println(sql_ApplicationId+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test case failed")
		log.info ("Invalid API response is received hence test case is failed.")
	}
	counter=counter+1
	log.info "Number of records verified are : "+counter
}

public void getAPIPropertyValue(def jsonRes, def apiWriter)
{
		api_BrokerId=jsonRes.results.id
		api_BrokerId=removeBrackets(api_BrokerId.toString())
		
		api_BrokerReference=jsonRes.results.reference
		api_BrokerReference=removeBrackets(api_BrokerReference.toString())
		
		api_PartyId=jsonRes.results.party.id
		api_PartyId=removeBrackets(api_PartyId.toString())
		
		api_CrmIdentifier=jsonRes.results.party.crmIdentifier
		api_CrmIdentifier=removeBrackets(api_CrmIdentifier.toString())

		api_IsOrganisation=jsonRes.results.party.isOrganisation
		api_IsOrganisation=removeBrackets(api_IsOrganisation.toString())
		
		api_OrganisationName=jsonRes.results.party.organisationName
		api_OrganisationName=removeBrackets(api_OrganisationName.toString())
		
		api_Salutation=jsonRes.results.party.salutation
		api_Salutation=removeBrackets(api_Salutation.toString())
		
		api_FirstName=jsonRes.results.party.firstName
		api_FirstName=removeBrackets(api_FirstName.toString())
		
		api_MiddleName=jsonRes.results.party.middleName
		api_MiddleName=removeBrackets(api_MiddleName.toString())
		
		api_LastName=jsonRes.results.party.lastName
		api_LastName=removeBrackets(api_LastName.toString())

		api_Name=jsonRes.results.party.name
		api_Name=removeBrackets(api_Name.toString())
		
		api_SearchName=jsonRes.results.party.searchName
		api_SearchName=removeBrackets(api_SearchName.toString())
		
		api_EmailAddress=jsonRes.results.party.emailAddress
		api_EmailAddress=removeBrackets(api_EmailAddress.toString())
		
		api_Telephone=jsonRes.results.party.telephone
		api_Telephone=removeBrackets(api_Telephone.toString())
		
		api_Fax=jsonRes.results.party.fax
		api_Fax=removeBrackets(api_Fax.toString())
		
		api_AddressId=jsonRes.results.party.addresses.id
		api_AddressId=removeBrackets(api_AddressId.toString())
		
		api_AddressName=jsonRes.results.party.addresses.addressName
		api_AddressName=removeBrackets(api_AddressName.toString())
		
		api_Line1=jsonRes.results.party.addresses.addressLine1
		api_Line1=removeBrackets(api_Line1.toString())
		
		api_Line2=jsonRes.results.party.addresses.addressLine2
		api_Line2=removeBrackets(api_Line2.toString())
		
		api_Line3=jsonRes.results.party.addresses.addressLine3
		api_Line3=removeBrackets(api_Line3.toString())
		
		api_City=jsonRes.results.party.addresses.city
		api_City=removeBrackets(api_City.toString())
		
		api_StateOrProvince=jsonRes.results.party.addresses.state
		api_StateOrProvince=removeBrackets(api_StateOrProvince.toString())
		
		api_Country=jsonRes.results.party.addresses.country
		api_Country=removeBrackets(api_Country.toString())
		
		api_Postcode=jsonRes.results.party.addresses.postalCode
		api_Postcode=removeBrackets(api_Postcode.toString())

		log.info "API Response received as : "+sql_ApplicationId+","+api_BrokerId+","+api_BrokerReference+","+api_PartyId+","+api_CrmIdentifier+","+api_IsOrganisation+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode
		apiWriter.println(sql_ApplicationId+","+api_BrokerId+","+api_BrokerReference+","+api_PartyId+","+api_CrmIdentifier+","+api_IsOrganisation+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode)
}

public String removeBrackets(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if (field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Application by Application Id by Broker ************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>90686</con:value></con:property></con:properties></con:testCase><con:testCase id="082427a4-fff6-4758-a2f8-96a056bc3ecb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByDocuments" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByDocuments" id="ebbe2cf7-b3e8-46df-89d8-a9e81d666eba"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#appId}/documents" methodName="ApplicationByApplicationIdByDocuments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByDocuments" id="69ab8d1e-4de9-4f72-9d9d-412b6a9d3f3e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76177/documents</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByDocuments" id="db6d8f35-f5b9-4cb1-b58c-74a817865ca2" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}

String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for Application By Application Id Documents************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt = 
'''
	USE TOM
	SELECT
	TOP 200
	ab.Id as ApplicationId, d.Id as DocumentId, d.DocumentType_Id, rdt.Name as DocumentType, d.DocumentReference, d.DocumentStatus_Id, 
	rds.Name as DocumentStatus, t.Id as TransactionId,		t.WorkflowId, ab.Discriminator as DisplayName, t.StartDate, t.EndDate, t.AppliedDate, 
	rts.Name as TransationStatus, t.Sequence as TransactionSequence, t.TransactionSubTypeOtherDescription,	t.ReasonForChange_Id, d.UserSuppliedText, 
	d.DocumentVersion,  d.IssuedDate, d.DocumentKey, d.RiskName, d.StorageId, d.DocumentMetaData
	from applicationbase ab
	inner Join [TRANSACTION] t on t.Policy_Id = ab.id and t.Transaction_PhysicalDeletionAttemptPrevented = 0
	left join ref_TransactionStatus rts on rts.id = t.TransactionStatus_Id
	left join Document d on d.Transaction_Id = t.Id --and d.DocumentBase_PhysicalDeletionAttemptPrevented = 0
	left join ref_DocumentType rdt on rdt.id = d.DocumentType_Id 
	left join ref_DocumentStatus rds on rds.id = d.DocumentStatus_Id
	order by 1 desc
''' 

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationIdDocuments.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationIdDocuments.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationIdDocuments.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationIdDocuments"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationIdDocuments"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationIdDocuments"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_DocumentId"+","+"SQL_DocumentType_Id"+","+"SQL_DocumentType"+","+"SQL_DocumentReference"+","+"SQL_DocumentStatus_Id"+","+"SQL_DocumentStatus"+","+"SQL_TransactionId"+","+"SQL_WorkflowId"+","+"SQL_DisplayName"+","+"SQL_StartDate"+","+"SQL_EndDate"+","+"SQL_AppliedDate"+","+"SQL_TransationStatus"+","+"SQL_TransactionSequence"+","+"SQL_TransactionSubTypeOtherDescription"+","+"SQL_ReasonForChange_Id"+","+"SQL_UserSuppliedText"+","+"SQL_DocumentVersion"+","+"SQL_IssuedDate"+","+"SQL_DocumentKey"+","+"SQL_RiskName"+","+"SQL_StorageId"+","+"SQL_DocumentMetaData")
apiWriter.println("API_ApplicationId"+","+"API_DocumentId"+","+"API_DocumentType_Id"+","+"API_DocumentType"+","+"API_DocumentReference"+","+"API_DocumentStatus_Id"+","+"API_DocumentStatus"+","+"API_TransactionId"+","+"API_WorkflowId"+","+"API_DisplayName"+","+"API_StartDate"+","+"API_EndDate"+","+"API_AppliedDate"+","+"API_TransationStatus"+","+"API_TransactionSequence"+","+"API_TransactionSubTypeOtherDescription"+","+"API_ReasonForChange_Id"+","+"API_UserSuppliedText"+","+"API_DocumentVersion"+","+"API_IssuedDate"+","+"API_DocumentKey"+","+"API_RiskName"+","+"API_StorageId"+","+"API_DocumentMetaData")
compareWriter.println("SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_DocumentId"+","+"API_DocumentId"+","+"SQL_DocumentType_Id"+","+"API_DocumentType_Id"+","+"SQL_DocumentType"+","+"API_DocumentType"+","+"SQL_DocumentReference"+","+"API_DocumentReference"+","+"SQL_DocumentStatus_Id"+","+"API_DocumentStatus_Id"+","+"SQL_DocumentStatus"+","+"API_DocumentStatus"+","+"SQL_TransactionId"+","+"API_TransactionId"+","+"SQL_WorkflowId"+","+"API_WorkflowId"+","+"SQL_DisplayName"+","+"API_DisplayName"+","+"SQL_StartDate"+","+"API_StartDate"+","+"SQL_EndDate"+","+"API_EndDate"+","+"SQL_AppliedDate"+","+"API_AppliedDate"+","+"SQL_TransationStatus"+","+"API_TransationStatus"+","+"SQL_TransactionSequence"+","+"API_TransactionSequence"+","+"SQL_TransactionSubTypeOtherDescription"+","+"API_TransactionSubTypeOtherDescription"+","+"SQL_ReasonForChange_Id"+","+"API_ReasonForChange_Id"+","+"SQL_UserSuppliedText"+","+"API_UserSuppliedText"+","+"SQL_DocumentVersion"+","+"API_DocumentVersion"+","+"SQL_IssuedDate"+","+"API_IssuedDate"+","+"SQL_DocumentKey"+","+"API_DocumentKey"+","+"SQL_RiskName"+","+"API_RiskName"+","+"SQL_StorageId"+","+"API_StorageId"+","+"SQL_DocumentMetaData"+","+"API_DocumentMetaData"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
	sql_ApplicationId=row.ApplicationId
	sql_DocumentId=row.DocumentId
	sql_DocumentType_Id=row.DocumentType_Id
	sql_DocumentType=row.DocumentType
	sql_DocumentReference=row.DocumentReference
	sql_DocumentStatus_Id=row.DocumentStatus_Id
	sql_DocumentStatus=row.DocumentStatus
	sql_TransactionId=row.TransactionId
	sql_WorkflowId=row.WorkflowId
	sql_DisplayName=row.DisplayName
	sql_StartDate=row.StartDate
	sql_EndDate=row.EndDate
	sql_AppliedDate=row.AppliedDate
	sql_TransationStatus=row.TransationStatus
	sql_TransactionSequence=row.TransactionSequence
	sql_TransactionSubTypeOtherDescription=row.TransactionSubTypeOtherDescription
	sql_ReasonForChange_Id=row.ReasonForChange_Id
	sql_UserSuppliedText=row.UserSuppliedText
	String userSuppliedText=sql_UserSuppliedText
	if(userSuppliedText!=null)
	{
		if(userSuppliedText.contains(","))
		{
			userSuppliedText=userSuppliedText.replace(",","")	
		}
		if(userSuppliedText.contains("/n"))
		{
			userSuppliedText=userSuppliedText.replace("/n","")		
		}
		else if (userSuppliedText.contains("/r"))
		{
			userSuppliedText=userSuppliedText.replace("/r","")	
		}
		else if(userSuppliedText.contains("\r\n\r\n"))
		{
			userSuppliedText=userSuppliedText.replace("\r\n\r\n","")	
		}
		if(userSuppliedText.contains("\r\n"))
		{
			userSuppliedText=userSuppliedText.replace("\r\n","")	
		}
	}
	else if(userSuppliedText==null)
	{
		userSuppliedText="NULL"
	}
	sql_UserSuppliedText=userSuppliedText
	sql_DocumentVersion=row.DocumentVersion
	sql_IssuedDate=row.IssuedDate
	sql_DocumentKey=row.DocumentKey
	sql_RiskName=row.RiskName
	sql_StorageId=row.StorageId
	sql_DocumentMetaData=row.DocumentMetaData

	//organisationName= organisationName.replaceAll("\\s","")

	sqlWriter.println(sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentType_Id+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatus_Id+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData)
	log.info "SQL Response is : "+sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentType_Id+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatus_Id+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData

	//Set the Application ID at test case level
	String applicationId=sql_ApplicationId
	testRunner.testCase.setPropertyValue( "applicationId", applicationId )
	//def getLocalPropValue = testRunner.testCase.getPropertyValue("applicationId")

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
	//log.info "Token Value : "+token
	
	//Run the test step to get response	
	testRunner.runTestStepByName('AppByAppIdByDocuments')
	String req='${AppByAppIdByDocuments#Response}'
	response=context.expand(req)
	log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["AppByAppIdByDocuments"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info "API Status code is : "+httpStatusCode

	String error = response
	if(httpStatusCode.equals("200"))
	{
		int jsonRecordCount = jsonRes.totalRecords
		log.info "Search records counts : "+ jsonRecordCount 
		for (int i=0; i<jsonRecordCount; i++)
		{
			newId = jsonRes.results.id[i]
			if(sql_DocumentId.toString().equals(newId.toString()))
			{
				api_DocumentId=jsonRes.results.id[i]
				api_DocumentType_Id=jsonRes.results.documentType.id[i]
				api_DocumentType=jsonRes.results.documentType.documentTypeName[i]
				api_DocumentReference=jsonRes.results.documentReference[i]
				api_DocumentStatus_Id=jsonRes.results.documentStatus.id[i]
				api_DocumentStatus=jsonRes.results.documentStatus.documentStatusName[i]
				api_TransactionId=jsonRes.results.transaction.id[i]
				api_WorkflowId=jsonRes.results.transaction.workflowid[i]
				api_DisplayName=jsonRes.results.transaction.displayName[i]
				api_StartDate=jsonRes.results.transaction.startDate[i]
				api_EndDate=jsonRes.results.transaction.endDate[i]
				api_AppliedDate=jsonRes.results.transaction.appliedDate[i]
				api_TransationStatus=jsonRes.results.transaction.transactionStatus[i]
				api_TransactionSequence=jsonRes.results.transaction.transactionSequence[i]
				api_TransactionSubTypeOtherDescription=jsonRes.results.transaction.transactionSubTypeOtherDescription[i]
				api_ReasonForChange_Id=jsonRes.results.transaction.reasonForChange[i]
				api_UserSuppliedText=jsonRes.results.userSuppliedText[i]
				userSuppliedText=api_UserSuppliedText
				if(userSuppliedText!=null)
				{
					if(userSuppliedText.contains(","))
					{
						userSuppliedText=userSuppliedText.replace(",","")	
					}
					if(userSuppliedText.contains("/n"))
					{
						userSuppliedText=userSuppliedText.replace("/n","")		
					}
					else if (userSuppliedText.contains("/r"))
					{
						userSuppliedText=userSuppliedText.replace("/r","")	
					}
					else if(userSuppliedText.contains("\r\n\r\n"))
					{
						userSuppliedText=userSuppliedText.replace("\r\n\r\n","")	
					}
					if(userSuppliedText.contains("\r\n"))
					{
						userSuppliedText=userSuppliedText.replace("\r\n","")	
					}
				}
				else if(userSuppliedText==null)
				{
					userSuppliedText="NULL"
				}
				api_UserSuppliedText=userSuppliedText
				api_DocumentVersion=jsonRes.results.documentVersion[i]
				api_IssuedDate=jsonRes.results.issuedDate[i]
				api_DocumentKey=jsonRes.results.documentKey[i]
				api_RiskName=jsonRes.results.riskName[i]
				api_StorageId=jsonRes.results.storageId[i]
				api_DocumentMetaData=jsonRes.results.documentMetaData[i]
	
				//sqlWriter.println(sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentType_Id+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatus_Id+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData)
				apiWriter.println(sql_ApplicationId+","+api_DocumentId+","+api_DocumentType_Id+","+api_DocumentType+","+api_DocumentReference+","+api_DocumentStatus_Id+","+api_DocumentStatus+","+api_TransactionId+","+api_WorkflowId+","+api_DisplayName+","+api_StartDate+","+api_EndDate+","+api_AppliedDate+","+api_TransationStatus+","+api_TransactionSequence+","+api_TransactionSubTypeOtherDescription+","+api_ReasonForChange_Id+","+api_UserSuppliedText+","+api_DocumentVersion+","+api_IssuedDate+","+api_DocumentKey+","+api_RiskName+","+api_StorageId+","+api_DocumentMetaData)
				log.info "API Response : "+sql_ApplicationId+","+api_DocumentId+","+api_DocumentType_Id+","+api_DocumentType+","+api_DocumentReference+","+api_DocumentStatus_Id+","+api_DocumentStatus+","+api_TransactionId+","+api_WorkflowId+","+api_DisplayName+","+api_StartDate+","+api_EndDate+","+api_AppliedDate+","+api_TransationStatus+","+api_TransactionSequence+","+api_TransactionSubTypeOtherDescription+","+api_ReasonForChange_Id+","+api_UserSuppliedText+","+api_DocumentVersion+","+api_IssuedDate+","+api_DocumentKey+","+api_RiskName+","+api_StorageId+","+api_DocumentMetaData
		
				if(api_DocumentId.toString().equals(sql_DocumentId.toString()) && api_DocumentType_Id.toString().equals(sql_DocumentType_Id.toString()) && api_DocumentType.toString().equals(sql_DocumentType.toString()) && api_DocumentReference.toString().equals(sql_DocumentReference.toString()) && api_DocumentStatus_Id.toString().equals(sql_DocumentStatus_Id.toString()) && api_DocumentStatus.toString().equals(sql_DocumentStatus.toString()) && api_TransactionId.toString().equals(sql_TransactionId.toString()) && api_WorkflowId.toString().toUpperCase().equals(sql_WorkflowId.toString().toUpperCase()) && api_DisplayName.toString().equals(sql_DisplayName.toString()) && api_TransationStatus.toString().equals(sql_TransationStatus.toString()) && api_TransactionSequence.toString().equals(sql_TransactionSequence.toString()) && api_TransactionSubTypeOtherDescription.toString().equals(sql_TransactionSubTypeOtherDescription.toString()) && api_ReasonForChange_Id.toString().equals(sql_ReasonForChange_Id.toString()) && api_UserSuppliedText.toString().equals(sql_UserSuppliedText.toString()) && api_DocumentVersion.toString().equals(sql_DocumentVersion.toString()) && api_DocumentKey .toString().toUpperCase().equals(sql_DocumentKey .toString().toUpperCase()) &&  api_RiskName.toString().toUpperCase().equals(sql_RiskName.toString().toUpperCase()) && api_StorageId.toString().toUpperCase().equals(sql_StorageId.toString().toUpperCase()))
				{
					log.info "Details are matching, Hence test case is passed"
					compareWriter.println(sql_ApplicationId+","+sql_ApplicationId+","+sql_DocumentId+","+api_DocumentId+","+sql_DocumentType_Id+","+api_DocumentType_Id+","+sql_DocumentType+","+api_DocumentType+","+sql_DocumentReference+","+api_DocumentReference+","+sql_DocumentStatus_Id+","+api_DocumentStatus_Id+","+sql_DocumentStatus+","+api_DocumentStatus+","+sql_TransactionId+","+api_TransactionId+","+sql_WorkflowId+","+api_WorkflowId+","+sql_DisplayName+","+api_DisplayName+","+sql_StartDate+","+api_StartDate+","+sql_EndDate+","+api_EndDate+","+sql_AppliedDate+","+api_AppliedDate+","+sql_TransationStatus+","+api_TransationStatus+","+sql_TransactionSequence+","+api_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+api_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+api_ReasonForChange_Id+","+sql_UserSuppliedText+","+api_UserSuppliedText+","+sql_DocumentVersion+","+api_DocumentVersion+","+sql_IssuedDate+","+api_IssuedDate+","+sql_DocumentKey+","+api_DocumentKey+","+sql_RiskName+","+api_RiskName+","+sql_StorageId+","+api_StorageId+","+sql_DocumentMetaData+","+api_DocumentMetaData+","+"Test Case is passed")	
					break;
				}
				else
				{
					log.info "Details are not matching, Hence test case is failed"
					compareWriter.println(sql_ApplicationId+","+sql_ApplicationId+","+sql_DocumentId+","+api_DocumentId+","+sql_DocumentType_Id+","+api_DocumentType_Id+","+sql_DocumentType+","+api_DocumentType+","+sql_DocumentReference+","+api_DocumentReference+","+sql_DocumentStatus_Id+","+api_DocumentStatus_Id+","+sql_DocumentStatus+","+api_DocumentStatus+","+sql_TransactionId+","+api_TransactionId+","+sql_WorkflowId+","+api_WorkflowId+","+sql_DisplayName+","+api_DisplayName+","+sql_StartDate+","+api_StartDate+","+sql_EndDate+","+api_EndDate+","+sql_AppliedDate+","+api_AppliedDate+","+sql_TransationStatus+","+api_TransationStatus+","+sql_TransactionSequence+","+api_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+api_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+api_ReasonForChange_Id+","+sql_UserSuppliedText+","+api_UserSuppliedText+","+sql_DocumentVersion+","+api_DocumentVersion+","+sql_IssuedDate+","+api_IssuedDate+","+sql_DocumentKey+","+api_DocumentKey+","+sql_RiskName+","+api_RiskName+","+sql_StorageId+","+api_StorageId+","+sql_DocumentMetaData+","+api_DocumentMetaData+","+"Test Case is failed")					
					break;
				}	
			}
		}
	}
	counter=counter+1
	log.info "Number of records verified are : "+counter
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for Application By Application Id Documents************"	]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>91690</con:value></con:property></con:properties></con:testCase><con:testCase id="47814ba7-dbe6-472b-859e-f74d4f148fea" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByDocumentsByDocumentId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByDocByDocId" id="3dd7c506-6e56-44d3-83ce-89d0dc87ee41"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/documents/${#TestCase#documentId}" methodName="ApplicationByApplicationIdByDocumentsByDocumentId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByDocByDocId" id="a0e17e00-8054-4123-9d3c-2be3c46b51ef" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/75532/documents/494509</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByDocumentByDocumentId" id="b031fe34-09f1-4c99-8306-9757f824528a" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat
import com.eviware.soapui.support.types.StringToStringMap 

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']


def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for GET method of Application By Application Id Documents by Document Id************"


driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt =
		"""
			USE TOM
 			SELECT
			TOP 100
			AB.Id as ApplicationId, D.Id as DocumentId, D.DocumentType_Id as DocumentTypeId, rdt.Name as DocumentType, D.DocumentReference, 
			D.DocumentStatus_Id as DocumentStatusId, RDS.Name as DocumentStatus, T.Id as TransactionId,T.WorkflowId, AB.Discriminator as DisplayName, 
			T.StartDate, T.EndDate, T.AppliedDate, rts.Name as TransationStatus, T.Sequence as TransactionSequence, T.TransactionSubTypeOtherDescription,
			T.ReasonForChange_Id, D.UserSuppliedText, D.DocumentVersion,D.IssuedDate, D.DocumentKey, D.RiskName, D.StorageId, D.DocumentMetaData
			from applicationbase AB
			inner Join [TRANSACTION] T on T.Policy_Id = AB.Id and T.Transaction_PhysicalDeletionAttemptPrevented = 0
			left join ref_TransactionStatus rts on rts.Id = T.TransactionStatus_Id
			left join Document d on D.Transaction_Id = T.Id --and D.DocumentBase_PhysicalDeletionAttemptPrevented = 0
			left join ref_DocumentType rdt on rdT.Id = D.DocumentType_Id 
			left join ref_DocumentStatus rds on RDS.Id = D.DocumentStatus_Id
			where D.Id is not null and rdt.Name='TradingCertificate' and RDS.Name='Issued'
			order by 1 desc
		"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ApplicationByApplicationIdDocumentsByDocumentId.csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ApplicationByApplicationIdDocumentsByDocumentId.csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ApplicationByApplicationIdDocumentsByDocumentId.csv"]

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ApplicationByApplicationIdDocumentsByDocumentId_"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ApplicationByApplicationIdDocumentsByDocumentId_"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ApplicationByApplicationIdDocumentsByDocumentId_"+newDateTimeString+".csv"]


def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_DocumentId"+","+"SQL_DocumentTypeId"+","+"SQL_DocumentType"+","+"SQL_DocumentReference"+","+"SQL_DocumentStatusId"+","+"SQL_DocumentStatus"+","+"SQL_TransactionId"+","+"SQL_WorkflowId"+","+"SQL_DisplayName"+","+"SQL_StartDate"+","+"SQL_EndDate"+","+"SQL_AppliedDate"+","+"SQL_TransationStatus"+","+"SQL_TransactionSequence"+","+"SQL_TransactionSubTypeOtherDescription"+","+"SQL_ReasonForChange_Id"+","+"SQL_UserSuppliedText"+","+"SQL_DocumentVersion"+","+"SQL_IssuedDate"+","+"SQL_DocumentKey"+","+"SQL_RiskName"+","+"SQL_StorageId"+","+"SQL_DocumentMetaData")
apiWriter.println("SQL_ApplicationId"+","+"API_DocumentId"+","+"API_DocumentTypeId"+","+"API_DocumentType"+","+"API_DocumentReference"+","+"API_DocumentStatusId"+","+"API_DocumentStatus"+","+"API_TransactionId"+","+"API_WorkflowId"+","+"API_DisplayName"+","+"API_StartDate"+","+"API_EndDate"+","+"API_AppliedDate"+","+"API_TransationStatus"+","+"API_TransactionSequence"+","+"API_TransactionSubTypeOtherDescription"+","+"API_ReasonForChange_Id"+","+"API_UserSuppliedText"+","+"API_DocumentVersion"+","+"API_IssuedDate"+","+"API_DocumentKey"+","+"API_RiskName"+","+"API_StorageId"+","+"API_DocumentMetaData")
compareWriter.println("SQL_ApplicationId"+","+"SQL_DocumentId"+","+"API_DocumentId"+","+"SQL_DocumentTypeId"+","+"API_DocumentTypeId"+","+"SQL_DocumentType"+","+"API_DocumentType"+","+"SQL_DocumentReference"+","+"API_DocumentReference"+","+"SQL_DocumentStatusId"+","+"API_DocumentStatusId"+","+"SQL_DocumentStatus"+","+"API_DocumentStatus"+","+"SQL_TransactionId"+","+"API_TransactionId"+","+"SQL_WorkflowId"+","+"API_WorkflowId"+","+"SQL_DisplayName"+","+"API_DisplayName"+","+"SQL_StartDate"+","+"API_StartDate"+","+"SQL_EndDate"+","+"API_EndDate"+","+"SQL_AppliedDate"+","+"API_AppliedDate"+","+"SQL_TransationStatus"+","+"API_TransationStatus"+","+"SQL_TransactionSequence"+","+"API_TransactionSequence"+","+"SQL_TransactionSubTypeOtherDescription"+","+"API_TransactionSubTypeOtherDescription"+","+"SQL_ReasonForChange_Id"+","+"API_ReasonForChange_Id"+","+"SQL_UserSuppliedText"+","+"API_UserSuppliedText"+","+"SQL_DocumentVersion"+","+"API_DocumentVersion"+","+"SQL_IssuedDate"+","+"API_IssuedDate"+","+"SQL_DocumentKey"+","+"API_DocumentKey"+","+"SQL_RiskName"+","+"API_RiskName"+","+"SQL_StorageId"+","+"API_StorageId"+","+"SQL_DocumentMetaData"+","+"API_DocumentMetaData"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonResp=null

int counter=0;

con.eachRow(sqlstmt)
	{	
		row -> 
		sql_ApplicationId=row.ApplicationId
		sql_DocumentId=row.DocumentId
		sql_DocumentTypeId=row.DocumentTypeId
		sql_DocumentType=row.DocumentType
		sql_DocumentReference=row.DocumentReference
		sql_DocumentStatusId=row.DocumentStatusId
		sql_DocumentStatus=row.DocumentStatus
		sql_TransactionId=row.TransactionId
		sql_WorkflowId=row.WorkflowId
		sql_DisplayName=row.DisplayName
		sql_StartDate=row.StartDate
		sql_EndDate=row.EndDate
		sql_AppliedDate=row.AppliedDate
		sql_TransationStatus=row.TransationStatus
		sql_TransactionSequence=row.TransactionSequence
		sql_TransactionSubTypeOtherDescription=row.TransactionSubTypeOtherDescription
		sql_ReasonForChange_Id=row.ReasonForChange_Id
		sql_UserSuppliedText=row.UserSuppliedText
		sql_DocumentVersion=row.DocumentVersion
		sql_IssuedDate=row.IssuedDate
		sql_DocumentKey=row.DocumentKey
		sql_RiskName=row.RiskName
		sql_StorageId=row.StorageId
		sql_DocumentMetaData=row.DocumentMetaData
		
		sqlWriter.println(sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentTypeId+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatusId+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData)
		log.info "SQL Response is : "+sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentTypeId+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatusId+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData

		//Set the Application ID at test case level
		String applicationId = sql_ApplicationId
		testRunner.testCase.setPropertyValue( "applicationId", applicationId)

		//Set the Document Id at test case level
		String documentId=sql_DocumentId
		testRunner.testCase.setPropertyValue( "documentId", documentId)

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
		//log.info "Token Value : "+token

		//Run the test step to get response	
		testRunner.runTestStepByName('AppByAppIdByDocByDocId')
		String req='${AppByAppIdByDocByDocId#Response}'
		response=context.expand(req)
		log.info "API Response is :"+response
		jsonSlurper=new JsonSlurper()
		jsonRes=jsonSlurper.parseText(response)
		
		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["AppByAppIdByDocByDocId"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info "API Status code is : "+httpStatusCode

		String error = response
		if(httpStatusCode.equals("200"))
		{
			api_DocumentId=jsonRes.id
			api_DocumentTypeId=jsonRes.documentType.id
			api_DocumentType=jsonRes.documentType.documentTypeName
			api_DocumentReference=jsonRes.documentReference
			api_DocumentStatusId=jsonRes.documentStatus.id
			api_DocumentStatus=jsonRes.documentStatus.documentStatusName
			api_TransactionId=jsonRes.transaction.id
			api_WorkflowId=jsonRes.transaction.workflowid
			api_DisplayName=jsonRes.transaction.displayName
			api_StartDate=jsonRes.transaction.startDate
			api_EndDate=jsonRes.transaction.endDate
			api_AppliedDate=jsonRes.transaction.appliedDate
			api_TransationStatus=jsonRes.transaction.transactionStatus
			api_TransactionSequence=jsonRes.transaction.transactionSequence
			api_TransactionSubTypeOtherDescription=jsonRes.transaction.transactionSubTypeOtherDescription
			api_ReasonForChange_Id=jsonRes.transaction.reasonForChange
			api_UserSuppliedText=jsonRes.userSuppliedText
			api_DocumentVersion=jsonRes.documentVersion
			api_IssuedDate=jsonRes.issuedDate
			api_DocumentKey=jsonRes.documentKey
			api_RiskName=jsonRes.riskName
			api_StorageId=jsonRes.storageId
			api_DocumentMetaData=jsonRes.documentMetaData
		
			apiWriter.println(sql_ApplicationId+","+api_DocumentId+","+api_DocumentTypeId+","+api_DocumentType+","+api_DocumentReference+","+api_DocumentStatusId+","+api_DocumentStatus+","+api_TransactionId+","+api_WorkflowId+","+api_DisplayName+","+api_StartDate+","+api_EndDate+","+api_AppliedDate+","+api_TransationStatus+","+api_TransactionSequence+","+api_TransactionSubTypeOtherDescription+","+api_ReasonForChange_Id+","+api_UserSuppliedText+","+api_DocumentVersion+","+api_IssuedDate+","+api_DocumentKey+","+api_RiskName+","+api_StorageId+","+api_DocumentMetaData)
			log.info "API Response received as : "+sql_ApplicationId+","+api_DocumentId+","+api_DocumentTypeId+","+api_DocumentType+","+api_DocumentReference+","+api_DocumentStatusId+","+api_DocumentStatus+","+api_TransactionId+","+api_WorkflowId+","+api_DisplayName+","+api_StartDate+","+api_EndDate+","+api_AppliedDate+","+api_TransationStatus+","+api_TransactionSequence+","+api_TransactionSubTypeOtherDescription+","+api_ReasonForChange_Id+","+api_UserSuppliedText+","+api_DocumentVersion+","+api_IssuedDate+","+api_DocumentKey+","+api_RiskName+","+api_StorageId+","+api_DocumentMetaData

			if(sql_DocumentId.toString().equals(api_DocumentId .toString()) && sql_DocumentTypeId.toString().equals(api_DocumentTypeId .toString()) && sql_DocumentType.toString().toUpperCase().equals(api_DocumentType .toString().toUpperCase()) && sql_DocumentReference.toString().equals(api_DocumentReference .toString()) && sql_DocumentStatusId.toString().equals(api_DocumentStatusId .toString()) && sql_DocumentStatus.toString().toUpperCase().equals(api_DocumentStatus .toString().toUpperCase()) && sql_TransactionId.toString().equals(api_TransactionId .toString()) && sql_WorkflowId.toString().toUpperCase().equals(api_WorkflowId .toString().toUpperCase()) && api_DisplayName.toString().toUpperCase().equals(sql_DisplayName.toString().toUpperCase()) && api_TransationStatus.toString().toUpperCase().equals(sql_TransationStatus.toString().toUpperCase()) && api_TransactionSequence.toString().equals(sql_TransactionSequence.toString()) && api_TransactionSubTypeOtherDescription.toString().toUpperCase().equals(sql_TransactionSubTypeOtherDescription.toString().toUpperCase()) && api_ReasonForChange_Id.toString().toUpperCase().equals(sql_ReasonForChange_Id.toString().toUpperCase()) && api_UserSuppliedText.toString().toUpperCase().equals(sql_UserSuppliedText.toString().toUpperCase()) && api_DocumentVersion.toString().equals(sql_DocumentVersion.toString()) && api_DocumentKey.toString().toUpperCase().equals(sql_DocumentKey.toString().toUpperCase()) && api_RiskName.toString().toUpperCase().equals(sql_RiskName.toString().toUpperCase()) && api_StorageId.toString().toUpperCase().equals(sql_StorageId.toString().toUpperCase()) && api_DocumentMetaData.toString().toUpperCase().equals(sql_DocumentMetaData.toString().toUpperCase()))
			{
				log.info "Details are matching hence test case is passed"
				compareWriter.println(sql_ApplicationId+","+sql_DocumentId+","+api_DocumentId+","+sql_DocumentTypeId+","+api_DocumentTypeId+","+sql_DocumentType+","+api_DocumentType+","+sql_DocumentReference+","+api_DocumentReference+","+sql_DocumentStatusId+","+api_DocumentStatusId+","+sql_DocumentStatus+","+api_DocumentStatus+","+sql_TransactionId+","+api_TransactionId+","+sql_WorkflowId+","+api_WorkflowId+","+sql_DisplayName+","+api_DisplayName+","+sql_StartDate+","+api_StartDate+","+sql_EndDate+","+api_EndDate+","+sql_AppliedDate+","+api_AppliedDate+","+sql_TransationStatus+","+api_TransationStatus+","+sql_TransactionSequence+","+api_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+api_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+api_ReasonForChange_Id+","+sql_UserSuppliedText+","+api_UserSuppliedText+","+sql_DocumentVersion+","+api_DocumentVersion+","+sql_IssuedDate+","+api_IssuedDate+","+sql_DocumentKey+","+api_DocumentKey+","+sql_RiskName+","+api_RiskName+","+sql_StorageId+","+api_StorageId+","+sql_DocumentMetaData+","+api_DocumentMetaData+","+"Test Case is passed")
			}
			else
			{
				log.info "Details are not matching hence test case is failed"
				compareWriter.println(sql_ApplicationId+","+sql_DocumentId+","+api_DocumentId+","+sql_DocumentTypeId+","+api_DocumentTypeId+","+sql_DocumentType+","+api_DocumentType+","+sql_DocumentReference+","+api_DocumentReference+","+sql_DocumentStatusId+","+api_DocumentStatusId+","+sql_DocumentStatus+","+api_DocumentStatus+","+sql_TransactionId+","+api_TransactionId+","+sql_WorkflowId+","+api_WorkflowId+","+sql_DisplayName+","+api_DisplayName+","+sql_StartDate+","+api_StartDate+","+sql_EndDate+","+api_EndDate+","+sql_AppliedDate+","+api_AppliedDate+","+sql_TransationStatus+","+api_TransationStatus+","+sql_TransactionSequence+","+api_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+api_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+api_ReasonForChange_Id+","+sql_UserSuppliedText+","+api_UserSuppliedText+","+sql_DocumentVersion+","+api_DocumentVersion+","+sql_IssuedDate+","+api_IssuedDate+","+sql_DocumentKey+","+api_DocumentKey+","+sql_RiskName+","+api_RiskName+","+sql_StorageId+","+api_StorageId+","+sql_DocumentMetaData+","+api_DocumentMetaData+","+"Test Case is failed")
			}	
		}
		else
		{
			log.info "Details are not matching hence test case is failed"
			compareWriter.println(sql_ApplicationId+","+sql_DocumentId+","+","+sql_DocumentTypeId+","+","+sql_DocumentType+","+","+sql_DocumentReference+","+","+sql_DocumentStatusId+","+","+sql_DocumentStatus+","+","+sql_TransactionId+","+","+sql_WorkflowId+","+","+sql_DisplayName+","+","+sql_StartDate+","+","+sql_EndDate+","+","+sql_AppliedDate+","+","+sql_TransationStatus+","+","+sql_TransactionSequence+","+","+sql_TransactionSubTypeOtherDescription+","+","+sql_ReasonForChange_Id+","+","+sql_UserSuppliedText+","+","+sql_DocumentVersion+","+","+sql_IssuedDate+","+","+sql_DocumentKey+","+","+sql_RiskName+","+","+sql_StorageId+","+","+sql_DocumentMetaData+","+","+"Test Case is failed")
		}
		counter=counter+1
		log.info "Number of records verified are : "+counter
	}
	
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for GET method of Application By Application Id Documents by Document Id************"	]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>75429</con:value></con:property><con:property><con:name>documentId</con:name><con:value>493452</con:value></con:property></con:properties></con:testCase><con:testCase id="270b5724-0be7-4740-93c9-485a4b6fc880" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_POSTApplicationByApplicationIdByDocuments" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="POST_AppByAppIdByDocByDocID" id="59c103dc-68fb-4e46-b8c6-720375c84a78"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/documents/" methodName="PostApplicationByApplicationIdByDocument" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST_AppByAppIdByDocByDocID" id="adce849f-723a-4971-957d-558261dc0607" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request>
	{
		"RiskId": "137059",
		"DocumentReference": "23/12/2020",
		"StorageId": "",
		"DocumentType": {
			"Id": "1",
			"DocumentTypeName": "TradingCertificate"
		},
		"DocumentStatus": {
			"Id": "1",
			"DocumentStatusName": "issued"
		},
		"TradingCertificatesTypeId": "1",
		"IssuedDate": "23/12/2020",
		"DocumentKey": "TradingCertificateKey",
		"RiskName":" US161720 Case1Risk1"
	}
	</con:request><con:originalUri>http://spltomservices/api/utomapi/applications/75532/documents/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Post_ApplicationByApplicationIdByDocuments_Final" id="81c3d780-059b-4ba4-9d55-6c75ee6db095" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat
import com.eviware.soapui.support.types.StringToStringMap 

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

//String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\Token.properties'
String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
//	String dateForApp = newDateTimeString
//	dateForApp= dateForApp.replace("-","")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for Post method of Application By Application Id Document************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
"""
USE TOM
SELECT 
TOP 10
AB.Id as ApplicationId, AB.Discriminator, R.Id as RiskId, R.Name as RiskName
from ApplicationBase AB
inner join ApplicationMemberAssured AMA on AMA.Application_Id =AB.Id
inner join ApplicationRisk AR on AR.ApplicationMemberAssured_Id = AMA.Id
inner join Risk R on R.Id=AR.Risk_Id

inner Join [TRANSACTION] t on T.Policy_Id = AB.Id and T.Transaction_PhysicalDeletionAttemptPrevented = 0
left join ref_TransactionStatus rts on rts.Id = T.TransactionStatus_Id
left join Document d on D.Transaction_Id = T.Id
left join ref_DocumentType rdt on rdT.Id = D.DocumentType_Id 
left join ref_DocumentStatus rds on RDS.Id = D.DocumentStatus_Id

where AB.Discriminator ='Policy'
and R.Status_Id not in (1, 3, 4)
and D.Id is not null and rdt.Name='TradingCertificate'
order by 1 desc
"""
/*
String sqlstmt =
"""
	Use TOM
	Select
	Distinct 
	TOP 20
	R.Id as RiskId,R.Name as RiskName, AB.Id as ApplicationId, AB.Discriminator
	from Risk R 
	left join ApplicationRisk AR on AR.Risk_Id=R.Id
	left join MemberAssured MA on MA.Id = R.MemberAssured_Id
	left join ApplicationMemberAssured AMA on AMA.MemberAssured_Id=MA.Id
	left join Party P on P.Id= MA.Party_Id
	left join ApplicationBase AB on AB.Id=AMA.Application_Id
	inner Join [TRANSACTION] t on T.Policy_Id = AB.Id and T.Transaction_PhysicalDeletionAttemptPrevented = 0
	left join ref_TransactionStatus rts on rts.Id = T.TransactionStatus_Id
	left join Document d on D.Transaction_Id = T.Id --and D.DocumentBase_PhysicalDeletionAttemptPrevented = 0
	left join ref_DocumentType rdt on rdT.Id = D.DocumentType_Id 
	left join ref_DocumentStatus rds on RDS.Id = D.DocumentStatus_Id
	where AB.Discriminator='Policy' and D.Id is not null and rdt.Name='TradingCertificate' and RDS.Name='Issued' 
	and R.Status_Id not in (1, 3)
	order by 3 desc
"""
*/

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_POST_ApplicationByApplicationIdDocument.csv"]
//def postApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_POST_ApplicationByApplicationIdDocument.csv"]
//def getApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_GET_ApplicationByApplicationIdDocument.csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_POST_ApplicationByApplicationIdDocument.csv"]

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_POST_ApplicationByApplicationIdDocument_"+newDateTimeString+".csv"]
def postApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_POST_ApplicationByApplicationIdDocument_"+newDateTimeString+".csv"]
def getApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_GET_ApplicationByApplicationIdDocumen_"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_POST_ApplicationByApplicationIdDocument_"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def postApiFile = new File(postApiResponseFile[0])
def postApiWriter = postApiFile.newPrintWriter()

def getApiFile = new File(getApiResponseFile[0])
def getApiWriter = getApiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_RiskId"+","+"SQL_RiskName"+","+"SQL_ProductType"+","+"SQL_UserName"+","+"SQL_documentCreatedById"+","+"SQL_documentCreatedById"+","+"SQL_documentLastModifiedById"+","+"SQL_applicationDocumentCreatedById"+","+"SQL_applicationDocumentLastModifiedById"+","+"SQL_appRiskapplicationDocumentCreatedById"+","+"SQL_appRiskapplicationDocumentLastModifiedById")
postApiWriter.println("SQL_ApplicationId"+","+"POST_API_DocumentId"+","+"POST_API_DocumentTypeId"+","+"POST_API_DocumentType"+","+"POST_API_DocumentReference"+","+"POST_API_DocumentStatusId"+","+"POST_API_DocumentStatusName"+","+"POST_API_TransactionId"+","+"POST_API_RiskId"+","+"POST_API_RiskName"+","+"POST_API_Workflowid"+","+"POST_API_DisplayName"+","+"POST_API_TransactionStatus"+","+"POST_API_TransactionSequence"+","+"POST_API_TransactionSubTypeOtherDescription"+","+"POST_API_ReasonForChange"+","+"POST_API_UserSuppliedText"+","+"POST_API_DocumentVersion"+","+"POST_API_DocumentKey"+","+"POST_API_StorageId"+","+"POST_API_DocumentMetaData")
getApiWriter.println("SQL_ApplicationId"+","+"POST_API_DocumentId"+","+"POST_API_DocumentTypeId"+","+"POST_API_DocumentType"+","+"POST_API_DocumentReference"+","+"POST_API_DocumentStatusId"+","+"POST_API_DocumentStatusName"+","+"POST_API_TransactionId"+","+"POST_API_RiskId"+","+"POST_API_RiskName"+","+"POST_API_Workflowid"+","+"POST_API_DisplayName"+","+"POST_API_TransactionStatus"+","+"POST_API_TransactionSequence"+","+"POST_API_TransactionSubTypeOtherDescription"+","+"POST_API_ReasonForChange"+","+"POST_API_UserSuppliedText"+","+"POST_API_DocumentVersion"+","+"POST_API_DocumentKey"+","+"POST_API_StorageId"+","+"POST_API_DocumentMetaData")
compareWriter.println("SQL_ApplicationId"+","+"POSTApi_DocumentId "+","+"GETApi_DocumentId "+","+"POSTApi_DocumentTypeId "+","+"GETApi_DocumentTypeId "+","+"POSTApi_DocumentType "+","+"GETApi_DocumentType "+","+"POSTApi_DocumentReference "+","+"GETApi_DocumentReference "+","+"POSTApi_DocumentStatusId "+","+"GETApi_DocumentStatusId "+","+"POSTApi_DocumentStatusName "+","+"GETApi_DocumentStatusName "+","+"POSTApi_TransactionId "+","+"GETApi_TransactionId "+","+"POSTApi_RiskId "+","+"GETApi_RiskId "+","+"POSTApi_RiskName "+","+"GETApi_RiskName "+","+"POSTApi_Workflowid "+","+"GETApi_Workflowid "+","+"POSTApi_DisplayName"+","+"GETApi_DisplayName"+","+"POSTApi_TransactionStatus"+","+"GETApi_TransactionStatus"+","+"POSTApi_TransactionSequence"+","+"GETApi_TransactionSequence"+","+"POSTApi_TransactionSubTypeOtherDescription"+","+"GETApi_TransactionSubTypeOtherDescription"+","+"POSTApi_ReasonForChange"+","+"GETApi_ReasonForChange"+","+"POSTApi_UserSuppliedText"+","+"GETApi_UserSuppliedText"+","+"POSTApi_DocumentVersion"+","+"GETApi_DocumentVersion"+","+"POSTApi_DocumentKey"+","+"GETApi_DocumentKey"+","+"POSTApi_StorageId"+","+"GETApi_StorageId"+","+"POSTApi_DocumentMetaData"+","+"GETApi_DocumentMetaData"+","+"SQL_UserName"+","+"SQL_documentCreatedById"+","+"SQL_documentCreatedById"+","+"SQL_documentLastModifiedById"+","+"SQL_applicationDocumentCreatedById"+","+"SQL_applicationDocumentLastModifiedById"+","+"SQL_appRiskapplicationDocumentCreatedById"+","+"SQL_appRiskapplicationDocumentLastModifiedById"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonResp=null

int counter=0;
String userName="SPL_LONDON"+"\\"+"utomapiuser";
//log.info "userName : "+userName

con.eachRow(sqlstmt)
{	
	row -> 
	sql_ApplicationId=row.ApplicationId
	sql_RiskId=row.RiskId
	sql_RiskName=row.RiskName
	sql_ProductType=row.Discriminator
	
	sqlWriter.print(sql_ApplicationId+","+sql_RiskId+","+sql_RiskName+","+sql_ProductType)
	log.info "SQL Response is : "+sql_ApplicationId+","+sql_RiskId+","+sql_RiskName+","+sql_ProductType
	
	//Set the Application ID at test case level
	String applicationId=sql_ApplicationId
	testRunner.testCase.setPropertyValue( "applicationId", applicationId)

	//Set the risk ID at test case level
	String riskId=sql_RiskId
	testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].setPropertyValue( "riskId", riskId)
	def inApi_RiskId = testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].getPropertyValue("riskId")

	//Set the risk Name at test case level
	String riskName=sql_RiskName
	testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].setPropertyValue( "riskName", riskName)
	def inApi_riskName = testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].getPropertyValue("riskName")
	
	def newRequest = """
	{
		"RiskId": "${riskId}",
		"DocumentReference": "23/12/2020",
		"StorageId": "",
		"DocumentType": {
			"Id": "1",
			"DocumentTypeName": "TradingCertificate"
		},
		"DocumentStatus": {
			"Id": "1",
			"DocumentStatusName": "issued"
		},
		"TradingCertificatesTypeId": "1",
		"IssuedDate": "23/12/2020",
		"DocumentKey": "TradingCertificateKey",
		"RiskName":" ${riskName}"
	}
	"""
	log.info "Body for POST Request = "+newRequest
	testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].setPropertyValue( "Request", newRequest)

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
	
	//Run the test step to get response
	testRunner.runTestStepByName('POST_AppByAppIdByDocByDocID')
	String req='${POST_AppByAppIdByDocByDocID#Response}'
	response=context.expand(req)
	//log.info "API Response for POST Method received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)
	
	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["POST_AppByAppIdByDocByDocID"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		if (!jsonRes.HasError)
		{
			postApi_DocumentId = jsonRes.id
			postApi_DocumentTypeId = jsonRes.documentType.id
			postApi_DocumentType = jsonRes.documentType.documentTypeName
			postApi_DocumentReference = jsonRes.documentReference
			postApi_DocumentStatusId = jsonRes.documentStatus.id
			postApi_DocumentStatusName = jsonRes.documentStatus.documentStatusName
			postApi_TransactionId = jsonRes.transaction.id
			postApi_RiskId = jsonRes.riskId
			postApi_RiskName = jsonRes.riskName
			postApi_Workflowid = jsonRes.transaction.workflowid
			postApi_DisplayName=jsonRes.transaction.displayName
			postApi_TransactionStatus=jsonRes.transaction.transactionStatus
			postApi_TransactionSequence=jsonRes.transaction.transactionSequence
			postApi_TransactionSubTypeOtherDescription=jsonRes.transaction.transactionSubTypeOtherDescription
			postApi_ReasonForChange=jsonRes.transaction.reasonForChange
			postApi_UserSuppliedText=jsonRes.userSuppliedText
			postApi_DocumentVersion=jsonRes.documentVersion
			postApi_DocumentKey=jsonRes.documentKey
			postApi_StorageId=jsonRes.storageId
			postApi_DocumentMetaData=jsonRes.documentMetaData
			
			postApiWriter.println(sql_ApplicationId+","+postApi_DocumentId+","+postApi_DocumentTypeId+","+postApi_DocumentType+","+postApi_DocumentReference+","+postApi_DocumentStatusId+","+postApi_DocumentStatusName+","+postApi_TransactionId+","+postApi_RiskId+","+postApi_RiskName+","+postApi_Workflowid+","+postApi_DisplayName+","+postApi_TransactionStatus+","+postApi_TransactionSequence+","+postApi_TransactionSubTypeOtherDescription+","+postApi_ReasonForChange+","+postApi_UserSuppliedText+","+postApi_DocumentVersion+","+postApi_DocumentKey+","+postApi_StorageId+","+postApi_DocumentMetaData)
			log.info "API Response received for POST method as : "+sql_ApplicationId+","+postApi_DocumentId+","+postApi_DocumentTypeId+","+postApi_DocumentType+","+postApi_DocumentReference+","+postApi_DocumentStatusId+","+postApi_DocumentStatusName+","+postApi_TransactionId+","+postApi_RiskId+","+postApi_RiskName+","+postApi_Workflowid+","+postApi_DisplayName+","+postApi_TransactionStatus+","+postApi_TransactionSequence+","+postApi_TransactionSubTypeOtherDescription+","+postApi_ReasonForChange+","+postApi_UserSuppliedText+","+postApi_DocumentVersion+","+postApi_DocumentKey+","+postApi_StorageId+","+postApi_DocumentMetaData
		
			//Set the Application ID at test case level
			applicationId=sql_ApplicationId
			testRunner.testCase.setPropertyValue( "applicationId", applicationId )
			
			//Set the Document ID at test case level
			documentId=postApi_DocumentId.toString()
			testRunner.testCase.setPropertyValue( "documentId", documentId )

			//Set token to test suite level
			testRunner.testCase.testSuite.setPropertyValue("token", token)

			//Run the test step to get response
			testRunner.runTestStepByName('Get_DocByDocId')
			String req1='${Get_DocByDocId#Response}'
			response=context.expand(req1)
			log.info "API Response for GET method after post received is :"+response
			jsonSlurper=new JsonSlurper() 
			jsonRes=jsonSlurper.parseText(response)

			//Check the Status code of API response
			groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
			httpResponseHeaders = context.testCase.testSteps["Get_DocByDocId"].testRequest.response.responseHeaders
			httpStatus = httpResponseHeaders["#status#"]
			httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		
			error = response
			if(httpStatusCode.equals("200"))
			{
				getApi_DocumentId = jsonRes.id
				getApi_DocumentTypeId = jsonRes.documentType.id
				getApi_DocumentType = jsonRes.documentType.documentTypeName
				getApi_DocumentReference = jsonRes.documentReference
				getApi_DocumentStatusId = jsonRes.documentStatus.id
				getApi_DocumentStatusName = jsonRes.documentStatus.documentStatusName
				getApi_TransactionId = jsonRes.transaction.id
				getApi_RiskId = jsonRes.riskId
				getApi_RiskName = jsonRes.riskName
				getApi_Workflowid = jsonRes.transaction.workflowid
				getApi_DisplayName=jsonRes.transaction.displayName
				getApi_TransactionStatus=jsonRes.transaction.transactionStatus
				getApi_TransactionSequence=jsonRes.transaction.transactionSequence
				getApi_TransactionSubTypeOtherDescription=jsonRes.transaction.transactionSubTypeOtherDescription
				getApi_ReasonForChange=jsonRes.transaction.reasonForChange
				getApi_UserSuppliedText=jsonRes.userSuppliedText
				getApi_DocumentVersion=jsonRes.documentVersion
				getApi_DocumentKey=jsonRes.documentKey
				getApi_StorageId=jsonRes.storageId
				getApi_DocumentMetaData=jsonRes.documentMetaData
				//int docId=Integer.parseInt(getApi_DocumentId)
				int docId=getApi_DocumentId.toInteger()

				String sqlstmt1 =
					"""
					USE TOM
					select d.id, U.UserName, d.CreatedBy_Id as Doc_CreatedById, d.LastModifiedBy_Id as Doc_LastModifiedById, ad.CreatedBy_Id as AppDoc_CreatedById,
					ad.LastModifiedBy_Id as AppDoc_CreatedById, arad.CreatedBy_Id as AppRiskDoc_CreatedById, arad.LastModifiedBy_Id as AppRiskDoc_LastModifiedById, 
					d.DocumentType_Id, d.DocumentStatus_Id, d.Name, d.Description, d.Discriminator, ad.Application_Id
					from document d
					inner join ApplicationDocument ad on d.id = ad.Document_Id
					inner join [ApplicationRiskApplicationDocument] arad on arad.ApplicationDocument_Id = ad.Id
					inner join dbo.[User] U on U.Id = d.LastModifiedBy_Id
					where AD.Document_Id="""+docId+"""
					"""
					con.eachRow(sqlstmt1)
					{
						rows ->
						sql_UserName=rows.UserName
						sql_documentCreatedById=rows.Doc_CreatedById
						sql_documentLastModifiedById=rows.Doc_LastModifiedById
						sql_applicationDocumentCreatedById=rows.AppDoc_CreatedById
						sql_applicationDocumentLastModifiedById=rows.AppDoc_CreatedById
						sql_appRiskapplicationDocumentCreatedById=rows.AppRiskDoc_CreatedById
						sql_appRiskapplicationDocumentLastModifiedById=rows.AppRiskDoc_LastModifiedById
					}
					//log.info "sql_UserName : "+sql_UserName
					sqlWriter.println(","+sql_UserName+","+sql_documentCreatedById+","+sql_documentCreatedById+","+sql_documentLastModifiedById+","+sql_applicationDocumentCreatedById+","+sql_applicationDocumentLastModifiedById+","+sql_appRiskapplicationDocumentCreatedById+","+sql_appRiskapplicationDocumentLastModifiedById)

				getApiWriter.println(sql_ApplicationId+","+getApi_DocumentId+","+getApi_DocumentTypeId+","+getApi_DocumentType+","+getApi_DocumentReference+","+getApi_DocumentStatusId+","+getApi_DocumentStatusName+","+getApi_TransactionId+","+getApi_RiskId+","+getApi_RiskName+","+getApi_Workflowid+","+getApi_DisplayName+","+getApi_TransactionStatus+","+getApi_TransactionSequence+","+getApi_TransactionSubTypeOtherDescription+","+getApi_ReasonForChange+","+getApi_UserSuppliedText+","+getApi_DocumentVersion+","+getApi_DocumentKey+","+getApi_StorageId+","+getApi_DocumentMetaData)
				log.info "API Response for Get method :" +sql_ApplicationId+","+getApi_DocumentId+","+getApi_DocumentTypeId+","+getApi_DocumentType+","+getApi_DocumentReference+","+getApi_DocumentStatusId+","+getApi_DocumentStatusName+","+getApi_TransactionId+","+getApi_RiskId+","+getApi_RiskName+","+getApi_Workflowid+","+getApi_DisplayName+","+getApi_TransactionStatus+","+getApi_TransactionSequence+","+getApi_TransactionSubTypeOtherDescription+","+getApi_ReasonForChange+","+getApi_UserSuppliedText+","+getApi_DocumentVersion+","+getApi_DocumentKey+","+getApi_StorageId+","+getApi_DocumentMetaData

				
				if( sql_UserName.toString().equals(userName) && 
					postApi_DocumentId .toString().equals(getApi_DocumentId .toString()) && 
					postApi_DocumentTypeId .toString().equals(getApi_DocumentTypeId .toString()) && 
					postApi_DocumentType .toString().toUpperCase().equals(getApi_DocumentType .toString().toUpperCase()) && 
					postApi_DocumentReference .toString().equals(getApi_DocumentReference .toString()) && 
					postApi_DocumentStatusId .toString().equals(getApi_DocumentStatusId .toString()) && 
					postApi_DocumentStatusName .toString().toUpperCase().equals(getApi_DocumentStatusName .toString().toUpperCase()) && 
					postApi_TransactionId .toString().equals(getApi_TransactionId .toString()) && 
					postApi_RiskId .toString().equals(getApi_RiskId .toString()) && 
					postApi_RiskName .toString().toUpperCase().equals(getApi_RiskName .toString().toUpperCase()) && 
					postApi_Workflowid .toString().toUpperCase().equals(getApi_Workflowid .toString().toUpperCase()) && 
					postApi_DisplayName.toString().toUpperCase().equals(getApi_DisplayName.toString().toUpperCase()) && 
					postApi_TransactionStatus.toString().toUpperCase().equals(getApi_TransactionStatus.toString().toUpperCase()) && 
					postApi_TransactionSequence.toString().toUpperCase().equals(getApi_TransactionSequence.toString().toUpperCase()) && 
					postApi_TransactionSubTypeOtherDescription.toString().toUpperCase().equals(getApi_TransactionSubTypeOtherDescription.toString().toUpperCase()) && 
					postApi_ReasonForChange.toString().toUpperCase().equals(getApi_ReasonForChange.toString().toUpperCase()) && 
					postApi_UserSuppliedText.toString().toUpperCase().equals(getApi_UserSuppliedText.toString().toUpperCase()) && 
					postApi_DocumentVersion.toString().toUpperCase().equals(getApi_DocumentVersion.toString().toUpperCase()) && 
					postApi_DocumentKey.toString().toUpperCase().equals(getApi_DocumentKey.toString().toUpperCase()) && 
					postApi_StorageId.toString().equals(getApi_StorageId.toString()) && 
					postApi_DocumentMetaData.toString().toUpperCase().equals(getApi_DocumentMetaData.toString().toUpperCase())
				)	
				{
					compareWriter.println(sql_ApplicationId+","+postApi_DocumentId +","+getApi_DocumentId +","+postApi_DocumentTypeId +","+getApi_DocumentTypeId +","+postApi_DocumentType +","+getApi_DocumentType +","+postApi_DocumentReference +","+getApi_DocumentReference +","+postApi_DocumentStatusId +","+getApi_DocumentStatusId +","+postApi_DocumentStatusName +","+getApi_DocumentStatusName +","+postApi_TransactionId +","+getApi_TransactionId +","+postApi_RiskId +","+getApi_RiskId +","+postApi_RiskName +","+getApi_RiskName +","+postApi_Workflowid +","+getApi_Workflowid +","+postApi_DisplayName+","+getApi_DisplayName+","+postApi_TransactionStatus+","+getApi_TransactionStatus+","+postApi_TransactionSequence+","+getApi_TransactionSequence+","+postApi_TransactionSubTypeOtherDescription+","+getApi_TransactionSubTypeOtherDescription+","+postApi_ReasonForChange+","+getApi_ReasonForChange+","+postApi_UserSuppliedText+","+getApi_UserSuppliedText+","+postApi_DocumentVersion+","+getApi_DocumentVersion+","+postApi_DocumentKey+","+getApi_DocumentKey+","+postApi_StorageId+","+getApi_StorageId+","+postApi_DocumentMetaData+","+getApi_DocumentMetaData+","+sql_UserName+","+sql_documentCreatedById+","+sql_documentCreatedById+","+sql_documentLastModifiedById+","+sql_applicationDocumentCreatedById+","+sql_applicationDocumentLastModifiedById+","+sql_appRiskapplicationDocumentCreatedById+","+sql_appRiskapplicationDocumentLastModifiedById+","+"Test Case is Passed")
					log.info "Details are matching, hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_ApplicationId+","+postApi_DocumentId +","+getApi_DocumentId +","+postApi_DocumentTypeId +","+getApi_DocumentTypeId +","+postApi_DocumentType +","+getApi_DocumentType +","+postApi_DocumentReference +","+getApi_DocumentReference +","+postApi_DocumentStatusId +","+getApi_DocumentStatusId +","+postApi_DocumentStatusName +","+getApi_DocumentStatusName +","+postApi_TransactionId +","+getApi_TransactionId +","+postApi_RiskId +","+getApi_RiskId +","+postApi_RiskName +","+getApi_RiskName +","+postApi_Workflowid +","+getApi_Workflowid +","+postApi_DisplayName+","+getApi_DisplayName+","+postApi_TransactionStatus+","+getApi_TransactionStatus+","+postApi_TransactionSequence+","+getApi_TransactionSequence+","+postApi_TransactionSubTypeOtherDescription+","+getApi_TransactionSubTypeOtherDescription+","+postApi_ReasonForChange+","+getApi_ReasonForChange+","+postApi_UserSuppliedText+","+getApi_UserSuppliedText+","+postApi_DocumentVersion+","+getApi_DocumentVersion+","+postApi_DocumentKey+","+getApi_DocumentKey+","+postApi_StorageId+","+getApi_StorageId+","+postApi_DocumentMetaData+","+getApi_DocumentMetaData+","+sql_UserName+","+sql_documentCreatedById+","+sql_documentCreatedById+","+sql_documentLastModifiedById+","+sql_applicationDocumentCreatedById+","+sql_applicationDocumentLastModifiedById+","+sql_appRiskapplicationDocumentCreatedById+","+sql_appRiskapplicationDocumentLastModifiedById+","+"Test Case is Failed")
					log.info "Details are not matching, hence test case is failed"
				}
			}
			else
			{
				response = removeComma(response);
				compareWriter.println(sql_ApplicationId+","+response+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test Case is Failed")
				log.info "Failed API response is received"+response
			}
		}	
	}
	else
	{
		response = removeComma(response);
		compareWriter.println(sql_ApplicationId+","+response+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test Case is Failed")
		log.info "Failed API response received as : "+response
	}		
	counter=counter+1
	log.info "Number of records verified are : "+counter
}

public String removeComma(String field)
{
	if (field.toString()!=null)
		field = field.replace(",", " ")
	return field;
}

sqlWriter.flush()
postApiWriter.flush()
getApiWriter.flush()
compareWriter.flush()

sqlWriter.close()
postApiWriter.close()
getApiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for Post method of Application By Application Id Document************"	]]></script></con:config></con:testStep><con:testStep type="restrequest" name="Get_DocByDocId" id="2da49f68-c84a-4c8f-bf36-2b69bd3e776f"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/documents/${#TestCase#documentId}" methodName="ApplicationByApplicationIdByDocumentsByDocumentId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_DocByDocId" id="a0e17e00-8054-4123-9d3c-2be3c46b51ef" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/75532/documents/498125</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Old_Post_ApplicationByApplicationIdByDocumentByDocumentId" id="711317c4-418f-4dd7-b10d-c867b8b10e0a" disabled="true"><con:settings/><con:config><script>import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat
import com.eviware.soapui.support.types.StringToStringMap 

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

//String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\Token.properties'
String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
//	String dateForApp = newDateTimeString
//	dateForApp= dateForApp.replace("-","")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for Post method of Application By Application Id Document************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt =
"""
	Use TOM
	Select
	Distinct 
	TOP 150
	R.Id as RiskId,R.Name as RiskName, AB.Id as ApplicationId, AB.Discriminator
	from Risk R 
	left join ApplicationRisk AR on AR.Risk_Id=R.Id
	left join MemberAssured MA on MA.Id = R.MemberAssured_Id
	left join ApplicationMemberAssured AMA on AMA.MemberAssured_Id=MA.Id
	left join Party P on P.Id= MA.Party_Id
	left join ApplicationBase AB on AB.Id=AMA.Application_Id
	inner Join [TRANSACTION] t on T.Policy_Id = AB.Id and T.Transaction_PhysicalDeletionAttemptPrevented = 0
	left join ref_TransactionStatus rts on rts.Id = T.TransactionStatus_Id
	left join Document d on D.Transaction_Id = T.Id --and D.DocumentBase_PhysicalDeletionAttemptPrevented = 0
	left join ref_DocumentType rdt on rdT.Id = D.DocumentType_Id 
	left join ref_DocumentStatus rds on RDS.Id = D.DocumentStatus_Id
	where AB.Discriminator='Policy' and D.Id is not null and rdt.Name='TradingCertificate' and RDS.Name='Issued' and R.Status_Id!=3
	order by 3 desc
"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_POST_ApplicationByApplicationIdDocument.csv"]
def postApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_POST_ApplicationByApplicationIdDocument.csv"]
def getApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_GET_ApplicationByApplicationIdDocument.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_POST_ApplicationByApplicationIdDocument.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_POST_ApplicationByApplicationIdDocument_"+newDateTimeString+".csv"]
//def postApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_POST_ApplicationByApplicationIdDocument_"+newDateTimeString+".csv"]
//def getApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_GET_ApplicationByApplicationIdDocumen_"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_POST_ApplicationByApplicationIdDocument_"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def postApiFile = new File(postApiResponseFile[0])
def postApiWriter = postApiFile.newPrintWriter()

def getApiFile = new File(getApiResponseFile[0])
def getApiWriter = getApiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_RiskId"+","+"SQL_RiskName"+","+"SQL_ProductType")
postApiWriter.println("SQL_ApplicationId"+","+"POST_API_DocumentId"+","+"POST_API_DocumentTypeId"+","+"POST_API_DocumentType"+","+"POST_API_DocumentReference"+","+"POST_API_DocumentStatusId"+","+"POST_API_DocumentStatusName"+","+"POST_API_TransactionId"+","+"POST_API_RiskId"+","+"POST_API_RiskName"+","+"POST_API_Workflowid"+","+"POST_API_DisplayName"+","+"POST_API_TransactionStatus"+","+"POST_API_TransactionSequence"+","+"POST_API_TransactionSubTypeOtherDescription"+","+"POST_API_ReasonForChange"+","+"POST_API_UserSuppliedText"+","+"POST_API_DocumentVersion"+","+"POST_API_DocumentKey"+","+"POST_API_StorageId"+","+"POST_API_DocumentMetaData")
getApiWriter.println("SQL_ApplicationId"+","+"POST_API_DocumentId"+","+"POST_API_DocumentTypeId"+","+"POST_API_DocumentType"+","+"POST_API_DocumentReference"+","+"POST_API_DocumentStatusId"+","+"POST_API_DocumentStatusName"+","+"POST_API_TransactionId"+","+"POST_API_RiskId"+","+"POST_API_RiskName"+","+"POST_API_Workflowid"+","+"POST_API_DisplayName"+","+"POST_API_TransactionStatus"+","+"POST_API_TransactionSequence"+","+"POST_API_TransactionSubTypeOtherDescription"+","+"POST_API_ReasonForChange"+","+"POST_API_UserSuppliedText"+","+"POST_API_DocumentVersion"+","+"POST_API_DocumentKey"+","+"POST_API_StorageId"+","+"POST_API_DocumentMetaData")
compareWriter.println("SQL_ApplicationId"+","+"POSTApi_DocumentId "+","+"GETApi_DocumentId "+","+"POSTApi_DocumentTypeId "+","+"GETApi_DocumentTypeId "+","+"POSTApi_DocumentType "+","+"GETApi_DocumentType "+","+"POSTApi_DocumentReference "+","+"GETApi_DocumentReference "+","+"POSTApi_DocumentStatusId "+","+"GETApi_DocumentStatusId "+","+"POSTApi_DocumentStatusName "+","+"GETApi_DocumentStatusName "+","+"POSTApi_TransactionId "+","+"GETApi_TransactionId "+","+"POSTApi_RiskId "+","+"GETApi_RiskId "+","+"POSTApi_RiskName "+","+"GETApi_RiskName "+","+"POSTApi_Workflowid "+","+"GETApi_Workflowid "+","+"POSTApi_DisplayName"+","+"GETApi_DisplayName"+","+"POSTApi_TransactionStatus"+","+"GETApi_TransactionStatus"+","+"POSTApi_TransactionSequence"+","+"GETApi_TransactionSequence"+","+"POSTApi_TransactionSubTypeOtherDescription"+","+"GETApi_TransactionSubTypeOtherDescription"+","+"POSTApi_ReasonForChange"+","+"GETApi_ReasonForChange"+","+"POSTApi_UserSuppliedText"+","+"GETApi_UserSuppliedText"+","+"POSTApi_DocumentVersion"+","+"GETApi_DocumentVersion"+","+"POSTApi_DocumentKey"+","+"GETApi_DocumentKey"+","+"POSTApi_StorageId"+","+"GETApi_StorageId"+","+"POSTApi_DocumentMetaData"+","+"GETApi_DocumentMetaData"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonResp=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
	sql_ApplicationId=row.ApplicationId
	sql_RiskId=row.RiskId
	sql_RiskName=row.RiskName
	sql_ProductType=row.Discriminator
	
	sqlWriter.println(sql_ApplicationId+","+sql_RiskId+","+sql_RiskName+","+sql_ProductType)
	log.info "SQL Response is : "+sql_ApplicationId+","+sql_RiskId+","+sql_RiskName+","+sql_ProductType
	
	//Set the Application ID at test case level
	String applicationId=sql_ApplicationId
	//testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].setPropertyValue( "applicationId", applicationId)
	testRunner.testCase.setPropertyValue( "applicationId", applicationId)
//	def inApi_ApplicationId = testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].getPropertyValue("applicationId")
//	def getLocalPropValue = testRunner.testCase.getPropertyValue("applicationId")
	//applicationId=getLocalPropValue.toString()
	//log.info "API is sending data for POST method with Application Id as : "+applicationId
	//testRunner.runTestStepByName('POST')

	//Set the risk ID at test case level
	String riskId=sql_RiskId
	testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].setPropertyValue( "riskId", riskId)
	def inApi_RiskId = testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].getPropertyValue("riskId")

	//Set the risk Name at test case level
	String riskName=sql_RiskName
	testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].setPropertyValue( "riskName", riskName)
	def inApi_riskName = testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].getPropertyValue("riskName")
	
	def newRequest = """
	{
		"RiskId": "${riskId}",
		"DocumentReference": "23/12/2020",
		"StorageId": "",
		"DocumentType": {
			"Id": "1",
			"DocumentTypeName": "TradingCertificate"
		},
		"DocumentStatus": {
			"Id": "1",
			"DocumentStatusName": "issued"
		},
		"TradingCertificatesTypeId": "1",
		"IssuedDate": "23/12/2020",
		"DocumentKey": "TradingCertificateKey",
		"RiskName":" ${riskName}"
	}
	"""
	log.info "Body for POST Request = "+newRequest
	testRunner.testCase.testSteps["POST_AppByAppIdByDocByDocID"].setPropertyValue( "Request", newRequest)

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
	
	//Run the test step to get response
	testRunner.runTestStepByName('POST_AppByAppIdByDocByDocID')
	String req='${POST_AppByAppIdByDocByDocID#Response}'
	response=context.expand(req)
	//log.info "API Response for POST Method received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)
	
	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["POST_AppByAppIdByDocByDocID"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		if (!jsonRes.HasError)
		{
			postApi_DocumentId = jsonRes.id
			postApi_DocumentTypeId = jsonRes.documentType.id
			postApi_DocumentType = jsonRes.documentType.documentTypeName
			postApi_DocumentReference = jsonRes.documentReference
			postApi_DocumentStatusId = jsonRes.documentStatus.id
			postApi_DocumentStatusName = jsonRes.documentStatus.documentStatusName
			postApi_TransactionId = jsonRes.transaction.id
			postApi_RiskId = jsonRes.riskId
			postApi_RiskName = jsonRes.riskName
			postApi_Workflowid = jsonRes.transaction.workflowid
			postApi_DisplayName=jsonRes.transaction.displayName
			postApi_TransactionStatus=jsonRes.transaction.transactionStatus
			postApi_TransactionSequence=jsonRes.transaction.transactionSequence
			postApi_TransactionSubTypeOtherDescription=jsonRes.transaction.transactionSubTypeOtherDescription
			postApi_ReasonForChange=jsonRes.transaction.reasonForChange
			postApi_UserSuppliedText=jsonRes.userSuppliedText
			postApi_DocumentVersion=jsonRes.documentVersion
			postApi_DocumentKey=jsonRes.documentKey
			postApi_StorageId=jsonRes.storageId
			postApi_DocumentMetaData=jsonRes.documentMetaData
			
			postApiWriter.println(sql_ApplicationId+","+postApi_DocumentId+","+postApi_DocumentTypeId+","+postApi_DocumentType+","+postApi_DocumentReference+","+postApi_DocumentStatusId+","+postApi_DocumentStatusName+","+postApi_TransactionId+","+postApi_RiskId+","+postApi_RiskName+","+postApi_Workflowid+","+postApi_DisplayName+","+postApi_TransactionStatus+","+postApi_TransactionSequence+","+postApi_TransactionSubTypeOtherDescription+","+postApi_ReasonForChange+","+postApi_UserSuppliedText+","+postApi_DocumentVersion+","+postApi_DocumentKey+","+postApi_StorageId+","+postApi_DocumentMetaData)
			log.info "API Response received for POST method as : "+sql_ApplicationId+","+postApi_DocumentId+","+postApi_DocumentTypeId+","+postApi_DocumentType+","+postApi_DocumentReference+","+postApi_DocumentStatusId+","+postApi_DocumentStatusName+","+postApi_TransactionId+","+postApi_RiskId+","+postApi_RiskName+","+postApi_Workflowid+","+postApi_DisplayName+","+postApi_TransactionStatus+","+postApi_TransactionSequence+","+postApi_TransactionSubTypeOtherDescription+","+postApi_ReasonForChange+","+postApi_UserSuppliedText+","+postApi_DocumentVersion+","+postApi_DocumentKey+","+postApi_StorageId+","+postApi_DocumentMetaData
		
			//Set the Application ID at test case level
			applicationId=sql_ApplicationId
			testRunner.testCase.setPropertyValue( "applicationId", applicationId )
			//getAppId = testRunner.testCase.getPropertyValue("applicationId")
			
			//Set the Document ID at test case level
			documentId=postApi_DocumentId.toString()
			testRunner.testCase.setPropertyValue( "documentId", documentId )
			//getDocumentId= testRunner.testCase.getPropertyValue("documentId")

			//Set token to test suite level
			testRunner.testCase.testSuite.setPropertyValue("token", token)

			//Run the test step to get response
			testRunner.runTestStepByName('Get_DocByDocId')
			String req1='${Get_DocByDocId#Response}'
			response=context.expand(req1)
			log.info "API Response for GET method after post received is :"+response
			jsonSlurper=new JsonSlurper() 
			jsonRes=jsonSlurper.parseText(response)

			//Check the Status code of API response
			groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
			//httpResponseHeaders = context.testCase.testSteps["DocByDocId"].testRequest.response.responseHeaders
			httpResponseHeaders = context.testCase.testSteps["Get_DocByDocId"].testRequest.response.responseHeaders
			httpStatus = httpResponseHeaders["#status#"]
			httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
			//log.info("HTTP status code: " + httpStatusCode)
		
			error = response
			if(httpStatusCode.equals("200"))
			{
				getApi_DocumentId = jsonRes.id
				getApi_DocumentTypeId = jsonRes.documentType.id
				getApi_DocumentType = jsonRes.documentType.documentTypeName
				getApi_DocumentReference = jsonRes.documentReference
				getApi_DocumentStatusId = jsonRes.documentStatus.id
				getApi_DocumentStatusName = jsonRes.documentStatus.documentStatusName
				getApi_TransactionId = jsonRes.transaction.id
				getApi_RiskId = jsonRes.riskId
				getApi_RiskName = jsonRes.riskName
				getApi_Workflowid = jsonRes.transaction.workflowid
				getApi_DisplayName=jsonRes.transaction.displayName
				getApi_TransactionStatus=jsonRes.transaction.transactionStatus
				getApi_TransactionSequence=jsonRes.transaction.transactionSequence
				getApi_TransactionSubTypeOtherDescription=jsonRes.transaction.transactionSubTypeOtherDescription
				getApi_ReasonForChange=jsonRes.transaction.reasonForChange
				getApi_UserSuppliedText=jsonRes.userSuppliedText
				getApi_DocumentVersion=jsonRes.documentVersion
				getApi_DocumentKey=jsonRes.documentKey
				getApi_StorageId=jsonRes.storageId
				getApi_DocumentMetaData=jsonRes.documentMetaData
			
				getApiWriter.println(sql_ApplicationId+","+getApi_DocumentId+","+getApi_DocumentTypeId+","+getApi_DocumentType+","+getApi_DocumentReference+","+getApi_DocumentStatusId+","+getApi_DocumentStatusName+","+getApi_TransactionId+","+getApi_RiskId+","+getApi_RiskName+","+getApi_Workflowid+","+getApi_DisplayName+","+getApi_TransactionStatus+","+getApi_TransactionSequence+","+getApi_TransactionSubTypeOtherDescription+","+getApi_ReasonForChange+","+getApi_UserSuppliedText+","+getApi_DocumentVersion+","+getApi_DocumentKey+","+getApi_StorageId+","+getApi_DocumentMetaData)
				log.info "API Response for Get method :" +sql_ApplicationId+","+getApi_DocumentId+","+getApi_DocumentTypeId+","+getApi_DocumentType+","+getApi_DocumentReference+","+getApi_DocumentStatusId+","+getApi_DocumentStatusName+","+getApi_TransactionId+","+getApi_RiskId+","+getApi_RiskName+","+getApi_Workflowid+","+getApi_DisplayName+","+getApi_TransactionStatus+","+getApi_TransactionSequence+","+getApi_TransactionSubTypeOtherDescription+","+getApi_ReasonForChange+","+getApi_UserSuppliedText+","+getApi_DocumentVersion+","+getApi_DocumentKey+","+getApi_StorageId+","+getApi_DocumentMetaData
			
				if(getApi_DocumentId.toString().equals(postApi_DocumentId.toString()))
				{
					compareWriter.println(sql_ApplicationId+","+postApi_DocumentId +","+getApi_DocumentId +","+postApi_DocumentTypeId +","+getApi_DocumentTypeId +","+postApi_DocumentType +","+getApi_DocumentType +","+postApi_DocumentReference +","+getApi_DocumentReference +","+postApi_DocumentStatusId +","+getApi_DocumentStatusId +","+postApi_DocumentStatusName +","+getApi_DocumentStatusName +","+postApi_TransactionId +","+getApi_TransactionId +","+postApi_RiskId +","+getApi_RiskId +","+postApi_RiskName +","+getApi_RiskName +","+postApi_Workflowid +","+getApi_Workflowid +","+postApi_DisplayName+","+getApi_DisplayName+","+postApi_TransactionStatus+","+getApi_TransactionStatus+","+postApi_TransactionSequence+","+getApi_TransactionSequence+","+postApi_TransactionSubTypeOtherDescription+","+getApi_TransactionSubTypeOtherDescription+","+postApi_ReasonForChange+","+getApi_ReasonForChange+","+postApi_UserSuppliedText+","+getApi_UserSuppliedText+","+postApi_DocumentVersion+","+getApi_DocumentVersion+","+postApi_DocumentKey+","+getApi_DocumentKey+","+postApi_StorageId+","+getApi_StorageId+","+postApi_DocumentMetaData+","+getApi_DocumentMetaData+","+"Test Case is Passed")
					log.info "Details are matching, hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_ApplicationId+","+postApi_DocumentId +","+getApi_DocumentId +","+postApi_DocumentTypeId +","+getApi_DocumentTypeId +","+postApi_DocumentType +","+getApi_DocumentType +","+postApi_DocumentReference +","+getApi_DocumentReference +","+postApi_DocumentStatusId +","+getApi_DocumentStatusId +","+postApi_DocumentStatusName +","+getApi_DocumentStatusName +","+postApi_TransactionId +","+getApi_TransactionId +","+postApi_RiskId +","+getApi_RiskId +","+postApi_RiskName +","+getApi_RiskName +","+postApi_Workflowid +","+getApi_Workflowid +","+postApi_DisplayName+","+getApi_DisplayName+","+postApi_TransactionStatus+","+getApi_TransactionStatus+","+postApi_TransactionSequence+","+getApi_TransactionSequence+","+postApi_TransactionSubTypeOtherDescription+","+getApi_TransactionSubTypeOtherDescription+","+postApi_ReasonForChange+","+getApi_ReasonForChange+","+postApi_UserSuppliedText+","+getApi_UserSuppliedText+","+postApi_DocumentVersion+","+getApi_DocumentVersion+","+postApi_DocumentKey+","+getApi_DocumentKey+","+postApi_StorageId+","+getApi_StorageId+","+postApi_DocumentMetaData+","+getApi_DocumentMetaData+","+"Test Case is Failed")
					log.info "Details are not matching, hence test case is failed"
				}
			}
			else
			{
				response = removeComma(response);
				compareWriter.println(sql_ApplicationId+","+response+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test Case is Failed")
				log.info "Failed API response is received"+response
			}
		}	
	}
	else
	{
		response = removeComma(response);
		compareWriter.println(sql_ApplicationId+","+response+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test Case is Failed")
		log.info "Failed API response received as : "+response
	}		
	counter=counter+1
	log.info "Number of records verified are : "+counter
}

public String removeComma(String field)
{
	if (field.toString()!=null)
		field = field.replace(",", " ")
	return field;
}

sqlWriter.flush()
postApiWriter.flush()
getApiWriter.flush()
compareWriter.flush()

sqlWriter.close()
postApiWriter.close()
getApiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for Post method of Application By Application Id Document************"	</script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>91737</con:value></con:property><con:property><con:name>documentId</con:name><con:value>600376</con:value></con:property></con:properties></con:testCase><con:testCase id="22519137-bb4e-403c-bd4c-acca601fa3b4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_PatchApplicationByApplicationIdByDocumentByDocumentId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="PatchAppByAppIdByDocByDocId" id="7c4251f4-0d27-427d-864b-65459b88b900"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationid}/documents/${#TestCase#documentId}" methodName="Patch_ApplicationByApplicationIdByDocumentByDocumentId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PatchAppByAppIdByDocByDocId" id="b375f3dd-a492-4310-9f7a-6e866b2a71d3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request>
							[
								{
								"op": "replace",
								    "path": "/storageid",
								    "value": "testStorageID"
								  },
								  {
								    "op": "add",
								    "path": "/documentmetadata",
								    "value": "Test1"
								  }
							]
								</con:request><con:originalUri>http://spltomservices/api/utomapi/applications/75532/documents/494509</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Old_PatchApplicationByApplicationIdByDocumentByDocumentId" id="b3b71a7e-4a5d-425f-bff9-3296cd0a7623" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat
import com.eviware.soapui.support.types.StringToStringMap 

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for PATCH method of Application By Application Id Document************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt =
"""
USE TOM
SELECT
TOP 150
AB.Id as ApplicationId, D.Id as DocumentId, D.DocumentType_Id, rdt.Name as DocumentType, D.DocumentReference, D.DocumentStatus_Id, RDS.Name as DocumentStatus, t.Id as TransactionId,
t.WorkflowId, AB.Discriminator as DisplayName, T.StartDate, T.EndDate, T.AppliedDate, rts.Name as TransationStatus, T.Sequence as TransactionSequence, T.TransactionSubTypeOtherDescription,
T.ReasonForChange_Id, D.UserSuppliedText, D.DocumentVersion,D.IssuedDate, D.DocumentKey, D.RiskName, D.StorageId, D.DocumentMetaData
from applicationbase AB
inner Join [TRANSACTION] t on T.Policy_Id = AB.Id and T.Transaction_PhysicalDeletionAttemptPrevented = 0
left join ref_TransactionStatus rts on rts.Id = T.TransactionStatus_Id
left join Document d on D.Transaction_Id = T.Id --and D.DocumentBase_PhysicalDeletionAttemptPrevented = 0
left join ref_DocumentType rdt on rdT.Id = D.DocumentType_Id 
left join ref_DocumentStatus rds on RDS.Id = D.DocumentStatus_Id
where D.Id is not null and rdt.Name='TradingCertificate' and RDS.Name='Issued'
order by 1 desc
"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_PATCH_ApplicationByApplicationIdDocument.csv"]
def patchApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_PATCH_ApplicationByApplicationIdDocument.csv"]
def getApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_GET_ApplicationByApplicationIdDocument.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_PATCH_ApplicationByApplicationIdDocument.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_PATCH_ApplicationByApplicationIdDocument_"+newDateTimeString+".csv"]
//def patchApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_PATCH_ApplicationByApplicationIdDocument_"+newDateTimeString+".csv"]
//def getApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_GET_ApplicationByApplicationIdDocumen_"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_PATCH_ApplicationByApplicationIdDocument_"+newDateTimeString+".csv"]


def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def patchApiFile = new File(patchApiResponseFile[0])
def patchApiWriter = patchApiFile.newPrintWriter()

def getApiFile = new File(getApiResponseFile[0])
def getApiWriter = getApiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_DocumentId"+","+"SQL_DocumentType_Id"+","+"SQL_DocumentType"+","+"SQL_DocumentReference"+","+"SQL_DocumentStatus_Id"+","+"SQL_DocumentStatus"+","+"SQL_TransactionId"+","+"SQL_WorkflowId"+","+"SQL_DisplayName"+","+"SQL_StartDate"+","+"SQL_EndDate"+","+"SQL_AppliedDate"+","+"SQL_TransationStatus"+","+"SQL_TransactionSequence"+","+"SQL_TransactionSubTypeOtherDescription"+","+"SQL_ReasonForChange_Id"+","+"SQL_UserSuppliedText"+","+"SQL_DocumentVersion"+","+"SQL_IssuedDate"+","+"SQL_DocumentKey"+","+"SQL_RiskName"+","+"SQL_StorageId"+","+"SQL_DocumentMetaData")
patchApiWriter.println("SQL_ApplicationId"+","+"PATCH_API_DocumentId"+","+"PATCH_API_DocumentTypeId"+","+"PATCH_API_DocumentType"+","+"PATCH_API_DocumentReference"+","+"PATCH_API_DocumentStatusId"+","+"PATCH_API_DocumentStatusName"+","+"PATCH_API_TransactionId"+","+"PATCH_API_RiskId"+","+"PATCH_API_RiskName"+","+"PATCH_API_Workflowid"+","+"PATCH_API_DisplayName"+","+"PATCH_API_TransactionStatus"+","+"PATCH_API_TransactionSequence"+","+"PATCH_API_TransactionSubTypeOtherDescription"+","+"PATCH_API_ReasonForChange"+","+"PATCH_API_UserSuppliedText"+","+"PATCH_API_DocumentVersion"+","+"PATCH_API_DocumentKey"+","+"PATCH_API_StorageId"+","+"PATCH_API_DocumentMetaData")
getApiWriter.println("SQL_ApplicationId"+","+"PATCH_API_DocumentId"+","+"PATCH_API_DocumentTypeId"+","+"PATCH_API_DocumentType"+","+"PATCH_API_DocumentReference"+","+"PATCH_API_DocumentStatusId"+","+"PATCH_API_DocumentStatusName"+","+"PATCH_API_TransactionId"+","+"PATCH_API_RiskId"+","+"PATCH_API_RiskName"+","+"PATCH_API_Workflowid"+","+"PATCH_API_DisplayName"+","+"PATCH_API_TransactionStatus"+","+"PATCH_API_TransactionSequence"+","+"PATCH_API_TransactionSubTypeOtherDescription"+","+"PATCH_API_ReasonForChange"+","+"PATCH_API_UserSuppliedText"+","+"PATCH_API_DocumentVersion"+","+"PATCH_API_DocumentKey"+","+"PATCH_API_StorageId"+","+"PATCH_API_DocumentMetaData")
compareWriter.println("SQL_ApplicationId"+","+"PATCHApi_DocumentId "+","+"GETApi_DocumentId "+","+"PATCHApi_DocumentTypeId "+","+"GETApi_DocumentTypeId "+","+"PATCHApi_DocumentType "+","+"GETApi_DocumentType "+","+"PATCHApi_DocumentReference "+","+"GETApi_DocumentReference "+","+"PATCHApi_DocumentStatusId "+","+"GETApi_DocumentStatusId "+","+"PATCHApi_DocumentStatusName "+","+"GETApi_DocumentStatusName "+","+"PATCHApi_TransactionId "+","+"GETApi_TransactionId "+","+"PATCHApi_RiskId "+","+"GETApi_RiskId "+","+"PATCHApi_RiskName "+","+"GETApi_RiskName "+","+"PATCHApi_Workflowid "+","+"GETApi_Workflowid "+","+"PATCHApi_DisplayName"+","+"GETApi_DisplayName"+","+"PATCHApi_TransactionStatus"+","+"GETApi_TransactionStatus"+","+"PATCHApi_TransactionSequence"+","+"GETApi_TransactionSequence"+","+"PATCHApi_TransactionSubTypeOtherDescription"+","+"GETApi_TransactionSubTypeOtherDescription"+","+"PATCHApi_ReasonForChange"+","+"GETApi_ReasonForChange"+","+"PATCHApi_UserSuppliedText"+","+"GETApi_UserSuppliedText"+","+"PATCHApi_DocumentVersion"+","+"GETApi_DocumentVersion"+","+"PATCHApi_DocumentKey"+","+"GETApi_DocumentKey"+","+"PATCHApi_StorageId"+","+"GETApi_StorageId"+","+"PATCHApi_DocumentMetaData"+","+"GETApi_DocumentMetaData"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonResp=null
int counter=0;

String patchApi_DocumentId =null
String patchApi_DocumentTypeId =null
String patchApi_DocumentType =null
String patchApi_DocumentReference =null
String patchApi_DocumentStatusId =null
String patchApi_DocumentStatusName =null
String patchApi_TransactionId =null
String patchApi_RiskId =null
String patchApi_RiskName =null
String patchApi_Workflowid =null
String patchApi_DisplayName=null
String patchApi_TransactionStatus=null
String patchApi_TransactionSequence=null
String patchApi_TransactionSubTypeOtherDescription=null
String patchApi_ReasonForChange=null
String patchApi_UserSuppliedText=null
String patchApi_DocumentVersion=null
String patchApi_DocumentKey=null
String patchApi_StorageId=null
String patchApi_DocumentMetaData=null

String userName="SPL_LONDON"+"\\"+"utomapiuser";
log.info "userName : "+userName

con.eachRow(sqlstmt)
	{	
		row -> 
		sql_ApplicationId=row.ApplicationId
		sql_DocumentId=row.DocumentId
		sql_DocumentType_Id=row.DocumentType_Id
		sql_DocumentType=row.DocumentType
		sql_DocumentReference=row.DocumentReference
		sql_DocumentStatus_Id=row.DocumentStatus_Id
		sql_DocumentStatus=row.DocumentStatus
		sql_TransactionId=row.TransactionId
		sql_WorkflowId=row.WorkflowId
		sql_DisplayName=row.DisplayName
		sql_StartDate=row.StartDate
		sql_EndDate=row.EndDate
		sql_AppliedDate=row.AppliedDate
		sql_TransationStatus=row.TransationStatus
		sql_TransactionSequence=row.TransactionSequence
		sql_TransactionSubTypeOtherDescription=row.TransactionSubTypeOtherDescription
		sql_ReasonForChange_Id=row.ReasonForChange_Id
		sql_UserSuppliedText=row.UserSuppliedText
		sql_DocumentVersion=row.DocumentVersion
		sql_IssuedDate=row.IssuedDate
		sql_DocumentKey=row.DocumentKey
		sql_RiskName=row.RiskName
		sql_StorageId=row.StorageId
		sql_DocumentMetaData=row.DocumentMetaData
		
		sqlWriter.println(sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentType_Id+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatus_Id+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData)
		log.info "SQL Response is : "+sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentType_Id+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatus_Id+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData
	
		//Set the Application ID at test case level
		String applicationId=sql_ApplicationId
		testRunner.testCase.setPropertyValue( "applicationId", applicationId)
		//testRunner.testCase.testSteps["PatchAppByAppIdByDocByDocId"].setPropertyValue( "applicationId", applicationId)
		
		//Set the Document ID at test case level
		String documentId=sql_DocumentId
		testRunner.testCase.setPropertyValue( "documentId", documentId)
		//testRunner.testCase.testSteps["PatchAppByAppIdByDocByDocId"].setPropertyValue( "documentId", documentId)

		String valueOfStorageId="testStorageID"
		String valueOfTestPath="Test1"

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
		//log.info "Token for Patch : "+token
		
		//Run the test step to get response	
		def newRequest = """
							[
								{
								"op": "replace",
								    "path": "/storageid",
								    "value": "${valueOfStorageId}"
								  },
								  {
								    "op": "add",
								    "path": "/documentmetadata",
								    "value": "${valueOfTestPath}"
								  }
							]
								"""
		log.info "Body for PATCH Request = "+newRequest
		testRunner.testCase.testSteps["PatchAppByAppIdByDocByDocId"].setPropertyValue( "Request", newRequest)

		//Run the test step to get response
		testRunner.runTestStepByName('PatchAppByAppIdByDocByDocId')
		String req='${PatchAppByAppIdByDocByDocId#Response}'
		response=context.expand(req)
		//log.info "API Response for PATCH Method received is :"+response
		jsonSlurper=new JsonSlurper()
		jsonRes=jsonSlurper.parseText(response)
		
		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["PatchAppByAppIdByDocByDocId"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info("HTTP status code: " + httpStatusCode)
	
		String error = response
		if(httpStatusCode.equals("200"))
		{
			patchApi_DocumentId = jsonRes.id
			patchApi_DocumentTypeId = jsonRes.documentType.id
			patchApi_DocumentType = jsonRes.documentType.documentTypeName
			patchApi_DocumentReference = jsonRes.documentReference
			patchApi_DocumentStatusId = jsonRes.documentStatus.id
			patchApi_DocumentStatusName = jsonRes.documentStatus.documentStatusName
			patchApi_TransactionId = jsonRes.transaction.id
			patchApi_RiskId = jsonRes.riskId
			patchApi_RiskName = jsonRes.riskName
			patchApi_Workflowid = jsonRes.transaction.workflowid
			patchApi_DisplayName=jsonRes.transaction.displayName
			patchApi_TransactionStatus=jsonRes.transaction.transactionStatus
			patchApi_TransactionSequence=jsonRes.transaction.transactionSequence
			patchApi_TransactionSubTypeOtherDescription=jsonRes.transaction.transactionSubTypeOtherDescription
			patchApi_ReasonForChange=jsonRes.transaction.reasonForChange
			patchApi_UserSuppliedText=jsonRes.userSuppliedText
			patchApi_DocumentVersion=jsonRes.documentVersion
			patchApi_DocumentKey=jsonRes.documentKey
			patchApi_StorageId=jsonRes.storageId
			patchApi_DocumentMetaData=jsonRes.documentMetaData
		
			//sqlWriter.println(sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentType_Id+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatus_Id+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData)
			patchApiWriter.println(sql_ApplicationId+","+patchApi_DocumentId+","+patchApi_DocumentTypeId+","+patchApi_DocumentType+","+patchApi_DocumentReference+","+patchApi_DocumentStatusId+","+patchApi_DocumentStatusName+","+patchApi_TransactionId+","+patchApi_RiskId+","+patchApi_RiskName+","+patchApi_Workflowid+","+patchApi_DisplayName+","+patchApi_TransactionStatus+","+patchApi_TransactionSequence+","+patchApi_TransactionSubTypeOtherDescription+","+patchApi_ReasonForChange+","+patchApi_UserSuppliedText+","+patchApi_DocumentVersion+","+patchApi_DocumentKey+","+patchApi_StorageId+","+patchApi_DocumentMetaData)
			log.info "API Response received from Patch Method as : "+sql_ApplicationId+","+patchApi_DocumentId+","+patchApi_DocumentTypeId+","+patchApi_DocumentType+","+patchApi_DocumentReference+","+patchApi_DocumentStatusId+","+patchApi_DocumentStatusName+","+patchApi_TransactionId+","+patchApi_RiskId+","+patchApi_RiskName+","+patchApi_Workflowid+","+patchApi_DisplayName+","+patchApi_TransactionStatus+","+patchApi_TransactionSequence+","+patchApi_TransactionSubTypeOtherDescription+","+patchApi_ReasonForChange+","+patchApi_UserSuppliedText+","+patchApi_DocumentVersion+","+patchApi_DocumentKey+","+patchApi_StorageId+","+patchApi_DocumentMetaData

			//Set the Application ID at test case level
			applicationId=sql_ApplicationId
			testRunner.testCase.setPropertyValue( "applicationId", applicationId )
			getAppId = testRunner.testCase.getPropertyValue("applicationId")
			
			//Set the Document ID at test case level
			documentId=patchApi_DocumentId.toString()
			testRunner.testCase.setPropertyValue( "documentId", documentId )
			getDocumentId= testRunner.testCase.getPropertyValue("documentId")

			//Set token to test suite level
			testRunner.testCase.testSuite.setPropertyValue("token", token)
			//log.info "Token for get : "+token
			
			testRunner.runTestStepByName('Get_DocByDocId')
			String req1='${Get_DocByDocId#Response}'
			response=context.expand(req1)
			//log.info "API Response for GET method after post received is :"+response
			jsonSlurper=new JsonSlurper() 
			jsonRes=jsonSlurper.parseText(response)

			//Check the Status code of API response
			groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
			httpResponseHeaders = context.testCase.testSteps["Get_DocByDocId"].testRequest.response.responseHeaders
			httpStatus = httpResponseHeaders["#status#"]
			httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
			//log.info("HTTP status code: " + httpStatusCode)
		
			error = response
			if(httpStatusCode.equals("200"))
			{
				getApi_DocumentId = jsonRes.id
				getApi_DocumentTypeId = jsonRes.documentType.id
				getApi_DocumentType = jsonRes.documentType.documentTypeName
				getApi_DocumentReference = jsonRes.documentReference
				getApi_DocumentStatusId = jsonRes.documentStatus.id
				getApi_DocumentStatusName = jsonRes.documentStatus.documentStatusName
				getApi_TransactionId = jsonRes.transaction.id
				getApi_RiskId = jsonRes.riskId
				getApi_RiskName = jsonRes.riskName
				getApi_Workflowid = jsonRes.transaction.workflowid
				getApi_DisplayName=jsonRes.transaction.displayName
				getApi_TransactionStatus=jsonRes.transaction.transactionStatus
				getApi_TransactionSequence=jsonRes.transaction.transactionSequence
				getApi_TransactionSubTypeOtherDescription=jsonRes.transaction.transactionSubTypeOtherDescription
				getApi_ReasonForChange=jsonRes.transaction.reasonForChange
				getApi_UserSuppliedText=jsonRes.userSuppliedText
				getApi_DocumentVersion=jsonRes.documentVersion
				getApi_DocumentKey=jsonRes.documentKey
				getApi_StorageId=jsonRes.storageId
				getApi_DocumentMetaData=jsonRes.documentMetaData
	
				getApiWriter.println(sql_ApplicationId+","+getApi_DocumentId+","+getApi_DocumentTypeId+","+getApi_DocumentType+","+getApi_DocumentReference+","+getApi_DocumentStatusId+","+getApi_DocumentStatusName+","+getApi_TransactionId+","+getApi_RiskId+","+getApi_RiskName+","+getApi_Workflowid+","+getApi_DisplayName+","+getApi_TransactionStatus+","+getApi_TransactionSequence+","+getApi_TransactionSubTypeOtherDescription+","+getApi_ReasonForChange+","+getApi_UserSuppliedText+","+getApi_DocumentVersion+","+getApi_DocumentKey+","+getApi_StorageId+","+getApi_DocumentMetaData)
				log.info "API Response for GET method :" +sql_ApplicationId+","+getApi_DocumentId+","+getApi_DocumentTypeId+","+getApi_DocumentType+","+getApi_DocumentReference+","+getApi_DocumentStatusId+","+getApi_DocumentStatusName+","+getApi_TransactionId+","+getApi_RiskId+","+getApi_RiskName+","+getApi_Workflowid+","+getApi_DisplayName+","+getApi_TransactionStatus+","+getApi_TransactionSequence+","+getApi_TransactionSubTypeOtherDescription+","+getApi_ReasonForChange+","+getApi_UserSuppliedText+","+getApi_DocumentVersion+","+getApi_DocumentKey+","+getApi_StorageId+","+getApi_DocumentMetaData
	
				if(getApi_DocumentId.toString().equals(patchApi_DocumentId.toString()) && sql_DocumentType_Id.toString().equals(patchApi_DocumentTypeId.toString()) && sql_DocumentType.toString().toUpperCase().equals(patchApi_DocumentType.toString().toUpperCase()) && sql_DocumentReference.toString().equals(patchApi_DocumentReference.toString()) && sql_DocumentStatus_Id.toString().equals(patchApi_DocumentStatusId.toString()) && sql_DocumentStatus.toString().toUpperCase().equals(patchApi_DocumentStatusName.toString().toUpperCase()) && sql_TransactionId.toString().equals(patchApi_TransactionId.toString()) && sql_WorkflowId.toString().toUpperCase().equals(patchApi_Workflowid.toString().toUpperCase()) && sql_DisplayName.toString().toUpperCase().equals(patchApi_DisplayName.toString().toUpperCase()) && sql_TransationStatus.toString().toUpperCase().equals(patchApi_TransactionStatus.toString().toUpperCase()) && sql_TransactionSequence.toString().equals(patchApi_TransactionSequence.toString()) && sql_TransactionSubTypeOtherDescription.toString().toUpperCase().equals(patchApi_TransactionSubTypeOtherDescription.toString().toUpperCase()) && sql_ReasonForChange_Id.toString().equals(patchApi_ReasonForChange.toString()) && sql_UserSuppliedText.toString().toUpperCase().equals(patchApi_UserSuppliedText.toString().toUpperCase()) && sql_DocumentVersion.toString().equals(patchApi_DocumentVersion.toString()) && sql_DocumentKey.toString().toUpperCase().equals(patchApi_DocumentKey.toString().toUpperCase()) && sql_RiskName.toString().toUpperCase().equals(patchApi_RiskName.toString().toUpperCase()) && sql_StorageId.toString().toUpperCase().equals(patchApi_StorageId.toString().toUpperCase()) && sql_DocumentMetaData.toString().toUpperCase().equals(patchApi_DocumentMetaData.toString().toUpperCase()))
				{
					compareWriter.println(sql_ApplicationId+","+patchApi_DocumentId +","+getApi_DocumentId +","+patchApi_DocumentTypeId +","+getApi_DocumentTypeId +","+patchApi_DocumentType +","+getApi_DocumentType +","+patchApi_DocumentReference +","+getApi_DocumentReference +","+patchApi_DocumentStatusId +","+getApi_DocumentStatusId +","+patchApi_DocumentStatusName +","+getApi_DocumentStatusName +","+patchApi_TransactionId +","+getApi_TransactionId +","+patchApi_RiskId +","+getApi_RiskId +","+patchApi_RiskName +","+getApi_RiskName +","+patchApi_Workflowid +","+getApi_Workflowid +","+patchApi_DisplayName+","+getApi_DisplayName+","+patchApi_TransactionStatus+","+getApi_TransactionStatus+","+patchApi_TransactionSequence+","+getApi_TransactionSequence+","+patchApi_TransactionSubTypeOtherDescription+","+getApi_TransactionSubTypeOtherDescription+","+patchApi_ReasonForChange+","+getApi_ReasonForChange+","+patchApi_UserSuppliedText+","+getApi_UserSuppliedText+","+patchApi_DocumentVersion+","+getApi_DocumentVersion+","+patchApi_DocumentKey+","+getApi_DocumentKey+","+patchApi_StorageId+","+getApi_StorageId+","+patchApi_DocumentMetaData+","+getApi_DocumentMetaData+","+"Test Case is Passed")
					log.info "Details are matching, hence test case is passed"
				}
			}	
		}
		else
		{
			//patchApiWriter.println("API Response failed for : "+sql_ApplicationId+","+"Response is not received hence test case is failed "+jsonRes)
			//compareWriter.println(sql_DocumentId+","+patchApi_DocumentId+","+sql_DocumentType_Id+","+patchApi_DocumentTypeId+","+sql_DocumentType_Id+","+patchApi_DocumentTypeId+","+sql_DocumentType+","+patchApi_DocumentType+","+sql_DocumentReference+","+patchApi_DocumentReference+","+sql_DocumentStatus_Id+","+patchApi_DocumentStatusId+","+sql_DocumentStatus+","+patchApi_DocumentStatusName+","+sql_TransactionId+","+patchApi_TransactionId+","+sql_WorkflowId+","+patchApi_Workflowid+","+sql_DisplayName+","+patchApi_DisplayName+","+sql_TransationStatus+","+patchApi_TransactionStatus+","+sql_TransactionSequence+","+patchApi_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+patchApi_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+patchApi_ReasonForChange+","+sql_UserSuppliedText+","+patchApi_UserSuppliedText+","+sql_DocumentVersion+","+patchApi_DocumentVersion+","+sql_DocumentKey+","+patchApi_DocumentKey+","+sql_RiskName+","+patchApi_RiskName+","+sql_StorageId+","+patchApi_StorageId+","+sql_DocumentMetaData+","+patchApi_DocumentMetaData+","+"Test case is failed")
			log.info "Failed API Response received as : "+response
		}	
		counter=counter+1
		log.info "Number of records verified are : "+counter
	}

sqlWriter.flush()
patchApiWriter.flush()
getApiWriter.flush()
compareWriter.flush()

sqlWriter.close()
patchApiWriter.close()
getApiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for PATCH method of Application By Application Id Document************"	]]></script></con:config></con:testStep><con:testStep type="restrequest" name="Get_DocByDocId" id="6a0eb45f-7d62-4df7-842c-cbf177daa1c3"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/documents/${#TestCase#documentId}" methodName="ApplicationByApplicationIdByDocumentsByDocumentId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_DocByDocId" id="a0e17e00-8054-4123-9d3c-2be3c46b51ef" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/75527/documents/494502</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="PatchApplicationByApplicationIdByDocumentByDocumentId_Final" id="b85184c2-3274-4e56-8962-f6ac21ec439b" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat
import com.eviware.soapui.support.types.StringToStringMap 

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for PATCH method of Application By Application Id Document************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt =
"""
USE TOM
SELECT
TOP 200
AB.Id as ApplicationId, D.Id as DocumentId, D.DocumentType_Id, rdt.Name as DocumentType, D.DocumentReference, D.DocumentStatus_Id, RDS.Name as DocumentStatus, t.Id as TransactionId,
t.WorkflowId, AB.Discriminator as DisplayName, T.StartDate, T.EndDate, T.AppliedDate, rts.Name as TransationStatus, T.Sequence as TransactionSequence, T.TransactionSubTypeOtherDescription,
T.ReasonForChange_Id, D.UserSuppliedText, D.DocumentVersion,D.IssuedDate, D.DocumentKey, D.RiskName, D.StorageId, D.DocumentMetaData
from applicationbase AB
inner Join [TRANSACTION] t on T.Policy_Id = AB.Id and T.Transaction_PhysicalDeletionAttemptPrevented = 0
left join ref_TransactionStatus rts on rts.Id = T.TransactionStatus_Id
left join Document d on D.Transaction_Id = T.Id --and D.DocumentBase_PhysicalDeletionAttemptPrevented = 0
left join ref_DocumentType rdt on rdT.Id = D.DocumentType_Id 
left join ref_DocumentStatus rds on RDS.Id = D.DocumentStatus_Id
where D.Id is not null and rdt.Name='TradingCertificate' and RDS.Name='Issued'
order by 1 desc
"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_PATCH_ApplicationByApplicationIdDocument.csv"]
//def patchApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_PATCH_ApplicationByApplicationIdDocument.csv"]
//def getApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_GET_ApplicationByApplicationIdDocument.csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_PATCH_ApplicationByApplicationIdDocument.csv"]

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_PATCH_ApplicationByApplicationIdDocument_"+newDateTimeString+".csv"]
def patchApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_PATCH_ApplicationByApplicationIdDocument_"+newDateTimeString+".csv"]
def getApiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_GET_ApplicationByApplicationIdDocumen_"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_PATCH_ApplicationByApplicationIdDocument_"+newDateTimeString+".csv"]


def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def patchApiFile = new File(patchApiResponseFile[0])
def patchApiWriter = patchApiFile.newPrintWriter()

def getApiFile = new File(getApiResponseFile[0])
def getApiWriter = getApiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_DocumentId"+","+"SQL_DocumentType_Id"+","+"SQL_DocumentType"+","+"SQL_DocumentReference"+","+"SQL_DocumentStatus_Id"+","+"SQL_DocumentStatus"+","+"SQL_TransactionId"+","+"SQL_WorkflowId"+","+"SQL_DisplayName"+","+"SQL_StartDate"+","+"SQL_EndDate"+","+"SQL_AppliedDate"+","+"SQL_TransationStatus"+","+"SQL_TransactionSequence"+","+"SQL_TransactionSubTypeOtherDescription"+","+"SQL_ReasonForChange_Id"+","+"SQL_UserSuppliedText"+","+"SQL_DocumentVersion"+","+"SQL_IssuedDate"+","+"SQL_DocumentKey"+","+"SQL_RiskName"+","+"SQL_StorageId"+","+"SQL_DocumentMetaData"+","+"SQL_UserName"+","+"SQL_documentCreatedById"+","+"SQL_documentCreatedById"+","+"SQL_documentLastModifiedById"+","+"SQL_applicationDocumentCreatedById"+","+"SQL_applicationDocumentLastModifiedById"+","+"SQL_appRiskapplicationDocumentCreatedById"+","+"SQL_appRiskapplicationDocumentLastModifiedById")
patchApiWriter.println("SQL_ApplicationId"+","+"PATCH_API_DocumentId"+","+"PATCH_API_DocumentTypeId"+","+"PATCH_API_DocumentType"+","+"PATCH_API_DocumentReference"+","+"PATCH_API_DocumentStatusId"+","+"PATCH_API_DocumentStatusName"+","+"PATCH_API_TransactionId"+","+"PATCH_API_RiskId"+","+"PATCH_API_RiskName"+","+"PATCH_API_Workflowid"+","+"PATCH_API_DisplayName"+","+"PATCH_API_TransactionStatus"+","+"PATCH_API_TransactionSequence"+","+"PATCH_API_TransactionSubTypeOtherDescription"+","+"PATCH_API_ReasonForChange"+","+"PATCH_API_UserSuppliedText"+","+"PATCH_API_DocumentVersion"+","+"PATCH_API_DocumentKey"+","+"PATCH_API_StorageId"+","+"PATCH_API_DocumentMetaData")
getApiWriter.println("SQL_ApplicationId"+","+"PATCH_API_DocumentId"+","+"PATCH_API_DocumentTypeId"+","+"PATCH_API_DocumentType"+","+"PATCH_API_DocumentReference"+","+"PATCH_API_DocumentStatusId"+","+"PATCH_API_DocumentStatusName"+","+"PATCH_API_TransactionId"+","+"PATCH_API_RiskId"+","+"PATCH_API_RiskName"+","+"PATCH_API_Workflowid"+","+"PATCH_API_DisplayName"+","+"PATCH_API_TransactionStatus"+","+"PATCH_API_TransactionSequence"+","+"PATCH_API_TransactionSubTypeOtherDescription"+","+"PATCH_API_ReasonForChange"+","+"PATCH_API_UserSuppliedText"+","+"PATCH_API_DocumentVersion"+","+"PATCH_API_DocumentKey"+","+"PATCH_API_StorageId"+","+"PATCH_API_DocumentMetaData")
compareWriter.println("SQL_ApplicationId"+","+"PATCHApi_DocumentId "+","+"GETApi_DocumentId "+","+"PATCHApi_DocumentTypeId "+","+"GETApi_DocumentTypeId "+","+"PATCHApi_DocumentType "+","+"GETApi_DocumentType "+","+"PATCHApi_DocumentReference "+","+"GETApi_DocumentReference "+","+"PATCHApi_DocumentStatusId "+","+"GETApi_DocumentStatusId "+","+"PATCHApi_DocumentStatusName "+","+"GETApi_DocumentStatusName "+","+"PATCHApi_TransactionId "+","+"GETApi_TransactionId "+","+"PATCHApi_RiskId "+","+"GETApi_RiskId "+","+"PATCHApi_RiskName "+","+"GETApi_RiskName "+","+"PATCHApi_Workflowid "+","+"GETApi_Workflowid "+","+"PATCHApi_DisplayName"+","+"GETApi_DisplayName"+","+"PATCHApi_TransactionStatus"+","+"GETApi_TransactionStatus"+","+"PATCHApi_TransactionSequence"+","+"GETApi_TransactionSequence"+","+"PATCHApi_TransactionSubTypeOtherDescription"+","+"GETApi_TransactionSubTypeOtherDescription"+","+"PATCHApi_ReasonForChange"+","+"GETApi_ReasonForChange"+","+"PATCHApi_UserSuppliedText"+","+"GETApi_UserSuppliedText"+","+"PATCHApi_DocumentVersion"+","+"GETApi_DocumentVersion"+","+"PATCHApi_DocumentKey"+","+"GETApi_DocumentKey"+","+"PATCHApi_StorageId"+","+"GETApi_StorageId"+","+"PATCHApi_DocumentMetaData"+","+"GETApi_DocumentMetaData"+","+"SQL_UserName"+","+"SQL_documentCreatedById"+","+"SQL_documentCreatedById"+","+"SQL_documentLastModifiedById"+","+"SQL_applicationDocumentCreatedById"+","+"SQL_applicationDocumentLastModifiedById"+","+"SQL_appRiskapplicationDocumentCreatedById"+","+"SQL_appRiskapplicationDocumentLastModifiedById"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonResp=null
int counter=0;

String patchApi_DocumentId =null
String patchApi_DocumentTypeId =null
String patchApi_DocumentType =null
String patchApi_DocumentReference =null
String patchApi_DocumentStatusId =null
String patchApi_DocumentStatusName =null
String patchApi_TransactionId =null
String patchApi_RiskId =null
String patchApi_RiskName =null
String patchApi_Workflowid =null
String patchApi_DisplayName=null
String patchApi_TransactionStatus=null
String patchApi_TransactionSequence=null
String patchApi_TransactionSubTypeOtherDescription=null
String patchApi_ReasonForChange=null
String patchApi_UserSuppliedText=null
String patchApi_DocumentVersion=null
String patchApi_DocumentKey=null
String patchApi_StorageId=null
String patchApi_DocumentMetaData=null

String userName="SPL_LONDON"+"\\"+"utomapiuser";
//log.info "userName : "+userName

con.eachRow(sqlstmt)
	{	
		row -> 
		sql_ApplicationId=row.ApplicationId
		sql_DocumentId=row.DocumentId
		sql_DocumentType_Id=row.DocumentType_Id
		sql_DocumentType=row.DocumentType
		sql_DocumentReference=row.DocumentReference
		sql_DocumentStatus_Id=row.DocumentStatus_Id
		sql_DocumentStatus=row.DocumentStatus
		sql_TransactionId=row.TransactionId
		sql_WorkflowId=row.WorkflowId
		sql_DisplayName=row.DisplayName
		sql_StartDate=row.StartDate
		sql_EndDate=row.EndDate
		sql_AppliedDate=row.AppliedDate
		sql_TransationStatus=row.TransationStatus
		sql_TransactionSequence=row.TransactionSequence
		sql_TransactionSubTypeOtherDescription=row.TransactionSubTypeOtherDescription
		sql_ReasonForChange_Id=row.ReasonForChange_Id
		sql_UserSuppliedText=row.UserSuppliedText
		sql_DocumentVersion=row.DocumentVersion
		sql_IssuedDate=row.IssuedDate
		sql_DocumentKey=row.DocumentKey
		sql_RiskName=row.RiskName
		sql_StorageId=row.StorageId
		sql_DocumentMetaData=row.DocumentMetaData
		sqlWriter.print(sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentType_Id+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatus_Id+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData)
		//sqlWriter.println(sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentType_Id+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatus_Id+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData)
		log.info "SQL Response is : "+sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentType_Id+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatus_Id+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData
	
		//Set the Application ID at test case level
		String applicationId=sql_ApplicationId
		testRunner.testCase.setPropertyValue( "applicationId", applicationId)
		//testRunner.testCase.testSteps["PatchAppByAppIdByDocByDocId"].setPropertyValue( "applicationId", applicationId)
		
		//Set the Document ID at test case level
		String documentId=sql_DocumentId
		testRunner.testCase.setPropertyValue( "documentId", documentId)
		//testRunner.testCase.testSteps["PatchAppByAppIdByDocByDocId"].setPropertyValue( "documentId", documentId)

		String valueOfStorageId="testStorageID"
		String valueOfTestPath="Test1"

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
		//log.info "Token for Patch : "+token
		
		//Run the test step to get response	
		def newRequest = """
							[
								{
								"op": "replace",
								    "path": "/storageid",
								    "value": "${valueOfStorageId}"
								  },
								  {
								    "op": "add",
								    "path": "/documentmetadata",
								    "value": "${valueOfTestPath}"
								  }
							]
								"""
		log.info "Body for PATCH Request = "+newRequest
		testRunner.testCase.testSteps["PatchAppByAppIdByDocByDocId"].setPropertyValue( "Request", newRequest)

		//Run the test step to get response
		testRunner.runTestStepByName('PatchAppByAppIdByDocByDocId')
		String req='${PatchAppByAppIdByDocByDocId#Response}'
		response=context.expand(req)
		//log.info "API Response for PATCH Method received is :"+response
		jsonSlurper=new JsonSlurper()
		jsonRes=jsonSlurper.parseText(response)
		
		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["PatchAppByAppIdByDocByDocId"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info("HTTP status code: " + httpStatusCode)
	
		String error = response
		if(httpStatusCode.equals("200"))
		{
			patchApi_DocumentId = jsonRes.id
			patchApi_DocumentTypeId = jsonRes.documentType.id
			patchApi_DocumentType = jsonRes.documentType.documentTypeName
			patchApi_DocumentReference = jsonRes.documentReference
			patchApi_DocumentStatusId = jsonRes.documentStatus.id
			patchApi_DocumentStatusName = jsonRes.documentStatus.documentStatusName
			patchApi_TransactionId = jsonRes.transaction.id
			patchApi_RiskId = jsonRes.riskId
			patchApi_RiskName = jsonRes.riskName
			patchApi_Workflowid = jsonRes.transaction.workflowid
			patchApi_DisplayName=jsonRes.transaction.displayName
			patchApi_TransactionStatus=jsonRes.transaction.transactionStatus
			patchApi_TransactionSequence=jsonRes.transaction.transactionSequence
			patchApi_TransactionSubTypeOtherDescription=jsonRes.transaction.transactionSubTypeOtherDescription
			patchApi_ReasonForChange=jsonRes.transaction.reasonForChange
			patchApi_UserSuppliedText=jsonRes.userSuppliedText
			patchApi_DocumentVersion=jsonRes.documentVersion
			patchApi_DocumentKey=jsonRes.documentKey
			patchApi_StorageId=jsonRes.storageId
			patchApi_DocumentMetaData=jsonRes.documentMetaData
		
			//sqlWriter.println(sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentType_Id+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatus_Id+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData)
			patchApiWriter.println(sql_ApplicationId+","+patchApi_DocumentId+","+patchApi_DocumentTypeId+","+patchApi_DocumentType+","+patchApi_DocumentReference+","+patchApi_DocumentStatusId+","+patchApi_DocumentStatusName+","+patchApi_TransactionId+","+patchApi_RiskId+","+patchApi_RiskName+","+patchApi_Workflowid+","+patchApi_DisplayName+","+patchApi_TransactionStatus+","+patchApi_TransactionSequence+","+patchApi_TransactionSubTypeOtherDescription+","+patchApi_ReasonForChange+","+patchApi_UserSuppliedText+","+patchApi_DocumentVersion+","+patchApi_DocumentKey+","+patchApi_StorageId+","+patchApi_DocumentMetaData)
			log.info "API Response received from Patch Method as : "+sql_ApplicationId+","+patchApi_DocumentId+","+patchApi_DocumentTypeId+","+patchApi_DocumentType+","+patchApi_DocumentReference+","+patchApi_DocumentStatusId+","+patchApi_DocumentStatusName+","+patchApi_TransactionId+","+patchApi_RiskId+","+patchApi_RiskName+","+patchApi_Workflowid+","+patchApi_DisplayName+","+patchApi_TransactionStatus+","+patchApi_TransactionSequence+","+patchApi_TransactionSubTypeOtherDescription+","+patchApi_ReasonForChange+","+patchApi_UserSuppliedText+","+patchApi_DocumentVersion+","+patchApi_DocumentKey+","+patchApi_StorageId+","+patchApi_DocumentMetaData

			//Set the Application ID at test case level
			applicationId=sql_ApplicationId
			testRunner.testCase.setPropertyValue( "applicationId", applicationId )
			getAppId = testRunner.testCase.getPropertyValue("applicationId")
			
			//Set the Document ID at test case level
			documentId=patchApi_DocumentId.toString()
			testRunner.testCase.setPropertyValue( "documentId", documentId )
			getDocumentId= testRunner.testCase.getPropertyValue("documentId")

			//Set token to test suite level
			testRunner.testCase.testSuite.setPropertyValue("token", token)
			//log.info "Token for get : "+token
			
			testRunner.runTestStepByName('Get_DocByDocId')
			String req1='${Get_DocByDocId#Response}'
			response=context.expand(req1)
			//log.info "API Response for GET method after post received is :"+response
			jsonSlurper=new JsonSlurper() 
			jsonRes=jsonSlurper.parseText(response)

			//Check the Status code of API response
			groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
			httpResponseHeaders = context.testCase.testSteps["Get_DocByDocId"].testRequest.response.responseHeaders
			httpStatus = httpResponseHeaders["#status#"]
			httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
			//log.info("HTTP status code: " + httpStatusCode)
		
			error = response
			if(httpStatusCode.equals("200"))
			{
				getApi_DocumentId = jsonRes.id
				getApi_DocumentTypeId = jsonRes.documentType.id
				getApi_DocumentType = jsonRes.documentType.documentTypeName
				getApi_DocumentReference = jsonRes.documentReference
				getApi_DocumentStatusId = jsonRes.documentStatus.id
				getApi_DocumentStatusName = jsonRes.documentStatus.documentStatusName
				getApi_TransactionId = jsonRes.transaction.id
				getApi_RiskId = jsonRes.riskId
				getApi_RiskName = jsonRes.riskName
				getApi_Workflowid = jsonRes.transaction.workflowid
				getApi_DisplayName=jsonRes.transaction.displayName
				getApi_TransactionStatus=jsonRes.transaction.transactionStatus
				getApi_TransactionSequence=jsonRes.transaction.transactionSequence
				getApi_TransactionSubTypeOtherDescription=jsonRes.transaction.transactionSubTypeOtherDescription
				getApi_ReasonForChange=jsonRes.transaction.reasonForChange
				getApi_UserSuppliedText=jsonRes.userSuppliedText
				getApi_DocumentVersion=jsonRes.documentVersion
				getApi_DocumentKey=jsonRes.documentKey
				getApi_StorageId=jsonRes.storageId
				getApi_DocumentMetaData=jsonRes.documentMetaData
				
				int docId=getApi_DocumentId.toInteger()
				String sqlstmt1 =
					"""
					USE TOM
					select d.id, U.UserName, d.CreatedBy_Id as Doc_CreatedById, d.LastModifiedBy_Id as Doc_LastModifiedById, ad.CreatedBy_Id as AppDoc_CreatedById,
					ad.LastModifiedBy_Id as AppDoc_CreatedById, arad.CreatedBy_Id as AppRiskDoc_CreatedById, arad.LastModifiedBy_Id as AppRiskDoc_LastModifiedById, 
					d.DocumentType_Id, d.DocumentStatus_Id, d.Name, d.Description, d.Discriminator, ad.Application_Id
					from document d
					inner join ApplicationDocument ad on d.id = ad.Document_Id
					inner join [ApplicationRiskApplicationDocument] arad on arad.ApplicationDocument_Id = ad.Id
					inner join dbo.[User] U on U.Id = d.LastModifiedBy_Id
					where d.id="""+docId+"""
					"""
					//log.info "sqlstmt1 : "+sqlstmt1

					con.eachRow(sqlstmt1)
					{
						rows ->
						sql_UserName=rows.UserName
						sql_documentCreatedById=rows.Doc_CreatedById
						sql_documentLastModifiedById=rows.Doc_LastModifiedById
						sql_applicationDocumentCreatedById=rows.AppDoc_CreatedById
						sql_applicationDocumentLastModifiedById=rows.AppDoc_CreatedById
						sql_appRiskapplicationDocumentCreatedById=rows.AppRiskDoc_CreatedById
						sql_appRiskapplicationDocumentLastModifiedById=rows.AppRiskDoc_LastModifiedById
					}
					//log.info "sql_UserName : "+sql_UserName
					sqlWriter.println(","+sql_UserName+","+sql_documentCreatedById+","+sql_documentCreatedById+","+sql_documentLastModifiedById+","+sql_applicationDocumentCreatedById+","+sql_applicationDocumentLastModifiedById+","+sql_appRiskapplicationDocumentCreatedById+","+sql_appRiskapplicationDocumentLastModifiedById)
	
				getApiWriter.println(sql_ApplicationId+","+getApi_DocumentId+","+getApi_DocumentTypeId+","+getApi_DocumentType+","+getApi_DocumentReference+","+getApi_DocumentStatusId+","+getApi_DocumentStatusName+","+getApi_TransactionId+","+getApi_RiskId+","+getApi_RiskName+","+getApi_Workflowid+","+getApi_DisplayName+","+getApi_TransactionStatus+","+getApi_TransactionSequence+","+getApi_TransactionSubTypeOtherDescription+","+getApi_ReasonForChange+","+getApi_UserSuppliedText+","+getApi_DocumentVersion+","+getApi_DocumentKey+","+getApi_StorageId+","+getApi_DocumentMetaData)
				log.info "API Response for GET method :" +sql_ApplicationId+","+getApi_DocumentId+","+getApi_DocumentTypeId+","+getApi_DocumentType+","+getApi_DocumentReference+","+getApi_DocumentStatusId+","+getApi_DocumentStatusName+","+getApi_TransactionId+","+getApi_RiskId+","+getApi_RiskName+","+getApi_Workflowid+","+getApi_DisplayName+","+getApi_TransactionStatus+","+getApi_TransactionSequence+","+getApi_TransactionSubTypeOtherDescription+","+getApi_ReasonForChange+","+getApi_UserSuppliedText+","+getApi_DocumentVersion+","+getApi_DocumentKey+","+getApi_StorageId+","+getApi_DocumentMetaData
	
				if(sql_UserName.toString().equals(userName) && getApi_DocumentId.toString().equals(patchApi_DocumentId.toString()) && sql_DocumentType_Id.toString().equals(patchApi_DocumentTypeId.toString()) && sql_DocumentType.toString().toUpperCase().equals(patchApi_DocumentType.toString().toUpperCase()) && sql_DocumentReference.toString().equals(patchApi_DocumentReference.toString()) && sql_DocumentStatus_Id.toString().equals(patchApi_DocumentStatusId.toString()) && sql_DocumentStatus.toString().toUpperCase().equals(patchApi_DocumentStatusName.toString().toUpperCase()) && sql_TransactionId.toString().equals(patchApi_TransactionId.toString()) && sql_WorkflowId.toString().toUpperCase().equals(patchApi_Workflowid.toString().toUpperCase()) && sql_DisplayName.toString().toUpperCase().equals(patchApi_DisplayName.toString().toUpperCase()) && sql_TransationStatus.toString().toUpperCase().equals(patchApi_TransactionStatus.toString().toUpperCase()) && sql_TransactionSequence.toString().equals(patchApi_TransactionSequence.toString()) && sql_TransactionSubTypeOtherDescription.toString().toUpperCase().equals(patchApi_TransactionSubTypeOtherDescription.toString().toUpperCase()) && sql_ReasonForChange_Id.toString().equals(patchApi_ReasonForChange.toString()) && sql_UserSuppliedText.toString().toUpperCase().equals(patchApi_UserSuppliedText.toString().toUpperCase()) && sql_DocumentVersion.toString().equals(patchApi_DocumentVersion.toString()) && sql_DocumentKey.toString().toUpperCase().equals(patchApi_DocumentKey.toString().toUpperCase()) && sql_RiskName.toString().toUpperCase().equals(patchApi_RiskName.toString().toUpperCase()) && sql_StorageId.toString().toUpperCase().equals(patchApi_StorageId.toString().toUpperCase()) && sql_DocumentMetaData.toString().toUpperCase().equals(patchApi_DocumentMetaData.toString().toUpperCase()))
				{
					compareWriter.println(sql_ApplicationId+","+patchApi_DocumentId +","+getApi_DocumentId +","+patchApi_DocumentTypeId +","+getApi_DocumentTypeId +","+patchApi_DocumentType +","+getApi_DocumentType +","+patchApi_DocumentReference +","+getApi_DocumentReference +","+patchApi_DocumentStatusId +","+getApi_DocumentStatusId +","+patchApi_DocumentStatusName +","+getApi_DocumentStatusName +","+patchApi_TransactionId +","+getApi_TransactionId +","+patchApi_RiskId +","+getApi_RiskId +","+patchApi_RiskName +","+getApi_RiskName +","+patchApi_Workflowid +","+getApi_Workflowid +","+patchApi_DisplayName+","+getApi_DisplayName+","+patchApi_TransactionStatus+","+getApi_TransactionStatus+","+patchApi_TransactionSequence+","+getApi_TransactionSequence+","+patchApi_TransactionSubTypeOtherDescription+","+getApi_TransactionSubTypeOtherDescription+","+patchApi_ReasonForChange+","+getApi_ReasonForChange+","+patchApi_UserSuppliedText+","+getApi_UserSuppliedText+","+patchApi_DocumentVersion+","+getApi_DocumentVersion+","+patchApi_DocumentKey+","+getApi_DocumentKey+","+patchApi_StorageId+","+getApi_StorageId+","+patchApi_DocumentMetaData+","+getApi_DocumentMetaData+","+sql_UserName+","+sql_documentCreatedById+","+sql_documentCreatedById+","+sql_documentLastModifiedById+","+sql_applicationDocumentCreatedById+","+sql_applicationDocumentLastModifiedById+","+sql_appRiskapplicationDocumentCreatedById+","+sql_appRiskapplicationDocumentLastModifiedById+","+"Test Case is Passed")
					log.info "Details are matching, hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_ApplicationId+","+patchApi_DocumentId +","+getApi_DocumentId +","+patchApi_DocumentTypeId +","+getApi_DocumentTypeId +","+patchApi_DocumentType +","+getApi_DocumentType +","+patchApi_DocumentReference +","+getApi_DocumentReference +","+patchApi_DocumentStatusId +","+getApi_DocumentStatusId +","+patchApi_DocumentStatusName +","+getApi_DocumentStatusName +","+patchApi_TransactionId +","+getApi_TransactionId +","+patchApi_RiskId +","+getApi_RiskId +","+patchApi_RiskName +","+getApi_RiskName +","+patchApi_Workflowid +","+getApi_Workflowid +","+patchApi_DisplayName+","+getApi_DisplayName+","+patchApi_TransactionStatus+","+getApi_TransactionStatus+","+patchApi_TransactionSequence+","+getApi_TransactionSequence+","+patchApi_TransactionSubTypeOtherDescription+","+getApi_TransactionSubTypeOtherDescription+","+patchApi_ReasonForChange+","+getApi_ReasonForChange+","+patchApi_UserSuppliedText+","+getApi_UserSuppliedText+","+patchApi_DocumentVersion+","+getApi_DocumentVersion+","+patchApi_DocumentKey+","+getApi_DocumentKey+","+patchApi_StorageId+","+getApi_StorageId+","+patchApi_DocumentMetaData+","+getApi_DocumentMetaData+","+sql_UserName+","+sql_documentCreatedById+","+sql_documentCreatedById+","+sql_documentLastModifiedById+","+sql_applicationDocumentCreatedById+","+sql_applicationDocumentLastModifiedById+","+sql_appRiskapplicationDocumentCreatedById+","+sql_appRiskapplicationDocumentLastModifiedById+","+"Test Case is failed")
					log.info "Details are not matching, hence test case is failed"
				}
				
			}	
		}
		else
		{
			compareWriter.println(sql_ApplicationId+","+response+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test Case is failed")
			log.info "Failed API Response received as : "+response
		}	
		counter=counter+1
		log.info "Number of records verified are : "+counter
	}

sqlWriter.flush()
patchApiWriter.flush()
getApiWriter.flush()
compareWriter.flush()

sqlWriter.close()
patchApiWriter.close()
getApiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for PATCH method of Application By Application Id Document************"	]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>89821</con:value></con:property><con:property><con:name>documentId</con:name><con:value>597588</con:value></con:property></con:properties></con:testCase><con:testCase id="17080522-0d3c-4b67-ae71-5125cf915d06" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByTransactions" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByTransactions" id="45253145-8bd5-4b94-a6f2-1989a9b00be0"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/transactions" methodName="ApplicationByApplicationIdByTransactions" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByTransactions" id="0c7622d7-2e59-47ce-a24f-e6d8d0c8568b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76176/transactions</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByTransactions" id="59aa81ce-7435-42b0-b17d-159eea427108" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat
String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']


def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for Application By Application Id Transactions************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt = 
'''
	Use TOM
	Select DISTINCT 
	TOP 100
	T.QuoteBase_Id AS ApplicationId, T.Id as TransactionId, T.WorkflowId, T.Discriminator as DisplayName, T.StartDate, T.EndDate, T.AppliedDate,
	RTS.Name as TransactionStatus, T.Sequence, T.TransactionSubTypeOtherDescription, T.ReasonForChange_Id
	from [TRANSACTION] T 
	left join ref_TransactionStatus RTS on RTS.Id = T.TransactionStatus_Id
	order by 1 desc
''' 

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationIdTransactions.csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationIdTransactions.csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationIdTransactions.csv"]

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationIdTransactions"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationIdTransactions"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationIdTransactions"+newDateTimeString+".csv"]
	
def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_TransactionId"+","+"SQL_Workflowid"+","+"SQL_DisplayName"+","+"SQL_StartDate"+","+"SQL_EndDate"+","+"SQL_AppliedDate"+","+"SQL_TransactionStatus"+","+"SQL_TransactionSequence"+","+"SQL_TransactionSubTypeOtherDescription"+","+"SQL_ReasonForChange")
apiWriter.println("SQL_ApplicationId"+","+"API_TransactionId"+","+"API_Workflowid"+","+"API_DisplayName"+","+"API_StartDate"+","+"API_EndDate"+","+"API_AppliedDate"+","+"API_TransactionStatus"+","+"API_TransactionSequence"+","+"API_TransactionSubTypeOtherDescription"+","+"API_ReasonForChange")
compareWriter.println("SQL_ApplicationId"+","+"SQL_TransactionId"+","+"API_TransactionId"+","+"SQL_Workflowid"+","+"API_Workflowid"+","+"SQL_DisplayName"+","+"API_DisplayName"+","+"SQL_StartDate"+","+"API_StartDate"+","+"SQL_EndDate"+","+"API_EndDate"+","+"SQL_AppliedDate"+","+"API_AppliedDate"+","+"SQL_TransactionStatus"+","+"API_TransactionStatus"+","+"SQL_TransactionSequence"+","+"API_TransactionSequence"+","+"SQL_TransactionSubTypeOtherDescription"+","+"SQL_TransactionSubTypeOtherDescription"+","+"SQL_ReasonForChange"+","+"API_ReasonForChange"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
		sql_ApplicationId=row.ApplicationId
		sql_TransactionId=row.TransactionId
		sql_WorkflowId=row.WorkflowId
		sql_DisplayName=row.DisplayName
		String displayName=sql_DisplayName
		if(displayName!=null)
		{
			displayName=displayName.replace(" ","")
			displayName=displayName.toUpperCase()
		}
		sql_DisplayName=displayName
		sql_StartDate=row.StartDate
		sql_EndDate=row.EndDate
		sql_AppliedDate=row.AppliedDate
		sql_TransactionStatus=row.TransactionStatus
		sql_TransactionSequence=row.Sequence
		sql_TransactionSubTypeOtherDescription=row.TransactionSubTypeOtherDescription
		sql_ReasonForChange=row.ReasonForChange_Id

		sqlWriter.println(sql_ApplicationId+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransactionStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange)
		log.info "SQL Response is : "+sql_ApplicationId+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransactionStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange

		//Set the Application ID at test case level
		String applicationId=sql_ApplicationId
		testRunner.testCase.setPropertyValue( "applicationId", applicationId )

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
		//log.info "Token Value : "+token

		//Run the test step to get response
		testRunner.runTestStepByName('AppByAppIdByTransactions')
		String req='${AppByAppIdByTransactions#Response}'
		response=context.expand(req)
		log.info "API Response received is :"+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["AppByAppIdByTransactions"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info "API Status code is : "+httpStatusCode
	
		String error = response
		if(httpStatusCode.equals("200"))
		{
			int jsonRecordCount = jsonRes.totalRecords
			log.info "Search records in API response is : "+ jsonRecordCount 
			for (int i=0; i<jsonRecordCount; i++)
			{
				newId = jsonRes.results.id[i]
				if(sql_TransactionId.toString().equals(newId.toString()))
				{
					api_TransactionId=jsonRes.results.id[i]
					api_WorkflowId=jsonRes.results.workflowid[i]
					api_DisplayName=jsonRes.results.displayName[i]
					displayName=api_DisplayName
					if(displayName!=null)
					{
						displayName=displayName.replace(" ","")
						displayName=displayName.toUpperCase()
					}
					api_DisplayName=displayName
					api_StartDate=jsonRes.results.startDate[i]
					api_EndDate=jsonRes.results.endDate[i]
					api_AppliedDate=jsonRes.results.appliedDate[i]
					api_TransactionStatus=jsonRes.results.transactionStatus[i]
					api_TransactionSequence=jsonRes.results.transactionSequence[i]
					api_TransactionSubTypeOtherDescription=jsonRes.results.transactionSubTypeOtherDescription[i]
					api_ReasonForChange=jsonRes.results.reasonForChange[i]
	
					apiWriter.println(sql_ApplicationId+","+api_TransactionId+","+api_WorkflowId+","+api_DisplayName+","+api_StartDate+","+api_EndDate+","+api_AppliedDate+","+api_TransactionStatus+","+api_TransactionSequence+","+api_TransactionSubTypeOtherDescription+api_ReasonForChange)
					log.info "API Response received as : "+sql_ApplicationId+","+api_TransactionId+","+api_WorkflowId+","+api_DisplayName+","+api_StartDate+","+api_EndDate+","+api_AppliedDate+","+api_TransactionStatus+","+api_TransactionSequence+","+api_TransactionSubTypeOtherDescription+api_ReasonForChange
	
					if(sql_TransactionId.toString().equals(api_TransactionId.toString())&& sql_WorkflowId.toString().toUpperCase().equals(api_WorkflowId.toString().toUpperCase()) && sql_DisplayName.toString().equals(api_DisplayName.toString()) && sql_TransactionStatus.toString().equals(api_TransactionStatus.toString()) && sql_TransactionSequence.toString().equals(api_TransactionSequence.toString()) && sql_TransactionSubTypeOtherDescription.toString().equals(api_TransactionSubTypeOtherDescription.toString()) && sql_ReasonForChange.toString().equals(api_ReasonForChange.toString()))
					{
						compareWriter.println(sql_ApplicationId+","+sql_TransactionId+","+api_TransactionId+","+sql_WorkflowId+","+api_WorkflowId+","+sql_DisplayName+","+api_DisplayName+","+sql_StartDate+","+api_StartDate+","+sql_EndDate+","+api_EndDate+","+sql_AppliedDate+","+api_AppliedDate+","+sql_TransactionStatus+","+api_TransactionStatus+","+sql_TransactionSequence+","+api_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange+","+api_ReasonForChange+","+"Test Case Passed")
						log.info "Details are matching for Application Id as "+sql_ApplicationId+", hence test case is passed"
					}
					else
					{
						compareWriter.println(sql_ApplicationId+","+sql_TransactionId+","+api_TransactionId+","+sql_WorkflowId+","+api_WorkflowId+","+sql_DisplayName+","+api_DisplayName+","+sql_StartDate+","+api_StartDate+","+sql_EndDate+","+api_EndDate+","+sql_AppliedDate+","+api_AppliedDate+","+sql_TransactionStatus+","+api_TransactionStatus+","+sql_TransactionSequence+","+api_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange+","+api_ReasonForChange+","+"Test Case Failed")
						log.info "Details are not matching for Application Id as "+sql_ApplicationId+", hence test case is failed"
					}
				}	
			}	
		}
		else
		{
			compareWriter.println(sql_ApplicationId+","+sql_TransactionId+","+","+sql_WorkflowId+","+","+sql_DisplayName+","+","+sql_StartDate+","+","+sql_EndDate+","+","+sql_AppliedDate+","+","+sql_TransactionStatus+","+","+sql_TransactionSequence+","+","+sql_TransactionSubTypeOtherDescription+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange+","+","+"Test Case Failed")
			log.info "Details are not matching for Application Id as "+sql_ApplicationId+", hence test case is failed"
		}
	counter=counter+1
	log.info "Number of records verified are : "+counter
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for Application By Application Id Transactions************"	]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>90629</con:value></con:property></con:properties></con:testCase><con:testCase id="e0eaaaa1-d87a-46a3-9e70-cf02fb51538d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByTransactionsByTransactionId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdTransactionsByTransactionId" id="f3d94ccf-befa-42e2-bcf3-17fcd6f939af"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/transactions/${#TestCase#transactionId}" methodName="ApplicationByApplicationIdByTransactionsByTransactionId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdTransactionsByTransactionId" id="18772ccd-ce4d-496a-8cc7-0cf884ebdbef" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76176/transactions/275087</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdTransactionsByTransactionId" id="96c534c4-95ff-4e19-a435-b976aa1963a7" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']


def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for Application By Application Id Transactions By Transaction Id************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt = 
'''
	Use TOM
	Select DISTINCT 
	TOP 150
	T.QuoteBase_Id AS ApplicationId, T.Id as TransactionId, T.WorkflowId, T.Discriminator as DisplayName, T.StartDate, T.EndDate, T.AppliedDate,
	RTS.Name as TransactionStatus, T.Sequence, T.TransactionSubTypeOtherDescription, T.ReasonForChange_Id
	from [TRANSACTION] T 
	left join ref_TransactionStatus RTS on RTS.Id = T.TransactionStatus_Id
	order by 1 desc
''' 

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationIdTransactionsByTransactionId.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationIdTransactionsByTransactionId.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationIdTransactionsByTransactionId.csv"]

//	def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationIdTransactionsByTransactionId"+newDateTimeString+".csv"]
//	def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationIdTransactionsByTransactionId"+newDateTimeString+".csv"]
//	def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationIdTransactionsByTransactionId"+newDateTimeString+".csv"]
	
def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_TransactionId"+","+"SQL_Workflowid"+","+"SQL_DisplayName"+","+"SQL_StartDate"+","+"SQL_EndDate"+","+"SQL_AppliedDate"+","+"SQL_TransactionStatus"+","+"SQL_TransactionSequence"+","+"SQL_TransactionSubTypeOtherDescription"+","+"SQL_ReasonForChange")
apiWriter.println("SQL_ApplicationId"+","+"API_TransactionId"+","+"API_Workflowid"+","+"API_DisplayName"+","+"API_StartDate"+","+"API_EndDate"+","+"API_AppliedDate"+","+"API_TransactionStatus"+","+"API_TransactionSequence"+","+"API_TransactionSubTypeOtherDescription"+","+"API_ReasonForChange")
compareWriter.println("SQL_ApplicationId"+","+"SQL_TransactionId"+","+"API_TransactionId"+","+"SQL_Workflowid"+","+"API_Workflowid"+","+"SQL_DisplayName"+","+"API_DisplayName"+","+"SQL_StartDate"+","+"API_StartDate"+","+"SQL_EndDate"+","+"API_EndDate"+","+"SQL_AppliedDate"+","+"API_AppliedDate"+","+"SQL_TransactionStatus"+","+"API_TransactionStatus"+","+"SQL_TransactionSequence"+","+"API_TransactionSequence"+","+"SQL_TransactionSubTypeOtherDescription"+","+"SQL_TransactionSubTypeOtherDescription"+","+"SQL_ReasonForChange"+","+"API_ReasonForChange"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
		sql_ApplicationId=row.ApplicationId
		sql_TransactionId=row.TransactionId
		sql_WorkflowId=row.WorkflowId
		sql_DisplayName=row.DisplayName
		String displayName=sql_DisplayName
		if(displayName!=null)
		{
			displayName=displayName.replace(" ","")
			displayName=displayName.toUpperCase()
		}
		sql_DisplayName=displayName
		sql_StartDate=row.StartDate
		sql_EndDate=row.EndDate
		sql_AppliedDate=row.AppliedDate
		sql_TransactionStatus=row.TransactionStatus
		sql_TransactionSequence=row.Sequence
		sql_TransactionSubTypeOtherDescription=row.TransactionSubTypeOtherDescription
		sql_ReasonForChange=row.ReasonForChange_Id

		sqlWriter.println(sql_ApplicationId+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransactionStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange)
		log.info "SQL Response is : "+sql_ApplicationId+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransactionStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange

		//Set the Application ID at test case level
		String applicationId=sql_ApplicationId
		testRunner.testCase.setPropertyValue( "applicationId", applicationId )

		//Set the Transaction ID at test case level
		String transactionId=sql_TransactionId
		testRunner.testCase.setPropertyValue( "transactionId", transactionId )

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
		//log.info "Token Value : "+token

		//Run the test step to get response
		testRunner.runTestStepByName('AppByAppIdTransactionsByTransactionId')
		String req='${AppByAppIdTransactionsByTransactionId#Response}'
		response=context.expand(req)
		log.info "API Response received is :"+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["AppByAppIdTransactionsByTransactionId"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info "API Status code is : "+httpStatusCode

	String error = response
	if(httpStatusCode.equals("200"))
	{
		api_TransactionId=jsonRes.id
		api_WorkflowId=jsonRes.workflowid
		api_DisplayName=jsonRes.displayName
		displayName=api_DisplayName
		if(displayName!=null)
		{
			displayName=displayName.replace(" ","")
			displayName=displayName.toUpperCase()
		}
		api_DisplayName=displayName
		api_StartDate=jsonRes.startDate
		api_EndDate=jsonRes.endDate
		api_AppliedDate=jsonRes.appliedDate
		api_TransactionStatus=jsonRes.transactionStatus
		api_TransactionSequence=jsonRes.transactionSequence
		api_TransactionSubTypeOtherDescription=jsonRes.transactionSubTypeOtherDescription
		api_ReasonForChange=jsonRes.reasonForChange

		apiWriter.println(sql_ApplicationId+","+api_TransactionId+","+api_WorkflowId+","+api_DisplayName+","+api_StartDate+","+api_EndDate+","+api_AppliedDate+","+api_TransactionStatus+","+api_TransactionSequence+","+api_TransactionSubTypeOtherDescription+api_ReasonForChange)
		log.info "API Response received as : "+sql_ApplicationId+","+api_TransactionId+","+api_WorkflowId+","+api_DisplayName+","+api_StartDate+","+api_EndDate+","+api_AppliedDate+","+api_TransactionStatus+","+api_TransactionSequence+","+api_TransactionSubTypeOtherDescription+api_ReasonForChange
		if(sql_TransactionId.toString().equals(api_TransactionId.toString())&& sql_WorkflowId.toString().toUpperCase().equals(api_WorkflowId.toString().toUpperCase()) && sql_DisplayName.toString().equals(api_DisplayName.toString()) && sql_TransactionStatus.toString().equals(api_TransactionStatus.toString()) && sql_TransactionSequence.toString().equals(api_TransactionSequence.toString()) && sql_TransactionSubTypeOtherDescription.toString().equals(api_TransactionSubTypeOtherDescription.toString()) && sql_ReasonForChange.toString().equals(api_ReasonForChange.toString()))
		{
			compareWriter.println(sql_ApplicationId+","+sql_TransactionId+","+api_TransactionId+","+sql_WorkflowId+","+api_WorkflowId+","+sql_DisplayName+","+api_DisplayName+","+sql_StartDate+","+api_StartDate+","+sql_EndDate+","+api_EndDate+","+sql_AppliedDate+","+api_AppliedDate+","+sql_TransactionStatus+","+api_TransactionStatus+","+sql_TransactionSequence+","+api_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange+","+api_ReasonForChange+","+"Test Case Passed")
			log.info "Details are matching for Application Id as "+sql_ApplicationId+", hence test case is passed"
		}
		else
		{
			compareWriter.println(sql_ApplicationId+","+sql_TransactionId+","+api_TransactionId+","+sql_WorkflowId+","+api_WorkflowId+","+sql_DisplayName+","+api_DisplayName+","+sql_StartDate+","+api_StartDate+","+sql_EndDate+","+api_EndDate+","+sql_AppliedDate+","+api_AppliedDate+","+sql_TransactionStatus+","+api_TransactionStatus+","+sql_TransactionSequence+","+api_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange+","+api_ReasonForChange+","+"Test Case Failed")
			log.info "Details are not matching for Application Id as "+sql_ApplicationId+", hence test case is failed"
		}	
	}
	counter=counter+1
	log.info "Number of records verified are : "+counter
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for Application By Application Id Transactions By Transaction Id************"	]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>90567</con:value></con:property><con:property><con:name>transactionId</con:name><con:value>343181</con:value></con:property></con:properties></con:testCase><con:testCase id="868719a6-dce7-417b-8a58-0d3c95e1db22" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByTransactionsByTransactionIdbyDocuments" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByTransactionsByTransactionIdbyDocuments" id="21bd611e-3561-4189-b76f-feb6750efbf8"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/transactions/${#TestCase#transactionId}/documents" methodName="ApplicationByApplicationIdByTransactionsByTransactionIdbyDocuments" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByTransactionsByTransactionIdbyDocuments" id="076967ad-6567-4dab-9a99-5386fd051928" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76177/transactions/275092/documents</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByTransactionByTransactionIdByDocuments" id="ec3a2d65-ce60-4e54-b341-9b54ff2fdea7" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}

String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script execution started for Application By Application Id By Transaction By Transaction Id By Document************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt = 
'''
	USE TOM
	SELECT
	TOP 150
	ab.Id as ApplicationId, d.Id as DocumentId, d.DocumentType_Id, rdt.Name as DocumentType, d.DocumentReference, d.DocumentStatus_Id, rds.Name as DocumentStatus, t.Id as TransactionId,
	t.WorkflowId, ab.Discriminator as DisplayName, t.StartDate, t.EndDate, t.AppliedDate, rts.Name as TransationStatus, t.Sequence as TransactionSequence, t.TransactionSubTypeOtherDescription,
	t.ReasonForChange_Id, d.UserSuppliedText, d.DocumentVersion,  d.IssuedDate, d.DocumentKey, d.RiskName, d.StorageId, d.DocumentMetaData
	from applicationbase ab
	inner Join [TRANSACTION] t on t.Policy_Id = ab.id and t.Transaction_PhysicalDeletionAttemptPrevented = 0
	left join ref_TransactionStatus rts on rts.id = t.TransactionStatus_Id
	left join Document d on d.Transaction_Id = t.Id --and d.DocumentBase_PhysicalDeletionAttemptPrevented = 0
	left join ref_DocumentType rdt on rdt.id = d.DocumentType_Id 
	left join ref_DocumentStatus rds on rds.id = d.DocumentStatus_Id
	order by 1 desc
''' 
//def rows=con.rows(sqlstmt)
//int db_size=rows.size
//log.info "DB size ="+db_size

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationIdByTransactionByTransactionIdByDocument.csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationIdByTransactionByTransactionIdByDocument.csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationIdByTransactionByTransactionIdByDocument.csv"]

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationIdByTransactionByTransactionIdByDocument"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationIdByTransactionByTransactionIdByDocument"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationIdByTransactionByTransactionIdByDocument"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_DocumentId"+","+"SQL_DocumentType_Id"+","+"SQL_DocumentType"+","+"SQL_DocumentReference"+","+"SQL_DocumentStatus_Id"+","+"SQL_DocumentStatus"+","+"SQL_TransactionId"+","+"SQL_WorkflowId"+","+"SQL_DisplayName"+","+"SQL_StartDate"+","+"SQL_EndDate"+","+"SQL_AppliedDate"+","+"SQL_TransationStatus"+","+"SQL_TransactionSequence"+","+"SQL_TransactionSubTypeOtherDescription"+","+"SQL_ReasonForChange_Id"+","+"SQL_UserSuppliedText"+","+"SQL_DocumentVersion"+","+"SQL_IssuedDate"+","+"SQL_DocumentKey"+","+"SQL_RiskName"+","+"SQL_StorageId"+","+"SQL_DocumentMetaData")
apiWriter.println("API_ApplicationId"+","+"API_DocumentId"+","+"API_DocumentType_Id"+","+"API_DocumentType"+","+"API_DocumentReference"+","+"API_DocumentStatus_Id"+","+"API_DocumentStatus"+","+"API_TransactionId"+","+"API_WorkflowId"+","+"API_DisplayName"+","+"API_StartDate"+","+"API_EndDate"+","+"API_AppliedDate"+","+"API_TransationStatus"+","+"API_TransactionSequence"+","+"API_TransactionSubTypeOtherDescription"+","+"API_ReasonForChange_Id"+","+"API_UserSuppliedText"+","+"API_DocumentVersion"+","+"API_IssuedDate"+","+"API_DocumentKey"+","+"API_RiskName"+","+"API_StorageId"+","+"API_DocumentMetaData")
compareWriter.println("SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_DocumentId"+","+"API_DocumentId"+","+"SQL_DocumentType_Id"+","+"API_DocumentType_Id"+","+"SQL_DocumentType"+","+"API_DocumentType"+","+"SQL_DocumentReference"+","+"API_DocumentReference"+","+"SQL_DocumentStatus_Id"+","+"API_DocumentStatus_Id"+","+"SQL_DocumentStatus"+","+"API_DocumentStatus"+","+"SQL_TransactionId"+","+"API_TransactionId"+","+"SQL_WorkflowId"+","+"API_WorkflowId"+","+"SQL_DisplayName"+","+"API_DisplayName"+","+"SQL_StartDate"+","+"API_StartDate"+","+"SQL_EndDate"+","+"API_EndDate"+","+"SQL_AppliedDate"+","+"API_AppliedDate"+","+"SQL_TransationStatus"+","+"API_TransationStatus"+","+"SQL_TransactionSequence"+","+"API_TransactionSequence"+","+"SQL_TransactionSubTypeOtherDescription"+","+"API_TransactionSubTypeOtherDescription"+","+"SQL_ReasonForChange_Id"+","+"API_ReasonForChange_Id"+","+"SQL_UserSuppliedText"+","+"API_UserSuppliedText"+","+"SQL_DocumentVersion"+","+"API_DocumentVersion"+","+"SQL_IssuedDate"+","+"API_IssuedDate"+","+"SQL_DocumentKey"+","+"API_DocumentKey"+","+"SQL_RiskName"+","+"API_RiskName"+","+"SQL_StorageId"+","+"API_StorageId"+","+"SQL_DocumentMetaData"+","+"API_DocumentMetaData"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
	sql_ApplicationId=row.ApplicationId
	sql_DocumentId=row.DocumentId
	sql_DocumentType_Id=row.DocumentType_Id
	sql_DocumentType=row.DocumentType
	sql_DocumentReference=row.DocumentReference
	sql_DocumentStatus_Id=row.DocumentStatus_Id
	sql_DocumentStatus=row.DocumentStatus
	sql_TransactionId=row.TransactionId
	sql_WorkflowId=row.WorkflowId
	sql_DisplayName=row.DisplayName
	sql_StartDate=row.StartDate
	sql_EndDate=row.EndDate
	sql_AppliedDate=row.AppliedDate
	sql_TransationStatus=row.TransationStatus
	sql_TransactionSequence=row.TransactionSequence
	sql_TransactionSubTypeOtherDescription=row.TransactionSubTypeOtherDescription
	sql_ReasonForChange_Id=row.ReasonForChange_Id
	sql_UserSuppliedText=row.UserSuppliedText
	String userSuppliedText=sql_UserSuppliedText
	if(userSuppliedText!=null)
	{
		if(userSuppliedText.contains(","))
		{
			userSuppliedText=userSuppliedText.replace(",","")	
		}
		if(userSuppliedText.contains("/n"))
		{
			userSuppliedText=userSuppliedText.replace("/n","")		
		}
		else if (userSuppliedText.contains("/r"))
		{
			userSuppliedText=userSuppliedText.replace("/r","")	
		}
		else if(userSuppliedText.contains("\r\n\r\n"))
		{
			userSuppliedText=userSuppliedText.replace("\r\n\r\n","")	
		}
		if(userSuppliedText.contains("\r\n"))
		{
			userSuppliedText=userSuppliedText.replace("\r\n","")	
		}
	}
	else if(userSuppliedText==null)
	{
		userSuppliedText="NULL"
	}
	sql_UserSuppliedText=userSuppliedText
	sql_DocumentVersion=row.DocumentVersion
	sql_IssuedDate=row.IssuedDate
	sql_DocumentKey=row.DocumentKey
	sql_RiskName=row.RiskName
	sql_StorageId=row.StorageId
	sql_DocumentMetaData=row.DocumentMetaData

	sqlWriter.println(sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentType_Id+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatus_Id+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData)
	log.info "SQL Response is : "+sql_ApplicationId+","+sql_DocumentId+","+sql_DocumentType_Id+","+sql_DocumentType+","+sql_DocumentReference+","+sql_DocumentStatus_Id+","+sql_DocumentStatus+","+sql_TransactionId+","+sql_WorkflowId+","+sql_DisplayName+","+sql_StartDate+","+sql_EndDate+","+sql_AppliedDate+","+sql_TransationStatus+","+sql_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+sql_UserSuppliedText+","+sql_DocumentVersion+","+sql_IssuedDate+","+sql_DocumentKey+","+sql_RiskName+","+sql_StorageId+","+sql_DocumentMetaData

	//Set the Application ID at test case level
	String applicationId=sql_ApplicationId
	testRunner.testCase.setPropertyValue( "applicationId", applicationId)

	//Set the transaction Id at test case level
	String transactionId=sql_TransactionId
	testRunner.testCase.setPropertyValue( "transactionId", transactionId)

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
	//log.info "Token Value : "+token

	//Run the test step to get response
	testRunner.runTestStepByName('AppByAppIdByTransactionsByTransactionIdbyDocuments')
	String req='${AppByAppIdByTransactionsByTransactionIdbyDocuments#Response}'
	response=context.expand(req)
	log.info "API Response received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["AppByAppIdByTransactionsByTransactionIdbyDocuments"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info "API Status code is : "+httpStatusCode

	String error = response
	if(httpStatusCode.equals("200"))
	{
		int jsonRecordCount = jsonRes.totalRecords
		for (int i=0; i<jsonRecordCount; i++)
		{
			newId = jsonRes.results.id[i]
			if(sql_DocumentId.toString().equals(newId.toString()))
			{
				api_DocumentId=jsonRes.results.id[i]
				api_DocumentType_Id=jsonRes.results.documentType.id[i]
				api_DocumentType=jsonRes.results.documentType.documentTypeName[i]
				api_DocumentReference=jsonRes.results.documentReference[i]
				api_DocumentStatus_Id=jsonRes.results.documentStatus.id[i]
				api_DocumentStatus=jsonRes.results.documentStatus.documentStatusName[i]
				api_TransactionId=jsonRes.results.transaction.id[i]
				api_WorkflowId=jsonRes.results.transaction.workflowid[i]
				api_DisplayName=jsonRes.results.transaction.displayName[i]
				api_StartDate=jsonRes.results.transaction.startDate[i]
				api_EndDate=jsonRes.results.transaction.endDate[i]
				api_AppliedDate=jsonRes.results.transaction.appliedDate[i]
				api_TransationStatus=jsonRes.results.transaction.transactionStatus[i]
				api_TransactionSequence=jsonRes.results.transaction.transactionSequence[i]
				api_TransactionSubTypeOtherDescription=jsonRes.results.transaction.transactionSubTypeOtherDescription[i]
				api_ReasonForChange_Id=jsonRes.results.transaction.reasonForChange[i]
				api_UserSuppliedText=jsonRes.results.userSuppliedText[i]
				userSuppliedText=api_UserSuppliedText
				if(userSuppliedText!=null)
				{
					if(userSuppliedText.contains(","))
					{
						userSuppliedText=userSuppliedText.replace(",","")	
					}
					if(userSuppliedText.contains("/n"))
					{
						userSuppliedText=userSuppliedText.replace("/n","")		
					}
					else if (userSuppliedText.contains("/r"))
					{
						userSuppliedText=userSuppliedText.replace("/r","")	
					}
					else if(userSuppliedText.contains("\r\n\r\n"))
					{
						userSuppliedText=userSuppliedText.replace("\r\n\r\n","")	
					}
					if(userSuppliedText.contains("\r\n"))
					{
						userSuppliedText=userSuppliedText.replace("\r\n","")	
					}
				}
				else if(userSuppliedText==null)
				{
					userSuppliedText="NULL"
				}
				api_UserSuppliedText=userSuppliedText
				api_DocumentVersion=jsonRes.results.documentVersion[i]
				api_IssuedDate=jsonRes.results.issuedDate[i]
				api_DocumentKey=jsonRes.results.documentKey[i]
				api_RiskName=jsonRes.results.riskName[i]
				api_StorageId=jsonRes.results.storageId[i]
				api_DocumentMetaData=jsonRes.results.documentMetaData[i]
	
				apiWriter.println(sql_ApplicationId+","+api_DocumentId+","+api_DocumentType_Id+","+api_DocumentType+","+api_DocumentReference+","+api_DocumentStatus_Id+","+api_DocumentStatus+","+api_TransactionId+","+api_WorkflowId+","+api_DisplayName+","+api_StartDate+","+api_EndDate+","+api_AppliedDate+","+api_TransationStatus+","+api_TransactionSequence+","+api_TransactionSubTypeOtherDescription+","+api_ReasonForChange_Id+","+api_UserSuppliedText+","+api_DocumentVersion+","+api_IssuedDate+","+api_DocumentKey+","+api_RiskName+","+api_StorageId+","+api_DocumentMetaData)
				log.info "API Response : "+sql_ApplicationId+","+api_DocumentId+","+api_DocumentType_Id+","+api_DocumentType+","+api_DocumentReference+","+api_DocumentStatus_Id+","+api_DocumentStatus+","+api_TransactionId+","+api_WorkflowId+","+api_DisplayName+","+api_StartDate+","+api_EndDate+","+api_AppliedDate+","+api_TransationStatus+","+api_TransactionSequence+","+api_TransactionSubTypeOtherDescription+","+api_ReasonForChange_Id+","+api_UserSuppliedText+","+api_DocumentVersion+","+api_IssuedDate+","+api_DocumentKey+","+api_RiskName+","+api_StorageId+","+api_DocumentMetaData
		
				if(api_DocumentId.toString().equals(sql_DocumentId.toString()) && api_DocumentType_Id.toString().equals(sql_DocumentType_Id.toString()) && api_DocumentType.toString().equals(sql_DocumentType.toString()) && api_DocumentReference.toString().equals(sql_DocumentReference.toString()) && api_DocumentStatus_Id.toString().equals(sql_DocumentStatus_Id.toString()) && api_DocumentStatus.toString().equals(sql_DocumentStatus.toString()) && api_TransactionId.toString().equals(sql_TransactionId.toString()) && api_WorkflowId.toString().toUpperCase().equals(sql_WorkflowId.toString().toUpperCase()) && api_DisplayName.toString().equals(sql_DisplayName.toString()) && api_TransationStatus.toString().equals(sql_TransationStatus.toString()) && api_TransactionSequence.toString().equals(sql_TransactionSequence.toString()) && api_TransactionSubTypeOtherDescription.toString().equals(sql_TransactionSubTypeOtherDescription.toString()) && api_ReasonForChange_Id.toString().equals(sql_ReasonForChange_Id.toString()) && api_UserSuppliedText.toString().equals(sql_UserSuppliedText.toString()) && api_DocumentVersion.toString().equals(sql_DocumentVersion.toString()) && api_DocumentKey .toString().toUpperCase().equals(sql_DocumentKey .toString().toUpperCase()) &&  api_RiskName.toString().toUpperCase().equals(sql_RiskName.toString().toUpperCase()) && api_StorageId.toString().toUpperCase().equals(sql_StorageId.toString().toUpperCase()))
					{
						log.info "Details are matching, Hence test case is passed"
						compareWriter.println(sql_ApplicationId+","+sql_ApplicationId+","+sql_DocumentId+","+api_DocumentId+","+sql_DocumentType_Id+","+api_DocumentType_Id+","+sql_DocumentType+","+api_DocumentType+","+sql_DocumentReference+","+api_DocumentReference+","+sql_DocumentStatus_Id+","+api_DocumentStatus_Id+","+sql_DocumentStatus+","+api_DocumentStatus+","+sql_TransactionId+","+api_TransactionId+","+sql_WorkflowId+","+api_WorkflowId+","+sql_DisplayName+","+api_DisplayName+","+sql_StartDate+","+api_StartDate+","+sql_EndDate+","+api_EndDate+","+sql_AppliedDate+","+api_AppliedDate+","+sql_TransationStatus+","+api_TransationStatus+","+sql_TransactionSequence+","+api_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+api_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+api_ReasonForChange_Id+","+sql_UserSuppliedText+","+api_UserSuppliedText+","+sql_DocumentVersion+","+api_DocumentVersion+","+sql_IssuedDate+","+api_IssuedDate+","+sql_DocumentKey+","+api_DocumentKey+","+sql_RiskName+","+api_RiskName+","+sql_StorageId+","+api_StorageId+","+sql_DocumentMetaData+","+api_DocumentMetaData+","+"Test Case is passed")	
					}
					else
					{
						log.info "Details are not matching, Hence test case is failed"
						compareWriter.println(sql_ApplicationId+","+sql_ApplicationId+","+sql_DocumentId+","+api_DocumentId+","+sql_DocumentType_Id+","+api_DocumentType_Id+","+sql_DocumentType+","+api_DocumentType+","+sql_DocumentReference+","+api_DocumentReference+","+sql_DocumentStatus_Id+","+api_DocumentStatus_Id+","+sql_DocumentStatus+","+api_DocumentStatus+","+sql_TransactionId+","+api_TransactionId+","+sql_WorkflowId+","+api_WorkflowId+","+sql_DisplayName+","+api_DisplayName+","+sql_StartDate+","+api_StartDate+","+sql_EndDate+","+api_EndDate+","+sql_AppliedDate+","+api_AppliedDate+","+sql_TransationStatus+","+api_TransationStatus+","+sql_TransactionSequence+","+api_TransactionSequence+","+sql_TransactionSubTypeOtherDescription+","+api_TransactionSubTypeOtherDescription+","+sql_ReasonForChange_Id+","+api_ReasonForChange_Id+","+sql_UserSuppliedText+","+api_UserSuppliedText+","+sql_DocumentVersion+","+api_DocumentVersion+","+sql_IssuedDate+","+api_IssuedDate+","+sql_DocumentKey+","+api_DocumentKey+","+sql_RiskName+","+api_RiskName+","+sql_StorageId+","+api_StorageId+","+sql_DocumentMetaData+","+api_DocumentMetaData+","+"Test Case is failed")					
					}	
			}
		}	
	}
	counter=counter+1
	log.info "Number of records verified are : "+counter
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************ Script finished at : "+newDateTimeString+"************"
log.info "************Script execution finished for Application By Application Id By Transaction By Transaction Id By Documents************"	]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>76174</con:value></con:property><con:property><con:name>transactionId</con:name><con:value>275083</con:value></con:property></con:properties></con:testCase><con:testCase id="88316f73-acf4-44f2-a86e-b48d368ee088" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicaitonIdByJointAssureds" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByJointAssureds" id="c0dded66-eaf8-4695-bda4-fdc3a597ac79"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/jointAssureds" methodName="ApplicationByApplicaitonIdByJointAssureds" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByJointAssureds" id="e60624ec-497c-459f-80da-e5a0f03f1fd1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/72322/jointAssureds</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByJointAssureds" id="40456661-9078-4505-a11e-72268d671ba2" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}

String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Application By Application Id By Joint Assured************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
"""
USE TOM
SELECT
Distinct
TOP 200
JA.Id as JointAssuredId, JA.Reference, AB.Id as ApplicationId, AP.Party_Id, PRT.Name as PartyRoleTypeName, AP.Id as AccociatedPartyId, P.CrmIdentifier, 
case when P.IsOrganisation=0 then 'true' when P.IsOrganisation=1 then 'true' end as IsOrganisationFlag, P.OrganisationName,
P.Salutation, P.FirstName, P.MiddleName, P.LastName, P.SearchName as Name, P.SearchName, P.EmailAddress, P.Telephone, P.Fax,
ADR.Id as Address_Id, ADR.Name as AddressName, ADR.Line1, ADR.Line2, ADR.Line3, ADR.City, ADR.StateOrProvince, RC.Name as Country, ADR.Postcode, AB.PolicyEnd
from ApplicationBase AB
inner join AssociatedParty AP on AP.Application_Id = AB.Id
inner join ref_PartyRoleType PRT on PRT.Id = AP.PartyRoleType_Id
inner join Party P on AP.Party_Id = P.Id
inner join Address ADR on ADR.Party_Id = P.Id
Left join ref_Country RC on ADR.Country_Id = RC.Id
left join JointAssured JA on JA.Party_Id=P.Id
where PRT.Name='Joint Assured'
--and AB.PolicyEnd<GETDATE()
order by 3 desc, 1
		"""

//def rows=con.rows(sqlstmt)  
//int db_size=rows.size

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ApplicationByApplicationIdByJointAssured.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ApplicationByApplicationIdByJointAssured.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ApplicationByApplicationIdByJointAssured.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ApplicationByApplicationIdByJointAssured"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ApplicationByApplicationIdByJointAssured"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ApplicationByApplicationIdByJointAssured"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_JointAssuredId"+","+"SQL_JointAssuredReference"+","+"SQL_ApplicationId"+","+"SQL_Party_Id"+","+"SQL_PartyRoleTypeName"+","+"SQL_CrmIdentifier"+","+"SQL_IsOrganisation"+","+"SQL_OrganisationName"+","+"SQL_Salutation"+","+"SQL_FirstName"+","+"SQL_MiddleName"+","+"SQL_LastName"+","+"SQL_Name"+","+"SQL_SearchName"+","+"SQL_EmailAddress"+","+"SQL_Telephone"+","+"SQL_Fax"+","+"SQL_Address_Id"+","+"SQL_AddressName"+","+"SQL_Line1"+","+"SQL_Line2"+","+"SQL_Line3"+","+"SQL_City"+","+"SQL_StateOrProvince"+","+"SQL_Country"+","+"SQL_Postcode"+","+"SQL_PolicyEndDate")
apiWriter.println("API_JointAssuredId"+","+"API_JointAssuredReference"+","+"API_Party_Id"+","+"API_CrmIdentifier"+","+"API_IsOrganisation"+","+"API_OrganisationName"+","+"API_Salutation"+","+"API_FirstName"+","+"API_MiddleName"+","+"API_LastName"+","+"API_Name"+","+"API_SearchName"+","+"API_EmailAddress"+","+"API_Telephone"+","+"API_Fax"+","+"API_Address_Id"+","+"API_AddressName"+","+"API_Line1"+","+"API_Line2"+","+"API_Line3"+","+"API_City"+","+"API_StateOrProvince"+","+"API_Country"+","+"API_Postcode")
compareWriter.println("SQL_ApplicationId"+","+"API_JointAssuredId"+","+"SQL_JointAssuredId"+","+"API_JointAssuredReference"+","+"SQL_JointAssuredReference"+","+"API_Party_Id"+","+"SQL_PartyRoleTypeName"+","+"API_CrmIdentifier"+","+"SQL_CrmIdentifier"+","+"API_IsOrganisation"+","+"SQL_IsOrganisation"+","+"API_OrganisationName"+","+"SQL_OrganisationName"+","+"API_Salutation"+","+"SQL_Salutation"+","+"API_FirstName"+","+"SQL_FirstName"+","+"API_MiddleName"+","+"SQL_MiddleName"+","+"API_LastName"+","+"SQL_LastName"+","+"API_Name"+","+"SQL_Name"+","+"API_SearchName"+","+"SQL_SearchName"+","+"API_EmailAddress"+","+"SQL_EmailAddress"+","+"API_Telephone"+","+"SQL_Telephone"+","+"API_Fax"+","+"SQL_Fax"+","+"API_Address_Id"+","+"SQL_Address_Id"+","+"API_AddressName"+","+"SQL_AddressName"+","+"API_Line1"+","+"SQL_Line1"+","+"API_Line2"+","+"SQL_Line2"+","+"API_Line3"+","+"SQL_Line3"+","+"API_City"+","+"SQL_City"+","+"API_StateOrProvince"+","+"SQL_StateOrProvince"+","+"API_Country"+","+"SQL_Country"+","+"API_Postcode"+","+"SQL_Postcode"+","+"SQL_PolicyEndDate"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter=0;

con.eachRow(sqlstmt)
{	
	row ->
	sql_JointAssuredId=row.JointAssuredId
	sql_JointAssuredReference=row.Reference
	sql_ApplicationId=row.ApplicationId
	sql_Party_Id=row.Party_Id
	sql_PartyRoleTypeName=row.PartyRoleTypeName
	sql_CrmIdentifier=row.CrmIdentifier
	sql_IsOrganisation=row.IsOrganisationFlag
	sql_OrganisationName=row.OrganisationName
	sql_Salutation=row.Salutation
	sql_FirstName=row.FirstName
	sql_MiddleName=row.MiddleName
	sql_LastName=row.LastName
	sql_Name=row.Name
	sql_SearchName=row.SearchName
	sql_EmailAddress=row.EmailAddress
	sql_Telephone=row.Telephone
	sql_Fax=row.Fax
	sql_Address_Id=row.Address_Id
	sql_AddressName=row.AddressName
	sql_Line1=row.Line1
	sql_Line2=row.Line2
	sql_Line3=row.Line3
	sql_City=row.City
	sql_StateOrProvince=row.StateOrProvince
	sql_Country=row.Country
	sql_Postcode=row.Postcode
	sql_PolicyEndDate=row.PolicyEnd
	sql_PolicyEndDate=sql_PolicyEndDate.toString().replace(" +00:00","")
	//log.info "Policy End Date="+sql_PolicyEndDate

	date= new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
	date = new Date()
	getDateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss")
	String todaysDate=getDateFormat.format(date)
	todaysDate=todaysDate.toString().replace("/","-")
	//log.info "Today's Date is="+todaysDate
	
	sqlWriter.println(sql_JointAssuredId+","+sql_JointAssuredReference+","+sql_ApplicationId+","+sql_Party_Id+","+sql_PartyRoleTypeName+","+sql_CrmIdentifier+","+sql_IsOrganisation+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_Address_Id+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode+","+sql_PolicyEndDate)
	log.info "SQL Response received as :"+sql_JointAssuredId+","+sql_JointAssuredReference+","+sql_ApplicationId+","+sql_Party_Id+","+sql_PartyRoleTypeName+","+sql_CrmIdentifier+","+sql_IsOrganisation+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_Address_Id+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode+","+sql_PolicyEndDate

	//Set the Application ID at test case level
	String applicationId = sql_ApplicationId
	testRunner.testCase.setPropertyValue( "applicationId", applicationId)

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
	//log.info "Token Value : "+token
	
	//Run the test step to get response	
	testRunner.runTestStepByName('AppByAppIdByJointAssureds')
	String req='${AppByAppIdByJointAssureds#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["AppByAppIdByJointAssureds"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info "API Status code is : "+httpStatusCode

	String error = response
	if(httpStatusCode.equals("200") && sql_PolicyEndDate.toString()>todaysDate)
	{
		int jsonRecordCount = jsonRes.totalRecords
		//log.info "Number of records are : "+jsonRecordCount
		for (int i=0; i<jsonRecordCount; i++)
		{
			newId = jsonRes.results.id[i]
			if(sql_JointAssuredId.toString().equals(newId.toString()))
			{
				api_JointAssuredId=jsonRes.results.id[i]
				api_JointAssuredId=removeBrackets(api_JointAssuredId.toString())
				
				api_JointAssuredReference=jsonRes.results.reference[i]
				api_JointAssuredReference=removeBrackets(api_JointAssuredReference.toString())
				
				api_Party_Id=jsonRes.results.party.id[i]
				api_Party_Id=removeBrackets(api_Party_Id.toString())
				
				api_CrmIdentifier=jsonRes.results.party.crmIdentifier[i]
				api_CrmIdentifier=removeBrackets(api_CrmIdentifier.toString())

				api_IsOrganisation=jsonRes.results.party.isOrganisation[i]
				api_IsOrganisation=removeBrackets(api_IsOrganisation.toString())
				
				api_OrganisationName=jsonRes.results.party.organisationName[i]
				api_OrganisationName=removeBrackets(api_OrganisationName.toString())
				
				api_Salutation=jsonRes.results.party.salutation[i]
				api_Salutation=removeBrackets(api_Salutation.toString())
				
				api_FirstName=jsonRes.results.party.firstName[i]
				api_FirstName=removeBrackets(api_FirstName.toString())
				
				api_MiddleName=jsonRes.results.party.middleName[i]
				api_MiddleName=removeBrackets(api_MiddleName.toString())
				
				api_LastName=jsonRes.results.party.lastName[i]
				api_LastName=removeBrackets(api_LastName.toString())
				
				api_Name=jsonRes.results.party.name[i]
				api_Name=removeBrackets(api_Name.toString())
				
				api_SearchName=jsonRes.results.party.searchName[i]
				api_SearchName=removeBrackets(api_SearchName.toString())
				
				api_EmailAddress=jsonRes.results.party.emailAddress[i]
				api_EmailAddress=removeBrackets(api_EmailAddress.toString())
				
				api_Telephone=jsonRes.results.party.telephone[i]
				api_Telephone=removeBrackets(api_Telephone.toString())
				
				api_Fax=jsonRes.results.party.fax[i]
				api_Fax=removeBrackets(api_Fax.toString())
				
				api_Address_Id=jsonRes.results.party.addresses.id[i]
				api_Address_Id=removeBrackets(api_Address_Id.toString())
				
				api_AddressName=jsonRes.results.party.addresses.addressName[i]
				api_AddressName=removeBrackets(api_AddressName.toString())
				
				api_Line1=jsonRes.results.party.addresses.addressLine1[i]
				api_Line1=removeBrackets(api_Line1.toString())
				
				api_Line2=jsonRes.results.party.addresses.addressLine2[i]
				api_Line2=removeBrackets(api_Line2.toString())
				
				api_Line3=jsonRes.results.party.addresses.addressLine3[i]
				api_Line3=removeBrackets(api_Line3.toString())
				
				api_City=jsonRes.results.party.addresses.city[i]
				api_City=removeBrackets(api_City.toString())
				
				api_StateOrProvince=jsonRes.results.party.addresses.state[i]
				api_StateOrProvince=removeBrackets(api_StateOrProvince.toString())
				
				api_Country=jsonRes.results.party.addresses.country[i]
				api_Country=removeBrackets(api_Country.toString())
				
				api_Postcode=jsonRes.results.party.addresses.postalCode[i]
				api_Postcode=removeBrackets(api_Postcode.toString())
	
				apiWriter.println(api_JointAssuredId+","+api_JointAssuredReference+","+api_Party_Id+","+api_CrmIdentifier+","+api_IsOrganisation+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_Address_Id+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode)	
				log.info "API response received as : "+api_JointAssuredId+","+api_JointAssuredReference+","+api_Party_Id+","+api_CrmIdentifier+","+api_IsOrganisation+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_Address_Id+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode

				if (api_JointAssuredId.toString().equals(sql_JointAssuredId.toString()) && 
				api_JointAssuredReference.toString().equals(sql_JointAssuredReference.toString()) && 
				api_Party_Id.toString().equals(sql_Party_Id.toString()) && 
				api_CrmIdentifier.toString().toUpperCase().equals(sql_CrmIdentifier.toString().toUpperCase()) && 
				sql_IsOrganisation.toString().toUpperCase().equals(api_IsOrganisation.toString().toUpperCase()) && 
				api_OrganisationName.toString().toUpperCase().equals(sql_OrganisationName.toString().toUpperCase()) && 
				api_Salutation.toString().toUpperCase().equals(sql_Salutation.toString().toUpperCase()) && 
				api_FirstName.toString().toUpperCase().equals(sql_FirstName.toString().toUpperCase()) &&
				api_MiddleName.toString().toUpperCase().equals(sql_MiddleName.toString().toUpperCase()) && 
				api_LastName.toString().toUpperCase().equals(sql_LastName.toString().toUpperCase()) && 
				api_Name.toString().toUpperCase().equals(sql_Name.toString().toUpperCase()) && 
				api_SearchName.toString().toUpperCase().equals(sql_SearchName.toString().toUpperCase()) && 
				api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && 
				api_Telephone.toString().equals(sql_Telephone.toString()) && 
				api_Fax.toString().equals(sql_Fax.toString()) && 
				api_Address_Id.toString().equals(sql_Address_Id.toString()) && 
				api_AddressName.toString().toUpperCase().equals(sql_AddressName.toString().toUpperCase()) && 
				api_Line1.toString().toUpperCase().equals(sql_Line1.toString().toUpperCase()) && 
				api_Line2.toString().toUpperCase().equals(sql_Line2.toString().toUpperCase()) && 
				api_Line3.toString().toUpperCase().equals(sql_Line3.toString().toUpperCase()) && 
				api_City.toString().toUpperCase().equals(sql_City.toString().toUpperCase()) && 
				api_StateOrProvince.toString().toUpperCase().equals(sql_StateOrProvince.toString().toUpperCase()) && 
				api_Country.toString().toUpperCase().equals(sql_Country.toString().toUpperCase()) && 
				api_Postcode.toString().toUpperCase().equals(sql_Postcode.toString().toUpperCase()))
				{
					compareWriter.println(sql_ApplicationId+","+api_JointAssuredId+","+sql_JointAssuredId+","+api_JointAssuredReference+","+sql_JointAssuredReference+","+api_Party_Id+","+sql_PartyRoleTypeName+","+api_CrmIdentifier+","+sql_CrmIdentifier+","+api_IsOrganisation+","+sql_IsOrganisation+","+api_OrganisationName+","+sql_OrganisationName+","+api_Salutation+","+sql_Salutation+","+api_FirstName+","+sql_FirstName+","+api_MiddleName+","+sql_MiddleName+","+api_LastName+","+sql_LastName+","+api_Name+","+sql_Name+","+api_SearchName+","+sql_SearchName+","+api_EmailAddress+","+sql_EmailAddress+","+api_Telephone+","+sql_Telephone+","+api_Fax+","+sql_Fax+","+api_Address_Id+","+sql_Address_Id+","+api_AddressName+","+sql_AddressName+","+api_Line1+","+sql_Line1+","+api_Line2+","+sql_Line2+","+api_Line3+","+sql_Line3+","+api_City+","+sql_City+","+api_StateOrProvince+","+sql_StateOrProvince+","+api_Country+","+sql_Country+","+api_Postcode+","+sql_Postcode+","+sql_PolicyEndDate+","+"Test Case is Passed")
					log.info "Details are matching hence test case is passed."+sql_ApplicationId+","+api_JointAssuredId+","+sql_JointAssuredId+","+api_JointAssuredReference+","+sql_JointAssuredReference+","+api_Party_Id+","+sql_PartyRoleTypeName+","+api_CrmIdentifier+","+sql_CrmIdentifier+","+api_IsOrganisation+","+sql_IsOrganisation+","+api_OrganisationName+","+sql_OrganisationName+","+api_Salutation+","+sql_Salutation+","+api_FirstName+","+sql_FirstName+","+api_MiddleName+","+sql_MiddleName+","+api_LastName+","+sql_LastName+","+api_Name+","+sql_Name+","+api_SearchName+","+sql_SearchName+","+api_EmailAddress+","+sql_EmailAddress+","+api_Telephone+","+sql_Telephone+","+api_Fax+","+sql_Fax+","+api_Address_Id+","+sql_Address_Id+","+api_AddressName+","+sql_AddressName+","+api_Line1+","+sql_Line1+","+api_Line2+","+sql_Line2+","+api_Line3+","+sql_Line3+","+api_City+","+sql_City+","+api_StateOrProvince+","+sql_StateOrProvince+","+api_Country+","+sql_Country+","+api_Postcode+","+sql_Postcode+","+sql_PolicyEndDate
					break;
				}
				else
				{
					compareWriter.println(sql_ApplicationId+","+api_JointAssuredId+","+sql_JointAssuredId+","+api_JointAssuredReference+","+sql_JointAssuredReference+","+api_Party_Id+","+sql_PartyRoleTypeName+","+api_CrmIdentifier+","+sql_CrmIdentifier+","+api_IsOrganisation+","+sql_IsOrganisation+","+api_OrganisationName+","+sql_OrganisationName+","+api_Salutation+","+sql_Salutation+","+api_FirstName+","+sql_FirstName+","+api_MiddleName+","+sql_MiddleName+","+api_LastName+","+sql_LastName+","+api_Name+","+sql_Name+","+api_SearchName+","+sql_SearchName+","+api_EmailAddress+","+sql_EmailAddress+","+api_Telephone+","+sql_Telephone+","+api_Fax+","+sql_Fax+","+api_Address_Id+","+sql_Address_Id+","+api_AddressName+","+sql_AddressName+","+api_Line1+","+sql_Line1+","+api_Line2+","+sql_Line2+","+api_Line3+","+sql_Line3+","+api_City+","+sql_City+","+api_StateOrProvince+","+sql_StateOrProvince+","+api_Country+","+sql_Country+","+api_Postcode+","+sql_Postcode+","+sql_PolicyEndDate+","+"Test Case is Failed")
					log.info "Details are not matching hence test case is failed."+sql_ApplicationId+","+api_JointAssuredId+","+sql_JointAssuredId+","+api_JointAssuredReference+","+sql_JointAssuredReference+","+api_Party_Id+","+sql_PartyRoleTypeName+","+api_CrmIdentifier+","+sql_CrmIdentifier+","+api_IsOrganisation+","+sql_IsOrganisation+","+api_OrganisationName+","+sql_OrganisationName+","+api_Salutation+","+sql_Salutation+","+api_FirstName+","+sql_FirstName+","+api_MiddleName+","+sql_MiddleName+","+api_LastName+","+sql_LastName+","+api_Name+","+sql_Name+","+api_SearchName+","+sql_SearchName+","+api_EmailAddress+","+sql_EmailAddress+","+api_Telephone+","+sql_Telephone+","+api_Fax+","+sql_Fax+","+api_Address_Id+","+sql_Address_Id+","+api_AddressName+","+sql_AddressName+","+api_Line1+","+sql_Line1+","+api_Line2+","+sql_Line2+","+api_Line3+","+sql_Line3+","+api_City+","+sql_City+","+api_StateOrProvince+","+sql_StateOrProvince+","+api_Country+","+sql_Country+","+api_Postcode+","+sql_Postcode+","+sql_PolicyEndDate
					break;
				}//else close
			}//if close
		}//for close	
	}//if status code close
	else if(httpStatusCode.equals("401"))
	{
		apiWriter.println(sql_ApplicationId+","+jsonRes.message)
		message = jsonRes.message.toString()
		message = message.replace(","," ")
		compareWriter.println(sql_ApplicationId+","+message+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test Case is Failed")
		log.info "For application id =>"+sql_ApplicationId+" response is received as =>"+jsonRes.message
	}
	else if(httpStatusCode.equals("404"))
	{
		if(jsonRes.Message.toString().contains("is in the past") && todaysDate.toString()>sql_PolicyEndDate.toString())
		{
			message = jsonRes.Message.toString()
			message = message.replace(","," ")
			apiWriter.println(sql_ApplicationId+","+jsonRes.Message)
			compareWriter.println(sql_ApplicationId+","+message+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test Case Passed")
			log.info "For application id =>"+sql_ApplicationId+" policy end date is past date hence test case is passed by receiving valid response=>"+jsonRes.Message
		}
	}
	else if(httpStatusCode.equals("200") && todaysDate.toString()>sql_PolicyEndDate.toString())
	{
		getAPIPropertyValue(jsonRes, apiWriter)
		compareWriter.println(sql_ApplicationId+","+"httpStatusCode:"+httpStatusCode+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test case failed because Join assured details are displayd in API response even though policy end date is past date")
		log.info "For application id =>"+sql_ApplicationId+" Join assured details are displayd in API response even though policy end date is past date"
	}
	else
	{
		compareWriter.println(sql_ApplicationId+","+"httpStatusCode:"+httpStatusCode+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test case failed")
		log.info ("Invalid API response is received hence test case is failed.")
	}

	counter=counter+1
	log.info "Number of records verified are : "+counter
}
public void getAPIPropertyValue(def jsonRes, def apiWriter)
{
	for (int i=0; i<jsonRes.totalRecords; i++)
		{
			
			api_JointAssuredId=jsonRes.results.id[i]
			api_JointAssuredId=removeBrackets(api_JointAssuredId.toString())
			
			api_JointAssuredReference=jsonRes.results.reference[i]
			api_JointAssuredReference=removeBrackets(api_JointAssuredReference.toString())
			
			api_Party_Id=jsonRes.results.party.id[i]
			api_Party_Id=removeBrackets(api_Party_Id.toString())
				
			api_CrmIdentifier=jsonRes.results.party.crmIdentifier[i]
			api_CrmIdentifier=removeBrackets(api_CrmIdentifier.toString())
			api_IsOrganisation=jsonRes.results.party.isOrganisation[i]
			api_IsOrganisation=removeBrackets(api_IsOrganisation.toString())
		
			api_OrganisationName=jsonRes.results.party.organisationName[i]
			api_OrganisationName=removeBrackets(api_OrganisationName.toString())
			
			api_Salutation=jsonRes.results.party.salutation[i]
			api_Salutation=removeBrackets(api_Salutation.toString())
			
			api_FirstName=jsonRes.results.party.firstName[i]
			api_FirstName=removeBrackets(api_FirstName.toString())
			
			api_MiddleName=jsonRes.results.party.middleName[i]
			api_MiddleName=removeBrackets(api_MiddleName.toString())
			
			api_LastName=jsonRes.results.party.lastName[i]
			api_LastName=removeBrackets(api_LastName.toString())
			
			api_Name=jsonRes.results.party.name[i]
			api_Name=removeBrackets(api_Name.toString())
			
			api_SearchName=jsonRes.results.party.searchName[i]
			api_SearchName=removeBrackets(api_SearchName.toString())
			
			api_EmailAddress=jsonRes.results.party.emailAddress[i]
			api_EmailAddress=removeBrackets(api_EmailAddress.toString())
				
			api_Telephone=jsonRes.results.party.telephone[i]
			api_Telephone=removeBrackets(api_Telephone.toString())
			
			api_Fax=jsonRes.results.party.fax[i]
			api_Fax=removeBrackets(api_Fax.toString())
			
			api_Address_Id=jsonRes.results.party.addresses.id[i]
			api_Address_Id=removeBrackets(api_Address_Id.toString())
			
			api_AddressName=jsonRes.results.party.addresses.addressName[i]
			api_AddressName=removeBrackets(api_AddressName.toString())
			
			api_Line1=jsonRes.results.party.addresses.addressLine1[i]
			api_Line1=removeBrackets(api_Line1.toString())
			
			api_Line2=jsonRes.results.party.addresses.addressLine2[i]
			api_Line2=removeBrackets(api_Line2.toString())
				
			api_Line3=jsonRes.results.party.addresses.addressLine3[i]
			api_Line3=removeBrackets(api_Line3.toString())
			
			api_City=jsonRes.results.party.addresses.city[i]
			api_City=removeBrackets(api_City.toString())
			
			api_StateOrProvince=jsonRes.results.party.addresses.state[i]
			api_StateOrProvince=removeBrackets(api_StateOrProvince.toString())
			
			api_Country=jsonRes.results.party.addresses.country[i]
			api_Country=removeBrackets(api_Country.toString())
			
			api_Postcode=jsonRes.results.party.addresses.postalCode[i]
			api_Postcode=removeBrackets(api_Postcode.toString())

			apiWriter.println(api_JointAssuredId+","+api_JointAssuredReference+","+api_Party_Id+","+api_CrmIdentifier+","+api_IsOrganisation+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_Address_Id+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode)	
			log.info "API response received as : "+api_JointAssuredId+","+api_JointAssuredReference+","+api_Party_Id+","+api_CrmIdentifier+","+api_IsOrganisation+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_Address_Id+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode
		}
}

public String removeBrackets(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if (field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Application By Application Id By Joint Assured************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>88597</con:value></con:property></con:properties></con:testCase><con:testCase id="f69e3d12-2706-404d-9da1-0ff5f6b0926a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByMembers" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppdIdByMembers" id="72054988-7c0d-43a3-8a41-fcaab297b9b4"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/members" methodName="ApplicationByApplicationIdByMembers" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppdIdByMembers" id="0d806ab2-970b-4a39-9287-e951badea32c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76177/members</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByMembers" id="bffa3aa0-02f8-42fa-9865-44a9d3797a6a" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}

String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for  Application by Application Id By Members************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
		"""
		USE TOM
		SELECT 
		DISTINCT
		TOP 200
		AB.Id as ApplicationId, AMA.MemberAssured_Id as MemberAssuredId, MA.Reference as MemberReference, C.ShortCode as Domicile, P.Id as PartyId, P.CrmIdentifier,
		P.OrganisationName, P.Salutation, P.FirstName, P.MiddleName, P.LastName, P.SearchName, P.EmailAddress, P.EmailAddress, P.Telephone, P.Fax,
		A.Id as AddressId, A.Name, a.Line1, a.Line2,A.Line3, A.City, A.StateOrProvince, C.Name as Country, A.Postcode
		from ApplicationBase AB
		inner join ApplicationMemberAssured AMA on AMA.Application_Id=AB.Id
		left join MemberAssured MA on MA.Id=AMA.MemberAssured_Id
		inner join ref_Country C on C.Id=MA.DomicileCountry_Id
		inner join Party P on P.Id=MA.Party_Id 
		inner join Address A on A.Party_Id=P.Id 
		order by 1 desc
		"""

def rows=con.rows(sqlstmt)  
int db_size=rows.size

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ApplicationByApplicationIdByMembers.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ApplicationByApplicationIdByMembers.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ApplicationByApplicationIdByMembers.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ApplicationByApplicationIdByMembers"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ApplicationByApplicationIdByMembers"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ApplicationByApplicationIdByMembers"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_MemberAssuredId"+","+"SQL_MemberReference"+","+"SQL_Domicile"+","+"SQL_PartyId"+","+"SQL_CrmIdentifier"+","+"SQL_OrganisationName"+","+"SQL_Salutation"+","+"SQL_FirstName"+","+"SQL_MiddleName"+","+"SQL_LastName"+","+"SQL_SearchName"+","+"SQL_EmailAddress"+","+"SQL_EmailAddress"+","+"SQL_Telephone"+","+"SQL_Fax"+","+"SQL_AddressId"+","+"SQL_Name"+","+"SQL_Line1"+","+"SQL_Line2"+","+"SQL_Line3"+","+"SQL_City"+","+"SQL_StateOrProvince"+","+"SQL_Country"+","+"SQL_Postcode")
apiWriter.println("API_ApplicationId"+","+"API_MemberAssuredId"+","+"API_MemberReference"+","+"API_Domicile"+","+"API_PartyId"+","+"API_CrmIdentifier"+","+"API_OrganisationName"+","+"API_Salutation"+","+"API_FirstName"+","+"API_MiddleName"+","+"API_LastName"+","+"API_SearchName"+","+"API_EmailAddress"+","+"API_EmailAddress"+","+"API_Telephone"+","+"API_Fax"+","+"API_AddressId"+","+"API_Name"+","+"API_Line1"+","+"API_Line2"+","+"API_Line3"+","+"API_City"+","+"API_StateOrProvince"+","+"API_Country"+","+"API_Postcode")
compareWriter.println("SQL_ApplicationId"+","+"SQL_MemberAssuredId"+","+"API_MemberAssuredId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_Domicile"+","+"API_Domicile"+","+"SQL_PartyId"+","+"API_PartyId"+","+"SQL_CrmIdentifier"+","+"API_CrmIdentifier"+","+"SQL_OrganisationName"+","+"API_OrganisationName"+","+"SQL_Salutation"+","+"API_Salutation"+","+"SQL_FirstName"+","+"API_FirstName"+","+"SQL_MiddleName"+","+"API_MiddleName"+","+"SQL_LastName"+","+"API_LastName"+","+"SQL_SearchName"+","+"API_SearchName"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_Telephone"+","+"API_Telephone"+","+"SQL_Fax"+","+"API_Fax"+","+"SQL_AddressId"+","+"API_AddressId"+","+"SQL_Name"+","+"API_Name"+","+"SQL_Line1"+","+"API_Line1"+","+"SQL_Line2"+","+"API_Line2"+","+"SQL_Line3"+","+"API_Line3"+","+"SQL_City"+","+"API_City"+","+"SQL_StateOrProvince"+","+"API_StateOrProvince"+","+"SQL_Country"+","+"API_Country"+","+"SQL_Postcode"+","+"API_Postcode"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;
String field=null;

con.eachRow(sqlstmt)
{	
	row ->
	sql_ApplicationId=row.ApplicationId
	field=sql_ApplicationId
	sql_ApplicationId=removeBrackets(field)
		
	sql_MemberAssuredId=row.MemberAssuredId
	field=sql_MemberAssuredId
	sql_MemberAssuredId=removeBrackets(field)
	
	sql_MemberReference=row.MemberReference
	field=sql_MemberReference
	sql_MemberReference=removeBrackets(field)
	
	sql_Domicile=row.Domicile
	field=sql_Domicile
	sql_Domicile=removeBrackets(field)
	
	sql_PartyId=row.PartyId
	field=sql_PartyId
	sql_PartyId=removeBrackets(field)
	
	sql_CrmIdentifier=row.CrmIdentifier
	field=sql_CrmIdentifier
	sql_CrmIdentifier=removeBrackets(field)
	
	sql_OrganisationName=row.OrganisationName
	field=sql_OrganisationName
	sql_OrganisationName=removeBrackets(field)
	
	sql_Salutation=row.Salutation
	field=sql_Salutation
	sql_Salutation=removeBrackets(field)
	
	sql_FirstName=row.FirstName
	field=sql_FirstName
	sql_FirstName=removeBrackets(field)
	
	sql_MiddleName=row.MiddleName
	field=sql_MiddleName
	sql_MiddleName=removeBrackets(field)
	
	sql_LastName=row.LastName
	field=sql_LastName
	sql_LastName=removeBrackets(field)
	
	sql_SearchName=row.SearchName
	field=sql_SearchName
	sql_SearchName=removeBrackets(field)
	
	sql_EmailAddress=row.EmailAddress
	field=sql_EmailAddress
	sql_EmailAddress=removeBrackets(field)
	
	sql_Telephone=row.Telephone
	field=sql_Telephone
	sql_Telephone=removeBrackets(field)
	
	sql_Fax=row.Fax
	field=sql_Fax
	sql_Fax=removeBrackets(field)
	
	sql_AddressId=row.AddressId
	field=sql_AddressId
	sql_AddressId=removeBrackets(field)
	
	sql_Name=row.Name
	field=sql_Name
	sql_Name=removeBrackets(field)
	
	sql_Line1=row.Line1
	field=sql_Line1
	sql_Line1=removeBrackets(field)
	
	sql_Line2=row.Line2
	field=sql_Line2
	sql_Line2=removeBrackets(field)
	
	sql_Line3=row.Line3
	field=sql_Line3
	sql_Line3=removeBrackets(field)
	
	sql_City=row.City
	field=sql_City
	sql_City=removeBrackets(field)
	
	sql_StateOrProvince=row.StateOrProvince
	field=sql_StateOrProvince
	sql_StateOrProvince=removeBrackets(field)
	
	sql_Country=row.Country
	field=sql_Country
	sql_Country=removeBrackets(field)
	
	sql_Postcode=row.Postcode
	field=sql_Postcode
	sql_Postcode=removeBrackets(field)
	
	sqlWriter.println(sql_ApplicationId+","+sql_MemberAssuredId+","+sql_MemberReference+","+sql_Domicile+","+sql_PartyId+","+sql_CrmIdentifier+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_SearchName+","+sql_EmailAddress+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressId+","+sql_Name+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode)
	log.info "SQL Response received as :"+sql_ApplicationId+","+sql_MemberAssuredId+","+sql_MemberReference+","+sql_Domicile+","+sql_PartyId+","+sql_CrmIdentifier+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_SearchName+","+sql_EmailAddress+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressId+","+sql_Name+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode

	//Set the Application ID at test case level
	String applicationId = sql_ApplicationId
	testRunner.testCase.setPropertyValue( "applicationId", applicationId)

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
	//log.info "Token Value : "+token

	//Run the test step to get response	
	testRunner.runTestStepByName('AppByAppdIdByMembers')
	String req='${AppByAppdIdByMembers#Response}'
	response=context.expand(req)
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["AppByAppdIdByMembers"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info "API Status code is : "+httpStatusCode

	String error = response
	if(httpStatusCode.equals("200"))
	{
		api_MemberAssuredId=jsonRes.results.id
		field=api_MemberAssuredId
		api_MemberAssuredId=removeBrackets(field)
		
		api_MemberReference=jsonRes.results.reference
		field=api_MemberReference
		api_MemberReference=removeBrackets(field)
		
		api_Domicile=jsonRes.results.domicile
		field=api_Domicile
		api_Domicile=removeBrackets(field)
		
		api_PartyId=jsonRes.results.party.id
		field=api_PartyId
		api_PartyId=removeBrackets(field)
		
		api_CrmIdentifier=jsonRes.results.party.crmIdentifier
		field=api_CrmIdentifier
		api_CrmIdentifier=removeBrackets(field)
		
		api_OrganisationName=jsonRes.results.party.organisationName
		field=api_OrganisationName
		api_OrganisationName=removeBrackets(field)
		
		api_Salutation=jsonRes.results.party.salutation
		field=api_Salutation
		api_Salutation=removeBrackets(field)
		
		api_FirstName=jsonRes.results.party.firstName
		field=api_FirstName
		api_FirstName=removeBrackets(field)
		
		api_MiddleName=jsonRes.results.party.middleName
		field=api_MiddleName
		api_MiddleName=removeBrackets(field)
		
		api_LastName=jsonRes.results.party.lastName
		field=api_LastName
		api_LastName=removeBrackets(field)
		
		api_SearchName=jsonRes.results.party.searchName
		field=api_SearchName
		api_SearchName=removeBrackets(field)
		
		api_EmailAddress=jsonRes.results.party.emailAddress
		field=api_EmailAddress
		api_EmailAddress=removeBrackets(field)
		
		api_Telephone=jsonRes.results.party.telephone
		field=api_Telephone
		api_Telephone=removeBrackets(field)
		
		api_Fax=jsonRes.results.party.fax
		field=api_Fax
		api_Fax=removeBrackets(field)
		
		api_AddressId=jsonRes.results.party.addresses.id
		field=api_AddressId
		api_AddressId=removeBrackets(field)

		api_Name=jsonRes.results.party.addresses.addressName
		field=api_Name
		api_Name=removeBrackets(field)
		
		api_Line1=jsonRes.results.party.addresses.addressLine1
		field=api_Line1
		api_Line1=removeBrackets(field)
		
		api_Line2=jsonRes.results.party.addresses.addressLine2
		field=api_Line2
		api_Line2=removeBrackets(field)
		
		api_Line3=jsonRes.results.party.addresses.addressLine3
		field=api_Line3
		api_Line3=removeBrackets(field)
		
		api_City=jsonRes.results.party.addresses.city
		field=api_City
		api_City=removeBrackets(field)
		
		api_StateOrProvince=jsonRes.results.party.addresses.state
		field=api_StateOrProvince
		api_StateOrProvince=removeBrackets(field)
		
		api_Country=jsonRes.results.party.addresses.country
		field=api_Country
		api_Country=removeBrackets(field)
		
		api_Postcode=jsonRes.results.party.addresses.postalCode
		field=api_Postcode
		api_Postcode=removeBrackets(field)
		
		apiWriter.println(sql_ApplicationId+","+api_MemberAssuredId+","+api_MemberReference+","+api_Domicile+","+api_PartyId+","+api_CrmIdentifier+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_Name+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode)
		log.info "API Response received as : "+api_MemberAssuredId+","+api_MemberReference+","+api_Domicile+","+api_PartyId+","+api_CrmIdentifier+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_Name+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode
		
		if (api_MemberAssuredId.toString().equals(sql_MemberAssuredId.toString()) && api_MemberReference.toString().equals(sql_MemberReference.toString()) && api_Domicile.toString().toUpperCase().equals(sql_Domicile.toString().toUpperCase()) && api_PartyId.toString().toUpperCase().equals(sql_PartyId.toString().toUpperCase()) && api_CrmIdentifier.toString().toUpperCase().equals(sql_CrmIdentifier.toString().toUpperCase()) && api_OrganisationName.toString().toUpperCase().equals(sql_OrganisationName.toString().toUpperCase()) && api_Salutation.toString().toUpperCase().equals(sql_Salutation.toString().toUpperCase()) && api_FirstName.toString().toUpperCase().equals(sql_FirstName.toString().toUpperCase()) && api_MiddleName.toString().toUpperCase().equals(sql_MiddleName.toString().toUpperCase()) && api_LastName.toString().toUpperCase().equals(sql_LastName.toString().toUpperCase()) && api_SearchName.toString().toUpperCase().equals(sql_SearchName.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && api_Telephone.toString().equals(sql_Telephone.toString()) && api_Fax.toString().equals(sql_Fax.toString()) && api_AddressId.toString().equals(sql_AddressId.toString()) && api_Name.toString().toUpperCase().equals(sql_Name.toString().toUpperCase()) && api_Line1.toString().toUpperCase().equals(sql_Line1.toString().toUpperCase()) && api_Line2.toString().toUpperCase().equals(sql_Line2.toString().toUpperCase()) && api_Line3.toString().toUpperCase().equals(sql_Line3.toString().toUpperCase()) && api_City.toString().toUpperCase().equals(sql_City.toString().toUpperCase()) && api_StateOrProvince.toString().toUpperCase().equals(sql_StateOrProvince.toString().toUpperCase()) && api_Country.toString().toUpperCase().equals(sql_Country.toString().toUpperCase()) && api_Postcode.toString().toUpperCase().equals(sql_Postcode.toString().toUpperCase()))
		{
			compareWriter.println(sql_ApplicationId+","+sql_MemberAssuredId+","+api_MemberAssuredId+","+sql_MemberReference+","+api_MemberReference+","+sql_Domicile+","+api_Domicile+","+sql_PartyId+","+api_PartyId+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Salutation+","+api_Salutation+","+sql_FirstName+","+api_FirstName+","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_AddressId+","+api_AddressId+","+sql_Name+","+api_Name+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+"Test Case Passed")
			log.info ("Details are matching hence test case is passed.")
		}
		else
		{
			compareWriter.println(sql_ApplicationId+","+sql_MemberAssuredId+","+api_MemberAssuredId+","+sql_MemberReference+","+api_MemberReference+","+sql_Domicile+","+api_Domicile+","+sql_PartyId+","+api_PartyId+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Salutation+","+api_Salutation+","+sql_FirstName+","+api_FirstName+","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_AddressId+","+api_AddressId+","+sql_Name+","+api_Name+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+"Test Case failed")
			log.info ("Details are not matching hence test case is failed.")
		}		
	}
	else
	{
		compareWriter.println(sql_ApplicationId+","+response+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test Case failed")
		log.info ("Details are not matching hence test case is failed.")
	}
	counter=counter+1
	log.info "Number of records verified are : "+counter
}

public String removeBrackets(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Application by Application Id by Members ************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>90541</con:value></con:property></con:properties></con:testCase><con:testCase id="3edd4542-2ee1-4e28-8f97-b43fabec8fd7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationIdByRisks" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppIdByRisks" id="e4ded040-0434-4c21-83fe-fcd57324d589"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationid}/risks" methodName="ApplicationByApplicationIdByRisks" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppIdByRisks" id="86d726da-eb43-411b-b880-ff79ff951948" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76009/risks</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationIdByRisks" id="ffd76b88-fe88-495f-8ff8-a0dd0b9550e3" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}

String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", ".")
newDateTimeString=newDateTimeString.replace(":",".")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Application By Application Id By Risk ************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
				"""
				Use TOM
				SELECT
				DISTINCT
				TOP 200
				AR.Id as ApplicationRiskId, AR.Risk_Id as Id, R.Reference as RiskReference, AMA.MemberAssured_Id as MemberId, MA.Reference as MemberReference,
				P.OrganisationName as MemberName, AB.Id as ApplicationId, AB.Reference as ApplicationReference, AB.Discriminator as ApplicationType, [User].EmailAddress,
				AR.Risk_Id as VesselId, RV.ImoNumber, R.Name as VesselName, VT.Name as VesselType, RV.CallSign, Rv.GrossTonnage, RV.YearBuilt, con.ShortCode as FlagCountryCode, 
				con.Name as FlagCountryName, RP.ShortCode as PortOfRegistryCode, RP.Name as PortOfRegistryName, RST.Name as RiskCategoryName, 
				RV.EngineHorsePower, RV.TrademarkEngineModelNumber
				from ApplicationRisk AR
				inner join ApplicationMemberAssured AMA on AMA.Id=AR.ApplicationMemberAssured_Id
				inner join ApplicationBase AB on AB.Id = AMA.Application_Id
				inner join MemberAssured MA on MA.Id = AMA.MemberAssured_Id
				inner join Risk R on R.Id = AR.Risk_Id
				inner join Party P on P.Id= MA.Party_Id
				join [user] on AB.Underwriter_Id = [User].Id
				join RiskVessel RV on RV.Id = R.Id
				join ref_VesselType VT on VT.Id=RV.Type_Id
				left join ref_Port RP on RP.Id = RV.PortOfRegistry_Id
				join ref_RiskSubType RST on RST.Id = RV.Category_Id
				left join ref_Country Con on Con.id = RV.Flag_Id
				where AB.Discriminator in ('Quote', 'Policy')
				order by 1 desc
				"""

//def rows=con.rows(sqlstmt)
//int db_size=rows.size

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationIDByRisk.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationIDByRisk.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationIDByRisk.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationIDByRisk"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationIDByRisk"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationIDByRisk"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationRiskId"+","+"SQL_Id"+","+"SQL_RiskReference"+","+"SQL_MemberId"+","+"SQL_MemberReference"+","+"SQL_MemberName"+","+"SQL_ApplicationId"+","+"SQL_ApplicationReference"+","+"SQL_ApplicationType"+","+"SQL_EmailAddress"+","+"SQL_VesselId"+","+"SQL_ImoNumber"+","+"SQL_VesselName"+","+"SQL_VesselType"+","+"SQL_CallSign"+","+"SQL_GrossTonnage"+","+"SQL_YearBuilt"+","+"SQL_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"SQL_EngineHorsePower"+","+"SQL_TrademarkEngineModelNumber")
apiWriter.println("API_ApplicationRiskId"+","+"API_Id"+","+"API_RiskReference"+","+"API_MemberId"+","+"API_MemberReference"+","+"API_MemberName"+","+"API_ApplicationId"+","+"API_ApplicationReference"+","+"API_ApplicationType"+","+"API_EmailAddress"+","+"API_VesselId"+","+"API_ImoNumber"+","+"API_VesselName"+","+"API_VesselType"+","+"API_CallSign"+","+"API_GrossTonnage"+","+"API_YearBuilt"+","+"API_FlagCountryCode"+","+"API_FlagCountryName"+","+"API_PortOfRegistryCode"+","+"API_PortOfRegistryName"+","+"API_RiskCategoryName"+","+"API_EngineHorsePower"+","+"API_TrademarkEngineModelNumber")			
compareWriter.println("SQL_ApplicationRiskId"+","+"API_ApplicationRiskId"+","+"SQL_Id"+","+"API_Id"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_ApplicationType"+","+"API_ApplicationType"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_VesselId"+","+"API_VesselId"+","+"SQL_ImoNumber"+","+"API_ImoNumber"+","+"SQL_VesselName"+","+"API_VesselName"+","+"SQL_VesselType"+","+"API_VesselType"+","+"SQL_CallSign"+","+"API_CallSign"+","+"SQL_GrossTonnage"+","+"API_GrossTonnage"+","+"SQL_YearBuilt"+","+"API_YearBuilt"+","+"SQL_FlagCountryCode"+","+"API_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"API_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"API_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"API_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"API_RiskCategoryName"+","+"SQL_EngineHorsePower"+","+"API_EngineHorsePower"+","+"SQL_TrademarkEngineModelNumber"+","+"API_TrademarkEngineModelNumber"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter = 0;
String field=null

con.eachRow(sqlstmt)
{	
	row ->
		sql_ApplicationRiskId=row.ApplicationRiskId
		sql_Id=row.Id
		sql_RiskReference=row.RiskReference
		sql_MemberId=row.MemberId
		sql_MemberReference=row.MemberReference
		sql_MemberName=row.MemberName
		field = sql_MemberName
		sql_MemberName=removeBracketsAndComma(field)
		
		sql_ApplicationId=row.ApplicationId
		sql_ApplicationReference=row.ApplicationReference
		sql_ApplicationType=row.ApplicationType
		sql_EmailAddress=row.EmailAddress
		sql_VesselId=row.VesselId
		sql_ImoNumber=row.ImoNumber
		sql_VesselName=row.VesselName
		field = sql_VesselName
		sql_VesselName=removeBracketsAndComma(field)
		
		sql_VesselType=row.VesselType
		sql_CallSign=row.CallSign
		sql_GrossTonnage=row.GrossTonnage
		sql_YearBuilt=row.YearBuilt
		sql_FlagCountryCode=row.FlagCountryCode
		sql_FlagCountryName=row.FlagCountryName
		field = sql_FlagCountryName
		sql_FlagCountryName=removeBracketsAndComma(field)
		
		sql_PortOfRegistryCode=row.PortOfRegistryCode
		sql_PortOfRegistryName=row.PortOfRegistryName
		field = sql_PortOfRegistryName
		sql_PortOfRegistryName=removeBracketsAndComma(field)
		
		sql_RiskCategoryName=row.RiskCategoryName
		sql_EngineHorsePower=row.EngineHorsePower
		sql_TrademarkEngineModelNumber=row.TrademarkEngineModelNumber
		
		sqlWriter.println(sql_ApplicationRiskId+","+sql_Id+","+sql_RiskReference+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_EmailAddress+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber)
		log.info "SQL response is : "+sql_ApplicationRiskId+","+sql_Id+","+sql_RiskReference+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_EmailAddress+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber

		//Set the Application ID at test case level
		String applicationId = sql_ApplicationId
		testRunner.testCase.setPropertyValue( "applicationId", applicationId)

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)		
		
		testRunner.runTestStepByName('AppByAppIdByRisks')
		String req='${AppByAppIdByRisks#Response}'
		response=context.expand(req)
		//log.info "API Response received is :"+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["AppByAppIdByRisks"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info("HTTP status code: " + httpStatusCode)
	
		String error = response
		if(httpStatusCode.equals("200"))
		{
			int recordCount = jsonRes.totalRecords
			if(recordCount!=0)
			{
				for (int i=0; i<recordCount; i++)
				{
					api_ApplicationRiskId=jsonRes.results.applicationRiskId[i]
					field = api_ApplicationRiskId
					api_ApplicationRiskId=removeBracketsAndComma(field)
			
					api_Id=jsonRes.results.id[i]
					field = api_Id
					api_Id=removeBracketsAndComma(field)
					
					api_RiskReference=jsonRes.results.reference[i]
					field = api_RiskReference
					api_RiskReference=removeBracketsAndComma(field)
					
					api_MemberId=jsonRes.results.memberId[i]
					field = api_MemberId
					api_MemberId=removeBracketsAndComma(field)
					
					api_MemberReference=jsonRes.results.memberReference[i]
					field = api_MemberReference
					api_MemberReference=removeBracketsAndComma(field)
					
					api_MemberName=jsonRes.results.memberName[i]
					field = api_MemberName
					api_MemberName=removeBracketsAndComma(field)
					
					api_ApplicationId=jsonRes.results.applicationId[i]
					field = api_ApplicationId
					api_ApplicationId=removeBracketsAndComma(field)
					
					api_ApplicationReference=jsonRes.results.applicationReference[i]
					field = api_ApplicationReference
					api_ApplicationReference=removeBracketsAndComma(field)
					
					api_ApplicationType=jsonRes.results.applicationType[i]
					field = api_ApplicationType
					api_ApplicationType=removeBracketsAndComma(field)
					
					api_EmailAddress=jsonRes.results.applicationUnderwriterEmail[i]
					field = api_EmailAddress
					api_EmailAddress=removeBracketsAndComma(field)
					
					api_VesselId=jsonRes.results.vessel.id[i]
					field = api_VesselId
					api_VesselId=removeBracketsAndComma(field)
					
					api_ImoNumber=jsonRes.results.vessel.imoNumber[i]
					field = api_ImoNumber
					api_ImoNumber=removeBracketsAndComma(field)
					
					api_VesselName=jsonRes.results.vessel.vesselName[i]
					field = api_VesselName
					api_VesselName=removeBracketsAndComma(field)
					
					api_VesselType=jsonRes.results.vessel.vesselType[i]
					field = api_VesselType
					api_VesselType=removeBracketsAndComma(field)
					
					api_CallSign=jsonRes.results.vessel.callSign[i]
					field = api_CallSign
					api_CallSign=removeBracketsAndComma(field)
					
					api_GrossTonnage=jsonRes.results.vessel.grossTonnage[i]
					field = api_GrossTonnage
					api_GrossTonnage=removeBracketsAndComma(field)
					
					api_YearBuilt=jsonRes.results.vessel.yearBuilt[i]
					field = api_YearBuilt
					api_YearBuilt=removeBracketsAndComma(field)
					
					api_FlagCountryCode=jsonRes.results.vessel.flagCountryCode[i]
					field = api_FlagCountryCode
					api_FlagCountryCode=removeBracketsAndComma(field)
					
					api_FlagCountryName=jsonRes.results.vessel.flagCountryName[i]
					field = api_FlagCountryName
					api_FlagCountryName=removeBracketsAndComma(field)
					
					api_PortOfRegistryCode=jsonRes.results.vessel.portOfRegistryCode[i]
					field = api_PortOfRegistryCode
					api_PortOfRegistryCode=removeBracketsAndComma(field)
					
					api_PortOfRegistryName=jsonRes.results.vessel.portOfRegistryName[i]
					field = api_PortOfRegistryName
					api_PortOfRegistryName=removeBracketsAndComma(field)
					
					api_RiskCategoryName=jsonRes.results.vessel.riskCategoryName[i]
					field = api_RiskCategoryName
					api_RiskCategoryName=removeBracketsAndComma(field)
					
					api_EngineHorsePower=jsonRes.results.vessel.engineHorsePower[i]
					field = api_EngineHorsePower
					api_EngineHorsePower=removeBracketsAndComma(field)
					
					api_TrademarkEngineModelNumber=jsonRes.results.vessel.trademarkAndEngineModel[i]
					field = api_TrademarkEngineModelNumber
					api_TrademarkEngineModelNumber=removeBracketsAndComma(field)
					
					apiWriter.println(api_ApplicationRiskId+","+api_Id+","+api_RiskReference+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_VesselId+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_GrossTonnage+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_EngineHorsePower+","+api_TrademarkEngineModelNumber)
					log.info "API response received as : "+api_ApplicationRiskId+","+api_Id+","+api_RiskReference+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_VesselId+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_GrossTonnage+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_EngineHorsePower+","+api_TrademarkEngineModelNumber		
	
					//if(api_ApplicationRiskId.toString().equals(sql_ApplicationRiskId.toString()))
					if(api_ApplicationRiskId.toString().equals(sql_ApplicationRiskId.toString()) && api_Id.toString().equals(sql_Id.toString()) && api_RiskReference.toString().equals(sql_RiskReference.toString()) && api_MemberId.toString().equals(sql_MemberId.toString()) && api_MemberReference.toString().equals(sql_MemberReference.toString()) && api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && api_ApplicationId.toString().equals(sql_ApplicationId.toString()) && api_ApplicationReference.toString().equals(sql_ApplicationReference.toString()) && api_ApplicationType.toString().toUpperCase().equals(sql_ApplicationType.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && api_VesselId.toString().equals(sql_VesselId.toString()) && api_ImoNumber.toString().equals(sql_ImoNumber.toString()) && api_VesselName.toString().toUpperCase().equals(sql_VesselName.toString().toUpperCase()) && api_VesselType.toString().toUpperCase().equals(sql_VesselType.toString().toUpperCase()) && api_CallSign.toString().equals(sql_CallSign.toString()) && api_GrossTonnage.toString().equals(sql_GrossTonnage.toString()) && api_YearBuilt.toString().equals(sql_YearBuilt.toString()) && api_FlagCountryCode.toString().toUpperCase().equals(sql_FlagCountryCode.toString().toUpperCase()) && api_FlagCountryName.toString().toUpperCase().equals(sql_FlagCountryName.toString().toUpperCase()) && api_PortOfRegistryCode.toString().toUpperCase().equals(sql_PortOfRegistryCode.toString().toUpperCase()) && api_PortOfRegistryName.toString().toUpperCase().equals(sql_PortOfRegistryName.toString().toUpperCase()) && api_RiskCategoryName.toString().toUpperCase().equals(sql_RiskCategoryName.toString().toUpperCase()) && api_EngineHorsePower.toString().equals(sql_EngineHorsePower.toString()) && api_TrademarkEngineModelNumber.toString().equals(sql_TrademarkEngineModelNumber.toString()))
					{
						compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_Id+","+api_Id+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+"Test Case is passed")
						log.info "Details are matching hence test case is passed"
						break;
					}
					else
					{	
						compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_Id+","+api_Id+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+"Test Case is failed")
						log.info "Details are not matching hence test case is failed"
						break;
					}				
				}
			}	
		}				
		counter=counter+1;
		log.info "Record number "+counter+" is checked."
}

public String removeBracketsAndComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if (field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", ".")
newDateTimeString = newDateTimeString.replace(":",".")
log.info "************Execution Finished at "+newDateTimeString+"************"
log.info "************Execution Finished for Application By Application Id By Risk ************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>90583</con:value></con:property></con:properties></con:testCase><con:testCase id="2e648086-1938-4dd5-8eba-75ca5ca9f37c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationByApplicationId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppId" id="f054110a-676d-4cc6-9ebf-c866853bb133"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/${#TestCase#applicationId}/" methodName="ApplicationByApplicationId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppId" id="ff689291-46b0-47a0-88f0-a2ddbd2b2302" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/76177/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="ExcludeNewBusiness" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>ExcludeNewBusiness</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationId" id="98876e83-7bbf-43a5-85bf-326e39c54c40" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for  Application by Application Id ************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
"""
Use TOM
Select 
top 200
AB.Id, AB.Reference, ABR.Broker_Id as BrokerId, MA.Id as MemberId, MA.Reference as MemberReference, P.OrganisationName as MemberName, 
AB.Discriminator, [User].EmailAddress, AB.PolicyStart as PolicyStartDate, AB.PolicyEnd as PolicyEndDate, AB.FlagAtRenewal as IsRenewalApplication 
from ApplicationBase AB 
inner join ApplicationMemberAssured AMA on AMA.Application_Id = AB.Id 
inner join MemberAssured MA on MA.Id=AMA.MemberAssured_Id 
inner join Party P on P.Id= MA.Party_Id 
join [user] on AB.Underwriter_Id = [User].Id
inner join ApplicationBroker ABR on ABR.Application_Id = AB.Id
where AB.Discriminator!='RenewalQuote'
order by 1 desc
"""

def rows=con.rows(sqlstmt)  
int db_size=rows.size

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationID.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationID.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationID.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationID"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationID"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationID"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_ApplicationReference"+","+"SQL_BrokerId"+","+"SQL_MemberId"+","+"SQL_MemberReference"+","+"SQL_MemberName"+","+"SQL_Discriminator"+","+"SQL_EmailAddress"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_IsRenewalApplication")
apiWriter.println("API_ApplicationId"+","+"API_ApplicationReference"+","+"API_BrokerId"+","+"API_MemberId"+","+"API_MemberReference"+","+"API_MemberName"+","+"API_Discriminator"+","+"API_EmailAddress"+","+"API_BrokerReference"+","+"API_BrokerName"+","+"API_ApplicationProductType"+","+"API_ApplicationFirstTransaction"+","+"API_PolicyStartDate"+","+"API_PolicyEndDate"+","+"API_IsRenewalApplication"+","+"API_RenewalFromPolicyReference")			
compareWriter.println("SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_BrokerId"+","+"API_BrokerId"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_Discriminator"+","+"API_Discriminator"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"API_BrokerReference"+","+"API_BrokerName"+","+"API_ApplicationProductType"+","+"API_ApplicationFirstTransaction"+","+"API_PolicyStartDate"+","+"API_PolicyEndDate"+","+"API_IsRenewalApplication"+","+"API_RenewalFromPolicyReference"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row ->
		sql_ApplicationId=row.Id
		sql_ApplicationReference=row.Reference
		sql_BrokerId=row.BrokerId
		sql_MemberId=row.MemberId
		sql_MemberReference=row.MemberReference
		sql_MemberName=row.MemberName
		sql_Discriminator=row.Discriminator
		sql_EmailAddress=row.EmailAddress
		sql_PolicyStartDate=row.PolicyStartDate
		sql_PolicyEndDate=row.PolicyEndDate
		sql_IsRenewalApplication=row.IsRenewalApplication

		sqlWriter.println(sql_ApplicationId+","+sql_ApplicationReference+","+sql_BrokerId+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_Discriminator+","+sql_EmailAddress+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication)
		log.info "SQL response is : "+sql_ApplicationId+","+sql_ApplicationReference+","+sql_BrokerId+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_Discriminator+","+sql_EmailAddress+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication

		//Set the Application ID at test case level
		String applicationId =sql_ApplicationId
		testRunner.testCase.setPropertyValue( "applicationId", applicationId)

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
		//log.info "Token Value : "+token

		//Run the test step to get response	
		testRunner.runTestStepByName('AppByAppId')
		String req='${AppByAppId#Response}'
		response=context.expand(req)
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["AppByAppId"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info "API Status code is : "+httpStatusCode
	
		String error = response
		if(httpStatusCode.equals("200"))
		{
			api_ApplicationId=jsonRes.id
			api_ApplicationReference=jsonRes.reference
			api_BrokerId=jsonRes.brokerId
			api_BrokerReference=jsonRes.brokerReference
			api_BrokerName=jsonRes.brokerName
			api_MemberId=jsonRes.memberId
			api_MemberReference=jsonRes.memberReference
			api_MemberName=jsonRes.memberName
			api_Discriminator=jsonRes.applicationType
			api_ApplicationProductType=jsonRes.applicationProductType
			api_EmailAddress=jsonRes.applicationUnderwriterEmail
			api_ApplicationFirstTransaction=jsonRes.applicationFirstTransaction
			api_PolicyStartDate=jsonRes.policyStartDate
			api_PolicyEndDate=jsonRes.policyEndDate
			api_IsRenewalApplication=jsonRes.isRenewalApplication
			api_RenewalFromPolicyReference=jsonRes.renewalFromPolicyReference
	
			apiWriter.println(api_ApplicationId+","+api_ApplicationReference+","+api_BrokerId+","+api_BrokerReference+","+api_BrokerName+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_Discriminator+","+api_ApplicationProductType+","+api_EmailAddress+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference)
			log.info "API response is : "+api_ApplicationId+","+api_ApplicationReference+","+api_BrokerId+","+api_BrokerReference+","+api_BrokerName+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_Discriminator+","+api_ApplicationProductType+","+api_EmailAddress+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference
			
			if(api_ApplicationId.toString().equals(sql_ApplicationId.toString()) && api_ApplicationReference.toString().equals(sql_ApplicationReference.toString()) && api_BrokerId.toString().equals(sql_BrokerId.toString()) && api_MemberId.toString().equals(sql_MemberId.toString()) && api_MemberReference.toString().equals(sql_MemberReference.toString()) && api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && api_Discriminator.toString().toUpperCase().equals(sql_Discriminator.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()))
			{
				compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_Discriminator+","+sql_EmailAddress+","+api_EmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"Test Case Passed")
				log.info ("Details are matching hence test case is passed")
			}
			else
			{
				compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_Discriminator+","+sql_EmailAddress+","+api_EmailAddress+","+api_BrokerReference+","+api_BrokerName+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_RenewalFromPolicyReference+","+"Test Case failed")
				log.info ("Details are not matching hence test case is failed")
			}	
		}
		counter=counter+1
		log.info "Number of records verified are : "+counter
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Application by Application Id************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>applicationId</con:name><con:value>90522</con:value></con:property></con:properties></con:testCase><con:testCase id="481b589f-4771-432e-8092-07509639d7e5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ApplicationsByApplicationReference" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="AppByAppReference" id="5a434276-b433-4778-89db-62d594806185"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/applications/" methodName="ApplicationsByApplicationReference" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="AppByAppReference" id="b5c76b67-8f2a-4c1f-8e41-e1684c88e0e3" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/applications/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="reference" value="${#TestCase#appReference}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>reference</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ApplicationByApplicationReference" id="37851214-1675-40e1-83e8-07b439d7e6c2" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for  Application by Application Reference ************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
		"""
			Use TOM
			Select 
			top 150
			AB.Id as ApplicationId, AB.Reference as ApplicationReference, ABR.Broker_Id as BrokerId, MA.Id as MemberId, MA.Reference as MemberReference, P.OrganisationName as MemberName, 
			AB.Discriminator, [User].EmailAddress, AB.PolicyStart as PolicyStartDate, AB.PolicyEnd as PolicyEndDate, AB.FlagAtRenewal as IsRenewalApplication 
			from ApplicationBase AB 
			inner join ApplicationMemberAssured AMA on AMA.Application_Id = AB.Id 
			inner join MemberAssured MA on MA.Id=AMA.MemberAssured_Id 
			inner join Party P on P.Id= MA.Party_Id 
			join [user] on AB.Underwriter_Id = [User].Id
			inner join ApplicationBroker ABR on ABR.Application_Id = AB.Id
			where AB.Discriminator!='RenewalQuote'
			order by 1 desc
		"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationReference.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationReference.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationReference.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_ApplicationByApplicationReference"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_ApplicationByApplicationReference"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_ApplicationByApplicationReference"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationId"+","+"SQL_ApplicationReference"+","+"SQL_BrokerId"+","+"SQL_MemberId"+","+"SQL_MemberReference"+","+"SQL_MemberName"+","+"SQL_Discriminator"+","+"SQL_EmailAddress"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_IsRenewalApplication")
apiWriter.println("API_ApplicationId"+","+"API_ApplicationReference"+","+"API_BrokerId"+","+"API_BrokerReference"+","+"API_BrokerName"+","+"API_MemberId"+","+"API_MemberReference"+","+"API_MemberName"+","+"API_Discriminator"+","+"API_ApplicationType"+","+"API_ApplicationProductType"+","+"API_ApplicationUnderwriterEmail"+","+"API_ApplicationFirstTransaction"+","+"API_PolicyStartDate"+","+"API_PolicyEndDate"+","+"API_IsRenewalApplication"+","+"API_RenewalFromPolicyReference")
//compareWriter.println("SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_BrokerId"+","+"API_BrokerId"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_Discriminator"+","+"API_Discriminator"+","+"SQL_EmailAddress"+","+"API_ApplicationUnderwriterEmail"+","+"SQL_PolicyStartDate"+","+"API_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"API_PolicyEndDate"+","+"SQL_IsRenewalApplication"+","+"API_IsRenewalApplication"+","+"API_ApplicationType"+","+"API_ApplicationProductType"+","+"API_ApplicationFirstTransaction"+","+"API_RenewalFromPolicyReference"+","+"Test Case Status")
compareWriter.println("SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_BrokerId"+","+"API_BrokerId"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_Discriminator"+","+"API_ApplicationType"+","+"SQL_EmailAddress"+","+"API_ApplicationUnderwriterEmail"+","+"SQL_PolicyStartDate"+","+"API_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"API_PolicyEndDate"+","+"SQL_IsRenewalApplication"+","+"API_IsRenewalApplication"+","+"API_ApplicationProductType"+","+"API_ApplicationFirstTransaction"+","+"API_BrokerReference"+","+"API_BrokerName"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter=0;

con.eachRow(sqlstmt)
{	
	row ->
		sql_ApplicationId=row.ApplicationId
		sql_ApplicationReference=row.ApplicationReference
		sql_BrokerId=row.BrokerId
		sql_MemberId=row.MemberId
		sql_MemberReference=row.MemberReference
		sql_MemberName=row.MemberName
		sql_Discriminator=row.Discriminator
		sql_EmailAddress=row.EmailAddress
		sql_PolicyStartDate=row.PolicyStartDate
		sql_PolicyEndDate=row.PolicyEndDate
		sql_IsRenewalApplication=row.IsRenewalApplication

		sqlWriter.println(sql_ApplicationId+","+sql_ApplicationReference+","+sql_BrokerId+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_Discriminator+","+sql_EmailAddress+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication)
		log.info "SQL response is : "+sql_ApplicationId+","+sql_ApplicationReference+","+sql_BrokerId+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_Discriminator+","+sql_EmailAddress+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication

		//Set the Application ID at test case level
		String appReference=sql_ApplicationReference
		testRunner.testCase.setPropertyValue( "appReference", appReference)

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
		//log.info "Token Value : "+token
		
		testRunner.runTestStepByName('AppByAppReference')
		String req='${AppByAppReference#Response}'
		response=context.expand(req)
		log.info "API response is : "+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["AppByAppReference"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info "API Status code is : "+httpStatusCode

		String error = response
		if(httpStatusCode.equals("200"))
		{
			int jsonRecordCount = jsonRes.totalRecords
			log.info "Search records counts : "+ jsonRecordCount 
			for (int i=0; i<jsonRecordCount; i++)
			{
				newId = jsonRes.results.id[i]
				if(sql_ApplicationId.toString().equals(newId.toString()))
				{
					api_ApplicationId=jsonRes.results.id[i]
					api_ApplicationReference=jsonRes.results.reference[i]
					api_BrokerId=jsonRes.results.brokerId[i]
					api_BrokerReference=jsonRes.results.brokerReference[i]
					api_BrokerName=jsonRes.results.brokerName[i]
					api_MemberId=jsonRes.results.memberId[i]
					api_MemberReference=jsonRes.results.memberReference[i]
					api_MemberName=jsonRes.results.memberName[i]
					api_ApplicationType=jsonRes.results.applicationType[i]
					api_ApplicationProductType=jsonRes.results.applicationProductType[i]
					api_ApplicationUnderwriterEmail=jsonRes.results.applicationUnderwriterEmail[i]
					api_ApplicationFirstTransaction=jsonRes.results.applicationFirstTransaction[i]
					api_PolicyStartDate=jsonRes.results.policyStartDate[i]
					api_PolicyEndDate=jsonRes.results.policyEndDate[i]
					api_IsRenewalApplication=jsonRes.results.isRenewalApplication[i]
					
					apiWriter.println(api_ApplicationId+","+api_ApplicationReference+","+api_BrokerId+","+api_BrokerReference+","+api_BrokerName+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationType+","+api_ApplicationProductType+","+api_ApplicationUnderwriterEmail+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication)
					log.info "API response is : "+api_ApplicationId+","+api_ApplicationReference+","+api_BrokerId+","+api_BrokerReference+","+api_BrokerName+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationType+","+api_ApplicationProductType+","+api_ApplicationUnderwriterEmail+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication
					
					//if (applicaitonID.toString().equals(policy_Id.toString()) && memberName.toString().toUpperCase().equals(policy_MemberName.toString().toUpperCase()) && applicationType.toString().toUpperCase().equals(policy_ApplicationType.toString().toUpperCase()) && policy_MemberReference.toString().equals(memberReference.toString()) && policy_Ref.toString().equals(applicationReference.toString()) && policy_ApplicationUnderwriterEmail.toString().toUpperCase().equals(emailId.toString().toUpperCase()))
					if(api_ApplicationId.toString().equals(sql_ApplicationId.toString()) && api_ApplicationReference.toString().equals(sql_ApplicationReference.toString()) && api_BrokerId.toString().equals(sql_BrokerId.toString()) && api_MemberId.toString().equals(sql_MemberId.toString()) && api_MemberReference.toString().equals(sql_MemberReference.toString()) && api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && api_ApplicationType.toString().toUpperCase().equals(sql_Discriminator.toString().toUpperCase()) && api_ApplicationUnderwriterEmail.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()))
					{
						//compareWriter.println(applicaitonID+","+policy_Id+","+applicationReference+","+policy_Ref+","+memberId+","+policy_MemberId+","+memberReference+","+policy_MemberReference+","+memberName+","+policy_MemberName+","+applicationType+","+policy_ApplicationType+","+policyStart+","+policy_PolicyStartDate+","+policyEnd+","+policy_PolicyEndDate+","+isRenewalApplication+","+policy_IsRenewalApplication+","+","+","+"Test Case is Passed")
						compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_ApplicationUnderwriterEmail+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_IsRenewalApplication+","+api_IsRenewalApplication+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_BrokerReference+","+api_BrokerName+","+"Test Case passed")
						log.info ("Details are matching hence test case is passed.")
					}
					else
					{
						//compareWriter.println(applicaitonID+","+policy_Id+","+applicationReference+","+policy_Ref+","+memberId+","+policy_MemberId+","+memberReference+","+policy_MemberReference+","+memberName+","+policy_MemberName+","+applicationType+","+policy_ApplicationType+","+policyStart+","+policy_PolicyStartDate+","+policyEnd+","+policy_PolicyEndDate+","+isRenewalApplication+","+policy_IsRenewalApplication+","+","+","+"Test Case is Failed")
						compareWriter.println(sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_BrokerId+","+api_BrokerId+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_ApplicationUnderwriterEmail+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_IsRenewalApplication+","+api_IsRenewalApplication+","+api_ApplicationProductType+","+api_ApplicationFirstTransaction+","+api_BrokerReference+","+api_BrokerName+","+"Test Case failed")
						log.info ("Details are not matching hence test case is failed.")
					}
				}	
			}	
		}
		counter=counter+1
		log.info "Number of records verified are : "+counter
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Application by Application Reference************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>appReference</con:name><con:value>1053059</con:value></con:property></con:properties></con:testCase><con:testCase id="183ed842-2ec1-4253-9ee2-9e9a80d7d7e7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_BrokerByBrokerIdByContactsByContactId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="BrkByBrkIdByContactsByContactId" id="a2779535-3166-46fb-bb48-6460c7e9310a"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/brokers/${#TestCase#brokerId}/contacts/${#TestCase#contactId}" methodName="BrokerByBrokerIdByContactsByContactId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BrkByBrkIdByContactsByContactId" id="9b769e3f-6af5-406d-b5bf-9681caa6ae7d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/brokers/1289/contacts/112485</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="BrokerByBrokerIdByContactByContactId" id="6f6d325c-7c8f-4d87-b7c2-93d39402e6c3" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info "Before Use : "+token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Broker By Broker Id By Contacts By Contact Id************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt = 
'''
	USE TOM
	SELECT 
	TOP 200
	B.Id as BrokerId, P.Id as Id,  P.OrganisationName, P.Position, CT.Name as ContactName,   P.EmailAddress,  A.Id as AddressId, 
	A.Name as AddressName, A.Line1, A.Line2, A.Line3, A.City, A.StateOrProvince, C.Name as Country, A.Postcode
	from Broker B 
	left Join Party P on P.Account_Id=B.Party_Id 
	left join Address A on A.Party_Id = P.Id 
	left join ref_Country C on C.Id = A.Country_Id 
	left join ref_ContactType CT on CT.Id= P.ContactType_Id
	where p.discriminator='Contact'
	order by P.Id desc 
''' 

def rows=con.rows(sqlstmt)  
log.info 'Rows are '+rows
int db_size=rows.size

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_BrokerByBrokerIdByContactsByContactId.csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_BrokerByBrokerIdByContactsByContactId.csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_BrokerByBrokerIdByContactsByContactId.csv"]

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_BrokerByBrokerIdByContactsByContactId"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_BrokerByBrokerIdByContactsByContactId"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_BrokerByBrokerIdByContactsByContactId"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_BrokerId"+","+"SQL_PartyId"+","+"SQL_OrganisationName"+","+"SQL_Position"+","+"SQL_ContactName"+","+"SQL_EmailAddress"+","+"SQL_AddressId"+","+"SQL_AddressName"+","+"SQL_Line1"+","+"SQL_Line2"+","+"SQL_Line3"+","+"SQL_City"+","+"SQL_StateOrProvince"+","+"SQL_Country"+","+"SQL_Postcode")
apiWriter.println("API_BrokerId"+","+"API_PartyId"+","+"API_OrganisationName"+","+"API_Position"+","+"API_ContactName"+","+"API_EmailAddress"+","+"API_AddressId"+","+"API_AddressName"+","+"API_Line1"+","+"API_Line2"+","+"API_Line3"+","+"API_City"+","+"API_StateOrProvince"+","+"API_Country"+","+"API_Postcode")
compareWriter.println("SQL_BrokerId"+","+"SQL_PartyId"+","+"API_PartyId"+","+"SQL_OrganisationName"+","+"API_OrganisationName"+","+"SQL_Position"+","+"API_Position"+","+"SQL_ContactName"+","+"API_ContactName"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_AddressId"+","+"API_AddressId"+","+"SQL_AddressName"+","+"API_AddressName"+","+"SQL_Line1"+","+"API_Line1"+","+"SQL_Line2"+","+"API_Line2"+","+"SQL_Line3"+","+"API_Line3"+","+"SQL_City"+","+"API_City"+","+"SQL_StateOrProvince"+","+"API_StateOrProvince"+","+"SQL_Country"+","+"API_Country"+","+"SQL_Postcode"+","+"API_Postcode"+","+"Status")
String brokerId = null
String contactId=null
def response= null
def jsonSlurper=null
def jsonRes=null
String field=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
	sql_BrokerId=row.BrokerId
	sql_PartyId=row.Id
	sql_OrganisationName=row.OrganisationName
	field=sql_OrganisationName
	sql_OrganisationName=removeBracketAndComma(field)

	sql_Position=row.Position
	field=sql_Position
	sql_Position=removeBracketAndComma(field)
	
	sql_ContactName=row.ContactName
	field=sql_ContactName
	sql_ContactName=removeBracketAndComma(field)
	
	sql_EmailAddress=row.EmailAddress
	sql_AddressId=row.AddressId
	sql_AddressName=row.AddressName
	field=sql_AddressName
	sql_AddressName=removeBracketAndComma(field)
	
	sql_Line1=row.Line1
	field=sql_Line1
	sql_Line1=removeBracketAndComma(field)
	
	sql_Line2=row.Line2
	field=sql_Line2
	sql_Line2=removeBracketAndComma(field)
	
	sql_Line3=row.Line3
	field=sql_Line3
	sql_Line3=removeBracketAndComma(field)
	
	sql_City=row.City
	field=sql_City
	sql_City=removeBracketAndComma(field)
	
	sql_StateOrProvince=row.StateOrProvince
	field=sql_StateOrProvince
	sql_StateOrProvince=removeBracketAndComma(field)
	
	sql_Country=row.Country
	field=sql_Country
	sql_Country=removeBracketAndComma(field)
	
	sql_PostCode=row.Postcode
	field=sql_PostCode
	sql_PostCode=removeBracketAndComma(field)

	sqlWriter.println(sql_BrokerId+","+sql_PartyId+","+sql_OrganisationName+","+sql_Position+","+sql_ContactName+","+sql_EmailAddress+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_PostCode)
	log.info "SQL response received as : "+sql_BrokerId+","+sql_PartyId+","+sql_OrganisationName+","+sql_Position+","+sql_ContactName+","+sql_EmailAddress+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_PostCode

	//Set the Broker Id at test case level
	brokerId = sql_BrokerId
	testRunner.testCase.setPropertyValue( "brokerId", brokerId )
//	def getLocalPropValue = testRunner.testCase.getPropertyValue("brokerId")
//	brokerIdforcontact=getLocalPropValue.toString()

	//Set the Contact Id at test case level
	contactId=sql_PartyId
	testRunner.testCase.setPropertyValue( "contactId", contactId )
//	def getLocalPropValue1 = testRunner.testCase.getPropertyValue("contactId")
//	contactId=getLocalPropValue1.toString()

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
	//log.info "After Use : "+token
	
	//Run the test step to get response
	testRunner.runTestStepByName('BrkByBrkIdByContactsByContactId')
	String req='${BrkByBrkIdByContactsByContactId#Response}'
	response=context.expand(req)
	//log.info "API Response received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["BrkByBrkIdByContactsByContactId"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		api_PartyId=jsonRes.id
		field=api_PartyId
		api_PartyId=removeBracketAndComma(field)
		
		api_OrganisationName=jsonRes.name
		field=api_OrganisationName
		api_OrganisationName=removeBracketAndComma(field)
		
		api_Position=jsonRes.position
		field=api_Position
		api_Position=removeBracketAndComma(field)
		
		api_ContactName=jsonRes.contactTypeName
		field=api_ContactName
		api_ContactName=removeBracketAndComma(field)
							
		api_EmailAddress=jsonRes.emailAddress
		field=api_EmailAddress
		api_EmailAddress=removeBracketAndComma(field)
		
		api_AddressId=jsonRes.addresses.id
		field=api_AddressId
		api_AddressId=removeBracketAndComma(field)
		
		api_AddressName=jsonRes.addresses.addressName
		field=api_AddressName
		api_AddressName=removeBracketAndComma(field)
		
		api_Line1=jsonRes.addresses.addressLine1
		field=api_Line1
		api_Line1=removeBracketAndComma(field)
							
		api_Line2=jsonRes.addresses.addressLine2
		field=api_Line2
		api_Line2=removeBracketAndComma(field)
		
		api_Line3=jsonRes.addresses.addressLine3
		field=api_Line3
		api_Line3=removeBracketAndComma(field)
		
		api_City=jsonRes.addresses.city
		field=api_City
		api_City=removeBracketAndComma(field)
		
		api_StateOrProvince=jsonRes.addresses.state
		field=api_StateOrProvince
		api_StateOrProvince=removeBracketAndComma(field)
							
		api_Country=jsonRes.addresses.country
		field=api_Country
		api_Country=removeBracketAndComma(field)
							
		api_Postcode=jsonRes.addresses.postalCode
		field=api_Postcode
		api_Postcode=removeBracketAndComma(field)
		
		apiWriter.println(sql_BrokerId+","+api_PartyId+","+api_OrganisationName+","+api_Position+","+api_ContactName+","+api_EmailAddress+","+api_AddressId+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode)
		log.info "API response received as : "+sql_BrokerId+","+api_PartyId+","+api_OrganisationName+","+api_Position+","+api_ContactName+","+api_EmailAddress+","+api_AddressId+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode
	
		if (sql_PartyId.toString().equals(api_PartyId.toString()) && sql_OrganisationName.toString().toUpperCase().equals(api_OrganisationName.toString().toUpperCase()) && sql_Position.toString().toUpperCase().equals(api_Position.toString().toUpperCase()) && sql_ContactName.toString().toUpperCase().equals(api_ContactName.toString().toUpperCase()) && sql_EmailAddress.toString().toUpperCase().equals(api_EmailAddress.toString().toUpperCase()) && sql_AddressId.toString().equals(api_AddressId.toString()) && sql_AddressName.toString().toUpperCase().equals(api_AddressName.toString().toUpperCase()) && sql_Line1.toString().toUpperCase().equals(api_Line1.toString().toUpperCase()) && sql_Line2.toString().toUpperCase().equals(api_Line2.toString().toUpperCase()) && sql_Line3.toString().toUpperCase().equals(api_Line3.toString().toUpperCase()) && sql_City.toString().toUpperCase().equals(api_City.toString().toUpperCase()) && sql_StateOrProvince.toString().toUpperCase().equals(api_StateOrProvince.toString().toUpperCase()) && sql_Country.toString().toUpperCase().equals(api_Country.toString().toUpperCase()) && sql_PostCode.toString().toUpperCase().equals(api_Postcode.toString().toUpperCase()))
		{
			compareWriter.println(sql_BrokerId+","+sql_PartyId+","+api_PartyId+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Position+","+api_Position+","+sql_ContactName+","+api_ContactName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_Postcode+","+"Test case is passed")
			log.info "Broker details are matching successfully, Hence test case is passed"
		}
		else
		{
			compareWriter.println(sql_BrokerId+","+sql_PartyId+","+api_PartyId+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Position+","+api_Position+","+sql_ContactName+","+api_ContactName+","+sql_EmailAddress+","+api_EmailAddress+","+api_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_Postcode+","+"Test case is Failed")
			log.info "Broker details are not matching, Hence test case is failed"
		}	
	}
	else
	{
		log.info "Failed API response received as : "+response
	}
	counter=counter+1
	log.info "Number of records verified are : "+counter
}

public String removeBracketAndComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
		if(field.contains(" "))
		{
			field = field.replaceAll("\\s","")	
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************End of Script for Broker By Broker Id By Contacts By Contact Id************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>brokerId</con:name><con:value>300</con:value></con:property><con:property><con:name>contactId</con:name><con:value>112282</con:value></con:property></con:properties></con:testCase><con:testCase id="bb7f784e-a4dc-4339-8b77-e301a8c92316" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_BrokerByBrokerIdByContacts" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="BrkByBrkIdByContacts" id="36e6d20c-d53e-4115-be5e-f4a54b53990d"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/brokers/${#TestCase#brokerId}/contacts" methodName="BrokerByBrokerIdByContacts" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BrkByBrkIdByContacts" id="44778d96-842e-479e-83c6-a62a63f1b3d9" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/brokers/1289/contacts</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="BrokerByBrokerIdByContacts" id="1c0006e0-5d33-4ff2-b506-8fe68521f19a" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Broker By Broker Id By Contact ************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt = 
"""
USE TOM
SELECT 
DISTINCT
TOP 200
B.Id as BrokerId, P.Id as Party_Id,  P.OrganisationName, P.Position, CT.Name as ContactName,   P.EmailAddress,  A.Id as AddressId, 
A.Name as AddressName, A.Line1, A.Line2, A.Line3, A.City, A.StateOrProvince, C.Name as Country, A.Postcode, B.Reference as BrokerReference
from Broker B 
left Join Party P on P.Account_Id=B.Party_Id 
left join Address A on A.Party_Id = P.Id 
left join ref_Country C on C.Id = A.Country_Id 
left join ref_ContactType CT on CT.Id= P.ContactType_Id
where p.discriminator='Contact'
order by 1 desc
"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_BrokerByBrokerIdByContacts.csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_BrokerByBrokerIdByContacts.csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_BrokerByBrokerIdByContacts.csv"]

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_BrokerByBrokerIdByContacts"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_BrokerByBrokerIdByContacts"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_BrokerByBrokerIdByContacts"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_BrokerId"+","+"SQL_Party_Id"+","+"SQL_OrganisationName"+","+"SQL_Position"+","+"SQL_ContactName"+","+"SQL_EmailAddress"+","+"SQL_AddressId"+","+"SQL_AddressName"+","+"SQL_Line1"+","+"SQL_Line2"+","+"SQL_Line3"+","+"SQL_City"+","+"SQL_StateOrProvince"+","+"SQL_Country"+","+"SQL_Postcode"+","+"SQL_BrokerReference")
apiWriter.println("API_BrokerId"+","+"API_Id"+","+"API_OrganisationName"+","+"API_Position"+","+"API_ContactName"+","+"API_EmailAddress"+","+"API_AddressId"+","+"API_AddressName"+","+"API_Line1"+","+"API_Line2"+","+"API_Line3"+","+"API_City"+","+"API_StateOrProvince"+","+"API_Country"+","+"API_Postcode")
compareWriter.println("SQL_BrokerId"+","+"SQL_Party_Id"+","+"API_PartyId"+","+"SQL_OrganisationName"+","+"API_OrganisationName"+","+"SQL_Position"+","+"API_Position"+","+"SQL_ContactName"+","+"API_ContactName"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_AddressId"+","+"API_AddressId"+","+"SQL_AddressName"+","+"API_AddressName"+","+"SQL_Line1"+","+"API_Line1"+","+"SQL_Line2"+","+"API_Line2"+","+"SQL_Line3"+","+"API_Line3"+","+"SQL_City"+","+"API_City"+","+"SQL_StateOrProvince"+","+"API_StateOrProvince"+","+"SQL_Country"+","+"API_Country"+","+"SQL_PostCode"+","+"API_Postcode"+","+"SQL_BrokerReference"+","+"Test case is passed")

String field = null
def response= null
def jsonSlurper=null
def jsonRes=null
int counter=0;

con.eachRow(sqlstmt)
{	
	row ->
	sql_BrokerId=row.BrokerId
	sql_Party_Id=row.Party_Id
	
	sql_OrganisationName=row.OrganisationName
	field = sql_OrganisationName
	sql_OrganisationName=removeBracketAndComma(field)
				
	sql_Position=row.Position
	field = sql_Position
	sql_Position=removeBracketAndComma(field)
	
	sql_ContactName=row.ContactName
	field = sql_ContactName
	sql_ContactName=removeBracketAndComma(field)
	
	sql_EmailAddress=row.EmailAddress
	sql_AddressId=row.AddressId
	sql_AddressName=row.AddressName
	field = sql_AddressName
	sql_AddressName=removeBracketAndComma(field)
	
	sql_Line1=row.Line1
	field = sql_Line1
	sql_Line1=removeBracketAndComma(field)
	
	sql_Line2=row.Line2
	field = sql_Line2
	sql_Line2=removeBracketAndComma(field)
	
	sql_Line3=row.Line3
	field = sql_Line3
	sql_Line3=removeBracketAndComma(field)
	
	sql_City=row.City
	field = sql_City
	sql_City=removeBracketAndComma(field)
	
	sql_StateOrProvince=row.StateOrProvince
	field = sql_StateOrProvince
	sql_StateOrProvince=removeBracketAndComma(field)
	
	sql_Country=row.Country
	field = sql_Country
	sql_Country=removeBracketAndComma(field)
	
	sql_PostCode=row.Postcode
	field = sql_PostCode
	sql_PostCode=removeBracketAndComma(field)
	
	sql_BrokerReference=row.BrokerReference

	sqlWriter.println(sql_BrokerId+","+sql_Party_Id+","+sql_OrganisationName+","+sql_Position+","+sql_ContactName+","+sql_EmailAddress+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_PostCode+","+sql_BrokerReference)
	log.info "SQL response received as : "+sql_BrokerId+","+sql_Party_Id+","+sql_OrganisationName+","+sql_Position+","+sql_ContactName+","+sql_EmailAddress+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_PostCode+","+sql_BrokerReference

	//Set the Broker Id at test case level
	String brokerId = sql_BrokerId
	testRunner.testCase.setPropertyValue( "brokerId", brokerId )
	//def getLocalPropValue = testRunner.testCase.getPropertyValue("brokerId")
	//brokerIdforcontact=getLocalPropValue.toString()

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	//Run the test step to get response
	testRunner.runTestStepByName('BrkByBrkIdByContacts')
	String req='${BrkByBrkIdByContacts#Response}'
	response=context.expand(req)
	//log.info "API Response received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["BrkByBrkIdByContacts"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		int count=jsonRes.totalRecords
		log.info "Number of Records in API responses are : "+count

		for(int i=0; i<count; i++)
		{
			api_PartyId=jsonRes.results.id[i]
			field = api_PartyId
			api_PartyId=removeBracketAndComma(field)
			
			api_OrganisationName=jsonRes.results.name[i]
			field = api_OrganisationName
			api_OrganisationName=removeBracketAndComma(field)
			
			api_Position=jsonRes.results.position[i]
			field = api_Position
			api_Position=removeBracketAndComma(field)
		
			api_ContactName=jsonRes.results.contactTypeName[i]
			field = api_ContactName
			api_ContactName=removeBracketAndComma(field)
		
			api_EmailAddress=jsonRes.results.emailAddress[i]
			field = api_EmailAddress
			api_EmailAddress=removeBracketAndComma(field)
			
			api_AddressId=jsonRes.results.addresses.id[i]
			field = api_AddressId
			api_AddressId=removeBracketAndComma(field)
			
			api_AddressName=jsonRes.results.addresses.addressName[i]
			field = api_AddressName
			api_AddressName=removeBracketAndComma(field)
		
			api_Line1=jsonRes.results.addresses.addressLine1[i]
			field = api_Line1
			api_Line1=removeBracketAndComma(field)
			
			api_Line2=jsonRes.results.addresses.addressLine2[i]
			field = api_Line2
			api_Line2=removeBracketAndComma(field)
			
			api_Line3=jsonRes.results.addresses.addressLine3[i]
			field = api_Line3
			api_Line3=removeBracketAndComma(field)
		
			api_City=jsonRes.results.addresses.city[i]
			field = api_City
			api_City=removeBracketAndComma(field)
			
			api_StateOrProvince=jsonRes.results.addresses.state[i]
			field = api_StateOrProvince
			api_StateOrProvince=removeBracketAndComma(field)
			
			api_Country=jsonRes.results.addresses.country[i]
			field = api_Country
			api_Country=removeBracketAndComma(field)
			
			api_Postcode=jsonRes.results.addresses.postalCode[i]
			field = api_Postcode
			api_Postcode=removeBracketAndComma(field)
		
			if(sql_Party_Id.toString().equals(api_PartyId.toString()))
			{
				apiWriter.println(sql_BrokerId+","+api_PartyId+","+api_OrganisationName+","+api_Position+","+api_ContactName+","+api_EmailAddress+","+api_AddressId+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode)
				log.info "API response received as : "+sql_BrokerId+","+api_PartyId+","+api_OrganisationName+","+api_Position+","+api_ContactName+","+api_EmailAddress+","+api_AddressId+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode	
			}
		
			if (sql_BrokerId.toString().equals(sql_BrokerId.toString()) && api_PartyId.toString().equals(sql_Party_Id.toString()) && api_OrganisationName.toString().toUpperCase().equals(sql_OrganisationName.toString().toUpperCase()) && api_Position.toString().toUpperCase().equals(sql_Position.toString().toUpperCase()) && api_ContactName.toString().toUpperCase().equals(sql_ContactName.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && api_AddressId.toString().equals(sql_AddressId.toString()) && api_AddressName.toString().toUpperCase().equals(sql_AddressName.toString().toUpperCase()) && api_Line1.toString().toUpperCase().equals(sql_Line1.toString().toUpperCase()) && api_Line2.toString().toUpperCase().equals(sql_Line2.toString().toUpperCase()) && api_Line3.toString().toUpperCase().equals(sql_Line3.toString().toUpperCase()) && api_City.toString().toUpperCase().equals(sql_City.toString().toUpperCase()) && api_StateOrProvince.toString().toUpperCase().equals(sql_StateOrProvince.toString().toUpperCase()) && api_Country.toString().toUpperCase().equals(sql_Country.toString().toUpperCase()) && api_Postcode.toString().toUpperCase().equals(sql_PostCode.toString().toUpperCase()))
			{
				compareWriter.println(sql_BrokerId+","+sql_Party_Id+","+api_PartyId+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Position+","+api_Position+","+sql_ContactName+","+api_ContactName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_Postcode+","+sql_BrokerReference+","+"Test case is passed")
				log.info "Broker details are matching successfully, Hence test case is passed"
				break;
			}
			else
			{
				compareWriter.println(sql_BrokerId+","+sql_Party_Id+","+api_PartyId+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Position+","+api_Position+","+sql_ContactName+","+api_ContactName+","+sql_EmailAddress+","+api_EmailAddress+","+api_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_PostCode+","+api_Postcode+","+sql_BrokerReference+","+"Test case is Failed")
				log.info "Broker details are not matching, Hence test case is failed"
				break;
			}
		}
	}

	
	
	
	counter=counter+1
	log.info "Number of records verified are : "+counter
}

public String removeBracketAndComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
		field = field.replaceAll("\\s","")
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************End of Script for Broker By Broker Id By Contact ************"
log.info "************Execution Ended at "+newDateTimeString+"************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>brokerId</con:name><con:value>1217</con:value></con:property></con:properties></con:testCase><con:testCase id="39e6a31f-808d-4207-9678-c0df93399b0b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_BrokerByBrokerId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="BrkByBrkId" id="eb076d74-0e6a-4a5d-b6ab-e9dafd61325f"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/brokers/${#TestCase#brokerId}" methodName="BrokerByBrokerId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BrkByBrkId" id="ac696e82-1f4b-4722-aeee-9f9aa6f84602" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/brokers/1289</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="BrokerByBrokerId" id="d8598c9b-cb57-4575-8c29-680ffd1ee450" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")

String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Broker By Broker Id ************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
		"""
		USE TOM
		SELECT 
		TOP 150
		B.Id as Broker_Id, B.reference, P.id as Party_Id, P.CrmIdentifier, P.IsOrganisation, P.OrganisationName, P.Salutation, P.FirstName, P.MiddleName, 
		P.LastName, B.BrokerGroup_Id,P.OrganisationName as Name, P.SearchName,  p.EmailAddress, p.Telephone, p.Fax, ADR.Id as Address_Id, 
		ADR.Name as AddressName, ADR.Line1, ADR.Line2, ADR.Line3,ADR.City, ADR.StateOrProvince,ADR.Country_Id,C.Name as Country, ADR.Postcode 
		from Broker B 
		left join Party P on P.Id =B.Party_Id 
		left join BrokerGroup BRG on BRG.ID=B.BrokerGroup_Id 
		left join Address ADR on ADR.Party_Id = B.Party_Id 
		left join ref_Country C on C.Id = ADR.Country_Id 
		order by 1 desc
		"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
	
//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_BrokerByBrokerId.csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_BrokerByBrokerId.csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_BrokerByBrokerId.csv"]

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_BrokerByBrokerId"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_BrokerByBrokerId"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_BrokerByBrokerId"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()
				
sqlWriter.println("SQL_BrokerID"+","+"SQL_BrokerReference"+","+"SQL_PartyId"+","+"SQL_PartyCrmIdentifier"+","+"SQL_IsOrganisation"+","+"SQL_OrganisationName"+","+"SQL_Salutation"+","+"SQL_FirstName"+","+"SQL_MiddleName"+","+"SQL_LastName"+","+"SQL_Name"+","+"SQL_SearchName"+","+"SQL_EmailAddress"+","+"SQL_Telephone"+","+"SQL_Fax"+","+"SQL_AddressId"+","+"SQL_AddressName"+","+"SQL_AddressLine1"+","+"SQL_AddressLine2"+","+"SQL_AddressLine3"+","+"SQL_City"+","+"SQL_State"+","+"SQL_Country"+","+"SQL_Postcode"+","+"SQL_IsPrimaryAddress")
apiWriter.println("API_BrokerID"+","+"API_BrokerReference"+","+"API_PartyId"+","+"API_PartyCrmIdentifier"+","+"API_IsOrganisation"+","+"API_OrganisationName"+","+"API_Salutation"+","+"API_FirstName"+","+"API_MiddleName"+","+"API_LastName"+","+"API_Name"+","+"API_SearchName"+","+"API_EmailAddress"+","+"API_Telephone"+","+"API_Fax"+","+"API_AddressId"+","+"API_AddressName"+","+"API_AddressLine1"+","+"API_AddressLine2"+","+"API_AddressLine3"+","+"API_City"+","+"API_State"+","+"API_Country"+","+"API_Postcode"+","+"API_IsPrimaryAddress")
compareWriter.println("SQL_BrokerID"+","+"API_BrokerID"+","+"SQL_BrokerReference"+","+"API_BrokerReference"+","+"SQL_PartyId"+","+"API_PartyId"+","+"SQL_PartyCrmIdentifier"+","+"API_PartyCrmIdentifier"+","+"SQL_IsOrganisation"+","+"API_IsOrganisation"+","+"SQL_OrganisationName"+","+"API_OrganisationName"+","+"SQL_Salutation"+","+"API_Salutation"+","+"SQL_FirstName"+","+"API_FirstName"+","+"SQL_MiddleName"+","+"API_MiddleName"+","+"SQL_LastName"+","+"API_LastName"+","+"SQL_Name"+","+"API_Name"+","+"SQL_SearchName"+","+"API_SearchName"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_Telephone"+","+"API_Telephone"+","+"SQL_Fax"+","+"API_Fax"+","+"SQL_AddressId"+","+"API_AddressId"+","+"SQL_AddressName"+","+"API_AddressName"+","+"SQL_AddressLine1"+","+"API_AddressLine1"+","+"SQL_AddressLine2"+","+"API_AddressLine2"+","+"SQL_AddressLine3"+","+"API_AddressLine3"+","+"SQL_City"+","+"API_City"+","+"SQL_State"+","+"API_State"+","+"SQL_Country"+","+"API_Country"+","+"SQL_Postcode"+","+"API_Postcode"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0
String field=null

con.eachRow(sqlstmt)
{	
	row -> 
	sql_BrokerId=row.Broker_Id
	sql_BrokerReference=row.reference
	sql_PartyId=row.Party_Id
	sql_CrmIdentifier=row.CrmIdentifier
	sql_IsOrganisation=row.IsOrganisation
	sql_OrganisationName=row.OrganisationName
	field =sql_OrganisationName
	sql_OrganisationName=removeBracketAndComma(field)
	
	sql_Salutation=row.Salutation
	sql_FirstName=row.FirstName
	sql_MiddleName=row.MiddleName
	sql_LastName=row.LastName
	sql_BrokerGroupId=row.BrokerGroup_Id
	sql_Name=row.Name
	field =sql_Name
	sql_Name=removeBracketAndComma(field)

	sql_SearchName=row.SearchName
	field =sql_SearchName
	sql_SearchName=removeBracketAndComma(field)
	
	sql_EmailAddress=row.EmailAddress
	sql_Telephone=row.Telephone
	sql_Fax=row.Fax
	sql_AddressId=row.Address_Id
	sql_AddressName=row.AddressName
	field =sql_AddressName
	sql_AddressName=removeBracketAndComma(field)
	
	sql_Line1=row.Line1
	field =sql_Line1
	sql_Line1=removeBracketAndComma(field)
	
	sql_Line2=row.Line2
	field =sql_Line2
	sql_Line2=removeBracketAndComma(field)
	
	sql_Line3=row.Line3
	field =sql_Line3
	sql_Line3=removeBracketAndComma(field)
	
	sql_City=row.City
	field =sql_City
	sql_City=removeBracketAndComma(field)
	
	sql_StateOrProvince=row.StateOrProvince
	field =sql_StateOrProvince
	sql_StateOrProvince=removeBracketAndComma(field)
	
	sql_Country=row.Country
	field =sql_Country
	sql_Country=removeBracketAndComma(field)
	
	sql_Postcode=row.Postcode
	field =sql_Postcode
	sql_Postcode=removeBracketAndComma(field)
	
	sqlWriter.println(sql_BrokerId +","+sql_BrokerReference +","+sql_PartyId+","+sql_CrmIdentifier+","+sql_IsOrganisation +","+sql_OrganisationName +","+sql_Salutation +","+sql_FirstName +","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode)
	log.info "SQL response is : "+sql_BrokerId +","+sql_BrokerReference +","+sql_PartyId+","+sql_CrmIdentifier+","+sql_IsOrganisation +","+sql_OrganisationName +","+sql_Salutation +","+sql_FirstName +","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressId+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode

	//Set the Application ID at test case level
	String brokerId = row.Broker_Id
	testRunner.testCase.setPropertyValue( "brokerId", brokerId )

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	//Run the test step to get response
	testRunner.runTestStepByName('BrkByBrkId')
	String req='${BrkByBrkId#Response}'
	response=context.expand(req)
	//log.info "API Response received is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["BrkByBrkId"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		api_BrokerId=jsonRes.id
		field =api_BrokerId
		api_BrokerId=removeBracketAndComma(field)
		
		api_BrokerReference=jsonRes.reference
		api_PartyId=jsonRes.party.id
		
		api_CrmIdentifier=jsonRes.party.crmIdentifier
		field =api_CrmIdentifier.toString()
		api_CrmIdentifier=removeBracketAndComma(field)
		
		api_IsOrganisation =jsonRes.party.isOrganisation
		api_OrganisationName =jsonRes.party.organisationName
		field =api_OrganisationName
		api_OrganisationName=removeBracketAndComma(field)
		
		api_Salutation =jsonRes.party.salutation
		api_FirstName =jsonRes.party.firstName
		api_MiddleName=jsonRes.party.middleName
		api_LastName=jsonRes.party.lastName
		api_Name=jsonRes.party.name
		field =api_Name
		api_Name=removeBracketAndComma(field)
		
		api_SearchName=jsonRes.party.searchName
		field =api_SearchName
		api_SearchName=removeBracketAndComma(field)
	
		api_EmailAddress=jsonRes.party.emailAddress
		api_Telephone=jsonRes.party.telephone
		api_Fax=jsonRes.party.fax
		
		api_AddressId=jsonRes.party.addresses.id
		field =api_AddressId
		api_AddressId=removeBracketAndComma(field)
		
		api_AddressName=jsonRes.party.addresses.addressName
		field =api_AddressName
		api_AddressName=removeBracketAndComma(field)
		
		api_Line1=jsonRes.party.addresses.addressLine1
		field =api_Line1
		api_Line1=removeBracketAndComma(field)
		
		api_Line2=jsonRes.party.addresses.addressLine2
		field =api_Line2
		api_Line2=removeBracketAndComma(field)
		
		api_Line3=jsonRes.party.addresses.addressLine3
		field =api_Line3
		api_Line3=removeBracketAndComma(field)
		
		api_City=jsonRes.party.addresses.city
		field =api_City
		api_City=removeBracketAndComma(field)
		
		api_StateOrProvince=jsonRes.party.addresses.state
		field =api_StateOrProvince
		api_StateOrProvince=removeBracketAndComma(field)
		
		api_Country=jsonRes.party.addresses.country
		field =api_Country
		api_Country=removeBracketAndComma(field)
		
		api_Postcode=jsonRes.party.addresses.postalCode
		field =api_Postcode
		api_Postcode=removeBracketAndComma(field)
	
		apiWriter.println(api_BrokerId+","+api_BrokerReference+","+api_PartyId+","+api_CrmIdentifier+","+api_IsOrganisation +","+api_OrganisationName +","+api_Salutation +","+api_FirstName +","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode)
		log.info "API response received as :"+api_BrokerId+","+api_BrokerReference+","+api_PartyId+","+api_CrmIdentifier+","+api_IsOrganisation +","+api_OrganisationName +","+api_Salutation +","+api_FirstName +","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode
	
		//if (api_BrokerId.equals(sql_BrokerId) && api_CrmIdentifier.toString().toUpperCase().equals(sql_CrmIdentifier.toString().toUpperCase()) && api_OrganisationName.toString().toUpperCase().equals(sql_OrganisationName.toString().toUpperCase()) && api_Name.toString().toUpperCase().equals(sql_Name.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && api_Telephone.equals(sql_Telephone) && api_Fax.equals(sql_Fax) && api_AddressName.toString().toUpperCase().equals(sql_AddressName.toString().toUpperCase()) && api_Line1.toString().toUpperCase().equals(sql_Line1.toString().toUpperCase())&& api_Line2.toString().toUpperCase().equals(sql_Line2.toString().toUpperCase()) && api_Line3.toString().toUpperCase().equals(sql_Line3.toString().toUpperCase()) && api_City.toString().toUpperCase().equals(sql_City.toString().toUpperCase()) && api_StateOrProvince.toString().toUpperCase().equals(sql_StateOrProvince.toString().toUpperCase()))
		if(api_BrokerId.toString().equals(sql_BrokerId.toString()) && api_BrokerReference.toString().equals(sql_BrokerReference.toString()) && api_PartyId.toString().equals(sql_PartyId.toString()) && api_CrmIdentifier.toString().toUpperCase().equals(sql_CrmIdentifier.toString().toUpperCase()) && api_OrganisationName.toString().toUpperCase().equals(sql_OrganisationName.toString().toUpperCase()) && api_Salutation.toString().toUpperCase().equals(sql_Salutation.toString().toUpperCase()) && api_FirstName.toString().toUpperCase().equals(sql_FirstName.toString().toUpperCase()) && api_MiddleName.toString().toUpperCase().equals(sql_MiddleName.toString().toUpperCase()) && api_LastName.toString().toUpperCase().equals(sql_LastName.toString().toUpperCase()) && api_Name.toString().toUpperCase().equals(sql_Name.toString().toUpperCase()) && api_SearchName.toString().toUpperCase().equals(sql_SearchName.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && api_Telephone.toString().equals(sql_Telephone.toString()) && api_Fax.toString().equals(sql_Fax.toString()) && api_AddressId.toString().equals(sql_AddressId.toString()) && api_AddressName.toString().toUpperCase().equals(sql_AddressName.toString().toUpperCase()) && api_Line1.toString().toUpperCase().equals(sql_Line1.toString().toUpperCase()) && api_Line2.toString().toUpperCase().equals(sql_Line2.toString().toUpperCase()) && api_Line3.toString().toUpperCase().equals(sql_Line3.toString().toUpperCase()) && api_City.toString().toUpperCase().equals(sql_City.toString().toUpperCase()) && api_StateOrProvince.toString().toUpperCase().equals(sql_StateOrProvince.toString().toUpperCase()) && api_Country.toString().toUpperCase().equals(sql_Country.toString().toUpperCase()) && api_Postcode.toString().toUpperCase().equals(sql_Postcode.toString().toUpperCase()))
		{
			compareWriter.println(sql_BrokerId+","+api_BrokerId+","+sql_BrokerReference+","+api_BrokerReference+","+sql_PartyId+","+api_PartyId+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_IsOrganisation +","+api_IsOrganisation +","+sql_OrganisationName +","+api_OrganisationName +","+sql_Salutation +","+api_Salutation +","+sql_FirstName +","+api_FirstName +","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_Name+","+api_Name+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+"Test case is passed")
			log.info "Details are matching successfully, Hence test case is passed"
		}
		else
		{
			compareWriter.println(sql_BrokerId+","+api_BrokerId+","+sql_BrokerReference+","+api_BrokerReference+","+sql_PartyId+","+api_PartyId+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_IsOrganisation +","+api_IsOrganisation +","+sql_OrganisationName +","+api_OrganisationName +","+sql_Salutation +","+api_Salutation +","+sql_FirstName +","+api_FirstName +","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_Name+","+api_Name+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_AddressId+","+api_AddressId+","+sql_AddressName+","+api_AddressName+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+"Test case is failed")
			log.info "Details are not matching, Hence test case is failed"
		}	
	}
	counter=counter+1
	log.info "Number of records verified are : "+counter
	
}

public String removeBracketAndComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************End of Script for Broker By Broker Id************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>brokerId</con:name><con:value>1169</con:value></con:property></con:properties></con:testCase><con:testCase id="c4ae5d0a-dca8-4553-890a-443e904ca35a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_BrokersByBrokersReference" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="BrkByBrkReference" id="3968e450-044a-4e1e-8135-e4b0b0589580"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/brokers/" methodName="BrokersByBrokersReference" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BrkByBrkReference" id="b880e907-63d4-4320-8376-6a1387fd5004" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/brokers/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="reference" value="${#TestCase#brokerReference}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>reference</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="BrokerByBrokerReference" id="7c0f073f-520f-4350-a7bd-3261c4b4907e" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Broker By Broker Reference************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
		"""
		USE TOM
		SELECT
		TOP 100
		B.Id as Broker_Id, B.reference as BrokerReference, P.id as Party_Id, P.CrmIdentifier, P.OrganisationName, 
		P.Salutation, P.FirstName, P.MiddleName, P.LastName, P.SearchName, 
		p.EmailAddress, p.Telephone, p.Fax, ADR.Id as Address_Id, ADR.Name as AddressName, ADR.Line1, ADR.Line2, ADR.Line3,ADR.City, 
		 ADR.StateOrProvince,C.Name as Country, ADR.Postcode
		from Broker B
		left join Party P on P.Id =B.Party_Id
		left join BrokerGroup BRG on BRG.ID=B.BrokerGroup_Id
		left join Address ADR on ADR.Party_Id = B.Party_Id
		left join ref_Country C on C.Id = ADR.Country_Id
		order by 2 desc
		"""

def rows=con.rows(sqlstmt)  
int db_size=rows.size

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_BrokerByBrokerReference.csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_BrokerByBrokerReference.csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_BrokerByBrokerReference.csv"]

def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_BrokerByBrokerReference"+newDateTimeString+".csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_BrokerByBrokerReference"+newDateTimeString+".csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_BrokerByBrokerReference"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_Broker_Id"+","+"SQL_BrokerReference"+","+"SQL_Party_Id"+","+"SQL_CrmIdentifier"+","+"SQL_OrganisationName"+","+"SQL_Salutation"+","+"SQL_FirstName"+","+"SQL_MiddleName"+","+"SQL_LastName"+","+"SQL_SearchName"+","+"SQL_EmailAddress"+","+"SQL_Telephone"+","+"SQL_Fax"+","+"SQL_Address_Id"+","+"SQL_AddressName"+","+"SQL_Line1"+","+"SQL_Line2"+","+"SQL_Line3"+","+"SQL_City"+","+"SQL_StateOrProvince"+","+"SQL_Country"+","+"SQL_Postcode")
apiWriter.println("API_Broker_Id"+","+"API_BrokerReference"+","+"API_Party_Id"+","+"API_CrmIdentifier"+","+"API_OrganisationName"+","+"API_Salutation"+","+"API_FirstName"+","+"API_MiddleName"+","+"API_LastName"+","+"API_SearchName"+","+"API_EmailAddress"+","+"API_Telephone"+","+"API_Fax"+","+"API_Address_Id"+","+"API_AddressName"+","+"API_Line1"+","+"API_Line2"+","+"API_Line3"+","+"API_City"+","+"API_StateOrProvince"+","+"API_Country"+","+"API_Postcode")
compareWriter.println("SQL_Broker_Id"+","+"API_Broker_Id"+","+"SQL_BrokerReference"+","+"API_BrokerReference"+","+"SQL_Party_Id"+","+"API_Party_Id"+","+"SQL_CrmIdentifier"+","+"API_CrmIdentifier"+","+"SQL_OrganisationName"+","+"API_OrganisationName"+","+"SQL_Salutation"+","+"API_Salutation"+","+"SQL_FirstName"+","+"API_FirstName"+","+"SQL_MiddleName"+","+"API_MiddleName"+","+"SQL_LastName"+","+"API_LastName"+","+"SQL_SearchName"+","+"API_SearchName"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_Telephone"+","+"API_Telephone"+","+"SQL_Fax"+","+"API_Fax"+","+"SQL_Address_Id"+","+"API_Address_Id"+","+"SQL_AddressName"+","+"API_AddressName"+","+"SQL_Line1"+","+"API_Line1"+","+"SQL_Line2"+","+"API_Line2"+","+"SQL_Line3"+","+"API_Line3"+","+"SQL_City"+","+"API_City"+","+"SQL_StateOrProvince"+","+"API_StateOrProvince"+","+"SQL_Country"+","+"API_Country"+","+"SQL_Postcode"+","+"API_Postcode"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;
String apiField=null;

con.eachRow(sqlstmt)
{	
	row ->
	sql_Broker_Id=row.Broker_Id
	apiField=sql_Broker_Id
	sql_Broker_Id=removeBrackets(apiField)
	
	sql_BrokerReference=row.BrokerReference
	apiField=sql_BrokerReference
	sql_BrokerReference=removeBrackets(apiField)
	
	sql_Party_Id=row.Party_Id
	apiField=sql_Party_Id
	sql_Party_Id=removeBrackets(apiField)
	
	sql_CrmIdentifier=row.CrmIdentifier
	apiField=sql_CrmIdentifier
	sql_CrmIdentifier=removeBrackets(apiField)
	
	sql_OrganisationName=row.OrganisationName
	apiField=sql_OrganisationName
	sql_OrganisationName=removeBrackets(apiField)
	
	sql_Salutation=row.Salutation
	apiField=sql_Salutation
	sql_Salutation=removeBrackets(apiField)
	
	sql_FirstName=row.FirstName
	apiField=sql_FirstName
	sql_FirstName=removeBrackets(apiField)
	
	sql_MiddleName=row.MiddleName
	apiField=sql_MiddleName
	sql_MiddleName=removeBrackets(apiField)
	
	sql_LastName=row.LastName
	apiField=sql_LastName
	sql_LastName=removeBrackets(apiField)
	
	sql_SearchName=row.SearchName
	apiField=sql_SearchName
	sql_SearchName=removeBrackets(apiField)
	
	sql_EmailAddress=row.EmailAddress
	apiField=sql_EmailAddress
	sql_EmailAddress=removeBrackets(apiField)
	
	sql_Telephone=row.Telephone
	apiField=sql_Telephone
	sql_Telephone=removeBrackets(apiField)
	
	sql_Fax=row.Fax
	apiField=sql_Fax
	sql_Fax=removeBrackets(apiField)
	
	sql_Address_Id=row.Address_Id
	apiField=sql_Address_Id
	sql_Address_Id=removeBrackets(apiField)
	
	sql_AddressName=row.AddressName
	apiField=sql_AddressName
	sql_AddressName=removeBrackets(apiField)
	
	sql_Line1=row.Line1
	apiField=sql_Line1
	sql_Line1=removeBrackets(apiField)
	
	sql_Line2=row.Line2
	apiField=sql_Line2
	sql_Line2=removeBrackets(apiField)
	
	sql_Line3=row.Line3
	apiField=sql_Line3
	sql_Line3=removeBrackets(apiField)
	
	sql_City=row.City
	apiField=sql_City
	sql_City=removeBrackets(apiField)
	
	sql_StateOrProvince=row.StateOrProvince
	apiField=sql_StateOrProvince
	sql_StateOrProvince=removeBrackets(apiField)
	
	sql_Country=row.Country
	apiField=sql_Country
	sql_Country=removeBrackets(apiField)
	
	sql_Postcode=row.Postcode
	apiField=sql_Postcode
	sql_Postcode=removeBrackets(apiField)
	
	sqlWriter.println(sql_Broker_Id+","+sql_BrokerReference+","+sql_Party_Id+","+sql_CrmIdentifier+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_Address_Id+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode)
	log.info "SQL Response received as :"+sql_Broker_Id+","+sql_BrokerReference+","+sql_Party_Id+","+sql_CrmIdentifier+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_Address_Id+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode

	//Set the Broker Reference at test case level
	String brokerReference = sql_BrokerReference
	testRunner.testCase.setPropertyValue( "brokerReference", brokerReference)
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue( "token", token)
	
	testRunner.runTestStepByName('BrkByBrkReference')
	String req='${BrkByBrkReference#Response}'
	response=context.expand(req)
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["BrkByBrkReference"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		int jsonRecordCount = jsonRes.totalRecords
		for (int i=0; i<jsonRecordCount; i++)
		{
			newId = jsonRes.results.id[i]
			if(sql_Broker_Id.toString().equals(newId.toString()))
			{
				api_BrokerId=jsonRes.results.id[i]
				apiField=api_BrokerId
				api_BrokerId=removeBrackets(apiField)
				
				api_BrokerReference=jsonRes.results.reference[i]
				apiField=api_BrokerReference
				api_BrokerReference=removeBrackets(apiField)
				
				api_PartyId=jsonRes.results.party.id[i]
				apiField=api_PartyId
				api_PartyId=removeBrackets(apiField)
				
				api_CrmIdentifier=jsonRes.results.party.crmIdentifier[i]
				apiField=api_CrmIdentifier
				api_CrmIdentifier=removeBrackets(apiField)
				
				api_OrganisationName=jsonRes.results.party.organisationName[i]
				apiField=api_OrganisationName
				api_OrganisationName=removeBrackets(apiField)
				
				api_Salutation=jsonRes.results.party.salutation[i]
				apiField=api_Salutation
				api_Salutation=removeBrackets(apiField)
				
				api_FirstName=jsonRes.results.party.firstName[i]
				apiField=api_FirstName
				api_FirstName=removeBrackets(apiField)
				
				api_MiddleName=jsonRes.results.party.middleName[i]
				apiField=api_MiddleName
				api_MiddleName=removeBrackets(apiField)
				
				api_LastName=jsonRes.results.party.lastName[i]
				apiField=api_LastName
				api_LastName=removeBrackets(apiField)
				
				api_SearchName=jsonRes.results.party.searchName[i]
				apiField=api_SearchName
				api_SearchName=removeBrackets(apiField)
				
				api_EmailAddress=jsonRes.results.party.emailAddress[i]
				apiField=api_EmailAddress
				api_EmailAddress=removeBrackets(apiField)
				
				api_Telephone=jsonRes.results.party.telephone[i]
				apiField=api_Telephone
				api_Telephone=removeBrackets(apiField)
				
				api_Fax=jsonRes.results.party.fax[i]
				apiField=api_Fax
				api_Fax=removeBrackets(apiField)
				
				api_AddressId=jsonRes.results.party.addresses.id[i]
				apiField=api_AddressId
				api_AddressId=removeBrackets(apiField)
				
				api_Name=jsonRes.results.party.addresses.addressName[i]
				apiField=api_Name
				api_Name=removeBrackets(apiField)
				
				api_Line1=jsonRes.results.party.addresses.addressLine1[i]
				apiField=api_Line1
				api_Line1=removeBrackets(apiField)
				
				api_Line2=jsonRes.results.party.addresses.addressLine2[i]
				apiField=api_Line2
				api_Line2=removeBrackets(apiField)
				
				api_Line3=jsonRes.results.party.addresses.addressLine3[i]
				apiField=api_Line3
				api_Line3=removeBrackets(apiField)
				
				api_City=jsonRes.results.party.addresses.city[i]
				apiField=api_City
				api_City=removeBrackets(apiField)
				
				api_StateOrProvince=jsonRes.results.party.addresses.state[i]
				apiField=api_StateOrProvince
				api_StateOrProvince=removeBrackets(apiField)
				
				api_Country=jsonRes.results.party.addresses.country[i]
				apiField=api_Country
				api_Country=removeBrackets(apiField)
				
				api_Postcode=jsonRes.results.party.addresses.postalCode[i]
				apiField=api_Postcode
				api_Postcode=removeBrackets(apiField)
				
				apiWriter.println(api_BrokerId+","+api_BrokerReference+","+api_PartyId+","+api_CrmIdentifier+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_Name+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode)
				log.info "API Response received as : "+api_BrokerId+","+api_BrokerReference+","+api_PartyId+","+api_CrmIdentifier+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressId+","+api_Name+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode
				
				if (api_BrokerId.toString().equals(sql_Broker_Id.toString()) && api_BrokerReference.toString().equals(sql_BrokerReference.toString()) && api_PartyId.toString().equals(sql_Party_Id.toString()) && api_CrmIdentifier.toString().toUpperCase().equals(sql_CrmIdentifier.toString().toUpperCase()) && api_OrganisationName.toString().toUpperCase().equals(sql_OrganisationName.toString().toUpperCase()) && api_Salutation.toString().toUpperCase().equals(sql_Salutation.toString().toUpperCase()) && api_FirstName.toString().toUpperCase().equals(sql_FirstName.toString().toUpperCase()) && api_MiddleName.toString().toUpperCase().equals(sql_MiddleName.toString().toUpperCase()) && api_LastName.toString().toUpperCase().equals(sql_LastName.toString().toUpperCase()) && api_SearchName.toString().toUpperCase().equals(sql_SearchName.toString().toUpperCase()) && api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && api_Telephone.toString().equals(sql_Telephone.toString()) && api_Fax.toString().equals(sql_Fax.toString()) && api_AddressId.toString().equals(sql_Address_Id.toString()) && api_Name.toString().toUpperCase().equals(sql_AddressName.toString().toUpperCase()) && api_Line1.toString().toUpperCase().equals(sql_Line1.toString().toUpperCase()) && api_Line2.toString().toUpperCase().equals(sql_Line2.toString().toUpperCase()) && api_Line3.toString().toUpperCase().equals(sql_Line3.toString().toUpperCase()) && api_City.toString().toUpperCase().equals(sql_City.toString().toUpperCase()) && api_StateOrProvince.toString().toUpperCase().equals(sql_StateOrProvince.toString().toUpperCase()) && api_Country.toString().toUpperCase().equals(sql_Country.toString().toUpperCase()) && api_Postcode.toString().toUpperCase().equals(sql_Postcode.toString().toUpperCase()))
				{
					compareWriter.println(sql_Broker_Id+","+api_BrokerId+","+sql_BrokerReference+","+api_BrokerReference+","+sql_Party_Id+","+api_PartyId+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Salutation+","+api_Salutation+","+sql_FirstName+","+api_FirstName+","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_Address_Id+","+api_AddressId+","+sql_AddressName+","+api_Name+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+"Test Case Passed")
					log.info ("Details are matching hence test case is passed.")
				}
				else
				{
					compareWriter.println(sql_Broker_Id+","+api_BrokerId+","+sql_BrokerReference+","+api_BrokerReference+","+sql_Party_Id+","+api_PartyId+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Salutation+","+api_Salutation+","+sql_FirstName+","+api_FirstName+","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_Address_Id+","+api_AddressId+","+sql_AddressName+","+api_Name+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+"Test Case Failed")
					log.info ("Details are not matching hence test case is failed.")
				}
			}
		}
	}
	else
	{
		compareWriter.println(sql_Broker_Id+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+","+"Test Case failed")
		log.info ("Details are not matching hence test case is failed.")
	}
	counter=counter+1
	log.info "Number of records verified are : "+counter
}

public String removeBrackets(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if (field.contains(","))
		{
			field=field.replace(",","")
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Broker By Broker Reference************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>brokerReference</con:name><con:value>6190</con:value></con:property></con:properties></con:testCase><con:testCase id="3660f907-3982-4027-8026-a3e002d35b9c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_MemberByMemberIdByRisks" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="MemByMemIdByRisks" id="02a63766-ae77-43c8-b963-713701154348"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/members/${#TestCase#memberId}/risks" methodName="MemberByMemberIdByRisks" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="MemByMemIdByRisks" id="fe2bf82e-4c43-4040-beb0-a65e8b74a4cb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/members/44904/risks</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="MemberByMemberIdByRisks" id="7b59acd7-22c5-4f20-ad2b-e84a2ca47d4c" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution execution strted for Member By Member Id By Risk ************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt="""
			USE TOM
			SELECT 
			TOP 100
			AR.Id as ApplicationRiskId, RV.Id as RiskVesselId, R.Reference as RiskReference, AMA.MemberAssured_Id as MemberId, MA.Reference,
			P.OrganisationName,
			AB.Id as ApplicationID, Ab.Reference as ApplicationReference, AB.Discriminator, [User].EmailAddress,
			R.Name as VesselName, RV.CallSign, RV.ImoNumber, Rv.GrossTonnage, RV.YearBuilt, VT.Name as VesselType, con.ShortCode as FlagCountryCode, 
			con.Name as FlagCountryName, RP.ShortCode as PortOfRegistryCode, RP.Name as PortOfRegistryName, RST.Name as RiskCategoryName, 
			RV.EngineHorsePower, RV.TrademarkEngineModelNumber
			from ApplicationBase AB
			join ApplicationMemberAssured AMA on AMA.Application_Id=AB.Id
			join ApplicationRisk AR on AR.ApplicationMemberAssured_Id=AMA.Id
			join Risk R on R.Id = AR.Risk_Id
			join RiskVessel RV on RV.Id = R.Id
			join [user] on AB.Underwriter_Id = [User].Id
			join ref_VesselType VT on VT.Id=RV.Type_Id
			left join ref_Port RP on RP.Id = RV.PortOfRegistry_Id
			join ref_RiskSubType RST on RST.Id = RV.Category_Id
			left join ref_Country Con on Con.id = RV.Flag_Id
			left join MemberAssured MA on AMA.MemberAssured_Id=MA.Id
			inner join Party P on P.Id=MA.Party_Id
			where 
			AB.Reference NOT in (
			select AB.Reference from ApplicationBase AB 
			join ApplicationMemberAssured AMA on AMA.Application_Id =AB.Id 
			where AB.Discriminator in ('RenewalQuote')) and AB.Discriminator='Policy'
			order by 4 desc
"""
def rows=con.rows(sqlstmt) 
int db_size=rows.size

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
	
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_MemberByMemberIdByRisk.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_MemberByMemberIdByRisk.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_MemberByMemberIdByRisk.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_MemberByMemberIdByRisk"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_MemberByMemberIdByRisk"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_MemberByMemberIdByRisk"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()
				
sqlWriter.println("SQL_ApplicationRiskId"+","+"SQL_RiskVesselId"+","+"SQL_RiskReference"+","+"SQL_MemberId"+","+"SQL_Reference"+","+"SQL_OrganisationName"+","+"SQL_ApplicationID"+","+"SQL_ApplicationReference"+","+"SQL_Discriminator"+","+"SQL_EmailAddress"+","+"SQL_ImoNumber"+","+"SQL_VesselName"+","+"SQL_VesselType"+","+"SQL_CallSign"+","+"SQL_GrossTonnage"+","+"SQL_YearBuilt"+","+"SQL_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"SQL_EngineHorsePower"+","+"SQL_TrademarkEngineModelNumber")
apiWriter.println("API_ApplicationRiskId"+","+"API_RiskVesselId"+","+"API_RiskReference"+","+"API_MemberId"+","+"API_Reference"+","+"API_OrganisationName"+","+"API_ApplicationID"+","+"API_ApplicationReference"+","+"API_Discriminator"+","+"API_EmailAddress"+","+"API_ImoNumber"+","+"API_VesselName"+","+"API_VesselType"+","+"API_CallSign"+","+"API_GrossTonnage"+","+"API_YearBuilt"+","+"API_FlagCountryCode"+","+"API_FlagCountryName"+","+"API_PortOfRegistryCode"+","+"API_PortOfRegistryName"+","+"API_RiskCategoryName"+","+"API_EngineHorsePower"+","+"API_TrademarkEngineModelNumber")
compareWriter.println("SQL_ApplicationRiskId"+","+"API_ApplicationRiskId"+","+"SQL_RiskVesselId"+","+"API_RiskVesselId"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_Reference"+","+"API_Reference"+","+"SQL_OrganisationName"+","+"API_OrganisationName"+","+"SQL_ApplicationID"+","+"API_ApplicationID"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_Discriminator"+","+"API_Discriminator"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_ImoNumber"+","+"API_ImoNumber"+","+"SQL_VesselName"+","+"API_VesselName"+","+"SQL_VesselType"+","+"API_VesselType"+","+"SQL_CallSign"+","+"API_CallSign"+","+"SQL_GrossTonnage"+","+"API_GrossTonnage"+","+"SQL_YearBuilt"+","+"API_YearBuilt"+","+"SQL_FlagCountryCode"+","+"API_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"API_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"API_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"API_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"API_RiskCategoryName"+","+"SQL_EngineHorsePower"+","+"API_EngineHorsePower"+","+"SQL_TrademarkEngineModelNumber"+","+"API_TrademarkEngineModelNumber"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
String field=null
int counter=0;

con.eachRow(sqlstmt)
{	
	row -> 
		sql_ApplicationRiskId=row.ApplicationRiskId
		field=sql_ApplicationRiskId
		sql_ApplicationRiskId=removeCommaAndBrackets(field)
					
		sql_RiskVesselId=row.RiskVesselId
		field=sql_RiskVesselId
		sql_RiskVesselId=removeCommaAndBrackets(field)
		
		sql_RiskReference=row.RiskReference
		field=sql_RiskReference
		sql_RiskReference=removeCommaAndBrackets(field)
		
		sql_MemberId=row.MemberId
		field=sql_MemberId
		sql_MemberId=removeCommaAndBrackets(field)
		
		sql_Reference=row.Reference
		field=sql_Reference
		sql_Reference=removeCommaAndBrackets(field)
		
		sql_OrganisationName=row.OrganisationName
		field=sql_OrganisationName
		sql_OrganisationName=removeCommaAndBrackets(field)
		
		sql_ApplicationID=row.ApplicationID
		field=sql_ApplicationID
		sql_ApplicationID=removeCommaAndBrackets(field)
		
		sql_ApplicationReference=row.ApplicationReference
		field=sql_ApplicationReference
		sql_ApplicationReference=removeCommaAndBrackets(field)
		
		sql_Discriminator=row.Discriminator
		field=sql_Discriminator
		sql_Discriminator=removeCommaAndBrackets(field)
		
		sql_EmailAddress=row.EmailAddress
		field=sql_EmailAddress
		sql_EmailAddress=removeCommaAndBrackets(field)
		
		sql_ImoNumber=row.ImoNumber
		field=sql_ImoNumber
		sql_ImoNumber=removeCommaAndBrackets(field)
		
		sql_VesselName=row.VesselName
		field=sql_VesselName
		sql_VesselName=removeCommaAndBrackets(field)
		
		sql_VesselType=row.VesselType
		field=sql_VesselType
		sql_VesselType=removeCommaAndBrackets(field)
		
		sql_CallSign=row.CallSign
		field=sql_CallSign
		sql_CallSign=removeCommaAndBrackets(field)
		
		sql_GrossTonnage=row.GrossTonnage
		field=sql_GrossTonnage
		sql_GrossTonnage=removeCommaAndBrackets(field)
		
		sql_YearBuilt=row.YearBuilt
		field=sql_YearBuilt
		sql_YearBuilt=removeCommaAndBrackets(field)
		
		sql_FlagCountryCode=row.FlagCountryCode
		field=sql_FlagCountryCode
		sql_FlagCountryCode=removeCommaAndBrackets(field)
		
		sql_FlagCountryName=row.FlagCountryName
		field=sql_FlagCountryName
		sql_FlagCountryName=removeCommaAndBrackets(field)
		
		sql_PortOfRegistryCode=row.PortOfRegistryCode
		field=sql_PortOfRegistryCode
		sql_PortOfRegistryCode=removeCommaAndBrackets(field)
		
		sql_PortOfRegistryName=row.PortOfRegistryName
		field=sql_PortOfRegistryName
		sql_PortOfRegistryName=removeCommaAndBrackets(field)
		
		sql_RiskCategoryName=row.RiskCategoryName
		field=sql_RiskCategoryName
		sql_RiskCategoryName=removeCommaAndBrackets(field)
		
		sql_EngineHorsePower=row.EngineHorsePower
		field=sql_EngineHorsePower
		sql_EngineHorsePower=removeCommaAndBrackets(field)
		
		sql_TrademarkEngineModelNumber=row.TrademarkEngineModelNumber
		field=sql_TrademarkEngineModelNumber
		sql_TrademarkEngineModelNumber=removeCommaAndBrackets(field)
		
		sqlWriter.println(sql_ApplicationRiskId+","+sql_RiskVesselId+","+sql_RiskReference+","+sql_MemberId+","+sql_Reference+","+sql_OrganisationName+","+sql_ApplicationID+","+sql_ApplicationReference+","+sql_Discriminator+","+sql_EmailAddress+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber)
		log.info "SQL Response received as : "+sql_ApplicationRiskId+","+sql_RiskVesselId+","+sql_RiskReference+","+sql_MemberId+","+sql_Reference+","+sql_OrganisationName+","+sql_ApplicationID+","+sql_ApplicationReference+","+sql_Discriminator+","+sql_EmailAddress+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber

		//Set the Application ID at test case level
		String memberId=sql_MemberId
		testRunner.testCase.setPropertyValue("memberId", memberId)

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)

		//Run the test step to get response
		testRunner.runTestStepByName("MemByMemIdByRisks")
		String req='${MemByMemIdByRisks#Response}'
		response=context.expand(req)
		//log.info "API Response received is :"+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		
	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["MemByMemIdByRisks"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		int count =  jsonRes.totalRecords
		for (int i=0; i<count; i++)
		{
			String newId= jsonRes.results.memberId[i]
			newId=removeCommaAndBrackets(newId)
			if(sql_MemberId.toString().equals(newId.toString()))
			{
				api_ApplicationRiskId= jsonRes.results.applicationRiskId[i]
				field=api_ApplicationRiskId
				api_ApplicationRiskId=removeCommaAndBrackets(field)
				
				api_RiskVesselId= jsonRes.results.id[i]
				field=api_RiskVesselId
				api_RiskVesselId=removeCommaAndBrackets(field)
				
				api_RiskReference= jsonRes.results.reference[i]
				field=api_RiskReference
				api_RiskReference=removeCommaAndBrackets(field)
				
				api_MemberId= jsonRes.results.memberId[i]
				field=api_MemberId
				api_MemberId=removeCommaAndBrackets(field)
				
				api_Reference= jsonRes.results.memberReference[i]
				field=api_Reference
				api_Reference=removeCommaAndBrackets(field)
				
				api_OrganisationName= jsonRes.results.memberName[i]
				field=api_OrganisationName
				api_OrganisationName=removeCommaAndBrackets(field)
				
				api_ApplicationID= jsonRes.results.applicationId[i]
				field=api_ApplicationRiskId
				api_ApplicationRiskId=removeCommaAndBrackets(field)
				
				api_ApplicationReference= jsonRes.results.applicationReference[i]
				field=api_ApplicationReference
				api_ApplicationReference=removeCommaAndBrackets(field)
				
				api_ApplicationType= jsonRes.results.applicationType[i]
				field=api_ApplicationType
				api_ApplicationType=removeCommaAndBrackets(field)
				
				api_EmailAddress= jsonRes.results.applicationUnderwriterEmail[i]
				field=api_EmailAddress
				api_EmailAddress=removeCommaAndBrackets(field)
				
				api_ImoNumber= jsonRes.results.vessel.imoNumber[i]
				field=api_ImoNumber
				api_ImoNumber=removeCommaAndBrackets(field)
				
				api_VesselName= jsonRes.results.vessel.vesselName[i]
				field=api_VesselName
				api_VesselName=removeCommaAndBrackets(field)
				
				api_VesselType= jsonRes.results.vessel.vesselType[i]
				field=api_VesselType
				api_VesselType=removeCommaAndBrackets(field)
				
				api_CallSign= jsonRes.results.vessel.callSign[i]
				field=api_CallSign
				api_CallSign=removeCommaAndBrackets(field)
				
				api_GrossTonnage= jsonRes.results.vessel.grossTonnage[i]
				field=api_GrossTonnage
				api_GrossTonnage=removeCommaAndBrackets(field)
				
				api_YearBuilt= jsonRes.results.vessel.yearBuilt[i]
				field=api_YearBuilt
				api_YearBuilt=removeCommaAndBrackets(field)
				
				api_FlagCountryCode= jsonRes.results.vessel.flagCountryCode[i]
				field=api_FlagCountryCode
				api_FlagCountryCode=removeCommaAndBrackets(field)
				
				api_FlagCountryName= jsonRes.results.vessel.flagCountryName[i]
				field=api_FlagCountryName
				api_FlagCountryName=removeCommaAndBrackets(field)
				
				api_PortOfRegistryCode= jsonRes.results.vessel.portOfRegistryCode[i]
				field=api_PortOfRegistryCode
				api_PortOfRegistryCode=removeCommaAndBrackets(field)
				
				api_PortOfRegistryName= jsonRes.results.vessel.portOfRegistryName[i]
				field=api_PortOfRegistryName
				api_PortOfRegistryName=removeCommaAndBrackets(field)
				
				api_RiskCategoryName= jsonRes.results.vessel.riskCategoryName[i]
				field=api_RiskCategoryName
				api_RiskCategoryName=removeCommaAndBrackets(field)
				
				api_EngineHorsePower= jsonRes.results.vessel.engineHorsePower[i]
				field=api_EngineHorsePower
				api_EngineHorsePower=removeCommaAndBrackets(field)
				
				api_TrademarkEngineModelNumber= jsonRes.results.vessel.trademarkAndEngineModel[i]
				field=api_TrademarkEngineModelNumber
				api_TrademarkEngineModelNumber=removeCommaAndBrackets(field)
		
				//sqlWriter.println(sql_ApplicationRiskId+","+sql_RiskVesselId+","+sql_RiskReference+","+sql_MemberId+","+sql_Reference+","+sql_OrganisationName+","+sql_ApplicationID+","+sql_ApplicationReference+","+sql_Discriminator+","+sql_EmailAddress+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_GrossTonnage+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_EngineHorsePower+","+sql_TrademarkEngineModelNumber)
				apiWriter.println(api_ApplicationRiskId+","+api_RiskVesselId+","+api_RiskReference+","+api_MemberId+","+api_Reference+","+api_OrganisationName+","+api_ApplicationID+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_GrossTonnage+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_EngineHorsePower+","+api_TrademarkEngineModelNumber)
				log.info "API response received as :"+api_ApplicationRiskId+","+api_RiskVesselId+","+api_RiskReference+","+api_MemberId+","+api_Reference+","+api_OrganisationName+","+api_ApplicationID+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_GrossTonnage+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_EngineHorsePower+","+api_TrademarkEngineModelNumber			
		
				if(sql_ApplicationRiskId.toString().equals(api_ApplicationRiskId.toString()) && sql_RiskVesselId.toString().equals(api_RiskVesselId.toString()) && sql_RiskReference.toString().equals(api_RiskReference.toString()) && sql_MemberId.toString().equals(api_MemberId.toString()) && sql_Reference.toString().equals(api_Reference.toString()) && sql_OrganisationName.toString().toUpperCase().equals(api_OrganisationName.toString().toUpperCase()) && sql_ApplicationID.toString().equals(api_ApplicationID.toString()) && sql_ApplicationReference.toString().equals(api_ApplicationReference.toString()) && sql_Discriminator.toString().toUpperCase().equals(api_ApplicationType.toString().toUpperCase()) && sql_EmailAddress.toString().toUpperCase().equals(api_EmailAddress.toString().toUpperCase()) && sql_ImoNumber.toString().equals(api_ImoNumber.toString()) && sql_VesselName.toString().toUpperCase().equals(api_VesselName.toString().toUpperCase()) && sql_VesselType.toString().toUpperCase().equals(api_VesselType.toString().toUpperCase()) && sql_CallSign.toString().toUpperCase().equals(api_CallSign.toString().toUpperCase()) && sql_GrossTonnage.toString().equals(api_GrossTonnage.toString()) && sql_YearBuilt.toString().equals(api_YearBuilt.toString()) && sql_FlagCountryCode.toString().toUpperCase().equals(api_FlagCountryCode.toString().toUpperCase()) && sql_FlagCountryName.toString().toUpperCase().equals(api_FlagCountryName.toString().toUpperCase()) && sql_PortOfRegistryCode.toString().toUpperCase().equals(api_PortOfRegistryCode.toString().toUpperCase()) && sql_PortOfRegistryName.toString().toUpperCase().equals(api_PortOfRegistryName.toString().toUpperCase()) && sql_RiskCategoryName.toString().toUpperCase().equals(api_RiskCategoryName.toString().toUpperCase()) && sql_EngineHorsePower.toString().toUpperCase().equals(api_EngineHorsePower.toString().toUpperCase()) && sql_TrademarkEngineModelNumber.toString().toUpperCase().equals(api_TrademarkEngineModelNumber.toString().toUpperCase()))
				{
					compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskVesselId+","+api_RiskVesselId+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_Reference+","+api_Reference+","+sql_OrganisationName+","+api_OrganisationName+","+sql_ApplicationID+","+api_ApplicationID+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+"Test Case passed")
					log.info "Details are matching hence test case is passed"
					break;
				}
				else
				{
					compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskVesselId+","+api_RiskVesselId+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_Reference+","+api_Reference+","+sql_OrganisationName+","+api_OrganisationName+","+sql_ApplicationID+","+api_ApplicationID+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_Discriminator+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+"Test Case failed")
					log.info "Details are not matching hence test case is failed"
					break;
				}
			}
		}
	}
	counter=counter+1
	log.info "Number of records verified are : "+counter
}
public String removeCommaAndBrackets(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************End of Script for Member By Member Id By Risk ************"
log.info "************Execution Ended at "+newDateTimeString+"************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>memberId</con:name><con:value>46214</con:value></con:property></con:properties></con:testCase><con:testCase id="be21c67d-3e98-4ecb-832c-6046222900ce" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_MembersByMemberId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="MemByMemId" id="ccc8a4e0-bca1-4c85-8f27-653dd4f76fe5"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/members/${#TestCase#memberId}" methodName="MembersByMemberId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="MemByMemId" id="fe42cb94-53c5-4a23-a891-cb7ad257620c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="MembersByMemberId" id="add52f2f-75c9-4dbc-a3a8-979f5ac5c351" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", ".")
newDateTimeString=newDateTimeString.replace(":",".")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Member By Member Id ************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 

String sqlstmt=
	"""
	USE TOM
	SELECT
	TOP 200
	MA.Id, MA.Reference, MA.Party_Id, P.CrmIdentifier, P.OrganisationName, P.Salutation, P.FirstName, P.MiddleName, P.LastName, P.EmailAddress, 
	P.Telephone, P.Fax, A.Id as AddressID, A.Name, a.Line1, a.Line2,A.Line3, A.City, A.StateOrProvince, A.Country_Id, C.Name as Country, A.Postcode 
	from MemberAssured MA 
	join Party P on P.Id=MA.Party_Id 
	join Address A on A.Party_Id=P.Id 
	join ref_Country C on C.Id=A.Country_Id 
	order by 1 desc
	"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_MemberByMemberID.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_MemberByMemberID.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_MemberByMemberID.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_MemberByMemberID"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_MemberByMemberID"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_MemberByMemberID"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()
def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()
def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_MemberId"+","+"SQL_MemberReference"+","+"SQL_PartyId"+","+"SQL_CrmIdentifier"+","+"SQL_OrganisationName"+","+"SQL_Salutation"+","+"SQL_FirstName"+","+"SQL_MiddleName"+","+"SQL_LastName"+","+"SQL_EmailAddress"+","+"SQL_Telephone"+","+"SQL_Fax"+","+"SQL_AddressId"+","+"SQL_AddressName"+","+"SQL_Line1"+","+"SQL_Line2"+","+"SQL_Line3"+","+"SQL_City"+","+"SQL_StateOrProvince"+","+"SQL_CountryName"+","+"SQL_Postcode")
apiWriter.println("API_MemberId"+","+"API_MemberReference"+","+"API_PartyId"+","+"API_CrmIdentifier"+","+"API_OrganisationName"+","+"API_Salutation"+","+"API_FirstName"+","+"API_MiddleName"+","+"API_LastName"+","+"API_EmailAddress"+","+"API_Telephone"+","+"API_Fax"+","+"API_AddressId"+","+"API_AddressName"+","+"API_Line1"+","+"API_Line2"+","+"API_Line3"+","+"API_City"+","+"API_StateOrProvince"+","+"API_CountryName"+","+"API_Postcode")
compareWriter.println("SQL_memberId"+","+"API_Party_memberId"+","+"SQL_memberReference"+","+"API_Party_memberReference"+","+"SQL_partyId"+","+"API_Party_partyId"+","+"SQL_crmIdentifier"+","+"API_Party_crmIdentifier"+","+"SQL_organisationName"+","+"API_Party_organisationName"+","+"SQL_salutation"+","+"API_Party_salutation"+","+"SQL_firstName"+","+"API_Party_firstName"+","+"SQL_middleName"+","+"API_Party_middleName"+","+"SQL_lastName"+","+"API_Party_lastName"+","+"SQL_emailAddress"+","+"API_Party_emailAddress"+","+"SQL_telephone"+","+"API_Party_telephone"+","+"SQL_fax"+","+"API_Party_fax"+","+"SQL_AddressId"+","+"API_AddressId"+","+"SQL_AddressName"+","+"API_Party_AddressName"+","+"SQL_Line1"+","+"API_Party_Line1"+","+"SQL_Line2"+","+"API_Party_Line2"+","+"SQL_Line3"+","+"API_Party_Line3"+","+"SQL_City"+","+"API_Party_City"+","+"SQL_StateOrProvince"+","+"API_Party_StateOrProvince"+","+"SQL_CountryName"+","+"API_Party_CountryName"+","+"SQL_Postcode"+","+"API_Party_Postcode"+","+"Status")
String testString = null
def response= null
def jsonSlurper=null
def jsonRes=null
int counter=0

con.eachRow(sqlstmt)
{
	row ->
		sql_MemberId=row.Id
		sql_Reference=row.Reference
		sql_Party_Id=row.Party_Id
		sql_CrmIdentifier=row.CrmIdentifier
		sql_OrganisationName=row.OrganisationName
		if(sql_OrganisationName!=null)
		{
			sql_OrganisationName=sql_OrganisationName.toUpperCase();	
		}
		sql_Salutation=row.Salutation
		sql_FirstName=row.FirstName
		sql_MiddleName=row.MiddleName
		sql_LastName=row.LastName
		sql_EmailAddress=row.EmailAddress
		sql_Telephone=row.Telephone
		sql_Fax=row.Fax
		sql_AddressID=row.AddressID
		sql_AddressName=row.Name
		String sql_AddressName=sql_AddressName
		if(sql_AddressName!=null)
		{
				sql_AddressName=sql_AddressName.toUpperCase();
				if(sql_AddressName.contains(","))	
				{
					sql_AddressName=sql_AddressName.replace(","," ")
				}
		}
		else if( sql_AddressName==null)
		{
			sql_AddressName="NULL"
		}
		sql_Line1=row.Line1
		if(sql_Line1!=null)
		{
			sql_Line1=sql_Line1.toUpperCase();
			if(sql_Line1.contains(","))	
				{
					sql_Line1=sql_Line1.replace(","," ")
				}
		}
		sql_Line2=row.Line2
		if(sql_Line2!=null )
		{
			sql_Line2=sql_Line2.toUpperCase();
			if(sql_Line2.contains(","))	
				{
					sql_Line2=sql_Line2.replace(","," ")	
				}
		}
		sql_Line3=row.Line3
		if(sql_Line3!=null)
		{
			sql_Line3=sql_Line3.toUpperCase();
			if(sql_Line3.contains(","))	
				{
					sql_Line3=sql_Line3.replace(","," ")	
				}
		}
		sql_City=row.City
		if(sql_City!=null)
		{
			sql_City=sql_City.toUpperCase();
			if(sql_City.contains(","))	
				{
					sql_City=sql_City.replace(","," ")	
				}
		}
		sql_StateOrProvince=row.StateOrProvince
		sql_Country=row.Country
		sql_Country=row.Country
		if(sql_Country!=null)
		{
			sql_Countryryne3=sql_Country.toUpperCase();
			if(sql_Country.contains(","))	
				{
					sql_Country=sql_Country.replace(","," ")	
				}							
		}
		
		sql_Postcode=row.Postcode
		String sql_Postcode=sql_Postcode
		if(sql_Postcode!=null)
		{
			sql_Postcode=sql_Postcode.toUpperCase();	
		}
		else if(sql_Postcode==null)
				sql_Postcode="NULL";
				
		sqlWriter.println(sql_MemberId+","+sql_Reference+","+sql_Party_Id+","+sql_CrmIdentifier+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressID+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode)
		log.info "SQL response is : "+sql_MemberId+","+sql_Reference+","+sql_Party_Id+","+sql_CrmIdentifier+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressID+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode
		
		//Set the Member Id at test case level
		String memberId = row.Id
		testRunner.testCase.setPropertyValue( "memberId", memberId)

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
	
		//Run the test step to get response
		testRunner.runTestStepByName('MemByMemId')
		String req='${MemByMemId#Response}'
		response=context.expand(req)
		log.info "API Response received is :"+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)
			
		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["MemByMemId"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info("HTTP status code: " + httpStatusCode)
	
		String error = response
		if(httpStatusCode.equals("200"))
		{
			API_MemberId=jsonRes.id
			API_Reference=jsonRes.reference
			API_Party_Id=jsonRes.party.id
			API_CrmIdentifier=jsonRes.party.crmIdentifier
			String api_crm=API_CrmIdentifier
			api_crm=api_crm.toUpperCase();
			API_CrmIdentifier=api_crm
			API_OrganisationName=jsonRes.party.organisationName
			String api_OrganisationName=API_OrganisationName
			if(api_OrganisationName!=null)
			{
				api_OrganisationName=api_OrganisationName.toUpperCase();
			}
			API_OrganisationName=api_OrganisationName					
			API_Salutation=jsonRes.party.salutation
			API_FirstName=jsonRes.party.firstName
			API_MiddleName=jsonRes.party.middleName
			API_LastName=jsonRes.party.lastName
			API_EmailAddress=jsonRes.party.emailAddress
			API_Telephone=jsonRes.party.telephone
			API_Fax=jsonRes.party.fax
			API_AddressID=jsonRes.party.addressesiId
			String api_AddressID=API_AddressID
			if (api_AddressID!=null)
			{	
				api_AddressID=api_AddressID.replace("[","")
				api_AddressID=api_AddressID.replace("]","")
				if (api_AddressID.contains(","))
				{
					api_AddressID=api_AddressID.replace(" ","")
				}
			}
			API_AddressID=api_AddressID
			API_AddressName=jsonRes.party.addresses.addressName
			String api_AddressName=API_AddressName
			if(api_AddressName!=null)
			{
				api_AddressName=api_AddressName.replace("[","")
				api_AddressName=api_AddressName.replace("]","")
					if(api_AddressName.contains(","))
					{
						api_AddressName=api_AddressName.replace(","," ")
					}
			}
			API_AddressName=api_AddressName.toUpperCase();	
			API_Line1=jsonRes.party.addresses.addressLine1
			String api_Line1=API_Line1
			if(api_Line1!=null)
			{
				api_Line1=api_Line1.replace("[","")
				api_Line1=api_Line1.replace("]","")
				if(api_Line1.contains(","))
				{
					api_Line1=api_Line1.replace(","," ")
				}
			}
			API_Line1=api_Line1.toUpperCase();	
			API_Line2=jsonRes.party.addresses.addressLine2
			String api_Line2=API_Line2
			if(api_Line2!=null)
			{
				api_Line2=api_Line2.replace("[","")
				api_Line2=api_Line2.replace("]","")
				if(api_Line2.contains(","))
				{
					api_Line2=api_Line2.replace(","," ")
				}
			}
			API_Line2=api_Line2.toUpperCase();	
			API_Line3=jsonRes.party.addresses.addressLine3
			String api_Line3=API_Line3
			if(api_Line3!=null)
			{
				api_Line3=api_Line3.replace("[","")
				api_Line3=api_Line3.replace("]","")
				if(api_Line3.contains(","))
				{
					api_Line3=api_Line3.replace(","," ")
				}
			}
			API_Line3=api_Line3.toUpperCase();	
			API_City=jsonRes.party.addresses.city
			String api_City=API_City
			if(api_City!=null)
			{
				api_City=api_City.replace("[","")
				api_City=api_City.replace("]","")
				if(api_City.contains(","))
				{
					api_City=api_City.replace(","," ")
				}
			}
			API_City=api_City.toUpperCase();	
			API_StateOrProvince=jsonRes.party.addresses.state
			String api_StateOrProvince=API_StateOrProvince
			if(api_StateOrProvince!=null)
			{
				api_StateOrProvince=api_StateOrProvince.replace("[","")
				api_StateOrProvince=api_StateOrProvince.replace("]","")
				if(api_StateOrProvince.contains(","))
				{
					api_StateOrProvince=api_StateOrProvince.replace(","," ")
				}
			}
			API_StateOrProvince=api_StateOrProvince.toUpperCase();	
			API_Country=jsonRes.party.addresses.country
			String api_Country=API_Country
			if(api_Country!=null)
			{
				api_Country=api_Country.replace("[","")
				api_Country=api_Country.replace("]","")
				if(api_Country.contains(","))
				{
					api_Country=api_Country.replace(","," ")
				}
			}
			API_Country=api_Country.toUpperCase();				
			API_Postcode=jsonRes.party.addresses.postalCode
			String api_Postcode=API_Postcode
			if(api_Postcode!=null)
			{
				api_Postcode=api_Postcode.replace("[","")
				api_Postcode=api_Postcode.replace("]","")
				if(api_Postcode.contains(","))
				{
					api_Postcode=api_Postcode.replace(","," ")
				}
			}
			API_Postcode=api_Postcode.toUpperCase();
	
			responseValue=[API_AddressID,API_AddressName,API_Line1,API_Line2,API_Line3,API_City,API_StateOrProvince,API_Country,API_Postcode];
			
			API_AddressID=responseValue[0]
			API_AddressName=responseValue[1]
			API_Line1=responseValue[2]
			API_Line2=responseValue[3]
			API_Line3=responseValue[4]
			API_City=responseValue[5]
			API_StateOrProvince=responseValue[6]
			API_Country=responseValue[7]
			API_Postcode=responseValue[8]
	
			apiWriter.println(API_MemberId+","+API_Reference+","+API_Party_Id+","+API_CrmIdentifier+","+API_OrganisationName+","+API_Salutation+","+API_FirstName+","+API_MiddleName+","+API_LastName+","+API_EmailAddress+","+API_Telephone+","+API_Fax+","+API_AddressID+","+API_AddressName+","+API_Line1+","+API_Line2+","+API_Line3+","+API_City+","+API_StateOrProvince+","+API_Country+","+API_Postcode)
			log.info  "API response is : "+API_MemberId+","+API_Reference+","+API_Party_Id+","+API_CrmIdentifier+","+API_OrganisationName+","+API_Salutation+","+API_FirstName+","+API_MiddleName+","+API_LastName+","+API_EmailAddress+","+API_Telephone+","+API_Fax+","+API_AddressID+","+API_AddressName+","+API_Line1+","+API_Line2+","+API_Line3+","+API_City+","+API_StateOrProvince+","+API_Country+","+API_Postcode
	
			if(API_MemberId.equals(sql_MemberId) && API_Party_Id.equals(sql_Party_Id) && sql_CrmIdentifier.equals(API_CrmIdentifier) && sql_OrganisationName.equals(API_OrganisationName) && sql_AddressName.equals(API_AddressName) && sql_Postcode.equals(API_Postcode) && sql_Country.equals(API_Country))
			{
				compareWriter.println(sql_MemberId+","+API_MemberId+","+sql_Reference+","+API_Reference+","+sql_Party_Id+","+API_Party_Id+","+sql_CrmIdentifier+","+API_CrmIdentifier+","+sql_OrganisationName+","+API_OrganisationName+","+sql_Salutation+","+API_Salutation+","+sql_FirstName+","+API_FirstName+","+sql_MiddleName+","+API_MiddleName+","+sql_LastName+","+API_LastName+","+sql_EmailAddress+","+API_EmailAddress+","+sql_Telephone+","+API_Telephone+","+sql_Fax+","+API_Fax+","+sql_AddressID+","+API_AddressID+","+sql_AddressName+","+API_AddressName+","+sql_Line1+","+API_Line1+","+sql_Line2+","+API_Line2+","+sql_Line3+","+API_Line3+","+sql_City+","+API_City+","+sql_StateOrProvince+","+API_StateOrProvince+","+sql_Country+","+API_Country+","+sql_Postcode+","+API_Postcode+","+"Test case passed")
				log.info "Details are matching hence test case is passed."
			}
			else
			{
				compareWriter.println(sql_MemberId+","+API_MemberId+","+sql_Reference+","+API_Reference+","+sql_Party_Id+","+API_Party_Id+","+sql_CrmIdentifier+","+API_CrmIdentifier+","+sql_OrganisationName+","+API_OrganisationName+","+sql_Salutation+","+API_Salutation+","+sql_FirstName+","+API_FirstName+","+sql_MiddleName+","+API_MiddleName+","+sql_LastName+","+API_LastName+","+sql_EmailAddress+","+API_EmailAddress+","+sql_Telephone+","+API_Telephone+","+sql_Fax+","+API_Fax+","+sql_AddressID+","+API_AddressID+","+sql_AddressName+","+API_AddressName+","+sql_Line1+","+API_Line1+","+sql_Line2+","+API_Line2+","+sql_Line3+","+API_Line3+","+sql_City+","+API_City+","+sql_StateOrProvince+","+API_StateOrProvince+","+sql_Country+","+API_Country+","+sql_Postcode+","+API_Postcode+","+"Test case failed")
				log.info "Details are not matching hence test case is failed."
			}
		}
		counter=counter+1;
		log.info "Record number "+counter+" is checked."
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", ".")
newDateTimeString = newDateTimeString.replace(":",".")
log.info "************Execution Ended at : "+newDateTimeString+"************"
log.info "************Execution finished for Member By Member ID ************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>memberId</con:name><con:value>46162</con:value></con:property></con:properties></con:testCase><con:testCase id="cd798d16-59e1-43a4-ba15-32daefc8ff9b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_MembersByMemberReference" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="MemByMemReference" id="155fab3f-7f1d-4a19-9761-d8577a4e8691"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/members/" methodName="MembersByMemberReference" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="MemByMemReference" id="345d0bd1-e414-4f79-ae68-8c25ea7c0739" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/members/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="reference" value="${#TestCase#MemberReference}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>reference</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="MemberByMemberReference" id="8c5cf59c-0f9a-4164-9027-fdac6a8e3415" disabled="true"><con:settings/><con:config><script><![CDATA[ import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Script Started for Member By Member Reference ************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 


String sqlstmt = """
	SELECT
	DISTINCT
	TOP 200
	MA.Id as MemberId, MA.Reference as MemberReference, C.ShortCode as Domicile, MA.Party_Id, P.CrmIdentifier, P.OrganisationName, 
	P.Salutation, P.FirstName, P.MiddleName, P.LastName, P.OrganisationName as Name, P.OrganisationName as SearchName, P.EmailAddress, 
	P.Telephone, P.Fax, A.Id as AddressID, A.Name as AddressName, a.Line1, a.Line2,A.Line3, A.City, 
	A.StateOrProvince, C.Name as Country, A.Postcode
	from MemberAssured MA 
	inner join Party P on P.Id=MA.Party_Id 
	inner join Address A on A.Party_Id=P.Id 
	inner join ref_Country C on C.Id=A.Country_Id 
	order by 2 desc
"""

//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_MemberByMemberReference.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_MemberByMemberReference.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_MemberByMemberReference.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_MemberByMemberReference"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_MemberByMemberReference"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_MemberByMemberReference"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_MemberId"+","+"SQL_MemberReference"+","+"SQL_Domicile"+","+"SQL_Party_Id"+","+"SQL_CrmIdentifier"+","+"SQL_OrganisationName"+","+"SQL_Salutation"+","+"SQL_FirstName"+","+"SQL_MiddleName"+","+"SQL_LastName"+","+"SQL_Name"+","+"SQL_SearchName"+","+"SQL_EmailAddress"+","+"SQL_Telephone"+","+"SQL_Fax"+","+"SQL_AddressID"+","+"SQL_AddressName"+","+"SQL_Line1"+","+"SQL_Line2"+","+"SQL_Line3"+","+"SQL_City"+","+"SQL_StateOrProvince"+","+"SQL_Country"+","+"SQL_Postcode")
apiWriter.println("API_MemberId"+","+"API_MemberReference"+","+"API_Domicile"+","+"API_Party_Id"+","+"API_CrmIdentifier"+","+"API_OrganisationName"+","+"API_Salutation"+","+"API_FirstName"+","+"API_MiddleName"+","+"API_LastName"+","+"API_Name"+","+"API_SearchName"+","+"API_EmailAddress"+","+"API_Telephone"+","+"API_Fax"+","+"API_AddressID"+","+"API_AddressName"+","+"API_Line1"+","+"API_Line2"+","+"API_Line3"+","+"API_City"+","+"API_StateOrProvince"+","+"API_Country"+","+"API_Postcode")
compareWriter.println("SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_Domicile"+","+"API_Domicile"+","+"SQL_Party_Id"+","+"API_Party_Id"+","+"SQL_CrmIdentifier"+","+"API_CrmIdentifier"+","+"SQL_OrganisationName"+","+"API_OrganisationName"+","+"SQL_Salutation"+","+"API_Salutation"+","+"SQL_FirstName"+","+"API_FirstName"+","+"SQL_MiddleName"+","+"API_MiddleName"+","+"SQL_LastName"+","+"API_LastName"+","+"SQL_Name"+","+"API_Name"+","+"SQL_SearchName"+","+"API_SearchName"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_Telephone"+","+"API_Telephone"+","+"SQL_Fax"+","+"API_Fax"+","+"SQL_AddressID"+","+"API_AddressID"+","+"SQL_Name"+","+"API_Name"+","+"SQL_Line1"+","+"API_Line1"+","+"SQL_Line2"+","+"API_Line2"+","+"SQL_Line3"+","+"API_Line3"+","+"SQL_City"+","+"API_City"+","+"SQL_StateOrProvince"+","+"API_StateOrProvince"+","+"SQL_Country"+","+"API_Country"+","+"SQL_Postcode"+","+"API_Postcode"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter =0
String field=null

con.eachRow(sqlstmt)
{	
	row -> 
		sql_MemberId=row.MemberId
		sql_MemberReference=row.MemberReference
		sql_Domicile=row.Domicile
		sql_Party_Id=row.Party_Id
		sql_CrmIdentifier=row.CrmIdentifier
		sql_OrganisationName=row.OrganisationName
		field =sql_OrganisationName
		if(field!=null)
		{
			field=field.replace(",","")
		}
		sql_OrganisationName=field
		sql_Salutation=row.Salutation
		sql_FirstName=row.FirstName
		sql_MiddleName=row.MiddleName
		sql_LastName=row.LastName
		sql_Name=row.Name
		field =sql_Name
		if(field!=null)
		{
			field=field.replace(",","")
		}
		sql_Name=field
		sql_SearchName=row.SearchName
		field =sql_SearchName
		if(field!=null)
		{
			field=field.replace(",","")
		}
		sql_SearchName=field
		sql_EmailAddress=row.EmailAddress
		sql_Telephone=row.Telephone
		sql_Fax=row.Fax
		sql_AddressID=row.AddressID
		sql_AddressName=row.Name
		field =sql_AddressName
		if(field!=null)
		{
			field=field.replace(",","")
		}
		sql_AddressName=field
		sql_Line1=row.Line1
		field =sql_Line1
		if(field!=null)
		{
			field=field.replace(",","")
		}
		sql_Line1=field
		sql_Line2=row.Line2
		field =sql_Line2
		if(field!=null)
		{
			field=field.replace(",","")
		}
		sql_Line2=field
		sql_Line3=row.Line3
		field =sql_Line3
		if(field!=null)
		{
			field=field.replace(",","")
		}
		sql_Line3=field
		sql_City=row.City
		field =sql_City
		if(field!=null)
		{
			field=field.replace(",","")
		}
		sql_City=field
		sql_StateOrProvince=row.StateOrProvince
		sql_Country=row.Country
		String country =sql_Country
		if(country!=null)
		{
			country=country.replace(",","")
		}
		sql_Country=country
		sql_Postcode=row.Postcode

		sqlWriter.println(sql_MemberId+","+sql_MemberReference+","+sql_Domicile+","+sql_Party_Id+","+sql_CrmIdentifier+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressID+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode)
		log.info "SQL response is : "+sql_MemberId+","+sql_MemberReference+","+sql_Domicile+","+sql_Party_Id+","+sql_CrmIdentifier+","+sql_OrganisationName+","+sql_Salutation+","+sql_FirstName+","+sql_MiddleName+","+sql_LastName+","+sql_Name+","+sql_SearchName+","+sql_EmailAddress+","+sql_Telephone+","+sql_Fax+","+sql_AddressID+","+sql_AddressName+","+sql_Line1+","+sql_Line2+","+sql_Line3+","+sql_City+","+sql_StateOrProvince+","+sql_Country+","+sql_Postcode
		
		//Set the Member Reference at test case leve
		String memberReference =sql_MemberReference
		testRunner.testCase.setPropertyValue( "memberReference", memberReference)

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)

		//Run the test step to get response
		testRunner.runTestStepByName('MemByMemReference')
		String req='${MemByMemReference#Response}'
		response=context.expand(req)
		//log.info "API Response received is :"+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["MemByMemReference"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info("HTTP status code: " + httpStatusCode)
	
		String error = response
		if(httpStatusCode.equals("200"))
		{
			int jsonRecordCount = jsonRes.totalRecords
			log.info "Search records counts : "+ jsonRecordCount 
			for (int i=0; i<jsonRecordCount; i++)
			{
				newId = jsonRes.results.id[i]
				if(sql_MemberId.toString().equals(newId.toString()))
				{
					api_MemberId=jsonRes.results.id[i]
					api_MemberReference=jsonRes.results.reference[i]
					api_Domicile=jsonRes.results.domicile[i]
					api_Party_Id=jsonRes.results.party.id[i]
					api_CrmIdentifier=jsonRes.results.party.crmIdentifier[i]
					api_OrganisationName=jsonRes.results.party.organisationName[i]
					field =api_OrganisationName
					if(field!=null)
					{
						field=field.replace(",","")
						
					}
					api_OrganisationName=field
					api_Salutation=jsonRes.results.party.salutation[i]
					api_FirstName=jsonRes.results.party.firstName[i]
					api_MiddleName=jsonRes.results.party.middleName[i]
					api_LastName=jsonRes.results.party.lastName[i]
					api_Name=jsonRes.results.party.name[i]
					field =api_Name
					if(field!=null)
					{
						field=field.replace(",","")
						if (field.contains("["))
						{
							field=field.replace("[","")
							field=field.replace("]","")
						}
					}
					api_Name=field
					api_SearchName=jsonRes.results.party.searchName[i]
					field =api_SearchName
					if(field!=null)
					{
						field=field.replace(",","")
						if (field.contains("["))
						{
							field=field.replace("[","")
							field=field.replace("]","")
						}
					}
					api_SearchName=field
					api_EmailAddress=jsonRes.results.party.emailAddress[i]
					api_Telephone=jsonRes.results.party.telephone[i]
					api_Fax=jsonRes.results.party.fax[i]
					api_AddressID=jsonRes.results.party.addresses.id[i]
					field =api_AddressID
					if(field!=null)
					{
						field=field.replace(",","")
						if (field.contains("["))
						{
							field=field.replace("[","")
							field=field.replace("]","")
						}
					}
					api_AddressID=field
					api_AddressName=jsonRes.results.party.addresses.addressName[i]
					field =api_AddressName
					if(field!=null)
					{
						field=field.replace(",","")
						if (field.contains("["))
						{
							field=field.replace("[","")
							field=field.replace("]","")
						}
					}
					api_AddressName=field
					api_Line1=jsonRes.results.party.addresses.addressLine1[i]
					field =api_Line1
					if(field!=null)
					{
						field=field.replace(",","")
						if (field.contains("["))
						{
							field=field.replace("[","")
							field=field.replace("]","")
						}
					}
					api_Line1=field
					api_Line2=jsonRes.results.party.addresses.addressLine2[i]
					field =api_Line2
					if(field!=null)
					{
						field=field.replace(",","")
						if (field.contains("["))
						{
							field=field.replace("[","")
							field=field.replace("]","")
						}
					}
					api_Line2=field
					api_Line3=jsonRes.results.party.addresses.addressLine3[i]
					field =api_Line3
					if(field!=null)
					{
						field=field.replace(",","")
						if (field.contains("["))
						{
							field=field.replace("[","")
							field=field.replace("]","")
						}
					}
					api_Line3=field
					api_City=jsonRes.results.party.addresses.city[i]
					field =api_City
					if(field!=null)
					{
						field=field.replace(",","")
						if (field.contains("["))
						{
							field=field.replace("[","")
							field=field.replace("]","")
						}
					}
					api_City=field
					api_StateOrProvince=jsonRes.results.party.addresses.state[i]
					field=api_StateOrProvince
					if(field!=null)
					{
						field=field.replace(",","")
						if (field.contains("["))
						{
							field=field.replace("[","")
							field=field.replace("]","")
						}
					}
					api_StateOrProvince=field
					api_Country=jsonRes.results.party.addresses.country[i]
					field =api_Country
					if(field!=null)
					{
						field=field.replace(",","")
						if (field.contains("["))
						{
							field=field.replace("[","")
							field=field.replace("]","")
						}
					}
					api_Country=field
					api_Postcode=jsonRes.results.party.addresses.postalCode[i]
					field = api_Postcode
					if(field!=null)
					{
						if (field.contains("["))
						{
							field=field.replace("[","")
							field=field.replace("]","")
						}
					}
					api_Postcode=field
					
	
					apiWriter.println(api_MemberId+","+api_MemberReference+","+api_Domicile+","+api_Party_Id+","+api_CrmIdentifier+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressID+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode)
					log.info "API Response received as : "+api_MemberId+","+api_MemberReference+","+api_Domicile+","+api_Party_Id+","+api_CrmIdentifier+","+api_OrganisationName+","+api_Salutation+","+api_FirstName+","+api_MiddleName+","+api_LastName+","+api_Name+","+api_SearchName+","+api_EmailAddress+","+api_Telephone+","+api_Fax+","+api_AddressID+","+api_AddressName+","+api_Line1+","+api_Line2+","+api_Line3+","+api_City+","+api_StateOrProvince+","+api_Country+","+api_Postcode
					if (api_MemberId.toString().equals(sql_MemberId.toString()) && api_MemberReference.toString().equals(sql_MemberReference.toString()) && api_Domicile.toString().equals(sql_Domicile.toString()) && api_Party_Id.toString().equals(sql_Party_Id.toString()) && api_CrmIdentifier.toString().toUpperCase().equals(sql_CrmIdentifier.toString().toUpperCase()) && api_OrganisationName.toString().toUpperCase().equals(sql_OrganisationName.toString().toUpperCase()) && api_Salutation.toString().toUpperCase().equals(sql_Salutation.toString().toUpperCase()) && api_FirstName.toString().toUpperCase().equals(sql_FirstName.toString().toUpperCase()) && api_MiddleName.toString().toUpperCase().equals(sql_MiddleName.toString().toUpperCase()) && api_LastName.toString().toUpperCase().equals(sql_LastName.toString().toUpperCase()) && api_Name.toString().toUpperCase().equals(sql_Name.toString().toUpperCase()) && api_SearchName.toString().toUpperCase().equals(sql_SearchName.toString().toUpperCase()) && api_EmailAddress.toString().equals(sql_EmailAddress.toString()) && api_Telephone.toString().equals(sql_Telephone.toString()) && api_Fax.toString().equals(sql_Fax.toString()) && api_AddressID.toString().equals(sql_AddressID.toString()) && api_Name.toString().toUpperCase().equals(sql_Name.toString().toUpperCase()) && api_Line1.toString().toUpperCase().equals(sql_Line1.toString().toUpperCase()) && api_Line2.toString().toUpperCase().equals(sql_Line2.toString().toUpperCase()) && api_Line3.toString().toUpperCase().equals(sql_Line3.toString().toUpperCase()) && api_City.toString().toUpperCase().equals(sql_City.toString().toUpperCase()) && api_StateOrProvince.toString().toUpperCase().equals(sql_StateOrProvince.toString().toUpperCase()) && api_Country.toString().toUpperCase().equals(sql_Country.toString().toUpperCase()) && api_Postcode.toString().equals(sql_Postcode.toString()))
					{
						compareWriter.println(sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_Domicile+","+api_Domicile+","+sql_Party_Id+","+api_Party_Id+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Salutation+","+api_Salutation+","+sql_FirstName+","+api_FirstName+","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_AddressName+","+api_AddressName+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_AddressID+","+api_AddressID+","+sql_Name+","+api_Name+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+"Test Case is Passed")
						log.info "Details are matching hence test case is passed"
					}
					else
					{
						compareWriter.println(sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_Domicile+","+api_Domicile+","+sql_Party_Id+","+api_Party_Id+","+sql_CrmIdentifier+","+api_CrmIdentifier+","+sql_OrganisationName+","+api_OrganisationName+","+sql_Salutation+","+api_Salutation+","+sql_FirstName+","+api_FirstName+","+sql_MiddleName+","+api_MiddleName+","+sql_LastName+","+api_LastName+","+sql_AddressName+","+api_AddressName+","+sql_SearchName+","+api_SearchName+","+sql_EmailAddress+","+api_EmailAddress+","+sql_Telephone+","+api_Telephone+","+sql_Fax+","+api_Fax+","+sql_AddressID+","+api_AddressID+","+sql_Name+","+api_Name+","+sql_Line1+","+api_Line1+","+sql_Line2+","+api_Line2+","+sql_Line3+","+api_Line3+","+sql_City+","+api_City+","+sql_StateOrProvince+","+api_StateOrProvince+","+sql_Country+","+api_Country+","+sql_Postcode+","+api_Postcode+","+"Test Case is Failed")
						log.info "Details are not matching hence test case is Failed"
					}
				}
			}	
		}
		else
		{
		log.info "Failed API response received as : "+response
		}
		counter = counter +1;
		log.info "Number of records verified are : "+counter
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", ".")
newDateTimeString = newDateTimeString.replace(":",".")
log.info "************Execution Ended at : "+newDateTimeString+"************"
log.info "************Script finished for Member By Member Reference ************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>memberReference</con:name><con:value>74571</con:value></con:property></con:properties></con:testCase><con:testCase id="a3da00af-cf8e-43c4-8804-b4992fe34aa7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ReferenceByCountries" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RefByCountries" id="aaac4196-3a1a-4be6-8d88-306a8d2413a5"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/reference/countries" methodName="ReferenceByCountries" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByCountries" id="8e89cab6-7a23-4afb-a54f-77adf9ff3fde" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/reference/countries</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceByCountries" id="d3c7ac1f-4026-4ff9-8cdf-68124967f266" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Country************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
		"""
		USE TOM
		Select 
		Id as CountryId, 
		ShortCode as CountryShortCode, 
		Name as CountryName, 
		Description as CountryDescription, 
		IptTaxMap 
		from ref_Country
		"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ReferenceByCountry.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ReferenceByCountry.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ReferenceByCountry.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ReferenceByCountry"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ReferenceByCountry"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ReferenceByCountry"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_CountryId"+","+"SQL_CountryShortCode"+","+"SQL_CountryName"+","+"SQL_CountryDescription"+","+"SQL_CountryIptTaxMap")
apiWriter.println("API_CountryId"+","+"API_CountryShortCode"+","+"API_CountryName"+","+"api_CountryDescription"+","+"API_CountryIptTaxMap")
compareWriter.println("SQL_CountryId"+","+"API_CountryId"+","+"SQL_CountryShortCode"+","+"API_CountryShortCode"+","+"SQL_CountryName"+","+"API_CountryName"+","+"SQL_CountryDescription"+","+"API_CountryDescription"+","+"SQL_CountryIptTaxMap"+","+"API_CountryIptTaxMap"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

//int counter=0;

con.eachRow(sqlstmt)
{	
	row ->
	sql_CountryId=row.CountryId
	sql_CountryShortCode=row.CountryShortCode
	sql_CountryName=row.CountryName
	field=sql_CountryName
	sql_CountryName=removeCommas(field)
	sql_CountryDescription=row.CountryDescription
	field=sql_CountryDescription
	sql_CountryDescription=removeCommas(field)
	sql_CountryIptTaxMap=row.IptTaxMap
	
	sqlWriter.println(sql_CountryId+","+sql_CountryShortCode+","+sql_CountryName+","+sql_CountryDescription+","+sql_CountryIptTaxMap)
	log.info "SQL Response received as :"+sql_CountryId+","+sql_CountryShortCode+","+sql_CountryName+","+sql_CountryDescription+","+sql_CountryIptTaxMap

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('RefByCountries')
	String req='${RefByCountries#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)
	
	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefByCountries"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		int jsonRecordCount = jsonRes.totalRecords
		log.info "Number of records are : "+jsonRecordCount
	
		for(int i=0; i<jsonRecordCount; i++)
		{
			String newId = jsonRes.results.id[i]
			if(newId.toString().equals(sql_CountryId.toString()))
			{
				api_CountryId=jsonRes.results.id[i]
				api_CountryShortCode=jsonRes.results.shortCode[i]
				api_CountryName=jsonRes.results.name[i]
				field=sql_CountryName
				api_CountryName=removeCommas(field)
				api_CountryDescription=jsonRes.results.description[i]
				field=sql_CountryDescription
				api_CountryDescription=removeCommas(field)
				api_CountryIptTaxMap=jsonRes.results.iptTaxMap[i]
	
				apiWriter.println(api_CountryId+","+api_CountryShortCode+","+api_CountryName+","+api_CountryDescription+","+api_CountryIptTaxMap)
				log.info "API responce received as : "+api_CountryId+","+api_CountryShortCode+","+api_CountryName+","+api_CountryDescription+","+api_CountryIptTaxMap
				
				if(api_CountryId.toString().equals(sql_CountryId.toString()) && api_CountryShortCode.toString().toUpperCase().equals(sql_CountryShortCode.toString().toUpperCase()) && api_CountryName.toString().toUpperCase().equals(sql_CountryName.toString().toUpperCase()) && api_CountryDescription.toString().toUpperCase().equals(sql_CountryDescription.toString().toUpperCase()) && api_CountryIptTaxMap.toString().toUpperCase().equals(sql_CountryIptTaxMap.toString().toUpperCase()))
				{
					compareWriter.println(sql_CountryId+","+api_CountryId+","+sql_CountryShortCode+","+api_CountryShortCode+sql_CountryName+","+api_CountryName+","+sql_CountryDescription+","+api_CountryDescription+sql_CountryIptTaxMap+","+api_CountryIptTaxMap+","+"Test case passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_CountryId+","+api_CountryId+","+sql_CountryShortCode+","+api_CountryShortCode+sql_CountryName+","+api_CountryName+","+sql_CountryDescription+","+api_CountryDescription+sql_CountryIptTaxMap+","+api_CountryIptTaxMap+","+"Test case failed")
					log.info "Details are not matching hence test case is failed"
				}
			}
		}	
	}
//	counter=counter+1
//	log.info "Number of records verified are : "+counter
}

public String removeCommas(String field)
{
	if(field!=null)
	{
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Country************"]]></script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="e7337563-1a12-4693-b5b5-7e2579662141" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ReferenceByDocumentStatuses" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RefByDocumentStatuses" id="60a1952d-e713-49b7-a451-073181ad64ca"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/reference/documentStatuses" methodName="ReferenceByDocumentStatuses" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByDocumentStatuses" id="c94df1c1-fb4f-43a8-85bd-06d3351743b7" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/reference/documentStatuses</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferencesByDocumentStatuses" id="836aad1a-5524-4871-bcb1-86d2e076c039" disabled="true"><con:settings/><con:config><script>import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Document Statuses************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
		"""
		USE TOM
		SELECT 
		Id as DocumentStatusId, Name as DocumentStatusName
		from ref_DocumentStatus
		"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ReferenceByDocumentStatuses.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ReferenceByDocumentStatuses.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ReferenceByDocumentStatuses.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ReferenceByDocumentStatuses"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ReferenceByDocumentStatuses"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ReferenceByDocumentStatuses"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_DocumentId"+","+"SQL_DocumentStatusName")
apiWriter.println("API_DocumentId"+","+"API_DocumentStatusName")
compareWriter.println("SQL_DocumentId"+","+"API_DocumentId"+","+"SQL_DocumentStatusName"+","+"API_DocumentStatusName"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

con.eachRow(sqlstmt)
{	
	row ->
	sql_DocumentStatusId=row.DocumentStatusId
	sql_DocumentStatusName=row.DocumentStatusName
	
	sqlWriter.println(sql_DocumentStatusId+","+sql_DocumentStatusName)
	log.info "SQL Response received as :"+sql_DocumentStatusId+","+sql_DocumentStatusName

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	//Run the test step to get response
	testRunner.runTestStepByName('RefByDocumentStatuses')
	String req='${RefByDocumentStatuses#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefByDocumentStatuses"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		int jsonRecordCount = jsonRes.totalRecords
		log.info "Number of records are : "+jsonRecordCount
		for(int i=0; i&lt;jsonRecordCount; i++)
		{
			String newId = jsonRes.results.id[i]
			if(newId.toString().equals(sql_DocumentStatusId.toString()))
			{
				api_DocumentStatusId=jsonRes.results.id[i]
				api_DocumentStatusName=jsonRes.results.documentStatusName[i]
	
				apiWriter.println(api_DocumentStatusId+","+api_DocumentStatusName)
				log.info "API responce received as : "+api_DocumentStatusId+","+api_DocumentStatusName
				
				if(api_DocumentStatusId.toString().equals(sql_DocumentStatusId.toString()) &amp;&amp; api_DocumentStatusName.toString().toUpperCase().equals(sql_DocumentStatusName.toString().toUpperCase()))
				{
					compareWriter.println(sql_DocumentStatusId+","+api_DocumentStatusId+","+sql_DocumentStatusName+","+api_DocumentStatusName+","+"Test case passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_DocumentStatusId+","+api_DocumentStatusId+","+sql_DocumentStatusName+","+api_DocumentStatusName+","+"Test case failed")
					log.info "Details are not matching hence test case is failed"
				}
			}
		}	
	}
	else
	{
		log.info "Failed API response received as : "+response
	}
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Document Statuses************"</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5d565f46-1be5-428b-af98-30fa371f979e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ReferenceByDocumentTypes" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RefByDocumentTypes" id="e973bd3c-9673-4a08-a99f-98ba12028a15"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/reference/documentTypes" methodName="ReferenceByDocumentTypes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByDocumentTypes" id="0751a772-7e09-47fe-b3a9-0f2e71e14364" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/reference/documentTypes</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceByDocumentTypes" id="50673d72-5d90-4ec1-b1da-55ecf5a8b7e3" disabled="true"><con:settings/><con:config><script>import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Document Types************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
		"""
		USE TOM
		Select 
		Id as DocumentTypeId, Name as DocumentTypeName
		from ref_DocumentType
		"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ReferenceByDocumentType.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ReferenceByDocumentType.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ReferenceByDocumentType.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ReferenceByDocumentType"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ReferenceByDocumentType"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ReferenceByDocumentType"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_DocumentTypeId"+","+"SQL_DocumentTypeName")
apiWriter.println("API_DocumentTypeId"+","+"API_DocumentTypeName")
compareWriter.println("SQL_DocumentTypeId"+","+"API_DocumentTypeId"+","+"SQL_DocumentTypeName"+","+"API_DocumentTypeName"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0;

con.eachRow(sqlstmt)
{	
	row ->
	sql_DocumentTypeId=row.DocumentTypeId
	sql_DocumentTypeName=row.DocumentTypeName
	
	sqlWriter.println(sql_DocumentTypeId+","+sql_DocumentTypeName)
	log.info "SQL Response received as :"+sql_DocumentTypeId+","+sql_DocumentTypeName

	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)

	//Run the test step to get response
	testRunner.runTestStepByName('RefByDocumentTypes')
	String req='${RefByDocumentTypes#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefByDocumentTypes"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		int jsonRecordCount = jsonRes.totalRecords
		log.info "Number of records are : "+jsonRecordCount
		for(int i=0; i&lt;jsonRecordCount; i++)
		{
			String newId = jsonRes.results.id[i]
			if(newId.toString().equals(sql_DocumentTypeId.toString()))
			{
				api_DocumentTypeId=jsonRes.results.id[i]
				api_DocumentTypeName=jsonRes.results.documentTypeName[i]
	
				apiWriter.println(api_DocumentTypeId+","+api_DocumentTypeName)
				log.info "API responce received as : "+api_DocumentTypeId+","+api_DocumentTypeName
				if(api_DocumentTypeId.toString().equals(sql_DocumentTypeId.toString()) &amp;&amp; api_DocumentTypeName.toString().toUpperCase().equals(sql_DocumentTypeName.toString().toUpperCase()))
				{
					compareWriter.println(sql_DocumentTypeId+","+api_DocumentTypeId+","+sql_DocumentTypeName+","+api_DocumentTypeName+","+"Test case passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_DocumentTypeId+","+api_DocumentTypeId+","+sql_DocumentTypeName+","+api_DocumentTypeName+","+"Test case failed")
					log.info "Details are not matching hence test case is failed"
				}
			}
		}
	}
	else
	{
		log.info "Failed API response received as :"+response
	}
	counter=counter+1
	log.info "Number of records verified are : "+counter
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Document Types************"</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="42da7fe8-4ad9-424b-b6b5-8ff946e69be5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_ReferenceRiskSubTypes" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RefByRiskSubTypes" id="e9625133-09a4-40bc-a4c9-deb5b51a1fe8"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/reference/RiskSubTypes" methodName="ReferenceRiskSubTypes" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RefByRiskSubTypes" id="847a52cc-0285-4c63-8cf5-3ac38eb03fc0" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/reference/RiskSubTypes</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="ReferenceRiskSubTypes" id="9490968f-6fe3-4c6c-8bbf-1b32184b9ad3" disabled="true"><con:settings/><con:config><script>import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Reference By Risk Sub Types************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
		"""
		USE TOM
		Select 
		Id as RiskId, 
		Name as RiskName, 
		ShortCode as RiskShortCode 
		from ref_RiskSubType
		"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ReferenceByRiskSubTypes.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ReferenceByRiskSubTypes.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ReferenceByRiskSubTypes.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQL_Response_ReferenceByRiskSubTypes"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\API_Response_ReferenceByRiskSubTypes"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_GET_ReferenceByRiskSubTypes"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_RiskId"+","+"SQL_RiskName"+","+"SQL_RiskShortCode")
apiWriter.println("API_RiskId"+","+"API_RiskName"+","+"API_RiskShortCode")
compareWriter.println("SQL_RiskId"+","+"API_RiskId"+","+"SQL_RiskName"+","+"API_RiskName"+","+"SQL_RiskShortCode"+","+"API_RiskShortCode"+","+"Status")

def response= null
def jsonSlurper=null
def jsonRes=null

//int counter=0;

con.eachRow(sqlstmt)
{	
	row ->
	sql_RiskId=row.RiskId
	sql_RiskName=row.RiskName
	sql_RiskShortCode=row.RiskShortCode
	
	sqlWriter.println(sql_RiskId+","+sql_RiskName+","+sql_RiskShortCode)
	log.info "SQL Response received as :"+sql_RiskId+","+sql_RiskName+","+sql_RiskShortCode
	
	//Set token to test suite level
	testRunner.testCase.testSuite.setPropertyValue("token", token)
		
	testRunner.runTestStepByName('RefByRiskSubTypes')
	String req='${RefByRiskSubTypes#Response}'
	response=context.expand(req)
	//log.info "API Response is :"+response
	jsonSlurper=new JsonSlurper() 
	jsonRes=jsonSlurper.parseText(response)

	//Check the Status code of API response
	def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
	def httpResponseHeaders = context.testCase.testSteps["RefByRiskSubTypes"].testRequest.response.responseHeaders
	def httpStatus = httpResponseHeaders["#status#"]
	def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
	//log.info("HTTP status code: " + httpStatusCode)

	String error = response
	if(httpStatusCode.equals("200"))
	{
		int jsonRecordCount = jsonRes.totalRecords
		log.info "Number of records are : "+jsonRecordCount
	
		for(int i=0; i&lt;jsonRecordCount; i++)
		{
			String newId = jsonRes.results.id[i]
			if(newId.toString().equals(sql_RiskId.toString()))
			{
				api_RiskId=jsonRes.results.id[i]
				api_RiskName=jsonRes.results.name[i]
				api_RiskShortCode=jsonRes.results.shortCode[i]
	
				apiWriter.println(api_RiskId+","+api_RiskName+","+api_RiskShortCode)
				log.info "API responce received as : "+api_RiskId+","+api_RiskName+","+api_RiskShortCode
				
				if(api_RiskId.toString().equals(sql_RiskId.toString()) &amp;&amp; api_RiskName.toString().toUpperCase().equals(sql_RiskName.toString().toUpperCase()) &amp;&amp; api_RiskShortCode.toString().toUpperCase().equals(sql_RiskShortCode.toString().toUpperCase()))
				{
					compareWriter.println(sql_RiskId+","+api_RiskId+","+sql_RiskName+","+api_RiskName+","+sql_RiskShortCode+","+api_RiskShortCode+","+"Test case passed")
					log.info "Details are matching hence test case is passed"
				}
				else
				{
					compareWriter.println(sql_RiskId+","+api_RiskId+","+sql_RiskName+","+api_RiskName+","+sql_RiskShortCode+","+api_RiskShortCode+","+"Test case Failed")
					log.info "Details are not matching hence test case is failed"
				}
			}
		}
	}
}
sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************Execution Finished for Reference By Risk Sub Types************"</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="294cfbca-b779-4bb0-87f6-647e26a49931" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_RiskWithMultipleParameters" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse" id="52dbab24-0f0d-4189-bd9f-b37ac0172af6"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/risks/" methodName="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse" id="8ae0a2b8-f8a7-4cb8-9dc9-0ec35ea1575c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/risks/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="risktype" value="vessel"/>
  <con:entry key="filterValue" value="SurajRisk"/>
  <con:entry key="excludeVessel" value="false"/>
  <con:entry key="filterType" value="vesselName"/>
</con:parameters><con:parameterOrder><con:entry>filterType</con:entry><con:entry>filterValue</con:entry><con:entry>risktype</con:entry><con:entry>excludeVessel</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy_FilterTypeVesselNameAndRiskTypeVesselAndExcludeVesslFalse" id="d7b7212c-ac67-4f7e-8f6a-f19844ca89b7" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Risk With MultipleParameters for Filter Type as VesselName and Risk Type as Vessel Exclude Vessel False************"

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
		"""
		USE TOM
		SELECT 
		DISTINCT
		ar.Id as ApplicationRiskId, r.Id as RiskId, r.Reference as RiskReference, ma.Id as MemberId,ma.Reference as MemberReference, p.OrganisationName,
		ab.Id as ApplicationId, ab.Reference as ApplicationReference, ab.Discriminator as ApplicationType, cc.Name as ApplicationProductType, 
		[user].EmailAddress as ApplicationUnderwriterEmail, l.Id as LimitId, c.ShortCode as CoverShortName, l.Name as LimitName, rc.ShortCode as CurrencyCode,
		acvltv.ValueDecimal as Amount,
		tc.IsPrimary, 
		case when tc.IsPrimary = 1 then 'True' 	
		when tc.IsPrimary = 0 then 'False' 
		else NULL end as isThePrimaryCoverLimit,
		Case when ab.Discriminator = 'Quote' then (select MIN(tq.Id)
		from ApplicationBase appb 
		join [Transaction] tq on tq.QuoteBase_Id = appb.Id 
		where appb.Id = ab.Id
		group by appb.id) 
		When ab.Discriminator = 'Policy' then (select MIN(tp.Id)
		from ApplicationBase appb 
		join [Transaction] tp on tp.Policy_Id = appb.Id 
		where appb.Id = ab.Id
		group by appb.id)  end as ApplicationFirstTransaction,
		ab.PolicyStart as PolicyStartDate,
		ab.PolicyEnd as PolicyEndDate,
		case when ab.Discriminator = 'Renewal Quote' then 'True'
		else 'False' end as IsRenewalApplication,
		rv.Id as VesselId, rv.ImoNumber, r.Name as VesselName, rvt.Name as VesselType, rv.CallSign, r.Entered as EnteredDate, rv.GrossTonnage, rv.PassengerCarryingCapacity,
		rv.YearBuilt,con.ShortCode as FlagCountryCode, con.Name as FlagCountryName, rp.ShortCode as PortOfRegistryCode, rp.Name as PortOfRegistryName, 
		rst.Name as RiskCategoryName,rv.TrademarkEngineModelNumber, rvm.Name as VesselMake, rv.EngineHorsePower, rv.TenderSerialNumber,
		rv.OutboardMotorSerialNumber as MotorSerialNumber 
		from ApplicationBase ab
		join ApplicationMemberAssured ama on ab.Id = ama.Application_Id
		join MemberAssured ma on ma.id = ama.MemberAssured_Id
		join Party p on p.id = ma.Party_Id
		join ApplicationRisk ar on ar.ApplicationMemberAssured_Id = ama.id 
		join Risk r on r.id = ar.Risk_Id
		join RiskVessel rv on rv.id = r.id
		join ref_VesselType rvt on rvt.id = rv.[Type_Id]
		LEFT join ApplicationCover AC on AB.Id = AC.Application_Id 
		Left Join TemplateCover TC on AC.TemplateCover_Id = TC.Id 
		AND TC.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0 
		Left Join Cover C on TC.Cover_Id = C.Id 
		AND C.Cover_PhysicalDeletionAttemptPrevented = 0
		left join CoverCategory cc on cc.id = c.CoverCategory_Id 
		LEFT Join [User] on AB.Underwriter_Id = [User].Id 
		left join ApplicationCoverVariation acv on acv.ApplicationCover_Id = ac.id
		left join ApplicationCoverVariationLimit acvl on acvl.CoverVariation_Id = acv.id
		left join ApplicationCoverVariationLimitTagValue acvltv on acvltv.ApplicationCoverVariationLimit_Id = acvl.id
		left join TemplateCoverLimit tcl on tcl.id = acvl.TemplateCoverLimit_Id
		left join CoverLimit cl on cl.id = tcl.CoverLimit_Id
		left join Limit l on l.id = cl.Limit_Id
		left join ref_Currency rc on rc.id = acvltv.Currency_Id
		left join ref_Country con on con.id = rv.Flag_Id
		left join ref_Port rp on rp.id = rv.PortOfRegistry_Id
		left join TemplatePermittedRiskSubType tprst on tprst.Template_Id = tc.Template_Id
		left join ref_RiskSubType rst on rst.id = tprst.RiskSubType_Id
		left join ref_VesselMake rvm on rvm.id = rv.VesselMake_Id
		where r.Name = 'SurajRisk' and ab.discriminator = 'Policy'
		"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
	
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselFalse.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselFalse.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselFalse.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselFalse"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselFalse"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselFalse"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()
				
sqlWriter.println("SQL_ApplicationRiskId"+","+"SQL_RiskId"+","+"SQL_RiskReference"+","+"SQL_MemberId"+","+"SQL_MemberReference"+","+"SQL_OrganisationName"+","+"SQL_ApplicationId"+","+"SQL_ApplicationReference"+","+"SQL_ApplicationType"+","+"SQL_ApplicationProductType"+","+"SQL_ApplicationUnderwriterEmail"+","+"SQL_LimitId"+","+"SQL_CoverShortName"+","+"SQL_LimitName"+","+"SQL_CurrencyCode"+","+"SQL_Amount"+","+"SQL_IsPrimary"+","+"SQL_isThePrimaryCoverLimit"+","+"SQL_ApplicationFirstTransaction"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_IsRenewalApplication"+","+"SQL_VesselId"+","+"SQL_ImoNumber"+","+"SQL_VesselName"+","+"SQL_VesselType"+","+"SQL_CallSign"+","+"SQL_EnteredDate"+","+"SQL_GrossTonnage"+","+"SQL_PassengerCarryingCapacity"+","+"SQL_YearBuilt"+","+"SQL_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"SQL_TrademarkEngineModelNumber"+","+"SQL_VesselMake"+","+"SQL_EngineHorsePower"+","+"SQL_TenderSerialNumber"+","+"SQL_MotorSerialNumber")
apiWriter.println("API_ApplicationRiskId"+","+"API_RiskId"+","+"API_RiskReference"+","+"API_MemberId"+","+"API_MemberReference"+","+"API_OrganisationName"+","+"API_ApplicationId"+","+"API_ApplicationReference"+","+"API_ApplicationType"+","+"API_ApplicationProductType"+","+"API_ApplicationUnderwriterEmail"+","+"API_LimitId"+","+"API_CoverShortName"+","+"API_LimitName"+","+"API_CurrencyCode"+","+"API_Amount"+","+"API_isThePrimaryCoverLimit"+","+"API_ApplicationFirstTransaction"+","+"API_PolicyStartDate"+","+"API_PolicyEndDate"+","+"API_IsRenewalApplication"+","+"API_VesselId"+","+"API_ImoNumber"+","+"API_VesselName"+","+"API_VesselType"+","+"API_CallSign"+","+"API_EnteredDate"+","+"API_GrossTonnage"+","+"API_PassengerCarryingCapacity"+","+"API_YearBuilt"+","+"API_FlagCountryCode"+","+"API_FlagCountryName"+","+"API_PortOfRegistryCode"+","+"API_PortOfRegistryName"+","+"API_RiskCategoryName"+","+"API_TrademarkEngineModelNumber"+","+"API_VesselMake"+","+"API_EngineHorsePower"+","+"API_TenderSerialNumber"+","+"API_MotorSerialNumber")
compareWriter.println("SQL_ApplicationRiskId"+","+"API_ApplicationRiskId"+","+"SQL_RiskId"+","+"API_RiskId"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_OrganisationName"+","+"API_OrganisationName"+","+"SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_ApplicationType"+","+"API_ApplicationType"+","+"SQL_ApplicationProductType"+","+"API_ApplicationProductType"+","+"SQL_ApplicationUnderwriterEmail"+","+"API_ApplicationUnderwriterEmail"+","+"SQL_LimitId"+","+"API_LimitId"+","+"SQL_CoverShortName"+","+"API_CoverShortName"+","+"SQL_LimitName"+","+"API_LimitName"+","+"SQL_CurrencyCode"+","+"API_CurrencyCode"+","+"SQL_Amount"+","+"API_Amount"+","+"SQL_IsPrimary"+","+"SQL_isThePrimaryCoverLimit"+","+"API_isThePrimaryCoverLimit"+","+"SQL_ApplicationFirstTransaction"+","+"API_ApplicationFirstTransaction"+","+"SQL_PolicyStartDate"+","+"API_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"API_PolicyEndDate"+","+"SQL_IsRenewalApplication"+","+"API_IsRenewalApplication"+","+"SQL_VesselId"+","+"API_VesselId"+","+"SQL_ImoNumber"+","+"API_ImoNumber"+","+"SQL_VesselName"+","+"API_VesselName"+","+"SQL_VesselType"+","+"API_VesselType"+","+"SQL_CallSign"+","+"API_CallSign"+","+"SQL_EnteredDate"+","+"API_EnteredDate"+","+"SQL_GrossTonnage"+","+"API_GrossTonnage"+","+"SQL_PassengerCarryingCapacity"+","+"API_PassengerCarryingCapacity"+","+"SQL_YearBuilt"+","+"API_YearBuilt"+","+"SQL_FlagCountryCode"+","+"API_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"API_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"API_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"API_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"API_RiskCategoryName"+","+"SQL_TrademarkEngineModelNumber"+","+"API_TrademarkEngineModelNumber"+","+"SQL_VesselMake"+","+"API_VesselMake"+","+"SQL_EngineHorsePower"+","+"API_EngineHorsePower"+","+"SQL_TenderSerialNumber"+","+"API_TenderSerialNumber"+","+"SQL_MotorSerialNumber"+","+"API_MotorSerialNumber"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0
String field=null

con.eachRow(sqlstmt)
{	
	row -> 
		sql_ApplicationRiskId=row.ApplicationRiskId
		field=sql_ApplicationRiskId
		sql_ApplicationRiskId=removeBracketAndComma(field)
		
		sql_RiskId=row.RiskId
		field=sql_RiskId
		sql_RiskId=removeBracketAndComma(field)
		
		sql_RiskReference=row.RiskReference
		field=sql_RiskReference
		sql_RiskReference=removeBracketAndComma(field)
		
		sql_MemberId=row.MemberId
		field=sql_MemberId
		sql_MemberId=removeBracketAndComma(field)
		
		sql_MemberReference=row.MemberReference
		field=sql_MemberReference
		sql_MemberReference=removeBracketAndComma(field)
		
		sql_OrganisationName=row.OrganisationName
		field=sql_OrganisationName
		sql_OrganisationName=removeBracketAndComma(field)
		
		sql_ApplicationId=row.ApplicationId
		field=sql_ApplicationId
		sql_ApplicationId=removeBracketAndComma(field)
		
		sql_ApplicationReference=row.ApplicationReference
		field=sql_ApplicationReference
		sql_ApplicationReference=removeBracketAndComma(field)
		
		sql_ApplicationType=row.ApplicationType
		field=sql_ApplicationType
		sql_ApplicationType=removeBracketAndComma(field)
		
		sql_ApplicationProductType=row.ApplicationProductType
		field=sql_ApplicationProductType
		sql_ApplicationProductType=removeBracketAndComma(field)
		
		sql_ApplicationUnderwriterEmail=row.ApplicationUnderwriterEmail
		field=sql_ApplicationUnderwriterEmail
		sql_ApplicationUnderwriterEmail=removeBracketAndComma(field)
		
		sql_LimitId=row.LimitId
		field=sql_LimitId
		sql_LimitId=removeBracketAndComma(field)
		
		sql_CoverShortName=row.CoverShortName
		field=sql_CoverShortName
		sql_CoverShortName=removeBracketAndComma(field)
		
		sql_LimitName=row.LimitName
		field=sql_LimitName
		sql_LimitName=removeBracketAndComma(field)
		
		sql_CurrencyCode=row.CurrencyCode
		field=sql_CurrencyCode
		sql_CurrencyCode=removeBracketAndComma(field)
		
		sql_Amount=row.Amount
		field=sql_Amount
		sql_Amount=removeBracketAndComma(field)
		
		sql_IsPrimary=row.IsPrimary
		field=sql_IsPrimary
		sql_IsPrimary=removeBracketAndComma(field)
		
		sql_isThePrimaryCoverLimit=row.isThePrimaryCoverLimit
		field=sql_isThePrimaryCoverLimit
		sql_isThePrimaryCoverLimit=removeBracketAndComma(field)
		
		sql_ApplicationFirstTransaction=row.ApplicationFirstTransaction
		field=sql_ApplicationFirstTransaction
		sql_ApplicationFirstTransaction=removeBracketAndComma(field)
		
		sql_PolicyStartDate=row.PolicyStartDate
		field=sql_PolicyStartDate
		sql_PolicyStartDate=removeBracketAndComma(field)
		
		sql_PolicyEndDate=row.PolicyEndDate
		field=sql_PolicyEndDate
		sql_PolicyEndDate=removeBracketAndComma(field)
		
		sql_IsRenewalApplication=row.IsRenewalApplication
		field=sql_IsRenewalApplication
		sql_IsRenewalApplication=removeBracketAndComma(field)
		
		sql_VesselId=row.VesselId
		field=sql_VesselId
		sql_VesselId=removeBracketAndComma(field)
		
		sql_ImoNumber=row.ImoNumber
		field=sql_ImoNumber
		sql_ImoNumber=removeBracketAndComma(field)
		
		sql_VesselName=row.VesselName
		field=sql_VesselName
		sql_VesselName=removeBracketAndComma(field)
		
		sql_VesselType=row.VesselType
		field=sql_VesselType
		sql_VesselType=removeBracketAndComma(field)
		
		sql_CallSign=row.CallSign
		field=sql_CallSign
		sql_CallSign=removeBracketAndComma(field)
		
		sql_EnteredDate=row.EnteredDate
		field=sql_EnteredDate
		sql_EnteredDate=removeBracketAndComma(field)
		
		sql_GrossTonnage=row.GrossTonnage
		field=sql_GrossTonnage
		sql_GrossTonnage=removeBracketAndComma(field)
		
		sql_PassengerCarryingCapacity=row.PassengerCarryingCapacity
		field=sql_PassengerCarryingCapacity
		sql_PassengerCarryingCapacity=removeBracketAndComma(field)
		
		sql_YearBuilt=row.YearBuilt
		field=sql_YearBuilt
		sql_YearBuilt=removeBracketAndComma(field)
		
		sql_FlagCountryCode=row.FlagCountryCode
		field=sql_FlagCountryCode
		sql_FlagCountryCode=removeBracketAndComma(field)
		
		sql_FlagCountryName=row.FlagCountryName
		field=sql_FlagCountryName
		sql_FlagCountryName=removeBracketAndComma(field)
		
		sql_PortOfRegistryCode=row.PortOfRegistryCode
		field=sql_PortOfRegistryCode
		sql_PortOfRegistryCode=removeBracketAndComma(field)
		
		sql_PortOfRegistryName=row.PortOfRegistryName
		field=sql_PortOfRegistryName
		sql_PortOfRegistryName=removeBracketAndComma(field)
		
		sql_RiskCategoryName=row.RiskCategoryName
		field=sql_RiskCategoryName
		sql_RiskCategoryName=removeBracketAndComma(field)
		
		sql_TrademarkEngineModelNumber=row.TrademarkEngineModelNumber
		field=sql_TrademarkEngineModelNumber
		sql_TrademarkEngineModelNumber=removeBracketAndComma(field)
		
		sql_VesselMake=row.VesselMake
		field=sql_VesselMake
		sql_VesselMake=removeBracketAndComma(field)
		
		sql_EngineHorsePower=row.EngineHorsePower
		field=sql_EngineHorsePower
		sql_EngineHorsePower=removeBracketAndComma(field)
		
		sql_TenderSerialNumber=row.TenderSerialNumber
		field=sql_TenderSerialNumber
		sql_TenderSerialNumber=removeBracketAndComma(field)
	
		sql_MotorSerialNumber=row.MotorSerialNumber
		field=sql_MotorSerialNumber
		sql_MotorSerialNumber=removeBracketAndComma(field)
		
		sqlWriter.println(sql_ApplicationRiskId+","+sql_RiskId+","+sql_RiskReference+","+sql_MemberId+","+sql_MemberReference+","+sql_OrganisationName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+sql_LimitId+","+sql_CoverShortName+","+sql_LimitName+","+sql_CurrencyCode+","+sql_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_EnteredDate+","+sql_GrossTonnage+","+sql_PassengerCarryingCapacity+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+sql_VesselMake+","+sql_EngineHorsePower+","+sql_TenderSerialNumber+","+sql_MotorSerialNumber)
		log.info "SQL response is : "+sql_ApplicationRiskId+","+sql_RiskId+","+sql_RiskReference+","+sql_MemberId+","+sql_MemberReference+","+sql_OrganisationName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+sql_LimitId+","+sql_CoverShortName+","+sql_LimitName+","+sql_CurrencyCode+","+sql_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselName+","+sql_VesselType+","+sql_CallSign+","+sql_EnteredDate+","+sql_GrossTonnage+","+sql_PassengerCarryingCapacity+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+sql_VesselMake+","+sql_EngineHorsePower+","+sql_TenderSerialNumber+","+sql_MotorSerialNumber

		//Set the filterType at test case level
		String filterType = "vesselName"
		testRunner.testCase.setPropertyValue("filterType",filterType)
		//Set the FilietValue at test case level
		String filterValue = "test"
		testRunner.testCase.setPropertyValue("filterValue",filterValue)
		//Set the riskType at test case level
		String risktype = "vessel"
		testRunner.testCase.setPropertyValue("risktype",risktype)
		//Set the excludeVessel at test case level
		String excludeVessel = "false"
		testRunner.testCase.setPropertyValue("excludeVessel",excludeVessel)
		
		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
	
		//Run the test step to get response
		testRunner.runTestStepByName("FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse")
		String req='${FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse#Response}'
		response=context.expand(req)
		//log.info "API Response received as : "+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info("HTTP status code: " + httpStatusCode)
	
		String error = response
		if(httpStatusCode.equals("200"))
		{
			int recordCount = jsonRes.totalRecords
			for (int i=0; i<recordCount; i++)
			{
				newId = jsonRes.results.applicationRiskId[i]
				if(sql_ApplicationRiskId.toString().equals(newId.toString()))
				{
					api_ApplicationRiskId=jsonRes.results.applicationRiskId[i]
					field=api_ApplicationRiskId
					api_ApplicationRiskId=removeBracketAndComma(field)
					
					api_RiskId=jsonRes.results.id[i]
					field=api_RiskId
					api_RiskId=removeBracketAndComma(field)
				
					api_RiskReference=jsonRes.results.reference[i]
					field=api_RiskReference
					api_RiskReference=removeBracketAndComma(field)
					
					api_MemberId=jsonRes.results.memberId[i]
					field=api_MemberId
					api_MemberId=removeBracketAndComma(field)
					
					api_MemberReference=jsonRes.results.memberReference[i]
					field=api_MemberReference
					api_MemberReference=removeBracketAndComma(field)
					
					api_OrganisationName=jsonRes.results.memberName[i]
					field=api_OrganisationName
					api_OrganisationName=removeBracketAndComma(field)
					
					api_ApplicationId=jsonRes.results.applicationId[i]
					field=api_ApplicationId
					api_ApplicationId=removeBracketAndComma(field)
					
					api_ApplicationReference=jsonRes.results.applicationReference[i]
					field=api_ApplicationReference
					api_ApplicationReference=removeBracketAndComma(field)
					
					api_ApplicationType=jsonRes.results.applicationType[i]
					field=api_ApplicationType
					api_ApplicationType=removeBracketAndComma(field)
					
					api_ApplicationProductType=jsonRes.results.applicationProductType[i]
					field=api_ApplicationProductType
					api_ApplicationProductType=removeBracketAndComma(field)
					
					api_ApplicationUnderwriterEmail=jsonRes.results.applicationUnderwriterEmail[i]
					field=api_ApplicationUnderwriterEmail
					api_ApplicationUnderwriterEmail=removeBracketAndComma(field)
					
					api_LimitId=jsonRes.results.applicationCoverLimits.id[i]
					field=api_LimitId
					api_LimitId=removeBracketAndComma(field)
					
					api_CoverShortName=jsonRes.results.applicationCoverLimits.coverShortName[i]
					field=api_CoverShortName
					api_CoverShortName=removeBracketAndComma(field)
					
					api_LimitName=jsonRes.results.applicationCoverLimits.limitName[i]
					field=api_LimitName
					api_LimitName=removeBracketAndComma(field)
					
					api_CurrencyCode=jsonRes.results.applicationCoverLimits.currencyCode[i]
					field=api_CurrencyCode
					api_CurrencyCode=removeBracketAndComma(field)
					
					api_Amount=jsonRes.results.applicationCoverLimits.amount[i]
					field=api_Amount
					api_Amount=removeBracketAndComma(field)
					
					api_isThePrimaryCoverLimit=jsonRes.results.applicationCoverLimits.isThePrimaryCoverLimit[i]
					field=api_isThePrimaryCoverLimit
					api_isThePrimaryCoverLimit=removeBracketAndComma(field)
					
					api_ApplicationFirstTransaction=jsonRes.results.applicationFirstTransaction[i]
					field=api_ApplicationFirstTransaction
					api_ApplicationFirstTransaction=removeBracketAndComma(field)
					
					api_PolicyStartDate=jsonRes.results.policyStartDate[i]
					field=api_PolicyStartDate
					api_PolicyStartDate=removeBracketAndComma(field)
					
					api_PolicyEndDate=jsonRes.results.policyEndDate[i]
					field=api_PolicyEndDate
					api_PolicyEndDate=removeBracketAndComma(field)
					
					api_IsRenewalApplication=jsonRes.results.isRenewalApplication[i]
					field=api_IsRenewalApplication
					api_IsRenewalApplication=removeBracketAndComma(field)
					
					api_VesselId=jsonRes.results.vessel.id[i]
					field=api_VesselId
					api_VesselId=removeBracketAndComma(field)
					
					api_ImoNumber=jsonRes.results.vessel.imoNumber[i]
					field=api_ImoNumber
					api_ImoNumber=removeBracketAndComma(field)
					
					api_VesselName=jsonRes.results.vessel.vesselName[i]
					field=api_VesselName
					api_VesselName=removeBracketAndComma(field)
					
					api_VesselType=jsonRes.results.vessel.vesselType[i]
					field=api_VesselType
					api_VesselType=removeBracketAndComma(field)
					
					api_CallSign=jsonRes.results.vessel.callSign[i]
					field=api_CallSign
					api_CallSign=removeBracketAndComma(field)
					
					api_EnteredDate=jsonRes.results.vessel.enteredDate[i]
					field=api_EnteredDate
					api_EnteredDate=removeBracketAndComma(field)
					
					api_GrossTonnage=jsonRes.results.vessel.grossTonnage[i]
					field=api_GrossTonnage
					api_GrossTonnage=removeBracketAndComma(field)
					
					api_PassengerCarryingCapacity=jsonRes.results.vessel.noOfPassengers[i]
					field=api_PassengerCarryingCapacity
					api_PassengerCarryingCapacity=removeBracketAndComma(field)
					
					api_YearBuilt=jsonRes.results.vessel.yearBuilt[i]
					field=api_YearBuilt
					api_YearBuilt=removeBracketAndComma(field)
					
					api_FlagCountryCode=jsonRes.results.vessel.flagCountryCode[i]
					field=api_FlagCountryCode
					api_FlagCountryCode=removeBracketAndComma(field)
					
					api_FlagCountryName=jsonRes.results.vessel.flagCountryName[i]
					field=api_FlagCountryName
					api_FlagCountryName=removeBracketAndComma(field)
					
					api_PortOfRegistryCode=jsonRes.results.vessel.portOfRegistryCode[i]
					field=api_PortOfRegistryCode
					api_PortOfRegistryCode=removeBracketAndComma(field)
					
					api_PortOfRegistryName=jsonRes.results.vessel.portOfRegistryName[i]
					field=api_PortOfRegistryName
					api_PortOfRegistryName=removeBracketAndComma(field)
					
					api_RiskCategoryName=jsonRes.results.vessel.riskCategoryName[i]
					field=api_RiskCategoryName
					api_RiskCategoryName=removeBracketAndComma(field)
					
					api_TrademarkEngineModelNumber=jsonRes.results.vessel.trademarkAndEngineModel[i]
					field=api_TrademarkEngineModelNumber
					api_TrademarkEngineModelNumber=removeBracketAndComma(field)
			
					api_VesselMake=jsonRes.results.vessel.vesselMake[i]
					field=api_VesselMake
					api_VesselMake=removeBracketAndComma(field)
					
					api_EngineHorsePower=jsonRes.results.vessel.engineHorsePower[i]
					field=api_EngineHorsePower
					api_EngineHorsePower=removeBracketAndComma(field)
					
					api_TenderSerialNumber=jsonRes.results.vessel.tenderSerialNumbers[i]
					field=api_TenderSerialNumber
					api_TenderSerialNumber=removeBracketAndComma(field)
					
					api_MotorSerialNumber=jsonRes.results.vessel.motorSerialNumbers[i]
					field=api_MotorSerialNumber
					api_MotorSerialNumber=removeBracketAndComma(field)
		
					apiWriter.println(api_ApplicationRiskId+","+api_RiskId+","+api_RiskReference+","+api_MemberId+","+api_MemberReference+","+api_OrganisationName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_ApplicationProductType+","+api_ApplicationUnderwriterEmail+","+api_LimitId+","+api_CoverShortName+","+api_LimitName+","+api_CurrencyCode+","+api_Amount+","+api_isThePrimaryCoverLimit+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_VesselId+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_EnteredDate+","+api_GrossTonnage+","+api_PassengerCarryingCapacity+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_TrademarkEngineModelNumber+","+api_VesselMake+","+api_EngineHorsePower+","+api_TenderSerialNumber+","+api_MotorSerialNumber)
					log.info "API response received : "+api_ApplicationRiskId+","+api_RiskId+","+api_RiskReference+","+api_MemberId+","+api_MemberReference+","+api_OrganisationName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_ApplicationProductType+","+api_ApplicationUnderwriterEmail+","+api_LimitId+","+api_CoverShortName+","+api_LimitName+","+api_CurrencyCode+","+api_Amount+","+api_isThePrimaryCoverLimit+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_VesselId+","+api_ImoNumber+","+api_VesselName+","+api_VesselType+","+api_CallSign+","+api_EnteredDate+","+api_GrossTonnage+","+api_PassengerCarryingCapacity+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_TrademarkEngineModelNumber+","+api_VesselMake+","+api_EngineHorsePower+","+api_TenderSerialNumber+","+api_MotorSerialNumber
		
					if(sql_ApplicationRiskId.toString().equals(api_ApplicationRiskId.toString()) && sql_RiskId.toString().equals(api_RiskId.toString()) && sql_RiskReference.toString().equals(api_RiskReference.toString()) && sql_MemberId.toString().equals(api_MemberId.toString()) && sql_MemberReference.toString().equals(api_MemberReference.toString()) && sql_OrganisationName.toString().toUpperCase().equals(api_OrganisationName.toString().toUpperCase()) && sql_ApplicationId.toString().equals(api_ApplicationId.toString()) && sql_ApplicationReference.toString().equals(api_ApplicationReference.toString()) && sql_ApplicationType.toString().toUpperCase().equals(api_ApplicationType.toString().toUpperCase()) && sql_ApplicationProductType.toString().toUpperCase().equals(api_ApplicationProductType.toString().toUpperCase()) && sql_ApplicationUnderwriterEmail.toString().toUpperCase().equals(api_ApplicationUnderwriterEmail.toString().toUpperCase()) && sql_VesselId.toString().equals(api_VesselId.toString()) && sql_ImoNumber.toString().equals(api_ImoNumber.toString()) && sql_VesselName.toString().toUpperCase().equals(api_VesselName.toString().toUpperCase()) && sql_VesselType.toString().toUpperCase().equals(api_VesselType.toString().toUpperCase()) && sql_CallSign.toString().toUpperCase().equals(api_CallSign.toString().toUpperCase()) && sql_GrossTonnage.toString().equals(api_GrossTonnage.toString()) && sql_PassengerCarryingCapacity.toString().equals(api_PassengerCarryingCapacity.toString()) && sql_YearBuilt.toString().equals(api_YearBuilt.toString()) && sql_FlagCountryCode.toString().toUpperCase().equals(api_FlagCountryCode.toString().toUpperCase()) && sql_FlagCountryName.toString().toUpperCase().equals(api_FlagCountryName.toString().toUpperCase()) && sql_PortOfRegistryCode.toString().toUpperCase().equals(api_PortOfRegistryCode.toString().toUpperCase()) && sql_PortOfRegistryName.toString().toUpperCase().equals(api_PortOfRegistryName.toString().toUpperCase()) && sql_RiskCategoryName.toString().toUpperCase().equals(api_RiskCategoryName.toString().toUpperCase()) && sql_TrademarkEngineModelNumber.toString().equals(api_TrademarkEngineModelNumber.toString()) && sql_VesselMake.toString().equals(api_VesselMake.toString()) && sql_EngineHorsePower.toString().equals(api_EngineHorsePower.toString()) && sql_TenderSerialNumber.toString().equals(api_TenderSerialNumber.toString()) && sql_MotorSerialNumber.toString().equals(api_MotorSerialNumber.toString()))
					{
						compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskId+","+api_RiskId+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_OrganisationName+","+api_OrganisationName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_ApplicationProductType+","+api_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+api_ApplicationUnderwriterEmail+","+sql_LimitId+","+api_LimitId+","+sql_CoverShortName+","+api_CoverShortName+","+sql_LimitName+","+api_LimitName+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_Amount+","+api_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+api_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+api_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_IsRenewalApplication+","+api_IsRenewalApplication+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_EnteredDate+","+api_EnteredDate+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_PassengerCarryingCapacity+","+api_PassengerCarryingCapacity+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+sql_VesselMake+","+api_VesselMake+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TenderSerialNumber+","+api_TenderSerialNumber+","+sql_MotorSerialNumber+","+api_MotorSerialNumber+","+"Test case Passed")
						log.info "Details are matching hence test case is passed"
						break;
					}
					else
					{
						compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskId+","+api_RiskId+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_OrganisationName+","+api_OrganisationName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_ApplicationProductType+","+api_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+api_ApplicationUnderwriterEmail+","+sql_LimitId+","+api_LimitId+","+sql_CoverShortName+","+api_CoverShortName+","+sql_LimitName+","+api_LimitName+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_Amount+","+api_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+api_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+api_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_IsRenewalApplication+","+api_IsRenewalApplication+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselName+","+api_VesselName+","+sql_VesselType+","+api_VesselType+","+sql_CallSign+","+api_CallSign+","+sql_EnteredDate+","+api_EnteredDate+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_PassengerCarryingCapacity+","+api_PassengerCarryingCapacity+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+sql_VesselMake+","+api_VesselMake+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TenderSerialNumber+","+api_TenderSerialNumber+","+sql_MotorSerialNumber+","+api_MotorSerialNumber+","+"Test case failed")
						log.info "Details are not matching hence test case is failed"
						break;
					}
				}
			}	
		}
	counter = counter+1
	log.info "Number of records verified are : "+counter
}

public String removeBracketAndComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************End of Script for Risk With MultipleParameters for Filter Type as VesselName and Risk Type as Vessel Exclude Vessel False************"]]></script></con:config></con:testStep><con:testStep type="restrequest" name="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselTrue" id="c50367a8-288a-48db-94b6-5c5f5bef850f"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/risks/" methodName="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselFalse" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="FilterTypeVesselNameAndRiskTypeVesselExcludeVesselTrue" id="e0d4d754-0c67-4971-8aa2-5f6e043f92e4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/risks/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="excludeVessel" value="True" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filterType</con:entry><con:entry>filterValue</con:entry><con:entry>risktype</con:entry><con:entry>excludeVessel</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Groovy_FilterTypeVesselNameAndRiskTypeVesselAndExcludeVesslTrue" id="41034098-5b0d-46b1-ab55-29a85a73e683" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Risk With MultipleParameters for Filter Type as VesselName and Risk Type as Vessel and Exclude Vessel True************"

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
		"""
		USE TOM
		SELECT 
		DISTINCT
		TOP 10
		ar.Id as ApplicationRiskId, r.Id as RiskId, r.Reference as RiskReference, ma.Id as MemberId,ma.Reference as MemberReference, p.OrganisationName,
		ab.Id as ApplicationId, ab.Reference as ApplicationReference, ab.Discriminator as ApplicationType, cc.Name as ApplicationProductType, 
		[user].EmailAddress as ApplicationUnderwriterEmail, l.Id as LimitId, c.ShortCode as CoverShortName, l.Name as LimitName, rc.ShortCode as CurrencyCode,
		acvltv.ValueDecimal as Amount,
		tc.IsPrimary, 
		case when tc.IsPrimary = 1 then 'True' 	
		when tc.IsPrimary = 0 then 'False' 
		else NULL end as isThePrimaryCoverLimit,
		Case when ab.Discriminator = 'Quote' then (select MIN(tq.Id)
		from ApplicationBase appb 
		join [Transaction] tq on tq.QuoteBase_Id = appb.Id 
		where appb.Id = ab.Id
		group by appb.id) 
		When ab.Discriminator = 'Policy' then (select MIN(tp.Id)
		from ApplicationBase appb 
		join [Transaction] tp on tp.Policy_Id = appb.Id 
		where appb.Id = ab.Id
		group by appb.id)  end as ApplicationFirstTransaction,
		ab.PolicyStart as PolicyStartDate,
		ab.PolicyEnd as PolicyEndDate,
		case when ab.Discriminator = 'Renewal Quote' then 'True'
		else 'False' end as IsRenewalApplication,
		rv.Id as VesselId, rv.ImoNumber, r.Name as VesselName, rvt.Name as VesselType, rv.CallSign, r.Entered as EnteredDate, rv.GrossTonnage, rv.PassengerCarryingCapacity,
		rv.YearBuilt,con.ShortCode as FlagCountryCode, con.Name as FlagCountryName, rp.ShortCode as PortOfRegistryCode, rp.Name as PortOfRegistryName, 
		rst.Name as RiskCategoryName,rv.TrademarkEngineModelNumber, rvm.Name as VesselMake, rv.EngineHorsePower, rv.TenderSerialNumber,
		rv.OutboardMotorSerialNumber as MotorSerialNumber 
		from ApplicationBase ab
		join ApplicationMemberAssured ama on ab.Id = ama.Application_Id
		join MemberAssured ma on ma.id = ama.MemberAssured_Id
		join Party p on p.id = ma.Party_Id
		join ApplicationRisk ar on ar.ApplicationMemberAssured_Id = ama.id 
		join Risk r on r.id = ar.Risk_Id
		join RiskVessel rv on rv.id = r.id
		join ref_VesselType rvt on rvt.id = rv.[Type_Id]
		LEFT join ApplicationCover AC on AB.Id = AC.Application_Id 
		Left Join TemplateCover TC on AC.TemplateCover_Id = TC.Id 
		AND TC.VersionedLinkBase_PhysicalDeletionAttemptPrevented = 0 
		Left Join Cover C on TC.Cover_Id = C.Id 
		AND C.Cover_PhysicalDeletionAttemptPrevented = 0
		left join CoverCategory cc on cc.id = c.CoverCategory_Id 
		LEFT Join [User] on AB.Underwriter_Id = [User].Id 
		left join ApplicationCoverVariation acv on acv.ApplicationCover_Id = ac.id
		left join ApplicationCoverVariationLimit acvl on acvl.CoverVariation_Id = acv.id
		left join ApplicationCoverVariationLimitTagValue acvltv on acvltv.ApplicationCoverVariationLimit_Id = acvl.id
		left join TemplateCoverLimit tcl on tcl.id = acvl.TemplateCoverLimit_Id
		left join CoverLimit cl on cl.id = tcl.CoverLimit_Id
		left join Limit l on l.id = cl.Limit_Id
		left join ref_Currency rc on rc.id = acvltv.Currency_Id
		left join ref_Country con on con.id = rv.Flag_Id
		left join ref_Port rp on rp.id = rv.PortOfRegistry_Id
		left join TemplatePermittedRiskSubType tprst on tprst.Template_Id = tc.Template_Id
		left join ref_RiskSubType rst on rst.id = tprst.RiskSubType_Id
		left join ref_VesselMake rvm on rvm.id = rv.VesselMake_Id
		where r.Name like '%test%' and ab.discriminator = 'Policy'
		"""
//============================================================================================//
//============================Code for writing SQL response into csv/text file===================================//
//============================================================================================//
	
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselTrue.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselTrue.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselTrue.csv"]

//def sqlResponseFile=["C:\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselTrue"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselTrue"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskWithMultipleParametersForFilterTypeasVesselNameAndRiskTypeasVesselAndExcludeVesselTrue"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()
				
sqlWriter.println("SQL_ApplicationRiskId"+","+"SQL_RiskId"+","+"SQL_RiskReference"+","+"SQL_MemberId"+","+"SQL_MemberReference"+","+"SQL_OrganisationName"+","+"SQL_ApplicationId"+","+"SQL_ApplicationReference"+","+"SQL_ApplicationType"+","+"SQL_ApplicationProductType"+","+"SQL_ApplicationUnderwriterEmail"+","+"SQL_LimitId"+","+"SQL_CoverShortName"+","+"SQL_LimitName"+","+"SQL_CurrencyCode"+","+"SQL_Amount"+","+"SQL_IsPrimary"+","+"SQL_isThePrimaryCoverLimit"+","+"SQL_ApplicationFirstTransaction"+","+"SQL_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"SQL_IsRenewalApplication"+","+"SQL_TrademarkAndEngineModel")
apiWriter.println("API_ApplicationRiskId"+","+"API_RiskId"+","+"API_RiskReference"+","+"API_MemberId"+","+"API_MemberReference"+","+"API_OrganisationName"+","+"API_ApplicationId"+","+"API_ApplicationReference"+","+"API_ApplicationType"+","+"API_ApplicationProductType"+","+"API_ApplicationUnderwriterEmail"+","+"API_LimitId"+","+"API_CoverShortName"+","+"API_LimitName"+","+"API_CurrencyCode"+","+"API_Amount"+","+"API_isThePrimaryCoverLimit"+","+"API_ApplicationFirstTransaction"+","+"API_PolicyStartDate"+","+"API_PolicyEndDate"+","+"API_IsRenewalApplication"+","+"API_TrademarkAndEngineModel")
compareWriter.println("SQL_ApplicationRiskId"+","+"API_ApplicationRiskId"+","+"SQL_RiskId"+","+"API_RiskId"+","+"SQL_RiskReference"+","+"API_RiskReference"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_OrganisationName"+","+"API_OrganisationName"+","+"SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_ApplicationType"+","+"API_ApplicationType"+","+"SQL_ApplicationProductType"+","+"API_ApplicationProductType"+","+"SQL_ApplicationUnderwriterEmail"+","+"API_ApplicationUnderwriterEmail"+","+"SQL_LimitId"+","+"API_LimitId"+","+"SQL_CoverShortName"+","+"API_CoverShortName"+","+"SQL_LimitName"+","+"API_LimitName"+","+"SQL_CurrencyCode"+","+"API_CurrencyCode"+","+"SQL_Amount"+","+"API_Amount"+","+"SQL_IsPrimary"+","+"SQL_isThePrimaryCoverLimit"+","+"API_isThePrimaryCoverLimit"+","+"SQL_ApplicationFirstTransaction"+","+"API_ApplicationFirstTransaction"+","+"SQL_PolicyStartDate"+","+"API_PolicyStartDate"+","+"SQL_PolicyEndDate"+","+"API_PolicyEndDate"+","+"SQL_IsRenewalApplication"+","+"API_IsRenewalApplication"+","+"SQL_TrademarkAndEngineModel"+","+"API_TrademarkAndEngineModel"+","+"SQL_TrademarkAndEngineModel"+","+"API_TrademarkAndEngineModel"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null

int counter=0
String field=null

con.eachRow(sqlstmt)
{	
	row -> 
		sql_ApplicationRiskId=row.ApplicationRiskId
		sql_ApplicationRiskId=removeBracketAndComma(sql_ApplicationRiskId.toString())
		
		sql_RiskId=row.RiskId
		sql_RiskId=removeBracketAndComma(sql_RiskId.toString())
		
		sql_RiskReference=row.RiskReference
		sql_RiskReference=removeBracketAndComma(sql_RiskReference.toString())
		
		sql_MemberId=row.MemberId
		sql_MemberId=removeBracketAndComma(sql_MemberId.toString())
		
		sql_MemberReference=row.MemberReference
		sql_MemberReference=removeBracketAndComma(sql_MemberReference.toString())
		
		sql_OrganisationName=row.OrganisationName
		sql_OrganisationName=removeBracketAndComma(sql_OrganisationName.toString())
		
		sql_ApplicationId=row.ApplicationId
		sql_ApplicationId=removeBracketAndComma(sql_ApplicationId.toString())
		
		sql_ApplicationReference=row.ApplicationReference
		sql_ApplicationReference=removeBracketAndComma(sql_ApplicationReference.toString())
		
		sql_ApplicationType=row.ApplicationType
		sql_ApplicationType=removeBracketAndComma(sql_ApplicationType.toString())
		
		sql_ApplicationProductType=row.ApplicationProductType
		sql_ApplicationProductType=removeBracketAndComma(sql_ApplicationProductType.toString())
		
		sql_ApplicationUnderwriterEmail=row.ApplicationUnderwriterEmail
		sql_ApplicationUnderwriterEmail=removeBracketAndComma(sql_ApplicationUnderwriterEmail.toString())
		
		sql_LimitId=row.LimitId
		sql_LimitId=removeBracketAndComma(sql_LimitId.toString())
		
		sql_CoverShortName=row.CoverShortName
		sql_CoverShortName=removeBracketAndComma(sql_CoverShortName.toString())
		
		sql_LimitName=row.LimitName
		sql_LimitName=removeBracketAndComma(sql_LimitName.toString())
		
		sql_CurrencyCode=row.CurrencyCode
		sql_CurrencyCode=removeBracketAndComma(sql_CurrencyCode.toString())
		
		sql_Amount=row.Amount
		sql_Amount=removeBracketAndComma(sql_Amount.toString())
		
		sql_IsPrimary=row.IsPrimary
		sql_IsPrimary=removeBracketAndComma(sql_IsPrimary.toString())
		
		sql_isThePrimaryCoverLimit=row.isThePrimaryCoverLimit
		sql_isThePrimaryCoverLimit=removeBracketAndComma(sql_isThePrimaryCoverLimit.toString())
		
		sql_ApplicationFirstTransaction=row.ApplicationFirstTransaction
		sql_ApplicationFirstTransaction=removeBracketAndComma(sql_ApplicationFirstTransaction.toString())
		
		sql_PolicyStartDate=row.PolicyStartDate
		sql_PolicyStartDate=removeBracketAndComma(sql_PolicyStartDate.toString())
		
		sql_PolicyEndDate=row.PolicyEndDate
		sql_PolicyEndDate=removeBracketAndComma(sql_PolicyEndDate.toString())
		
		sql_IsRenewalApplication=row.IsRenewalApplication
		sql_IsRenewalApplication=removeBracketAndComma(sql_IsRenewalApplication.toString())

		sql_TrademarkAndEngineModel=row.TrademarkEngineModelNumber
		sql_TrademarkAndEngineModel=removeBracketAndComma(sql_TrademarkAndEngineModel.toString())
		
		sqlWriter.println(sql_ApplicationRiskId+","+sql_RiskId+","+sql_RiskReference+","+sql_MemberId+","+sql_MemberReference+","+sql_OrganisationName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+sql_LimitId+","+sql_CoverShortName+","+sql_LimitName+","+sql_CurrencyCode+","+sql_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication+","+sql_TrademarkAndEngineModel)
		log.info "SQL response is : "+sql_ApplicationRiskId+","+sql_RiskId+","+sql_RiskReference+","+sql_MemberId+","+sql_MemberReference+","+sql_OrganisationName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+sql_LimitId+","+sql_CoverShortName+","+sql_LimitName+","+sql_CurrencyCode+","+sql_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+sql_PolicyEndDate+","+sql_IsRenewalApplication+","+sql_TrademarkAndEngineModel

		//Set the filterType at test case level
		String filterType = "vesselName"
		testRunner.testCase.setPropertyValue("filterType",filterType)
		//Set the filterValue at test case level
		String filterValue = "test"
		testRunner.testCase.setPropertyValue("filterValue",filterValue)
		//Set the RiskType at test case level
		String risktype = "vessel"
		testRunner.testCase.setPropertyValue("risktype",risktype)
		//Set the ExcludeVessel at test case level
		String excludeVessel = "True"
		testRunner.testCase.setPropertyValue("excludeVessel",excludeVessel)

		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)
	
		testRunner.runTestStepByName("FilterTypeVesselNameAndRiskTypeVesselExcludeVesselTrue")
		String req='${FilterTypeVesselNameAndRiskTypeVesselExcludeVesselTrue#Response}'
		response=context.expand(req)
		//log.info "API Response received as : "+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["FilterTypeVesselNameAndRiskTypeVesselExcludeVesselTrue"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info("HTTP status code: " + httpStatusCode)
	
		String error = response
		if(httpStatusCode.equals("200"))
		{
			int recordCount = jsonRes.totalRecords
			for (int i=0; i<recordCount; i++)
			{
				newId = jsonRes.results.applicationRiskId[i]
				if(sql_ApplicationRiskId.toString().equals(newId.toString()))
				{
					api_ApplicationRiskId=jsonRes.results.applicationRiskId[i]
					api_ApplicationRiskId=removeBracketAndComma(api_ApplicationRiskId.toString())
					
					api_RiskId=jsonRes.results.id[i]
					api_RiskId=removeBracketAndComma(api_RiskId.toString())
				
					api_RiskReference=jsonRes.results.reference[i]
					api_RiskReference=removeBracketAndComma(api_RiskReference.toString())
					
					api_MemberId=jsonRes.results.memberId[i]
					api_MemberId=removeBracketAndComma(api_MemberId.toString())
					
					api_MemberReference=jsonRes.results.memberReference[i]
					api_MemberReference=removeBracketAndComma(api_MemberReference.toString())
					
					api_OrganisationName=jsonRes.results.memberName[i]
					api_OrganisationName=removeBracketAndComma(api_OrganisationName.toString())
					
					api_ApplicationId=jsonRes.results.applicationId[i]
					api_ApplicationId=removeBracketAndComma(api_ApplicationId.toString())
					
					api_ApplicationReference=jsonRes.results.applicationReference[i]
					api_ApplicationReference=removeBracketAndComma(api_ApplicationReference.toString())
					
					api_ApplicationType=jsonRes.results.applicationType[i]
					api_ApplicationType=removeBracketAndComma(api_ApplicationType.toString())
					
					api_ApplicationProductType=jsonRes.results.applicationProductType[i]
					api_ApplicationProductType=removeBracketAndComma(api_ApplicationProductType.toString())
					
					api_ApplicationUnderwriterEmail=jsonRes.results.applicationUnderwriterEmail[i]
					api_ApplicationUnderwriterEmail=removeBracketAndComma(api_ApplicationUnderwriterEmail.toString())
					
					api_LimitId=jsonRes.results.applicationCoverLimits.id[i]
					api_LimitId=removeBracketAndComma(api_LimitId.toString())
					
					api_CoverShortName=jsonRes.results.applicationCoverLimits.CoverShortName[i]
					api_CoverShortName=removeBracketAndComma(api_CoverShortName.toString())
					
					api_LimitName=jsonRes.results.applicationCoverLimits.LimitName[i]
					api_LimitName=removeBracketAndComma(api_LimitName.toString())
					
					api_CurrencyCode=jsonRes.results.applicationCoverLimits.currencyCode[i]
					api_CurrencyCode=removeBracketAndComma(api_CurrencyCode.toString())
					
					api_Amount=jsonRes.results.applicationCoverLimits.Amount[i]
					api_Amount=removeBracketAndComma(api_Amount.toString())
					
					api_isThePrimaryCoverLimit=jsonRes.results.applicationCoverLimits.IsThePrimaryCoverLimit[i]
					api_isThePrimaryCoverLimit=removeBracketAndComma(api_isThePrimaryCoverLimit.toString())
					
					api_ApplicationFirstTransaction=jsonRes.results.applicationFirstTransaction[i]
					api_ApplicationFirstTransaction=removeBracketAndComma(api_ApplicationFirstTransaction.toString())
					
					api_PolicyStartDate=jsonRes.results.policyStartDate[i]
					api_PolicyStartDate=removeBracketAndComma(api_PolicyStartDate.toString())
					
					api_PolicyEndDate=jsonRes.results.policyEndDate[i]
					api_PolicyEndDate=removeBracketAndComma(api_PolicyEndDate.toString())
					
					api_IsRenewalApplication=jsonRes.results.isRenewalApplication[i]
					api_IsRenewalApplication=removeBracketAndComma(api_IsRenewalApplication.toString())

					api_trademarkAndEngineModel=jsonRes.results.vessel.trademarkAndEngineModel
					api_trademarkAndEngineModel=removeBracketAndComma(api_trademarkAndEngineModel.toString())
		
					apiWriter.println(api_ApplicationRiskId+","+api_RiskId+","+api_RiskReference+","+api_MemberId+","+api_MemberReference+","+api_OrganisationName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_ApplicationProductType+","+api_ApplicationUnderwriterEmail+","+api_LimitId+","+api_CoverShortName+","+api_LimitName+","+api_CurrencyCode+","+api_Amount+","+api_isThePrimaryCoverLimit+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_trademarkAndEngineModel)
					log.info "API response received : "+api_ApplicationRiskId+","+api_RiskId+","+api_RiskReference+","+api_MemberId+","+api_MemberReference+","+api_OrganisationName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_ApplicationProductType+","+api_ApplicationUnderwriterEmail+","+api_LimitId+","+api_CoverShortName+","+api_LimitName+","+api_CurrencyCode+","+api_Amount+","+api_isThePrimaryCoverLimit+","+api_ApplicationFirstTransaction+","+api_PolicyStartDate+","+api_PolicyEndDate+","+api_IsRenewalApplication+","+api_trademarkAndEngineModel
		
					if(sql_ApplicationRiskId.toString().equals(api_ApplicationRiskId.toString()) && sql_RiskId.toString().equals(api_RiskId.toString()) && sql_RiskReference.toString().equals(api_RiskReference.toString()) && sql_MemberId.toString().equals(api_MemberId.toString()) && sql_MemberReference.toString().equals(api_MemberReference.toString()) && sql_OrganisationName.toString().toUpperCase().equals(api_OrganisationName.toString().toUpperCase()) && sql_ApplicationId.toString().equals(api_ApplicationId.toString()) && sql_ApplicationReference.toString().equals(api_ApplicationReference.toString()) && sql_ApplicationType.toString().toUpperCase().equals(api_ApplicationType.toString().toUpperCase()) && sql_ApplicationProductType.toString().toUpperCase().equals(api_ApplicationProductType.toString().toUpperCase()) && sql_ApplicationUnderwriterEmail.toString().toUpperCase().equals(api_ApplicationUnderwriterEmail.toString().toUpperCase()) && +","+api_trademarkAndEngineModel.toString().equals(sql_TrademarkAndEngineModel))
					{
						compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskId+","+api_RiskId+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_OrganisationName+","+api_OrganisationName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_ApplicationProductType+","+api_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+api_ApplicationUnderwriterEmail+","+sql_LimitId+","+api_LimitId+","+sql_CoverShortName+","+api_CoverShortName+","+sql_LimitName+","+api_LimitName+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_Amount+","+api_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+api_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+api_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_IsRenewalApplication+","+api_IsRenewalApplication+","+sql_TrademarkAndEngineModel+","+api_trademarkAndEngineModel+","+"Test case Passed")
						log.info "Details are matching hence test case is passed"
						break;
					}
					else
					{
						compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskId+","+api_RiskId+","+sql_RiskReference+","+api_RiskReference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_OrganisationName+","+api_OrganisationName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_ApplicationProductType+","+api_ApplicationProductType+","+sql_ApplicationUnderwriterEmail+","+api_ApplicationUnderwriterEmail+","+sql_LimitId+","+api_LimitId+","+sql_CoverShortName+","+api_CoverShortName+","+sql_LimitName+","+api_LimitName+","+sql_CurrencyCode+","+api_CurrencyCode+","+sql_Amount+","+api_Amount+","+sql_IsPrimary+","+sql_isThePrimaryCoverLimit+","+api_isThePrimaryCoverLimit+","+sql_ApplicationFirstTransaction+","+api_ApplicationFirstTransaction+","+sql_PolicyStartDate+","+api_PolicyStartDate+","+sql_PolicyEndDate+","+api_PolicyEndDate+","+sql_IsRenewalApplication+","+api_IsRenewalApplication+","+sql_TrademarkAndEngineModel+","+api_trademarkAndEngineModel+","+"Test case failed")
						log.info "Details are not matching hence test case is failed"
						break;
					}
				}
			}	
		}
	counter = counter+1
	log.info "Number of records verified are : "+counter
}

public String removeBracketAndComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if(field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Ended at "+newDateTimeString+"************"
log.info "************End of Script for Risk With MultipleParameters for Filter Type as VesselName and Risk Type as Vessel and Exclude Vessel True************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>filterType</con:name><con:value>vesselName</con:value></con:property><con:property><con:name>filterValue</con:name><con:value>test</con:value></con:property><con:property><con:name>risktype</con:name><con:value>vessel</con:value></con:property><con:property><con:name>excludeVessel</con:name><con:value>True</con:value></con:property></con:properties></con:testCase><con:testCase id="6263f307-0131-40d0-81e4-71e19c9e807e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_RisksByApplicationRiskId" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="RiskByAppRiskId" id="bbb5e540-d4d9-4ffc-929c-b3dafbb2c0e2"><con:settings/><con:config service="http://spltomservices:44378" resourcePath="/api/utomapi/risks/${#TestCase#appRiskId}" methodName="RisksByApplicationRiskId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="RiskByAppRiskId" id="1f489ee0-a0bd-4659-a8b9-5451a5f096ea" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="Bearer ${#TestSuite#token}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://spltomservices:44378</con:endpoint><con:request/><con:originalUri>http://spltomservices/api/utomapi/risks/</con:originalUri><con:credentials><con:selectedAuthProfile>Profile_Broker</con:selectedAuthProfile><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="RisksByApplicationRiskId" id="f84fa85c-8ebf-4127-b6b7-b905164af0ec" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Risks By Application Risk Id************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
"""
USE TOM
select DISTINCT
TOP 10
AR.Id as ApplicationRiskId, R.Id as RiskId, R.Reference, AMA.MemberAssured_Id as MemberId, MA.Reference as MemberReference, P.OrganisationName as MemberName,
AB.Id as ApplicationId, AB.Reference as ApplicationReference, AB.Discriminator as ApplicationType, [User].EmailAddress, 
AB.PolicyStart, AB.PolicyEnd, RV.Id as VesselId, RV.ImoNumber, VT.Name as VesselType, R.Name as VesselName, RV.CallSign, RV.GrossTonnage,
RV.NumberOfGuests as NoOfPassengers, RV.YearBuilt, CON.ShortCode as FlagCountryCode, CON.Name as FlagCountryName, RP.ShortCode as PortOfRegistryCode, 
RP.Name as PortOfRegistryName, RST.Name as RiskCategoryName, RV.TrademarkEngineModelNumber, VM.Name as VesselMake, RV.EngineHorsePower, RV.TenderSerialNumber, 
RV.OutboardMotorSerialNumber
from ApplicationRisk AR 
inner join Risk R on R.Id = AR.Risk_Id
inner join ApplicationMemberAssured AMA on AMA.Id=AR.ApplicationMemberAssured_Id
inner join MemberAssured MA on MA.Id=AMA.MemberAssured_Id
inner join Party P on P.Id=MA.Party_Id
inner join ApplicationBase AB on AB.Id = AMA.Application_Id
join [user] on AB.Underwriter_Id = [User].Id
inner join History.RiskVessel RV on RV.Id= R.Id
inner join ref_RiskSubType RST on RST.Id=RV.Category_Id
inner join ref_VesselType VT on VT.Id=RV.Type_Id
left join ref_Country Con on Con.id = RV.Flag_Id
left join ref_Port RP on RP.Id = RV.PortOfRegistry_Id
right join ref_VesselMake VM on VM.Id = RV.VesselMake_Id
where AB.Discriminator not in ('AdditionalCoverQuote', 'RenewalQuote')
--and AR.Id=179030
order by 1 desc
"""
				
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskByApplicationRiskId.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskByApplicationRiskId.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskByApplicationRiskId.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskByApplicationRiskId"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskByApplicationRiskId"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskByApplicationRiskId"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationRiskId"+","+"SQL_RiskId"+","+"SQL_Reference"+","+"SQL_MemberId"+","+"SQL_MemberReference"+","+"SQL_MemberName"+","+"SQL_ApplicationId"+","+"SQL_ApplicationReference"+","+"SQL_ApplicationType"+","+"SQL_EmailAddress"+","+"SQL_PolicyStart"+","+"SQL_PolicyEnd"+","+"SQL_VesselId"+","+"SQL_ImoNumber"+","+"SQL_VesselType"+","+"SQL_VesselName"+","+"SQL_CallSign"+","+"SQL_GrossTonnage"+","+"SQL_NoOfPassengers"+","+"SQL_YearBuilt"+","+"SQL_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"SQL_TrademarkEngineModelNumber"+","+"SQL_VesselMake"+","+"SQL_EngineHorsePower"+","+"SQL_TenderSerialNumber"+","+"SQL_OutboardMotorSerialNumber")
apiWriter.println("API_ApplicationRiskId"+","+"API_RiskId"+","+"API_Reference"+","+"API_MemberId"+","+"API_MemberReference"+","+"API_MemberName"+","+"API_ApplicationId"+","+"API_ApplicationReference"+","+"API_ApplicationType"+","+"API_EmailAddress"+","+"API_PolicyStart"+","+"API_PolicyEnd"+","+"API_VesselId"+","+"API_ImoNumber"+","+"API_VesselType"+","+"API_VesselName"+","+"API_CallSign"+","+"API_GrossTonnage"+","+"API_NoOfPassengers"+","+"API_YearBuilt"+","+"API_FlagCountryCode"+","+"API_FlagCountryName"+","+"API_PortOfRegistryCode"+","+"API_PortOfRegistryName"+","+"API_RiskCategoryName"+","+"API_TrademarkEngineModelNumber"+","+"API_VesselMake"+","+"API_EngineHorsePower"+","+"API_TenderSerialNumber"+","+"API_OutboardMotorSerialNumber")
compareWriter.println("SQL_ApplicationRiskId"+","+"API_ApplicationRiskId"+","+"SQL_RiskId"+","+"API_RiskId"+","+"SQL_Reference"+","+"API_Reference"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_ApplicationType"+","+"API_ApplicationType"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_PolicyStart"+","+"API_PolicyStart"+","+"SQL_PolicyEnd"+","+"API_PolicyEnd"+","+"SQL_VesselId"+","+"API_VesselId"+","+"SQL_ImoNumber"+","+"API_ImoNumber"+","+"SQL_VesselType"+","+"API_VesselType"+","+"SQL_VesselName"+","+"API_VesselName"+","+"SQL_CallSign"+","+"API_CallSign"+","+"SQL_GrossTonnage"+","+"API_GrossTonnage"+","+"SQL_NoOfPassengers"+","+"API_NoOfPassengers"+","+"SQL_YearBuilt"+","+"API_YearBuilt"+","+"SQL_FlagCountryCode"+","+"API_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"API_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"API_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"API_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"API_RiskCategoryName"+","+"SQL_TrademarkEngineModelNumber"+","+"API_TrademarkEngineModelNumber"+","+"SQL_VesselMake"+","+"API_VesselMake"+","+"SQL_EngineHorsePower"+","+"API_EngineHorsePower"+","+"SQL_TenderSerialNumber"+","+"API_TenderSerialNumber"+","+"SQL_OutboardMotorSerialNumber"+","+"API_OutboardMotorSerialNumber"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter = 0;
//String field=null

con.eachRow(sqlstmt)
{	
	row ->
		sql_ApplicationRiskId=row.ApplicationRiskId
		sql_RiskId=row.RiskId
		sql_Reference=row.Reference
		sql_MemberId=row.MemberId
		sql_MemberReference=row.MemberReference
		sql_MemberName=row.MemberName
		sql_MemberName=removeBracketsAndComma(sql_MemberName.toString())
		sql_ApplicationId=row.ApplicationId
		sql_ApplicationReference=row.ApplicationReference
		sql_ApplicationType=row.ApplicationType
		sql_EmailAddress=row.EmailAddress
		sql_PolicyStart=row.PolicyStart
		sql_PolicyEnd=row.PolicyEnd
		sql_VesselId=row.VesselId
		sql_ImoNumber=row.ImoNumber
		sql_VesselType=row.VesselType
		sql_VesselName=row.VesselName
		sql_VesselName=removeBracketsAndComma(sql_VesselName.toString())
		sql_CallSign=row.CallSign
		sql_GrossTonnage=row.GrossTonnage
		sql_NoOfPassengers=row.NoOfPassengers
		sql_YearBuilt=row.YearBuilt
		sql_FlagCountryCode=row.FlagCountryCode
		sql_FlagCountryCode=removeBracketsAndComma(sql_FlagCountryCode.toString())
		sql_FlagCountryName=row.FlagCountryName
		sql_FlagCountryName=removeBracketsAndComma(sql_FlagCountryName.toString())
		sql_PortOfRegistryCode=row.PortOfRegistryCode
		sql_PortOfRegistryCode=removeBracketsAndComma(sql_PortOfRegistryCode.toString())
		sql_PortOfRegistryName=row.PortOfRegistryName
		sql_PortOfRegistryName=removeBracketsAndComma(sql_PortOfRegistryName.toString())
		sql_RiskCategoryName=row.RiskCategoryName
		sql_TrademarkEngineModelNumber=row.TrademarkEngineModelNumber
		sql_VesselMake=row.VesselMake
		sql_EngineHorsePower=row.EngineHorsePower
		sql_TenderSerialNumber=row.TenderSerialNumber
		sql_OutboardMotorSerialNumber=row.OutboardMotorSerialNumber

		sqlWriter.println(sql_ApplicationRiskId+","+sql_RiskId+","+sql_Reference+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_EmailAddress+","+sql_PolicyStart+","+sql_PolicyEnd+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselType+","+sql_VesselName+","+sql_CallSign+","+sql_GrossTonnage+","+sql_NoOfPassengers+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+sql_VesselMake+","+sql_EngineHorsePower+","+sql_TenderSerialNumber+","+sql_OutboardMotorSerialNumber)
		log.info "SQL response is : "+sql_ApplicationRiskId+","+sql_RiskId+","+sql_Reference+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_EmailAddress+","+sql_PolicyStart+","+sql_PolicyEnd+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselType+","+sql_VesselName+","+sql_CallSign+","+sql_GrossTonnage+","+sql_NoOfPassengers+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+sql_VesselMake+","+sql_EngineHorsePower+","+sql_TenderSerialNumber+","+sql_OutboardMotorSerialNumber

		//Set the ApplicationRisk ID at test case level
		String appRiskId = sql_ApplicationRiskId
		testRunner.testCase.setPropertyValue("appRiskId", appRiskId)
		
		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)

		//Run the test step to get response
		testRunner.runTestStepByName('RiskByAppRiskId')
		String req='${RiskByAppRiskId#Response}'
		response=context.expand(req)
		//log.info "API Response received is :"+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["RiskByAppRiskId"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info("HTTP status code: " + httpStatusCode)
	
		String error = response
		if(httpStatusCode.equals("200"))
		{
			api_ApplicationRiskId=jsonRes.applicationRiskId
			api_RiskId=jsonRes.id
			api_Reference=jsonRes.reference
			api_MemberId=jsonRes.memberId
			api_MemberReference=jsonRes.memberReference
			api_MemberName=jsonRes.memberName
			api_MemberName=removeBracketsAndComma(api_MemberName.toString())
			api_ApplicationId=jsonRes.applicationId
			api_ApplicationReference=jsonRes.applicationReference
			api_ApplicationType=jsonRes.applicationType
			api_EmailAddress=jsonRes.applicationUnderwriterEmail
			api_PolicyStart=jsonRes.policyStartDate
			api_PolicyEnd=jsonRes.policyEndDate
			api_VesselId=jsonRes.vessel.id
			api_ImoNumber=jsonRes.vessel.imoNumber
			api_VesselType=jsonRes.vessel.vesselType
			api_VesselName=jsonRes.vessel.vesselName
			api_VesselName=removeBracketsAndComma(api_VesselName.toString())
			api_CallSign=jsonRes.vessel.callSign
			api_GrossTonnage=jsonRes.vessel.grossTonnage
			api_NoOfPassengers=jsonRes.vessel.noOfPassengers
			api_YearBuilt=jsonRes.vessel.yearBuilt
			api_FlagCountryCode=jsonRes.vessel.flagCountryCode
			api_FlagCountryCode=removeBracketsAndComma(api_FlagCountryCode.toString())
			api_FlagCountryName=jsonRes.vessel.flagCountryName
			api_FlagCountryName=removeBracketsAndComma(api_FlagCountryName.toString())
			api_PortOfRegistryCode=jsonRes.vessel.portOfRegistryCode
			api_PortOfRegistryCode=removeBracketsAndComma(api_PortOfRegistryCode.toString())
			api_PortOfRegistryName=jsonRes.vessel.portOfRegistryName
			api_PortOfRegistryName=removeBracketsAndComma(api_PortOfRegistryName.toString())
			api_RiskCategoryName=jsonRes.vessel.riskCategoryName
			api_TrademarkEngineModelNumber=jsonRes.vessel.trademarkAndEngineModel
			api_VesselMake=jsonRes.vessel.vesselMake
			api_EngineHorsePower=jsonRes.vessel.engineHorsePower
			api_TenderSerialNumber=jsonRes.vessel.tenderSerialNumbers
			api_OutboardMotorSerialNumber=jsonRes.vessel.motorSerialNumbers

			apiWriter.println(api_ApplicationRiskId+","+api_RiskId+","+api_Reference+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_PolicyStart+","+api_PolicyEnd+","+api_VesselId+","+api_ImoNumber+","+api_VesselType+","+api_VesselName+","+api_CallSign+","+api_GrossTonnage+","+api_NoOfPassengers+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_TrademarkEngineModelNumber+","+api_VesselMake+","+api_EngineHorsePower+","+api_TenderSerialNumber+","+api_OutboardMotorSerialNumber)
			log.info "API response received as : "+api_ApplicationRiskId+","+api_RiskId+","+api_Reference+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_PolicyStart+","+api_PolicyEnd+","+api_VesselId+","+api_ImoNumber+","+api_VesselType+","+api_VesselName+","+api_CallSign+","+api_GrossTonnage+","+api_NoOfPassengers+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_TrademarkEngineModelNumber+","+api_VesselMake+","+api_EngineHorsePower+","+api_TenderSerialNumber+","+api_OutboardMotorSerialNumber
			
			if(
				api_ApplicationRiskId.toString().equals(sql_ApplicationRiskId.toString()) && 
				api_RiskId.toString().equals(sql_RiskId.toString()) && 
				api_Reference.toString().equals(sql_Reference.toString()) && 
				api_MemberId.toString().equals(sql_MemberId.toString()) && 
				api_MemberReference.toString().equals(sql_MemberReference.toString()) && 
				api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && 
				api_ApplicationId.toString().equals(sql_ApplicationId.toString()) && 
				api_ApplicationReference.toString().equals(sql_ApplicationReference.toString()) && 
				api_ApplicationType.toString().toUpperCase().equals(sql_ApplicationType.toString().toUpperCase()) && 
				api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && 
				api_VesselId.toString().equals(sql_VesselId.toString()) && 
				api_ImoNumber.toString().equals(sql_ImoNumber.toString()) && 
				api_VesselType.toString().equals(sql_VesselType.toString()) && 
				api_VesselName.toString().toUpperCase().equals(sql_VesselName.toString().toUpperCase()) && 
				api_CallSign.toString().equals(sql_CallSign.toString()) && 
				api_GrossTonnage.toString().equals(sql_GrossTonnage.toString()) && 
				api_NoOfPassengers.toString().equals(sql_NoOfPassengers.toString()) && 
				api_YearBuilt.toString().equals(sql_YearBuilt.toString()) && 
				api_FlagCountryCode.toString().toUpperCase().equals(sql_FlagCountryCode.toString().toUpperCase()) && 
				api_FlagCountryName.toString().toUpperCase().equals(sql_FlagCountryName.toString().toUpperCase()) && 
				api_PortOfRegistryCode.toString().toUpperCase().equals(sql_PortOfRegistryCode.toString().toUpperCase()) && 
				api_PortOfRegistryName.toString().toUpperCase().equals(sql_PortOfRegistryName.toString().toUpperCase()) && 
				api_RiskCategoryName.toString().toUpperCase().equals(sql_RiskCategoryName.toString().toUpperCase()) && 
				api_TrademarkEngineModelNumber.toString().equals(sql_TrademarkEngineModelNumber.toString()) && 
				api_VesselMake.toString().equals(sql_VesselMake.toString()) && 
				api_EngineHorsePower.toString().equals(sql_EngineHorsePower.toString()) && 
				api_TenderSerialNumber.toString().equals(sql_TenderSerialNumber.toString()) && 
				api_OutboardMotorSerialNumber.toString().equals(sql_OutboardMotorSerialNumber.toString())
			)
			{
				compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskId+","+api_RiskId+","+sql_Reference+","+api_Reference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_PolicyStart+","+api_PolicyStart+","+sql_PolicyEnd+","+api_PolicyEnd+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselType+","+api_VesselType+","+sql_VesselName+","+api_VesselName+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_NoOfPassengers+","+api_NoOfPassengers+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+sql_VesselMake+","+api_VesselMake+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TenderSerialNumber+","+api_TenderSerialNumber+","+sql_OutboardMotorSerialNumber+","+api_OutboardMotorSerialNumber+","+"Test Case Passed")
				log.info "Details are matching hence test case is passed"
			}
			else
			{	
				compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskId+","+api_RiskId+","+sql_Reference+","+api_Reference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_PolicyStart+","+api_PolicyStart+","+sql_PolicyEnd+","+api_PolicyEnd+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselType+","+api_VesselType+","+sql_VesselName+","+api_VesselName+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_NoOfPassengers+","+api_NoOfPassengers+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+sql_VesselMake+","+api_VesselMake+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TenderSerialNumber+","+api_TenderSerialNumber+","+sql_OutboardMotorSerialNumber+","+api_OutboardMotorSerialNumber+","+"Test Case Failed")
				log.info "Details are not matching hence test case is failed"
			}
		}
		else if(httpStatusCode.equals("401"))
		{
			apiWriter.println(sql_ApplicationRiskId+","+jsonRes.message)
			compareWriter.println(sql_ApplicationRiskId+","+jsonRes.message)
			log.info sql_ApplicationRiskId+","+jsonRes.message
		}
		else
		{
			log.info sql_ApplicationRiskId+","+"Failed API response received as :"+response
		}
		counter=counter+1;
		log.info "Record number "+counter+" is checked."
}

public String removeBracketsAndComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if (field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString = newDateTimeString.replace(":","-")
log.info "************Execution Finished at "+newDateTimeString+"************"
log.info "************Execution Finished for Risks By Application Risk Id************"]]></script></con:config></con:testStep><con:testStep type="groovy" name="NotWorking_LatestRiskMTA_RiskByApplicationRiskId" id="c884c715-0c1f-4755-bd8a-4c5852b81f5b" disabled="true"><con:settings/><con:config><script><![CDATA[import java.io.*;
import java.io.File 
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import groovy.json.JsonSlurper  
import groovy.sql.Sql
import java.util.HashMap
import groovy.json.*
import java.text.SimpleDateFormat

String fName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\config.properties'
File config=new File(fName)
Properties prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String username=prop['DB_User']
String Pwd=prop['DB_Pwd']  
String url=prop['DB_URL']

String tName='C:\\APITesting\\UTOM_API_JWT_TOKEN\\Config\\tc_Token.csv'
config=new File(tName)
//prop=new Properties()
config.withInputStream
{
	line->
	prop.load(line)
}
String token=prop['API_TOKEN']
//log.info token

def date = new Date()
def sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss")
String newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString=newDateTimeString.replace(":","-")
log.info "************Execution Started at "+newDateTimeString+"************"
log.info "************Execution Started for Risks By Application Risk Id************"

driver='com.microsoft.sqlserver.jdbc.SQLServerDriver'  
def con=Sql.newInstance(url,username,Pwd,driver) 
String sqlstmt=
"""
USE TOM
select DISTINCT
TOP 10
AR.Id as ApplicationRiskId, R.Id as RiskId, R.Reference, AMA.MemberAssured_Id as MemberId, MA.Reference as MemberReference, P.OrganisationName as MemberName,
AB.Id as ApplicationId, AB.Reference as ApplicationReference, AB.Discriminator as ApplicationType, [User].EmailAddress, 
AB.PolicyStart, AB.PolicyEnd, RV.Id as VesselId, RV.ImoNumber, VT.Name as VesselType, R.Name as VesselName, RV.CallSign, RV.GrossTonnage,
RV.NumberOfGuests as NoOfPassengers, RV.YearBuilt, CON.ShortCode as FlagCountryCode, CON.Name as FlagCountryName, RP.ShortCode as PortOfRegistryCode, 
RP.Name as PortOfRegistryName, RST.Name as RiskCategoryName, RV.TrademarkEngineModelNumber, VM.Name as VesselMake, RV.EngineHorsePower, RV.TenderSerialNumber, 
RV.OutboardMotorSerialNumber, RV.RiskVessel_EffectiveFrom
from ApplicationRisk AR 
inner join Risk R on R.Id = AR.Risk_Id
inner join ApplicationMemberAssured AMA on AMA.Id=AR.ApplicationMemberAssured_Id
inner join MemberAssured MA on MA.Id=AMA.MemberAssured_Id
inner join Party P on P.Id=MA.Party_Id
inner join ApplicationBase AB on AB.Id = AMA.Application_Id
join [user] on AB.Underwriter_Id = [User].Id
inner join History.RiskVessel RV on RV.Id= R.Id
inner join ref_RiskSubType RST on RST.Id=RV.Category_Id
inner join ref_VesselType VT on VT.Id=RV.Type_Id
left join ref_Country Con on Con.id = RV.Flag_Id
left join ref_Port RP on RP.Id = RV.PortOfRegistry_Id
right join ref_VesselMake VM on VM.Id = RV.VesselMake_Id
where AB.Discriminator not in ('AdditionalCoverQuote', 'RenewalQuote')
--and AR.Id=179030
order by 1 desc
"""
				
def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskByApplicationRiskId.csv"]
def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskByApplicationRiskId.csv"]
def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskByApplicationRiskId.csv"]

//def sqlResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\SQLResponse_RiskByApplicationRiskId"+newDateTimeString+".csv"]
//def apiResponseFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\TestData\\APIResponse_RiskByApplicationRiskId"+newDateTimeString+".csv"]
//def compareReportFile=["C:\\APITesting\\UTOM_API_JWT_TOKEN\\Results\\Comparision_RiskByApplicationRiskId"+newDateTimeString+".csv"]

def sqlFile = new File(sqlResponseFile[0])
def sqlWriter = sqlFile.newPrintWriter()

def apiFile = new File(apiResponseFile[0])
def apiWriter = apiFile.newPrintWriter()

def compareFile = new File(compareReportFile[0])
def compareWriter = compareFile.newPrintWriter()

sqlWriter.println("SQL_ApplicationRiskId"+","+"SQL_RiskId"+","+"SQL_Reference"+","+"SQL_MemberId"+","+"SQL_MemberReference"+","+"SQL_MemberName"+","+"SQL_ApplicationId"+","+"SQL_ApplicationReference"+","+"SQL_ApplicationType"+","+"SQL_EmailAddress"+","+"SQL_PolicyStart"+","+"SQL_PolicyEnd"+","+"SQL_VesselId"+","+"SQL_ImoNumber"+","+"SQL_VesselType"+","+"SQL_VesselName"+","+"SQL_CallSign"+","+"SQL_GrossTonnage"+","+"SQL_NoOfPassengers"+","+"SQL_YearBuilt"+","+"SQL_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"SQL_TrademarkEngineModelNumber"+","+"SQL_VesselMake"+","+"SQL_EngineHorsePower"+","+"SQL_TenderSerialNumber"+","+"SQL_OutboardMotorSerialNumber")
apiWriter.println("API_ApplicationRiskId"+","+"API_RiskId"+","+"API_Reference"+","+"API_MemberId"+","+"API_MemberReference"+","+"API_MemberName"+","+"API_ApplicationId"+","+"API_ApplicationReference"+","+"API_ApplicationType"+","+"API_EmailAddress"+","+"API_PolicyStart"+","+"API_PolicyEnd"+","+"API_VesselId"+","+"API_ImoNumber"+","+"API_VesselType"+","+"API_VesselName"+","+"API_CallSign"+","+"API_GrossTonnage"+","+"API_NoOfPassengers"+","+"API_YearBuilt"+","+"API_FlagCountryCode"+","+"API_FlagCountryName"+","+"API_PortOfRegistryCode"+","+"API_PortOfRegistryName"+","+"API_RiskCategoryName"+","+"API_TrademarkEngineModelNumber"+","+"API_VesselMake"+","+"API_EngineHorsePower"+","+"API_TenderSerialNumber"+","+"API_OutboardMotorSerialNumber")
compareWriter.println("SQL_ApplicationRiskId"+","+"API_ApplicationRiskId"+","+"SQL_RiskId"+","+"API_RiskId"+","+"SQL_Reference"+","+"API_Reference"+","+"SQL_MemberId"+","+"API_MemberId"+","+"SQL_MemberReference"+","+"API_MemberReference"+","+"SQL_MemberName"+","+"API_MemberName"+","+"SQL_ApplicationId"+","+"API_ApplicationId"+","+"SQL_ApplicationReference"+","+"API_ApplicationReference"+","+"SQL_ApplicationType"+","+"API_ApplicationType"+","+"SQL_EmailAddress"+","+"API_EmailAddress"+","+"SQL_PolicyStart"+","+"API_PolicyStart"+","+"SQL_PolicyEnd"+","+"API_PolicyEnd"+","+"SQL_VesselId"+","+"API_VesselId"+","+"SQL_ImoNumber"+","+"API_ImoNumber"+","+"SQL_VesselType"+","+"API_VesselType"+","+"SQL_VesselName"+","+"API_VesselName"+","+"SQL_CallSign"+","+"API_CallSign"+","+"SQL_GrossTonnage"+","+"API_GrossTonnage"+","+"SQL_NoOfPassengers"+","+"API_NoOfPassengers"+","+"SQL_YearBuilt"+","+"API_YearBuilt"+","+"SQL_FlagCountryCode"+","+"API_FlagCountryCode"+","+"SQL_FlagCountryName"+","+"API_FlagCountryName"+","+"SQL_PortOfRegistryCode"+","+"API_PortOfRegistryCode"+","+"SQL_PortOfRegistryName"+","+"API_PortOfRegistryName"+","+"SQL_RiskCategoryName"+","+"API_RiskCategoryName"+","+"SQL_TrademarkEngineModelNumber"+","+"API_TrademarkEngineModelNumber"+","+"SQL_VesselMake"+","+"API_VesselMake"+","+"SQL_EngineHorsePower"+","+"API_EngineHorsePower"+","+"SQL_TenderSerialNumber"+","+"API_TenderSerialNumber"+","+"SQL_OutboardMotorSerialNumber"+","+"API_OutboardMotorSerialNumber"+","+"Test Case Status")

def response= null
def jsonSlurper=null
def jsonRes=null
int counter = 0;
//String field=null

con.eachRow(sqlstmt)
{	
	row ->
		sql_ApplicationRiskId=row.ApplicationRiskId
		sql_RiskId=row.RiskId
		sql_Reference=row.Reference
		sql_MemberId=row.MemberId
		sql_MemberReference=row.MemberReference
		sql_MemberName=row.MemberName
		sql_MemberName=removeBracketsAndComma(sql_MemberName.toString())
		sql_ApplicationId=row.ApplicationId
		sql_ApplicationReference=row.ApplicationReference
		sql_ApplicationType=row.ApplicationType
		sql_EmailAddress=row.EmailAddress
		sql_PolicyStart=row.PolicyStart
		sql_PolicyEnd=row.PolicyEnd
		sql_VesselId=row.VesselId
		sql_ImoNumber=row.ImoNumber
		sql_VesselType=row.VesselType
		sql_VesselName=row.VesselName
		sql_VesselName=removeBracketsAndComma(sql_VesselName.toString())
		sql_CallSign=row.CallSign
		sql_GrossTonnage=row.GrossTonnage
		sql_NoOfPassengers=row.NoOfPassengers
		sql_YearBuilt=row.YearBuilt
		sql_FlagCountryCode=row.FlagCountryCode
		sql_FlagCountryCode=removeBracketsAndComma(sql_FlagCountryCode.toString())
		sql_FlagCountryName=row.FlagCountryName
		sql_FlagCountryName=removeBracketsAndComma(sql_FlagCountryName.toString())
		sql_PortOfRegistryCode=row.PortOfRegistryCode
		sql_PortOfRegistryCode=removeBracketsAndComma(sql_PortOfRegistryCode.toString())
		sql_PortOfRegistryName=row.PortOfRegistryName
		sql_PortOfRegistryName=removeBracketsAndComma(sql_PortOfRegistryName.toString())
		sql_RiskCategoryName=row.RiskCategoryName
		sql_TrademarkEngineModelNumber=row.TrademarkEngineModelNumber
		sql_VesselMake=row.VesselMake
		sql_EngineHorsePower=row.EngineHorsePower
		sql_TenderSerialNumber=row.TenderSerialNumber
		sql_OutboardMotorSerialNumber=row.OutboardMotorSerialNumber

		sqlWriter.println(sql_ApplicationRiskId+","+sql_RiskId+","+sql_Reference+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_EmailAddress+","+sql_PolicyStart+","+sql_PolicyEnd+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselType+","+sql_VesselName+","+sql_CallSign+","+sql_GrossTonnage+","+sql_NoOfPassengers+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+sql_VesselMake+","+sql_EngineHorsePower+","+sql_TenderSerialNumber+","+sql_OutboardMotorSerialNumber)
		log.info "SQL response is : "+sql_ApplicationRiskId+","+sql_RiskId+","+sql_Reference+","+sql_MemberId+","+sql_MemberReference+","+sql_MemberName+","+sql_ApplicationId+","+sql_ApplicationReference+","+sql_ApplicationType+","+sql_EmailAddress+","+sql_PolicyStart+","+sql_PolicyEnd+","+sql_VesselId+","+sql_ImoNumber+","+sql_VesselType+","+sql_VesselName+","+sql_CallSign+","+sql_GrossTonnage+","+sql_NoOfPassengers+","+sql_YearBuilt+","+sql_FlagCountryCode+","+sql_FlagCountryName+","+sql_PortOfRegistryCode+","+sql_PortOfRegistryName+","+sql_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+sql_VesselMake+","+sql_EngineHorsePower+","+sql_TenderSerialNumber+","+sql_OutboardMotorSerialNumber

		//Set the ApplicationRisk ID at test case level
		String appRiskId = sql_ApplicationRiskId
		testRunner.testCase.setPropertyValue("appRiskId", appRiskId)
		
		//Set token to test suite level
		testRunner.testCase.testSuite.setPropertyValue("token", token)

		//Run the test step to get response
		testRunner.runTestStepByName('RiskByAppRiskId')
		String req='${RiskByAppRiskId#Response}'
		response=context.expand(req)
		//log.info "API Response received is :"+response
		jsonSlurper=new JsonSlurper() 
		jsonRes=jsonSlurper.parseText(response)

		//Check the Status code of API response
		def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
		def httpResponseHeaders = context.testCase.testSteps["RiskByAppRiskId"].testRequest.response.responseHeaders
		def httpStatus = httpResponseHeaders["#status#"]
		def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]
		//log.info("HTTP status code: " + httpStatusCode)
	
		String error = response
		if(httpStatusCode.equals("200"))
		{
			api_ApplicationRiskId=jsonRes.applicationRiskId
			api_RiskId=jsonRes.id
			api_Reference=jsonRes.reference
			api_MemberId=jsonRes.memberId
			api_MemberReference=jsonRes.memberReference
			api_MemberName=jsonRes.memberName
			api_MemberName=removeBracketsAndComma(api_MemberName.toString())
			api_ApplicationId=jsonRes.applicationId
			api_ApplicationReference=jsonRes.applicationReference
			api_ApplicationType=jsonRes.applicationType
			api_EmailAddress=jsonRes.applicationUnderwriterEmail
			api_PolicyStart=jsonRes.policyStartDate
			api_PolicyEnd=jsonRes.policyEndDate
			api_VesselId=jsonRes.vessel.id
			api_ImoNumber=jsonRes.vessel.imoNumber
			api_VesselType=jsonRes.vessel.vesselType
			api_VesselName=jsonRes.vessel.vesselName
			api_VesselName=removeBracketsAndComma(api_VesselName.toString())
			api_CallSign=jsonRes.vessel.callSign
			api_GrossTonnage=jsonRes.vessel.grossTonnage
			api_NoOfPassengers=jsonRes.vessel.noOfPassengers
			api_YearBuilt=jsonRes.vessel.yearBuilt
			api_FlagCountryCode=jsonRes.vessel.flagCountryCode
			api_FlagCountryCode=removeBracketsAndComma(api_FlagCountryCode.toString())
			api_FlagCountryName=jsonRes.vessel.flagCountryName
			api_FlagCountryName=removeBracketsAndComma(api_FlagCountryName.toString())
			api_PortOfRegistryCode=jsonRes.vessel.portOfRegistryCode
			api_PortOfRegistryCode=removeBracketsAndComma(api_PortOfRegistryCode.toString())
			api_PortOfRegistryName=jsonRes.vessel.portOfRegistryName
			api_PortOfRegistryName=removeBracketsAndComma(api_PortOfRegistryName.toString())
			api_RiskCategoryName=jsonRes.vessel.riskCategoryName
			api_TrademarkEngineModelNumber=jsonRes.vessel.trademarkAndEngineModel
			api_VesselMake=jsonRes.vessel.vesselMake
			api_EngineHorsePower=jsonRes.vessel.engineHorsePower
			api_TenderSerialNumber=jsonRes.vessel.tenderSerialNumbers
			api_OutboardMotorSerialNumber=jsonRes.vessel.motorSerialNumbers

			apiWriter.println(api_ApplicationRiskId+","+api_RiskId+","+api_Reference+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_PolicyStart+","+api_PolicyEnd+","+api_VesselId+","+api_ImoNumber+","+api_VesselType+","+api_VesselName+","+api_CallSign+","+api_GrossTonnage+","+api_NoOfPassengers+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_TrademarkEngineModelNumber+","+api_VesselMake+","+api_EngineHorsePower+","+api_TenderSerialNumber+","+api_OutboardMotorSerialNumber)
			log.info "API response received as : "+api_ApplicationRiskId+","+api_RiskId+","+api_Reference+","+api_MemberId+","+api_MemberReference+","+api_MemberName+","+api_ApplicationId+","+api_ApplicationReference+","+api_ApplicationType+","+api_EmailAddress+","+api_PolicyStart+","+api_PolicyEnd+","+api_VesselId+","+api_ImoNumber+","+api_VesselType+","+api_VesselName+","+api_CallSign+","+api_GrossTonnage+","+api_NoOfPassengers+","+api_YearBuilt+","+api_FlagCountryCode+","+api_FlagCountryName+","+api_PortOfRegistryCode+","+api_PortOfRegistryName+","+api_RiskCategoryName+","+api_TrademarkEngineModelNumber+","+api_VesselMake+","+api_EngineHorsePower+","+api_TenderSerialNumber+","+api_OutboardMotorSerialNumber
			
			if(
				api_ApplicationRiskId.toString().equals(sql_ApplicationRiskId.toString()) && 
				api_RiskId.toString().equals(sql_RiskId.toString()) && 
				api_Reference.toString().equals(sql_Reference.toString()) && 
				api_MemberId.toString().equals(sql_MemberId.toString()) && 
				api_MemberReference.toString().equals(sql_MemberReference.toString()) && 
				api_MemberName.toString().toUpperCase().equals(sql_MemberName.toString().toUpperCase()) && 
				api_ApplicationId.toString().equals(sql_ApplicationId.toString()) && 
				api_ApplicationReference.toString().equals(sql_ApplicationReference.toString()) && 
				api_ApplicationType.toString().toUpperCase().equals(sql_ApplicationType.toString().toUpperCase()) && 
				api_EmailAddress.toString().toUpperCase().equals(sql_EmailAddress.toString().toUpperCase()) && 
				api_VesselId.toString().equals(sql_VesselId.toString()) && 
				api_ImoNumber.toString().equals(sql_ImoNumber.toString()) && 
				api_VesselType.toString().equals(sql_VesselType.toString()) && 
				api_VesselName.toString().toUpperCase().equals(sql_VesselName.toString().toUpperCase()) && 
				api_CallSign.toString().equals(sql_CallSign.toString()) && 
				api_GrossTonnage.toString().equals(sql_GrossTonnage.toString()) && 
				api_NoOfPassengers.toString().equals(sql_NoOfPassengers.toString()) && 
				api_YearBuilt.toString().equals(sql_YearBuilt.toString()) && 
				api_FlagCountryCode.toString().toUpperCase().equals(sql_FlagCountryCode.toString().toUpperCase()) && 
				api_FlagCountryName.toString().toUpperCase().equals(sql_FlagCountryName.toString().toUpperCase()) && 
				api_PortOfRegistryCode.toString().toUpperCase().equals(sql_PortOfRegistryCode.toString().toUpperCase()) && 
				api_PortOfRegistryName.toString().toUpperCase().equals(sql_PortOfRegistryName.toString().toUpperCase()) && 
				api_RiskCategoryName.toString().toUpperCase().equals(sql_RiskCategoryName.toString().toUpperCase()) && 
				api_TrademarkEngineModelNumber.toString().equals(sql_TrademarkEngineModelNumber.toString()) && 
				api_VesselMake.toString().equals(sql_VesselMake.toString()) && 
				api_EngineHorsePower.toString().equals(sql_EngineHorsePower.toString()) && 
				api_TenderSerialNumber.toString().equals(sql_TenderSerialNumber.toString()) && 
				api_OutboardMotorSerialNumber.toString().equals(sql_OutboardMotorSerialNumber.toString())
			)
			{
				compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskId+","+api_RiskId+","+sql_Reference+","+api_Reference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_PolicyStart+","+api_PolicyStart+","+sql_PolicyEnd+","+api_PolicyEnd+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselType+","+api_VesselType+","+sql_VesselName+","+api_VesselName+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_NoOfPassengers+","+api_NoOfPassengers+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+sql_VesselMake+","+api_VesselMake+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TenderSerialNumber+","+api_TenderSerialNumber+","+sql_OutboardMotorSerialNumber+","+api_OutboardMotorSerialNumber+","+"Test Case Passed")
				log.info "Details are matching hence test case is passed"
			}
			else
			{	
				compareWriter.println(sql_ApplicationRiskId+","+api_ApplicationRiskId+","+sql_RiskId+","+api_RiskId+","+sql_Reference+","+api_Reference+","+sql_MemberId+","+api_MemberId+","+sql_MemberReference+","+api_MemberReference+","+sql_MemberName+","+api_MemberName+","+sql_ApplicationId+","+api_ApplicationId+","+sql_ApplicationReference+","+api_ApplicationReference+","+sql_ApplicationType+","+api_ApplicationType+","+sql_EmailAddress+","+api_EmailAddress+","+sql_PolicyStart+","+api_PolicyStart+","+sql_PolicyEnd+","+api_PolicyEnd+","+sql_VesselId+","+api_VesselId+","+sql_ImoNumber+","+api_ImoNumber+","+sql_VesselType+","+api_VesselType+","+sql_VesselName+","+api_VesselName+","+sql_CallSign+","+api_CallSign+","+sql_GrossTonnage+","+api_GrossTonnage+","+sql_NoOfPassengers+","+api_NoOfPassengers+","+sql_YearBuilt+","+api_YearBuilt+","+sql_FlagCountryCode+","+api_FlagCountryCode+","+sql_FlagCountryName+","+api_FlagCountryName+","+sql_PortOfRegistryCode+","+api_PortOfRegistryCode+","+sql_PortOfRegistryName+","+api_PortOfRegistryName+","+sql_RiskCategoryName+","+api_RiskCategoryName+","+sql_TrademarkEngineModelNumber+","+api_TrademarkEngineModelNumber+","+sql_VesselMake+","+api_VesselMake+","+sql_EngineHorsePower+","+api_EngineHorsePower+","+sql_TenderSerialNumber+","+api_TenderSerialNumber+","+sql_OutboardMotorSerialNumber+","+api_OutboardMotorSerialNumber+","+"Test Case Failed")
				log.info "Details are not matching hence test case is failed"
			}
		}
		else if(httpStatusCode.equals("401"))
		{
			apiWriter.println(sql_ApplicationRiskId+","+jsonRes.message)
			compareWriter.println(sql_ApplicationRiskId+","+jsonRes.message)
			log.info sql_ApplicationRiskId+","+jsonRes.message
		}
		else
		{
			log.info sql_ApplicationRiskId+","+"Failed API response received as :"+response
		}
		counter=counter+1;
		log.info "Record number "+counter+" is checked."
}

public String removeBracketsAndComma(String field)
{
	if(field!=null)
	{
		if(field.contains("["))
		{
			field=field.replace("[","")
			field=field.replace("]","")
		}
		if (field.contains(","))
		{
			field=field.replace(","," ")
		}
	}
	return field
}

sqlWriter.flush()
apiWriter.flush()
compareWriter.flush()

sqlWriter.close()
apiWriter.close()
compareWriter.close()

newDateTimeString=sdf.format(date)
newDateTimeString = newDateTimeString.replace("/", "-")
newDateTimeString = newDateTimeString.replace(":","-")
log.info "************Execution Finished at "+newDateTimeString+"************"
log.info "************Execution Finished for Risks By Application Risk Id************"]]></script></con:config></con:testStep><con:properties><con:property><con:name>appRiskId</con:name><con:value>179085</con:value></con:property></con:properties></con:testCase><con:properties><con:property><con:name>token</con:name><con:value>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImNuNnRXOElubmRJVzJKVGtqU2tkTlFQakR1UXo3cmMwQ0pEbkpyRlhKVjgifQ.eyJpc3MiOiJodHRwczovL3NoaXBvd25lcnNjb3VrZGV2YjJjLmIyY2xvZ2luLmNvbS81YzJlY2M4OC1kNmNlLTRkNDEtYThhMi05ZTAzMTc0N2M3ZTYvdjIuMC8iLCJleHAiOjE2Mjc5OTY4NzEsIm5iZiI6MTYyNzk5MzI3MSwiYXVkIjoiZTQ4NTNjODItNjhjYS00OTk5LTk3NjAtZmZjODkxODk4NGJhIiwic3ViIjoiNzdmM2YyOGEtZjQ3MS00MTU4LWI4ZTAtNjYwNTY2OTExNGYyIiwiZ3JvdXBzIjpbIlVuZGVyd3JpdGluZyJdLCJzY3AiOiJ0cmFkaW5nLWNlcnRzLndyaXRlIGRvY3VtZW50LnJlYWQgdHJhZGluZy1jZXJ0cy5yZWFkIiwiYXpwIjoiZmVlNTM0NTAtZDgzNC00ZTQwLWEzYWMtOWMyYzI0MmRiYjMwIiwidmVyIjoiMS4wIiwiaWF0IjoxNjI3OTkzMjcxfQ.oCr8vlh2MuN4ucAEV6Hmvb4WnIW9BqVvzPvoWov9i8DdmMl4y_Cn5ST-vb_tnmtSbTLy-KRdajveV8iKQzyEr9VlJOmZ1qWpL7__QJKxGRrI6glSxbttYHomWt3VHpC-xdHWKWE0xqqupqAZxVNoON8mm_xoykabJMUgFY9P-5p1P1DAOZnBZyt_5AQcyNlZ2Onz4Wu_PmdYfBr6cIzFLtYJ0ajVrn5LscXtcg3jk4UQ7pUPnHwlC9SUQeNBo6bPFLksZNwjo_b6uQaP2wcPbZljFZF7xJEqWnrpQOK-H5Fw6MjU1xizl92F3p8MTrilE8xTPM3chwnTlJ_Teg9PAg</con:value></con:property></con:properties></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer><con:oAuth2Profile><con:name>Profile_Broker</con:name><con:accessToken>eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6ImNuNnRXOElubmRJVzJKVGtqU2tkTlFQakR1UXo3cmMwQ0pEbkpyRlhKVjgifQ.eyJpc3MiOiJodHRwczovL3NoaXBvd25lcnNjb3VrZGV2YjJjLmIyY2xvZ2luLmNvbS81YzJlY2M4OC1kNmNlLTRkNDEtYThhMi05ZTAzMTc0N2M3ZTYvdjIuMC8iLCJleHAiOjE2MjgxNDM0NjgsIm5iZiI6MTYyODEzOTg2OCwiYXVkIjoiZTQ4NTNjODItNjhjYS00OTk5LTk3NjAtZmZjODkxODk4NGJhIiwic3ViIjoiNzdmM2YyOGEtZjQ3MS00MTU4LWI4ZTAtNjYwNTY2OTExNGYyIiwiZ3JvdXBzIjpbIlVuZGVyd3JpdGluZyJdLCJzY3AiOiJ0cmFkaW5nLWNlcnRzLndyaXRlIGRvY3VtZW50LnJlYWQgdHJhZGluZy1jZXJ0cy5yZWFkIiwiYXpwIjoiZmVlNTM0NTAtZDgzNC00ZTQwLWEzYWMtOWMyYzI0MmRiYjMwIiwidmVyIjoiMS4wIiwiaWF0IjoxNjI4MTM5ODY4fQ.DQ2-E7FviFEiZusUDxI7F0rZa5SuVhQA2UWHAOxJ2anWSoxwtryQF80woqpDFyc3vmAH5FMbN28yE5uaMfZN8fhEQr13D7SEeLnocN4boJWnAIH6W2R0c_uPtuJmPlSxjJK2iVGvzU_IcrwqEDwmTnQ-5zFU_7lWgvJ6NgYkLiHPBihO4dUfjwff40cLHakTI0auc4bUszvs_7Qv79VnC_K4gsNyUsx-KGamuFOm4QVXSCa1LSvnmlUsP366O2Og7jZCR7zzMQ0Qx8s3_y_O8QFCUgeIZxqAlch8KJ3-1hzwO31IPEeVPlO9UflVM3MV73qlT8T-1e3UHMlhcClkhw</con:accessToken><con:accessTokenPosition>HEADER</con:accessTokenPosition><con:oAuth2Flow>AUTHORIZATION_CODE_GRANT</con:oAuth2Flow><con:refreshAccessTokenMethod>AUTOMATIC</con:refreshAccessTokenMethod><con:accessTokenStatus>UNKNOWN</con:accessTokenStatus><con:accessTokenStartingStatus>ENTERED_MANUALLY</con:accessTokenStartingStatus></con:oAuth2Profile></con:oAuth2ProfileContainer><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>